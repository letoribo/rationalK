//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;
var Template = Package.templating.Template;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var HTML = Package.htmljs.HTML;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/maazalik:highcharts/lib/highcharts.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// ==ClosureCompiler==                                                                                                 // 1
// @compilation_level SIMPLE_OPTIMIZATIONS                                                                             // 2
                                                                                                                       // 3
/**                                                                                                                    // 4
 * @license Highcharts JS v4.1.7 (2015-06-26)                                                                          // 5
 *                                                                                                                     // 6
 * (c) 2009-2014 Torstein Honsi                                                                                        // 7
 *                                                                                                                     // 8
 * License: www.highcharts.com/license                                                                                 // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
// JSLint options:                                                                                                     // 12
/*global Highcharts, HighchartsAdapter, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console, each, grep */
/*jslint ass: true, sloppy: true, forin: true, plusplus: true, nomen: true, vars: true, regexp: true, newcap: true, browser: true, continue: true, white: true */
(function () {                                                                                                         // 15
// encapsulated variables                                                                                              // 16
var UNDEFINED,                                                                                                         // 17
	doc = document,                                                                                                       // 18
	win = window,                                                                                                         // 19
	math = Math,                                                                                                          // 20
	mathRound = math.round,                                                                                               // 21
	mathFloor = math.floor,                                                                                               // 22
	mathCeil = math.ceil,                                                                                                 // 23
	mathMax = math.max,                                                                                                   // 24
	mathMin = math.min,                                                                                                   // 25
	mathAbs = math.abs,                                                                                                   // 26
	mathCos = math.cos,                                                                                                   // 27
	mathSin = math.sin,                                                                                                   // 28
	mathPI = math.PI,                                                                                                     // 29
	deg2rad = mathPI * 2 / 360,                                                                                           // 30
                                                                                                                       // 31
                                                                                                                       // 32
	// some variables                                                                                                     // 33
	userAgent = navigator.userAgent,                                                                                      // 34
	isOpera = win.opera,                                                                                                  // 35
	isIE = /(msie|trident)/i.test(userAgent) && !isOpera,                                                                 // 36
	docMode8 = doc.documentMode === 8,                                                                                    // 37
	isWebKit = /AppleWebKit/.test(userAgent),                                                                             // 38
	isFirefox = /Firefox/.test(userAgent),                                                                                // 39
	isTouchDevice = /(Mobile|Android|Windows Phone)/.test(userAgent),                                                     // 40
	SVG_NS = 'http://www.w3.org/2000/svg',                                                                                // 41
	hasSVG = !!doc.createElementNS && !!doc.createElementNS(SVG_NS, 'svg').createSVGRect,                                 // 42
	hasBidiBug = isFirefox && parseInt(userAgent.split('Firefox/')[1], 10) < 4, // issue #38                              // 43
	useCanVG = !hasSVG && !isIE && !!doc.createElement('canvas').getContext,                                              // 44
	Renderer,                                                                                                             // 45
	hasTouch,                                                                                                             // 46
	symbolSizes = {},                                                                                                     // 47
	idCounter = 0,                                                                                                        // 48
	garbageBin,                                                                                                           // 49
	defaultOptions,                                                                                                       // 50
	dateFormat, // function                                                                                               // 51
	globalAnimation,                                                                                                      // 52
	pathAnim,                                                                                                             // 53
	timeUnits,                                                                                                            // 54
	noop = function () { return UNDEFINED; },                                                                             // 55
	charts = [],                                                                                                          // 56
	chartCount = 0,                                                                                                       // 57
	PRODUCT = 'Highcharts',                                                                                               // 58
	VERSION = '4.1.7',                                                                                                    // 59
                                                                                                                       // 60
	// some constants for frequently used strings                                                                         // 61
	DIV = 'div',                                                                                                          // 62
	ABSOLUTE = 'absolute',                                                                                                // 63
	RELATIVE = 'relative',                                                                                                // 64
	HIDDEN = 'hidden',                                                                                                    // 65
	PREFIX = 'highcharts-',                                                                                               // 66
	VISIBLE = 'visible',                                                                                                  // 67
	PX = 'px',                                                                                                            // 68
	NONE = 'none',                                                                                                        // 69
	M = 'M',                                                                                                              // 70
	L = 'L',                                                                                                              // 71
	numRegex = /^[0-9]+$/,                                                                                                // 72
	NORMAL_STATE = '',                                                                                                    // 73
	HOVER_STATE = 'hover',                                                                                                // 74
	SELECT_STATE = 'select',                                                                                              // 75
	marginNames = ['plotTop', 'marginRight', 'marginBottom', 'plotLeft'],                                                 // 76
	                                                                                                                      // 77
	// Object for extending Axis                                                                                          // 78
	AxisPlotLineOrBandExtension,                                                                                          // 79
                                                                                                                       // 80
	// constants for attributes                                                                                           // 81
	STROKE_WIDTH = 'stroke-width',                                                                                        // 82
                                                                                                                       // 83
	// time methods, changed based on whether or not UTC is used                                                          // 84
	Date,  // Allow using a different Date class                                                                          // 85
	makeTime,                                                                                                             // 86
	timezoneOffset,                                                                                                       // 87
	getTimezoneOffset,                                                                                                    // 88
	getMinutes,                                                                                                           // 89
	getHours,                                                                                                             // 90
	getDay,                                                                                                               // 91
	getDate,                                                                                                              // 92
	getMonth,                                                                                                             // 93
	getFullYear,                                                                                                          // 94
	setMilliseconds,                                                                                                      // 95
	setSeconds,                                                                                                           // 96
	setMinutes,                                                                                                           // 97
	setHours,                                                                                                             // 98
	setDate,                                                                                                              // 99
	setMonth,                                                                                                             // 100
	setFullYear,                                                                                                          // 101
                                                                                                                       // 102
                                                                                                                       // 103
	// lookup over the types and the associated classes                                                                   // 104
	seriesTypes = {},                                                                                                     // 105
	Highcharts;                                                                                                           // 106
                                                                                                                       // 107
// The Highcharts namespace                                                                                            // 108
Highcharts = win.Highcharts = win.Highcharts ? error(16, true) : {};                                                   // 109
                                                                                                                       // 110
Highcharts.seriesTypes = seriesTypes;                                                                                  // 111
                                                                                                                       // 112
/**                                                                                                                    // 113
 * Extend an object with the members of another                                                                        // 114
 * @param {Object} a The object to be extended                                                                         // 115
 * @param {Object} b The object to add to the first one                                                                // 116
 */                                                                                                                    // 117
var extend = Highcharts.extend = function (a, b) {                                                                     // 118
	var n;                                                                                                                // 119
	if (!a) {                                                                                                             // 120
		a = {};                                                                                                              // 121
	}                                                                                                                     // 122
	for (n in b) {                                                                                                        // 123
		a[n] = b[n];                                                                                                         // 124
	}                                                                                                                     // 125
	return a;                                                                                                             // 126
};                                                                                                                     // 127
	                                                                                                                      // 128
/**                                                                                                                    // 129
 * Deep merge two or more objects and return a third object. If the first argument is                                  // 130
 * true, the contents of the second object is copied into the first object.                                            // 131
 * Previously this function redirected to jQuery.extend(true), but this had two limitations.                           // 132
 * First, it deep merged arrays, which lead to workarounds in Highcharts. Second,                                      // 133
 * it copied properties from extended prototypes.                                                                      // 134
 */                                                                                                                    // 135
function merge() {                                                                                                     // 136
	var i,                                                                                                                // 137
		args = arguments,                                                                                                    // 138
		len,                                                                                                                 // 139
		ret = {},                                                                                                            // 140
		doCopy = function (copy, original) {                                                                                 // 141
			var value, key;                                                                                                     // 142
                                                                                                                       // 143
			// An object is replacing a primitive                                                                               // 144
			if (typeof copy !== 'object') {                                                                                     // 145
				copy = {};                                                                                                         // 146
			}                                                                                                                   // 147
                                                                                                                       // 148
			for (key in original) {                                                                                             // 149
				if (original.hasOwnProperty(key)) {                                                                                // 150
					value = original[key];                                                                                            // 151
                                                                                                                       // 152
					// Copy the contents of objects, but not arrays or DOM nodes                                                      // 153
					if (value && typeof value === 'object' && Object.prototype.toString.call(value) !== '[object Array]' &&           // 154
							key !== 'renderTo' && typeof value.nodeType !== 'number') {                                                     // 155
						copy[key] = doCopy(copy[key] || {}, value);                                                                      // 156
				                                                                                                                   // 157
					// Primitives and arrays are copied over directly                                                                 // 158
					} else {                                                                                                          // 159
						copy[key] = original[key];                                                                                       // 160
					}                                                                                                                 // 161
				}                                                                                                                  // 162
			}                                                                                                                   // 163
			return copy;                                                                                                        // 164
		};                                                                                                                   // 165
                                                                                                                       // 166
	// If first argument is true, copy into the existing object. Used in setOptions.                                      // 167
	if (args[0] === true) {                                                                                               // 168
		ret = args[1];                                                                                                       // 169
		args = Array.prototype.slice.call(args, 2);                                                                          // 170
	}                                                                                                                     // 171
                                                                                                                       // 172
	// For each argument, extend the return                                                                               // 173
	len = args.length;                                                                                                    // 174
	for (i = 0; i < len; i++) {                                                                                           // 175
		ret = doCopy(ret, args[i]);                                                                                          // 176
	}                                                                                                                     // 177
                                                                                                                       // 178
	return ret;                                                                                                           // 179
}                                                                                                                      // 180
                                                                                                                       // 181
/**                                                                                                                    // 182
 * Shortcut for parseInt                                                                                               // 183
 * @param {Object} s                                                                                                   // 184
 * @param {Number} mag Magnitude                                                                                       // 185
 */                                                                                                                    // 186
function pInt(s, mag) {                                                                                                // 187
	return parseInt(s, mag || 10);                                                                                        // 188
}                                                                                                                      // 189
                                                                                                                       // 190
/**                                                                                                                    // 191
 * Check for string                                                                                                    // 192
 * @param {Object} s                                                                                                   // 193
 */                                                                                                                    // 194
function isString(s) {                                                                                                 // 195
	return typeof s === 'string';                                                                                         // 196
}                                                                                                                      // 197
                                                                                                                       // 198
/**                                                                                                                    // 199
 * Check for object                                                                                                    // 200
 * @param {Object} obj                                                                                                 // 201
 */                                                                                                                    // 202
function isObject(obj) {                                                                                               // 203
	return obj && typeof obj === 'object';                                                                                // 204
}                                                                                                                      // 205
                                                                                                                       // 206
/**                                                                                                                    // 207
 * Check for array                                                                                                     // 208
 * @param {Object} obj                                                                                                 // 209
 */                                                                                                                    // 210
function isArray(obj) {                                                                                                // 211
	return Object.prototype.toString.call(obj) === '[object Array]';                                                      // 212
}                                                                                                                      // 213
                                                                                                                       // 214
/**                                                                                                                    // 215
 * Check for number                                                                                                    // 216
 * @param {Object} n                                                                                                   // 217
 */                                                                                                                    // 218
function isNumber(n) {                                                                                                 // 219
	return typeof n === 'number';                                                                                         // 220
}                                                                                                                      // 221
                                                                                                                       // 222
function log2lin(num) {                                                                                                // 223
	return math.log(num) / math.LN10;                                                                                     // 224
}                                                                                                                      // 225
function lin2log(num) {                                                                                                // 226
	return math.pow(10, num);                                                                                             // 227
}                                                                                                                      // 228
                                                                                                                       // 229
/**                                                                                                                    // 230
 * Remove last occurence of an item from an array                                                                      // 231
 * @param {Array} arr                                                                                                  // 232
 * @param {Mixed} item                                                                                                 // 233
 */                                                                                                                    // 234
function erase(arr, item) {                                                                                            // 235
	var i = arr.length;                                                                                                   // 236
	while (i--) {                                                                                                         // 237
		if (arr[i] === item) {                                                                                               // 238
			arr.splice(i, 1);                                                                                                   // 239
			break;                                                                                                              // 240
		}                                                                                                                    // 241
	}                                                                                                                     // 242
	//return arr;                                                                                                         // 243
}                                                                                                                      // 244
                                                                                                                       // 245
/**                                                                                                                    // 246
 * Returns true if the object is not null or undefined. Like MooTools' $.defined.                                      // 247
 * @param {Object} obj                                                                                                 // 248
 */                                                                                                                    // 249
function defined(obj) {                                                                                                // 250
	return obj !== UNDEFINED && obj !== null;                                                                             // 251
}                                                                                                                      // 252
                                                                                                                       // 253
/**                                                                                                                    // 254
 * Set or get an attribute or an object of attributes. Can't use jQuery attr because                                   // 255
 * it attempts to set expando properties on the SVG element, which is not allowed.                                     // 256
 *                                                                                                                     // 257
 * @param {Object} elem The DOM element to receive the attribute(s)                                                    // 258
 * @param {String|Object} prop The property or an abject of key-value pairs                                            // 259
 * @param {String} value The value if a single property is set                                                         // 260
 */                                                                                                                    // 261
function attr(elem, prop, value) {                                                                                     // 262
	var key,                                                                                                              // 263
		ret;                                                                                                                 // 264
                                                                                                                       // 265
	// if the prop is a string                                                                                            // 266
	if (isString(prop)) {                                                                                                 // 267
		// set the value                                                                                                     // 268
		if (defined(value)) {                                                                                                // 269
			elem.setAttribute(prop, value);                                                                                     // 270
                                                                                                                       // 271
		// get the value                                                                                                     // 272
		} else if (elem && elem.getAttribute) { // elem not defined when printing pie demo...                                // 273
			ret = elem.getAttribute(prop);                                                                                      // 274
		}                                                                                                                    // 275
                                                                                                                       // 276
	// else if prop is defined, it is a hash of key/value pairs                                                           // 277
	} else if (defined(prop) && isObject(prop)) {                                                                         // 278
		for (key in prop) {                                                                                                  // 279
			elem.setAttribute(key, prop[key]);                                                                                  // 280
		}                                                                                                                    // 281
	}                                                                                                                     // 282
	return ret;                                                                                                           // 283
}                                                                                                                      // 284
/**                                                                                                                    // 285
 * Check if an element is an array, and if not, make it into an array. Like                                            // 286
 * MooTools' $.splat.                                                                                                  // 287
 */                                                                                                                    // 288
function splat(obj) {                                                                                                  // 289
	return isArray(obj) ? obj : [obj];                                                                                    // 290
}                                                                                                                      // 291
                                                                                                                       // 292
                                                                                                                       // 293
/**                                                                                                                    // 294
 * Return the first value that is defined. Like MooTools' $.pick.                                                      // 295
 */                                                                                                                    // 296
var pick = Highcharts.pick = function () {                                                                             // 297
	var args = arguments,                                                                                                 // 298
		i,                                                                                                                   // 299
		arg,                                                                                                                 // 300
		length = args.length;                                                                                                // 301
	for (i = 0; i < length; i++) {                                                                                        // 302
		arg = args[i];                                                                                                       // 303
		if (arg !== UNDEFINED && arg !== null) {                                                                             // 304
			return arg;                                                                                                         // 305
		}                                                                                                                    // 306
	}                                                                                                                     // 307
};                                                                                                                     // 308
                                                                                                                       // 309
/**                                                                                                                    // 310
 * Set CSS on a given element                                                                                          // 311
 * @param {Object} el                                                                                                  // 312
 * @param {Object} styles Style object with camel case property names                                                  // 313
 */                                                                                                                    // 314
function css(el, styles) {                                                                                             // 315
	if (isIE && !hasSVG) { // #2686                                                                                       // 316
		if (styles && styles.opacity !== UNDEFINED) {                                                                        // 317
			styles.filter = 'alpha(opacity=' + (styles.opacity * 100) + ')';                                                    // 318
		}                                                                                                                    // 319
	}                                                                                                                     // 320
	extend(el.style, styles);                                                                                             // 321
}                                                                                                                      // 322
                                                                                                                       // 323
/**                                                                                                                    // 324
 * Utility function to create element with attributes and styles                                                       // 325
 * @param {Object} tag                                                                                                 // 326
 * @param {Object} attribs                                                                                             // 327
 * @param {Object} styles                                                                                              // 328
 * @param {Object} parent                                                                                              // 329
 * @param {Object} nopad                                                                                               // 330
 */                                                                                                                    // 331
function createElement(tag, attribs, styles, parent, nopad) {                                                          // 332
	var el = doc.createElement(tag);                                                                                      // 333
	if (attribs) {                                                                                                        // 334
		extend(el, attribs);                                                                                                 // 335
	}                                                                                                                     // 336
	if (nopad) {                                                                                                          // 337
		css(el, {padding: 0, border: NONE, margin: 0});                                                                      // 338
	}                                                                                                                     // 339
	if (styles) {                                                                                                         // 340
		css(el, styles);                                                                                                     // 341
	}                                                                                                                     // 342
	if (parent) {                                                                                                         // 343
		parent.appendChild(el);                                                                                              // 344
	}                                                                                                                     // 345
	return el;                                                                                                            // 346
}                                                                                                                      // 347
                                                                                                                       // 348
/**                                                                                                                    // 349
 * Extend a prototyped class by new members                                                                            // 350
 * @param {Object} parent                                                                                              // 351
 * @param {Object} members                                                                                             // 352
 */                                                                                                                    // 353
function extendClass(parent, members) {                                                                                // 354
	var object = function () { return UNDEFINED; };                                                                       // 355
	object.prototype = new parent();                                                                                      // 356
	extend(object.prototype, members);                                                                                    // 357
	return object;                                                                                                        // 358
}                                                                                                                      // 359
                                                                                                                       // 360
/**                                                                                                                    // 361
 * Pad a string to a given length by adding 0 to the beginning                                                         // 362
 * @param {Number} number                                                                                              // 363
 * @param {Number} length                                                                                              // 364
 */                                                                                                                    // 365
function pad(number, length) {                                                                                         // 366
	// Create an array of the remaining length +1 and join it with 0's                                                    // 367
	return new Array((length || 2) + 1 - String(number).length).join(0) + number;                                         // 368
}                                                                                                                      // 369
                                                                                                                       // 370
/**                                                                                                                    // 371
 * Return a length based on either the integer value, or a percentage of a base.                                       // 372
 */                                                                                                                    // 373
function relativeLength (value, base) {                                                                                // 374
	return (/%$/).test(value) ? base * parseFloat(value) / 100 : parseFloat(value);                                       // 375
}                                                                                                                      // 376
                                                                                                                       // 377
/**                                                                                                                    // 378
 * Wrap a method with extended functionality, preserving the original function                                         // 379
 * @param {Object} obj The context object that the method belongs to                                                   // 380
 * @param {String} method The name of the method to extend                                                             // 381
 * @param {Function} func A wrapper function callback. This function is called with the same arguments                 // 382
 * as the original function, except that the original function is unshifted and passed as the first                    // 383
 * argument.                                                                                                           // 384
 */                                                                                                                    // 385
var wrap = Highcharts.wrap = function (obj, method, func) {                                                            // 386
	var proceed = obj[method];                                                                                            // 387
	obj[method] = function () {                                                                                           // 388
		var args = Array.prototype.slice.call(arguments);                                                                    // 389
		args.unshift(proceed);                                                                                               // 390
		return func.apply(this, args);                                                                                       // 391
	};                                                                                                                    // 392
};                                                                                                                     // 393
                                                                                                                       // 394
                                                                                                                       // 395
function getTZOffset(timestamp) {                                                                                      // 396
	return ((getTimezoneOffset && getTimezoneOffset(timestamp)) || timezoneOffset || 0) * 60000;                          // 397
}                                                                                                                      // 398
                                                                                                                       // 399
/**                                                                                                                    // 400
 * Based on http://www.php.net/manual/en/function.strftime.php                                                         // 401
 * @param {String} format                                                                                              // 402
 * @param {Number} timestamp                                                                                           // 403
 * @param {Boolean} capitalize                                                                                         // 404
 */                                                                                                                    // 405
dateFormat = function (format, timestamp, capitalize) {                                                                // 406
	if (!defined(timestamp) || isNaN(timestamp)) {                                                                        // 407
		return 'Invalid date';                                                                                               // 408
	}                                                                                                                     // 409
	format = pick(format, '%Y-%m-%d %H:%M:%S');                                                                           // 410
                                                                                                                       // 411
	var date = new Date(timestamp - getTZOffset(timestamp)),                                                              // 412
		key, // used in for constuct below                                                                                   // 413
		// get the basic time values                                                                                         // 414
		hours = date[getHours](),                                                                                            // 415
		day = date[getDay](),                                                                                                // 416
		dayOfMonth = date[getDate](),                                                                                        // 417
		month = date[getMonth](),                                                                                            // 418
		fullYear = date[getFullYear](),                                                                                      // 419
		lang = defaultOptions.lang,                                                                                          // 420
		langWeekdays = lang.weekdays,                                                                                        // 421
                                                                                                                       // 422
		// List all format keys. Custom formats can be added from the outside.                                               // 423
		replacements = extend({                                                                                              // 424
                                                                                                                       // 425
			// Day                                                                                                              // 426
			'a': langWeekdays[day].substr(0, 3), // Short weekday, like 'Mon'                                                   // 427
			'A': langWeekdays[day], // Long weekday, like 'Monday'                                                              // 428
			'd': pad(dayOfMonth), // Two digit day of the month, 01 to 31                                                       // 429
			'e': dayOfMonth, // Day of the month, 1 through 31                                                                  // 430
			'w': day,                                                                                                           // 431
                                                                                                                       // 432
			// Week (none implemented)                                                                                          // 433
			//'W': weekNumber(),                                                                                                // 434
                                                                                                                       // 435
			// Month                                                                                                            // 436
			'b': lang.shortMonths[month], // Short month, like 'Jan'                                                            // 437
			'B': lang.months[month], // Long month, like 'January'                                                              // 438
			'm': pad(month + 1), // Two digit month number, 01 through 12                                                       // 439
                                                                                                                       // 440
			// Year                                                                                                             // 441
			'y': fullYear.toString().substr(2, 2), // Two digits year, like 09 for 2009                                         // 442
			'Y': fullYear, // Four digits year, like 2009                                                                       // 443
                                                                                                                       // 444
			// Time                                                                                                             // 445
			'H': pad(hours), // Two digits hours in 24h format, 00 through 23                                                   // 446
			'I': pad((hours % 12) || 12), // Two digits hours in 12h format, 00 through 11                                      // 447
			'l': (hours % 12) || 12, // Hours in 12h format, 1 through 12                                                       // 448
			'M': pad(date[getMinutes]()), // Two digits minutes, 00 through 59                                                  // 449
			'p': hours < 12 ? 'AM' : 'PM', // Upper case AM or PM                                                               // 450
			'P': hours < 12 ? 'am' : 'pm', // Lower case AM or PM                                                               // 451
			'S': pad(date.getSeconds()), // Two digits seconds, 00 through  59                                                  // 452
			'L': pad(mathRound(timestamp % 1000), 3) // Milliseconds (naming from Ruby)                                         // 453
		}, Highcharts.dateFormats);                                                                                          // 454
                                                                                                                       // 455
                                                                                                                       // 456
	// do the replaces                                                                                                    // 457
	for (key in replacements) {                                                                                           // 458
		while (format.indexOf('%' + key) !== -1) { // regex would do it in one line, but this is faster                      // 459
			format = format.replace('%' + key, typeof replacements[key] === 'function' ? replacements[key](timestamp) : replacements[key]);
		}                                                                                                                    // 461
	}                                                                                                                     // 462
                                                                                                                       // 463
	// Optionally capitalize the string and return                                                                        // 464
	return capitalize ? format.substr(0, 1).toUpperCase() + format.substr(1) : format;                                    // 465
};                                                                                                                     // 466
                                                                                                                       // 467
/**                                                                                                                    // 468
 * Format a single variable. Similar to sprintf, without the % prefix.                                                 // 469
 */                                                                                                                    // 470
function formatSingle(format, val) {                                                                                   // 471
	var floatRegex = /f$/,                                                                                                // 472
		decRegex = /\.([0-9])/,                                                                                              // 473
		lang = defaultOptions.lang,                                                                                          // 474
		decimals;                                                                                                            // 475
                                                                                                                       // 476
	if (floatRegex.test(format)) { // float                                                                               // 477
		decimals = format.match(decRegex);                                                                                   // 478
		decimals = decimals ? decimals[1] : -1;                                                                              // 479
		if (val !== null) {                                                                                                  // 480
			val = Highcharts.numberFormat(                                                                                      // 481
				val,                                                                                                               // 482
				decimals,                                                                                                          // 483
				lang.decimalPoint,                                                                                                 // 484
				format.indexOf(',') > -1 ? lang.thousandsSep : ''                                                                  // 485
			);                                                                                                                  // 486
		}                                                                                                                    // 487
	} else {                                                                                                              // 488
		val = dateFormat(format, val);                                                                                       // 489
	}                                                                                                                     // 490
	return val;                                                                                                           // 491
}                                                                                                                      // 492
                                                                                                                       // 493
/**                                                                                                                    // 494
 * Format a string according to a subset of the rules of Python's String.format method.                                // 495
 */                                                                                                                    // 496
function format(str, ctx) {                                                                                            // 497
	var splitter = '{',                                                                                                   // 498
		isInside = false,                                                                                                    // 499
		segment,                                                                                                             // 500
		valueAndFormat,                                                                                                      // 501
		path,                                                                                                                // 502
		i,                                                                                                                   // 503
		len,                                                                                                                 // 504
		ret = [],                                                                                                            // 505
		val,                                                                                                                 // 506
		index;                                                                                                               // 507
	                                                                                                                      // 508
	while ((index = str.indexOf(splitter)) !== -1) {                                                                      // 509
		                                                                                                                     // 510
		segment = str.slice(0, index);                                                                                       // 511
		if (isInside) { // we're on the closing bracket looking back                                                         // 512
			                                                                                                                    // 513
			valueAndFormat = segment.split(':');                                                                                // 514
			path = valueAndFormat.shift().split('.'); // get first and leave format                                             // 515
			len = path.length;                                                                                                  // 516
			val = ctx;                                                                                                          // 517
                                                                                                                       // 518
			// Assign deeper paths                                                                                              // 519
			for (i = 0; i < len; i++) {                                                                                         // 520
				val = val[path[i]];                                                                                                // 521
			}                                                                                                                   // 522
                                                                                                                       // 523
			// Format the replacement                                                                                           // 524
			if (valueAndFormat.length) {                                                                                        // 525
				val = formatSingle(valueAndFormat.join(':'), val);                                                                 // 526
			}                                                                                                                   // 527
                                                                                                                       // 528
			// Push the result and advance the cursor                                                                           // 529
			ret.push(val);                                                                                                      // 530
			                                                                                                                    // 531
		} else {                                                                                                             // 532
			ret.push(segment);                                                                                                  // 533
			                                                                                                                    // 534
		}                                                                                                                    // 535
		str = str.slice(index + 1); // the rest                                                                              // 536
		isInside = !isInside; // toggle                                                                                      // 537
		splitter = isInside ? '}' : '{'; // now look for next matching bracket                                               // 538
	}                                                                                                                     // 539
	ret.push(str);                                                                                                        // 540
	return ret.join('');                                                                                                  // 541
}                                                                                                                      // 542
                                                                                                                       // 543
/**                                                                                                                    // 544
 * Get the magnitude of a number                                                                                       // 545
 */                                                                                                                    // 546
function getMagnitude(num) {                                                                                           // 547
	return math.pow(10, mathFloor(math.log(num) / math.LN10));                                                            // 548
}                                                                                                                      // 549
                                                                                                                       // 550
/**                                                                                                                    // 551
 * Take an interval and normalize it to multiples of 1, 2, 2.5 and 5                                                   // 552
 * @param {Number} interval                                                                                            // 553
 * @param {Array} multiples                                                                                            // 554
 * @param {Number} magnitude                                                                                           // 555
 * @param {Object} options                                                                                             // 556
 */                                                                                                                    // 557
function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, preventExceed) {                         // 558
	var normalized,                                                                                                       // 559
		i,                                                                                                                   // 560
		retInterval = interval;                                                                                              // 561
                                                                                                                       // 562
	// round to a tenfold of 1, 2, 2.5 or 5                                                                               // 563
	magnitude = pick(magnitude, 1);                                                                                       // 564
	normalized = interval / magnitude;                                                                                    // 565
                                                                                                                       // 566
	// multiples for a linear scale                                                                                       // 567
	if (!multiples) {                                                                                                     // 568
		multiples = [1, 2, 2.5, 5, 10];                                                                                      // 569
                                                                                                                       // 570
		// the allowDecimals option                                                                                          // 571
		if (allowDecimals === false) {                                                                                       // 572
			if (magnitude === 1) {                                                                                              // 573
				multiples = [1, 2, 5, 10];                                                                                         // 574
			} else if (magnitude <= 0.1) {                                                                                      // 575
				multiples = [1 / magnitude];                                                                                       // 576
			}                                                                                                                   // 577
		}                                                                                                                    // 578
	}                                                                                                                     // 579
                                                                                                                       // 580
	// normalize the interval to the nearest multiple                                                                     // 581
	for (i = 0; i < multiples.length; i++) {                                                                              // 582
		retInterval = multiples[i];                                                                                          // 583
		if ((preventExceed && retInterval * magnitude >= interval) || // only allow tick amounts smaller than natural        // 584
			(!preventExceed && (normalized <= (multiples[i] + (multiples[i + 1] || multiples[i])) / 2))) {                      // 585
			break;                                                                                                              // 586
		}                                                                                                                    // 587
	}                                                                                                                     // 588
                                                                                                                       // 589
	// multiply back to the correct magnitude                                                                             // 590
	retInterval *= magnitude;                                                                                             // 591
	                                                                                                                      // 592
	return retInterval;                                                                                                   // 593
}                                                                                                                      // 594
                                                                                                                       // 595
                                                                                                                       // 596
/**                                                                                                                    // 597
 * Utility method that sorts an object array and keeping the order of equal items.                                     // 598
 * ECMA script standard does not specify the behaviour when items are equal.                                           // 599
 */                                                                                                                    // 600
function stableSort(arr, sortFunction) {                                                                               // 601
	var length = arr.length,                                                                                              // 602
		sortValue,                                                                                                           // 603
		i;                                                                                                                   // 604
                                                                                                                       // 605
	// Add index to each item                                                                                             // 606
	for (i = 0; i < length; i++) {                                                                                        // 607
		arr[i].ss_i = i; // stable sort index                                                                                // 608
	}                                                                                                                     // 609
                                                                                                                       // 610
	arr.sort(function (a, b) {                                                                                            // 611
		sortValue = sortFunction(a, b);                                                                                      // 612
		return sortValue === 0 ? a.ss_i - b.ss_i : sortValue;                                                                // 613
	});                                                                                                                   // 614
                                                                                                                       // 615
	// Remove index from items                                                                                            // 616
	for (i = 0; i < length; i++) {                                                                                        // 617
		delete arr[i].ss_i; // stable sort index                                                                             // 618
	}                                                                                                                     // 619
}                                                                                                                      // 620
                                                                                                                       // 621
/**                                                                                                                    // 622
 * Non-recursive method to find the lowest member of an array. Math.min raises a maximum                               // 623
 * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This                        // 624
 * method is slightly slower, but safe.                                                                                // 625
 */                                                                                                                    // 626
function arrayMin(data) {                                                                                              // 627
	var i = data.length,                                                                                                  // 628
		min = data[0];                                                                                                       // 629
                                                                                                                       // 630
	while (i--) {                                                                                                         // 631
		if (data[i] < min) {                                                                                                 // 632
			min = data[i];                                                                                                      // 633
		}                                                                                                                    // 634
	}                                                                                                                     // 635
	return min;                                                                                                           // 636
}                                                                                                                      // 637
                                                                                                                       // 638
/**                                                                                                                    // 639
 * Non-recursive method to find the lowest member of an array. Math.min raises a maximum                               // 640
 * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This                        // 641
 * method is slightly slower, but safe.                                                                                // 642
 */                                                                                                                    // 643
function arrayMax(data) {                                                                                              // 644
	var i = data.length,                                                                                                  // 645
		max = data[0];                                                                                                       // 646
                                                                                                                       // 647
	while (i--) {                                                                                                         // 648
		if (data[i] > max) {                                                                                                 // 649
			max = data[i];                                                                                                      // 650
		}                                                                                                                    // 651
	}                                                                                                                     // 652
	return max;                                                                                                           // 653
}                                                                                                                      // 654
                                                                                                                       // 655
/**                                                                                                                    // 656
 * Utility method that destroys any SVGElement or VMLElement that are properties on the given object.                  // 657
 * It loops all properties and invokes destroy if there is a destroy method. The property is                           // 658
 * then delete'ed.                                                                                                     // 659
 * @param {Object} The object to destroy properties on                                                                 // 660
 * @param {Object} Exception, do not destroy this property, only delete it.                                            // 661
 */                                                                                                                    // 662
function destroyObjectProperties(obj, except) {                                                                        // 663
	var n;                                                                                                                // 664
	for (n in obj) {                                                                                                      // 665
		// If the object is non-null and destroy is defined                                                                  // 666
		if (obj[n] && obj[n] !== except && obj[n].destroy) {                                                                 // 667
			// Invoke the destroy                                                                                               // 668
			obj[n].destroy();                                                                                                   // 669
		}                                                                                                                    // 670
                                                                                                                       // 671
		// Delete the property from the object.                                                                              // 672
		delete obj[n];                                                                                                       // 673
	}                                                                                                                     // 674
}                                                                                                                      // 675
                                                                                                                       // 676
                                                                                                                       // 677
/**                                                                                                                    // 678
 * Discard an element by moving it to the bin and delete                                                               // 679
 * @param {Object} The HTML node to discard                                                                            // 680
 */                                                                                                                    // 681
function discardElement(element) {                                                                                     // 682
	// create a garbage bin element, not part of the DOM                                                                  // 683
	if (!garbageBin) {                                                                                                    // 684
		garbageBin = createElement(DIV);                                                                                     // 685
	}                                                                                                                     // 686
                                                                                                                       // 687
	// move the node and empty bin                                                                                        // 688
	if (element) {                                                                                                        // 689
		garbageBin.appendChild(element);                                                                                     // 690
	}                                                                                                                     // 691
	garbageBin.innerHTML = '';                                                                                            // 692
}                                                                                                                      // 693
                                                                                                                       // 694
/**                                                                                                                    // 695
 * Provide error messages for debugging, with links to online explanation                                              // 696
 */                                                                                                                    // 697
function error (code, stop) {                                                                                          // 698
	var msg = 'Highcharts error #' + code + ': www.highcharts.com/errors/' + code;                                        // 699
	if (stop) {                                                                                                           // 700
		throw msg;                                                                                                           // 701
	}                                                                                                                     // 702
	// else ...                                                                                                           // 703
	if (win.console) {                                                                                                    // 704
		console.log(msg);                                                                                                    // 705
	}                                                                                                                     // 706
}                                                                                                                      // 707
                                                                                                                       // 708
/**                                                                                                                    // 709
 * Fix JS round off float errors                                                                                       // 710
 * @param {Number} num                                                                                                 // 711
 */                                                                                                                    // 712
function correctFloat(num) {                                                                                           // 713
	return parseFloat(                                                                                                    // 714
		num.toPrecision(14)                                                                                                  // 715
	);                                                                                                                    // 716
}                                                                                                                      // 717
                                                                                                                       // 718
/**                                                                                                                    // 719
 * Set the global animation to either a given value, or fall back to the                                               // 720
 * given chart's animation option                                                                                      // 721
 * @param {Object} animation                                                                                           // 722
 * @param {Object} chart                                                                                               // 723
 */                                                                                                                    // 724
function setAnimation(animation, chart) {                                                                              // 725
	globalAnimation = pick(animation, chart.animation);                                                                   // 726
}                                                                                                                      // 727
                                                                                                                       // 728
/**                                                                                                                    // 729
 * The time unit lookup                                                                                                // 730
 */                                                                                                                    // 731
timeUnits = {                                                                                                          // 732
	millisecond: 1,                                                                                                       // 733
	second: 1000,                                                                                                         // 734
	minute: 60000,                                                                                                        // 735
	hour: 3600000,                                                                                                        // 736
	day: 24 * 3600000,                                                                                                    // 737
	week: 7 * 24 * 3600000,                                                                                               // 738
	month: 28 * 24 * 3600000,                                                                                             // 739
	year: 364 * 24 * 3600000                                                                                              // 740
};                                                                                                                     // 741
                                                                                                                       // 742
                                                                                                                       // 743
/**                                                                                                                    // 744
 * Format a number and return a string based on input settings                                                         // 745
 * @param {Number} number The input number to format                                                                   // 746
 * @param {Number} decimals The amount of decimals                                                                     // 747
 * @param {String} decPoint The decimal point, defaults to the one given in the lang options                           // 748
 * @param {String} thousandsSep The thousands separator, defaults to the one given in the lang options                 // 749
 */                                                                                                                    // 750
Highcharts.numberFormat = function (number, decimals, decPoint, thousandsSep) {                                        // 751
	var lang = defaultOptions.lang,                                                                                       // 752
		// http://kevin.vanzonneveld.net/techblog/article/javascript_equivalent_for_phps_number_format/                      // 753
		n = +number || 0,                                                                                                    // 754
		c = decimals === -1 ?                                                                                                // 755
			mathMin((n.toString().split('.')[1] || '').length, 20) : // Preserve decimals. Not huge numbers (#3793).            // 756
			(isNaN(decimals = mathAbs(decimals)) ? 2 : decimals),                                                               // 757
		d = decPoint === undefined ? lang.decimalPoint : decPoint,                                                           // 758
		t = thousandsSep === undefined ? lang.thousandsSep : thousandsSep,                                                   // 759
		s = n < 0 ? "-" : "",                                                                                                // 760
		i = String(pInt(n = mathAbs(n).toFixed(c))),                                                                         // 761
		j = i.length > 3 ? i.length % 3 : 0;                                                                                 // 762
                                                                                                                       // 763
	return (s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) +                         // 764
			(c ? d + mathAbs(n - i).toFixed(c).slice(2) : ""));                                                                 // 765
};                                                                                                                     // 766
/**                                                                                                                    // 767
 * Path interpolation algorithm used across adapters                                                                   // 768
 */                                                                                                                    // 769
pathAnim = {                                                                                                           // 770
	/**                                                                                                                   // 771
	 * Prepare start and end values so that the path can be animated one to one                                           // 772
	 */                                                                                                                   // 773
	init: function (elem, fromD, toD) {                                                                                   // 774
		fromD = fromD || '';                                                                                                 // 775
		var shift = elem.shift,                                                                                              // 776
			bezier = fromD.indexOf('C') > -1,                                                                                   // 777
			numParams = bezier ? 7 : 3,                                                                                         // 778
			endLength,                                                                                                          // 779
			slice,                                                                                                              // 780
			i,                                                                                                                  // 781
			start = fromD.split(' '),                                                                                           // 782
			end = [].concat(toD), // copy                                                                                       // 783
			startBaseLine,                                                                                                      // 784
			endBaseLine,                                                                                                        // 785
			sixify = function (arr) { // in splines make move points have six parameters like bezier curves                     // 786
				i = arr.length;                                                                                                    // 787
				while (i--) {                                                                                                      // 788
					if (arr[i] === M) {                                                                                               // 789
						arr.splice(i + 1, 0, arr[i + 1], arr[i + 2], arr[i + 1], arr[i + 2]);                                            // 790
					}                                                                                                                 // 791
				}                                                                                                                  // 792
			};                                                                                                                  // 793
                                                                                                                       // 794
		if (bezier) {                                                                                                        // 795
			sixify(start);                                                                                                      // 796
			sixify(end);                                                                                                        // 797
		}                                                                                                                    // 798
                                                                                                                       // 799
		// pull out the base lines before padding                                                                            // 800
		if (elem.isArea) {                                                                                                   // 801
			startBaseLine = start.splice(start.length - 6, 6);                                                                  // 802
			endBaseLine = end.splice(end.length - 6, 6);                                                                        // 803
		}                                                                                                                    // 804
                                                                                                                       // 805
		// if shifting points, prepend a dummy point to the end path                                                         // 806
		if (shift <= end.length / numParams && start.length === end.length) {                                                // 807
			while (shift--) {                                                                                                   // 808
				end = [].concat(end).splice(0, numParams).concat(end);                                                             // 809
			}                                                                                                                   // 810
		}                                                                                                                    // 811
		elem.shift = 0; // reset for following animations                                                                    // 812
                                                                                                                       // 813
		// copy and append last point until the length matches the end length                                                // 814
		if (start.length) {                                                                                                  // 815
			endLength = end.length;                                                                                             // 816
			while (start.length < endLength) {                                                                                  // 817
                                                                                                                       // 818
				//bezier && sixify(start);                                                                                         // 819
				slice = [].concat(start).splice(start.length - numParams, numParams);                                              // 820
				if (bezier) { // disable first control point                                                                       // 821
					slice[numParams - 6] = slice[numParams - 2];                                                                      // 822
					slice[numParams - 5] = slice[numParams - 1];                                                                      // 823
				}                                                                                                                  // 824
				start = start.concat(slice);                                                                                       // 825
			}                                                                                                                   // 826
		}                                                                                                                    // 827
                                                                                                                       // 828
		if (startBaseLine) { // append the base lines for areas                                                              // 829
			start = start.concat(startBaseLine);                                                                                // 830
			end = end.concat(endBaseLine);                                                                                      // 831
		}                                                                                                                    // 832
		return [start, end];                                                                                                 // 833
	},                                                                                                                    // 834
                                                                                                                       // 835
	/**                                                                                                                   // 836
	 * Interpolate each value of the path and return the array                                                            // 837
	 */                                                                                                                   // 838
	step: function (start, end, pos, complete) {                                                                          // 839
		var ret = [],                                                                                                        // 840
			i = start.length,                                                                                                   // 841
			startVal;                                                                                                           // 842
                                                                                                                       // 843
		if (pos === 1) { // land on the final path without adjustment points appended in the ends                            // 844
			ret = complete;                                                                                                     // 845
                                                                                                                       // 846
		} else if (i === end.length && pos < 1) {                                                                            // 847
			while (i--) {                                                                                                       // 848
				startVal = parseFloat(start[i]);                                                                                   // 849
				ret[i] =                                                                                                           // 850
					isNaN(startVal) ? // a letter instruction like M or L                                                             // 851
						start[i] :                                                                                                       // 852
						pos * (parseFloat(end[i] - startVal)) + startVal;                                                                // 853
                                                                                                                       // 854
			}                                                                                                                   // 855
		} else { // if animation is finished or length not matching, land on right value                                     // 856
			ret = end;                                                                                                          // 857
		}                                                                                                                    // 858
		return ret;                                                                                                          // 859
	}                                                                                                                     // 860
};                                                                                                                     // 861
                                                                                                                       // 862
(function ($) {                                                                                                        // 863
	/**                                                                                                                   // 864
	 * The default HighchartsAdapter for jQuery                                                                           // 865
	 */                                                                                                                   // 866
	win.HighchartsAdapter = win.HighchartsAdapter || ($ && {                                                              // 867
		                                                                                                                     // 868
		/**                                                                                                                  // 869
		 * Initialize the adapter by applying some extensions to jQuery                                                      // 870
		 */                                                                                                                  // 871
		init: function (pathAnim) {                                                                                          // 872
			                                                                                                                    // 873
			// extend the animate function to allow SVG animations                                                              // 874
			var Fx = $.fx;                                                                                                      // 875
			                                                                                                                    // 876
			/*jslint unparam: true*//* allow unused param x in this function */                                                 // 877
			$.extend($.easing, {                                                                                                // 878
				easeOutQuad: function (x, t, b, c, d) {                                                                            // 879
					return -c * (t /= d) * (t - 2) + b;                                                                               // 880
				}                                                                                                                  // 881
			});                                                                                                                 // 882
			/*jslint unparam: false*/                                                                                           // 883
		                                                                                                                     // 884
			// extend some methods to check for elem.attr, which means it is a Highcharts SVG object                            // 885
			$.each(['cur', '_default', 'width', 'height', 'opacity'], function (i, fn) {                                        // 886
				var obj = Fx.step,                                                                                                 // 887
					base;                                                                                                             // 888
					                                                                                                                  // 889
				// Handle different parent objects                                                                                 // 890
				if (fn === 'cur') {                                                                                                // 891
					obj = Fx.prototype; // 'cur', the getter, relates to Fx.prototype                                                 // 892
				                                                                                                                   // 893
				} else if (fn === '_default' && $.Tween) { // jQuery 1.8 model                                                     // 894
					obj = $.Tween.propHooks[fn];                                                                                      // 895
					fn = 'set';                                                                                                       // 896
				}                                                                                                                  // 897
		                                                                                                                     // 898
				// Overwrite the method                                                                                            // 899
				base = obj[fn];                                                                                                    // 900
				if (base) { // step.width and step.height don't exist in jQuery < 1.7                                              // 901
		                                                                                                                     // 902
					// create the extended function replacement                                                                       // 903
					obj[fn] = function (fx) {                                                                                         // 904
                                                                                                                       // 905
						var elem;                                                                                                        // 906
						                                                                                                                 // 907
						// Fx.prototype.cur does not use fx argument                                                                     // 908
						fx = i ? fx : this;                                                                                              // 909
                                                                                                                       // 910
						// Don't run animations on textual properties like align (#1821)                                                 // 911
						if (fx.prop === 'align') {                                                                                       // 912
							return;                                                                                                         // 913
						}                                                                                                                // 914
		                                                                                                                     // 915
						// shortcut                                                                                                      // 916
						elem = fx.elem;                                                                                                  // 917
		                                                                                                                     // 918
						// Fx.prototype.cur returns the current value. The other ones are setters                                        // 919
						// and returning a value has no effect.                                                                          // 920
						return elem.attr ? // is SVG element wrapper                                                                     // 921
							elem.attr(fx.prop, fn === 'cur' ? UNDEFINED : fx.now) : // apply the SVG wrapper's method                       // 922
							base.apply(this, arguments); // use jQuery's built-in method                                                    // 923
					};                                                                                                                // 924
				}                                                                                                                  // 925
			});                                                                                                                 // 926
                                                                                                                       // 927
			// Extend the opacity getter, needed for fading opacity with IE9 and jQuery 1.10+                                   // 928
			wrap($.cssHooks.opacity, 'get', function (proceed, elem, computed) {                                                // 929
				return elem.attr ? (elem.opacity || 0) : proceed.call(this, elem, computed);                                       // 930
			});                                                                                                                 // 931
			                                                                                                                    // 932
			// Define the setter function for d (path definitions)                                                              // 933
			this.addAnimSetter('d', function (fx) {                                                                             // 934
				var elem = fx.elem,                                                                                                // 935
					ends;                                                                                                             // 936
		                                                                                                                     // 937
				// Normally start and end should be set in state == 0, but sometimes,                                              // 938
				// for reasons unknown, this doesn't happen. Perhaps state == 0 is skipped                                         // 939
				// in these cases                                                                                                  // 940
				if (!fx.started) {                                                                                                 // 941
					ends = pathAnim.init(elem, elem.d, elem.toD);                                                                     // 942
					fx.start = ends[0];                                                                                               // 943
					fx.end = ends[1];                                                                                                 // 944
					fx.started = true;                                                                                                // 945
				}                                                                                                                  // 946
		                                                                                                                     // 947
				// Interpolate each value of the path                                                                              // 948
				elem.attr('d', pathAnim.step(fx.start, fx.end, fx.pos, elem.toD));                                                 // 949
			});                                                                                                                 // 950
			                                                                                                                    // 951
			/**                                                                                                                 // 952
			 * Utility for iterating over an array. Parameters are reversed compared to jQuery.                                 // 953
			 * @param {Array} arr                                                                                               // 954
			 * @param {Function} fn                                                                                             // 955
			 */                                                                                                                 // 956
			this.each = Array.prototype.forEach ?                                                                               // 957
				function (arr, fn) { // modern browsers                                                                            // 958
					return Array.prototype.forEach.call(arr, fn);                                                                     // 959
					                                                                                                                  // 960
				} :                                                                                                                // 961
				function (arr, fn) { // legacy                                                                                     // 962
					var i,                                                                                                            // 963
						len = arr.length;                                                                                                // 964
					for (i = 0; i < len; i++) {                                                                                       // 965
						if (fn.call(arr[i], arr[i], i, arr) === false) {                                                                 // 966
							return i;                                                                                                       // 967
						}                                                                                                                // 968
					}                                                                                                                 // 969
				};                                                                                                                 // 970
			                                                                                                                    // 971
			/**                                                                                                                 // 972
			 * Register Highcharts as a plugin in the respective framework                                                      // 973
			 */                                                                                                                 // 974
			$.fn.highcharts = function () {                                                                                     // 975
				var constr = 'Chart', // default constructor                                                                       // 976
					args = arguments,                                                                                                 // 977
					options,                                                                                                          // 978
					ret,                                                                                                              // 979
					chart;                                                                                                            // 980
                                                                                                                       // 981
				if (this[0]) {                                                                                                     // 982
                                                                                                                       // 983
					if (isString(args[0])) {                                                                                          // 984
						constr = args[0];                                                                                                // 985
						args = Array.prototype.slice.call(args, 1);                                                                      // 986
					}                                                                                                                 // 987
					options = args[0];                                                                                                // 988
                                                                                                                       // 989
					// Create the chart                                                                                               // 990
					if (options !== UNDEFINED) {                                                                                      // 991
						/*jslint unused:false*/                                                                                          // 992
						options.chart = options.chart || {};                                                                             // 993
						options.chart.renderTo = this[0];                                                                                // 994
						chart = new Highcharts[constr](options, args[1]);                                                                // 995
						ret = this;                                                                                                      // 996
						/*jslint unused:true*/                                                                                           // 997
					}                                                                                                                 // 998
                                                                                                                       // 999
					// When called without parameters or with the return argument, get a predefined chart                             // 1000
					if (options === UNDEFINED) {                                                                                      // 1001
						ret = charts[attr(this[0], 'data-highcharts-chart')];                                                            // 1002
					}                                                                                                                 // 1003
				}                                                                                                                  // 1004
				                                                                                                                   // 1005
				return ret;                                                                                                        // 1006
			};                                                                                                                  // 1007
                                                                                                                       // 1008
		},                                                                                                                   // 1009
                                                                                                                       // 1010
		/**                                                                                                                  // 1011
		 * Add an animation setter for a specific property                                                                   // 1012
		 */                                                                                                                  // 1013
		addAnimSetter: function (prop, setter) {                                                                             // 1014
			// jQuery 1.8 style                                                                                                 // 1015
			if ($.Tween) {                                                                                                      // 1016
				$.Tween.propHooks[prop] = {                                                                                        // 1017
					set: setter                                                                                                       // 1018
				};                                                                                                                 // 1019
			// pre 1.8                                                                                                          // 1020
			} else {                                                                                                            // 1021
				$.fx.step[prop] = setter;                                                                                          // 1022
			}                                                                                                                   // 1023
		},                                                                                                                   // 1024
		                                                                                                                     // 1025
		/**                                                                                                                  // 1026
		 * Downloads a script and executes a callback when done.                                                             // 1027
		 * @param {String} scriptLocation                                                                                    // 1028
		 * @param {Function} callback                                                                                        // 1029
		 */                                                                                                                  // 1030
		getScript: $.getScript,                                                                                              // 1031
		                                                                                                                     // 1032
		/**                                                                                                                  // 1033
		 * Return the index of an item in an array, or -1 if not found                                                       // 1034
		 */                                                                                                                  // 1035
		inArray: $.inArray,                                                                                                  // 1036
		                                                                                                                     // 1037
		/**                                                                                                                  // 1038
		 * A direct link to jQuery methods. MooTools and Prototype adapters must be implemented for each case of method.     // 1039
		 * @param {Object} elem The HTML element                                                                             // 1040
		 * @param {String} method Which method to run on the wrapped element                                                 // 1041
		 */                                                                                                                  // 1042
		adapterRun: function (elem, method) {                                                                                // 1043
			return $(elem)[method]();                                                                                           // 1044
		},                                                                                                                   // 1045
	                                                                                                                      // 1046
		/**                                                                                                                  // 1047
		 * Filter an array                                                                                                   // 1048
		 */                                                                                                                  // 1049
		grep: $.grep,                                                                                                        // 1050
	                                                                                                                      // 1051
		/**                                                                                                                  // 1052
		 * Map an array                                                                                                      // 1053
		 * @param {Array} arr                                                                                                // 1054
		 * @param {Function} fn                                                                                              // 1055
		 */                                                                                                                  // 1056
		map: function (arr, fn) {                                                                                            // 1057
			//return jQuery.map(arr, fn);                                                                                       // 1058
			var results = [],                                                                                                   // 1059
				i = 0,                                                                                                             // 1060
				len = arr.length;                                                                                                  // 1061
			for (; i < len; i++) {                                                                                              // 1062
				results[i] = fn.call(arr[i], arr[i], i, arr);                                                                      // 1063
			}                                                                                                                   // 1064
			return results;                                                                                                     // 1065
	                                                                                                                      // 1066
		},                                                                                                                   // 1067
	                                                                                                                      // 1068
		/**                                                                                                                  // 1069
		 * Get the position of an element relative to the top left of the page                                               // 1070
		 */                                                                                                                  // 1071
		offset: function (el) {                                                                                              // 1072
			return $(el).offset();                                                                                              // 1073
		},                                                                                                                   // 1074
	                                                                                                                      // 1075
		/**                                                                                                                  // 1076
		 * Add an event listener                                                                                             // 1077
		 * @param {Object} el A HTML element or custom object                                                                // 1078
		 * @param {String} event The event type                                                                              // 1079
		 * @param {Function} fn The event handler                                                                            // 1080
		 */                                                                                                                  // 1081
		addEvent: function (el, event, fn) {                                                                                 // 1082
			$(el).bind(event, fn);                                                                                              // 1083
		},                                                                                                                   // 1084
	                                                                                                                      // 1085
		/**                                                                                                                  // 1086
		 * Remove event added with addEvent                                                                                  // 1087
		 * @param {Object} el The object                                                                                     // 1088
		 * @param {String} eventType The event type. Leave blank to remove all events.                                       // 1089
		 * @param {Function} handler The function to remove                                                                  // 1090
		 */                                                                                                                  // 1091
		removeEvent: function (el, eventType, handler) {                                                                     // 1092
			// workaround for jQuery issue with unbinding custom events:                                                        // 1093
			// http://forum.jQuery.com/topic/javascript-error-when-unbinding-a-custom-event-using-jQuery-1-4-2                  // 1094
			var func = doc.removeEventListener ? 'removeEventListener' : 'detachEvent';                                         // 1095
			if (doc[func] && el && !el[func]) {                                                                                 // 1096
				el[func] = function () {};                                                                                         // 1097
			}                                                                                                                   // 1098
	                                                                                                                      // 1099
			$(el).unbind(eventType, handler);                                                                                   // 1100
		},                                                                                                                   // 1101
	                                                                                                                      // 1102
		/**                                                                                                                  // 1103
		 * Fire an event on a custom object                                                                                  // 1104
		 * @param {Object} el                                                                                                // 1105
		 * @param {String} type                                                                                              // 1106
		 * @param {Object} eventArguments                                                                                    // 1107
		 * @param {Function} defaultFunction                                                                                 // 1108
		 */                                                                                                                  // 1109
		fireEvent: function (el, type, eventArguments, defaultFunction) {                                                    // 1110
			var event = $.Event(type),                                                                                          // 1111
				detachedType = 'detached' + type,                                                                                  // 1112
				defaultPrevented;                                                                                                  // 1113
	                                                                                                                      // 1114
			// Remove warnings in Chrome when accessing returnValue (#2790), layerX and layerY. Although Highcharts             // 1115
			// never uses these properties, Chrome includes them in the default click event and                                 // 1116
			// raises the warning when they are copied over in the extend statement below.                                      // 1117
			//                                                                                                                  // 1118
			// To avoid problems in IE (see #1010) where we cannot delete the properties and avoid                              // 1119
			// testing if they are there (warning in chrome) the only option is to test if running IE.                          // 1120
			if (!isIE && eventArguments) {                                                                                      // 1121
				delete eventArguments.layerX;                                                                                      // 1122
				delete eventArguments.layerY;                                                                                      // 1123
				delete eventArguments.returnValue;                                                                                 // 1124
			}                                                                                                                   // 1125
	                                                                                                                      // 1126
			extend(event, eventArguments);                                                                                      // 1127
	                                                                                                                      // 1128
			// Prevent jQuery from triggering the object method that is named the                                               // 1129
			// same as the event. For example, if the event is 'select', jQuery                                                 // 1130
			// attempts calling el.select and it goes into a loop.                                                              // 1131
			if (el[type]) {                                                                                                     // 1132
				el[detachedType] = el[type];                                                                                       // 1133
				el[type] = null;                                                                                                   // 1134
			}                                                                                                                   // 1135
	                                                                                                                      // 1136
			// Wrap preventDefault and stopPropagation in try/catch blocks in                                                   // 1137
			// order to prevent JS errors when cancelling events on non-DOM                                                     // 1138
			// objects. #615.                                                                                                   // 1139
			/*jslint unparam: true*/                                                                                            // 1140
			$.each(['preventDefault', 'stopPropagation'], function (i, fn) {                                                    // 1141
				var base = event[fn];                                                                                              // 1142
				event[fn] = function () {                                                                                          // 1143
					try {                                                                                                             // 1144
						base.call(event);                                                                                                // 1145
					} catch (e) {                                                                                                     // 1146
						if (fn === 'preventDefault') {                                                                                   // 1147
							defaultPrevented = true;                                                                                        // 1148
						}                                                                                                                // 1149
					}                                                                                                                 // 1150
				};                                                                                                                 // 1151
			});                                                                                                                 // 1152
			/*jslint unparam: false*/                                                                                           // 1153
	                                                                                                                      // 1154
			// trigger it                                                                                                       // 1155
			$(el).trigger(event);                                                                                               // 1156
	                                                                                                                      // 1157
			// attach the method                                                                                                // 1158
			if (el[detachedType]) {                                                                                             // 1159
				el[type] = el[detachedType];                                                                                       // 1160
				el[detachedType] = null;                                                                                           // 1161
			}                                                                                                                   // 1162
	                                                                                                                      // 1163
			if (defaultFunction && !event.isDefaultPrevented() && !defaultPrevented) {                                          // 1164
				defaultFunction(event);                                                                                            // 1165
			}                                                                                                                   // 1166
		},                                                                                                                   // 1167
		                                                                                                                     // 1168
		/**                                                                                                                  // 1169
		 * Extension method needed for MooTools                                                                              // 1170
		 */                                                                                                                  // 1171
		washMouseEvent: function (e) {                                                                                       // 1172
			var ret = e.originalEvent || e;                                                                                     // 1173
			                                                                                                                    // 1174
			// computed by jQuery, needed by IE8                                                                                // 1175
			if (ret.pageX === UNDEFINED) { // #1236                                                                             // 1176
				ret.pageX = e.pageX;                                                                                               // 1177
				ret.pageY = e.pageY;                                                                                               // 1178
			}                                                                                                                   // 1179
			                                                                                                                    // 1180
			return ret;                                                                                                         // 1181
		},                                                                                                                   // 1182
	                                                                                                                      // 1183
		/**                                                                                                                  // 1184
		 * Animate a HTML element or SVG element wrapper                                                                     // 1185
		 * @param {Object} el                                                                                                // 1186
		 * @param {Object} params                                                                                            // 1187
		 * @param {Object} options jQuery-like animation options: duration, easing, callback                                 // 1188
		 */                                                                                                                  // 1189
		animate: function (el, params, options) {                                                                            // 1190
			var $el = $(el);                                                                                                    // 1191
			if (!el.style) {                                                                                                    // 1192
				el.style = {}; // #1881                                                                                            // 1193
			}                                                                                                                   // 1194
			if (params.d) {                                                                                                     // 1195
				el.toD = params.d; // keep the array form for paths, used in $.fx.step.d                                           // 1196
				params.d = 1; // because in jQuery, animating to an array has a different meaning                                  // 1197
			}                                                                                                                   // 1198
	                                                                                                                      // 1199
			$el.stop();                                                                                                         // 1200
			if (params.opacity !== UNDEFINED && el.attr) {                                                                      // 1201
				params.opacity += 'px'; // force jQuery to use same logic as width and height (#2161)                              // 1202
			}                                                                                                                   // 1203
			el.hasAnim = 1; // #3342                                                                                            // 1204
			$el.animate(params, options);                                                                                       // 1205
	                                                                                                                      // 1206
		},                                                                                                                   // 1207
		/**                                                                                                                  // 1208
		 * Stop running animation                                                                                            // 1209
		 */                                                                                                                  // 1210
		stop: function (el) {                                                                                                // 1211
			if (el.hasAnim) { // #3342, memory leak on calling $(el) from destroy                                               // 1212
				$(el).stop();                                                                                                      // 1213
			}                                                                                                                   // 1214
		}                                                                                                                    // 1215
	});                                                                                                                   // 1216
}(win.jQuery));                                                                                                        // 1217
                                                                                                                       // 1218
                                                                                                                       // 1219
// check for a custom HighchartsAdapter defined prior to this file                                                     // 1220
var globalAdapter = win.HighchartsAdapter,                                                                             // 1221
	adapter = globalAdapter || {};                                                                                        // 1222
	                                                                                                                      // 1223
// Initialize the adapter                                                                                              // 1224
if (globalAdapter) {                                                                                                   // 1225
	globalAdapter.init.call(globalAdapter, pathAnim);                                                                     // 1226
}                                                                                                                      // 1227
                                                                                                                       // 1228
                                                                                                                       // 1229
// Utility functions. If the HighchartsAdapter is not defined, adapter is an empty object                              // 1230
// and all the utility functions will be null. In that case they are populated by the                                  // 1231
// default adapters below.                                                                                             // 1232
var adapterRun = adapter.adapterRun,                                                                                   // 1233
	getScript = adapter.getScript,                                                                                        // 1234
	inArray = adapter.inArray,                                                                                            // 1235
	each = Highcharts.each = adapter.each,                                                                                // 1236
	grep = adapter.grep,                                                                                                  // 1237
	offset = adapter.offset,                                                                                              // 1238
	map = adapter.map,                                                                                                    // 1239
	addEvent = adapter.addEvent,                                                                                          // 1240
	removeEvent = adapter.removeEvent,                                                                                    // 1241
	fireEvent = adapter.fireEvent,                                                                                        // 1242
	washMouseEvent = adapter.washMouseEvent,                                                                              // 1243
	animate = adapter.animate,                                                                                            // 1244
	stop = adapter.stop;                                                                                                  // 1245
                                                                                                                       // 1246
                                                                                                                       // 1247
                                                                                                                       // 1248
/* ****************************************************************************                                        // 1249
 * Handle the options                                                         *                                        // 1250
 *****************************************************************************/                                        // 1251
defaultOptions = {                                                                                                     // 1252
	colors: ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c',                                                                  // 1253
		    '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'],                                               // 1254
	symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],                                                // 1255
	lang: {                                                                                                               // 1256
		loading: 'Loading...',                                                                                               // 1257
		months: ['January', 'February', 'March', 'April', 'May', 'June', 'July',                                             // 1258
				'August', 'September', 'October', 'November', 'December'],                                                         // 1259
		shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],                   // 1260
		weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],                            // 1261
		decimalPoint: '.',                                                                                                   // 1262
		numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'], // SI prefixes used in axis labels                                   // 1263
		resetZoom: 'Reset zoom',                                                                                             // 1264
		resetZoomTitle: 'Reset zoom level 1:1',                                                                              // 1265
		thousandsSep: ' '                                                                                                    // 1266
	},                                                                                                                    // 1267
	global: {                                                                                                             // 1268
		useUTC: true,                                                                                                        // 1269
		//timezoneOffset: 0,                                                                                                 // 1270
		canvasToolsURL: 'http://code.highcharts.com/4.1.7/modules/canvas-tools.js',                                          // 1271
		VMLRadialGradientURL: 'http://code.highcharts.com/4.1.7/gfx/vml-radial-gradient.png'                                 // 1272
	},                                                                                                                    // 1273
	chart: {                                                                                                              // 1274
		//animation: true,                                                                                                   // 1275
		//alignTicks: false,                                                                                                 // 1276
		//reflow: true,                                                                                                      // 1277
		//className: null,                                                                                                   // 1278
		//events: { load, selection },                                                                                       // 1279
		//margin: [null],                                                                                                    // 1280
		//marginTop: null,                                                                                                   // 1281
		//marginRight: null,                                                                                                 // 1282
		//marginBottom: null,                                                                                                // 1283
		//marginLeft: null,                                                                                                  // 1284
		borderColor: '#4572A7',                                                                                              // 1285
		//borderWidth: 0,                                                                                                    // 1286
		borderRadius: 0,                                                                                                     // 1287
		defaultSeriesType: 'line',                                                                                           // 1288
		ignoreHiddenSeries: true,                                                                                            // 1289
		//inverted: false,                                                                                                   // 1290
		//shadow: false,                                                                                                     // 1291
		spacing: [10, 10, 15, 10],                                                                                           // 1292
		//spacingTop: 10,                                                                                                    // 1293
		//spacingRight: 10,                                                                                                  // 1294
		//spacingBottom: 15,                                                                                                 // 1295
		//spacingLeft: 10,                                                                                                   // 1296
		//style: {                                                                                                           // 1297
		//	fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif', // default font      // 1298
		//	fontSize: '12px'                                                                                                  // 1299
		//},                                                                                                                 // 1300
		backgroundColor: '#FFFFFF',                                                                                          // 1301
		//plotBackgroundColor: null,                                                                                         // 1302
		plotBorderColor: '#C0C0C0',                                                                                          // 1303
		//plotBorderWidth: 0,                                                                                                // 1304
		//plotShadow: false,                                                                                                 // 1305
		//zoomType: ''                                                                                                       // 1306
		resetZoomButton: {                                                                                                   // 1307
			theme: {                                                                                                            // 1308
				zIndex: 20                                                                                                         // 1309
			},                                                                                                                  // 1310
			position: {                                                                                                         // 1311
				align: 'right',                                                                                                    // 1312
				x: -10,                                                                                                            // 1313
				//verticalAlign: 'top',                                                                                            // 1314
				y: 10                                                                                                              // 1315
			}                                                                                                                   // 1316
			// relativeTo: 'plot'                                                                                               // 1317
		}                                                                                                                    // 1318
	},                                                                                                                    // 1319
	title: {                                                                                                              // 1320
		text: 'Chart title',                                                                                                 // 1321
		align: 'center',                                                                                                     // 1322
		// floating: false,                                                                                                  // 1323
		margin: 15,                                                                                                          // 1324
		// x: 0,                                                                                                             // 1325
		// verticalAlign: 'top',                                                                                             // 1326
		// y: null,                                                                                                          // 1327
		style: {                                                                                                             // 1328
			color: '#333333',                                                                                                   // 1329
			fontSize: '18px'                                                                                                    // 1330
		}                                                                                                                    // 1331
                                                                                                                       // 1332
	},                                                                                                                    // 1333
	subtitle: {                                                                                                           // 1334
		text: '',                                                                                                            // 1335
		align: 'center',                                                                                                     // 1336
		// floating: false                                                                                                   // 1337
		// x: 0,                                                                                                             // 1338
		// verticalAlign: 'top',                                                                                             // 1339
		// y: null,                                                                                                          // 1340
		style: {                                                                                                             // 1341
			color: '#555555'                                                                                                    // 1342
		}                                                                                                                    // 1343
	},                                                                                                                    // 1344
                                                                                                                       // 1345
	plotOptions: {                                                                                                        // 1346
		line: { // base series options                                                                                       // 1347
			allowPointSelect: false,                                                                                            // 1348
			showCheckbox: false,                                                                                                // 1349
			animation: {                                                                                                        // 1350
				duration: 1000                                                                                                     // 1351
			},                                                                                                                  // 1352
			//connectNulls: false,                                                                                              // 1353
			//cursor: 'default',                                                                                                // 1354
			//clip: true,                                                                                                       // 1355
			//dashStyle: null,                                                                                                  // 1356
			//enableMouseTracking: true,                                                                                        // 1357
			events: {},                                                                                                         // 1358
			//legendIndex: 0,                                                                                                   // 1359
			//linecap: 'round',                                                                                                 // 1360
			lineWidth: 2,                                                                                                       // 1361
			//shadow: false,                                                                                                    // 1362
			// stacking: null,                                                                                                  // 1363
			marker: {                                                                                                           // 1364
				//enabled: true,                                                                                                   // 1365
				//symbol: null,                                                                                                    // 1366
				lineWidth: 0,                                                                                                      // 1367
				radius: 4,                                                                                                         // 1368
				lineColor: '#FFFFFF',                                                                                              // 1369
				//fillColor: null,                                                                                                 // 1370
				states: { // states for a single point                                                                             // 1371
					hover: {                                                                                                          // 1372
						enabled: true,                                                                                                   // 1373
						lineWidthPlus: 1,                                                                                                // 1374
						radiusPlus: 2                                                                                                    // 1375
					},                                                                                                                // 1376
					select: {                                                                                                         // 1377
						fillColor: '#FFFFFF',                                                                                            // 1378
						lineColor: '#000000',                                                                                            // 1379
						lineWidth: 2                                                                                                     // 1380
					}                                                                                                                 // 1381
				}                                                                                                                  // 1382
			},                                                                                                                  // 1383
			point: {                                                                                                            // 1384
				events: {}                                                                                                         // 1385
			},                                                                                                                  // 1386
			dataLabels: {                                                                                                       // 1387
				align: 'center',                                                                                                   // 1388
				// defer: true,                                                                                                    // 1389
				// enabled: false,                                                                                                 // 1390
				formatter: function () {                                                                                           // 1391
					return this.y === null ? '' : Highcharts.numberFormat(this.y, -1);                                                // 1392
				},                                                                                                                 // 1393
				style: {                                                                                                           // 1394
					color: 'contrast',                                                                                                // 1395
					fontSize: '11px',                                                                                                 // 1396
					fontWeight: 'bold',                                                                                               // 1397
					textShadow: '0 0 6px contrast, 0 0 3px contrast'                                                                  // 1398
				},                                                                                                                 // 1399
				verticalAlign: 'bottom', // above singular point                                                                   // 1400
				x: 0,                                                                                                              // 1401
				y: 0,                                                                                                              // 1402
				// backgroundColor: undefined,                                                                                     // 1403
				// borderColor: undefined,                                                                                         // 1404
				// borderRadius: undefined,                                                                                        // 1405
				// borderWidth: undefined,                                                                                         // 1406
				padding: 5                                                                                                         // 1407
				// shadow: false                                                                                                   // 1408
			},                                                                                                                  // 1409
			cropThreshold: 300, // draw points outside the plot area when the number of points is less than this                // 1410
			pointRange: 0,                                                                                                      // 1411
			//pointStart: 0,                                                                                                    // 1412
			//pointInterval: 1,                                                                                                 // 1413
			//showInLegend: null, // auto: true for standalone series, false for linked series                                  // 1414
			states: { // states for the entire series                                                                           // 1415
				hover: {                                                                                                           // 1416
					//enabled: false,                                                                                                 // 1417
					lineWidthPlus: 1,                                                                                                 // 1418
					marker: {                                                                                                         // 1419
						// lineWidth: base + 1,                                                                                          // 1420
						// radius: base + 1                                                                                              // 1421
					},                                                                                                                // 1422
					halo: {                                                                                                           // 1423
						size: 10,                                                                                                        // 1424
						opacity: 0.25                                                                                                    // 1425
					}                                                                                                                 // 1426
				},                                                                                                                 // 1427
				select: {                                                                                                          // 1428
					marker: {}                                                                                                        // 1429
				}                                                                                                                  // 1430
			},                                                                                                                  // 1431
			stickyTracking: true,                                                                                               // 1432
			//tooltip: {                                                                                                        // 1433
				//pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b>'                   // 1434
				//valueDecimals: null,                                                                                             // 1435
				//xDateFormat: '%A, %b %e, %Y',                                                                                    // 1436
				//valuePrefix: '',                                                                                                 // 1437
				//ySuffix: ''				                                                                                                  // 1438
			//}                                                                                                                 // 1439
			turboThreshold: 1000                                                                                                // 1440
			// zIndex: null                                                                                                     // 1441
		}                                                                                                                    // 1442
	},                                                                                                                    // 1443
	labels: {                                                                                                             // 1444
		//items: [],                                                                                                         // 1445
		style: {                                                                                                             // 1446
			//font: defaultFont,                                                                                                // 1447
			position: ABSOLUTE,                                                                                                 // 1448
			color: '#3E576F'                                                                                                    // 1449
		}                                                                                                                    // 1450
	},                                                                                                                    // 1451
	legend: {                                                                                                             // 1452
		enabled: true,                                                                                                       // 1453
		align: 'center',                                                                                                     // 1454
		//floating: false,                                                                                                   // 1455
		layout: 'horizontal',                                                                                                // 1456
		labelFormatter: function () {                                                                                        // 1457
			return this.name;                                                                                                   // 1458
		},                                                                                                                   // 1459
		//borderWidth: 0,                                                                                                    // 1460
		borderColor: '#909090',                                                                                              // 1461
		borderRadius: 0,                                                                                                     // 1462
		navigation: {                                                                                                        // 1463
			// animation: true,                                                                                                 // 1464
			activeColor: '#274b6d',                                                                                             // 1465
			// arrowSize: 12                                                                                                    // 1466
			inactiveColor: '#CCC'                                                                                               // 1467
			// style: {} // text styles                                                                                         // 1468
		},                                                                                                                   // 1469
		// margin: 20,                                                                                                       // 1470
		// reversed: false,                                                                                                  // 1471
		shadow: false,                                                                                                       // 1472
		// backgroundColor: null,                                                                                            // 1473
		/*style: {                                                                                                           // 1474
			padding: '5px'                                                                                                      // 1475
		},*/                                                                                                                 // 1476
		itemStyle: {			                                                                                                      // 1477
			color: '#333333',                                                                                                   // 1478
			fontSize: '12px',                                                                                                   // 1479
			fontWeight: 'bold'                                                                                                  // 1480
		},                                                                                                                   // 1481
		itemHoverStyle: {                                                                                                    // 1482
			//cursor: 'pointer', removed as of #601                                                                             // 1483
			color: '#000'                                                                                                       // 1484
		},                                                                                                                   // 1485
		itemHiddenStyle: {                                                                                                   // 1486
			color: '#CCC'                                                                                                       // 1487
		},                                                                                                                   // 1488
		itemCheckboxStyle: {                                                                                                 // 1489
			position: ABSOLUTE,                                                                                                 // 1490
			width: '13px', // for IE precision                                                                                  // 1491
			height: '13px'                                                                                                      // 1492
		},                                                                                                                   // 1493
		// itemWidth: undefined,                                                                                             // 1494
		// symbolRadius: 0,                                                                                                  // 1495
		// symbolWidth: 16,                                                                                                  // 1496
		symbolPadding: 5,                                                                                                    // 1497
		verticalAlign: 'bottom',                                                                                             // 1498
		// width: undefined,                                                                                                 // 1499
		x: 0,                                                                                                                // 1500
		y: 0,                                                                                                                // 1501
		title: {                                                                                                             // 1502
			//text: null,                                                                                                       // 1503
			style: {                                                                                                            // 1504
				fontWeight: 'bold'                                                                                                 // 1505
			}                                                                                                                   // 1506
		}			                                                                                                                 // 1507
	},                                                                                                                    // 1508
                                                                                                                       // 1509
	loading: {                                                                                                            // 1510
		// hideDuration: 100,                                                                                                // 1511
		labelStyle: {                                                                                                        // 1512
			fontWeight: 'bold',                                                                                                 // 1513
			position: RELATIVE,                                                                                                 // 1514
			top: '45%'                                                                                                          // 1515
		},                                                                                                                   // 1516
		// showDuration: 0,                                                                                                  // 1517
		style: {                                                                                                             // 1518
			position: ABSOLUTE,                                                                                                 // 1519
			backgroundColor: 'white',                                                                                           // 1520
			opacity: 0.5,                                                                                                       // 1521
			textAlign: 'center'                                                                                                 // 1522
		}                                                                                                                    // 1523
	},                                                                                                                    // 1524
                                                                                                                       // 1525
	tooltip: {                                                                                                            // 1526
		enabled: true,                                                                                                       // 1527
		animation: hasSVG,                                                                                                   // 1528
		//crosshairs: null,                                                                                                  // 1529
		backgroundColor: 'rgba(249, 249, 249, .85)',                                                                         // 1530
		borderWidth: 1,                                                                                                      // 1531
		borderRadius: 3,                                                                                                     // 1532
		dateTimeLabelFormats: {                                                                                              // 1533
			millisecond: '%A, %b %e, %H:%M:%S.%L',                                                                              // 1534
			second: '%A, %b %e, %H:%M:%S',                                                                                      // 1535
			minute: '%A, %b %e, %H:%M',                                                                                         // 1536
			hour: '%A, %b %e, %H:%M',                                                                                           // 1537
			day: '%A, %b %e, %Y',                                                                                               // 1538
			week: 'Week from %A, %b %e, %Y',                                                                                    // 1539
			month: '%B %Y',                                                                                                     // 1540
			year: '%Y'                                                                                                          // 1541
		},                                                                                                                   // 1542
		footerFormat: '',                                                                                                    // 1543
		//formatter: defaultFormatter,                                                                                       // 1544
		headerFormat: '<span style="font-size: 10px">{point.key}</span><br/>',                                               // 1545
		pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b><br/>',                 // 1546
		shadow: true,                                                                                                        // 1547
		//shape: 'callout',                                                                                                  // 1548
		//shared: false,                                                                                                     // 1549
		snap: isTouchDevice ? 25 : 10,                                                                                       // 1550
		style: {                                                                                                             // 1551
			color: '#333333',                                                                                                   // 1552
			cursor: 'default',                                                                                                  // 1553
			fontSize: '12px',                                                                                                   // 1554
			padding: '8px',                                                                                                     // 1555
			whiteSpace: 'nowrap'                                                                                                // 1556
		}                                                                                                                    // 1557
		//xDateFormat: '%A, %b %e, %Y',                                                                                      // 1558
		//valueDecimals: null,                                                                                               // 1559
		//valuePrefix: '',                                                                                                   // 1560
		//valueSuffix: ''                                                                                                    // 1561
	},                                                                                                                    // 1562
                                                                                                                       // 1563
	credits: {                                                                                                            // 1564
		enabled: true,                                                                                                       // 1565
		text: 'Highcharts.com',                                                                                              // 1566
		href: 'http://www.highcharts.com',                                                                                   // 1567
		position: {                                                                                                          // 1568
			align: 'right',                                                                                                     // 1569
			x: -10,                                                                                                             // 1570
			verticalAlign: 'bottom',                                                                                            // 1571
			y: -5                                                                                                               // 1572
		},                                                                                                                   // 1573
		style: {                                                                                                             // 1574
			cursor: 'pointer',                                                                                                  // 1575
			color: '#909090',                                                                                                   // 1576
			fontSize: '9px'                                                                                                     // 1577
		}                                                                                                                    // 1578
	}                                                                                                                     // 1579
};                                                                                                                     // 1580
                                                                                                                       // 1581
                                                                                                                       // 1582
                                                                                                                       // 1583
                                                                                                                       // 1584
// Series defaults                                                                                                     // 1585
var defaultPlotOptions = defaultOptions.plotOptions,                                                                   // 1586
	defaultSeriesOptions = defaultPlotOptions.line;                                                                       // 1587
                                                                                                                       // 1588
// set the default time methods                                                                                        // 1589
setTimeMethods();                                                                                                      // 1590
                                                                                                                       // 1591
                                                                                                                       // 1592
                                                                                                                       // 1593
/**                                                                                                                    // 1594
 * Set the time methods globally based on the useUTC option. Time method can be either                                 // 1595
 * local time or UTC (default).                                                                                        // 1596
 */                                                                                                                    // 1597
function setTimeMethods() {                                                                                            // 1598
	var globalOptions = defaultOptions.global,                                                                            // 1599
		useUTC = globalOptions.useUTC,                                                                                       // 1600
		GET = useUTC ? 'getUTC' : 'get',                                                                                     // 1601
		SET = useUTC ? 'setUTC' : 'set';                                                                                     // 1602
                                                                                                                       // 1603
                                                                                                                       // 1604
	Date = globalOptions.Date || window.Date;                                                                             // 1605
	timezoneOffset = useUTC && globalOptions.timezoneOffset;                                                              // 1606
	getTimezoneOffset = useUTC && globalOptions.getTimezoneOffset;                                                        // 1607
	makeTime = function (year, month, date, hours, minutes, seconds) {                                                    // 1608
		var d;                                                                                                               // 1609
		if (useUTC) {                                                                                                        // 1610
			d = Date.UTC.apply(0, arguments);                                                                                   // 1611
			d += getTZOffset(d);                                                                                                // 1612
		} else {                                                                                                             // 1613
			d = new Date(                                                                                                       // 1614
				year,                                                                                                              // 1615
				month,                                                                                                             // 1616
				pick(date, 1),                                                                                                     // 1617
				pick(hours, 0),                                                                                                    // 1618
				pick(minutes, 0),                                                                                                  // 1619
				pick(seconds, 0)                                                                                                   // 1620
			).getTime();                                                                                                        // 1621
		}                                                                                                                    // 1622
		return d;                                                                                                            // 1623
	};                                                                                                                    // 1624
	getMinutes =      GET + 'Minutes';                                                                                    // 1625
	getHours =        GET + 'Hours';                                                                                      // 1626
	getDay =          GET + 'Day';                                                                                        // 1627
	getDate =         GET + 'Date';                                                                                       // 1628
	getMonth =        GET + 'Month';                                                                                      // 1629
	getFullYear =     GET + 'FullYear';                                                                                   // 1630
	setMilliseconds = SET + 'Milliseconds';                                                                               // 1631
	setSeconds =      SET + 'Seconds';                                                                                    // 1632
	setMinutes =      SET + 'Minutes';                                                                                    // 1633
	setHours =        SET + 'Hours';                                                                                      // 1634
	setDate =         SET + 'Date';                                                                                       // 1635
	setMonth =        SET + 'Month';                                                                                      // 1636
	setFullYear =     SET + 'FullYear';                                                                                   // 1637
                                                                                                                       // 1638
}                                                                                                                      // 1639
                                                                                                                       // 1640
/**                                                                                                                    // 1641
 * Merge the default options with custom options and return the new options structure                                  // 1642
 * @param {Object} options The new custom options                                                                      // 1643
 */                                                                                                                    // 1644
function setOptions(options) {                                                                                         // 1645
	                                                                                                                      // 1646
	// Copy in the default options                                                                                        // 1647
	defaultOptions = merge(true, defaultOptions, options);                                                                // 1648
	                                                                                                                      // 1649
	// Apply UTC                                                                                                          // 1650
	setTimeMethods();                                                                                                     // 1651
                                                                                                                       // 1652
	return defaultOptions;                                                                                                // 1653
}                                                                                                                      // 1654
                                                                                                                       // 1655
/**                                                                                                                    // 1656
 * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules                    // 1657
 * wasn't enough because the setOptions method created a new object.                                                   // 1658
 */                                                                                                                    // 1659
function getOptions() {                                                                                                // 1660
	return defaultOptions;                                                                                                // 1661
}                                                                                                                      // 1662
                                                                                                                       // 1663
                                                                                                                       // 1664
/**                                                                                                                    // 1665
 * Handle color operations. The object methods are chainable.                                                          // 1666
 * @param {String} input The input color in either rbga or hex format                                                  // 1667
 */                                                                                                                    // 1668
var rgbaRegEx = /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/,        // 1669
	hexRegEx = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,                                                       // 1670
	rgbRegEx = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/;                                         // 1671
                                                                                                                       // 1672
var Color = function (input) {                                                                                         // 1673
	// declare variables                                                                                                  // 1674
	var rgba = [], result, stops;                                                                                         // 1675
                                                                                                                       // 1676
	/**                                                                                                                   // 1677
	 * Parse the input color to rgba array                                                                                // 1678
	 * @param {String} input                                                                                              // 1679
	 */                                                                                                                   // 1680
	function init(input) {                                                                                                // 1681
                                                                                                                       // 1682
		// Gradients                                                                                                         // 1683
		if (input && input.stops) {                                                                                          // 1684
			stops = map(input.stops, function (stop) {                                                                          // 1685
				return Color(stop[1]);                                                                                             // 1686
			});                                                                                                                 // 1687
                                                                                                                       // 1688
		// Solid colors                                                                                                      // 1689
		} else {                                                                                                             // 1690
			// rgba                                                                                                             // 1691
			result = rgbaRegEx.exec(input);                                                                                     // 1692
			if (result) {                                                                                                       // 1693
				rgba = [pInt(result[1]), pInt(result[2]), pInt(result[3]), parseFloat(result[4], 10)];                             // 1694
			} else {                                                                                                            // 1695
				// hex                                                                                                             // 1696
				result = hexRegEx.exec(input);                                                                                     // 1697
				if (result) {                                                                                                      // 1698
					rgba = [pInt(result[1], 16), pInt(result[2], 16), pInt(result[3], 16), 1];                                        // 1699
				} else {                                                                                                           // 1700
					// rgb                                                                                                            // 1701
					result = rgbRegEx.exec(input);                                                                                    // 1702
					if (result) {                                                                                                     // 1703
						rgba = [pInt(result[1]), pInt(result[2]), pInt(result[3]), 1];                                                   // 1704
					}                                                                                                                 // 1705
				}                                                                                                                  // 1706
			}                                                                                                                   // 1707
		}		                                                                                                                  // 1708
                                                                                                                       // 1709
	}                                                                                                                     // 1710
	/**                                                                                                                   // 1711
	 * Return the color a specified format                                                                                // 1712
	 * @param {String} format                                                                                             // 1713
	 */                                                                                                                   // 1714
	function get(format) {                                                                                                // 1715
		var ret;                                                                                                             // 1716
                                                                                                                       // 1717
		if (stops) {                                                                                                         // 1718
			ret = merge(input);                                                                                                 // 1719
			ret.stops = [].concat(ret.stops);                                                                                   // 1720
			each(stops, function (stop, i) {                                                                                    // 1721
				ret.stops[i] = [ret.stops[i][0], stop.get(format)];                                                                // 1722
			});                                                                                                                 // 1723
                                                                                                                       // 1724
		// it's NaN if gradient colors on a column chart                                                                     // 1725
		} else if (rgba && !isNaN(rgba[0])) {                                                                                // 1726
			if (format === 'rgb') {                                                                                             // 1727
				ret = 'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')';                                                      // 1728
			} else if (format === 'a') {                                                                                        // 1729
				ret = rgba[3];                                                                                                     // 1730
			} else {                                                                                                            // 1731
				ret = 'rgba(' + rgba.join(',') + ')';                                                                              // 1732
			}                                                                                                                   // 1733
		} else {                                                                                                             // 1734
			ret = input;                                                                                                        // 1735
		}                                                                                                                    // 1736
		return ret;                                                                                                          // 1737
	}                                                                                                                     // 1738
                                                                                                                       // 1739
	/**                                                                                                                   // 1740
	 * Brighten the color                                                                                                 // 1741
	 * @param {Number} alpha                                                                                              // 1742
	 */                                                                                                                   // 1743
	function brighten(alpha) {                                                                                            // 1744
		if (stops) {                                                                                                         // 1745
			each(stops, function (stop) {                                                                                       // 1746
				stop.brighten(alpha);                                                                                              // 1747
			});                                                                                                                 // 1748
		                                                                                                                     // 1749
		} else if (isNumber(alpha) && alpha !== 0) {                                                                         // 1750
			var i;                                                                                                              // 1751
			for (i = 0; i < 3; i++) {                                                                                           // 1752
				rgba[i] += pInt(alpha * 255);                                                                                      // 1753
                                                                                                                       // 1754
				if (rgba[i] < 0) {                                                                                                 // 1755
					rgba[i] = 0;                                                                                                      // 1756
				}                                                                                                                  // 1757
				if (rgba[i] > 255) {                                                                                               // 1758
					rgba[i] = 255;                                                                                                    // 1759
				}                                                                                                                  // 1760
			}                                                                                                                   // 1761
		}                                                                                                                    // 1762
		return this;                                                                                                         // 1763
	}                                                                                                                     // 1764
	/**                                                                                                                   // 1765
	 * Set the color's opacity to a given alpha value                                                                     // 1766
	 * @param {Number} alpha                                                                                              // 1767
	 */                                                                                                                   // 1768
	function setOpacity(alpha) {                                                                                          // 1769
		rgba[3] = alpha;                                                                                                     // 1770
		return this;                                                                                                         // 1771
	}                                                                                                                     // 1772
                                                                                                                       // 1773
	// initialize: parse the input                                                                                        // 1774
	init(input);                                                                                                          // 1775
                                                                                                                       // 1776
	// public methods                                                                                                     // 1777
	return {                                                                                                              // 1778
		get: get,                                                                                                            // 1779
		brighten: brighten,                                                                                                  // 1780
		rgba: rgba,                                                                                                          // 1781
		setOpacity: setOpacity,                                                                                              // 1782
		raw: input                                                                                                           // 1783
	};                                                                                                                    // 1784
};                                                                                                                     // 1785
                                                                                                                       // 1786
                                                                                                                       // 1787
/**                                                                                                                    // 1788
 * A wrapper object for SVG elements                                                                                   // 1789
 */                                                                                                                    // 1790
function SVGElement() {}                                                                                               // 1791
                                                                                                                       // 1792
SVGElement.prototype = {                                                                                               // 1793
	                                                                                                                      // 1794
	// Default base for animation                                                                                         // 1795
	opacity: 1,                                                                                                           // 1796
	// For labels, these CSS properties are applied to the <text> node directly                                           // 1797
	textProps: ['fontSize', 'fontWeight', 'fontFamily', 'fontStyle', 'color',                                             // 1798
		'lineHeight', 'width', 'textDecoration', 'textShadow'],                                                              // 1799
	                                                                                                                      // 1800
	/**                                                                                                                   // 1801
	 * Initialize the SVG renderer                                                                                        // 1802
	 * @param {Object} renderer                                                                                           // 1803
	 * @param {String} nodeName                                                                                           // 1804
	 */                                                                                                                   // 1805
	init: function (renderer, nodeName) {                                                                                 // 1806
		var wrapper = this;                                                                                                  // 1807
		wrapper.element = nodeName === 'span' ?                                                                              // 1808
			createElement(nodeName) :                                                                                           // 1809
			doc.createElementNS(SVG_NS, nodeName);                                                                              // 1810
		wrapper.renderer = renderer;                                                                                         // 1811
	},                                                                                                                    // 1812
	                                                                                                                      // 1813
	/**                                                                                                                   // 1814
	 * Animate a given attribute                                                                                          // 1815
	 * @param {Object} params                                                                                             // 1816
	 * @param {Number} options The same options as in jQuery animation                                                    // 1817
	 * @param {Function} complete Function to perform at the end of animation                                             // 1818
	 */                                                                                                                   // 1819
	animate: function (params, options, complete) {                                                                       // 1820
		var animOptions = pick(options, globalAnimation, true);                                                              // 1821
		stop(this); // stop regardless of animation actually running, or reverting to .attr (#607)                           // 1822
		if (animOptions) {                                                                                                   // 1823
			animOptions = merge(animOptions, {}); //#2625                                                                       // 1824
			if (complete) { // allows using a callback with the global animation without overwriting it                         // 1825
				animOptions.complete = complete;                                                                                   // 1826
			}                                                                                                                   // 1827
			animate(this, params, animOptions);                                                                                 // 1828
		} else {                                                                                                             // 1829
			this.attr(params);                                                                                                  // 1830
			if (complete) {                                                                                                     // 1831
				complete();                                                                                                        // 1832
			}                                                                                                                   // 1833
		}                                                                                                                    // 1834
		return this;                                                                                                         // 1835
	},                                                                                                                    // 1836
                                                                                                                       // 1837
	/**                                                                                                                   // 1838
	 * Build an SVG gradient out of a common JavaScript configuration object                                              // 1839
	 */                                                                                                                   // 1840
	colorGradient: function (color, prop, elem) {                                                                         // 1841
		var renderer = this.renderer,                                                                                        // 1842
			colorObject,                                                                                                        // 1843
			gradName,                                                                                                           // 1844
			gradAttr,                                                                                                           // 1845
			gradients,                                                                                                          // 1846
			gradientObject,                                                                                                     // 1847
			stops,                                                                                                              // 1848
			stopColor,                                                                                                          // 1849
			stopOpacity,                                                                                                        // 1850
			radialReference,                                                                                                    // 1851
			n,                                                                                                                  // 1852
			id,                                                                                                                 // 1853
			key = [];                                                                                                           // 1854
                                                                                                                       // 1855
		// Apply linear or radial gradients                                                                                  // 1856
		if (color.linearGradient) {                                                                                          // 1857
			gradName = 'linearGradient';                                                                                        // 1858
		} else if (color.radialGradient) {                                                                                   // 1859
			gradName = 'radialGradient';                                                                                        // 1860
		}                                                                                                                    // 1861
                                                                                                                       // 1862
		if (gradName) {                                                                                                      // 1863
			gradAttr = color[gradName];                                                                                         // 1864
			gradients = renderer.gradients;                                                                                     // 1865
			stops = color.stops;                                                                                                // 1866
			radialReference = elem.radialReference;                                                                             // 1867
                                                                                                                       // 1868
			// Keep < 2.2 kompatibility                                                                                         // 1869
			if (isArray(gradAttr)) {                                                                                            // 1870
				color[gradName] = gradAttr = {                                                                                     // 1871
					x1: gradAttr[0],                                                                                                  // 1872
					y1: gradAttr[1],                                                                                                  // 1873
					x2: gradAttr[2],                                                                                                  // 1874
					y2: gradAttr[3],                                                                                                  // 1875
					gradientUnits: 'userSpaceOnUse'                                                                                   // 1876
				};                                                                                                                 // 1877
			}                                                                                                                   // 1878
                                                                                                                       // 1879
			// Correct the radial gradient for the radial reference system                                                      // 1880
			if (gradName === 'radialGradient' && radialReference && !defined(gradAttr.gradientUnits)) {                         // 1881
				gradAttr = merge(gradAttr, {                                                                                       // 1882
					cx: (radialReference[0] - radialReference[2] / 2) + gradAttr.cx * radialReference[2],                             // 1883
					cy: (radialReference[1] - radialReference[2] / 2) + gradAttr.cy * radialReference[2],                             // 1884
					r: gradAttr.r * radialReference[2],                                                                               // 1885
					gradientUnits: 'userSpaceOnUse'                                                                                   // 1886
				});                                                                                                                // 1887
			}                                                                                                                   // 1888
                                                                                                                       // 1889
			// Build the unique key to detect whether we need to create a new element (#1282)                                   // 1890
			for (n in gradAttr) {                                                                                               // 1891
				if (n !== 'id') {                                                                                                  // 1892
					key.push(n, gradAttr[n]);                                                                                         // 1893
				}                                                                                                                  // 1894
			}                                                                                                                   // 1895
			for (n in stops) {                                                                                                  // 1896
				key.push(stops[n]);                                                                                                // 1897
			}                                                                                                                   // 1898
			key = key.join(',');                                                                                                // 1899
                                                                                                                       // 1900
			// Check if a gradient object with the same config object is created within this renderer                           // 1901
			if (gradients[key]) {                                                                                               // 1902
				id = gradients[key].attr('id');                                                                                    // 1903
                                                                                                                       // 1904
			} else {                                                                                                            // 1905
                                                                                                                       // 1906
				// Set the id and create the element                                                                               // 1907
				gradAttr.id = id = PREFIX + idCounter++;                                                                           // 1908
				gradients[key] = gradientObject = renderer.createElement(gradName)                                                 // 1909
					.attr(gradAttr)                                                                                                   // 1910
					.add(renderer.defs);                                                                                              // 1911
                                                                                                                       // 1912
                                                                                                                       // 1913
				// The gradient needs to keep a list of stops to be able to destroy them                                           // 1914
				gradientObject.stops = [];                                                                                         // 1915
				each(stops, function (stop) {                                                                                      // 1916
					var stopObject;                                                                                                   // 1917
					if (stop[1].indexOf('rgba') === 0) {                                                                              // 1918
						colorObject = Color(stop[1]);                                                                                    // 1919
						stopColor = colorObject.get('rgb');                                                                              // 1920
						stopOpacity = colorObject.get('a');                                                                              // 1921
					} else {                                                                                                          // 1922
						stopColor = stop[1];                                                                                             // 1923
						stopOpacity = 1;                                                                                                 // 1924
					}                                                                                                                 // 1925
					stopObject = renderer.createElement('stop').attr({                                                                // 1926
						offset: stop[0],                                                                                                 // 1927
						'stop-color': stopColor,                                                                                         // 1928
						'stop-opacity': stopOpacity                                                                                      // 1929
					}).add(gradientObject);                                                                                           // 1930
                                                                                                                       // 1931
					// Add the stop element to the gradient                                                                           // 1932
					gradientObject.stops.push(stopObject);                                                                            // 1933
				});                                                                                                                // 1934
			}                                                                                                                   // 1935
                                                                                                                       // 1936
			// Set the reference to the gradient object                                                                         // 1937
			elem.setAttribute(prop, 'url(' + renderer.url + '#' + id + ')');                                                    // 1938
		}                                                                                                                    // 1939
	},                                                                                                                    // 1940
                                                                                                                       // 1941
	/**                                                                                                                   // 1942
	 * Apply a polyfill to the text-stroke CSS property, by copying the text element                                      // 1943
	 * and apply strokes to the copy.                                                                                     // 1944
	 *                                                                                                                    // 1945
	 * docs: update default, document the polyfill and the limitations on hex colors and pixel values, document contrast pseudo-color
	 * TODO:                                                                                                              // 1947
	 * - update defaults                                                                                                  // 1948
	 */                                                                                                                   // 1949
	applyTextShadow: function (textShadow) {                                                                              // 1950
		var elem = this.element,                                                                                             // 1951
			tspans,                                                                                                             // 1952
			hasContrast = textShadow.indexOf('contrast') !== -1,                                                                // 1953
			styles = {},                                                                                                        // 1954
			// IE10 and IE11 report textShadow in elem.style even though it doesn't work. Check                                 // 1955
			// this again with new IE release. In exports, the rendering is passed to PhantomJS.                                // 1956
			supports = this.renderer.forExport || (elem.style.textShadow !== UNDEFINED && !isIE);                               // 1957
                                                                                                                       // 1958
		// When the text shadow is set to contrast, use dark stroke for light text and vice versa                            // 1959
		if (hasContrast) {                                                                                                   // 1960
			styles.textShadow = textShadow = textShadow.replace(/contrast/g, this.renderer.getContrast(elem.style.fill));       // 1961
		}                                                                                                                    // 1962
                                                                                                                       // 1963
		// Safari with retina displays as well as PhantomJS bug (#3974). Firefox does not tolerate this,                     // 1964
		// it removes the text shadows.                                                                                      // 1965
		if (isWebKit) {                                                                                                      // 1966
			styles.textRendering = 'geometricPrecision';                                                                        // 1967
		}                                                                                                                    // 1968
                                                                                                                       // 1969
		/* Selective side-by-side testing in supported browser (http://jsfiddle.net/highcharts/73L1ptrh/)                    // 1970
		if (elem.textContent.indexOf('2.') === 0) {                                                                          // 1971
			elem.style['text-shadow'] = 'none';                                                                                 // 1972
			supports = false;                                                                                                   // 1973
		}                                                                                                                    // 1974
		// */                                                                                                                // 1975
                                                                                                                       // 1976
		// No reason to polyfill, we've got native support                                                                   // 1977
		if (supports) {                                                                                                      // 1978
			css(elem, styles); // Apply altered textShadow or textRendering workaround                                          // 1979
		} else {                                                                                                             // 1980
                                                                                                                       // 1981
			this.fakeTS = true; // Fake text shadow                                                                             // 1982
                                                                                                                       // 1983
			// In order to get the right y position of the clones,                                                              // 1984
			// copy over the y setter                                                                                           // 1985
			this.ySetter = this.xSetter;                                                                                        // 1986
                                                                                                                       // 1987
			tspans = [].slice.call(elem.getElementsByTagName('tspan'));                                                         // 1988
			each(textShadow.split(/\s?,\s?/g), function (textShadow) {                                                          // 1989
				var firstChild = elem.firstChild,                                                                                  // 1990
					color,                                                                                                            // 1991
					strokeWidth;                                                                                                      // 1992
				                                                                                                                   // 1993
				textShadow = textShadow.split(' ');                                                                                // 1994
				color = textShadow[textShadow.length - 1];                                                                         // 1995
                                                                                                                       // 1996
				// Approximately tune the settings to the text-shadow behaviour                                                    // 1997
				strokeWidth = textShadow[textShadow.length - 2];                                                                   // 1998
                                                                                                                       // 1999
				if (strokeWidth) {                                                                                                 // 2000
					each(tspans, function (tspan, y) {                                                                                // 2001
						var clone;                                                                                                       // 2002
                                                                                                                       // 2003
						// Let the first line start at the correct X position                                                            // 2004
						if (y === 0) {                                                                                                   // 2005
							tspan.setAttribute('x', elem.getAttribute('x'));                                                                // 2006
							y = elem.getAttribute('y');                                                                                     // 2007
							tspan.setAttribute('y', y || 0);                                                                                // 2008
							if (y === null) {                                                                                               // 2009
								elem.setAttribute('y', 0);                                                                                     // 2010
							}                                                                                                               // 2011
						}                                                                                                                // 2012
                                                                                                                       // 2013
						// Create the clone and apply shadow properties                                                                  // 2014
						clone = tspan.cloneNode(1);                                                                                      // 2015
						attr(clone, {                                                                                                    // 2016
							'class': PREFIX + 'text-shadow',                                                                                // 2017
							'fill': color,                                                                                                  // 2018
							'stroke': color,                                                                                                // 2019
							'stroke-opacity': 1 / mathMax(pInt(strokeWidth), 3),                                                            // 2020
							'stroke-width': strokeWidth,                                                                                    // 2021
							'stroke-linejoin': 'round'                                                                                      // 2022
						});                                                                                                              // 2023
						elem.insertBefore(clone, firstChild);                                                                            // 2024
					});                                                                                                               // 2025
				}                                                                                                                  // 2026
			});                                                                                                                 // 2027
		}                                                                                                                    // 2028
	},                                                                                                                    // 2029
                                                                                                                       // 2030
	/**                                                                                                                   // 2031
	 * Set or get a given attribute                                                                                       // 2032
	 * @param {Object|String} hash                                                                                        // 2033
	 * @param {Mixed|Undefined} val                                                                                       // 2034
	 */                                                                                                                   // 2035
	attr: function (hash, val) {                                                                                          // 2036
		var key,                                                                                                             // 2037
			value,                                                                                                              // 2038
			element = this.element,                                                                                             // 2039
			hasSetSymbolSize,                                                                                                   // 2040
			ret = this,                                                                                                         // 2041
			skipAttr;                                                                                                           // 2042
                                                                                                                       // 2043
		// single key-value pair                                                                                             // 2044
		if (typeof hash === 'string' && val !== UNDEFINED) {                                                                 // 2045
			key = hash;                                                                                                         // 2046
			hash = {};                                                                                                          // 2047
			hash[key] = val;                                                                                                    // 2048
		}                                                                                                                    // 2049
                                                                                                                       // 2050
		// used as a getter: first argument is a string, second is undefined                                                 // 2051
		if (typeof hash === 'string') {                                                                                      // 2052
			ret = (this[hash + 'Getter'] || this._defaultGetter).call(this, hash, element);                                     // 2053
		                                                                                                                     // 2054
		// setter                                                                                                            // 2055
		} else {                                                                                                             // 2056
                                                                                                                       // 2057
			for (key in hash) {                                                                                                 // 2058
				value = hash[key];                                                                                                 // 2059
				skipAttr = false;                                                                                                  // 2060
                                                                                                                       // 2061
                                                                                                                       // 2062
                                                                                                                       // 2063
				if (this.symbolName && /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(key)) {                       // 2064
					if (!hasSetSymbolSize) {                                                                                          // 2065
						this.symbolAttr(hash);                                                                                           // 2066
						hasSetSymbolSize = true;                                                                                         // 2067
					}                                                                                                                 // 2068
					skipAttr = true;                                                                                                  // 2069
				}                                                                                                                  // 2070
                                                                                                                       // 2071
				if (this.rotation && (key === 'x' || key === 'y')) {                                                               // 2072
					this.doTransform = true;                                                                                          // 2073
				}                                                                                                                  // 2074
				                                                                                                                   // 2075
				if (!skipAttr) {                                                                                                   // 2076
					(this[key + 'Setter'] || this._defaultSetter).call(this, value, key, element);                                    // 2077
				}                                                                                                                  // 2078
                                                                                                                       // 2079
				// Let the shadow follow the main element                                                                          // 2080
				if (this.shadows && /^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(key)) {                             // 2081
					this.updateShadows(key, value);                                                                                   // 2082
				}                                                                                                                  // 2083
			}                                                                                                                   // 2084
                                                                                                                       // 2085
			// Update transform. Do this outside the loop to prevent redundant updating for batch setting                       // 2086
			// of attributes.                                                                                                   // 2087
			if (this.doTransform) {                                                                                             // 2088
				this.updateTransform();                                                                                            // 2089
				this.doTransform = false;                                                                                          // 2090
			}                                                                                                                   // 2091
                                                                                                                       // 2092
		}                                                                                                                    // 2093
                                                                                                                       // 2094
		return ret;                                                                                                          // 2095
	},                                                                                                                    // 2096
                                                                                                                       // 2097
	updateShadows: function (key, value) {                                                                                // 2098
		var shadows = this.shadows,                                                                                          // 2099
			i = shadows.length;                                                                                                 // 2100
		while (i--) {                                                                                                        // 2101
			shadows[i].setAttribute(                                                                                            // 2102
				key,                                                                                                               // 2103
				key === 'height' ?                                                                                                 // 2104
					mathMax(value - (shadows[i].cutHeight || 0), 0) :                                                                 // 2105
					key === 'd' ? this.d : value                                                                                      // 2106
			);                                                                                                                  // 2107
		}                                                                                                                    // 2108
	},                                                                                                                    // 2109
                                                                                                                       // 2110
	/**                                                                                                                   // 2111
	 * Add a class name to an element                                                                                     // 2112
	 */                                                                                                                   // 2113
	addClass: function (className) {                                                                                      // 2114
		var element = this.element,                                                                                          // 2115
			currentClassName = attr(element, 'class') || '';                                                                    // 2116
                                                                                                                       // 2117
		if (currentClassName.indexOf(className) === -1) {                                                                    // 2118
			attr(element, 'class', currentClassName + ' ' + className);                                                         // 2119
		}                                                                                                                    // 2120
		return this;                                                                                                         // 2121
	},                                                                                                                    // 2122
	/* hasClass and removeClass are not (yet) needed                                                                      // 2123
	hasClass: function (className) {                                                                                      // 2124
		return attr(this.element, 'class').indexOf(className) !== -1;                                                        // 2125
	},                                                                                                                    // 2126
	removeClass: function (className) {                                                                                   // 2127
		attr(this.element, 'class', attr(this.element, 'class').replace(className, ''));                                     // 2128
		return this;                                                                                                         // 2129
	},                                                                                                                    // 2130
	*/                                                                                                                    // 2131
                                                                                                                       // 2132
	/**                                                                                                                   // 2133
	 * If one of the symbol size affecting parameters are changed,                                                        // 2134
	 * check all the others only once for each call to an element's                                                       // 2135
	 * .attr() method                                                                                                     // 2136
	 * @param {Object} hash                                                                                               // 2137
	 */                                                                                                                   // 2138
	symbolAttr: function (hash) {                                                                                         // 2139
		var wrapper = this;                                                                                                  // 2140
                                                                                                                       // 2141
		each(['x', 'y', 'r', 'start', 'end', 'width', 'height', 'innerR', 'anchorX', 'anchorY'], function (key) {            // 2142
			wrapper[key] = pick(hash[key], wrapper[key]);                                                                       // 2143
		});                                                                                                                  // 2144
                                                                                                                       // 2145
		wrapper.attr({                                                                                                       // 2146
			d: wrapper.renderer.symbols[wrapper.symbolName](                                                                    // 2147
				wrapper.x,                                                                                                         // 2148
				wrapper.y,                                                                                                         // 2149
				wrapper.width,                                                                                                     // 2150
				wrapper.height,                                                                                                    // 2151
				wrapper                                                                                                            // 2152
			)                                                                                                                   // 2153
		});                                                                                                                  // 2154
	},                                                                                                                    // 2155
                                                                                                                       // 2156
	/**                                                                                                                   // 2157
	 * Apply a clipping path to this object                                                                               // 2158
	 * @param {String} id                                                                                                 // 2159
	 */                                                                                                                   // 2160
	clip: function (clipRect) {                                                                                           // 2161
		return this.attr('clip-path', clipRect ? 'url(' + this.renderer.url + '#' + clipRect.id + ')' : NONE);               // 2162
	},                                                                                                                    // 2163
                                                                                                                       // 2164
	/**                                                                                                                   // 2165
	 * Calculate the coordinates needed for drawing a rectangle crisply and return the                                    // 2166
	 * calculated attributes                                                                                              // 2167
	 * @param {Number} strokeWidth                                                                                        // 2168
	 * @param {Number} x                                                                                                  // 2169
	 * @param {Number} y                                                                                                  // 2170
	 * @param {Number} width                                                                                              // 2171
	 * @param {Number} height                                                                                             // 2172
	 */                                                                                                                   // 2173
	crisp: function (rect) {                                                                                              // 2174
                                                                                                                       // 2175
		var wrapper = this,                                                                                                  // 2176
			key,                                                                                                                // 2177
			attribs = {},                                                                                                       // 2178
			normalizer,                                                                                                         // 2179
			strokeWidth = rect.strokeWidth || wrapper.strokeWidth || 0;                                                         // 2180
                                                                                                                       // 2181
		normalizer = mathRound(strokeWidth) % 2 / 2; // mathRound because strokeWidth can sometimes have roundoff errors     // 2182
                                                                                                                       // 2183
		// normalize for crisp edges                                                                                         // 2184
		rect.x = mathFloor(rect.x || wrapper.x || 0) + normalizer;                                                           // 2185
		rect.y = mathFloor(rect.y || wrapper.y || 0) + normalizer;                                                           // 2186
		rect.width = mathFloor((rect.width || wrapper.width || 0) - 2 * normalizer);                                         // 2187
		rect.height = mathFloor((rect.height || wrapper.height || 0) - 2 * normalizer);                                      // 2188
		rect.strokeWidth = strokeWidth;                                                                                      // 2189
                                                                                                                       // 2190
		for (key in rect) {                                                                                                  // 2191
			if (wrapper[key] !== rect[key]) { // only set attribute if changed                                                  // 2192
				wrapper[key] = attribs[key] = rect[key];                                                                           // 2193
			}                                                                                                                   // 2194
		}                                                                                                                    // 2195
                                                                                                                       // 2196
		return attribs;                                                                                                      // 2197
	},                                                                                                                    // 2198
                                                                                                                       // 2199
	/**                                                                                                                   // 2200
	 * Set styles for the element                                                                                         // 2201
	 * @param {Object} styles                                                                                             // 2202
	 */                                                                                                                   // 2203
	css: function (styles) {                                                                                              // 2204
		var elemWrapper = this,                                                                                              // 2205
			oldStyles = elemWrapper.styles,                                                                                     // 2206
			newStyles = {},                                                                                                     // 2207
			elem = elemWrapper.element,                                                                                         // 2208
			textWidth,                                                                                                          // 2209
			n,                                                                                                                  // 2210
			serializedCss = '',                                                                                                 // 2211
			hyphenate,                                                                                                          // 2212
			hasNew = !oldStyles;                                                                                                // 2213
                                                                                                                       // 2214
		// convert legacy                                                                                                    // 2215
		if (styles && styles.color) {                                                                                        // 2216
			styles.fill = styles.color;                                                                                         // 2217
		}                                                                                                                    // 2218
                                                                                                                       // 2219
		// Filter out existing styles to increase performance (#2640)                                                        // 2220
		if (oldStyles) {                                                                                                     // 2221
			for (n in styles) {                                                                                                 // 2222
				if (styles[n] !== oldStyles[n]) {                                                                                  // 2223
					newStyles[n] = styles[n];                                                                                         // 2224
					hasNew = true;                                                                                                    // 2225
				}                                                                                                                  // 2226
			}                                                                                                                   // 2227
		}                                                                                                                    // 2228
		if (hasNew) {                                                                                                        // 2229
			textWidth = elemWrapper.textWidth =                                                                                 // 2230
				(styles && styles.width && elem.nodeName.toLowerCase() === 'text' && pInt(styles.width)) ||                        // 2231
				elemWrapper.textWidth; // #3501                                                                                    // 2232
                                                                                                                       // 2233
			// Merge the new styles with the old ones                                                                           // 2234
			if (oldStyles) {                                                                                                    // 2235
				styles = extend(                                                                                                   // 2236
					oldStyles,                                                                                                        // 2237
					newStyles                                                                                                         // 2238
				);                                                                                                                 // 2239
			}		                                                                                                                 // 2240
                                                                                                                       // 2241
			// store object                                                                                                     // 2242
			elemWrapper.styles = styles;                                                                                        // 2243
                                                                                                                       // 2244
			if (textWidth && (useCanVG || (!hasSVG && elemWrapper.renderer.forExport))) {                                       // 2245
				delete styles.width;                                                                                               // 2246
			}                                                                                                                   // 2247
                                                                                                                       // 2248
			// serialize and set style attribute                                                                                // 2249
			if (isIE && !hasSVG) {                                                                                              // 2250
				css(elemWrapper.element, styles);                                                                                  // 2251
			} else {                                                                                                            // 2252
				/*jslint unparam: true*/                                                                                           // 2253
				hyphenate = function (a, b) { return '-' + b.toLowerCase(); };                                                     // 2254
				/*jslint unparam: false*/                                                                                          // 2255
				for (n in styles) {                                                                                                // 2256
					serializedCss += n.replace(/([A-Z])/g, hyphenate) + ':' + styles[n] + ';';                                        // 2257
				}                                                                                                                  // 2258
				attr(elem, 'style', serializedCss); // #1881                                                                       // 2259
			}                                                                                                                   // 2260
                                                                                                                       // 2261
                                                                                                                       // 2262
			// re-build text                                                                                                    // 2263
			if (textWidth && elemWrapper.added) {                                                                               // 2264
				elemWrapper.renderer.buildText(elemWrapper);                                                                       // 2265
			}                                                                                                                   // 2266
		}                                                                                                                    // 2267
                                                                                                                       // 2268
		return elemWrapper;                                                                                                  // 2269
	},                                                                                                                    // 2270
                                                                                                                       // 2271
	/**                                                                                                                   // 2272
	 * Add an event listener                                                                                              // 2273
	 * @param {String} eventType                                                                                          // 2274
	 * @param {Function} handler                                                                                          // 2275
	 */                                                                                                                   // 2276
	on: function (eventType, handler) {                                                                                   // 2277
		var svgElement = this,                                                                                               // 2278
			element = svgElement.element;                                                                                       // 2279
		                                                                                                                     // 2280
		// touch                                                                                                             // 2281
		if (hasTouch && eventType === 'click') {                                                                             // 2282
			element.ontouchstart = function (e) {			                                                                            // 2283
				svgElement.touchEventFired = Date.now();				                                                                       // 2284
				e.preventDefault();                                                                                                // 2285
				handler.call(element, e);                                                                                          // 2286
			};                                                                                                                  // 2287
			element.onclick = function (e) {												                                                                        // 2288
				if (userAgent.indexOf('Android') === -1 || Date.now() - (svgElement.touchEventFired || 0) > 1100) { // #2269       // 2289
					handler.call(element, e);                                                                                         // 2290
				}                                                                                                                  // 2291
			};			                                                                                                               // 2292
		} else {                                                                                                             // 2293
			// simplest possible event model for internal use                                                                   // 2294
			element['on' + eventType] = handler;                                                                                // 2295
		}                                                                                                                    // 2296
		return this;                                                                                                         // 2297
	},                                                                                                                    // 2298
                                                                                                                       // 2299
	/**                                                                                                                   // 2300
	 * Set the coordinates needed to draw a consistent radial gradient across                                             // 2301
	 * pie slices regardless of positioning inside the chart. The format is                                               // 2302
	 * [centerX, centerY, diameter] in pixels.                                                                            // 2303
	 */                                                                                                                   // 2304
	setRadialReference: function (coordinates) {                                                                          // 2305
		this.element.radialReference = coordinates;                                                                          // 2306
		return this;                                                                                                         // 2307
	},                                                                                                                    // 2308
                                                                                                                       // 2309
	/**                                                                                                                   // 2310
	 * Move an object and its children by x and y values                                                                  // 2311
	 * @param {Number} x                                                                                                  // 2312
	 * @param {Number} y                                                                                                  // 2313
	 */                                                                                                                   // 2314
	translate: function (x, y) {                                                                                          // 2315
		return this.attr({                                                                                                   // 2316
			translateX: x,                                                                                                      // 2317
			translateY: y                                                                                                       // 2318
		});                                                                                                                  // 2319
	},                                                                                                                    // 2320
                                                                                                                       // 2321
	/**                                                                                                                   // 2322
	 * Invert a group, rotate and flip                                                                                    // 2323
	 */                                                                                                                   // 2324
	invert: function () {                                                                                                 // 2325
		var wrapper = this;                                                                                                  // 2326
		wrapper.inverted = true;                                                                                             // 2327
		wrapper.updateTransform();                                                                                           // 2328
		return wrapper;                                                                                                      // 2329
	},                                                                                                                    // 2330
                                                                                                                       // 2331
	/**                                                                                                                   // 2332
	 * Private method to update the transform attribute based on internal                                                 // 2333
	 * properties                                                                                                         // 2334
	 */                                                                                                                   // 2335
	updateTransform: function () {                                                                                        // 2336
		var wrapper = this,                                                                                                  // 2337
			translateX = wrapper.translateX || 0,                                                                               // 2338
			translateY = wrapper.translateY || 0,                                                                               // 2339
			scaleX = wrapper.scaleX,                                                                                            // 2340
			scaleY = wrapper.scaleY,                                                                                            // 2341
			inverted = wrapper.inverted,                                                                                        // 2342
			rotation = wrapper.rotation,                                                                                        // 2343
			element = wrapper.element,                                                                                          // 2344
			transform;                                                                                                          // 2345
                                                                                                                       // 2346
		// flipping affects translate as adjustment for flipping around the group's axis                                     // 2347
		if (inverted) {                                                                                                      // 2348
			translateX += wrapper.attr('width');                                                                                // 2349
			translateY += wrapper.attr('height');                                                                               // 2350
		}                                                                                                                    // 2351
                                                                                                                       // 2352
		// Apply translate. Nearly all transformed elements have translation, so instead                                     // 2353
		// of checking for translate = 0, do it always (#1767, #1846).                                                       // 2354
		transform = ['translate(' + translateX + ',' + translateY + ')'];                                                    // 2355
                                                                                                                       // 2356
		// apply rotation                                                                                                    // 2357
		if (inverted) {                                                                                                      // 2358
			transform.push('rotate(90) scale(-1,1)');                                                                           // 2359
		} else if (rotation) { // text rotation                                                                              // 2360
			transform.push('rotate(' + rotation + ' ' + (element.getAttribute('x') || 0) + ' ' + (element.getAttribute('y') || 0) + ')');
			                                                                                                                    // 2362
			// Delete bBox memo when the rotation changes                                                                       // 2363
			//delete wrapper.bBox;                                                                                              // 2364
		}                                                                                                                    // 2365
                                                                                                                       // 2366
		// apply scale                                                                                                       // 2367
		if (defined(scaleX) || defined(scaleY)) {                                                                            // 2368
			transform.push('scale(' + pick(scaleX, 1) + ' ' + pick(scaleY, 1) + ')');                                           // 2369
		}                                                                                                                    // 2370
                                                                                                                       // 2371
		if (transform.length) {                                                                                              // 2372
			element.setAttribute('transform', transform.join(' '));                                                             // 2373
		}                                                                                                                    // 2374
	},                                                                                                                    // 2375
	/**                                                                                                                   // 2376
	 * Bring the element to the front                                                                                     // 2377
	 */                                                                                                                   // 2378
	toFront: function () {                                                                                                // 2379
		var element = this.element;                                                                                          // 2380
		element.parentNode.appendChild(element);                                                                             // 2381
		return this;                                                                                                         // 2382
	},                                                                                                                    // 2383
                                                                                                                       // 2384
                                                                                                                       // 2385
	/**                                                                                                                   // 2386
	 * Break down alignment options like align, verticalAlign, x and y                                                    // 2387
	 * to x and y relative to the chart.                                                                                  // 2388
	 *                                                                                                                    // 2389
	 * @param {Object} alignOptions                                                                                       // 2390
	 * @param {Boolean} alignByTranslate                                                                                  // 2391
	 * @param {String[Object} box The box to align to, needs a width and height. When the                                 // 2392
	 *		box is a string, it refers to an object in the Renderer. For example, when                                        // 2393
	 *		box is 'spacingBox', it refers to Renderer.spacingBox which holds width, height                                   // 2394
	 *		x and y properties.                                                                                               // 2395
	 *                                                                                                                    // 2396
	 */                                                                                                                   // 2397
	align: function (alignOptions, alignByTranslate, box) {                                                               // 2398
		var align,                                                                                                           // 2399
			vAlign,                                                                                                             // 2400
			x,                                                                                                                  // 2401
			y,                                                                                                                  // 2402
			attribs = {},                                                                                                       // 2403
			alignTo,                                                                                                            // 2404
			renderer = this.renderer,                                                                                           // 2405
			alignedObjects = renderer.alignedObjects;                                                                           // 2406
                                                                                                                       // 2407
		// First call on instanciate                                                                                         // 2408
		if (alignOptions) {                                                                                                  // 2409
			this.alignOptions = alignOptions;                                                                                   // 2410
			this.alignByTranslate = alignByTranslate;                                                                           // 2411
			if (!box || isString(box)) { // boxes other than renderer handle this internally                                    // 2412
				this.alignTo = alignTo = box || 'renderer';                                                                        // 2413
				erase(alignedObjects, this); // prevent duplicates, like legendGroup after resize                                  // 2414
				alignedObjects.push(this);                                                                                         // 2415
				box = null; // reassign it below                                                                                   // 2416
			}                                                                                                                   // 2417
                                                                                                                       // 2418
		// When called on resize, no arguments are supplied                                                                  // 2419
		} else {                                                                                                             // 2420
			alignOptions = this.alignOptions;                                                                                   // 2421
			alignByTranslate = this.alignByTranslate;                                                                           // 2422
			alignTo = this.alignTo;                                                                                             // 2423
		}                                                                                                                    // 2424
                                                                                                                       // 2425
		box = pick(box, renderer[alignTo], renderer);                                                                        // 2426
                                                                                                                       // 2427
		// Assign variables                                                                                                  // 2428
		align = alignOptions.align;                                                                                          // 2429
		vAlign = alignOptions.verticalAlign;                                                                                 // 2430
		x = (box.x || 0) + (alignOptions.x || 0); // default: left align                                                     // 2431
		y = (box.y || 0) + (alignOptions.y || 0); // default: top align                                                      // 2432
                                                                                                                       // 2433
		// Align                                                                                                             // 2434
		if (align === 'right' || align === 'center') {                                                                       // 2435
			x += (box.width - (alignOptions.width || 0)) /                                                                      // 2436
					{ right: 1, center: 2 }[align];                                                                                   // 2437
		}                                                                                                                    // 2438
		attribs[alignByTranslate ? 'translateX' : 'x'] = mathRound(x);                                                       // 2439
                                                                                                                       // 2440
                                                                                                                       // 2441
		// Vertical align                                                                                                    // 2442
		if (vAlign === 'bottom' || vAlign === 'middle') {                                                                    // 2443
			y += (box.height - (alignOptions.height || 0)) /                                                                    // 2444
					({ bottom: 1, middle: 2 }[vAlign] || 1);                                                                          // 2445
                                                                                                                       // 2446
		}                                                                                                                    // 2447
		attribs[alignByTranslate ? 'translateY' : 'y'] = mathRound(y);                                                       // 2448
                                                                                                                       // 2449
		// Animate only if already placed                                                                                    // 2450
		this[this.placed ? 'animate' : 'attr'](attribs);                                                                     // 2451
		this.placed = true;                                                                                                  // 2452
		this.alignAttr = attribs;                                                                                            // 2453
                                                                                                                       // 2454
		return this;                                                                                                         // 2455
	},                                                                                                                    // 2456
                                                                                                                       // 2457
	/**                                                                                                                   // 2458
	 * Get the bounding box (width, height, x and y) for the element                                                      // 2459
	 */                                                                                                                   // 2460
	getBBox: function (reload) {                                                                                          // 2461
		var wrapper = this,                                                                                                  // 2462
			bBox,// = wrapper.bBox,                                                                                             // 2463
			renderer = wrapper.renderer,                                                                                        // 2464
			width,                                                                                                              // 2465
			height,                                                                                                             // 2466
			rotation = wrapper.rotation,                                                                                        // 2467
			element = wrapper.element,                                                                                          // 2468
			styles = wrapper.styles,                                                                                            // 2469
			rad = rotation * deg2rad,                                                                                           // 2470
			textStr = wrapper.textStr,                                                                                          // 2471
			textShadow,                                                                                                         // 2472
			elemStyle = element.style,                                                                                          // 2473
			toggleTextShadowShim,                                                                                               // 2474
			cacheKey;                                                                                                           // 2475
                                                                                                                       // 2476
		if (textStr !== UNDEFINED) {                                                                                         // 2477
                                                                                                                       // 2478
			// Properties that affect bounding box                                                                              // 2479
			cacheKey = ['', rotation || 0, styles && styles.fontSize, element.style.width].join(',');                           // 2480
                                                                                                                       // 2481
			// Since numbers are monospaced, and numerical labels appear a lot in a chart,                                      // 2482
			// we assume that a label of n characters has the same bounding box as others                                       // 2483
			// of the same length.                                                                                              // 2484
			if (textStr === '' || numRegex.test(textStr)) {                                                                     // 2485
				cacheKey = 'num:' + textStr.toString().length + cacheKey;                                                          // 2486
                                                                                                                       // 2487
			// Caching all strings reduces rendering time by 4-5%.                                                              // 2488
			} else {                                                                                                            // 2489
				cacheKey = textStr + cacheKey;                                                                                     // 2490
			}                                                                                                                   // 2491
		}                                                                                                                    // 2492
                                                                                                                       // 2493
		if (cacheKey && !reload) {                                                                                           // 2494
			bBox = renderer.cache[cacheKey];                                                                                    // 2495
		}                                                                                                                    // 2496
                                                                                                                       // 2497
		// No cache found                                                                                                    // 2498
		if (!bBox) {                                                                                                         // 2499
                                                                                                                       // 2500
			// SVG elements                                                                                                     // 2501
			if (element.namespaceURI === SVG_NS || renderer.forExport) {                                                        // 2502
				try { // Fails in Firefox if the container has display: none.                                                      // 2503
                                                                                                                       // 2504
					// When the text shadow shim is used, we need to hide the fake shadows                                            // 2505
					// to get the correct bounding box (#3872)                                                                        // 2506
					toggleTextShadowShim = this.fakeTS && function (display) {                                                        // 2507
						each(element.querySelectorAll('.' + PREFIX + 'text-shadow'), function (tspan) {                                  // 2508
							tspan.style.display = display;                                                                                  // 2509
						});                                                                                                              // 2510
					};                                                                                                                // 2511
                                                                                                                       // 2512
					// Workaround for #3842, Firefox reporting wrong bounding box for shadows                                         // 2513
					if (isFirefox && elemStyle.textShadow) {                                                                          // 2514
						textShadow = elemStyle.textShadow;                                                                               // 2515
						elemStyle.textShadow = '';                                                                                       // 2516
					} else if (toggleTextShadowShim) {                                                                                // 2517
						toggleTextShadowShim(NONE);                                                                                      // 2518
					}                                                                                                                 // 2519
                                                                                                                       // 2520
					bBox = element.getBBox ?                                                                                          // 2521
						// SVG: use extend because IE9 is not allowed to change width and height in case                                 // 2522
						// of rotation (below)                                                                                           // 2523
						extend({}, element.getBBox()) :                                                                                  // 2524
						// Canvas renderer and legacy IE in export mode                                                                  // 2525
						{                                                                                                                // 2526
							width: element.offsetWidth,                                                                                     // 2527
							height: element.offsetHeight                                                                                    // 2528
						};                                                                                                               // 2529
                                                                                                                       // 2530
					// #3842                                                                                                          // 2531
					if (textShadow) {                                                                                                 // 2532
						elemStyle.textShadow = textShadow;                                                                               // 2533
					} else if (toggleTextShadowShim) {                                                                                // 2534
						toggleTextShadowShim('');                                                                                        // 2535
					}                                                                                                                 // 2536
				} catch (e) {}                                                                                                     // 2537
                                                                                                                       // 2538
				// If the bBox is not set, the try-catch block above failed. The other condition                                   // 2539
				// is for Opera that returns a width of -Infinity on hidden elements.                                              // 2540
				if (!bBox || bBox.width < 0) {                                                                                     // 2541
					bBox = { width: 0, height: 0 };                                                                                   // 2542
				}                                                                                                                  // 2543
                                                                                                                       // 2544
                                                                                                                       // 2545
			// VML Renderer or useHTML within SVG                                                                               // 2546
			} else {                                                                                                            // 2547
                                                                                                                       // 2548
				bBox = wrapper.htmlGetBBox();                                                                                      // 2549
                                                                                                                       // 2550
			}                                                                                                                   // 2551
                                                                                                                       // 2552
			// True SVG elements as well as HTML elements in modern browsers using the .useHTML option                          // 2553
			// need to compensated for rotation                                                                                 // 2554
			if (renderer.isSVG) {                                                                                               // 2555
				width = bBox.width;                                                                                                // 2556
				height = bBox.height;                                                                                              // 2557
                                                                                                                       // 2558
				// Workaround for wrong bounding box in IE9 and IE10 (#1101, #1505, #1669, #2568)                                  // 2559
				if (isIE && styles && styles.fontSize === '11px' && height.toPrecision(3) === '16.9') {                            // 2560
					bBox.height = height = 14;                                                                                        // 2561
				}                                                                                                                  // 2562
                                                                                                                       // 2563
				// Adjust for rotated text                                                                                         // 2564
				if (rotation) {                                                                                                    // 2565
					bBox.width = mathAbs(height * mathSin(rad)) + mathAbs(width * mathCos(rad));                                      // 2566
					bBox.height = mathAbs(height * mathCos(rad)) + mathAbs(width * mathSin(rad));                                     // 2567
				}                                                                                                                  // 2568
			}                                                                                                                   // 2569
                                                                                                                       // 2570
			// Cache it                                                                                                         // 2571
			renderer.cache[cacheKey] = bBox;                                                                                    // 2572
		}                                                                                                                    // 2573
		return bBox;                                                                                                         // 2574
	},                                                                                                                    // 2575
                                                                                                                       // 2576
	/**                                                                                                                   // 2577
	 * Show the element                                                                                                   // 2578
	 */                                                                                                                   // 2579
	show: function (inherit) {                                                                                            // 2580
		// IE9-11 doesn't handle visibilty:inherit well, so we remove the attribute instead (#2881)                          // 2581
		if (inherit && this.element.namespaceURI === SVG_NS) {                                                               // 2582
			this.element.removeAttribute('visibility');                                                                         // 2583
		} else {                                                                                                             // 2584
			this.attr({ visibility: inherit ? 'inherit' : VISIBLE });                                                           // 2585
		}                                                                                                                    // 2586
		return this;                                                                                                         // 2587
	},                                                                                                                    // 2588
                                                                                                                       // 2589
	/**                                                                                                                   // 2590
	 * Hide the element                                                                                                   // 2591
	 */                                                                                                                   // 2592
	hide: function () {                                                                                                   // 2593
		return this.attr({ visibility: HIDDEN });                                                                            // 2594
	},                                                                                                                    // 2595
                                                                                                                       // 2596
	fadeOut: function (duration) {                                                                                        // 2597
		var elemWrapper = this;                                                                                              // 2598
		elemWrapper.animate({                                                                                                // 2599
			opacity: 0                                                                                                          // 2600
		}, {                                                                                                                 // 2601
			duration: duration || 150,                                                                                          // 2602
			complete: function () {                                                                                             // 2603
				elemWrapper.attr({ y: -9999 }); // #3088, assuming we're only using this for tooltips                              // 2604
			}                                                                                                                   // 2605
		});                                                                                                                  // 2606
	},                                                                                                                    // 2607
                                                                                                                       // 2608
	/**                                                                                                                   // 2609
	 * Add the element                                                                                                    // 2610
	 * @param {Object|Undefined} parent Can be an element, an element wrapper or undefined                                // 2611
	 *	to append the element to the renderer.box.                                                                         // 2612
	 */                                                                                                                   // 2613
	add: function (parent) {                                                                                              // 2614
                                                                                                                       // 2615
		var renderer = this.renderer,                                                                                        // 2616
			element = this.element,                                                                                             // 2617
			inserted;                                                                                                           // 2618
                                                                                                                       // 2619
		if (parent) {                                                                                                        // 2620
			this.parentGroup = parent;                                                                                          // 2621
		}                                                                                                                    // 2622
                                                                                                                       // 2623
		// mark as inverted                                                                                                  // 2624
		this.parentInverted = parent && parent.inverted;                                                                     // 2625
                                                                                                                       // 2626
		// build formatted text                                                                                              // 2627
		if (this.textStr !== undefined) {                                                                                    // 2628
			renderer.buildText(this);                                                                                           // 2629
		}                                                                                                                    // 2630
                                                                                                                       // 2631
		// Mark as added                                                                                                     // 2632
		this.added = true;                                                                                                   // 2633
                                                                                                                       // 2634
		// If we're adding to renderer root, or other elements in the group                                                  // 2635
		// have a z index, we need to handle it                                                                              // 2636
		if (!parent || parent.handleZ || this.zIndex) {                                                                      // 2637
			inserted = this.zIndexSetter();                                                                                     // 2638
		}                                                                                                                    // 2639
                                                                                                                       // 2640
		// If zIndex is not handled, append at the end                                                                       // 2641
		if (!inserted) {                                                                                                     // 2642
			(parent ? parent.element : renderer.box).appendChild(element);                                                      // 2643
		}                                                                                                                    // 2644
                                                                                                                       // 2645
		// fire an event for internal hooks                                                                                  // 2646
		if (this.onAdd) {                                                                                                    // 2647
			this.onAdd();                                                                                                       // 2648
		}                                                                                                                    // 2649
                                                                                                                       // 2650
		return this;                                                                                                         // 2651
	},                                                                                                                    // 2652
                                                                                                                       // 2653
	/**                                                                                                                   // 2654
	 * Removes a child either by removeChild or move to garbageBin.                                                       // 2655
	 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.               // 2656
	 */                                                                                                                   // 2657
	safeRemoveChild: function (element) {                                                                                 // 2658
		var parentNode = element.parentNode;                                                                                 // 2659
		if (parentNode) {                                                                                                    // 2660
			parentNode.removeChild(element);                                                                                    // 2661
		}                                                                                                                    // 2662
	},                                                                                                                    // 2663
                                                                                                                       // 2664
	/**                                                                                                                   // 2665
	 * Destroy the element and element wrapper                                                                            // 2666
	 */                                                                                                                   // 2667
	destroy: function () {                                                                                                // 2668
		var wrapper = this,                                                                                                  // 2669
			element = wrapper.element || {},                                                                                    // 2670
			shadows = wrapper.shadows,                                                                                          // 2671
			parentToClean = wrapper.renderer.isSVG && element.nodeName === 'SPAN' && wrapper.parentGroup,                       // 2672
			grandParent,                                                                                                        // 2673
			key,                                                                                                                // 2674
			i;                                                                                                                  // 2675
                                                                                                                       // 2676
		// remove events                                                                                                     // 2677
		element.onclick = element.onmouseout = element.onmouseover = element.onmousemove = element.point = null;             // 2678
		stop(wrapper); // stop running animations                                                                            // 2679
                                                                                                                       // 2680
		if (wrapper.clipPath) {                                                                                              // 2681
			wrapper.clipPath = wrapper.clipPath.destroy();                                                                      // 2682
		}                                                                                                                    // 2683
                                                                                                                       // 2684
		// Destroy stops in case this is a gradient object                                                                   // 2685
		if (wrapper.stops) {                                                                                                 // 2686
			for (i = 0; i < wrapper.stops.length; i++) {                                                                        // 2687
				wrapper.stops[i] = wrapper.stops[i].destroy();                                                                     // 2688
			}                                                                                                                   // 2689
			wrapper.stops = null;                                                                                               // 2690
		}                                                                                                                    // 2691
                                                                                                                       // 2692
		// remove element                                                                                                    // 2693
		wrapper.safeRemoveChild(element);                                                                                    // 2694
                                                                                                                       // 2695
		// destroy shadows                                                                                                   // 2696
		if (shadows) {                                                                                                       // 2697
			each(shadows, function (shadow) {                                                                                   // 2698
				wrapper.safeRemoveChild(shadow);                                                                                   // 2699
			});                                                                                                                 // 2700
		}                                                                                                                    // 2701
                                                                                                                       // 2702
		// In case of useHTML, clean up empty containers emulating SVG groups (#1960, #2393, #2697).                         // 2703
		while (parentToClean && parentToClean.div && parentToClean.div.childNodes.length === 0) {                            // 2704
			grandParent = parentToClean.parentGroup;                                                                            // 2705
			wrapper.safeRemoveChild(parentToClean.div);                                                                         // 2706
			delete parentToClean.div;                                                                                           // 2707
			parentToClean = grandParent;                                                                                        // 2708
		}                                                                                                                    // 2709
                                                                                                                       // 2710
		// remove from alignObjects                                                                                          // 2711
		if (wrapper.alignTo) {                                                                                               // 2712
			erase(wrapper.renderer.alignedObjects, wrapper);                                                                    // 2713
		}                                                                                                                    // 2714
                                                                                                                       // 2715
		for (key in wrapper) {                                                                                               // 2716
			delete wrapper[key];                                                                                                // 2717
		}                                                                                                                    // 2718
                                                                                                                       // 2719
		return null;                                                                                                         // 2720
	},                                                                                                                    // 2721
                                                                                                                       // 2722
	/**                                                                                                                   // 2723
	 * Add a shadow to the element. Must be done after the element is added to the DOM                                    // 2724
	 * @param {Boolean|Object} shadowOptions                                                                              // 2725
	 */                                                                                                                   // 2726
	shadow: function (shadowOptions, group, cutOff) {                                                                     // 2727
		var shadows = [],                                                                                                    // 2728
			i,                                                                                                                  // 2729
			shadow,                                                                                                             // 2730
			element = this.element,                                                                                             // 2731
			strokeWidth,                                                                                                        // 2732
			shadowWidth,                                                                                                        // 2733
			shadowElementOpacity,                                                                                               // 2734
                                                                                                                       // 2735
			// compensate for inverted plot area                                                                                // 2736
			transform;                                                                                                          // 2737
                                                                                                                       // 2738
                                                                                                                       // 2739
		if (shadowOptions) {                                                                                                 // 2740
			shadowWidth = pick(shadowOptions.width, 3);                                                                         // 2741
			shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;                                               // 2742
			transform = this.parentInverted ?                                                                                   // 2743
				'(-1,-1)' :                                                                                                        // 2744
				'(' + pick(shadowOptions.offsetX, 1) + ', ' + pick(shadowOptions.offsetY, 1) + ')';                                // 2745
			for (i = 1; i <= shadowWidth; i++) {                                                                                // 2746
				shadow = element.cloneNode(0);                                                                                     // 2747
				strokeWidth = (shadowWidth * 2) + 1 - (2 * i);                                                                     // 2748
				attr(shadow, {                                                                                                     // 2749
					'isShadow': 'true',                                                                                               // 2750
					'stroke': shadowOptions.color || 'black',                                                                         // 2751
					'stroke-opacity': shadowElementOpacity * i,                                                                       // 2752
					'stroke-width': strokeWidth,                                                                                      // 2753
					'transform': 'translate' + transform,                                                                             // 2754
					'fill': NONE                                                                                                      // 2755
				});                                                                                                                // 2756
				if (cutOff) {                                                                                                      // 2757
					attr(shadow, 'height', mathMax(attr(shadow, 'height') - strokeWidth, 0));                                         // 2758
					shadow.cutHeight = strokeWidth;                                                                                   // 2759
				}                                                                                                                  // 2760
                                                                                                                       // 2761
				if (group) {                                                                                                       // 2762
					group.element.appendChild(shadow);                                                                                // 2763
				} else {                                                                                                           // 2764
					element.parentNode.insertBefore(shadow, element);                                                                 // 2765
				}                                                                                                                  // 2766
                                                                                                                       // 2767
				shadows.push(shadow);                                                                                              // 2768
			}                                                                                                                   // 2769
                                                                                                                       // 2770
			this.shadows = shadows;                                                                                             // 2771
		}                                                                                                                    // 2772
		return this;                                                                                                         // 2773
                                                                                                                       // 2774
	},                                                                                                                    // 2775
                                                                                                                       // 2776
	xGetter: function (key) {                                                                                             // 2777
		if (this.element.nodeName === 'circle') {                                                                            // 2778
			key = { x: 'cx', y: 'cy' }[key] || key;                                                                             // 2779
		}                                                                                                                    // 2780
		return this._defaultGetter(key);                                                                                     // 2781
	},                                                                                                                    // 2782
                                                                                                                       // 2783
	/**                                                                                                                   // 2784
	 * Get the current value of an attribute or pseudo attribute, used mainly                                             // 2785
	 * for animation.                                                                                                     // 2786
	 */                                                                                                                   // 2787
	_defaultGetter: function (key) {                                                                                      // 2788
		var ret = pick(this[key], this.element ? this.element.getAttribute(key) : null, 0);                                  // 2789
                                                                                                                       // 2790
		if (/^[\-0-9\.]+$/.test(ret)) { // is numerical                                                                      // 2791
			ret = parseFloat(ret);                                                                                              // 2792
		}                                                                                                                    // 2793
		return ret;                                                                                                          // 2794
	},                                                                                                                    // 2795
                                                                                                                       // 2796
                                                                                                                       // 2797
	dSetter: function (value, key, element) {                                                                             // 2798
		if (value && value.join) { // join path                                                                              // 2799
			value = value.join(' ');                                                                                            // 2800
		}                                                                                                                    // 2801
		if (/(NaN| {2}|^$)/.test(value)) {                                                                                   // 2802
			value = 'M 0 0';                                                                                                    // 2803
		}                                                                                                                    // 2804
		element.setAttribute(key, value);                                                                                    // 2805
                                                                                                                       // 2806
		this[key] = value;                                                                                                   // 2807
	},                                                                                                                    // 2808
	dashstyleSetter: function (value) {                                                                                   // 2809
		var i;                                                                                                               // 2810
		value = value && value.toLowerCase();                                                                                // 2811
		if (value) {                                                                                                         // 2812
			value = value                                                                                                       // 2813
				.replace('shortdashdotdot', '3,1,1,1,1,1,')                                                                        // 2814
				.replace('shortdashdot', '3,1,1,1')                                                                                // 2815
				.replace('shortdot', '1,1,')                                                                                       // 2816
				.replace('shortdash', '3,1,')                                                                                      // 2817
				.replace('longdash', '8,3,')                                                                                       // 2818
				.replace(/dot/g, '1,3,')                                                                                           // 2819
				.replace('dash', '4,3,')                                                                                           // 2820
				.replace(/,$/, '')                                                                                                 // 2821
				.split(','); // ending comma                                                                                       // 2822
                                                                                                                       // 2823
			i = value.length;                                                                                                   // 2824
			while (i--) {                                                                                                       // 2825
				value[i] = pInt(value[i]) * this['stroke-width'];                                                                  // 2826
			}                                                                                                                   // 2827
			value = value.join(',')                                                                                             // 2828
				.replace('NaN', 'none'); // #3226                                                                                  // 2829
			this.element.setAttribute('stroke-dasharray', value);                                                               // 2830
		}                                                                                                                    // 2831
	},                                                                                                                    // 2832
	alignSetter: function (value) {                                                                                       // 2833
		this.element.setAttribute('text-anchor', { left: 'start', center: 'middle', right: 'end' }[value]);                  // 2834
	},                                                                                                                    // 2835
	opacitySetter: function (value, key, element) {                                                                       // 2836
		this[key] = value;                                                                                                   // 2837
		element.setAttribute(key, value);                                                                                    // 2838
	},                                                                                                                    // 2839
	titleSetter: function (value) {                                                                                       // 2840
		var titleNode = this.element.getElementsByTagName('title')[0];                                                       // 2841
		if (!titleNode) {                                                                                                    // 2842
			titleNode = doc.createElementNS(SVG_NS, 'title');                                                                   // 2843
			this.element.appendChild(titleNode);                                                                                // 2844
		}                                                                                                                    // 2845
		titleNode.appendChild(                                                                                               // 2846
			doc.createTextNode(                                                                                                 // 2847
				(String(pick(value), '')).replace(/<[^>]*>/g, '') // #3276, #3895                                                  // 2848
			)                                                                                                                   // 2849
		);                                                                                                                   // 2850
	},                                                                                                                    // 2851
	textSetter: function (value) {                                                                                        // 2852
		if (value !== this.textStr) {                                                                                        // 2853
			// Delete bBox memo when the text changes                                                                           // 2854
			delete this.bBox;                                                                                                   // 2855
		                                                                                                                     // 2856
			this.textStr = value;                                                                                               // 2857
			if (this.added) {                                                                                                   // 2858
				this.renderer.buildText(this);                                                                                     // 2859
			}                                                                                                                   // 2860
		}                                                                                                                    // 2861
	},                                                                                                                    // 2862
	fillSetter: function (value, key, element) {                                                                          // 2863
		if (typeof value === 'string') {                                                                                     // 2864
			element.setAttribute(key, value);                                                                                   // 2865
		} else if (value) {                                                                                                  // 2866
			this.colorGradient(value, key, element);                                                                            // 2867
		}                                                                                                                    // 2868
	},                                                                                                                    // 2869
	zIndexSetter: function (value, key) {                                                                                 // 2870
		var renderer = this.renderer,                                                                                        // 2871
			parentGroup = this.parentGroup,                                                                                     // 2872
			parentWrapper = parentGroup || renderer,                                                                            // 2873
			parentNode = parentWrapper.element || renderer.box,                                                                 // 2874
			childNodes,                                                                                                         // 2875
			otherElement,                                                                                                       // 2876
			otherZIndex,                                                                                                        // 2877
			element = this.element,                                                                                             // 2878
			inserted,                                                                                                           // 2879
			run = this.added,                                                                                                   // 2880
			i;                                                                                                                  // 2881
		                                                                                                                     // 2882
		if (defined(value)) {                                                                                                // 2883
			element.setAttribute(key, value); // So we can read it for other elements in the group                              // 2884
			value = +value;                                                                                                     // 2885
			if (this[key] === value) { // Only update when needed (#3865)                                                       // 2886
				run = false;                                                                                                       // 2887
			}                                                                                                                   // 2888
			this[key] = value;                                                                                                  // 2889
		}                                                                                                                    // 2890
                                                                                                                       // 2891
		// Insert according to this and other elements' zIndex. Before .add() is called,                                     // 2892
		// nothing is done. Then on add, or by later calls to zIndexSetter, the node                                         // 2893
		// is placed on the right place in the DOM.                                                                          // 2894
		if (run) {                                                                                                           // 2895
			value = this.zIndex;                                                                                                // 2896
                                                                                                                       // 2897
			if (value && parentGroup) {                                                                                         // 2898
				parentGroup.handleZ = true;                                                                                        // 2899
			}                                                                                                                   // 2900
		                                                                                                                     // 2901
			childNodes = parentNode.childNodes;                                                                                 // 2902
			for (i = 0; i < childNodes.length && !inserted; i++) {                                                              // 2903
				otherElement = childNodes[i];                                                                                      // 2904
				otherZIndex = attr(otherElement, 'zIndex');                                                                        // 2905
				if (otherElement !== element && (                                                                                  // 2906
						// Insert before the first element with a higher zIndex                                                          // 2907
						pInt(otherZIndex) > value ||                                                                                     // 2908
						// If no zIndex given, insert before the first element with a zIndex                                             // 2909
						(!defined(value) && defined(otherZIndex))                                                                        // 2910
                                                                                                                       // 2911
						)) {                                                                                                             // 2912
					parentNode.insertBefore(element, otherElement);                                                                   // 2913
					inserted = true;                                                                                                  // 2914
				}                                                                                                                  // 2915
			}                                                                                                                   // 2916
			if (!inserted) {                                                                                                    // 2917
				parentNode.appendChild(element);                                                                                   // 2918
			}                                                                                                                   // 2919
		}                                                                                                                    // 2920
		return inserted;                                                                                                     // 2921
	},                                                                                                                    // 2922
	_defaultSetter: function (value, key, element) {                                                                      // 2923
		element.setAttribute(key, value);                                                                                    // 2924
	}                                                                                                                     // 2925
};                                                                                                                     // 2926
                                                                                                                       // 2927
// Some shared setters and getters                                                                                     // 2928
SVGElement.prototype.yGetter = SVGElement.prototype.xGetter;                                                           // 2929
SVGElement.prototype.translateXSetter = SVGElement.prototype.translateYSetter =                                        // 2930
		SVGElement.prototype.rotationSetter = SVGElement.prototype.verticalAlignSetter =                                     // 2931
		SVGElement.prototype.scaleXSetter = SVGElement.prototype.scaleYSetter = function (value, key) {                      // 2932
	this[key] = value;                                                                                                    // 2933
	this.doTransform = true;                                                                                              // 2934
};                                                                                                                     // 2935
                                                                                                                       // 2936
// WebKit and Batik have problems with a stroke-width of zero, so in this case we remove the                           // 2937
// stroke attribute altogether. #1270, #1369, #3065, #3072.                                                            // 2938
SVGElement.prototype['stroke-widthSetter'] = SVGElement.prototype.strokeSetter = function (value, key, element) {      // 2939
	this[key] = value;                                                                                                    // 2940
	// Only apply the stroke attribute if the stroke width is defined and larger than 0                                   // 2941
	if (this.stroke && this['stroke-width']) {                                                                            // 2942
		this.strokeWidth = this['stroke-width'];                                                                             // 2943
		SVGElement.prototype.fillSetter.call(this, this.stroke, 'stroke', element); // use prototype as instance may be overridden
		element.setAttribute('stroke-width', this['stroke-width']);                                                          // 2945
		this.hasStroke = true;                                                                                               // 2946
	} else if (key === 'stroke-width' && value === 0 && this.hasStroke) {                                                 // 2947
		element.removeAttribute('stroke');                                                                                   // 2948
		this.hasStroke = false;                                                                                              // 2949
	}                                                                                                                     // 2950
};                                                                                                                     // 2951
                                                                                                                       // 2952
                                                                                                                       // 2953
/**                                                                                                                    // 2954
 * The default SVG renderer                                                                                            // 2955
 */                                                                                                                    // 2956
var SVGRenderer = function () {                                                                                        // 2957
	this.init.apply(this, arguments);                                                                                     // 2958
};                                                                                                                     // 2959
SVGRenderer.prototype = {                                                                                              // 2960
	Element: SVGElement,                                                                                                  // 2961
                                                                                                                       // 2962
	/**                                                                                                                   // 2963
	 * Initialize the SVGRenderer                                                                                         // 2964
	 * @param {Object} container                                                                                          // 2965
	 * @param {Number} width                                                                                              // 2966
	 * @param {Number} height                                                                                             // 2967
	 * @param {Boolean} forExport                                                                                         // 2968
	 */                                                                                                                   // 2969
	init: function (container, width, height, style, forExport) {                                                         // 2970
		var renderer = this,                                                                                                 // 2971
			loc = location,                                                                                                     // 2972
			boxWrapper,                                                                                                         // 2973
			element,                                                                                                            // 2974
			desc;                                                                                                               // 2975
                                                                                                                       // 2976
		boxWrapper = renderer.createElement('svg')                                                                           // 2977
			.attr({                                                                                                             // 2978
				version: '1.1'                                                                                                     // 2979
			})                                                                                                                  // 2980
			.css(this.getStyle(style));                                                                                         // 2981
		element = boxWrapper.element;                                                                                        // 2982
		container.appendChild(element);                                                                                      // 2983
                                                                                                                       // 2984
		// For browsers other than IE, add the namespace attribute (#1978)                                                   // 2985
		if (container.innerHTML.indexOf('xmlns') === -1) {                                                                   // 2986
			attr(element, 'xmlns', SVG_NS);                                                                                     // 2987
		}                                                                                                                    // 2988
                                                                                                                       // 2989
		// object properties                                                                                                 // 2990
		renderer.isSVG = true;                                                                                               // 2991
		renderer.box = element;                                                                                              // 2992
		renderer.boxWrapper = boxWrapper;                                                                                    // 2993
		renderer.alignedObjects = [];                                                                                        // 2994
                                                                                                                       // 2995
		// Page url used for internal references. #24, #672, #1070                                                           // 2996
		renderer.url = (isFirefox || isWebKit) && doc.getElementsByTagName('base').length ?                                  // 2997
			loc.href                                                                                                            // 2998
				.replace(/#.*?$/, '') // remove the hash                                                                           // 2999
				.replace(/([\('\)])/g, '\\$1') // escape parantheses and quotes                                                    // 3000
				.replace(/ /g, '%20') : // replace spaces (needed for Safari only)                                                 // 3001
			'';                                                                                                                 // 3002
                                                                                                                       // 3003
		// Add description                                                                                                   // 3004
		desc = this.createElement('desc').add();                                                                             // 3005
		desc.element.appendChild(doc.createTextNode('Created with ' + PRODUCT + ' ' + VERSION));                             // 3006
                                                                                                                       // 3007
                                                                                                                       // 3008
		renderer.defs = this.createElement('defs').add();                                                                    // 3009
		renderer.forExport = forExport;                                                                                      // 3010
		renderer.gradients = {}; // Object where gradient SvgElements are stored                                             // 3011
		renderer.cache = {}; // Cache for numerical bounding boxes                                                           // 3012
                                                                                                                       // 3013
		renderer.setSize(width, height, false);                                                                              // 3014
                                                                                                                       // 3015
                                                                                                                       // 3016
                                                                                                                       // 3017
		// Issue 110 workaround:                                                                                             // 3018
		// In Firefox, if a div is positioned by percentage, its pixel position may land                                     // 3019
		// between pixels. The container itself doesn't display this, but an SVG element                                     // 3020
		// inside this container will be drawn at subpixel precision. In order to draw                                       // 3021
		// sharp lines, this must be compensated for. This doesn't seem to work inside                                       // 3022
		// iframes though (like in jsFiddle).                                                                                // 3023
		var subPixelFix, rect;                                                                                               // 3024
		if (isFirefox && container.getBoundingClientRect) {                                                                  // 3025
			renderer.subPixelFix = subPixelFix = function () {                                                                  // 3026
				css(container, { left: 0, top: 0 });                                                                               // 3027
				rect = container.getBoundingClientRect();                                                                          // 3028
				css(container, {                                                                                                   // 3029
					left: (mathCeil(rect.left) - rect.left) + PX,                                                                     // 3030
					top: (mathCeil(rect.top) - rect.top) + PX                                                                         // 3031
				});                                                                                                                // 3032
			};                                                                                                                  // 3033
                                                                                                                       // 3034
			// run the fix now                                                                                                  // 3035
			subPixelFix();                                                                                                      // 3036
                                                                                                                       // 3037
			// run it on resize                                                                                                 // 3038
			addEvent(win, 'resize', subPixelFix);                                                                               // 3039
		}                                                                                                                    // 3040
	},                                                                                                                    // 3041
                                                                                                                       // 3042
	getStyle: function (style) {                                                                                          // 3043
		return (this.style = extend({                                                                                        // 3044
			fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif', // default font                 // 3045
			fontSize: '12px'                                                                                                    // 3046
		}, style));                                                                                                          // 3047
	},                                                                                                                    // 3048
                                                                                                                       // 3049
	/**                                                                                                                   // 3050
	 * Detect whether the renderer is hidden. This happens when one of the parent elements                                // 3051
	 * has display: none. #608.                                                                                           // 3052
	 */                                                                                                                   // 3053
	isHidden: function () {                                                                                               // 3054
		return !this.boxWrapper.getBBox().width;                                                                             // 3055
	},                                                                                                                    // 3056
                                                                                                                       // 3057
	/**                                                                                                                   // 3058
	 * Destroys the renderer and its allocated members.                                                                   // 3059
	 */                                                                                                                   // 3060
	destroy: function () {                                                                                                // 3061
		var renderer = this,                                                                                                 // 3062
			rendererDefs = renderer.defs;                                                                                       // 3063
		renderer.box = null;                                                                                                 // 3064
		renderer.boxWrapper = renderer.boxWrapper.destroy();                                                                 // 3065
                                                                                                                       // 3066
		// Call destroy on all gradient elements                                                                             // 3067
		destroyObjectProperties(renderer.gradients || {});                                                                   // 3068
		renderer.gradients = null;                                                                                           // 3069
                                                                                                                       // 3070
		// Defs are null in VMLRenderer                                                                                      // 3071
		// Otherwise, destroy them here.                                                                                     // 3072
		if (rendererDefs) {                                                                                                  // 3073
			renderer.defs = rendererDefs.destroy();                                                                             // 3074
		}                                                                                                                    // 3075
                                                                                                                       // 3076
		// Remove sub pixel fix handler                                                                                      // 3077
		// We need to check that there is a handler, otherwise all functions that are registered for event 'resize' are removed
		// See issue #982                                                                                                    // 3079
		if (renderer.subPixelFix) {                                                                                          // 3080
			removeEvent(win, 'resize', renderer.subPixelFix);                                                                   // 3081
		}                                                                                                                    // 3082
                                                                                                                       // 3083
		renderer.alignedObjects = null;                                                                                      // 3084
                                                                                                                       // 3085
		return null;                                                                                                         // 3086
	},                                                                                                                    // 3087
                                                                                                                       // 3088
	/**                                                                                                                   // 3089
	 * Create a wrapper for an SVG element                                                                                // 3090
	 * @param {Object} nodeName                                                                                           // 3091
	 */                                                                                                                   // 3092
	createElement: function (nodeName) {                                                                                  // 3093
		var wrapper = new this.Element();                                                                                    // 3094
		wrapper.init(this, nodeName);                                                                                        // 3095
		return wrapper;                                                                                                      // 3096
	},                                                                                                                    // 3097
                                                                                                                       // 3098
	/**                                                                                                                   // 3099
	 * Dummy function for use in canvas renderer                                                                          // 3100
	 */                                                                                                                   // 3101
	draw: function () {},                                                                                                 // 3102
                                                                                                                       // 3103
	/**                                                                                                                   // 3104
	 * Parse a simple HTML string into SVG tspans                                                                         // 3105
	 *                                                                                                                    // 3106
	 * @param {Object} textNode The parent text SVG node                                                                  // 3107
	 */                                                                                                                   // 3108
	buildText: function (wrapper) {                                                                                       // 3109
		var textNode = wrapper.element,                                                                                      // 3110
			renderer = this,                                                                                                    // 3111
			forExport = renderer.forExport,                                                                                     // 3112
			textStr = pick(wrapper.textStr, '').toString(),                                                                     // 3113
			hasMarkup = textStr.indexOf('<') !== -1,                                                                            // 3114
			lines,                                                                                                              // 3115
			childNodes = textNode.childNodes,                                                                                   // 3116
			styleRegex,                                                                                                         // 3117
			hrefRegex,                                                                                                          // 3118
			parentX = attr(textNode, 'x'),                                                                                      // 3119
			textStyles = wrapper.styles,                                                                                        // 3120
			width = wrapper.textWidth,                                                                                          // 3121
			textLineHeight = textStyles && textStyles.lineHeight,                                                               // 3122
			textShadow = textStyles && textStyles.textShadow,                                                                   // 3123
			ellipsis = textStyles && textStyles.textOverflow === 'ellipsis',                                                    // 3124
			i = childNodes.length,                                                                                              // 3125
			tempParent = width && !wrapper.added && this.box,                                                                   // 3126
			getLineHeight = function (tspan) {                                                                                  // 3127
				return textLineHeight ?                                                                                            // 3128
					pInt(textLineHeight) :                                                                                            // 3129
					renderer.fontMetrics(                                                                                             // 3130
						/(px|em)$/.test(tspan && tspan.style.fontSize) ?                                                                 // 3131
							tspan.style.fontSize :                                                                                          // 3132
							((textStyles && textStyles.fontSize) || renderer.style.fontSize || 12),                                         // 3133
						tspan                                                                                                            // 3134
					).h;                                                                                                              // 3135
			},                                                                                                                  // 3136
			unescapeAngleBrackets = function (inputStr) {                                                                       // 3137
				return inputStr.replace(/&lt;/g, '<').replace(/&gt;/g, '>');                                                       // 3138
			};                                                                                                                  // 3139
                                                                                                                       // 3140
		/// remove old text                                                                                                  // 3141
		while (i--) {                                                                                                        // 3142
			textNode.removeChild(childNodes[i]);                                                                                // 3143
		}                                                                                                                    // 3144
                                                                                                                       // 3145
		// Skip tspans, add text directly to text node. The forceTSpan is a hook                                             // 3146
		// used in text outline hack.                                                                                        // 3147
		if (!hasMarkup && !textShadow && !ellipsis && textStr.indexOf(' ') === -1) {                                         // 3148
			textNode.appendChild(doc.createTextNode(unescapeAngleBrackets(textStr)));                                           // 3149
			return;                                                                                                             // 3150
                                                                                                                       // 3151
		// Complex strings, add more logic                                                                                   // 3152
		} else {                                                                                                             // 3153
                                                                                                                       // 3154
			styleRegex = /<.*style="([^"]+)".*>/;                                                                               // 3155
			hrefRegex = /<.*href="(http[^"]+)".*>/;                                                                             // 3156
                                                                                                                       // 3157
			if (tempParent) {                                                                                                   // 3158
				tempParent.appendChild(textNode); // attach it to the DOM to read offset width                                     // 3159
			}                                                                                                                   // 3160
                                                                                                                       // 3161
			if (hasMarkup) {                                                                                                    // 3162
				lines = textStr                                                                                                    // 3163
					.replace(/<(b|strong)>/g, '<span style="font-weight:bold">')                                                      // 3164
					.replace(/<(i|em)>/g, '<span style="font-style:italic">')                                                         // 3165
					.replace(/<a/g, '<span')                                                                                          // 3166
					.replace(/<\/(b|strong|i|em|a)>/g, '</span>')                                                                     // 3167
					.split(/<br.*?>/g);                                                                                               // 3168
                                                                                                                       // 3169
			} else {                                                                                                            // 3170
				lines = [textStr];                                                                                                 // 3171
			}                                                                                                                   // 3172
                                                                                                                       // 3173
                                                                                                                       // 3174
			// remove empty line at end                                                                                         // 3175
			if (lines[lines.length - 1] === '') {                                                                               // 3176
				lines.pop();                                                                                                       // 3177
			}                                                                                                                   // 3178
                                                                                                                       // 3179
			                                                                                                                    // 3180
			// build the lines                                                                                                  // 3181
			each(lines, function (line, lineNo) {                                                                               // 3182
				var spans, spanNo = 0;                                                                                             // 3183
                                                                                                                       // 3184
				line = line.replace(/<span/g, '|||<span').replace(/<\/span>/g, '</span>|||');                                      // 3185
				spans = line.split('|||');                                                                                         // 3186
                                                                                                                       // 3187
				each(spans, function (span) {                                                                                      // 3188
					if (span !== '' || spans.length === 1) {                                                                          // 3189
						var attributes = {},                                                                                             // 3190
							tspan = doc.createElementNS(SVG_NS, 'tspan'),                                                                   // 3191
							spanStyle; // #390                                                                                              // 3192
						if (styleRegex.test(span)) {                                                                                     // 3193
							spanStyle = span.match(styleRegex)[1].replace(/(;| |^)color([ :])/, '$1fill$2');                                // 3194
							attr(tspan, 'style', spanStyle);                                                                                // 3195
						}                                                                                                                // 3196
						if (hrefRegex.test(span) && !forExport) { // Not for export - #1529                                              // 3197
							attr(tspan, 'onclick', 'location.href=\"' + span.match(hrefRegex)[1] + '\"');                                   // 3198
							css(tspan, { cursor: 'pointer' });                                                                              // 3199
						}                                                                                                                // 3200
                                                                                                                       // 3201
						span = unescapeAngleBrackets(span.replace(/<(.|\n)*?>/g, '') || ' ');                                            // 3202
                                                                                                                       // 3203
						// Nested tags aren't supported, and cause crash in Safari (#1596)                                               // 3204
						if (span !== ' ') {                                                                                              // 3205
                                                                                                                       // 3206
							// add the text node                                                                                            // 3207
							tspan.appendChild(doc.createTextNode(span));                                                                    // 3208
                                                                                                                       // 3209
							if (!spanNo) { // first span in a line, align it to the left                                                    // 3210
								if (lineNo && parentX !== null) {                                                                              // 3211
									attributes.x = parentX;                                                                                       // 3212
								}                                                                                                              // 3213
							} else {                                                                                                        // 3214
								attributes.dx = 0; // #16                                                                                      // 3215
							}                                                                                                               // 3216
                                                                                                                       // 3217
							// add attributes                                                                                               // 3218
							attr(tspan, attributes);                                                                                        // 3219
                                                                                                                       // 3220
							// Append it                                                                                                    // 3221
							textNode.appendChild(tspan);                                                                                    // 3222
                                                                                                                       // 3223
							// first span on subsequent line, add the line height                                                           // 3224
							if (!spanNo && lineNo) {                                                                                        // 3225
                                                                                                                       // 3226
								// allow getting the right offset height in exporting in IE                                                    // 3227
								if (!hasSVG && forExport) {                                                                                    // 3228
									css(tspan, { display: 'block' });                                                                             // 3229
								}                                                                                                              // 3230
                                                                                                                       // 3231
								// Set the line height based on the font size of either                                                        // 3232
								// the text element or the tspan element                                                                       // 3233
								attr(                                                                                                          // 3234
									tspan,                                                                                                        // 3235
									'dy',                                                                                                         // 3236
									getLineHeight(tspan)                                                                                          // 3237
								);                                                                                                             // 3238
							}                                                                                                               // 3239
                                                                                                                       // 3240
							/*if (width) {                                                                                                  // 3241
								renderer.breakText(wrapper, width);                                                                            // 3242
							}*/                                                                                                             // 3243
                                                                                                                       // 3244
							// Check width and apply soft breaks or ellipsis                                                                // 3245
							if (width) {                                                                                                    // 3246
								var words = span.replace(/([^\^])-/g, '$1- ').split(' '), // #1273                                             // 3247
									hasWhiteSpace = spans.length > 1 || lineNo || (words.length > 1 && textStyles.whiteSpace !== 'nowrap'),       // 3248
									tooLong,                                                                                                      // 3249
									wasTooLong,                                                                                                   // 3250
									actualWidth,                                                                                                  // 3251
									rest = [],                                                                                                    // 3252
									dy = getLineHeight(tspan),                                                                                    // 3253
									softLineNo = 1,                                                                                               // 3254
									rotation = wrapper.rotation,                                                                                  // 3255
									wordStr = span, // for ellipsis                                                                               // 3256
									cursor = wordStr.length, // binary search cursor                                                              // 3257
									bBox;                                                                                                         // 3258
                                                                                                                       // 3259
								while ((hasWhiteSpace || ellipsis) && (words.length || rest.length)) {                                         // 3260
									wrapper.rotation = 0; // discard rotation when computing box                                                  // 3261
									bBox = wrapper.getBBox(true);                                                                                 // 3262
									actualWidth = bBox.width;                                                                                     // 3263
                                                                                                                       // 3264
									// Old IE cannot measure the actualWidth for SVG elements (#2314)                                             // 3265
									if (!hasSVG && renderer.forExport) {                                                                          // 3266
										actualWidth = renderer.measureSpanWidth(tspan.firstChild.data, wrapper.styles);                              // 3267
									}                                                                                                             // 3268
                                                                                                                       // 3269
									tooLong = actualWidth > width;                                                                                // 3270
                                                                                                                       // 3271
									// For ellipsis, do a binary search for the correct string length                                             // 3272
									if (wasTooLong === undefined) {                                                                               // 3273
										wasTooLong = tooLong; // First time                                                                          // 3274
									}                                                                                                             // 3275
									if (ellipsis && wasTooLong) {                                                                                 // 3276
										cursor /= 2;                                                                                                 // 3277
                                                                                                                       // 3278
										if (wordStr === '' || (!tooLong && cursor < 0.5)) {                                                          // 3279
											words = []; // All ok, break out                                                                            // 3280
										} else {                                                                                                     // 3281
											if (tooLong) {                                                                                              // 3282
												wasTooLong = true;                                                                                         // 3283
											}                                                                                                           // 3284
											wordStr = span.substring(0, wordStr.length + (tooLong ? -1 : 1) * mathCeil(cursor));                        // 3285
											words = [wordStr + (width > 3 ? '\u2026' : '')];                                                            // 3286
											tspan.removeChild(tspan.firstChild);                                                                        // 3287
										}                                                                                                            // 3288
                                                                                                                       // 3289
									// Looping down, this is the first word sequence that is not too long,                                        // 3290
									// so we can move on to build the next line.                                                                  // 3291
									} else if (!tooLong || words.length === 1) {                                                                  // 3292
										words = rest;                                                                                                // 3293
										rest = [];                                                                                                   // 3294
												                                                                                                           // 3295
										if (words.length) {                                                                                          // 3296
											softLineNo++;                                                                                               // 3297
											                                                                                                            // 3298
											tspan = doc.createElementNS(SVG_NS, 'tspan');                                                               // 3299
											attr(tspan, {                                                                                               // 3300
												dy: dy,                                                                                                    // 3301
												x: parentX                                                                                                 // 3302
											});                                                                                                         // 3303
											if (spanStyle) { // #390                                                                                    // 3304
												attr(tspan, 'style', spanStyle);                                                                           // 3305
											}                                                                                                           // 3306
											textNode.appendChild(tspan);                                                                                // 3307
										}                                                                                                            // 3308
										if (actualWidth > width) { // a single word is pressing it out                                               // 3309
											width = actualWidth;                                                                                        // 3310
										}                                                                                                            // 3311
									} else { // append to existing line tspan                                                                     // 3312
										tspan.removeChild(tspan.firstChild);                                                                         // 3313
										rest.unshift(words.pop());                                                                                   // 3314
									}                                                                                                             // 3315
									if (words.length) {                                                                                           // 3316
										tspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g, '-')));                                  // 3317
									}                                                                                                             // 3318
								}                                                                                                              // 3319
								if (wasTooLong) {                                                                                              // 3320
									wrapper.attr('title', wrapper.textStr);                                                                       // 3321
								}                                                                                                              // 3322
								wrapper.rotation = rotation;                                                                                   // 3323
							}                                                                                                               // 3324
                                                                                                                       // 3325
							spanNo++;                                                                                                       // 3326
						}                                                                                                                // 3327
					}                                                                                                                 // 3328
				});                                                                                                                // 3329
			});                                                                                                                 // 3330
			if (tempParent) {                                                                                                   // 3331
				tempParent.removeChild(textNode); // attach it to the DOM to read offset width                                     // 3332
			}                                                                                                                   // 3333
                                                                                                                       // 3334
			// Apply the text shadow                                                                                            // 3335
			if (textShadow && wrapper.applyTextShadow) {                                                                        // 3336
				wrapper.applyTextShadow(textShadow);                                                                               // 3337
			}                                                                                                                   // 3338
		}                                                                                                                    // 3339
	},                                                                                                                    // 3340
                                                                                                                       // 3341
	                                                                                                                      // 3342
                                                                                                                       // 3343
	/*                                                                                                                    // 3344
	breakText: function (wrapper, width) {                                                                                // 3345
		var bBox = wrapper.getBBox(),                                                                                        // 3346
			node = wrapper.element,                                                                                             // 3347
			textLength = node.textContent.length,                                                                               // 3348
			pos = mathRound(width * textLength / bBox.width), // try this position first, based on average character width      // 3349
			increment = 0,                                                                                                      // 3350
			finalPos;                                                                                                           // 3351
                                                                                                                       // 3352
		if (bBox.width > width) {                                                                                            // 3353
			while (finalPos === undefined) {                                                                                    // 3354
				textLength = node.getSubStringLength(0, pos);                                                                      // 3355
                                                                                                                       // 3356
				if (textLength <= width) {                                                                                         // 3357
					if (increment === -1) {                                                                                           // 3358
						finalPos = pos;                                                                                                  // 3359
					} else {                                                                                                          // 3360
						increment = 1;                                                                                                   // 3361
					}                                                                                                                 // 3362
				} else {                                                                                                           // 3363
					if (increment === 1) {                                                                                            // 3364
						finalPos = pos - 1;                                                                                              // 3365
					} else {                                                                                                          // 3366
						increment = -1;                                                                                                  // 3367
					}                                                                                                                 // 3368
				}                                                                                                                  // 3369
				pos += increment;                                                                                                  // 3370
			}                                                                                                                   // 3371
		}                                                                                                                    // 3372
		console.log(finalPos, node.getSubStringLength(0, finalPos))                                                          // 3373
	},                                                                                                                    // 3374
	*/                                                                                                                    // 3375
                                                                                                                       // 3376
	/**                                                                                                                   // 3377
	 * Returns white for dark colors and black for bright colors                                                          // 3378
	 */                                                                                                                   // 3379
	getContrast: function (color) {                                                                                       // 3380
		color = Color(color).rgba;                                                                                           // 3381
		return color[0] + color[1] + color[2] > 384 ? '#000000' : '#FFFFFF';                                                 // 3382
	},                                                                                                                    // 3383
                                                                                                                       // 3384
	/**                                                                                                                   // 3385
	 * Create a button with preset states                                                                                 // 3386
	 * @param {String} text                                                                                               // 3387
	 * @param {Number} x                                                                                                  // 3388
	 * @param {Number} y                                                                                                  // 3389
	 * @param {Function} callback                                                                                         // 3390
	 * @param {Object} normalState                                                                                        // 3391
	 * @param {Object} hoverState                                                                                         // 3392
	 * @param {Object} pressedState                                                                                       // 3393
	 */                                                                                                                   // 3394
	button: function (text, x, y, callback, normalState, hoverState, pressedState, disabledState, shape) {                // 3395
		var label = this.label(text, x, y, shape, null, null, null, null, 'button'),                                         // 3396
			curState = 0,                                                                                                       // 3397
			stateOptions,                                                                                                       // 3398
			stateStyle,                                                                                                         // 3399
			normalStyle,                                                                                                        // 3400
			hoverStyle,                                                                                                         // 3401
			pressedStyle,                                                                                                       // 3402
			disabledStyle,                                                                                                      // 3403
			verticalGradient = { x1: 0, y1: 0, x2: 0, y2: 1 };                                                                  // 3404
                                                                                                                       // 3405
		// Normal state - prepare the attributes                                                                             // 3406
		normalState = merge({                                                                                                // 3407
			'stroke-width': 1,                                                                                                  // 3408
			stroke: '#CCCCCC',                                                                                                  // 3409
			fill: {                                                                                                             // 3410
				linearGradient: verticalGradient,                                                                                  // 3411
				stops: [                                                                                                           // 3412
					[0, '#FEFEFE'],                                                                                                   // 3413
					[1, '#F6F6F6']                                                                                                    // 3414
				]                                                                                                                  // 3415
			},                                                                                                                  // 3416
			r: 2,                                                                                                               // 3417
			padding: 5,                                                                                                         // 3418
			style: {                                                                                                            // 3419
				color: 'black'                                                                                                     // 3420
			}                                                                                                                   // 3421
		}, normalState);                                                                                                     // 3422
		normalStyle = normalState.style;                                                                                     // 3423
		delete normalState.style;                                                                                            // 3424
                                                                                                                       // 3425
		// Hover state                                                                                                       // 3426
		hoverState = merge(normalState, {                                                                                    // 3427
			stroke: '#68A',                                                                                                     // 3428
			fill: {                                                                                                             // 3429
				linearGradient: verticalGradient,                                                                                  // 3430
				stops: [                                                                                                           // 3431
					[0, '#FFF'],                                                                                                      // 3432
					[1, '#ACF']                                                                                                       // 3433
				]                                                                                                                  // 3434
			}                                                                                                                   // 3435
		}, hoverState);                                                                                                      // 3436
		hoverStyle = hoverState.style;                                                                                       // 3437
		delete hoverState.style;                                                                                             // 3438
                                                                                                                       // 3439
		// Pressed state                                                                                                     // 3440
		pressedState = merge(normalState, {                                                                                  // 3441
			stroke: '#68A',                                                                                                     // 3442
			fill: {                                                                                                             // 3443
				linearGradient: verticalGradient,                                                                                  // 3444
				stops: [                                                                                                           // 3445
					[0, '#9BD'],                                                                                                      // 3446
					[1, '#CDF']                                                                                                       // 3447
				]                                                                                                                  // 3448
			}                                                                                                                   // 3449
		}, pressedState);                                                                                                    // 3450
		pressedStyle = pressedState.style;                                                                                   // 3451
		delete pressedState.style;                                                                                           // 3452
                                                                                                                       // 3453
		// Disabled state                                                                                                    // 3454
		disabledState = merge(normalState, {                                                                                 // 3455
			style: {                                                                                                            // 3456
				color: '#CCC'                                                                                                      // 3457
			}                                                                                                                   // 3458
		}, disabledState);                                                                                                   // 3459
		disabledStyle = disabledState.style;                                                                                 // 3460
		delete disabledState.style;                                                                                          // 3461
                                                                                                                       // 3462
		// Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).                                      // 3463
		addEvent(label.element, isIE ? 'mouseover' : 'mouseenter', function () {                                             // 3464
			if (curState !== 3) {                                                                                               // 3465
				label.attr(hoverState)                                                                                             // 3466
					.css(hoverStyle);                                                                                                 // 3467
			}                                                                                                                   // 3468
		});                                                                                                                  // 3469
		addEvent(label.element, isIE ? 'mouseout' : 'mouseleave', function () {                                              // 3470
			if (curState !== 3) {                                                                                               // 3471
				stateOptions = [normalState, hoverState, pressedState][curState];                                                  // 3472
				stateStyle = [normalStyle, hoverStyle, pressedStyle][curState];                                                    // 3473
				label.attr(stateOptions)                                                                                           // 3474
					.css(stateStyle);                                                                                                 // 3475
			}                                                                                                                   // 3476
		});                                                                                                                  // 3477
                                                                                                                       // 3478
		label.setState = function (state) {                                                                                  // 3479
			label.state = curState = state;                                                                                     // 3480
			if (!state) {                                                                                                       // 3481
				label.attr(normalState)                                                                                            // 3482
					.css(normalStyle);                                                                                                // 3483
			} else if (state === 2) {                                                                                           // 3484
				label.attr(pressedState)                                                                                           // 3485
					.css(pressedStyle);                                                                                               // 3486
			} else if (state === 3) {                                                                                           // 3487
				label.attr(disabledState)                                                                                          // 3488
					.css(disabledStyle);                                                                                              // 3489
			}                                                                                                                   // 3490
		};                                                                                                                   // 3491
                                                                                                                       // 3492
		return label                                                                                                         // 3493
			.on('click', function () {                                                                                          // 3494
				if (curState !== 3) {                                                                                              // 3495
					callback.call(label);                                                                                             // 3496
				}                                                                                                                  // 3497
			})                                                                                                                  // 3498
			.attr(normalState)                                                                                                  // 3499
			.css(extend({ cursor: 'default' }, normalStyle));                                                                   // 3500
	},                                                                                                                    // 3501
                                                                                                                       // 3502
	/**                                                                                                                   // 3503
	 * Make a straight line crisper by not spilling out to neighbour pixels                                               // 3504
	 * @param {Array} points                                                                                              // 3505
	 * @param {Number} width                                                                                              // 3506
	 */                                                                                                                   // 3507
	crispLine: function (points, width) {                                                                                 // 3508
		// points format: [M, 0, 0, L, 100, 0]                                                                               // 3509
		// normalize to a crisp line                                                                                         // 3510
		if (points[1] === points[4]) {                                                                                       // 3511
			// Substract due to #1129. Now bottom and left axis gridlines behave the same.                                      // 3512
			points[1] = points[4] = mathRound(points[1]) - (width % 2 / 2);                                                     // 3513
		}                                                                                                                    // 3514
		if (points[2] === points[5]) {                                                                                       // 3515
			points[2] = points[5] = mathRound(points[2]) + (width % 2 / 2);                                                     // 3516
		}                                                                                                                    // 3517
		return points;                                                                                                       // 3518
	},                                                                                                                    // 3519
                                                                                                                       // 3520
                                                                                                                       // 3521
	/**                                                                                                                   // 3522
	 * Draw a path                                                                                                        // 3523
	 * @param {Array} path An SVG path in array form                                                                      // 3524
	 */                                                                                                                   // 3525
	path: function (path) {                                                                                               // 3526
		var attr = {                                                                                                         // 3527
			fill: NONE                                                                                                          // 3528
		};                                                                                                                   // 3529
		if (isArray(path)) {                                                                                                 // 3530
			attr.d = path;                                                                                                      // 3531
		} else if (isObject(path)) { // attributes                                                                           // 3532
			extend(attr, path);                                                                                                 // 3533
		}                                                                                                                    // 3534
		return this.createElement('path').attr(attr);                                                                        // 3535
	},                                                                                                                    // 3536
                                                                                                                       // 3537
	/**                                                                                                                   // 3538
	 * Draw and return an SVG circle                                                                                      // 3539
	 * @param {Number} x The x position                                                                                   // 3540
	 * @param {Number} y The y position                                                                                   // 3541
	 * @param {Number} r The radius                                                                                       // 3542
	 */                                                                                                                   // 3543
	circle: function (x, y, r) {                                                                                          // 3544
		var attr = isObject(x) ?                                                                                             // 3545
			x :                                                                                                                 // 3546
			{                                                                                                                   // 3547
				x: x,                                                                                                              // 3548
				y: y,                                                                                                              // 3549
				r: r                                                                                                               // 3550
			},                                                                                                                  // 3551
			wrapper = this.createElement('circle');                                                                             // 3552
                                                                                                                       // 3553
		wrapper.xSetter = function (value) {                                                                                 // 3554
			this.element.setAttribute('cx', value);                                                                             // 3555
		};                                                                                                                   // 3556
		wrapper.ySetter = function (value) {                                                                                 // 3557
			this.element.setAttribute('cy', value);                                                                             // 3558
		};                                                                                                                   // 3559
		return wrapper.attr(attr);                                                                                           // 3560
	},                                                                                                                    // 3561
                                                                                                                       // 3562
	/**                                                                                                                   // 3563
	 * Draw and return an arc                                                                                             // 3564
	 * @param {Number} x X position                                                                                       // 3565
	 * @param {Number} y Y position                                                                                       // 3566
	 * @param {Number} r Radius                                                                                           // 3567
	 * @param {Number} innerR Inner radius like used in donut charts                                                      // 3568
	 * @param {Number} start Starting angle                                                                               // 3569
	 * @param {Number} end Ending angle                                                                                   // 3570
	 */                                                                                                                   // 3571
	arc: function (x, y, r, innerR, start, end) {                                                                         // 3572
		var arc;                                                                                                             // 3573
                                                                                                                       // 3574
		if (isObject(x)) {                                                                                                   // 3575
			y = x.y;                                                                                                            // 3576
			r = x.r;                                                                                                            // 3577
			innerR = x.innerR;                                                                                                  // 3578
			start = x.start;                                                                                                    // 3579
			end = x.end;                                                                                                        // 3580
			x = x.x;                                                                                                            // 3581
		}                                                                                                                    // 3582
                                                                                                                       // 3583
		// Arcs are defined as symbols for the ability to set                                                                // 3584
		// attributes in attr and animate                                                                                    // 3585
		arc = this.symbol('arc', x || 0, y || 0, r || 0, r || 0, {                                                           // 3586
			innerR: innerR || 0,                                                                                                // 3587
			start: start || 0,                                                                                                  // 3588
			end: end || 0                                                                                                       // 3589
		});                                                                                                                  // 3590
		arc.r = r; // #959                                                                                                   // 3591
		return arc;                                                                                                          // 3592
	},                                                                                                                    // 3593
                                                                                                                       // 3594
	/**                                                                                                                   // 3595
	 * Draw and return a rectangle                                                                                        // 3596
	 * @param {Number} x Left position                                                                                    // 3597
	 * @param {Number} y Top position                                                                                     // 3598
	 * @param {Number} width                                                                                              // 3599
	 * @param {Number} height                                                                                             // 3600
	 * @param {Number} r Border corner radius                                                                             // 3601
	 * @param {Number} strokeWidth A stroke width can be supplied to allow crisp drawing                                  // 3602
	 */                                                                                                                   // 3603
	rect: function (x, y, width, height, r, strokeWidth) {                                                                // 3604
                                                                                                                       // 3605
		r = isObject(x) ? x.r : r;                                                                                           // 3606
                                                                                                                       // 3607
		var wrapper = this.createElement('rect'),                                                                            // 3608
			attribs = isObject(x) ? x : x === UNDEFINED ? {} : {                                                                // 3609
				x: x,                                                                                                              // 3610
				y: y,                                                                                                              // 3611
				width: mathMax(width, 0),                                                                                          // 3612
				height: mathMax(height, 0)                                                                                         // 3613
			};                                                                                                                  // 3614
                                                                                                                       // 3615
		if (strokeWidth !== UNDEFINED) {                                                                                     // 3616
			attribs.strokeWidth = strokeWidth;                                                                                  // 3617
			attribs = wrapper.crisp(attribs);                                                                                   // 3618
		}                                                                                                                    // 3619
                                                                                                                       // 3620
		if (r) {                                                                                                             // 3621
			attribs.r = r;                                                                                                      // 3622
		}                                                                                                                    // 3623
                                                                                                                       // 3624
		wrapper.rSetter = function (value) {                                                                                 // 3625
			attr(this.element, {                                                                                                // 3626
				rx: value,                                                                                                         // 3627
				ry: value                                                                                                          // 3628
			});                                                                                                                 // 3629
		};                                                                                                                   // 3630
		                                                                                                                     // 3631
		return wrapper.attr(attribs);                                                                                        // 3632
	},                                                                                                                    // 3633
                                                                                                                       // 3634
	/**                                                                                                                   // 3635
	 * Resize the box and re-align all aligned elements                                                                   // 3636
	 * @param {Object} width                                                                                              // 3637
	 * @param {Object} height                                                                                             // 3638
	 * @param {Boolean} animate                                                                                           // 3639
	 *                                                                                                                    // 3640
	 */                                                                                                                   // 3641
	setSize: function (width, height, animate) {                                                                          // 3642
		var renderer = this,                                                                                                 // 3643
			alignedObjects = renderer.alignedObjects,                                                                           // 3644
			i = alignedObjects.length;                                                                                          // 3645
                                                                                                                       // 3646
		renderer.width = width;                                                                                              // 3647
		renderer.height = height;                                                                                            // 3648
                                                                                                                       // 3649
		renderer.boxWrapper[pick(animate, true) ? 'animate' : 'attr']({                                                      // 3650
			width: width,                                                                                                       // 3651
			height: height                                                                                                      // 3652
		});                                                                                                                  // 3653
                                                                                                                       // 3654
		while (i--) {                                                                                                        // 3655
			alignedObjects[i].align();                                                                                          // 3656
		}                                                                                                                    // 3657
	},                                                                                                                    // 3658
                                                                                                                       // 3659
	/**                                                                                                                   // 3660
	 * Create a group                                                                                                     // 3661
	 * @param {String} name The group will be given a class name of 'highcharts-{name}'.                                  // 3662
	 *	 This can be used for styling and scripting.                                                                       // 3663
	 */                                                                                                                   // 3664
	g: function (name) {                                                                                                  // 3665
		var elem = this.createElement('g');                                                                                  // 3666
		return defined(name) ? elem.attr({ 'class': PREFIX + name }) : elem;                                                 // 3667
	},                                                                                                                    // 3668
                                                                                                                       // 3669
	/**                                                                                                                   // 3670
	 * Display an image                                                                                                   // 3671
	 * @param {String} src                                                                                                // 3672
	 * @param {Number} x                                                                                                  // 3673
	 * @param {Number} y                                                                                                  // 3674
	 * @param {Number} width                                                                                              // 3675
	 * @param {Number} height                                                                                             // 3676
	 */                                                                                                                   // 3677
	image: function (src, x, y, width, height) {                                                                          // 3678
		var attribs = {                                                                                                      // 3679
				preserveAspectRatio: NONE                                                                                          // 3680
			},                                                                                                                  // 3681
			elemWrapper;                                                                                                        // 3682
                                                                                                                       // 3683
		// optional properties                                                                                               // 3684
		if (arguments.length > 1) {                                                                                          // 3685
			extend(attribs, {                                                                                                   // 3686
				x: x,                                                                                                              // 3687
				y: y,                                                                                                              // 3688
				width: width,                                                                                                      // 3689
				height: height                                                                                                     // 3690
			});                                                                                                                 // 3691
		}                                                                                                                    // 3692
                                                                                                                       // 3693
		elemWrapper = this.createElement('image').attr(attribs);                                                             // 3694
                                                                                                                       // 3695
		// set the href in the xlink namespace                                                                               // 3696
		if (elemWrapper.element.setAttributeNS) {                                                                            // 3697
			elemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink',                                                  // 3698
				'href', src);                                                                                                      // 3699
		} else {                                                                                                             // 3700
			// could be exporting in IE                                                                                         // 3701
			// using href throws "not supported" in ie7 and under, requries regex shim to fix later                             // 3702
			elemWrapper.element.setAttribute('hc-svg-href', src);                                                               // 3703
		}                                                                                                                    // 3704
		return elemWrapper;                                                                                                  // 3705
	},                                                                                                                    // 3706
                                                                                                                       // 3707
	/**                                                                                                                   // 3708
	 * Draw a symbol out of pre-defined shape paths from the namespace 'symbol' object.                                   // 3709
	 *                                                                                                                    // 3710
	 * @param {Object} symbol                                                                                             // 3711
	 * @param {Object} x                                                                                                  // 3712
	 * @param {Object} y                                                                                                  // 3713
	 * @param {Object} radius                                                                                             // 3714
	 * @param {Object} options                                                                                            // 3715
	 */                                                                                                                   // 3716
	symbol: function (symbol, x, y, width, height, options) {                                                             // 3717
                                                                                                                       // 3718
		var obj,                                                                                                             // 3719
                                                                                                                       // 3720
			// get the symbol definition function                                                                               // 3721
			symbolFn = this.symbols[symbol],                                                                                    // 3722
                                                                                                                       // 3723
			// check if there's a path defined for this symbol                                                                  // 3724
			path = symbolFn && symbolFn(                                                                                        // 3725
				mathRound(x),                                                                                                      // 3726
				mathRound(y),                                                                                                      // 3727
				width,                                                                                                             // 3728
				height,                                                                                                            // 3729
				options                                                                                                            // 3730
			),                                                                                                                  // 3731
                                                                                                                       // 3732
			imageElement,                                                                                                       // 3733
			imageRegex = /^url\((.*?)\)$/,                                                                                      // 3734
			imageSrc,                                                                                                           // 3735
			imageSize,                                                                                                          // 3736
			centerImage;                                                                                                        // 3737
                                                                                                                       // 3738
		if (path) {                                                                                                          // 3739
                                                                                                                       // 3740
			obj = this.path(path);                                                                                              // 3741
			// expando properties for use in animate and attr                                                                   // 3742
			extend(obj, {                                                                                                       // 3743
				symbolName: symbol,                                                                                                // 3744
				x: x,                                                                                                              // 3745
				y: y,                                                                                                              // 3746
				width: width,                                                                                                      // 3747
				height: height                                                                                                     // 3748
			});                                                                                                                 // 3749
			if (options) {                                                                                                      // 3750
				extend(obj, options);                                                                                              // 3751
			}                                                                                                                   // 3752
                                                                                                                       // 3753
                                                                                                                       // 3754
		// image symbols                                                                                                     // 3755
		} else if (imageRegex.test(symbol)) {                                                                                // 3756
                                                                                                                       // 3757
			// On image load, set the size and position                                                                         // 3758
			centerImage = function (img, size) {                                                                                // 3759
				if (img.element) { // it may be destroyed in the meantime (#1390)                                                  // 3760
					img.attr({                                                                                                        // 3761
						width: size[0],                                                                                                  // 3762
						height: size[1]                                                                                                  // 3763
					});                                                                                                               // 3764
                                                                                                                       // 3765
					if (!img.alignByTranslate) { // #185                                                                              // 3766
						img.translate(                                                                                                   // 3767
							mathRound((width - size[0]) / 2), // #1378                                                                      // 3768
							mathRound((height - size[1]) / 2)                                                                               // 3769
						);                                                                                                               // 3770
					}                                                                                                                 // 3771
				}                                                                                                                  // 3772
			};                                                                                                                  // 3773
                                                                                                                       // 3774
			imageSrc = symbol.match(imageRegex)[1];                                                                             // 3775
			imageSize = symbolSizes[imageSrc] || (options && options.width && options.height && [options.width, options.height]);
                                                                                                                       // 3777
			// Ireate the image synchronously, add attribs async                                                                // 3778
			obj = this.image(imageSrc)                                                                                          // 3779
				.attr({                                                                                                            // 3780
					x: x,                                                                                                             // 3781
					y: y                                                                                                              // 3782
				});                                                                                                                // 3783
			obj.isImg = true;                                                                                                   // 3784
                                                                                                                       // 3785
			if (imageSize) {                                                                                                    // 3786
				centerImage(obj, imageSize);                                                                                       // 3787
			} else {                                                                                                            // 3788
				// Initialize image to be 0 size so export will still function if there's no cached sizes.                         // 3789
				obj.attr({ width: 0, height: 0 });                                                                                 // 3790
                                                                                                                       // 3791
				// Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,                            // 3792
				// the created element must be assigned to a variable in order to load (#292).                                     // 3793
				imageElement = createElement('img', {                                                                              // 3794
					onload: function () {                                                                                             // 3795
						centerImage(obj, symbolSizes[imageSrc] = [this.width, this.height]);                                             // 3796
					},                                                                                                                // 3797
					src: imageSrc                                                                                                     // 3798
				});                                                                                                                // 3799
			}                                                                                                                   // 3800
		}                                                                                                                    // 3801
                                                                                                                       // 3802
		return obj;                                                                                                          // 3803
	},                                                                                                                    // 3804
                                                                                                                       // 3805
	/**                                                                                                                   // 3806
	 * An extendable collection of functions for defining symbol paths.                                                   // 3807
	 */                                                                                                                   // 3808
	symbols: {                                                                                                            // 3809
		'circle': function (x, y, w, h) {                                                                                    // 3810
			var cpw = 0.166 * w;                                                                                                // 3811
			return [                                                                                                            // 3812
				M, x + w / 2, y,                                                                                                   // 3813
				'C', x + w + cpw, y, x + w + cpw, y + h, x + w / 2, y + h,                                                         // 3814
				'C', x - cpw, y + h, x - cpw, y, x + w / 2, y,                                                                     // 3815
				'Z'                                                                                                                // 3816
			];                                                                                                                  // 3817
		},                                                                                                                   // 3818
                                                                                                                       // 3819
		'square': function (x, y, w, h) {                                                                                    // 3820
			return [                                                                                                            // 3821
				M, x, y,                                                                                                           // 3822
				L, x + w, y,                                                                                                       // 3823
				x + w, y + h,                                                                                                      // 3824
				x, y + h,                                                                                                          // 3825
				'Z'                                                                                                                // 3826
			];                                                                                                                  // 3827
		},                                                                                                                   // 3828
                                                                                                                       // 3829
		'triangle': function (x, y, w, h) {                                                                                  // 3830
			return [                                                                                                            // 3831
				M, x + w / 2, y,                                                                                                   // 3832
				L, x + w, y + h,                                                                                                   // 3833
				x, y + h,                                                                                                          // 3834
				'Z'                                                                                                                // 3835
			];                                                                                                                  // 3836
		},                                                                                                                   // 3837
                                                                                                                       // 3838
		'triangle-down': function (x, y, w, h) {                                                                             // 3839
			return [                                                                                                            // 3840
				M, x, y,                                                                                                           // 3841
				L, x + w, y,                                                                                                       // 3842
				x + w / 2, y + h,                                                                                                  // 3843
				'Z'                                                                                                                // 3844
			];                                                                                                                  // 3845
		},                                                                                                                   // 3846
		'diamond': function (x, y, w, h) {                                                                                   // 3847
			return [                                                                                                            // 3848
				M, x + w / 2, y,                                                                                                   // 3849
				L, x + w, y + h / 2,                                                                                               // 3850
				x + w / 2, y + h,                                                                                                  // 3851
				x, y + h / 2,                                                                                                      // 3852
				'Z'                                                                                                                // 3853
			];                                                                                                                  // 3854
		},                                                                                                                   // 3855
		'arc': function (x, y, w, h, options) {                                                                              // 3856
			var start = options.start,                                                                                          // 3857
				radius = options.r || w || h,                                                                                      // 3858
				end = options.end - 0.001, // to prevent cos and sin of start and end from becoming equal on 360 arcs (related: #1561)
				innerRadius = options.innerR,                                                                                      // 3860
				open = options.open,                                                                                               // 3861
				cosStart = mathCos(start),                                                                                         // 3862
				sinStart = mathSin(start),                                                                                         // 3863
				cosEnd = mathCos(end),                                                                                             // 3864
				sinEnd = mathSin(end),                                                                                             // 3865
				longArc = options.end - start < mathPI ? 0 : 1;                                                                    // 3866
                                                                                                                       // 3867
			return [                                                                                                            // 3868
				M,                                                                                                                 // 3869
				x + radius * cosStart,                                                                                             // 3870
				y + radius * sinStart,                                                                                             // 3871
				'A', // arcTo                                                                                                      // 3872
				radius, // x radius                                                                                                // 3873
				radius, // y radius                                                                                                // 3874
				0, // slanting                                                                                                     // 3875
				longArc, // long or short arc                                                                                      // 3876
				1, // clockwise                                                                                                    // 3877
				x + radius * cosEnd,                                                                                               // 3878
				y + radius * sinEnd,                                                                                               // 3879
				open ? M : L,                                                                                                      // 3880
				x + innerRadius * cosEnd,                                                                                          // 3881
				y + innerRadius * sinEnd,                                                                                          // 3882
				'A', // arcTo                                                                                                      // 3883
				innerRadius, // x radius                                                                                           // 3884
				innerRadius, // y radius                                                                                           // 3885
				0, // slanting                                                                                                     // 3886
				longArc, // long or short arc                                                                                      // 3887
				0, // clockwise                                                                                                    // 3888
				x + innerRadius * cosStart,                                                                                        // 3889
				y + innerRadius * sinStart,                                                                                        // 3890
                                                                                                                       // 3891
				open ? '' : 'Z' // close                                                                                           // 3892
			];                                                                                                                  // 3893
		},                                                                                                                   // 3894
                                                                                                                       // 3895
		/**                                                                                                                  // 3896
		 * Callout shape used for default tooltips, also used for rounded rectangles in VML                                  // 3897
		 */                                                                                                                  // 3898
		callout: function (x, y, w, h, options) {                                                                            // 3899
			var arrowLength = 6,                                                                                                // 3900
				halfDistance = 6,                                                                                                  // 3901
				r = mathMin((options && options.r) || 0, w, h),                                                                    // 3902
				safeDistance = r + halfDistance,                                                                                   // 3903
				anchorX = options && options.anchorX,                                                                              // 3904
				anchorY = options && options.anchorY,                                                                              // 3905
				path;                                                                                                              // 3906
                                                                                                                       // 3907
			path = [                                                                                                            // 3908
				'M', x + r, y,                                                                                                     // 3909
				'L', x + w - r, y, // top side                                                                                     // 3910
				'C', x + w, y, x + w, y, x + w, y + r, // top-right corner                                                         // 3911
				'L', x + w, y + h - r, // right side                                                                               // 3912
				'C', x + w, y + h, x + w, y + h, x + w - r, y + h, // bottom-right corner                                          // 3913
				'L', x + r, y + h, // bottom side                                                                                  // 3914
				'C', x, y + h, x, y + h, x, y + h - r, // bottom-left corner                                                       // 3915
				'L', x, y + r, // left side                                                                                        // 3916
				'C', x, y, x, y, x + r, y // top-right corner                                                                      // 3917
			];                                                                                                                  // 3918
			                                                                                                                    // 3919
			if (anchorX && anchorX > w && anchorY > y + safeDistance && anchorY < y + h - safeDistance) { // replace right side // 3920
				path.splice(13, 3,                                                                                                 // 3921
					'L', x + w, anchorY - halfDistance,                                                                               // 3922
					x + w + arrowLength, anchorY,                                                                                     // 3923
					x + w, anchorY + halfDistance,                                                                                    // 3924
					x + w, y + h - r                                                                                                  // 3925
				);                                                                                                                 // 3926
			} else if (anchorX && anchorX < 0 && anchorY > y + safeDistance && anchorY < y + h - safeDistance) { // replace left side
				path.splice(33, 3,                                                                                                 // 3928
					'L', x, anchorY + halfDistance,                                                                                   // 3929
					x - arrowLength, anchorY,                                                                                         // 3930
					x, anchorY - halfDistance,                                                                                        // 3931
					x, y + r                                                                                                          // 3932
				);                                                                                                                 // 3933
			} else if (anchorY && anchorY > h && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace bottom
				path.splice(23, 3,                                                                                                 // 3935
					'L', anchorX + halfDistance, y + h,                                                                               // 3936
					anchorX, y + h + arrowLength,                                                                                     // 3937
					anchorX - halfDistance, y + h,                                                                                    // 3938
					x + r, y + h                                                                                                      // 3939
				);                                                                                                                 // 3940
			} else if (anchorY && anchorY < 0 && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace top // 3941
				path.splice(3, 3,                                                                                                  // 3942
					'L', anchorX - halfDistance, y,                                                                                   // 3943
					anchorX, y - arrowLength,                                                                                         // 3944
					anchorX + halfDistance, y,                                                                                        // 3945
					w - r, y                                                                                                          // 3946
				);                                                                                                                 // 3947
			}                                                                                                                   // 3948
			return path;                                                                                                        // 3949
		}                                                                                                                    // 3950
	},                                                                                                                    // 3951
                                                                                                                       // 3952
	/**                                                                                                                   // 3953
	 * Define a clipping rectangle                                                                                        // 3954
	 * @param {String} id                                                                                                 // 3955
	 * @param {Number} x                                                                                                  // 3956
	 * @param {Number} y                                                                                                  // 3957
	 * @param {Number} width                                                                                              // 3958
	 * @param {Number} height                                                                                             // 3959
	 */                                                                                                                   // 3960
	clipRect: function (x, y, width, height) {                                                                            // 3961
		var wrapper,                                                                                                         // 3962
			id = PREFIX + idCounter++,                                                                                          // 3963
                                                                                                                       // 3964
			clipPath = this.createElement('clipPath').attr({                                                                    // 3965
				id: id                                                                                                             // 3966
			}).add(this.defs);                                                                                                  // 3967
                                                                                                                       // 3968
		wrapper = this.rect(x, y, width, height, 0).add(clipPath);                                                           // 3969
		wrapper.id = id;                                                                                                     // 3970
		wrapper.clipPath = clipPath;                                                                                         // 3971
		wrapper.count = 0;                                                                                                   // 3972
                                                                                                                       // 3973
		return wrapper;                                                                                                      // 3974
	},                                                                                                                    // 3975
                                                                                                                       // 3976
                                                                                                                       // 3977
	                                                                                                                      // 3978
                                                                                                                       // 3979
                                                                                                                       // 3980
	/**                                                                                                                   // 3981
	 * Add text to the SVG object                                                                                         // 3982
	 * @param {String} str                                                                                                // 3983
	 * @param {Number} x Left position                                                                                    // 3984
	 * @param {Number} y Top position                                                                                     // 3985
	 * @param {Boolean} useHTML Use HTML to render the text                                                               // 3986
	 */                                                                                                                   // 3987
	text: function (str, x, y, useHTML) {                                                                                 // 3988
                                                                                                                       // 3989
		// declare variables                                                                                                 // 3990
		var renderer = this,                                                                                                 // 3991
			fakeSVG = useCanVG || (!hasSVG && renderer.forExport),                                                              // 3992
			wrapper,                                                                                                            // 3993
			attr = {};                                                                                                          // 3994
                                                                                                                       // 3995
		if (useHTML && !renderer.forExport) {                                                                                // 3996
			return renderer.html(str, x, y);                                                                                    // 3997
		}                                                                                                                    // 3998
                                                                                                                       // 3999
		attr.x = Math.round(x || 0); // X is always needed for line-wrap logic                                               // 4000
		if (y) {                                                                                                             // 4001
			attr.y = Math.round(y);                                                                                             // 4002
		}                                                                                                                    // 4003
		if (str || str === 0) {                                                                                              // 4004
			attr.text = str;                                                                                                    // 4005
		}                                                                                                                    // 4006
                                                                                                                       // 4007
		wrapper = renderer.createElement('text')                                                                             // 4008
			.attr(attr);                                                                                                        // 4009
                                                                                                                       // 4010
		// Prevent wrapping from creating false offsetWidths in export in legacy IE (#1079, #1063)                           // 4011
		if (fakeSVG) {                                                                                                       // 4012
			wrapper.css({                                                                                                       // 4013
				position: ABSOLUTE                                                                                                 // 4014
			});                                                                                                                 // 4015
		}                                                                                                                    // 4016
                                                                                                                       // 4017
		if (!useHTML) {                                                                                                      // 4018
			wrapper.xSetter = function (value, key, element) {                                                                  // 4019
				var tspans = element.getElementsByTagName('tspan'),                                                                // 4020
					tspan,                                                                                                            // 4021
					parentVal = element.getAttribute(key),                                                                            // 4022
					i;                                                                                                                // 4023
				for (i = 0; i < tspans.length; i++) {                                                                              // 4024
					tspan = tspans[i];                                                                                                // 4025
					// If the x values are equal, the tspan represents a linebreak                                                    // 4026
					if (tspan.getAttribute(key) === parentVal) {                                                                      // 4027
						tspan.setAttribute(key, value);                                                                                  // 4028
					}                                                                                                                 // 4029
				}                                                                                                                  // 4030
				element.setAttribute(key, value);                                                                                  // 4031
			};                                                                                                                  // 4032
		}                                                                                                                    // 4033
		                                                                                                                     // 4034
		return wrapper;                                                                                                      // 4035
	},                                                                                                                    // 4036
                                                                                                                       // 4037
	/**                                                                                                                   // 4038
	 * Utility to return the baseline offset and total line height from the font size                                     // 4039
	 */                                                                                                                   // 4040
	fontMetrics: function (fontSize, elem) {                                                                              // 4041
		var lineHeight,                                                                                                      // 4042
			baseline,                                                                                                           // 4043
			style;                                                                                                              // 4044
                                                                                                                       // 4045
		fontSize = fontSize || this.style.fontSize;                                                                          // 4046
		if (elem && win.getComputedStyle) {                                                                                  // 4047
			elem = elem.element || elem; // SVGElement                                                                          // 4048
			style = win.getComputedStyle(elem, "");                                                                             // 4049
			fontSize = style && style.fontSize; // #4309, the style doesn't exist inside a hidden iframe in Firefox             // 4050
		}                                                                                                                    // 4051
		fontSize = /px/.test(fontSize) ? pInt(fontSize) : /em/.test(fontSize) ? parseFloat(fontSize) * 12 : 12;              // 4052
                                                                                                                       // 4053
		// Empirical values found by comparing font size and bounding box height.                                            // 4054
		// Applies to the default font family. http://jsfiddle.net/highcharts/7xvn7/                                         // 4055
		lineHeight = fontSize < 24 ? fontSize + 3 : mathRound(fontSize * 1.2);                                               // 4056
		baseline = mathRound(lineHeight * 0.8);                                                                              // 4057
                                                                                                                       // 4058
		return {                                                                                                             // 4059
			h: lineHeight,                                                                                                      // 4060
			b: baseline,                                                                                                        // 4061
			f: fontSize                                                                                                         // 4062
		};                                                                                                                   // 4063
	},                                                                                                                    // 4064
                                                                                                                       // 4065
	/**                                                                                                                   // 4066
	 * Correct X and Y positioning of a label for rotation (#1764)                                                        // 4067
	 */                                                                                                                   // 4068
	rotCorr: function (baseline, rotation, alterY) {                                                                      // 4069
		var y = baseline;                                                                                                    // 4070
		if (rotation && alterY) {                                                                                            // 4071
			y = mathMax(y * mathCos(rotation * deg2rad), 4);                                                                    // 4072
		}                                                                                                                    // 4073
		return {                                                                                                             // 4074
			x: (-baseline / 3) * mathSin(rotation * deg2rad),                                                                   // 4075
			y: y                                                                                                                // 4076
		};                                                                                                                   // 4077
	},                                                                                                                    // 4078
                                                                                                                       // 4079
	/**                                                                                                                   // 4080
	 * Add a label, a text item that can hold a colored or gradient background                                            // 4081
	 * as well as a border and shadow.                                                                                    // 4082
	 * @param {string} str                                                                                                // 4083
	 * @param {Number} x                                                                                                  // 4084
	 * @param {Number} y                                                                                                  // 4085
	 * @param {String} shape                                                                                              // 4086
	 * @param {Number} anchorX In case the shape has a pointer, like a flag, this is the                                  // 4087
	 *	coordinates it should be pinned to                                                                                 // 4088
	 * @param {Number} anchorY                                                                                            // 4089
	 * @param {Boolean} baseline Whether to position the label relative to the text baseline,                             // 4090
	 *	like renderer.text, or to the upper border of the rectangle.                                                       // 4091
	 * @param {String} className Class name for the group                                                                 // 4092
	 */                                                                                                                   // 4093
	label: function (str, x, y, shape, anchorX, anchorY, useHTML, baseline, className) {                                  // 4094
                                                                                                                       // 4095
		var renderer = this,                                                                                                 // 4096
			wrapper = renderer.g(className),                                                                                    // 4097
			text = renderer.text('', 0, 0, useHTML)                                                                             // 4098
				.attr({                                                                                                            // 4099
					zIndex: 1                                                                                                         // 4100
				}),                                                                                                                // 4101
				//.add(wrapper),                                                                                                   // 4102
			box,                                                                                                                // 4103
			bBox,                                                                                                               // 4104
			alignFactor = 0,                                                                                                    // 4105
			padding = 3,                                                                                                        // 4106
			paddingLeft = 0,                                                                                                    // 4107
			width,                                                                                                              // 4108
			height,                                                                                                             // 4109
			wrapperX,                                                                                                           // 4110
			wrapperY,                                                                                                           // 4111
			crispAdjust = 0,                                                                                                    // 4112
			deferredAttr = {},                                                                                                  // 4113
			baselineOffset,                                                                                                     // 4114
			needsBox;                                                                                                           // 4115
                                                                                                                       // 4116
		/**                                                                                                                  // 4117
		 * This function runs after the label is added to the DOM (when the bounding box is                                  // 4118
		 * available), and after the text of the label is updated to detect the new bounding                                 // 4119
		 * box and reflect it in the border box.                                                                             // 4120
		 */                                                                                                                  // 4121
		function updateBoxSize() {                                                                                           // 4122
			var boxX,                                                                                                           // 4123
				boxY,                                                                                                              // 4124
				style = text.element.style;                                                                                        // 4125
                                                                                                                       // 4126
			bBox = (width === undefined || height === undefined || wrapper.styles.textAlign) && defined(text.textStr) &&        // 4127
				text.getBBox(); //#3295 && 3514 box failure when string equals 0                                                   // 4128
			wrapper.width = (width || bBox.width || 0) + 2 * padding + paddingLeft;                                             // 4129
			wrapper.height = (height || bBox.height || 0) + 2 * padding;                                                        // 4130
                                                                                                                       // 4131
			// update the label-scoped y offset                                                                                 // 4132
			baselineOffset = padding + renderer.fontMetrics(style && style.fontSize, text).b;                                   // 4133
                                                                                                                       // 4134
			                                                                                                                    // 4135
			if (needsBox) {                                                                                                     // 4136
                                                                                                                       // 4137
				// create the border box if it is not already present                                                              // 4138
				if (!box) {                                                                                                        // 4139
					boxX = mathRound(-alignFactor * padding) + crispAdjust;                                                           // 4140
					boxY = (baseline ? -baselineOffset : 0) + crispAdjust;                                                            // 4141
                                                                                                                       // 4142
					wrapper.box = box = shape ?                                                                                       // 4143
						renderer.symbol(shape, boxX, boxY, wrapper.width, wrapper.height, deferredAttr) :                                // 4144
						renderer.rect(boxX, boxY, wrapper.width, wrapper.height, 0, deferredAttr[STROKE_WIDTH]);                         // 4145
					box.attr('fill', NONE).add(wrapper);                                                                              // 4146
				}                                                                                                                  // 4147
                                                                                                                       // 4148
				// apply the box attributes                                                                                        // 4149
				if (!box.isImg) { // #1630                                                                                         // 4150
					box.attr(extend({                                                                                                 // 4151
						width: mathRound(wrapper.width),                                                                                 // 4152
						height: mathRound(wrapper.height)                                                                                // 4153
					}, deferredAttr));                                                                                                // 4154
				}                                                                                                                  // 4155
				deferredAttr = null;                                                                                               // 4156
			}                                                                                                                   // 4157
		}                                                                                                                    // 4158
                                                                                                                       // 4159
		/**                                                                                                                  // 4160
		 * This function runs after setting text or padding, but only if padding is changed                                  // 4161
		 */                                                                                                                  // 4162
		function updateTextPadding() {                                                                                       // 4163
			var styles = wrapper.styles,                                                                                        // 4164
				textAlign = styles && styles.textAlign,                                                                            // 4165
				x = paddingLeft + padding * (1 - alignFactor),                                                                     // 4166
				y;                                                                                                                 // 4167
                                                                                                                       // 4168
			// determin y based on the baseline                                                                                 // 4169
			y = baseline ? 0 : baselineOffset;                                                                                  // 4170
                                                                                                                       // 4171
			// compensate for alignment                                                                                         // 4172
			if (defined(width) && bBox && (textAlign === 'center' || textAlign === 'right')) {                                  // 4173
				x += { center: 0.5, right: 1 }[textAlign] * (width - bBox.width);                                                  // 4174
			}                                                                                                                   // 4175
                                                                                                                       // 4176
			// update if anything changed                                                                                       // 4177
			if (x !== text.x || y !== text.y) {                                                                                 // 4178
				text.attr('x', x);                                                                                                 // 4179
				if (y !== UNDEFINED) {                                                                                             // 4180
					text.attr('y', y);                                                                                                // 4181
				}                                                                                                                  // 4182
			}                                                                                                                   // 4183
                                                                                                                       // 4184
			// record current values                                                                                            // 4185
			text.x = x;                                                                                                         // 4186
			text.y = y;                                                                                                         // 4187
		}                                                                                                                    // 4188
                                                                                                                       // 4189
		/**                                                                                                                  // 4190
		 * Set a box attribute, or defer it if the box is not yet created                                                    // 4191
		 * @param {Object} key                                                                                               // 4192
		 * @param {Object} value                                                                                             // 4193
		 */                                                                                                                  // 4194
		function boxAttr(key, value) {                                                                                       // 4195
			if (box) {                                                                                                          // 4196
				box.attr(key, value);                                                                                              // 4197
			} else {                                                                                                            // 4198
				deferredAttr[key] = value;                                                                                         // 4199
			}                                                                                                                   // 4200
		}                                                                                                                    // 4201
                                                                                                                       // 4202
		/**                                                                                                                  // 4203
		 * After the text element is added, get the desired size of the border box                                           // 4204
		 * and add it before the text in the DOM.                                                                            // 4205
		 */                                                                                                                  // 4206
		wrapper.onAdd = function () {                                                                                        // 4207
			text.add(wrapper);                                                                                                  // 4208
			wrapper.attr({                                                                                                      // 4209
				text: (str || str === 0) ? str : '', // alignment is available now // #3295: 0 not rendered if given as a value    // 4210
				x: x,                                                                                                              // 4211
				y: y                                                                                                               // 4212
			});                                                                                                                 // 4213
                                                                                                                       // 4214
			if (box && defined(anchorX)) {                                                                                      // 4215
				wrapper.attr({                                                                                                     // 4216
					anchorX: anchorX,                                                                                                 // 4217
					anchorY: anchorY                                                                                                  // 4218
				});                                                                                                                // 4219
			}                                                                                                                   // 4220
		};                                                                                                                   // 4221
                                                                                                                       // 4222
		/*                                                                                                                   // 4223
		 * Add specific attribute setters.                                                                                   // 4224
		 */                                                                                                                  // 4225
                                                                                                                       // 4226
		// only change local variables                                                                                       // 4227
		wrapper.widthSetter = function (value) {                                                                             // 4228
			width = value;                                                                                                      // 4229
		};                                                                                                                   // 4230
		wrapper.heightSetter = function (value) {                                                                            // 4231
			height = value;                                                                                                     // 4232
		};                                                                                                                   // 4233
		wrapper.paddingSetter =  function (value) {                                                                          // 4234
			if (defined(value) && value !== padding) {                                                                          // 4235
				padding = wrapper.padding = value;                                                                                 // 4236
				updateTextPadding();                                                                                               // 4237
			}                                                                                                                   // 4238
		};                                                                                                                   // 4239
		wrapper.paddingLeftSetter =  function (value) {                                                                      // 4240
			if (defined(value) && value !== paddingLeft) {                                                                      // 4241
				paddingLeft = value;                                                                                               // 4242
				updateTextPadding();                                                                                               // 4243
			}                                                                                                                   // 4244
		};                                                                                                                   // 4245
                                                                                                                       // 4246
                                                                                                                       // 4247
		// change local variable and prevent setting attribute on the group                                                  // 4248
		wrapper.alignSetter = function (value) {                                                                             // 4249
			alignFactor = { left: 0, center: 0.5, right: 1 }[value];                                                            // 4250
		};                                                                                                                   // 4251
                                                                                                                       // 4252
		// apply these to the box and the text alike                                                                         // 4253
		wrapper.textSetter = function (value) {                                                                              // 4254
			if (value !== UNDEFINED) {                                                                                          // 4255
				text.textSetter(value);                                                                                            // 4256
			}                                                                                                                   // 4257
			updateBoxSize();                                                                                                    // 4258
			updateTextPadding();                                                                                                // 4259
		};                                                                                                                   // 4260
                                                                                                                       // 4261
		// apply these to the box but not to the text                                                                        // 4262
		wrapper['stroke-widthSetter'] = function (value, key) {                                                              // 4263
			if (value) {                                                                                                        // 4264
				needsBox = true;                                                                                                   // 4265
			}                                                                                                                   // 4266
			crispAdjust = value % 2 / 2;                                                                                        // 4267
			boxAttr(key, value);                                                                                                // 4268
		};                                                                                                                   // 4269
		wrapper.strokeSetter = wrapper.fillSetter = wrapper.rSetter = function (value, key) {                                // 4270
			if (key === 'fill' && value) {                                                                                      // 4271
				needsBox = true;                                                                                                   // 4272
			}                                                                                                                   // 4273
			boxAttr(key, value);                                                                                                // 4274
		};                                                                                                                   // 4275
		wrapper.anchorXSetter = function (value, key) {                                                                      // 4276
			anchorX = value;                                                                                                    // 4277
			boxAttr(key, mathRound(value) - crispAdjust - wrapperX);                                                            // 4278
		};                                                                                                                   // 4279
		wrapper.anchorYSetter = function (value, key) {                                                                      // 4280
			anchorY = value;                                                                                                    // 4281
			boxAttr(key, value - wrapperY);                                                                                     // 4282
		};                                                                                                                   // 4283
                                                                                                                       // 4284
		// rename attributes                                                                                                 // 4285
		wrapper.xSetter = function (value) {                                                                                 // 4286
			wrapper.x = value; // for animation getter                                                                          // 4287
			if (alignFactor) {                                                                                                  // 4288
				value -= alignFactor * ((width || bBox.width) + padding);                                                          // 4289
			}                                                                                                                   // 4290
			wrapperX = mathRound(value);                                                                                        // 4291
			wrapper.attr('translateX', wrapperX);                                                                               // 4292
		};                                                                                                                   // 4293
		wrapper.ySetter = function (value) {                                                                                 // 4294
			wrapperY = wrapper.y = mathRound(value);                                                                            // 4295
			wrapper.attr('translateY', wrapperY);                                                                               // 4296
		};                                                                                                                   // 4297
                                                                                                                       // 4298
		// Redirect certain methods to either the box or the text                                                            // 4299
		var baseCss = wrapper.css;                                                                                           // 4300
		return extend(wrapper, {                                                                                             // 4301
			/**                                                                                                                 // 4302
			 * Pick up some properties and apply them to the text instead of the wrapper                                        // 4303
			 */                                                                                                                 // 4304
			css: function (styles) {                                                                                            // 4305
				if (styles) {                                                                                                      // 4306
					var textStyles = {};                                                                                              // 4307
					styles = merge(styles); // create a copy to avoid altering the original object (#537)                             // 4308
					each(wrapper.textProps, function (prop) {                                                                         // 4309
						if (styles[prop] !== UNDEFINED) {                                                                                // 4310
							textStyles[prop] = styles[prop];                                                                                // 4311
							delete styles[prop];                                                                                            // 4312
						}                                                                                                                // 4313
					});                                                                                                               // 4314
					text.css(textStyles);                                                                                             // 4315
				}                                                                                                                  // 4316
				return baseCss.call(wrapper, styles);                                                                              // 4317
			},                                                                                                                  // 4318
			/**                                                                                                                 // 4319
			 * Return the bounding box of the box, not the group                                                                // 4320
			 */                                                                                                                 // 4321
			getBBox: function () {                                                                                              // 4322
				return {                                                                                                           // 4323
					width: bBox.width + 2 * padding,                                                                                  // 4324
					height: bBox.height + 2 * padding,                                                                                // 4325
					x: bBox.x - padding,                                                                                              // 4326
					y: bBox.y - padding                                                                                               // 4327
				};                                                                                                                 // 4328
			},                                                                                                                  // 4329
			/**                                                                                                                 // 4330
			 * Apply the shadow to the box                                                                                      // 4331
			 */                                                                                                                 // 4332
			shadow: function (b) {                                                                                              // 4333
				if (box) {                                                                                                         // 4334
					box.shadow(b);                                                                                                    // 4335
				}                                                                                                                  // 4336
				return wrapper;                                                                                                    // 4337
			},                                                                                                                  // 4338
			/**                                                                                                                 // 4339
			 * Destroy and release memory.                                                                                      // 4340
			 */                                                                                                                 // 4341
			destroy: function () {                                                                                              // 4342
                                                                                                                       // 4343
				// Added by button implementation                                                                                  // 4344
				removeEvent(wrapper.element, 'mouseenter');                                                                        // 4345
				removeEvent(wrapper.element, 'mouseleave');                                                                        // 4346
                                                                                                                       // 4347
				if (text) {                                                                                                        // 4348
					text = text.destroy();                                                                                            // 4349
				}                                                                                                                  // 4350
				if (box) {                                                                                                         // 4351
					box = box.destroy();                                                                                              // 4352
				}                                                                                                                  // 4353
				// Call base implementation to destroy the rest                                                                    // 4354
				SVGElement.prototype.destroy.call(wrapper);                                                                        // 4355
                                                                                                                       // 4356
				// Release local pointers (#1298)                                                                                  // 4357
				wrapper = renderer = updateBoxSize = updateTextPadding = boxAttr = null;                                           // 4358
			}                                                                                                                   // 4359
		});                                                                                                                  // 4360
	}                                                                                                                     // 4361
}; // end SVGRenderer                                                                                                  // 4362
                                                                                                                       // 4363
                                                                                                                       // 4364
// general renderer                                                                                                    // 4365
Renderer = SVGRenderer;                                                                                                // 4366
// extend SvgElement for useHTML option                                                                                // 4367
extend(SVGElement.prototype, {                                                                                         // 4368
	/**                                                                                                                   // 4369
	 * Apply CSS to HTML elements. This is used in text within SVG rendering and                                          // 4370
	 * by the VML renderer                                                                                                // 4371
	 */                                                                                                                   // 4372
	htmlCss: function (styles) {                                                                                          // 4373
		var wrapper = this,                                                                                                  // 4374
			element = wrapper.element,                                                                                          // 4375
			textWidth = styles && element.tagName === 'SPAN' && styles.width;                                                   // 4376
                                                                                                                       // 4377
		if (textWidth) {                                                                                                     // 4378
			delete styles.width;                                                                                                // 4379
			wrapper.textWidth = textWidth;                                                                                      // 4380
			wrapper.updateTransform();                                                                                          // 4381
		}                                                                                                                    // 4382
		if (styles && styles.textOverflow === 'ellipsis') {                                                                  // 4383
			styles.whiteSpace = 'nowrap';                                                                                       // 4384
			styles.overflow = 'hidden';                                                                                         // 4385
		}                                                                                                                    // 4386
		wrapper.styles = extend(wrapper.styles, styles);                                                                     // 4387
		css(wrapper.element, styles);                                                                                        // 4388
                                                                                                                       // 4389
		return wrapper;                                                                                                      // 4390
	},                                                                                                                    // 4391
                                                                                                                       // 4392
	/**                                                                                                                   // 4393
	 * VML and useHTML method for calculating the bounding box based on offsets                                           // 4394
	 * @param {Boolean} refresh Whether to force a fresh value from the DOM or to                                         // 4395
	 * use the cached value                                                                                               // 4396
	 *                                                                                                                    // 4397
	 * @return {Object} A hash containing values for x, y, width and height                                               // 4398
	 */                                                                                                                   // 4399
                                                                                                                       // 4400
	htmlGetBBox: function () {                                                                                            // 4401
		var wrapper = this,                                                                                                  // 4402
			element = wrapper.element;                                                                                          // 4403
                                                                                                                       // 4404
		// faking getBBox in exported SVG in legacy IE                                                                       // 4405
		// faking getBBox in exported SVG in legacy IE (is this a duplicate of the fix for #1079?)                           // 4406
		if (element.nodeName === 'text') {                                                                                   // 4407
			element.style.position = ABSOLUTE;                                                                                  // 4408
		}                                                                                                                    // 4409
                                                                                                                       // 4410
		return {                                                                                                             // 4411
			x: element.offsetLeft,                                                                                              // 4412
			y: element.offsetTop,                                                                                               // 4413
			width: element.offsetWidth,                                                                                         // 4414
			height: element.offsetHeight                                                                                        // 4415
		};                                                                                                                   // 4416
	},                                                                                                                    // 4417
                                                                                                                       // 4418
	/**                                                                                                                   // 4419
	 * VML override private method to update elements based on internal                                                   // 4420
	 * properties based on SVG transform                                                                                  // 4421
	 */                                                                                                                   // 4422
	htmlUpdateTransform: function () {                                                                                    // 4423
		// aligning non added elements is expensive                                                                          // 4424
		if (!this.added) {                                                                                                   // 4425
			this.alignOnAdd = true;                                                                                             // 4426
			return;                                                                                                             // 4427
		}                                                                                                                    // 4428
                                                                                                                       // 4429
		var wrapper = this,                                                                                                  // 4430
			renderer = wrapper.renderer,                                                                                        // 4431
			elem = wrapper.element,                                                                                             // 4432
			translateX = wrapper.translateX || 0,                                                                               // 4433
			translateY = wrapper.translateY || 0,                                                                               // 4434
			x = wrapper.x || 0,                                                                                                 // 4435
			y = wrapper.y || 0,                                                                                                 // 4436
			align = wrapper.textAlign || 'left',                                                                                // 4437
			alignCorrection = { left: 0, center: 0.5, right: 1 }[align],                                                        // 4438
			shadows = wrapper.shadows,                                                                                          // 4439
			styles = wrapper.styles;                                                                                            // 4440
                                                                                                                       // 4441
		// apply translate                                                                                                   // 4442
		css(elem, {                                                                                                          // 4443
			marginLeft: translateX,                                                                                             // 4444
			marginTop: translateY                                                                                               // 4445
		});                                                                                                                  // 4446
		if (shadows) { // used in labels/tooltip                                                                             // 4447
			each(shadows, function (shadow) {                                                                                   // 4448
				css(shadow, {                                                                                                      // 4449
					marginLeft: translateX + 1,                                                                                       // 4450
					marginTop: translateY + 1                                                                                         // 4451
				});                                                                                                                // 4452
			});                                                                                                                 // 4453
		}                                                                                                                    // 4454
                                                                                                                       // 4455
		// apply inversion                                                                                                   // 4456
		if (wrapper.inverted) { // wrapper is a group                                                                        // 4457
			each(elem.childNodes, function (child) {                                                                            // 4458
				renderer.invertChild(child, elem);                                                                                 // 4459
			});                                                                                                                 // 4460
		}                                                                                                                    // 4461
                                                                                                                       // 4462
		if (elem.tagName === 'SPAN') {                                                                                       // 4463
                                                                                                                       // 4464
			var width,                                                                                                          // 4465
				rotation = wrapper.rotation,                                                                                       // 4466
				baseline,                                                                                                          // 4467
				textWidth = pInt(wrapper.textWidth),                                                                               // 4468
				currentTextTransform = [rotation, align, elem.innerHTML, wrapper.textWidth].join(',');                             // 4469
                                                                                                                       // 4470
			if (currentTextTransform !== wrapper.cTT) { // do the calculations and DOM access only if properties changed        // 4471
                                                                                                                       // 4472
                                                                                                                       // 4473
				baseline = renderer.fontMetrics(elem.style.fontSize).b;                                                            // 4474
                                                                                                                       // 4475
				// Renderer specific handling of span rotation                                                                     // 4476
				if (defined(rotation)) {                                                                                           // 4477
					wrapper.setSpanRotation(rotation, alignCorrection, baseline);                                                     // 4478
				}                                                                                                                  // 4479
                                                                                                                       // 4480
				width = pick(wrapper.elemWidth, elem.offsetWidth);                                                                 // 4481
                                                                                                                       // 4482
				// Update textWidth                                                                                                // 4483
				if (width > textWidth && /[ \-]/.test(elem.textContent || elem.innerText)) { // #983, #1254                        // 4484
					css(elem, {                                                                                                       // 4485
						width: textWidth + PX,                                                                                           // 4486
						display: 'block',                                                                                                // 4487
						whiteSpace: (styles && styles.whiteSpace) || 'normal' // #3331                                                   // 4488
					});                                                                                                               // 4489
					width = textWidth;                                                                                                // 4490
				}                                                                                                                  // 4491
                                                                                                                       // 4492
				wrapper.getSpanCorrection(width, baseline, alignCorrection, rotation, align);                                      // 4493
			}                                                                                                                   // 4494
                                                                                                                       // 4495
			// apply position with correction                                                                                   // 4496
			css(elem, {                                                                                                         // 4497
				left: (x + (wrapper.xCorr || 0)) + PX,                                                                             // 4498
				top: (y + (wrapper.yCorr || 0)) + PX                                                                               // 4499
			});                                                                                                                 // 4500
                                                                                                                       // 4501
			// force reflow in webkit to apply the left and top on useHTML element (#1249)                                      // 4502
			if (isWebKit) {                                                                                                     // 4503
				baseline = elem.offsetHeight; // assigned to baseline for JSLint purpose                                           // 4504
			}                                                                                                                   // 4505
                                                                                                                       // 4506
			// record current text transform                                                                                    // 4507
			wrapper.cTT = currentTextTransform;                                                                                 // 4508
		}                                                                                                                    // 4509
	},                                                                                                                    // 4510
                                                                                                                       // 4511
	/**                                                                                                                   // 4512
	 * Set the rotation of an individual HTML span                                                                        // 4513
	 */                                                                                                                   // 4514
	setSpanRotation: function (rotation, alignCorrection, baseline) {                                                     // 4515
		var rotationStyle = {},                                                                                              // 4516
			cssTransformKey = isIE ? '-ms-transform' : isWebKit ? '-webkit-transform' : isFirefox ? 'MozTransform' : isOpera ? '-o-transform' : '';
                                                                                                                       // 4518
		rotationStyle[cssTransformKey] = rotationStyle.transform = 'rotate(' + rotation + 'deg)';                            // 4519
		rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] = rotationStyle.transformOrigin = (alignCorrection * 100) + '% ' + baseline + 'px';
		css(this.element, rotationStyle);                                                                                    // 4521
	},                                                                                                                    // 4522
                                                                                                                       // 4523
	/**                                                                                                                   // 4524
	 * Get the correction in X and Y positioning as the element is rotated.                                               // 4525
	 */                                                                                                                   // 4526
	getSpanCorrection: function (width, baseline, alignCorrection) {                                                      // 4527
		this.xCorr = -width * alignCorrection;                                                                               // 4528
		this.yCorr = -baseline;                                                                                              // 4529
	}                                                                                                                     // 4530
});                                                                                                                    // 4531
                                                                                                                       // 4532
// Extend SvgRenderer for useHTML option.                                                                              // 4533
extend(SVGRenderer.prototype, {                                                                                        // 4534
	/**                                                                                                                   // 4535
	 * Create HTML text node. This is used by the VML renderer as well as the SVG                                         // 4536
	 * renderer through the useHTML option.                                                                               // 4537
	 *                                                                                                                    // 4538
	 * @param {String} str                                                                                                // 4539
	 * @param {Number} x                                                                                                  // 4540
	 * @param {Number} y                                                                                                  // 4541
	 */                                                                                                                   // 4542
	html: function (str, x, y) {                                                                                          // 4543
		var wrapper = this.createElement('span'),                                                                            // 4544
			element = wrapper.element,                                                                                          // 4545
			renderer = wrapper.renderer;                                                                                        // 4546
                                                                                                                       // 4547
		// Text setter                                                                                                       // 4548
		wrapper.textSetter = function (value) {                                                                              // 4549
			if (value !== element.innerHTML) {                                                                                  // 4550
				delete this.bBox;                                                                                                  // 4551
			}                                                                                                                   // 4552
			element.innerHTML = this.textStr = value;                                                                           // 4553
		};                                                                                                                   // 4554
                                                                                                                       // 4555
		// Various setters which rely on update transform                                                                    // 4556
		wrapper.xSetter = wrapper.ySetter = wrapper.alignSetter = wrapper.rotationSetter = function (value, key) {           // 4557
			if (key === 'align') {                                                                                              // 4558
				key = 'textAlign'; // Do not overwrite the SVGElement.align method. Same as VML.                                   // 4559
			}                                                                                                                   // 4560
			wrapper[key] = value;                                                                                               // 4561
			wrapper.htmlUpdateTransform();                                                                                      // 4562
		};                                                                                                                   // 4563
                                                                                                                       // 4564
		// Set the default attributes                                                                                        // 4565
		wrapper.attr({                                                                                                       // 4566
				text: str,                                                                                                         // 4567
				x: mathRound(x),                                                                                                   // 4568
				y: mathRound(y)                                                                                                    // 4569
			})                                                                                                                  // 4570
			.css({                                                                                                              // 4571
				position: ABSOLUTE,                                                                                                // 4572
				fontFamily: this.style.fontFamily,                                                                                 // 4573
				fontSize: this.style.fontSize                                                                                      // 4574
			});                                                                                                                 // 4575
                                                                                                                       // 4576
		// Keep the whiteSpace style outside the wrapper.styles collection                                                   // 4577
		element.style.whiteSpace = 'nowrap';                                                                                 // 4578
                                                                                                                       // 4579
		// Use the HTML specific .css method                                                                                 // 4580
		wrapper.css = wrapper.htmlCss;                                                                                       // 4581
                                                                                                                       // 4582
		// This is specific for HTML within SVG                                                                              // 4583
		if (renderer.isSVG) {                                                                                                // 4584
			wrapper.add = function (svgGroupWrapper) {                                                                          // 4585
                                                                                                                       // 4586
				var htmlGroup,                                                                                                     // 4587
					container = renderer.box.parentNode,                                                                              // 4588
					parentGroup,                                                                                                      // 4589
					parents = [];                                                                                                     // 4590
                                                                                                                       // 4591
				this.parentGroup = svgGroupWrapper;                                                                                // 4592
                                                                                                                       // 4593
				// Create a mock group to hold the HTML elements                                                                   // 4594
				if (svgGroupWrapper) {                                                                                             // 4595
					htmlGroup = svgGroupWrapper.div;                                                                                  // 4596
					if (!htmlGroup) {                                                                                                 // 4597
                                                                                                                       // 4598
						// Read the parent chain into an array and read from top down                                                    // 4599
						parentGroup = svgGroupWrapper;                                                                                   // 4600
						while (parentGroup) {                                                                                            // 4601
                                                                                                                       // 4602
							parents.push(parentGroup);                                                                                      // 4603
                                                                                                                       // 4604
							// Move up to the next parent group                                                                             // 4605
							parentGroup = parentGroup.parentGroup;                                                                          // 4606
						}                                                                                                                // 4607
                                                                                                                       // 4608
						// Ensure dynamically updating position when any parent is translated                                            // 4609
						each(parents.reverse(), function (parentGroup) {                                                                 // 4610
							var htmlGroupStyle,                                                                                             // 4611
								cls = attr(parentGroup.element, 'class');                                                                      // 4612
                                                                                                                       // 4613
							if (cls) {                                                                                                      // 4614
								cls = { className: cls };                                                                                      // 4615
							} // else null                                                                                                  // 4616
                                                                                                                       // 4617
							// Create a HTML div and append it to the parent div to emulate                                                 // 4618
							// the SVG group structure                                                                                      // 4619
							htmlGroup = parentGroup.div = parentGroup.div || createElement(DIV, cls, {                                      // 4620
								position: ABSOLUTE,                                                                                            // 4621
								left: (parentGroup.translateX || 0) + PX,                                                                      // 4622
								top: (parentGroup.translateY || 0) + PX                                                                        // 4623
							}, htmlGroup || container); // the top group is appended to container                                           // 4624
                                                                                                                       // 4625
							// Shortcut                                                                                                     // 4626
							htmlGroupStyle = htmlGroup.style;                                                                               // 4627
                                                                                                                       // 4628
							// Set listeners to update the HTML div's position whenever the SVG group                                       // 4629
							// position is changed                                                                                          // 4630
							extend(parentGroup, {                                                                                           // 4631
								translateXSetter: function (value, key) {                                                                      // 4632
									htmlGroupStyle.left = value + PX;                                                                             // 4633
									parentGroup[key] = value;                                                                                     // 4634
									parentGroup.doTransform = true;                                                                               // 4635
								},                                                                                                             // 4636
								translateYSetter: function (value, key) {                                                                      // 4637
									htmlGroupStyle.top = value + PX;                                                                              // 4638
									parentGroup[key] = value;                                                                                     // 4639
									parentGroup.doTransform = true;                                                                               // 4640
								},                                                                                                             // 4641
								visibilitySetter: function (value, key) {                                                                      // 4642
									htmlGroupStyle[key] = value;                                                                                  // 4643
								}                                                                                                              // 4644
							});                                                                                                             // 4645
						});                                                                                                              // 4646
                                                                                                                       // 4647
					}                                                                                                                 // 4648
				} else {                                                                                                           // 4649
					htmlGroup = container;                                                                                            // 4650
				}                                                                                                                  // 4651
                                                                                                                       // 4652
				htmlGroup.appendChild(element);                                                                                    // 4653
                                                                                                                       // 4654
				// Shared with VML:                                                                                                // 4655
				wrapper.added = true;                                                                                              // 4656
				if (wrapper.alignOnAdd) {                                                                                          // 4657
					wrapper.htmlUpdateTransform();                                                                                    // 4658
				}                                                                                                                  // 4659
                                                                                                                       // 4660
				return wrapper;                                                                                                    // 4661
			};                                                                                                                  // 4662
		}                                                                                                                    // 4663
		return wrapper;                                                                                                      // 4664
	}                                                                                                                     // 4665
});                                                                                                                    // 4666
                                                                                                                       // 4667
/* ****************************************************************************                                        // 4668
 *                                                                            *                                        // 4669
 * START OF INTERNET EXPLORER <= 8 SPECIFIC CODE                              *                                        // 4670
 *                                                                            *                                        // 4671
 * For applications and websites that don't need IE support, like platform    *                                        // 4672
 * targeted mobile apps and web apps, this code can be removed.               *                                        // 4673
 *                                                                            *                                        // 4674
 *****************************************************************************/                                        // 4675
                                                                                                                       // 4676
/**                                                                                                                    // 4677
 * @constructor                                                                                                        // 4678
 */                                                                                                                    // 4679
var VMLRenderer, VMLElement;                                                                                           // 4680
if (!hasSVG && !useCanVG) {                                                                                            // 4681
                                                                                                                       // 4682
/**                                                                                                                    // 4683
 * The VML element wrapper.                                                                                            // 4684
 */                                                                                                                    // 4685
VMLElement = {                                                                                                         // 4686
                                                                                                                       // 4687
	/**                                                                                                                   // 4688
	 * Initialize a new VML element wrapper. It builds the markup as a string                                             // 4689
	 * to minimize DOM traffic.                                                                                           // 4690
	 * @param {Object} renderer                                                                                           // 4691
	 * @param {Object} nodeName                                                                                           // 4692
	 */                                                                                                                   // 4693
	init: function (renderer, nodeName) {                                                                                 // 4694
		var wrapper = this,                                                                                                  // 4695
			markup =  ['<', nodeName, ' filled="f" stroked="f"'],                                                               // 4696
			style = ['position: ', ABSOLUTE, ';'],                                                                              // 4697
			isDiv = nodeName === DIV;                                                                                           // 4698
                                                                                                                       // 4699
		// divs and shapes need size                                                                                         // 4700
		if (nodeName === 'shape' || isDiv) {                                                                                 // 4701
			style.push('left:0;top:0;width:1px;height:1px;');                                                                   // 4702
		}                                                                                                                    // 4703
		style.push('visibility: ', isDiv ? HIDDEN : VISIBLE);                                                                // 4704
                                                                                                                       // 4705
		markup.push(' style="', style.join(''), '"/>');                                                                      // 4706
                                                                                                                       // 4707
		// create element with default attributes and style                                                                  // 4708
		if (nodeName) {                                                                                                      // 4709
			markup = isDiv || nodeName === 'span' || nodeName === 'img' ?                                                       // 4710
				markup.join('')                                                                                                    // 4711
				: renderer.prepVML(markup);                                                                                        // 4712
			wrapper.element = createElement(markup);                                                                            // 4713
		}                                                                                                                    // 4714
                                                                                                                       // 4715
		wrapper.renderer = renderer;                                                                                         // 4716
	},                                                                                                                    // 4717
                                                                                                                       // 4718
	/**                                                                                                                   // 4719
	 * Add the node to the given parent                                                                                   // 4720
	 * @param {Object} parent                                                                                             // 4721
	 */                                                                                                                   // 4722
	add: function (parent) {                                                                                              // 4723
		var wrapper = this,                                                                                                  // 4724
			renderer = wrapper.renderer,                                                                                        // 4725
			element = wrapper.element,                                                                                          // 4726
			box = renderer.box,                                                                                                 // 4727
			inverted = parent && parent.inverted,                                                                               // 4728
                                                                                                                       // 4729
			// get the parent node                                                                                              // 4730
			parentNode = parent ?                                                                                               // 4731
				parent.element || parent :                                                                                         // 4732
				box;                                                                                                               // 4733
                                                                                                                       // 4734
                                                                                                                       // 4735
		// if the parent group is inverted, apply inversion on all children                                                  // 4736
		if (inverted) { // only on groups                                                                                    // 4737
			renderer.invertChild(element, parentNode);                                                                          // 4738
		}                                                                                                                    // 4739
                                                                                                                       // 4740
		// append it                                                                                                         // 4741
		parentNode.appendChild(element);                                                                                     // 4742
                                                                                                                       // 4743
		// align text after adding to be able to read offset                                                                 // 4744
		wrapper.added = true;                                                                                                // 4745
		if (wrapper.alignOnAdd && !wrapper.deferUpdateTransform) {                                                           // 4746
			wrapper.updateTransform();                                                                                          // 4747
		}                                                                                                                    // 4748
                                                                                                                       // 4749
		// fire an event for internal hooks                                                                                  // 4750
		if (wrapper.onAdd) {                                                                                                 // 4751
			wrapper.onAdd();                                                                                                    // 4752
		}                                                                                                                    // 4753
                                                                                                                       // 4754
		return wrapper;                                                                                                      // 4755
	},                                                                                                                    // 4756
                                                                                                                       // 4757
	/**                                                                                                                   // 4758
	 * VML always uses htmlUpdateTransform                                                                                // 4759
	 */                                                                                                                   // 4760
	updateTransform: SVGElement.prototype.htmlUpdateTransform,                                                            // 4761
                                                                                                                       // 4762
	/**                                                                                                                   // 4763
	 * Set the rotation of a span with oldIE's filter                                                                     // 4764
	 */                                                                                                                   // 4765
	setSpanRotation: function () {                                                                                        // 4766
		// Adjust for alignment and rotation. Rotation of useHTML content is not yet implemented                             // 4767
		// but it can probably be implemented for Firefox 3.5+ on user request. FF3.5+                                       // 4768
		// has support for CSS3 transform. The getBBox method also needs to be updated                                       // 4769
		// to compensate for the rotation, like it currently does for SVG.                                                   // 4770
		// Test case: http://jsfiddle.net/highcharts/Ybt44/                                                                  // 4771
                                                                                                                       // 4772
		var rotation = this.rotation,                                                                                        // 4773
			costheta = mathCos(rotation * deg2rad),                                                                             // 4774
			sintheta = mathSin(rotation * deg2rad);                                                                             // 4775
					                                                                                                                  // 4776
		css(this.element, {                                                                                                  // 4777
			filter: rotation ? ['progid:DXImageTransform.Microsoft.Matrix(M11=', costheta,                                      // 4778
				', M12=', -sintheta, ', M21=', sintheta, ', M22=', costheta,                                                       // 4779
				', sizingMethod=\'auto expand\')'].join('') : NONE                                                                 // 4780
		});                                                                                                                  // 4781
	},                                                                                                                    // 4782
                                                                                                                       // 4783
	/**                                                                                                                   // 4784
	 * Get the positioning correction for the span after rotating.                                                        // 4785
	 */                                                                                                                   // 4786
	getSpanCorrection: function (width, baseline, alignCorrection, rotation, align) {                                     // 4787
                                                                                                                       // 4788
		var costheta = rotation ? mathCos(rotation * deg2rad) : 1,                                                           // 4789
			sintheta = rotation ? mathSin(rotation * deg2rad) : 0,                                                              // 4790
			height = pick(this.elemHeight, this.element.offsetHeight),                                                          // 4791
			quad,                                                                                                               // 4792
			nonLeft = align && align !== 'left';                                                                                // 4793
                                                                                                                       // 4794
		// correct x and y                                                                                                   // 4795
		this.xCorr = costheta < 0 && -width;                                                                                 // 4796
		this.yCorr = sintheta < 0 && -height;                                                                                // 4797
                                                                                                                       // 4798
		// correct for baseline and corners spilling out after rotation                                                      // 4799
		quad = costheta * sintheta < 0;                                                                                      // 4800
		this.xCorr += sintheta * baseline * (quad ? 1 - alignCorrection : alignCorrection);                                  // 4801
		this.yCorr -= costheta * baseline * (rotation ? (quad ? alignCorrection : 1 - alignCorrection) : 1);                 // 4802
		// correct for the length/height of the text                                                                         // 4803
		if (nonLeft) {                                                                                                       // 4804
			this.xCorr -= width * alignCorrection * (costheta < 0 ? -1 : 1);                                                    // 4805
			if (rotation) {                                                                                                     // 4806
				this.yCorr -= height * alignCorrection * (sintheta < 0 ? -1 : 1);                                                  // 4807
			}                                                                                                                   // 4808
			css(this.element, {                                                                                                 // 4809
				textAlign: align                                                                                                   // 4810
			});                                                                                                                 // 4811
		}                                                                                                                    // 4812
	},                                                                                                                    // 4813
                                                                                                                       // 4814
	/**                                                                                                                   // 4815
	 * Converts a subset of an SVG path definition to its VML counterpart. Takes an array                                 // 4816
	 * as the parameter and returns a string.                                                                             // 4817
	 */                                                                                                                   // 4818
	pathToVML: function (value) {                                                                                         // 4819
		// convert paths                                                                                                     // 4820
		var i = value.length,                                                                                                // 4821
			path = [];                                                                                                          // 4822
                                                                                                                       // 4823
		while (i--) {                                                                                                        // 4824
                                                                                                                       // 4825
			// Multiply by 10 to allow subpixel precision.                                                                      // 4826
			// Substracting half a pixel seems to make the coordinates                                                          // 4827
			// align with SVG, but this hasn't been tested thoroughly                                                           // 4828
			if (isNumber(value[i])) {                                                                                           // 4829
				path[i] = mathRound(value[i] * 10) - 5;                                                                            // 4830
			} else if (value[i] === 'Z') { // close the path                                                                    // 4831
				path[i] = 'x';                                                                                                     // 4832
			} else {                                                                                                            // 4833
				path[i] = value[i];                                                                                                // 4834
                                                                                                                       // 4835
				// When the start X and end X coordinates of an arc are too close,                                                 // 4836
				// they are rounded to the same value above. In this case, substract or                                            // 4837
				// add 1 from the end X and Y positions. #186, #760, #1371, #1410.                                                 // 4838
				if (value.isArc && (value[i] === 'wa' || value[i] === 'at')) {                                                     // 4839
					// Start and end X                                                                                                // 4840
					if (path[i + 5] === path[i + 7]) {                                                                                // 4841
						path[i + 7] += value[i + 7] > value[i + 5] ? 1 : -1;                                                             // 4842
					}                                                                                                                 // 4843
					// Start and end Y                                                                                                // 4844
					if (path[i + 6] === path[i + 8]) {                                                                                // 4845
						path[i + 8] += value[i + 8] > value[i + 6] ? 1 : -1;                                                             // 4846
					}                                                                                                                 // 4847
				}                                                                                                                  // 4848
			}                                                                                                                   // 4849
		}                                                                                                                    // 4850
                                                                                                                       // 4851
		                                                                                                                     // 4852
		// Loop up again to handle path shortcuts (#2132)                                                                    // 4853
		/*while (i++ < path.length) {                                                                                        // 4854
			if (path[i] === 'H') { // horizontal line to                                                                        // 4855
				path[i] = 'L';                                                                                                     // 4856
				path.splice(i + 2, 0, path[i - 1]);                                                                                // 4857
			} else if (path[i] === 'V') { // vertical line to                                                                   // 4858
				path[i] = 'L';                                                                                                     // 4859
				path.splice(i + 1, 0, path[i - 2]);                                                                                // 4860
			}                                                                                                                   // 4861
		}*/                                                                                                                  // 4862
		return path.join(' ') || 'x';                                                                                        // 4863
	},                                                                                                                    // 4864
                                                                                                                       // 4865
	/**                                                                                                                   // 4866
	 * Set the element's clipping to a predefined rectangle                                                               // 4867
	 *                                                                                                                    // 4868
	 * @param {String} id The id of the clip rectangle                                                                    // 4869
	 */                                                                                                                   // 4870
	clip: function (clipRect) {                                                                                           // 4871
		var wrapper = this,                                                                                                  // 4872
			clipMembers,                                                                                                        // 4873
			cssRet;                                                                                                             // 4874
                                                                                                                       // 4875
		if (clipRect) {                                                                                                      // 4876
			clipMembers = clipRect.members;                                                                                     // 4877
			erase(clipMembers, wrapper); // Ensure unique list of elements (#1258)                                              // 4878
			clipMembers.push(wrapper);                                                                                          // 4879
			wrapper.destroyClip = function () {                                                                                 // 4880
				erase(clipMembers, wrapper);                                                                                       // 4881
			};                                                                                                                  // 4882
			cssRet = clipRect.getCSS(wrapper);                                                                                  // 4883
                                                                                                                       // 4884
		} else {                                                                                                             // 4885
			if (wrapper.destroyClip) {                                                                                          // 4886
				wrapper.destroyClip();                                                                                             // 4887
			}                                                                                                                   // 4888
			cssRet = { clip: docMode8 ? 'inherit' : 'rect(auto)' }; // #1214                                                    // 4889
		}                                                                                                                    // 4890
                                                                                                                       // 4891
		return wrapper.css(cssRet);                                                                                          // 4892
                                                                                                                       // 4893
	},                                                                                                                    // 4894
                                                                                                                       // 4895
	/**                                                                                                                   // 4896
	 * Set styles for the element                                                                                         // 4897
	 * @param {Object} styles                                                                                             // 4898
	 */                                                                                                                   // 4899
	css: SVGElement.prototype.htmlCss,                                                                                    // 4900
                                                                                                                       // 4901
	/**                                                                                                                   // 4902
	 * Removes a child either by removeChild or move to garbageBin.                                                       // 4903
	 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.               // 4904
	 */                                                                                                                   // 4905
	safeRemoveChild: function (element) {                                                                                 // 4906
		// discardElement will detach the node from its parent before attaching it                                           // 4907
		// to the garbage bin. Therefore it is important that the node is attached and have parent.                          // 4908
		if (element.parentNode) {                                                                                            // 4909
			discardElement(element);                                                                                            // 4910
		}                                                                                                                    // 4911
	},                                                                                                                    // 4912
                                                                                                                       // 4913
	/**                                                                                                                   // 4914
	 * Extend element.destroy by removing it from the clip members array                                                  // 4915
	 */                                                                                                                   // 4916
	destroy: function () {                                                                                                // 4917
		if (this.destroyClip) {                                                                                              // 4918
			this.destroyClip();                                                                                                 // 4919
		}                                                                                                                    // 4920
                                                                                                                       // 4921
		return SVGElement.prototype.destroy.apply(this);                                                                     // 4922
	},                                                                                                                    // 4923
                                                                                                                       // 4924
	/**                                                                                                                   // 4925
	 * Add an event listener. VML override for normalizing event parameters.                                              // 4926
	 * @param {String} eventType                                                                                          // 4927
	 * @param {Function} handler                                                                                          // 4928
	 */                                                                                                                   // 4929
	on: function (eventType, handler) {                                                                                   // 4930
		// simplest possible event model for internal use                                                                    // 4931
		this.element['on' + eventType] = function () {                                                                       // 4932
			var evt = win.event;                                                                                                // 4933
			evt.target = evt.srcElement;                                                                                        // 4934
			handler(evt);                                                                                                       // 4935
		};                                                                                                                   // 4936
		return this;                                                                                                         // 4937
	},                                                                                                                    // 4938
                                                                                                                       // 4939
	/**                                                                                                                   // 4940
	 * In stacked columns, cut off the shadows so that they don't overlap                                                 // 4941
	 */                                                                                                                   // 4942
	cutOffPath: function (path, length) {                                                                                 // 4943
                                                                                                                       // 4944
		var len;                                                                                                             // 4945
                                                                                                                       // 4946
		path = path.split(/[ ,]/);                                                                                           // 4947
		len = path.length;                                                                                                   // 4948
                                                                                                                       // 4949
		if (len === 9 || len === 11) {                                                                                       // 4950
			path[len - 4] = path[len - 2] = pInt(path[len - 2]) - 10 * length;                                                  // 4951
		}                                                                                                                    // 4952
		return path.join(' ');                                                                                               // 4953
	},                                                                                                                    // 4954
                                                                                                                       // 4955
	/**                                                                                                                   // 4956
	 * Apply a drop shadow by copying elements and giving them different strokes                                          // 4957
	 * @param {Boolean|Object} shadowOptions                                                                              // 4958
	 */                                                                                                                   // 4959
	shadow: function (shadowOptions, group, cutOff) {                                                                     // 4960
		var shadows = [],                                                                                                    // 4961
			i,                                                                                                                  // 4962
			element = this.element,                                                                                             // 4963
			renderer = this.renderer,                                                                                           // 4964
			shadow,                                                                                                             // 4965
			elemStyle = element.style,                                                                                          // 4966
			markup,                                                                                                             // 4967
			path = element.path,                                                                                                // 4968
			strokeWidth,                                                                                                        // 4969
			modifiedPath,                                                                                                       // 4970
			shadowWidth,                                                                                                        // 4971
			shadowElementOpacity;                                                                                               // 4972
                                                                                                                       // 4973
		// some times empty paths are not strings                                                                            // 4974
		if (path && typeof path.value !== 'string') {                                                                        // 4975
			path = 'x';                                                                                                         // 4976
		}                                                                                                                    // 4977
		modifiedPath = path;                                                                                                 // 4978
                                                                                                                       // 4979
		if (shadowOptions) {                                                                                                 // 4980
			shadowWidth = pick(shadowOptions.width, 3);                                                                         // 4981
			shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;                                               // 4982
			for (i = 1; i <= 3; i++) {                                                                                          // 4983
                                                                                                                       // 4984
				strokeWidth = (shadowWidth * 2) + 1 - (2 * i);                                                                     // 4985
                                                                                                                       // 4986
				// Cut off shadows for stacked column items                                                                        // 4987
				if (cutOff) {                                                                                                      // 4988
					modifiedPath = this.cutOffPath(path.value, strokeWidth + 0.5);                                                    // 4989
				}                                                                                                                  // 4990
                                                                                                                       // 4991
				markup = ['<shape isShadow="true" strokeweight="', strokeWidth,                                                    // 4992
					'" filled="false" path="', modifiedPath,                                                                          // 4993
					'" coordsize="10 10" style="', element.style.cssText, '" />'];                                                    // 4994
                                                                                                                       // 4995
				shadow = createElement(renderer.prepVML(markup),                                                                   // 4996
					null, {                                                                                                           // 4997
						left: pInt(elemStyle.left) + pick(shadowOptions.offsetX, 1),                                                     // 4998
						top: pInt(elemStyle.top) + pick(shadowOptions.offsetY, 1)                                                        // 4999
					}                                                                                                                 // 5000
				);                                                                                                                 // 5001
				if (cutOff) {                                                                                                      // 5002
					shadow.cutOff = strokeWidth + 1;                                                                                  // 5003
				}                                                                                                                  // 5004
                                                                                                                       // 5005
				// apply the opacity                                                                                               // 5006
				markup = ['<stroke color="', shadowOptions.color || 'black', '" opacity="', shadowElementOpacity * i, '"/>'];      // 5007
				createElement(renderer.prepVML(markup), null, null, shadow);                                                       // 5008
                                                                                                                       // 5009
                                                                                                                       // 5010
				// insert it                                                                                                       // 5011
				if (group) {                                                                                                       // 5012
					group.element.appendChild(shadow);                                                                                // 5013
				} else {                                                                                                           // 5014
					element.parentNode.insertBefore(shadow, element);                                                                 // 5015
				}                                                                                                                  // 5016
                                                                                                                       // 5017
				// record it                                                                                                       // 5018
				shadows.push(shadow);                                                                                              // 5019
                                                                                                                       // 5020
			}                                                                                                                   // 5021
                                                                                                                       // 5022
			this.shadows = shadows;                                                                                             // 5023
		}                                                                                                                    // 5024
		return this;                                                                                                         // 5025
	},                                                                                                                    // 5026
	updateShadows: noop, // Used in SVG only                                                                              // 5027
                                                                                                                       // 5028
	setAttr: function (key, value) {                                                                                      // 5029
		if (docMode8) { // IE8 setAttribute bug                                                                              // 5030
			this.element[key] = value;                                                                                          // 5031
		} else {                                                                                                             // 5032
			this.element.setAttribute(key, value);                                                                              // 5033
		}                                                                                                                    // 5034
	},                                                                                                                    // 5035
	classSetter: function (value) {                                                                                       // 5036
		// IE8 Standards mode has problems retrieving the className unless set like this                                     // 5037
		this.element.className = value;                                                                                      // 5038
	},                                                                                                                    // 5039
	dashstyleSetter: function (value, key, element) {                                                                     // 5040
		var strokeElem = element.getElementsByTagName('stroke')[0] ||                                                        // 5041
			createElement(this.renderer.prepVML(['<stroke/>']), null, null, element);                                           // 5042
		strokeElem[key] = value || 'solid';                                                                                  // 5043
		this[key] = value; /* because changing stroke-width will change the dash length                                      // 5044
			and cause an epileptic effect */                                                                                    // 5045
	},                                                                                                                    // 5046
	dSetter: function (value, key, element) {                                                                             // 5047
		var i,                                                                                                               // 5048
			shadows = this.shadows;                                                                                             // 5049
		value = value || [];                                                                                                 // 5050
		this.d = value.join && value.join(' '); // used in getter for animation                                              // 5051
                                                                                                                       // 5052
		element.path = value = this.pathToVML(value);                                                                        // 5053
                                                                                                                       // 5054
		// update shadows                                                                                                    // 5055
		if (shadows) {                                                                                                       // 5056
			i = shadows.length;                                                                                                 // 5057
			while (i--) {                                                                                                       // 5058
				shadows[i].path = shadows[i].cutOff ? this.cutOffPath(value, shadows[i].cutOff) : value;                           // 5059
			}                                                                                                                   // 5060
		}                                                                                                                    // 5061
		this.setAttr(key, value);                                                                                            // 5062
	},                                                                                                                    // 5063
	fillSetter: function (value, key, element) {                                                                          // 5064
		var nodeName = element.nodeName;                                                                                     // 5065
		if (nodeName === 'SPAN') { // text color                                                                             // 5066
			element.style.color = value;                                                                                        // 5067
		} else if (nodeName !== 'IMG') { // #1336                                                                            // 5068
			element.filled = value !== NONE;                                                                                    // 5069
			this.setAttr('fillcolor', this.renderer.color(value, element, key, this));                                          // 5070
		}                                                                                                                    // 5071
	},                                                                                                                    // 5072
	opacitySetter: noop, // Don't bother - animation is too slow and filters introduce artifacts                          // 5073
	rotationSetter: function (value, key, element) {                                                                      // 5074
		var style = element.style;                                                                                           // 5075
		this[key] = style[key] = value; // style is for #1873                                                                // 5076
                                                                                                                       // 5077
		// Correction for the 1x1 size of the shape container. Used in gauge needles.                                        // 5078
		style.left = -mathRound(mathSin(value * deg2rad) + 1) + PX;                                                          // 5079
		style.top = mathRound(mathCos(value * deg2rad)) + PX;                                                                // 5080
	},                                                                                                                    // 5081
	strokeSetter: function (value, key, element) {                                                                        // 5082
		this.setAttr('strokecolor', this.renderer.color(value, element, key));                                               // 5083
	},                                                                                                                    // 5084
	'stroke-widthSetter': function (value, key, element) {                                                                // 5085
		element.stroked = !!value; // VML "stroked" attribute                                                                // 5086
		this[key] = value; // used in getter, issue #113                                                                     // 5087
		if (isNumber(value)) {                                                                                               // 5088
			value += PX;                                                                                                        // 5089
		}                                                                                                                    // 5090
		this.setAttr('strokeweight', value);                                                                                 // 5091
	},                                                                                                                    // 5092
	titleSetter: function (value, key) {                                                                                  // 5093
		this.setAttr(key, value);                                                                                            // 5094
	},                                                                                                                    // 5095
	visibilitySetter: function (value, key, element) {                                                                    // 5096
                                                                                                                       // 5097
		// Handle inherited visibility                                                                                       // 5098
		if (value === 'inherit') {                                                                                           // 5099
			value = VISIBLE;                                                                                                    // 5100
		}                                                                                                                    // 5101
		                                                                                                                     // 5102
		// Let the shadow follow the main element                                                                            // 5103
		if (this.shadows) {                                                                                                  // 5104
			each(this.shadows, function (shadow) {                                                                              // 5105
				shadow.style[key] = value;                                                                                         // 5106
			});                                                                                                                 // 5107
		}                                                                                                                    // 5108
                                                                                                                       // 5109
		// Instead of toggling the visibility CSS property, move the div out of the viewport.                                // 5110
		// This works around #61 and #586                                                                                    // 5111
		if (element.nodeName === 'DIV') {                                                                                    // 5112
			value = value === HIDDEN ? '-999em' : 0;                                                                            // 5113
                                                                                                                       // 5114
			// In order to redraw, IE7 needs the div to be visible when tucked away                                             // 5115
			// outside the viewport. So the visibility is actually opposite of                                                  // 5116
			// the expected value. This applies to the tooltip only.                                                            // 5117
			if (!docMode8) {                                                                                                    // 5118
				element.style[key] = value ? VISIBLE : HIDDEN;                                                                     // 5119
			}                                                                                                                   // 5120
			key = 'top';                                                                                                        // 5121
		}                                                                                                                    // 5122
		element.style[key] = value;                                                                                          // 5123
	},                                                                                                                    // 5124
	xSetter: function (value, key, element) {                                                                             // 5125
		this[key] = value; // used in getter                                                                                 // 5126
                                                                                                                       // 5127
		if (key === 'x') {                                                                                                   // 5128
			key = 'left';                                                                                                       // 5129
		} else if (key === 'y') {                                                                                            // 5130
			key = 'top';                                                                                                        // 5131
		}/* else {                                                                                                           // 5132
			value = mathMax(0, value); // don't set width or height below zero (#311)                                           // 5133
		}*/                                                                                                                  // 5134
                                                                                                                       // 5135
		// clipping rectangle special                                                                                        // 5136
		if (this.updateClipping) {                                                                                           // 5137
			this[key] = value; // the key is now 'left' or 'top' for 'x' and 'y'                                                // 5138
			this.updateClipping();                                                                                              // 5139
		} else {                                                                                                             // 5140
			// normal                                                                                                           // 5141
			element.style[key] = value;                                                                                         // 5142
		}                                                                                                                    // 5143
	},                                                                                                                    // 5144
	zIndexSetter: function (value, key, element) {                                                                        // 5145
		element.style[key] = value;                                                                                          // 5146
	}                                                                                                                     // 5147
};                                                                                                                     // 5148
Highcharts.VMLElement = VMLElement = extendClass(SVGElement, VMLElement);                                              // 5149
                                                                                                                       // 5150
// Some shared setters                                                                                                 // 5151
VMLElement.prototype.ySetter =                                                                                         // 5152
	VMLElement.prototype.widthSetter =                                                                                    // 5153
	VMLElement.prototype.heightSetter =                                                                                   // 5154
	VMLElement.prototype.xSetter;                                                                                         // 5155
                                                                                                                       // 5156
                                                                                                                       // 5157
/**                                                                                                                    // 5158
 * The VML renderer                                                                                                    // 5159
 */                                                                                                                    // 5160
var VMLRendererExtension = { // inherit SVGRenderer                                                                    // 5161
                                                                                                                       // 5162
	Element: VMLElement,                                                                                                  // 5163
	isIE8: userAgent.indexOf('MSIE 8.0') > -1,                                                                            // 5164
                                                                                                                       // 5165
                                                                                                                       // 5166
	/**                                                                                                                   // 5167
	 * Initialize the VMLRenderer                                                                                         // 5168
	 * @param {Object} container                                                                                          // 5169
	 * @param {Number} width                                                                                              // 5170
	 * @param {Number} height                                                                                             // 5171
	 */                                                                                                                   // 5172
	init: function (container, width, height, style) {                                                                    // 5173
		var renderer = this,                                                                                                 // 5174
			boxWrapper,                                                                                                         // 5175
			box,                                                                                                                // 5176
			css;                                                                                                                // 5177
                                                                                                                       // 5178
		renderer.alignedObjects = [];                                                                                        // 5179
                                                                                                                       // 5180
		boxWrapper = renderer.createElement(DIV)                                                                             // 5181
			.css(extend(this.getStyle(style), { position: RELATIVE}));                                                          // 5182
		box = boxWrapper.element;                                                                                            // 5183
		container.appendChild(boxWrapper.element);                                                                           // 5184
                                                                                                                       // 5185
                                                                                                                       // 5186
		// generate the containing box                                                                                       // 5187
		renderer.isVML = true;                                                                                               // 5188
		renderer.box = box;                                                                                                  // 5189
		renderer.boxWrapper = boxWrapper;                                                                                    // 5190
		renderer.cache = {};                                                                                                 // 5191
                                                                                                                       // 5192
                                                                                                                       // 5193
		renderer.setSize(width, height, false);                                                                              // 5194
                                                                                                                       // 5195
		// The only way to make IE6 and IE7 print is to use a global namespace. However,                                     // 5196
		// with IE8 the only way to make the dynamic shapes visible in screen and print mode                                 // 5197
		// seems to be to add the xmlns attribute and the behaviour style inline.                                            // 5198
		if (!doc.namespaces.hcv) {                                                                                           // 5199
                                                                                                                       // 5200
			doc.namespaces.add('hcv', 'urn:schemas-microsoft-com:vml');                                                         // 5201
                                                                                                                       // 5202
			// Setup default CSS (#2153, #2368, #2384)                                                                          // 5203
			css = 'hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke' +                                                         // 5204
				'{ behavior:url(#default#VML); display: inline-block; } ';                                                         // 5205
			try {                                                                                                               // 5206
				doc.createStyleSheet().cssText = css;                                                                              // 5207
			} catch (e) {                                                                                                       // 5208
				doc.styleSheets[0].cssText += css;                                                                                 // 5209
			}                                                                                                                   // 5210
                                                                                                                       // 5211
		}                                                                                                                    // 5212
	},                                                                                                                    // 5213
                                                                                                                       // 5214
                                                                                                                       // 5215
	/**                                                                                                                   // 5216
	 * Detect whether the renderer is hidden. This happens when one of the parent elements                                // 5217
	 * has display: none                                                                                                  // 5218
	 */                                                                                                                   // 5219
	isHidden: function () {                                                                                               // 5220
		return !this.box.offsetWidth;                                                                                        // 5221
	},                                                                                                                    // 5222
                                                                                                                       // 5223
	/**                                                                                                                   // 5224
	 * Define a clipping rectangle. In VML it is accomplished by storing the values                                       // 5225
	 * for setting the CSS style to all associated members.                                                               // 5226
	 *                                                                                                                    // 5227
	 * @param {Number} x                                                                                                  // 5228
	 * @param {Number} y                                                                                                  // 5229
	 * @param {Number} width                                                                                              // 5230
	 * @param {Number} height                                                                                             // 5231
	 */                                                                                                                   // 5232
	clipRect: function (x, y, width, height) {                                                                            // 5233
                                                                                                                       // 5234
		// create a dummy element                                                                                            // 5235
		var clipRect = this.createElement(),                                                                                 // 5236
			isObj = isObject(x);                                                                                                // 5237
                                                                                                                       // 5238
		// mimic a rectangle with its style object for automatic updating in attr                                            // 5239
		return extend(clipRect, {                                                                                            // 5240
			members: [],                                                                                                        // 5241
			count: 0,                                                                                                           // 5242
			left: (isObj ? x.x : x) + 1,                                                                                        // 5243
			top: (isObj ? x.y : y) + 1,                                                                                         // 5244
			width: (isObj ? x.width : width) - 1,                                                                               // 5245
			height: (isObj ? x.height : height) - 1,                                                                            // 5246
			getCSS: function (wrapper) {                                                                                        // 5247
				var element = wrapper.element,                                                                                     // 5248
					nodeName = element.nodeName,                                                                                      // 5249
					isShape = nodeName === 'shape',                                                                                   // 5250
					inverted = wrapper.inverted,                                                                                      // 5251
					rect = this,                                                                                                      // 5252
					top = rect.top - (isShape ? element.offsetTop : 0),                                                               // 5253
					left = rect.left,                                                                                                 // 5254
					right = left + rect.width,                                                                                        // 5255
					bottom = top + rect.height,                                                                                       // 5256
					ret = {                                                                                                           // 5257
						clip: 'rect(' +                                                                                                  // 5258
							mathRound(inverted ? left : top) + 'px,' +                                                                      // 5259
							mathRound(inverted ? bottom : right) + 'px,' +                                                                  // 5260
							mathRound(inverted ? right : bottom) + 'px,' +                                                                  // 5261
							mathRound(inverted ? top : left) + 'px)'                                                                        // 5262
					};                                                                                                                // 5263
                                                                                                                       // 5264
				// issue 74 workaround                                                                                             // 5265
				if (!inverted && docMode8 && nodeName === 'DIV') {                                                                 // 5266
					extend(ret, {                                                                                                     // 5267
						width: right + PX,                                                                                               // 5268
						height: bottom + PX                                                                                              // 5269
					});                                                                                                               // 5270
				}                                                                                                                  // 5271
				return ret;                                                                                                        // 5272
			},                                                                                                                  // 5273
                                                                                                                       // 5274
			// used in attr and animation to update the clipping of all members                                                 // 5275
			updateClipping: function () {                                                                                       // 5276
				each(clipRect.members, function (member) {                                                                         // 5277
					if (member.element) { // Deleted series, like in stock/members/series-remove demo. Should be removed from members, but this will do.
						member.css(clipRect.getCSS(member));                                                                             // 5279
					}                                                                                                                 // 5280
				});                                                                                                                // 5281
			}                                                                                                                   // 5282
		});                                                                                                                  // 5283
                                                                                                                       // 5284
	},                                                                                                                    // 5285
                                                                                                                       // 5286
                                                                                                                       // 5287
	/**                                                                                                                   // 5288
	 * Take a color and return it if it's a string, make it a gradient if it's a                                          // 5289
	 * gradient configuration object, and apply opacity.                                                                  // 5290
	 *                                                                                                                    // 5291
	 * @param {Object} color The color or config object                                                                   // 5292
	 */                                                                                                                   // 5293
	color: function (color, elem, prop, wrapper) {                                                                        // 5294
		var renderer = this,                                                                                                 // 5295
			colorObject,                                                                                                        // 5296
			regexRgba = /^rgba/,                                                                                                // 5297
			markup,                                                                                                             // 5298
			fillType,                                                                                                           // 5299
			ret = NONE;                                                                                                         // 5300
                                                                                                                       // 5301
		// Check for linear or radial gradient                                                                               // 5302
		if (color && color.linearGradient) {                                                                                 // 5303
			fillType = 'gradient';                                                                                              // 5304
		} else if (color && color.radialGradient) {                                                                          // 5305
			fillType = 'pattern';                                                                                               // 5306
		}                                                                                                                    // 5307
                                                                                                                       // 5308
                                                                                                                       // 5309
		if (fillType) {                                                                                                      // 5310
                                                                                                                       // 5311
			var stopColor,                                                                                                      // 5312
				stopOpacity,                                                                                                       // 5313
				gradient = color.linearGradient || color.radialGradient,                                                           // 5314
				x1,                                                                                                                // 5315
				y1,                                                                                                                // 5316
				x2,                                                                                                                // 5317
				y2,                                                                                                                // 5318
				opacity1,                                                                                                          // 5319
				opacity2,                                                                                                          // 5320
				color1,                                                                                                            // 5321
				color2,                                                                                                            // 5322
				fillAttr = '',                                                                                                     // 5323
				stops = color.stops,                                                                                               // 5324
				firstStop,                                                                                                         // 5325
				lastStop,                                                                                                          // 5326
				colors = [],                                                                                                       // 5327
				addFillNode = function () {                                                                                        // 5328
					// Add the fill subnode. When colors attribute is used, the meanings of opacity and o:opacity2                    // 5329
					// are reversed.                                                                                                  // 5330
					markup = ['<fill colors="' + colors.join(',') + '" opacity="', opacity2, '" o:opacity2="', opacity1,              // 5331
						'" type="', fillType, '" ', fillAttr, 'focus="100%" method="any" />'];                                           // 5332
					createElement(renderer.prepVML(markup), null, null, elem);                                                        // 5333
				};                                                                                                                 // 5334
                                                                                                                       // 5335
			// Extend from 0 to 1                                                                                               // 5336
			firstStop = stops[0];                                                                                               // 5337
			lastStop = stops[stops.length - 1];                                                                                 // 5338
			if (firstStop[0] > 0) {                                                                                             // 5339
				stops.unshift([                                                                                                    // 5340
					0,                                                                                                                // 5341
					firstStop[1]                                                                                                      // 5342
				]);                                                                                                                // 5343
			}                                                                                                                   // 5344
			if (lastStop[0] < 1) {                                                                                              // 5345
				stops.push([                                                                                                       // 5346
					1,                                                                                                                // 5347
					lastStop[1]                                                                                                       // 5348
				]);                                                                                                                // 5349
			}                                                                                                                   // 5350
                                                                                                                       // 5351
			// Compute the stops                                                                                                // 5352
			each(stops, function (stop, i) {                                                                                    // 5353
				if (regexRgba.test(stop[1])) {                                                                                     // 5354
					colorObject = Color(stop[1]);                                                                                     // 5355
					stopColor = colorObject.get('rgb');                                                                               // 5356
					stopOpacity = colorObject.get('a');                                                                               // 5357
				} else {                                                                                                           // 5358
					stopColor = stop[1];                                                                                              // 5359
					stopOpacity = 1;                                                                                                  // 5360
				}                                                                                                                  // 5361
                                                                                                                       // 5362
				// Build the color attribute                                                                                       // 5363
				colors.push((stop[0] * 100) + '% ' + stopColor);                                                                   // 5364
                                                                                                                       // 5365
				// Only start and end opacities are allowed, so we use the first and the last                                      // 5366
				if (!i) {                                                                                                          // 5367
					opacity1 = stopOpacity;                                                                                           // 5368
					color2 = stopColor;                                                                                               // 5369
				} else {                                                                                                           // 5370
					opacity2 = stopOpacity;                                                                                           // 5371
					color1 = stopColor;                                                                                               // 5372
				}                                                                                                                  // 5373
			});                                                                                                                 // 5374
                                                                                                                       // 5375
			// Apply the gradient to fills only.                                                                                // 5376
			if (prop === 'fill') {                                                                                              // 5377
                                                                                                                       // 5378
				// Handle linear gradient angle                                                                                    // 5379
				if (fillType === 'gradient') {                                                                                     // 5380
					x1 = gradient.x1 || gradient[0] || 0;                                                                             // 5381
					y1 = gradient.y1 || gradient[1] || 0;                                                                             // 5382
					x2 = gradient.x2 || gradient[2] || 0;                                                                             // 5383
					y2 = gradient.y2 || gradient[3] || 0;                                                                             // 5384
					fillAttr = 'angle="' + (90  - math.atan(                                                                          // 5385
						(y2 - y1) / // y vector                                                                                          // 5386
						(x2 - x1) // x vector                                                                                            // 5387
						) * 180 / mathPI) + '"';                                                                                         // 5388
                                                                                                                       // 5389
					addFillNode();                                                                                                    // 5390
                                                                                                                       // 5391
				// Radial (circular) gradient                                                                                      // 5392
				} else {                                                                                                           // 5393
                                                                                                                       // 5394
					var r = gradient.r,                                                                                               // 5395
						sizex = r * 2,                                                                                                   // 5396
						sizey = r * 2,                                                                                                   // 5397
						cx = gradient.cx,                                                                                                // 5398
						cy = gradient.cy,                                                                                                // 5399
						radialReference = elem.radialReference,                                                                          // 5400
						bBox,                                                                                                            // 5401
						applyRadialGradient = function () {                                                                              // 5402
							if (radialReference) {                                                                                          // 5403
								bBox = wrapper.getBBox();                                                                                      // 5404
								cx += (radialReference[0] - bBox.x) / bBox.width - 0.5;                                                        // 5405
								cy += (radialReference[1] - bBox.y) / bBox.height - 0.5;                                                       // 5406
								sizex *= radialReference[2] / bBox.width;                                                                      // 5407
								sizey *= radialReference[2] / bBox.height;                                                                     // 5408
							}                                                                                                               // 5409
							fillAttr = 'src="' + defaultOptions.global.VMLRadialGradientURL + '" ' +                                        // 5410
								'size="' + sizex + ',' + sizey + '" ' +                                                                        // 5411
								'origin="0.5,0.5" ' +                                                                                          // 5412
								'position="' + cx + ',' + cy + '" ' +                                                                          // 5413
								'color2="' + color2 + '" ';                                                                                    // 5414
                                                                                                                       // 5415
							addFillNode();                                                                                                  // 5416
						};                                                                                                               // 5417
                                                                                                                       // 5418
					// Apply radial gradient                                                                                          // 5419
					if (wrapper.added) {                                                                                              // 5420
						applyRadialGradient();                                                                                           // 5421
					} else {                                                                                                          // 5422
						// We need to know the bounding box to get the size and position right                                           // 5423
						wrapper.onAdd = applyRadialGradient;                                                                             // 5424
					}                                                                                                                 // 5425
                                                                                                                       // 5426
					// The fill element's color attribute is broken in IE8 standards mode, so we                                      // 5427
					// need to set the parent shape's fillcolor attribute instead.                                                    // 5428
					ret = color1;                                                                                                     // 5429
				}                                                                                                                  // 5430
                                                                                                                       // 5431
			// Gradients are not supported for VML stroke, return the first color. #722.                                        // 5432
			} else {                                                                                                            // 5433
				ret = stopColor;                                                                                                   // 5434
			}                                                                                                                   // 5435
                                                                                                                       // 5436
		// if the color is an rgba color, split it and add a fill node                                                       // 5437
		// to hold the opacity component                                                                                     // 5438
		} else if (regexRgba.test(color) && elem.tagName !== 'IMG') {                                                        // 5439
                                                                                                                       // 5440
			colorObject = Color(color);                                                                                         // 5441
                                                                                                                       // 5442
			markup = ['<', prop, ' opacity="', colorObject.get('a'), '"/>'];                                                    // 5443
			createElement(this.prepVML(markup), null, null, elem);                                                              // 5444
                                                                                                                       // 5445
			ret = colorObject.get('rgb');                                                                                       // 5446
                                                                                                                       // 5447
                                                                                                                       // 5448
		} else {                                                                                                             // 5449
			var propNodes = elem.getElementsByTagName(prop); // 'stroke' or 'fill' node                                         // 5450
			if (propNodes.length) {                                                                                             // 5451
				propNodes[0].opacity = 1;                                                                                          // 5452
				propNodes[0].type = 'solid';                                                                                       // 5453
			}                                                                                                                   // 5454
			ret = color;                                                                                                        // 5455
		}                                                                                                                    // 5456
                                                                                                                       // 5457
		return ret;                                                                                                          // 5458
	},                                                                                                                    // 5459
                                                                                                                       // 5460
	/**                                                                                                                   // 5461
	 * Take a VML string and prepare it for either IE8 or IE6/IE7.                                                        // 5462
	 * @param {Array} markup A string array of the VML markup to prepare                                                  // 5463
	 */                                                                                                                   // 5464
	prepVML: function (markup) {                                                                                          // 5465
		var vmlStyle = 'display:inline-block;behavior:url(#default#VML);',                                                   // 5466
			isIE8 = this.isIE8;                                                                                                 // 5467
                                                                                                                       // 5468
		markup = markup.join('');                                                                                            // 5469
                                                                                                                       // 5470
		if (isIE8) { // add xmlns and style inline                                                                           // 5471
			markup = markup.replace('/>', ' xmlns="urn:schemas-microsoft-com:vml" />');                                         // 5472
			if (markup.indexOf('style="') === -1) {                                                                             // 5473
				markup = markup.replace('/>', ' style="' + vmlStyle + '" />');                                                     // 5474
			} else {                                                                                                            // 5475
				markup = markup.replace('style="', 'style="' + vmlStyle);                                                          // 5476
			}                                                                                                                   // 5477
                                                                                                                       // 5478
		} else { // add namespace                                                                                            // 5479
			markup = markup.replace('<', '<hcv:');                                                                              // 5480
		}                                                                                                                    // 5481
                                                                                                                       // 5482
		return markup;                                                                                                       // 5483
	},                                                                                                                    // 5484
                                                                                                                       // 5485
	/**                                                                                                                   // 5486
	 * Create rotated and aligned text                                                                                    // 5487
	 * @param {String} str                                                                                                // 5488
	 * @param {Number} x                                                                                                  // 5489
	 * @param {Number} y                                                                                                  // 5490
	 */                                                                                                                   // 5491
	text: SVGRenderer.prototype.html,                                                                                     // 5492
                                                                                                                       // 5493
	/**                                                                                                                   // 5494
	 * Create and return a path element                                                                                   // 5495
	 * @param {Array} path                                                                                                // 5496
	 */                                                                                                                   // 5497
	path: function (path) {                                                                                               // 5498
		var attr = {                                                                                                         // 5499
			// subpixel precision down to 0.1 (width and height = 1px)                                                          // 5500
			coordsize: '10 10'                                                                                                  // 5501
		};                                                                                                                   // 5502
		if (isArray(path)) {                                                                                                 // 5503
			attr.d = path;                                                                                                      // 5504
		} else if (isObject(path)) { // attributes                                                                           // 5505
			extend(attr, path);                                                                                                 // 5506
		}                                                                                                                    // 5507
		// create the shape                                                                                                  // 5508
		return this.createElement('shape').attr(attr);                                                                       // 5509
	},                                                                                                                    // 5510
                                                                                                                       // 5511
	/**                                                                                                                   // 5512
	 * Create and return a circle element. In VML circles are implemented as                                              // 5513
	 * shapes, which is faster than v:oval                                                                                // 5514
	 * @param {Number} x                                                                                                  // 5515
	 * @param {Number} y                                                                                                  // 5516
	 * @param {Number} r                                                                                                  // 5517
	 */                                                                                                                   // 5518
	circle: function (x, y, r) {                                                                                          // 5519
		var circle = this.symbol('circle');                                                                                  // 5520
		if (isObject(x)) {                                                                                                   // 5521
			r = x.r;                                                                                                            // 5522
			y = x.y;                                                                                                            // 5523
			x = x.x;                                                                                                            // 5524
		}                                                                                                                    // 5525
		circle.isCircle = true; // Causes x and y to mean center (#1682)                                                     // 5526
		circle.r = r;                                                                                                        // 5527
		return circle.attr({ x: x, y: y });                                                                                  // 5528
	},                                                                                                                    // 5529
                                                                                                                       // 5530
	/**                                                                                                                   // 5531
	 * Create a group using an outer div and an inner v:group to allow rotating                                           // 5532
	 * and flipping. A simple v:group would have problems with positioning                                                // 5533
	 * child HTML elements and CSS clip.                                                                                  // 5534
	 *                                                                                                                    // 5535
	 * @param {String} name The name of the group                                                                         // 5536
	 */                                                                                                                   // 5537
	g: function (name) {                                                                                                  // 5538
		var wrapper,                                                                                                         // 5539
			attribs;                                                                                                            // 5540
                                                                                                                       // 5541
		// set the class name                                                                                                // 5542
		if (name) {                                                                                                          // 5543
			attribs = { 'className': PREFIX + name, 'class': PREFIX + name };                                                   // 5544
		}                                                                                                                    // 5545
                                                                                                                       // 5546
		// the div to hold HTML and clipping                                                                                 // 5547
		wrapper = this.createElement(DIV).attr(attribs);                                                                     // 5548
                                                                                                                       // 5549
		return wrapper;                                                                                                      // 5550
	},                                                                                                                    // 5551
                                                                                                                       // 5552
	/**                                                                                                                   // 5553
	 * VML override to create a regular HTML image                                                                        // 5554
	 * @param {String} src                                                                                                // 5555
	 * @param {Number} x                                                                                                  // 5556
	 * @param {Number} y                                                                                                  // 5557
	 * @param {Number} width                                                                                              // 5558
	 * @param {Number} height                                                                                             // 5559
	 */                                                                                                                   // 5560
	image: function (src, x, y, width, height) {                                                                          // 5561
		var obj = this.createElement('img')                                                                                  // 5562
			.attr({ src: src });                                                                                                // 5563
                                                                                                                       // 5564
		if (arguments.length > 1) {                                                                                          // 5565
			obj.attr({                                                                                                          // 5566
				x: x,                                                                                                              // 5567
				y: y,                                                                                                              // 5568
				width: width,                                                                                                      // 5569
				height: height                                                                                                     // 5570
			});                                                                                                                 // 5571
		}                                                                                                                    // 5572
		return obj;                                                                                                          // 5573
	},                                                                                                                    // 5574
                                                                                                                       // 5575
	/**                                                                                                                   // 5576
	 * For rectangles, VML uses a shape for rect to overcome bugs and rotation problems                                   // 5577
	 */                                                                                                                   // 5578
	createElement: function (nodeName) {                                                                                  // 5579
		return nodeName === 'rect' ? this.symbol(nodeName) : SVGRenderer.prototype.createElement.call(this, nodeName);	      // 5580
	},                                                                                                                    // 5581
                                                                                                                       // 5582
	/**                                                                                                                   // 5583
	 * In the VML renderer, each child of an inverted div (group) is inverted                                             // 5584
	 * @param {Object} element                                                                                            // 5585
	 * @param {Object} parentNode                                                                                         // 5586
	 */                                                                                                                   // 5587
	invertChild: function (element, parentNode) {                                                                         // 5588
		var ren = this,                                                                                                      // 5589
			parentStyle = parentNode.style,                                                                                     // 5590
			imgStyle = element.tagName === 'IMG' && element.style; // #1111                                                     // 5591
                                                                                                                       // 5592
		css(element, {                                                                                                       // 5593
			flip: 'x',                                                                                                          // 5594
			left: pInt(parentStyle.width) - (imgStyle ? pInt(imgStyle.top) : 1),                                                // 5595
			top: pInt(parentStyle.height) - (imgStyle ? pInt(imgStyle.left) : 1),                                               // 5596
			rotation: -90                                                                                                       // 5597
		});                                                                                                                  // 5598
                                                                                                                       // 5599
		// Recursively invert child elements, needed for nested composite shapes like box plots and error bars. #1680, #1806.
		each(element.childNodes, function (child) {                                                                          // 5601
			ren.invertChild(child, element);                                                                                    // 5602
		});                                                                                                                  // 5603
	},                                                                                                                    // 5604
                                                                                                                       // 5605
	/**                                                                                                                   // 5606
	 * Symbol definitions that override the parent SVG renderer's symbols                                                 // 5607
	 *                                                                                                                    // 5608
	 */                                                                                                                   // 5609
	symbols: {                                                                                                            // 5610
		// VML specific arc function                                                                                         // 5611
		arc: function (x, y, w, h, options) {                                                                                // 5612
			var start = options.start,                                                                                          // 5613
				end = options.end,                                                                                                 // 5614
				radius = options.r || w || h,                                                                                      // 5615
				innerRadius = options.innerR,                                                                                      // 5616
				cosStart = mathCos(start),                                                                                         // 5617
				sinStart = mathSin(start),                                                                                         // 5618
				cosEnd = mathCos(end),                                                                                             // 5619
				sinEnd = mathSin(end),                                                                                             // 5620
				ret;                                                                                                               // 5621
                                                                                                                       // 5622
			if (end - start === 0) { // no angle, don't show it.                                                                // 5623
				return ['x'];                                                                                                      // 5624
			}                                                                                                                   // 5625
                                                                                                                       // 5626
			ret = [                                                                                                             // 5627
				'wa', // clockwise arc to                                                                                          // 5628
				x - radius, // left                                                                                                // 5629
				y - radius, // top                                                                                                 // 5630
				x + radius, // right                                                                                               // 5631
				y + radius, // bottom                                                                                              // 5632
				x + radius * cosStart, // start x                                                                                  // 5633
				y + radius * sinStart, // start y                                                                                  // 5634
				x + radius * cosEnd, // end x                                                                                      // 5635
				y + radius * sinEnd  // end y                                                                                      // 5636
			];                                                                                                                  // 5637
                                                                                                                       // 5638
			if (options.open && !innerRadius) {                                                                                 // 5639
				ret.push(                                                                                                          // 5640
					'e',                                                                                                              // 5641
					M,                                                                                                                // 5642
					x,// - innerRadius,                                                                                               // 5643
					y// - innerRadius                                                                                                 // 5644
				);                                                                                                                 // 5645
			}                                                                                                                   // 5646
                                                                                                                       // 5647
			ret.push(                                                                                                           // 5648
				'at', // anti clockwise arc to                                                                                     // 5649
				x - innerRadius, // left                                                                                           // 5650
				y - innerRadius, // top                                                                                            // 5651
				x + innerRadius, // right                                                                                          // 5652
				y + innerRadius, // bottom                                                                                         // 5653
				x + innerRadius * cosEnd, // start x                                                                               // 5654
				y + innerRadius * sinEnd, // start y                                                                               // 5655
				x + innerRadius * cosStart, // end x                                                                               // 5656
				y + innerRadius * sinStart, // end y                                                                               // 5657
				'x', // finish path                                                                                                // 5658
				'e' // close                                                                                                       // 5659
			);                                                                                                                  // 5660
                                                                                                                       // 5661
			ret.isArc = true;                                                                                                   // 5662
			return ret;                                                                                                         // 5663
                                                                                                                       // 5664
		},                                                                                                                   // 5665
		// Add circle symbol path. This performs significantly faster than v:oval.                                           // 5666
		circle: function (x, y, w, h, wrapper) {                                                                             // 5667
                                                                                                                       // 5668
			if (wrapper) {                                                                                                      // 5669
				w = h = 2 * wrapper.r;                                                                                             // 5670
			}                                                                                                                   // 5671
                                                                                                                       // 5672
			// Center correction, #1682                                                                                         // 5673
			if (wrapper && wrapper.isCircle) {                                                                                  // 5674
				x -= w / 2;                                                                                                        // 5675
				y -= h / 2;                                                                                                        // 5676
			}                                                                                                                   // 5677
                                                                                                                       // 5678
			// Return the path                                                                                                  // 5679
			return [                                                                                                            // 5680
				'wa', // clockwisearcto                                                                                            // 5681
				x, // left                                                                                                         // 5682
				y, // top                                                                                                          // 5683
				x + w, // right                                                                                                    // 5684
				y + h, // bottom                                                                                                   // 5685
				x + w, // start x                                                                                                  // 5686
				y + h / 2,     // start y                                                                                          // 5687
				x + w, // end x                                                                                                    // 5688
				y + h / 2,     // end y                                                                                            // 5689
				//'x', // finish path                                                                                              // 5690
				'e' // close                                                                                                       // 5691
			];                                                                                                                  // 5692
		},                                                                                                                   // 5693
		/**                                                                                                                  // 5694
		 * Add rectangle symbol path which eases rotation and omits arcsize problems                                         // 5695
		 * compared to the built-in VML roundrect shape. When borders are not rounded,                                       // 5696
		 * use the simpler square path, else use the callout path without the arrow.                                         // 5697
		 */                                                                                                                  // 5698
		rect: function (x, y, w, h, options) {                                                                               // 5699
			return SVGRenderer.prototype.symbols[                                                                               // 5700
				!defined(options) || !options.r ? 'square' : 'callout'                                                             // 5701
			].call(0, x, y, w, h, options);                                                                                     // 5702
		}                                                                                                                    // 5703
	}                                                                                                                     // 5704
};                                                                                                                     // 5705
Highcharts.VMLRenderer = VMLRenderer = function () {                                                                   // 5706
	this.init.apply(this, arguments);                                                                                     // 5707
};                                                                                                                     // 5708
VMLRenderer.prototype = merge(SVGRenderer.prototype, VMLRendererExtension);                                            // 5709
                                                                                                                       // 5710
	// general renderer                                                                                                   // 5711
	Renderer = VMLRenderer;                                                                                               // 5712
}                                                                                                                      // 5713
                                                                                                                       // 5714
// This method is used with exporting in old IE, when emulating SVG (see #2314)                                        // 5715
SVGRenderer.prototype.measureSpanWidth = function (text, styles) {                                                     // 5716
	var measuringSpan = doc.createElement('span'),                                                                        // 5717
		offsetWidth,                                                                                                         // 5718
	textNode = doc.createTextNode(text);                                                                                  // 5719
                                                                                                                       // 5720
	measuringSpan.appendChild(textNode);                                                                                  // 5721
	css(measuringSpan, styles);                                                                                           // 5722
	this.box.appendChild(measuringSpan);                                                                                  // 5723
	offsetWidth = measuringSpan.offsetWidth;                                                                              // 5724
	discardElement(measuringSpan); // #2463                                                                               // 5725
	return offsetWidth;                                                                                                   // 5726
};                                                                                                                     // 5727
                                                                                                                       // 5728
                                                                                                                       // 5729
/* ****************************************************************************                                        // 5730
 *                                                                            *                                        // 5731
 * END OF INTERNET EXPLORER <= 8 SPECIFIC CODE                                *                                        // 5732
 *                                                                            *                                        // 5733
 *****************************************************************************/                                        // 5734
/* ****************************************************************************                                        // 5735
 *                                                                            *                                        // 5736
 * START OF ANDROID < 3 SPECIFIC CODE. THIS CAN BE REMOVED IF YOU'RE NOT      *                                        // 5737
 * TARGETING THAT SYSTEM.                                                     *                                        // 5738
 *                                                                            *                                        // 5739
 *****************************************************************************/                                        // 5740
var CanVGRenderer,                                                                                                     // 5741
	CanVGController;                                                                                                      // 5742
                                                                                                                       // 5743
if (useCanVG) {                                                                                                        // 5744
	/**                                                                                                                   // 5745
	 * The CanVGRenderer is empty from start to keep the source footprint small.                                          // 5746
	 * When requested, the CanVGController downloads the rest of the source packaged                                      // 5747
	 * together with the canvg library.                                                                                   // 5748
	 */                                                                                                                   // 5749
	Highcharts.CanVGRenderer = CanVGRenderer = function () {                                                              // 5750
		// Override the global SVG namespace to fake SVG/HTML that accepts CSS                                               // 5751
		SVG_NS = 'http://www.w3.org/1999/xhtml';                                                                             // 5752
	};                                                                                                                    // 5753
                                                                                                                       // 5754
	/**                                                                                                                   // 5755
	 * Start with an empty symbols object. This is needed when exporting is used (exporting.src.js will add a few symbols), but 
	 * the implementation from SvgRenderer will not be merged in until first render.                                      // 5757
	 */                                                                                                                   // 5758
	CanVGRenderer.prototype.symbols = {};                                                                                 // 5759
                                                                                                                       // 5760
	/**                                                                                                                   // 5761
	 * Handles on demand download of canvg rendering support.                                                             // 5762
	 */                                                                                                                   // 5763
	CanVGController = (function () {                                                                                      // 5764
		// List of renderering calls                                                                                         // 5765
		var deferredRenderCalls = [];                                                                                        // 5766
                                                                                                                       // 5767
		/**                                                                                                                  // 5768
		 * When downloaded, we are ready to draw deferred charts.                                                            // 5769
		 */                                                                                                                  // 5770
		function drawDeferred() {                                                                                            // 5771
			var callLength = deferredRenderCalls.length,                                                                        // 5772
				callIndex;                                                                                                         // 5773
                                                                                                                       // 5774
			// Draw all pending render calls                                                                                    // 5775
			for (callIndex = 0; callIndex < callLength; callIndex++) {                                                          // 5776
				deferredRenderCalls[callIndex]();                                                                                  // 5777
			}                                                                                                                   // 5778
			// Clear the list                                                                                                   // 5779
			deferredRenderCalls = [];                                                                                           // 5780
		}                                                                                                                    // 5781
                                                                                                                       // 5782
		return {                                                                                                             // 5783
			push: function (func, scriptLocation) {                                                                             // 5784
				// Only get the script once                                                                                        // 5785
				if (deferredRenderCalls.length === 0) {                                                                            // 5786
					getScript(scriptLocation, drawDeferred);                                                                          // 5787
				}                                                                                                                  // 5788
				// Register render call                                                                                            // 5789
				deferredRenderCalls.push(func);                                                                                    // 5790
			}                                                                                                                   // 5791
		};                                                                                                                   // 5792
	}());                                                                                                                 // 5793
                                                                                                                       // 5794
	Renderer = CanVGRenderer;                                                                                             // 5795
} // end CanVGRenderer                                                                                                 // 5796
                                                                                                                       // 5797
/* ****************************************************************************                                        // 5798
 *                                                                            *                                        // 5799
 * END OF ANDROID < 3 SPECIFIC CODE                                           *                                        // 5800
 *                                                                            *                                        // 5801
 *****************************************************************************/                                        // 5802
                                                                                                                       // 5803
/**                                                                                                                    // 5804
 * The Tick class                                                                                                      // 5805
 */                                                                                                                    // 5806
function Tick(axis, pos, type, noLabel) {                                                                              // 5807
	this.axis = axis;                                                                                                     // 5808
	this.pos = pos;                                                                                                       // 5809
	this.type = type || '';                                                                                               // 5810
	this.isNew = true;                                                                                                    // 5811
                                                                                                                       // 5812
	if (!type && !noLabel) {                                                                                              // 5813
		this.addLabel();                                                                                                     // 5814
	}                                                                                                                     // 5815
}                                                                                                                      // 5816
                                                                                                                       // 5817
Tick.prototype = {                                                                                                     // 5818
	/**                                                                                                                   // 5819
	 * Write the tick label                                                                                               // 5820
	 */                                                                                                                   // 5821
	addLabel: function () {                                                                                               // 5822
		var tick = this,                                                                                                     // 5823
			axis = tick.axis,                                                                                                   // 5824
			options = axis.options,                                                                                             // 5825
			chart = axis.chart,                                                                                                 // 5826
			categories = axis.categories,                                                                                       // 5827
			names = axis.names,                                                                                                 // 5828
			pos = tick.pos,                                                                                                     // 5829
			labelOptions = options.labels,                                                                                      // 5830
			str,                                                                                                                // 5831
			tickPositions = axis.tickPositions,                                                                                 // 5832
			isFirst = pos === tickPositions[0],                                                                                 // 5833
			isLast = pos === tickPositions[tickPositions.length - 1],                                                           // 5834
			value = categories ?                                                                                                // 5835
				pick(categories[pos], names[pos], pos) :                                                                           // 5836
				pos,                                                                                                               // 5837
			label = tick.label,                                                                                                 // 5838
			tickPositionInfo = tickPositions.info,                                                                              // 5839
			dateTimeLabelFormat;                                                                                                // 5840
                                                                                                                       // 5841
		// Set the datetime label format. If a higher rank is set for this position, use that. If not,                       // 5842
		// use the general format.                                                                                           // 5843
		if (axis.isDatetimeAxis && tickPositionInfo) {                                                                       // 5844
			dateTimeLabelFormat = options.dateTimeLabelFormats[tickPositionInfo.higherRanks[pos] || tickPositionInfo.unitName]; // 5845
		}                                                                                                                    // 5846
		// set properties for access in render method                                                                        // 5847
		tick.isFirst = isFirst;                                                                                              // 5848
		tick.isLast = isLast;                                                                                                // 5849
                                                                                                                       // 5850
		// get the string                                                                                                    // 5851
		str = axis.labelFormatter.call({                                                                                     // 5852
			axis: axis,                                                                                                         // 5853
			chart: chart,                                                                                                       // 5854
			isFirst: isFirst,                                                                                                   // 5855
			isLast: isLast,                                                                                                     // 5856
			dateTimeLabelFormat: dateTimeLabelFormat,                                                                           // 5857
			value: axis.isLog ? correctFloat(lin2log(value)) : value                                                            // 5858
		});                                                                                                                  // 5859
                                                                                                                       // 5860
		// prepare CSS                                                                                                       // 5861
		//css = width && { width: mathMax(1, mathRound(width - 2 * (labelOptions.padding || 10))) + PX };                    // 5862
		                                                                                                                     // 5863
		// first call                                                                                                        // 5864
		if (!defined(label)) {                                                                                               // 5865
                                                                                                                       // 5866
			tick.label = label =                                                                                                // 5867
				defined(str) && labelOptions.enabled ?                                                                             // 5868
					chart.renderer.text(                                                                                              // 5869
							str,                                                                                                            // 5870
							0,                                                                                                              // 5871
							0,                                                                                                              // 5872
							labelOptions.useHTML                                                                                            // 5873
						)                                                                                                                // 5874
						//.attr(attr)                                                                                                    // 5875
						// without position absolute, IE export sometimes is wrong                                                       // 5876
						.css(merge(labelOptions.style))                                                                                  // 5877
						.add(axis.labelGroup) :                                                                                          // 5878
					null;                                                                                                             // 5879
			tick.labelLength = label && label.getBBox().width; // Un-rotated length                                             // 5880
			tick.rotation = 0; // Base value to detect change for new calls to getBBox                                          // 5881
                                                                                                                       // 5882
		// update                                                                                                            // 5883
		} else if (label) {                                                                                                  // 5884
			label.attr({ text: str });                                                                                          // 5885
		}                                                                                                                    // 5886
	},                                                                                                                    // 5887
                                                                                                                       // 5888
	/**                                                                                                                   // 5889
	 * Get the offset height or width of the label                                                                        // 5890
	 */                                                                                                                   // 5891
	getLabelSize: function () {                                                                                           // 5892
		return this.label ?                                                                                                  // 5893
			this.label.getBBox()[this.axis.horiz ? 'height' : 'width'] :                                                        // 5894
			0;                                                                                                                  // 5895
	},                                                                                                                    // 5896
                                                                                                                       // 5897
	/**                                                                                                                   // 5898
	 * Handle the label overflow by adjusting the labels to the left and right edge, or                                   // 5899
	 * hide them if they collide into the neighbour label.                                                                // 5900
	 */                                                                                                                   // 5901
	handleOverflow: function (xy) {                                                                                       // 5902
		var axis = this.axis,                                                                                                // 5903
			pxPos = xy.x,                                                                                                       // 5904
			chartWidth = axis.chart.chartWidth,                                                                                 // 5905
			spacing = axis.chart.spacing,                                                                                       // 5906
			leftBound = pick(axis.labelLeft, mathMin(axis.pos, spacing[3])),                                                    // 5907
			rightBound = pick(axis.labelRight, mathMax(axis.pos + axis.len, chartWidth - spacing[1])),                          // 5908
			label = this.label,                                                                                                 // 5909
			rotation = this.rotation,                                                                                           // 5910
			factor = { left: 0, center: 0.5, right: 1 }[axis.labelAlign],                                                       // 5911
			labelWidth = label.getBBox().width,                                                                                 // 5912
			slotWidth = axis.slotWidth,                                                                                         // 5913
			xCorrection = factor,                                                                                               // 5914
			goRight = 1,                                                                                                        // 5915
			leftPos,                                                                                                            // 5916
			rightPos,                                                                                                           // 5917
			textWidth,                                                                                                          // 5918
			css = {};                                                                                                           // 5919
                                                                                                                       // 5920
		// Check if the label overshoots the chart spacing box. If it does, move it.                                         // 5921
		// If it now overshoots the slotWidth, add ellipsis.                                                                 // 5922
		if (!rotation) {                                                                                                     // 5923
			leftPos = pxPos - factor * labelWidth;                                                                              // 5924
			rightPos = pxPos + (1 - factor) * labelWidth;                                                                       // 5925
                                                                                                                       // 5926
			if (leftPos < leftBound) {                                                                                          // 5927
				slotWidth = xy.x + slotWidth * (1 - factor) - leftBound;                                                           // 5928
			} else if (rightPos > rightBound) {                                                                                 // 5929
				slotWidth = rightBound - xy.x + slotWidth * factor;                                                                // 5930
				goRight = -1;                                                                                                      // 5931
			}                                                                                                                   // 5932
                                                                                                                       // 5933
			slotWidth = mathMin(axis.slotWidth, slotWidth); // #4177                                                            // 5934
			if (slotWidth < axis.slotWidth && axis.labelAlign === 'center') {                                                   // 5935
				xy.x += goRight * (axis.slotWidth - slotWidth - xCorrection * (axis.slotWidth - mathMin(labelWidth, slotWidth)));				
			}                                                                                                                   // 5937
			// If the label width exceeds the available space, set a text width to be                                           // 5938
			// picked up below. Also, if a width has been set before, we need to set a new                                      // 5939
			// one because the reported labelWidth will be limited by the box (#3938).                                          // 5940
			if (labelWidth > slotWidth || (axis.autoRotation && label.styles.width)) {                                          // 5941
				textWidth = slotWidth;                                                                                             // 5942
			}                                                                                                                   // 5943
                                                                                                                       // 5944
		// Add ellipsis to prevent rotated labels to be clipped against the edge of the chart                                // 5945
		} else if (rotation < 0 && pxPos - factor * labelWidth < leftBound) {                                                // 5946
			textWidth = mathRound(pxPos / mathCos(rotation * deg2rad) - leftBound);                                             // 5947
		} else if (rotation > 0 && pxPos + factor * labelWidth > rightBound) {                                               // 5948
			textWidth = mathRound((chartWidth - pxPos) / mathCos(rotation * deg2rad));                                          // 5949
		}                                                                                                                    // 5950
                                                                                                                       // 5951
		if (textWidth) {                                                                                                     // 5952
			css.width = textWidth;                                                                                              // 5953
			if (!axis.options.labels.style.textOverflow) {                                                                      // 5954
				css.textOverflow = 'ellipsis';                                                                                     // 5955
			}                                                                                                                   // 5956
			label.css(css);                                                                                                     // 5957
		}                                                                                                                    // 5958
	},                                                                                                                    // 5959
                                                                                                                       // 5960
	/**                                                                                                                   // 5961
	 * Get the x and y position for ticks and labels                                                                      // 5962
	 */                                                                                                                   // 5963
	getPosition: function (horiz, pos, tickmarkOffset, old) {                                                             // 5964
		var axis = this.axis,                                                                                                // 5965
			chart = axis.chart,                                                                                                 // 5966
			cHeight = (old && chart.oldChartHeight) || chart.chartHeight;                                                       // 5967
                                                                                                                       // 5968
		return {                                                                                                             // 5969
			x: horiz ?                                                                                                          // 5970
				axis.translate(pos + tickmarkOffset, null, null, old) + axis.transB :                                              // 5971
				axis.left + axis.offset + (axis.opposite ? ((old && chart.oldChartWidth) || chart.chartWidth) - axis.right - axis.left : 0),
                                                                                                                       // 5973
			y: horiz ?                                                                                                          // 5974
				cHeight - axis.bottom + axis.offset - (axis.opposite ? axis.height : 0) :                                          // 5975
				cHeight - axis.translate(pos + tickmarkOffset, null, null, old) - axis.transB                                      // 5976
		};                                                                                                                   // 5977
                                                                                                                       // 5978
	},                                                                                                                    // 5979
                                                                                                                       // 5980
	/**                                                                                                                   // 5981
	 * Get the x, y position of the tick label                                                                            // 5982
	 */                                                                                                                   // 5983
	getLabelPosition: function (x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {                          // 5984
		var axis = this.axis,                                                                                                // 5985
			transA = axis.transA,                                                                                               // 5986
			reversed = axis.reversed,                                                                                           // 5987
			staggerLines = axis.staggerLines,                                                                                   // 5988
			rotCorr = axis.tickRotCorr || { x: 0, y: 0 },                                                                       // 5989
			yOffset = pick(labelOptions.y, rotCorr.y + (axis.side === 2 ? 8 : -(label.getBBox().height / 2))),                  // 5990
			line;                                                                                                               // 5991
                                                                                                                       // 5992
		x = x + labelOptions.x + rotCorr.x - (tickmarkOffset && horiz ?                                                      // 5993
			tickmarkOffset * transA * (reversed ? -1 : 1) : 0);                                                                 // 5994
		y = y + yOffset - (tickmarkOffset && !horiz ?                                                                        // 5995
			tickmarkOffset * transA * (reversed ? 1 : -1) : 0);                                                                 // 5996
                                                                                                                       // 5997
		// Correct for staggered labels                                                                                      // 5998
		if (staggerLines) {                                                                                                  // 5999
			line = (index / (step || 1) % staggerLines);                                                                        // 6000
			y += line * (axis.labelOffset / staggerLines);                                                                      // 6001
		}                                                                                                                    // 6002
                                                                                                                       // 6003
		return {                                                                                                             // 6004
			x: x,                                                                                                               // 6005
			y: mathRound(y)                                                                                                     // 6006
		};                                                                                                                   // 6007
	},                                                                                                                    // 6008
                                                                                                                       // 6009
	/**                                                                                                                   // 6010
	 * Extendible method to return the path of the marker                                                                 // 6011
	 */                                                                                                                   // 6012
	getMarkPath: function (x, y, tickLength, tickWidth, horiz, renderer) {                                                // 6013
		return renderer.crispLine([                                                                                          // 6014
				M,                                                                                                                 // 6015
				x,                                                                                                                 // 6016
				y,                                                                                                                 // 6017
				L,                                                                                                                 // 6018
				x + (horiz ? 0 : -tickLength),                                                                                     // 6019
				y + (horiz ? tickLength : 0)                                                                                       // 6020
			], tickWidth);                                                                                                      // 6021
	},                                                                                                                    // 6022
                                                                                                                       // 6023
	/**                                                                                                                   // 6024
	 * Put everything in place                                                                                            // 6025
	 *                                                                                                                    // 6026
	 * @param index {Number}                                                                                              // 6027
	 * @param old {Boolean} Use old coordinates to prepare an animation into new position                                 // 6028
	 */                                                                                                                   // 6029
	render: function (index, old, opacity) {                                                                              // 6030
		var tick = this,                                                                                                     // 6031
			axis = tick.axis,                                                                                                   // 6032
			options = axis.options,                                                                                             // 6033
			chart = axis.chart,                                                                                                 // 6034
			renderer = chart.renderer,                                                                                          // 6035
			horiz = axis.horiz,                                                                                                 // 6036
			type = tick.type,                                                                                                   // 6037
			label = tick.label,                                                                                                 // 6038
			pos = tick.pos,                                                                                                     // 6039
			labelOptions = options.labels,                                                                                      // 6040
			gridLine = tick.gridLine,                                                                                           // 6041
			gridPrefix = type ? type + 'Grid' : 'grid',                                                                         // 6042
			tickPrefix = type ? type + 'Tick' : 'tick',                                                                         // 6043
			gridLineWidth = options[gridPrefix + 'LineWidth'],                                                                  // 6044
			gridLineColor = options[gridPrefix + 'LineColor'],                                                                  // 6045
			dashStyle = options[gridPrefix + 'LineDashStyle'],                                                                  // 6046
			tickLength = options[tickPrefix + 'Length'],                                                                        // 6047
			tickWidth = options[tickPrefix + 'Width'] || 0,                                                                     // 6048
			tickColor = options[tickPrefix + 'Color'],                                                                          // 6049
			tickPosition = options[tickPrefix + 'Position'],                                                                    // 6050
			gridLinePath,                                                                                                       // 6051
			mark = tick.mark,                                                                                                   // 6052
			markPath,                                                                                                           // 6053
			step = /*axis.labelStep || */labelOptions.step,                                                                     // 6054
			attribs,                                                                                                            // 6055
			show = true,                                                                                                        // 6056
			tickmarkOffset = axis.tickmarkOffset,                                                                               // 6057
			xy = tick.getPosition(horiz, pos, tickmarkOffset, old),                                                             // 6058
			x = xy.x,                                                                                                           // 6059
			y = xy.y,                                                                                                           // 6060
			reverseCrisp = ((horiz && x === axis.pos + axis.len) || (!horiz && y === axis.pos)) ? -1 : 1; // #1480, #1687       // 6061
                                                                                                                       // 6062
		opacity = pick(opacity, 1);                                                                                          // 6063
		this.isActive = true;                                                                                                // 6064
                                                                                                                       // 6065
		// create the grid line                                                                                              // 6066
		if (gridLineWidth) {                                                                                                 // 6067
			gridLinePath = axis.getPlotLinePath(pos + tickmarkOffset, gridLineWidth * reverseCrisp, old, true);                 // 6068
                                                                                                                       // 6069
			if (gridLine === UNDEFINED) {                                                                                       // 6070
				attribs = {                                                                                                        // 6071
					stroke: gridLineColor,                                                                                            // 6072
					'stroke-width': gridLineWidth                                                                                     // 6073
				};                                                                                                                 // 6074
				if (dashStyle) {                                                                                                   // 6075
					attribs.dashstyle = dashStyle;                                                                                    // 6076
				}                                                                                                                  // 6077
				if (!type) {                                                                                                       // 6078
					attribs.zIndex = 1;                                                                                               // 6079
				}                                                                                                                  // 6080
				if (old) {                                                                                                         // 6081
					attribs.opacity = 0;                                                                                              // 6082
				}                                                                                                                  // 6083
				tick.gridLine = gridLine =                                                                                         // 6084
					gridLineWidth ?                                                                                                   // 6085
						renderer.path(gridLinePath)                                                                                      // 6086
							.attr(attribs).add(axis.gridGroup) :                                                                            // 6087
						null;                                                                                                            // 6088
			}                                                                                                                   // 6089
                                                                                                                       // 6090
			// If the parameter 'old' is set, the current call will be followed                                                 // 6091
			// by another call, therefore do not do any animations this time                                                    // 6092
			if (!old && gridLine && gridLinePath) {                                                                             // 6093
				gridLine[tick.isNew ? 'attr' : 'animate']({                                                                        // 6094
					d: gridLinePath,                                                                                                  // 6095
					opacity: opacity                                                                                                  // 6096
				});                                                                                                                // 6097
			}                                                                                                                   // 6098
		}                                                                                                                    // 6099
                                                                                                                       // 6100
		// create the tick mark                                                                                              // 6101
		if (tickWidth && tickLength) {                                                                                       // 6102
                                                                                                                       // 6103
			// negate the length                                                                                                // 6104
			if (tickPosition === 'inside') {                                                                                    // 6105
				tickLength = -tickLength;                                                                                          // 6106
			}                                                                                                                   // 6107
			if (axis.opposite) {                                                                                                // 6108
				tickLength = -tickLength;                                                                                          // 6109
			}                                                                                                                   // 6110
                                                                                                                       // 6111
			markPath = tick.getMarkPath(x, y, tickLength, tickWidth * reverseCrisp, horiz, renderer);                           // 6112
			if (mark) { // updating                                                                                             // 6113
				mark.animate({                                                                                                     // 6114
					d: markPath,                                                                                                      // 6115
					opacity: opacity                                                                                                  // 6116
				});                                                                                                                // 6117
			} else { // first time                                                                                              // 6118
				tick.mark = renderer.path(                                                                                         // 6119
					markPath                                                                                                          // 6120
				).attr({                                                                                                           // 6121
					stroke: tickColor,                                                                                                // 6122
					'stroke-width': tickWidth,                                                                                        // 6123
					opacity: opacity                                                                                                  // 6124
				}).add(axis.axisGroup);                                                                                            // 6125
			}                                                                                                                   // 6126
		}                                                                                                                    // 6127
                                                                                                                       // 6128
		// the label is created on init - now move it into place                                                             // 6129
		if (label && !isNaN(x)) {                                                                                            // 6130
			label.xy = xy = tick.getLabelPosition(x, y, label, horiz, labelOptions, tickmarkOffset, index, step);               // 6131
                                                                                                                       // 6132
			// Apply show first and show last. If the tick is both first and last, it is                                        // 6133
			// a single centered tick, in which case we show the label anyway (#2100).                                          // 6134
			if ((tick.isFirst && !tick.isLast && !pick(options.showFirstLabel, 1)) ||                                           // 6135
					(tick.isLast && !tick.isFirst && !pick(options.showLastLabel, 1))) {                                              // 6136
				show = false;                                                                                                      // 6137
                                                                                                                       // 6138
			// Handle label overflow and show or hide accordingly                                                               // 6139
			} else if (horiz && !axis.isRadial && !labelOptions.step && !labelOptions.rotation && !old && opacity !== 0) {      // 6140
				tick.handleOverflow(xy);                                                                                           // 6141
			}                                                                                                                   // 6142
                                                                                                                       // 6143
			// apply step                                                                                                       // 6144
			if (step && index % step) {                                                                                         // 6145
				// show those indices dividable by step                                                                            // 6146
				show = false;                                                                                                      // 6147
			}                                                                                                                   // 6148
                                                                                                                       // 6149
			// Set the new position, and show or hide                                                                           // 6150
			if (show && !isNaN(xy.y)) {                                                                                         // 6151
				xy.opacity = opacity;                                                                                              // 6152
				label[tick.isNew ? 'attr' : 'animate'](xy);                                                                        // 6153
				tick.isNew = false;                                                                                                // 6154
			} else {                                                                                                            // 6155
				label.attr('y', -9999); // #1338                                                                                   // 6156
			}                                                                                                                   // 6157
		}                                                                                                                    // 6158
	},                                                                                                                    // 6159
                                                                                                                       // 6160
	/**                                                                                                                   // 6161
	 * Destructor for the tick prototype                                                                                  // 6162
	 */                                                                                                                   // 6163
	destroy: function () {                                                                                                // 6164
		destroyObjectProperties(this, this.axis);                                                                            // 6165
	}                                                                                                                     // 6166
};                                                                                                                     // 6167
                                                                                                                       // 6168
/**                                                                                                                    // 6169
 * The object wrapper for plot lines and plot bands                                                                    // 6170
 * @param {Object} options                                                                                             // 6171
 */                                                                                                                    // 6172
Highcharts.PlotLineOrBand = function (axis, options) {                                                                 // 6173
	this.axis = axis;                                                                                                     // 6174
                                                                                                                       // 6175
	if (options) {                                                                                                        // 6176
		this.options = options;                                                                                              // 6177
		this.id = options.id;                                                                                                // 6178
	}                                                                                                                     // 6179
};                                                                                                                     // 6180
                                                                                                                       // 6181
Highcharts.PlotLineOrBand.prototype = {                                                                                // 6182
	                                                                                                                      // 6183
	/**                                                                                                                   // 6184
	 * Render the plot line or plot band. If it is already existing,                                                      // 6185
	 * move it.                                                                                                           // 6186
	 */                                                                                                                   // 6187
	render: function () {                                                                                                 // 6188
		var plotLine = this,                                                                                                 // 6189
			axis = plotLine.axis,                                                                                               // 6190
			horiz = axis.horiz,                                                                                                 // 6191
			options = plotLine.options,                                                                                         // 6192
			optionsLabel = options.label,                                                                                       // 6193
			label = plotLine.label,                                                                                             // 6194
			width = options.width,                                                                                              // 6195
			to = options.to,                                                                                                    // 6196
			from = options.from,                                                                                                // 6197
			isBand = defined(from) && defined(to),                                                                              // 6198
			value = options.value,                                                                                              // 6199
			dashStyle = options.dashStyle,                                                                                      // 6200
			svgElem = plotLine.svgElem,                                                                                         // 6201
			path = [],                                                                                                          // 6202
			addEvent,                                                                                                           // 6203
			eventType,                                                                                                          // 6204
			xs,                                                                                                                 // 6205
			ys,                                                                                                                 // 6206
			x,                                                                                                                  // 6207
			y,                                                                                                                  // 6208
			color = options.color,                                                                                              // 6209
			zIndex = options.zIndex,                                                                                            // 6210
			events = options.events,                                                                                            // 6211
			attribs = {},                                                                                                       // 6212
			renderer = axis.chart.renderer;                                                                                     // 6213
                                                                                                                       // 6214
		// logarithmic conversion                                                                                            // 6215
		if (axis.isLog) {                                                                                                    // 6216
			from = log2lin(from);                                                                                               // 6217
			to = log2lin(to);                                                                                                   // 6218
			value = log2lin(value);                                                                                             // 6219
		}                                                                                                                    // 6220
                                                                                                                       // 6221
		// plot line                                                                                                         // 6222
		if (width) {                                                                                                         // 6223
			path = axis.getPlotLinePath(value, width);                                                                          // 6224
			attribs = {                                                                                                         // 6225
				stroke: color,                                                                                                     // 6226
				'stroke-width': width                                                                                              // 6227
			};                                                                                                                  // 6228
			if (dashStyle) {                                                                                                    // 6229
				attribs.dashstyle = dashStyle;                                                                                     // 6230
			}                                                                                                                   // 6231
		} else if (isBand) { // plot band                                                                                    // 6232
                                                                                                                       // 6233
			path = axis.getPlotBandPath(from, to, options);                                                                     // 6234
			if (color) {                                                                                                        // 6235
				attribs.fill = color;                                                                                              // 6236
			}                                                                                                                   // 6237
			if (options.borderWidth) {                                                                                          // 6238
				attribs.stroke = options.borderColor;                                                                              // 6239
				attribs['stroke-width'] = options.borderWidth;                                                                     // 6240
			}                                                                                                                   // 6241
		} else {                                                                                                             // 6242
			return;                                                                                                             // 6243
		}                                                                                                                    // 6244
		// zIndex                                                                                                            // 6245
		if (defined(zIndex)) {                                                                                               // 6246
			attribs.zIndex = zIndex;                                                                                            // 6247
		}                                                                                                                    // 6248
                                                                                                                       // 6249
		// common for lines and bands                                                                                        // 6250
		if (svgElem) {                                                                                                       // 6251
			if (path) {                                                                                                         // 6252
				svgElem.animate({                                                                                                  // 6253
					d: path                                                                                                           // 6254
				}, null, svgElem.onGetPath);                                                                                       // 6255
			} else {                                                                                                            // 6256
				svgElem.hide();                                                                                                    // 6257
				svgElem.onGetPath = function () {                                                                                  // 6258
					svgElem.show();                                                                                                   // 6259
				};                                                                                                                 // 6260
				if (label) {                                                                                                       // 6261
					plotLine.label = label = label.destroy();                                                                         // 6262
				}                                                                                                                  // 6263
			}                                                                                                                   // 6264
		} else if (path && path.length) {                                                                                    // 6265
			plotLine.svgElem = svgElem = renderer.path(path)                                                                    // 6266
				.attr(attribs).add();                                                                                              // 6267
                                                                                                                       // 6268
			// events                                                                                                           // 6269
			if (events) {                                                                                                       // 6270
				addEvent = function (eventType) {                                                                                  // 6271
					svgElem.on(eventType, function (e) {                                                                              // 6272
						events[eventType].apply(plotLine, [e]);                                                                          // 6273
					});                                                                                                               // 6274
				};                                                                                                                 // 6275
				for (eventType in events) {                                                                                        // 6276
					addEvent(eventType);                                                                                              // 6277
				}                                                                                                                  // 6278
			}                                                                                                                   // 6279
		}                                                                                                                    // 6280
                                                                                                                       // 6281
		// the plot band/line label                                                                                          // 6282
		if (optionsLabel && defined(optionsLabel.text) && path && path.length && axis.width > 0 && axis.height > 0) {        // 6283
			// apply defaults                                                                                                   // 6284
			optionsLabel = merge({                                                                                              // 6285
				align: horiz && isBand && 'center',                                                                                // 6286
				x: horiz ? !isBand && 4 : 10,                                                                                      // 6287
				verticalAlign : !horiz && isBand && 'middle',                                                                      // 6288
				y: horiz ? isBand ? 16 : 10 : isBand ? 6 : -4,                                                                     // 6289
				rotation: horiz && !isBand && 90                                                                                   // 6290
			}, optionsLabel);                                                                                                   // 6291
                                                                                                                       // 6292
			// add the SVG element                                                                                              // 6293
			if (!label) {                                                                                                       // 6294
				attribs = {                                                                                                        // 6295
					align: optionsLabel.textAlign || optionsLabel.align,                                                              // 6296
					rotation: optionsLabel.rotation                                                                                   // 6297
				};                                                                                                                 // 6298
				if (defined(zIndex)) {                                                                                             // 6299
					attribs.zIndex = zIndex;                                                                                          // 6300
				}                                                                                                                  // 6301
				plotLine.label = label = renderer.text(                                                                            // 6302
						optionsLabel.text,                                                                                               // 6303
						0,                                                                                                               // 6304
						0,                                                                                                               // 6305
						optionsLabel.useHTML                                                                                             // 6306
					)                                                                                                                 // 6307
					.attr(attribs)                                                                                                    // 6308
					.css(optionsLabel.style)                                                                                          // 6309
					.add();                                                                                                           // 6310
			}                                                                                                                   // 6311
                                                                                                                       // 6312
			// get the bounding box and align the label                                                                         // 6313
			// #3000 changed to better handle choice between plotband or plotline                                               // 6314
			xs = [path[1], path[4], (isBand ? path[6] : path[1])];                                                              // 6315
			ys = [path[2], path[5], (isBand ? path[7] : path[2])];                                                              // 6316
			x = arrayMin(xs);                                                                                                   // 6317
			y = arrayMin(ys);                                                                                                   // 6318
                                                                                                                       // 6319
			label.align(optionsLabel, false, {                                                                                  // 6320
				x: x,                                                                                                              // 6321
				y: y,                                                                                                              // 6322
				width: arrayMax(xs) - x,                                                                                           // 6323
				height: arrayMax(ys) - y                                                                                           // 6324
			});                                                                                                                 // 6325
			label.show();                                                                                                       // 6326
                                                                                                                       // 6327
		} else if (label) { // move out of sight                                                                             // 6328
			label.hide();                                                                                                       // 6329
		}                                                                                                                    // 6330
                                                                                                                       // 6331
		// chainable                                                                                                         // 6332
		return plotLine;                                                                                                     // 6333
	},                                                                                                                    // 6334
                                                                                                                       // 6335
	/**                                                                                                                   // 6336
	 * Remove the plot line or band                                                                                       // 6337
	 */                                                                                                                   // 6338
	destroy: function () {                                                                                                // 6339
		// remove it from the lookup                                                                                         // 6340
		erase(this.axis.plotLinesAndBands, this);                                                                            // 6341
		                                                                                                                     // 6342
		delete this.axis;                                                                                                    // 6343
		destroyObjectProperties(this);                                                                                       // 6344
	}                                                                                                                     // 6345
};                                                                                                                     // 6346
                                                                                                                       // 6347
/**                                                                                                                    // 6348
 * Object with members for extending the Axis prototype                                                                // 6349
 */                                                                                                                    // 6350
                                                                                                                       // 6351
AxisPlotLineOrBandExtension = {                                                                                        // 6352
                                                                                                                       // 6353
	/**                                                                                                                   // 6354
	 * Create the path for a plot band                                                                                    // 6355
	 */                                                                                                                   // 6356
	getPlotBandPath: function (from, to) {                                                                                // 6357
		var toPath = this.getPlotLinePath(to, null, null, true),                                                             // 6358
			path = this.getPlotLinePath(from, null, null, true);                                                                // 6359
                                                                                                                       // 6360
		if (path && toPath && path.toString() !== toPath.toString()) { // #3836                                              // 6361
			path.push(                                                                                                          // 6362
				toPath[4],                                                                                                         // 6363
				toPath[5],                                                                                                         // 6364
				toPath[1],                                                                                                         // 6365
				toPath[2]                                                                                                          // 6366
			);                                                                                                                  // 6367
		} else { // outside the axis area                                                                                    // 6368
			path = null;                                                                                                        // 6369
		}                                                                                                                    // 6370
		                                                                                                                     // 6371
		return path;                                                                                                         // 6372
	},                                                                                                                    // 6373
                                                                                                                       // 6374
	addPlotBand: function (options) {                                                                                     // 6375
		return this.addPlotBandOrLine(options, 'plotBands');                                                                 // 6376
	},                                                                                                                    // 6377
	                                                                                                                      // 6378
	addPlotLine: function (options) {                                                                                     // 6379
		return this.addPlotBandOrLine(options, 'plotLines');                                                                 // 6380
	},                                                                                                                    // 6381
                                                                                                                       // 6382
	/**                                                                                                                   // 6383
	 * Add a plot band or plot line after render time                                                                     // 6384
	 *                                                                                                                    // 6385
	 * @param options {Object} The plotBand or plotLine configuration object                                              // 6386
	 */                                                                                                                   // 6387
	addPlotBandOrLine: function (options, coll) {                                                                         // 6388
		var obj = new Highcharts.PlotLineOrBand(this, options).render(),                                                     // 6389
			userOptions = this.userOptions;                                                                                     // 6390
                                                                                                                       // 6391
		if (obj) { // #2189                                                                                                  // 6392
			// Add it to the user options for exporting and Axis.update                                                         // 6393
			if (coll) {                                                                                                         // 6394
				userOptions[coll] = userOptions[coll] || [];                                                                       // 6395
				userOptions[coll].push(options);                                                                                   // 6396
			}                                                                                                                   // 6397
			this.plotLinesAndBands.push(obj);                                                                                   // 6398
		}                                                                                                                    // 6399
		                                                                                                                     // 6400
		return obj;                                                                                                          // 6401
	},                                                                                                                    // 6402
                                                                                                                       // 6403
	/**                                                                                                                   // 6404
	 * Remove a plot band or plot line from the chart by id                                                               // 6405
	 * @param {Object} id                                                                                                 // 6406
	 */                                                                                                                   // 6407
	removePlotBandOrLine: function (id) {                                                                                 // 6408
		var plotLinesAndBands = this.plotLinesAndBands,                                                                      // 6409
			options = this.options,                                                                                             // 6410
			userOptions = this.userOptions,                                                                                     // 6411
			i = plotLinesAndBands.length;                                                                                       // 6412
		while (i--) {                                                                                                        // 6413
			if (plotLinesAndBands[i].id === id) {                                                                               // 6414
				plotLinesAndBands[i].destroy();                                                                                    // 6415
			}                                                                                                                   // 6416
		}                                                                                                                    // 6417
		each([options.plotLines || [], userOptions.plotLines || [], options.plotBands || [], userOptions.plotBands || []], function (arr) {
			i = arr.length;                                                                                                     // 6419
			while (i--) {                                                                                                       // 6420
				if (arr[i].id === id) {                                                                                            // 6421
					erase(arr, arr[i]);                                                                                               // 6422
				}                                                                                                                  // 6423
			}                                                                                                                   // 6424
		});                                                                                                                  // 6425
	}                                                                                                                     // 6426
};                                                                                                                     // 6427
                                                                                                                       // 6428
/**                                                                                                                    // 6429
 * Create a new axis object                                                                                            // 6430
 * @param {Object} chart                                                                                               // 6431
 * @param {Object} options                                                                                             // 6432
 */                                                                                                                    // 6433
var Axis = Highcharts.Axis = function () {                                                                             // 6434
	this.init.apply(this, arguments);                                                                                     // 6435
};                                                                                                                     // 6436
                                                                                                                       // 6437
Axis.prototype = {                                                                                                     // 6438
                                                                                                                       // 6439
	/**                                                                                                                   // 6440
	 * Default options for the X axis - the Y axis has extended defaults                                                  // 6441
	 */                                                                                                                   // 6442
	defaultOptions: {                                                                                                     // 6443
		// allowDecimals: null,                                                                                              // 6444
		// alternateGridColor: null,                                                                                         // 6445
		// categories: [],                                                                                                   // 6446
		dateTimeLabelFormats: {                                                                                              // 6447
			millisecond: '%H:%M:%S.%L',                                                                                         // 6448
			second: '%H:%M:%S',                                                                                                 // 6449
			minute: '%H:%M',                                                                                                    // 6450
			hour: '%H:%M',                                                                                                      // 6451
			day: '%e. %b',                                                                                                      // 6452
			week: '%e. %b',                                                                                                     // 6453
			month: '%b \'%y',                                                                                                   // 6454
			year: '%Y'                                                                                                          // 6455
		},                                                                                                                   // 6456
		endOnTick: false,                                                                                                    // 6457
		gridLineColor: '#D8D8D8',                                                                                            // 6458
		// gridLineDashStyle: 'solid',                                                                                       // 6459
		// gridLineWidth: 0,                                                                                                 // 6460
		// reversed: false,                                                                                                  // 6461
                                                                                                                       // 6462
		labels: {                                                                                                            // 6463
			enabled: true,                                                                                                      // 6464
			// rotation: 0,                                                                                                     // 6465
			// align: 'center',                                                                                                 // 6466
			// step: null,                                                                                                      // 6467
			style: {                                                                                                            // 6468
				color: '#606060',                                                                                                  // 6469
				cursor: 'default',                                                                                                 // 6470
				fontSize: '11px'                                                                                                   // 6471
			},                                                                                                                  // 6472
			x: 0,                                                                                                               // 6473
			y: 15                                                                                                               // 6474
			/*formatter: function () {                                                                                          // 6475
				return this.value;                                                                                                 // 6476
			},*/                                                                                                                // 6477
		},                                                                                                                   // 6478
		lineColor: '#C0D0E0',                                                                                                // 6479
		lineWidth: 1,                                                                                                        // 6480
		//linkedTo: null,                                                                                                    // 6481
		//max: undefined,                                                                                                    // 6482
		//min: undefined,                                                                                                    // 6483
		minPadding: 0.01,                                                                                                    // 6484
		maxPadding: 0.01,                                                                                                    // 6485
		//minRange: null,                                                                                                    // 6486
		minorGridLineColor: '#E0E0E0',                                                                                       // 6487
		// minorGridLineDashStyle: null,                                                                                     // 6488
		minorGridLineWidth: 1,                                                                                               // 6489
		minorTickColor: '#A0A0A0',                                                                                           // 6490
		//minorTickInterval: null,                                                                                           // 6491
		minorTickLength: 2,                                                                                                  // 6492
		minorTickPosition: 'outside', // inside or outside                                                                   // 6493
		//minorTickWidth: 0,                                                                                                 // 6494
		//opposite: false,                                                                                                   // 6495
		//offset: 0,                                                                                                         // 6496
		//plotBands: [{                                                                                                      // 6497
		//	events: {},                                                                                                       // 6498
		//	zIndex: 1,                                                                                                        // 6499
		//	labels: { align, x, verticalAlign, y, style, rotation, textAlign }                                                // 6500
		//}],                                                                                                                // 6501
		//plotLines: [{                                                                                                      // 6502
		//	events: {}                                                                                                        // 6503
		//  dashStyle: {}                                                                                                    // 6504
		//	zIndex:                                                                                                           // 6505
		//	labels: { align, x, verticalAlign, y, style, rotation, textAlign }                                                // 6506
		//}],                                                                                                                // 6507
		//reversed: false,                                                                                                   // 6508
		// showFirstLabel: true,                                                                                             // 6509
		// showLastLabel: true,                                                                                              // 6510
		startOfWeek: 1,                                                                                                      // 6511
		startOnTick: false,                                                                                                  // 6512
		tickColor: '#C0D0E0',                                                                                                // 6513
		//tickInterval: null,                                                                                                // 6514
		tickLength: 10,                                                                                                      // 6515
		tickmarkPlacement: 'between', // on or between                                                                       // 6516
		tickPixelInterval: 100,                                                                                              // 6517
		tickPosition: 'outside',                                                                                             // 6518
		tickWidth: 1,                                                                                                        // 6519
		title: {                                                                                                             // 6520
			//text: null,                                                                                                       // 6521
			align: 'middle', // low, middle or high                                                                             // 6522
			//margin: 0 for horizontal, 10 for vertical axes,                                                                   // 6523
			//rotation: 0,                                                                                                      // 6524
			//side: 'outside',                                                                                                  // 6525
			style: {                                                                                                            // 6526
				color: '#707070'                                                                                                   // 6527
			}                                                                                                                   // 6528
			//x: 0,                                                                                                             // 6529
			//y: 0                                                                                                              // 6530
		},                                                                                                                   // 6531
		type: 'linear' // linear, logarithmic or datetime                                                                    // 6532
	},                                                                                                                    // 6533
                                                                                                                       // 6534
	/**                                                                                                                   // 6535
	 * This options set extends the defaultOptions for Y axes                                                             // 6536
	 */                                                                                                                   // 6537
	defaultYAxisOptions: {                                                                                                // 6538
		endOnTick: true,                                                                                                     // 6539
		gridLineWidth: 1,                                                                                                    // 6540
		tickPixelInterval: 72,                                                                                               // 6541
		showLastLabel: true,                                                                                                 // 6542
		labels: {                                                                                                            // 6543
			x: -8,                                                                                                              // 6544
			y: 3                                                                                                                // 6545
		},                                                                                                                   // 6546
		lineWidth: 0,                                                                                                        // 6547
		maxPadding: 0.05,                                                                                                    // 6548
		minPadding: 0.05,                                                                                                    // 6549
		startOnTick: true,                                                                                                   // 6550
		tickWidth: 0,                                                                                                        // 6551
		title: {                                                                                                             // 6552
			rotation: 270,                                                                                                      // 6553
			text: 'Values'                                                                                                      // 6554
		},                                                                                                                   // 6555
		stackLabels: {                                                                                                       // 6556
			enabled: false,                                                                                                     // 6557
			//align: dynamic,                                                                                                   // 6558
			//y: dynamic,                                                                                                       // 6559
			//x: dynamic,                                                                                                       // 6560
			//verticalAlign: dynamic,                                                                                           // 6561
			//textAlign: dynamic,                                                                                               // 6562
			//rotation: 0,                                                                                                      // 6563
			formatter: function () {                                                                                            // 6564
				return Highcharts.numberFormat(this.total, -1);                                                                    // 6565
			},                                                                                                                  // 6566
			style: merge(defaultPlotOptions.line.dataLabels.style, { color: '#000000' })                                        // 6567
		}                                                                                                                    // 6568
	},                                                                                                                    // 6569
                                                                                                                       // 6570
	/**                                                                                                                   // 6571
	 * These options extend the defaultOptions for left axes                                                              // 6572
	 */                                                                                                                   // 6573
	defaultLeftAxisOptions: {                                                                                             // 6574
		labels: {                                                                                                            // 6575
			x: -15,                                                                                                             // 6576
			y: null                                                                                                             // 6577
		},                                                                                                                   // 6578
		title: {                                                                                                             // 6579
			rotation: 270                                                                                                       // 6580
		}                                                                                                                    // 6581
	},                                                                                                                    // 6582
                                                                                                                       // 6583
	/**                                                                                                                   // 6584
	 * These options extend the defaultOptions for right axes                                                             // 6585
	 */                                                                                                                   // 6586
	defaultRightAxisOptions: {                                                                                            // 6587
		labels: {                                                                                                            // 6588
			x: 15,                                                                                                              // 6589
			y: null                                                                                                             // 6590
		},                                                                                                                   // 6591
		title: {                                                                                                             // 6592
			rotation: 90                                                                                                        // 6593
		}                                                                                                                    // 6594
	},                                                                                                                    // 6595
                                                                                                                       // 6596
	/**                                                                                                                   // 6597
	 * These options extend the defaultOptions for bottom axes                                                            // 6598
	 */                                                                                                                   // 6599
	defaultBottomAxisOptions: {                                                                                           // 6600
		labels: {                                                                                                            // 6601
			autoRotation: [-45],                                                                                                // 6602
			x: 0,                                                                                                               // 6603
			y: null // based on font size                                                                                       // 6604
			// overflow: undefined,                                                                                             // 6605
			// staggerLines: null                                                                                               // 6606
		},                                                                                                                   // 6607
		title: {                                                                                                             // 6608
			rotation: 0                                                                                                         // 6609
		}                                                                                                                    // 6610
	},                                                                                                                    // 6611
	/**                                                                                                                   // 6612
	 * These options extend the defaultOptions for top axes                                                               // 6613
	 */                                                                                                                   // 6614
	defaultTopAxisOptions: {                                                                                              // 6615
		labels: {                                                                                                            // 6616
			autoRotation: [-45],                                                                                                // 6617
			x: 0,                                                                                                               // 6618
			y: -15                                                                                                              // 6619
			// overflow: undefined                                                                                              // 6620
			// staggerLines: null                                                                                               // 6621
		},                                                                                                                   // 6622
		title: {                                                                                                             // 6623
			rotation: 0                                                                                                         // 6624
		}                                                                                                                    // 6625
	},                                                                                                                    // 6626
                                                                                                                       // 6627
	/**                                                                                                                   // 6628
	 * Initialize the axis                                                                                                // 6629
	 */                                                                                                                   // 6630
	init: function (chart, userOptions) {                                                                                 // 6631
                                                                                                                       // 6632
                                                                                                                       // 6633
		var isXAxis = userOptions.isX,                                                                                       // 6634
			axis = this;                                                                                                        // 6635
                                                                                                                       // 6636
		// Flag, is the axis horizontal                                                                                      // 6637
		axis.horiz = chart.inverted ? !isXAxis : isXAxis;                                                                    // 6638
                                                                                                                       // 6639
		// Flag, isXAxis                                                                                                     // 6640
		axis.isXAxis = isXAxis;                                                                                              // 6641
		axis.coll = isXAxis ? 'xAxis' : 'yAxis';                                                                             // 6642
                                                                                                                       // 6643
		axis.opposite = userOptions.opposite; // needed in setOptions                                                        // 6644
		axis.side = userOptions.side || (axis.horiz ?                                                                        // 6645
				(axis.opposite ? 0 : 2) : // top : bottom                                                                          // 6646
				(axis.opposite ? 1 : 3));  // right : left                                                                         // 6647
                                                                                                                       // 6648
		axis.setOptions(userOptions);                                                                                        // 6649
                                                                                                                       // 6650
                                                                                                                       // 6651
		var options = this.options,                                                                                          // 6652
			type = options.type,                                                                                                // 6653
			isDatetimeAxis = type === 'datetime';                                                                               // 6654
                                                                                                                       // 6655
		axis.labelFormatter = options.labels.formatter || axis.defaultLabelFormatter; // can be overwritten by dynamic format
                                                                                                                       // 6657
                                                                                                                       // 6658
		// Flag, stagger lines or not                                                                                        // 6659
		axis.userOptions = userOptions;                                                                                      // 6660
                                                                                                                       // 6661
		//axis.axisTitleMargin = UNDEFINED,// = options.title.margin,                                                        // 6662
		axis.minPixelPadding = 0;                                                                                            // 6663
		//axis.ignoreMinPadding = UNDEFINED; // can be set to true by a column or bar series                                 // 6664
		//axis.ignoreMaxPadding = UNDEFINED;                                                                                 // 6665
                                                                                                                       // 6666
		axis.chart = chart;                                                                                                  // 6667
		axis.reversed = options.reversed;                                                                                    // 6668
		axis.zoomEnabled = options.zoomEnabled !== false;                                                                    // 6669
                                                                                                                       // 6670
		// Initial categories                                                                                                // 6671
		axis.categories = options.categories || type === 'category';                                                         // 6672
		axis.names = axis.names || []; // Preserve on update (#3830)                                                         // 6673
                                                                                                                       // 6674
		// Elements                                                                                                          // 6675
		//axis.axisGroup = UNDEFINED;                                                                                        // 6676
		//axis.gridGroup = UNDEFINED;                                                                                        // 6677
		//axis.axisTitle = UNDEFINED;                                                                                        // 6678
		//axis.axisLine = UNDEFINED;                                                                                         // 6679
                                                                                                                       // 6680
		// Shorthand types                                                                                                   // 6681
		axis.isLog = type === 'logarithmic';                                                                                 // 6682
		axis.isDatetimeAxis = isDatetimeAxis;                                                                                // 6683
                                                                                                                       // 6684
		// Flag, if axis is linked to another axis                                                                           // 6685
		axis.isLinked = defined(options.linkedTo);                                                                           // 6686
		// Linked axis.                                                                                                      // 6687
		//axis.linkedParent = UNDEFINED;                                                                                     // 6688
                                                                                                                       // 6689
		// Tick positions                                                                                                    // 6690
		//axis.tickPositions = UNDEFINED; // array containing predefined positions                                           // 6691
		// Tick intervals                                                                                                    // 6692
		//axis.tickInterval = UNDEFINED;                                                                                     // 6693
		//axis.minorTickInterval = UNDEFINED;                                                                                // 6694
                                                                                                                       // 6695
		                                                                                                                     // 6696
		// Major ticks                                                                                                       // 6697
		axis.ticks = {};                                                                                                     // 6698
		axis.labelEdge = [];                                                                                                 // 6699
		// Minor ticks                                                                                                       // 6700
		axis.minorTicks = {};                                                                                                // 6701
                                                                                                                       // 6702
		// List of plotLines/Bands                                                                                           // 6703
		axis.plotLinesAndBands = [];                                                                                         // 6704
                                                                                                                       // 6705
		// Alternate bands                                                                                                   // 6706
		axis.alternateBands = {};                                                                                            // 6707
                                                                                                                       // 6708
		// Axis metrics                                                                                                      // 6709
		//axis.left = UNDEFINED;                                                                                             // 6710
		//axis.top = UNDEFINED;                                                                                              // 6711
		//axis.width = UNDEFINED;                                                                                            // 6712
		//axis.height = UNDEFINED;                                                                                           // 6713
		//axis.bottom = UNDEFINED;                                                                                           // 6714
		//axis.right = UNDEFINED;                                                                                            // 6715
		//axis.transA = UNDEFINED;                                                                                           // 6716
		//axis.transB = UNDEFINED;                                                                                           // 6717
		//axis.oldTransA = UNDEFINED;                                                                                        // 6718
		axis.len = 0;                                                                                                        // 6719
		//axis.oldMin = UNDEFINED;                                                                                           // 6720
		//axis.oldMax = UNDEFINED;                                                                                           // 6721
		//axis.oldUserMin = UNDEFINED;                                                                                       // 6722
		//axis.oldUserMax = UNDEFINED;                                                                                       // 6723
		//axis.oldAxisLength = UNDEFINED;                                                                                    // 6724
		axis.minRange = axis.userMinRange = options.minRange || options.maxZoom;                                             // 6725
		axis.range = options.range;                                                                                          // 6726
		axis.offset = options.offset || 0;                                                                                   // 6727
                                                                                                                       // 6728
                                                                                                                       // 6729
		// Dictionary for stacks                                                                                             // 6730
		axis.stacks = {};                                                                                                    // 6731
		axis.oldStacks = {};                                                                                                 // 6732
		                                                                                                                     // 6733
		// Min and max in the data                                                                                           // 6734
		//axis.dataMin = UNDEFINED,                                                                                          // 6735
		//axis.dataMax = UNDEFINED,                                                                                          // 6736
                                                                                                                       // 6737
		// The axis range                                                                                                    // 6738
		axis.max = null;                                                                                                     // 6739
		axis.min = null;                                                                                                     // 6740
                                                                                                                       // 6741
		// User set min and max                                                                                              // 6742
		//axis.userMin = UNDEFINED,                                                                                          // 6743
		//axis.userMax = UNDEFINED,                                                                                          // 6744
                                                                                                                       // 6745
		// Crosshair options                                                                                                 // 6746
		axis.crosshair = pick(options.crosshair, splat(chart.options.tooltip.crosshairs)[isXAxis ? 0 : 1], false);           // 6747
		// Run Axis                                                                                                          // 6748
                                                                                                                       // 6749
		var eventType,                                                                                                       // 6750
			events = axis.options.events;                                                                                       // 6751
                                                                                                                       // 6752
		// Register                                                                                                          // 6753
		if (inArray(axis, chart.axes) === -1) { // don't add it again on Axis.update()                                       // 6754
			if (isXAxis && !this.isColorAxis) { // #2713                                                                        // 6755
				chart.axes.splice(chart.xAxis.length, 0, axis);                                                                    // 6756
			} else {                                                                                                            // 6757
				chart.axes.push(axis);                                                                                             // 6758
			}                                                                                                                   // 6759
                                                                                                                       // 6760
			chart[axis.coll].push(axis);                                                                                        // 6761
		}                                                                                                                    // 6762
                                                                                                                       // 6763
		axis.series = axis.series || []; // populated by Series                                                              // 6764
                                                                                                                       // 6765
		// inverted charts have reversed xAxes as default                                                                    // 6766
		if (chart.inverted && isXAxis && axis.reversed === UNDEFINED) {                                                      // 6767
			axis.reversed = true;                                                                                               // 6768
		}                                                                                                                    // 6769
                                                                                                                       // 6770
		axis.removePlotBand = axis.removePlotBandOrLine;                                                                     // 6771
		axis.removePlotLine = axis.removePlotBandOrLine;                                                                     // 6772
                                                                                                                       // 6773
                                                                                                                       // 6774
		// register event listeners                                                                                          // 6775
		for (eventType in events) {                                                                                          // 6776
			addEvent(axis, eventType, events[eventType]);                                                                       // 6777
		}                                                                                                                    // 6778
                                                                                                                       // 6779
		// extend logarithmic axis                                                                                           // 6780
		if (axis.isLog) {                                                                                                    // 6781
			axis.val2lin = log2lin;                                                                                             // 6782
			axis.lin2val = lin2log;                                                                                             // 6783
		}                                                                                                                    // 6784
	},                                                                                                                    // 6785
                                                                                                                       // 6786
	/**                                                                                                                   // 6787
	 * Merge and set options                                                                                              // 6788
	 */                                                                                                                   // 6789
	setOptions: function (userOptions) {                                                                                  // 6790
		this.options = merge(                                                                                                // 6791
			this.defaultOptions,                                                                                                // 6792
			this.isXAxis ? {} : this.defaultYAxisOptions,                                                                       // 6793
			[this.defaultTopAxisOptions, this.defaultRightAxisOptions,                                                          // 6794
				this.defaultBottomAxisOptions, this.defaultLeftAxisOptions][this.side],                                            // 6795
			merge(                                                                                                              // 6796
				defaultOptions[this.coll], // if set in setOptions (#1053)                                                         // 6797
				userOptions                                                                                                        // 6798
			)                                                                                                                   // 6799
		);                                                                                                                   // 6800
	},                                                                                                                    // 6801
                                                                                                                       // 6802
	/**                                                                                                                   // 6803
	 * The default label formatter. The context is a special config object for the label.                                 // 6804
	 */                                                                                                                   // 6805
	defaultLabelFormatter: function () {                                                                                  // 6806
		var axis = this.axis,                                                                                                // 6807
			value = this.value,                                                                                                 // 6808
			categories = axis.categories,                                                                                       // 6809
			dateTimeLabelFormat = this.dateTimeLabelFormat,                                                                     // 6810
			numericSymbols = defaultOptions.lang.numericSymbols,                                                                // 6811
			i = numericSymbols && numericSymbols.length,                                                                        // 6812
			multi,                                                                                                              // 6813
			ret,                                                                                                                // 6814
			formatOption = axis.options.labels.format,                                                                          // 6815
                                                                                                                       // 6816
			// make sure the same symbol is added for all labels on a linear axis                                               // 6817
			numericSymbolDetector = axis.isLog ? value : axis.tickInterval;                                                     // 6818
                                                                                                                       // 6819
		if (formatOption) {                                                                                                  // 6820
			ret = format(formatOption, this);                                                                                   // 6821
                                                                                                                       // 6822
		} else if (categories) {                                                                                             // 6823
			ret = value;                                                                                                        // 6824
                                                                                                                       // 6825
		} else if (dateTimeLabelFormat) { // datetime axis                                                                   // 6826
			ret = dateFormat(dateTimeLabelFormat, value);                                                                       // 6827
                                                                                                                       // 6828
		} else if (i && numericSymbolDetector >= 1000) {                                                                     // 6829
			// Decide whether we should add a numeric symbol like k (thousands) or M (millions).                                // 6830
			// If we are to enable this in tooltip or other places as well, we can move this                                    // 6831
			// logic to the numberFormatter and enable it by a parameter.                                                       // 6832
			while (i-- && ret === UNDEFINED) {                                                                                  // 6833
				multi = Math.pow(1000, i + 1);                                                                                     // 6834
				if (numericSymbolDetector >= multi && (value * 10) % multi === 0 && numericSymbols[i] !== null) {                  // 6835
					ret = Highcharts.numberFormat(value / multi, -1) + numericSymbols[i];                                             // 6836
				}                                                                                                                  // 6837
			}                                                                                                                   // 6838
		}                                                                                                                    // 6839
                                                                                                                       // 6840
		if (ret === UNDEFINED) {                                                                                             // 6841
			if (mathAbs(value) >= 10000) { // add thousands separators                                                          // 6842
				ret = Highcharts.numberFormat(value, -1);                                                                          // 6843
                                                                                                                       // 6844
			} else { // small numbers                                                                                           // 6845
				ret = Highcharts.numberFormat(value, -1, UNDEFINED, ''); // #2466                                                  // 6846
			}                                                                                                                   // 6847
		}                                                                                                                    // 6848
                                                                                                                       // 6849
		return ret;                                                                                                          // 6850
	},                                                                                                                    // 6851
                                                                                                                       // 6852
	/**                                                                                                                   // 6853
	 * Get the minimum and maximum for the series of each axis                                                            // 6854
	 */                                                                                                                   // 6855
	getSeriesExtremes: function () {                                                                                      // 6856
		var axis = this,                                                                                                     // 6857
			chart = axis.chart;                                                                                                 // 6858
                                                                                                                       // 6859
		axis.hasVisibleSeries = false;                                                                                       // 6860
                                                                                                                       // 6861
		// Reset properties in case we're redrawing (#3353)                                                                  // 6862
		axis.dataMin = axis.dataMax = axis.ignoreMinPadding = axis.ignoreMaxPadding = null;                                  // 6863
		                                                                                                                     // 6864
		if (axis.buildStacks) {                                                                                              // 6865
			axis.buildStacks();                                                                                                 // 6866
		}                                                                                                                    // 6867
                                                                                                                       // 6868
		// loop through this axis' series                                                                                    // 6869
		each(axis.series, function (series) {                                                                                // 6870
                                                                                                                       // 6871
			if (series.visible || !chart.options.chart.ignoreHiddenSeries) {                                                    // 6872
                                                                                                                       // 6873
				var seriesOptions = series.options,                                                                                // 6874
					xData,                                                                                                            // 6875
					threshold = seriesOptions.threshold,                                                                              // 6876
					seriesDataMin,                                                                                                    // 6877
					seriesDataMax;                                                                                                    // 6878
                                                                                                                       // 6879
				axis.hasVisibleSeries = true;                                                                                      // 6880
                                                                                                                       // 6881
				// Validate threshold in logarithmic axes                                                                          // 6882
				if (axis.isLog && threshold <= 0) {                                                                                // 6883
					threshold = null;                                                                                                 // 6884
				}                                                                                                                  // 6885
                                                                                                                       // 6886
				// Get dataMin and dataMax for X axes                                                                              // 6887
				if (axis.isXAxis) {                                                                                                // 6888
					xData = series.xData;                                                                                             // 6889
					if (xData.length) {                                                                                               // 6890
						axis.dataMin = mathMin(pick(axis.dataMin, xData[0]), arrayMin(xData));                                           // 6891
						axis.dataMax = mathMax(pick(axis.dataMax, xData[0]), arrayMax(xData));                                           // 6892
					}                                                                                                                 // 6893
                                                                                                                       // 6894
				// Get dataMin and dataMax for Y axes, as well as handle stacking and processed data                               // 6895
				} else {                                                                                                           // 6896
                                                                                                                       // 6897
					// Get this particular series extremes                                                                            // 6898
					series.getExtremes();                                                                                             // 6899
					seriesDataMax = series.dataMax;                                                                                   // 6900
					seriesDataMin = series.dataMin;                                                                                   // 6901
                                                                                                                       // 6902
					// Get the dataMin and dataMax so far. If percentage is used, the min and max are                                 // 6903
					// always 0 and 100. If seriesDataMin and seriesDataMax is null, then series                                      // 6904
					// doesn't have active y data, we continue with nulls                                                             // 6905
					if (defined(seriesDataMin) && defined(seriesDataMax)) {                                                           // 6906
						axis.dataMin = mathMin(pick(axis.dataMin, seriesDataMin), seriesDataMin);                                        // 6907
						axis.dataMax = mathMax(pick(axis.dataMax, seriesDataMax), seriesDataMax);                                        // 6908
					}                                                                                                                 // 6909
                                                                                                                       // 6910
					// Adjust to threshold                                                                                            // 6911
					if (defined(threshold)) {                                                                                         // 6912
						if (axis.dataMin >= threshold) {                                                                                 // 6913
							axis.dataMin = threshold;                                                                                       // 6914
							axis.ignoreMinPadding = true;                                                                                   // 6915
						} else if (axis.dataMax < threshold) {                                                                           // 6916
							axis.dataMax = threshold;                                                                                       // 6917
							axis.ignoreMaxPadding = true;                                                                                   // 6918
						}                                                                                                                // 6919
					}                                                                                                                 // 6920
				}                                                                                                                  // 6921
			}                                                                                                                   // 6922
		});                                                                                                                  // 6923
	},                                                                                                                    // 6924
                                                                                                                       // 6925
	/**                                                                                                                   // 6926
	 * Translate from axis value to pixel position on the chart, or back                                                  // 6927
	 *                                                                                                                    // 6928
	 */                                                                                                                   // 6929
	translate: function (val, backwards, cvsCoord, old, handleLog, pointPlacement) {                                      // 6930
		var axis = this.linkedParent || this, // #1417                                                                       // 6931
			sign = 1,                                                                                                           // 6932
			cvsOffset = 0,                                                                                                      // 6933
			localA = old ? axis.oldTransA : axis.transA,                                                                        // 6934
			localMin = old ? axis.oldMin : axis.min,                                                                            // 6935
			returnValue,                                                                                                        // 6936
			minPixelPadding = axis.minPixelPadding,                                                                             // 6937
			doPostTranslate = (axis.doPostTranslate || (axis.isLog && handleLog)) && axis.lin2val;                              // 6938
                                                                                                                       // 6939
		if (!localA) {                                                                                                       // 6940
			localA = axis.transA;                                                                                               // 6941
		}                                                                                                                    // 6942
                                                                                                                       // 6943
		// In vertical axes, the canvas coordinates start from 0 at the top like in                                          // 6944
		// SVG.                                                                                                              // 6945
		if (cvsCoord) {                                                                                                      // 6946
			sign *= -1; // canvas coordinates inverts the value                                                                 // 6947
			cvsOffset = axis.len;                                                                                               // 6948
		}                                                                                                                    // 6949
                                                                                                                       // 6950
		// Handle reversed axis                                                                                              // 6951
		if (axis.reversed) {                                                                                                 // 6952
			sign *= -1;                                                                                                         // 6953
			cvsOffset -= sign * (axis.sector || axis.len);                                                                      // 6954
		}                                                                                                                    // 6955
                                                                                                                       // 6956
		// From pixels to value                                                                                              // 6957
		if (backwards) { // reverse translation                                                                              // 6958
                                                                                                                       // 6959
			val = val * sign + cvsOffset;                                                                                       // 6960
			val -= minPixelPadding;                                                                                             // 6961
			returnValue = val / localA + localMin; // from chart pixel to value                                                 // 6962
			if (doPostTranslate) { // log and ordinal axes                                                                      // 6963
				returnValue = axis.lin2val(returnValue);                                                                           // 6964
			}                                                                                                                   // 6965
                                                                                                                       // 6966
		// From value to pixels                                                                                              // 6967
		} else {                                                                                                             // 6968
			if (doPostTranslate) { // log and ordinal axes                                                                      // 6969
				val = axis.val2lin(val);                                                                                           // 6970
			}                                                                                                                   // 6971
			if (pointPlacement === 'between') {                                                                                 // 6972
				pointPlacement = 0.5;                                                                                              // 6973
			}                                                                                                                   // 6974
			returnValue = sign * (val - localMin) * localA + cvsOffset + (sign * minPixelPadding) +                             // 6975
				(isNumber(pointPlacement) ? localA * pointPlacement * axis.pointRange : 0);                                        // 6976
		}                                                                                                                    // 6977
                                                                                                                       // 6978
		return returnValue;                                                                                                  // 6979
	},                                                                                                                    // 6980
                                                                                                                       // 6981
	/**                                                                                                                   // 6982
	 * Utility method to translate an axis value to pixel position.                                                       // 6983
	 * @param {Number} value A value in terms of axis units                                                               // 6984
	 * @param {Boolean} paneCoordinates Whether to return the pixel coordinate relative to the chart                      // 6985
	 *        or just the axis/pane itself.                                                                               // 6986
	 */                                                                                                                   // 6987
	toPixels: function (value, paneCoordinates) {                                                                         // 6988
		return this.translate(value, false, !this.horiz, null, true) + (paneCoordinates ? 0 : this.pos);                     // 6989
	},                                                                                                                    // 6990
                                                                                                                       // 6991
	/*                                                                                                                    // 6992
	 * Utility method to translate a pixel position in to an axis value                                                   // 6993
	 * @param {Number} pixel The pixel value coordinate                                                                   // 6994
	 * @param {Boolean} paneCoordiantes Whether the input pixel is relative to the chart or just the                      // 6995
	 *        axis/pane itself.                                                                                           // 6996
	 */                                                                                                                   // 6997
	toValue: function (pixel, paneCoordinates) {                                                                          // 6998
		return this.translate(pixel - (paneCoordinates ? 0 : this.pos), true, !this.horiz, null, true);                      // 6999
	},                                                                                                                    // 7000
                                                                                                                       // 7001
	/**                                                                                                                   // 7002
	 * Create the path for a plot line that goes from the given value on                                                  // 7003
	 * this axis, across the plot to the opposite side                                                                    // 7004
	 * @param {Number} value                                                                                              // 7005
	 * @param {Number} lineWidth Used for calculation crisp line                                                          // 7006
	 * @param {Number] old Use old coordinates (for resizing and rescaling)                                               // 7007
	 */                                                                                                                   // 7008
	getPlotLinePath: function (value, lineWidth, old, force, translatedValue) {                                           // 7009
		var axis = this,                                                                                                     // 7010
			chart = axis.chart,                                                                                                 // 7011
			axisLeft = axis.left,                                                                                               // 7012
			axisTop = axis.top,                                                                                                 // 7013
			x1,                                                                                                                 // 7014
			y1,                                                                                                                 // 7015
			x2,                                                                                                                 // 7016
			y2,                                                                                                                 // 7017
			cHeight = (old && chart.oldChartHeight) || chart.chartHeight,                                                       // 7018
			cWidth = (old && chart.oldChartWidth) || chart.chartWidth,                                                          // 7019
			skip,                                                                                                               // 7020
			transB = axis.transB,                                                                                               // 7021
			/**                                                                                                                 // 7022
			 * Check if x is between a and b. If not, either move to a/b or skip,                                               // 7023
			 * depending on the force parameter.                                                                                // 7024
			 */                                                                                                                 // 7025
			between = function (x, a, b) {                                                                                      // 7026
				if (x < a || x > b) {                                                                                              // 7027
					if (force) {                                                                                                      // 7028
						x = mathMin(mathMax(a, x), b);                                                                                   // 7029
					} else {                                                                                                          // 7030
						skip = true;                                                                                                     // 7031
					}                                                                                                                 // 7032
				}                                                                                                                  // 7033
				return x;                                                                                                          // 7034
			};                                                                                                                  // 7035
                                                                                                                       // 7036
		translatedValue = pick(translatedValue, axis.translate(value, null, null, old));                                     // 7037
		x1 = x2 = mathRound(translatedValue + transB);                                                                       // 7038
		y1 = y2 = mathRound(cHeight - translatedValue - transB);                                                             // 7039
                                                                                                                       // 7040
		if (isNaN(translatedValue)) { // no min or max                                                                       // 7041
			skip = true;                                                                                                        // 7042
                                                                                                                       // 7043
		} else if (axis.horiz) {                                                                                             // 7044
			y1 = axisTop;                                                                                                       // 7045
			y2 = cHeight - axis.bottom;                                                                                         // 7046
			x1 = x2 = between(x1, axisLeft, axisLeft + axis.width);                                                             // 7047
		} else {                                                                                                             // 7048
			x1 = axisLeft;                                                                                                      // 7049
			x2 = cWidth - axis.right;                                                                                           // 7050
			y1 = y2 = between(y1, axisTop, axisTop + axis.height);                                                              // 7051
		}                                                                                                                    // 7052
		return skip && !force ?                                                                                              // 7053
			null :                                                                                                              // 7054
			chart.renderer.crispLine([M, x1, y1, L, x2, y2], lineWidth || 1);                                                   // 7055
	},                                                                                                                    // 7056
                                                                                                                       // 7057
	/**                                                                                                                   // 7058
	 * Set the tick positions of a linear axis to round values like whole tens or every five.                             // 7059
	 */                                                                                                                   // 7060
	getLinearTickPositions: function (tickInterval, min, max) {                                                           // 7061
		var pos,                                                                                                             // 7062
			lastPos,                                                                                                            // 7063
			roundedMin = correctFloat(mathFloor(min / tickInterval) * tickInterval),                                            // 7064
			roundedMax = correctFloat(mathCeil(max / tickInterval) * tickInterval),                                             // 7065
			tickPositions = [];                                                                                                 // 7066
                                                                                                                       // 7067
		// For single points, add a tick regardless of the relative position (#2662)                                         // 7068
		if (min === max && isNumber(min)) {                                                                                  // 7069
			return [min];                                                                                                       // 7070
		}                                                                                                                    // 7071
                                                                                                                       // 7072
		// Populate the intermediate values                                                                                  // 7073
		pos = roundedMin;                                                                                                    // 7074
		while (pos <= roundedMax) {                                                                                          // 7075
                                                                                                                       // 7076
			// Place the tick on the rounded value                                                                              // 7077
			tickPositions.push(pos);                                                                                            // 7078
                                                                                                                       // 7079
			// Always add the raw tickInterval, not the corrected one.                                                          // 7080
			pos = correctFloat(pos + tickInterval);                                                                             // 7081
                                                                                                                       // 7082
			// If the interval is not big enough in the current min - max range to actually increase                            // 7083
			// the loop variable, we need to break out to prevent endless loop. Issue #619                                      // 7084
			if (pos === lastPos) {                                                                                              // 7085
				break;                                                                                                             // 7086
			}                                                                                                                   // 7087
                                                                                                                       // 7088
			// Record the last value                                                                                            // 7089
			lastPos = pos;                                                                                                      // 7090
		}                                                                                                                    // 7091
		return tickPositions;                                                                                                // 7092
	},                                                                                                                    // 7093
                                                                                                                       // 7094
	/**                                                                                                                   // 7095
	 * Return the minor tick positions. For logarithmic axes, reuse the same logic                                        // 7096
	 * as for major ticks.                                                                                                // 7097
	 */                                                                                                                   // 7098
	getMinorTickPositions: function () {                                                                                  // 7099
		var axis = this,                                                                                                     // 7100
			options = axis.options,                                                                                             // 7101
			tickPositions = axis.tickPositions,                                                                                 // 7102
			minorTickInterval = axis.minorTickInterval,                                                                         // 7103
			minorTickPositions = [],                                                                                            // 7104
			pos,                                                                                                                // 7105
			i,                                                                                                                  // 7106
			min = axis.min,                                                                                                     // 7107
			max = axis.max,                                                                                                     // 7108
			range = max - min,                                                                                                  // 7109
			len;                                                                                                                // 7110
                                                                                                                       // 7111
		// If minor ticks get too dense, they are hard to read, and may cause long running script. So we don't draw them.    // 7112
		if (range && range / minorTickInterval < axis.len / 3) { // #3875                                                    // 7113
                                                                                                                       // 7114
			if (axis.isLog) {                                                                                                   // 7115
				len = tickPositions.length;                                                                                        // 7116
				for (i = 1; i < len; i++) {                                                                                        // 7117
					minorTickPositions = minorTickPositions.concat(                                                                   // 7118
						axis.getLogTickPositions(minorTickInterval, tickPositions[i - 1], tickPositions[i], true)                        // 7119
					);                                                                                                                // 7120
				}                                                                                                                  // 7121
			} else if (axis.isDatetimeAxis && options.minorTickInterval === 'auto') { // #1314                                  // 7122
				minorTickPositions = minorTickPositions.concat(                                                                    // 7123
					axis.getTimeTicks(                                                                                                // 7124
						axis.normalizeTimeTickInterval(minorTickInterval),                                                               // 7125
						min,                                                                                                             // 7126
						max,                                                                                                             // 7127
						options.startOfWeek                                                                                              // 7128
					)                                                                                                                 // 7129
				);                                                                                                                 // 7130
			} else {                                                                                                            // 7131
				for (pos = min + (tickPositions[0] - min) % minorTickInterval; pos <= max; pos += minorTickInterval) {             // 7132
					minorTickPositions.push(pos);                                                                                     // 7133
				}                                                                                                                  // 7134
			}                                                                                                                   // 7135
		}                                                                                                                    // 7136
                                                                                                                       // 7137
		axis.trimTicks(minorTickPositions); // #3652 #3743                                                                   // 7138
		return minorTickPositions;                                                                                           // 7139
	},                                                                                                                    // 7140
                                                                                                                       // 7141
	/**                                                                                                                   // 7142
	 * Adjust the min and max for the minimum range. Keep in mind that the series data is                                 // 7143
	 * not yet processed, so we don't have information on data cropping and grouping, or                                  // 7144
	 * updated axis.pointRange or series.pointRange. The data can't be processed until                                    // 7145
	 * we have finally established min and max.                                                                           // 7146
	 */                                                                                                                   // 7147
	adjustForMinRange: function () {                                                                                      // 7148
		var axis = this,                                                                                                     // 7149
			options = axis.options,                                                                                             // 7150
			min = axis.min,                                                                                                     // 7151
			max = axis.max,                                                                                                     // 7152
			zoomOffset,                                                                                                         // 7153
			spaceAvailable = axis.dataMax - axis.dataMin >= axis.minRange,                                                      // 7154
			closestDataRange,                                                                                                   // 7155
			i,                                                                                                                  // 7156
			distance,                                                                                                           // 7157
			xData,                                                                                                              // 7158
			loopLength,                                                                                                         // 7159
			minArgs,                                                                                                            // 7160
			maxArgs;                                                                                                            // 7161
                                                                                                                       // 7162
		// Set the automatic minimum range based on the closest point distance                                               // 7163
		if (axis.isXAxis && axis.minRange === UNDEFINED && !axis.isLog) {                                                    // 7164
                                                                                                                       // 7165
			if (defined(options.min) || defined(options.max)) {                                                                 // 7166
				axis.minRange = null; // don't do this again                                                                       // 7167
                                                                                                                       // 7168
			} else {                                                                                                            // 7169
                                                                                                                       // 7170
				// Find the closest distance between raw data points, as opposed to                                                // 7171
				// closestPointRange that applies to processed points (cropped and grouped)                                        // 7172
				each(axis.series, function (series) {                                                                              // 7173
					xData = series.xData;                                                                                             // 7174
					loopLength = series.xIncrement ? 1 : xData.length - 1;                                                            // 7175
					for (i = loopLength; i > 0; i--) {                                                                                // 7176
						distance = xData[i] - xData[i - 1];                                                                              // 7177
						if (closestDataRange === UNDEFINED || distance < closestDataRange) {                                             // 7178
							closestDataRange = distance;                                                                                    // 7179
						}                                                                                                                // 7180
					}                                                                                                                 // 7181
				});                                                                                                                // 7182
				axis.minRange = mathMin(closestDataRange * 5, axis.dataMax - axis.dataMin);                                        // 7183
			}                                                                                                                   // 7184
		}                                                                                                                    // 7185
                                                                                                                       // 7186
		// if minRange is exceeded, adjust                                                                                   // 7187
		if (max - min < axis.minRange) {                                                                                     // 7188
			var minRange = axis.minRange;                                                                                       // 7189
			zoomOffset = (minRange - max + min) / 2;                                                                            // 7190
                                                                                                                       // 7191
			// if min and max options have been set, don't go beyond it                                                         // 7192
			minArgs = [min - zoomOffset, pick(options.min, min - zoomOffset)];                                                  // 7193
			if (spaceAvailable) { // if space is available, stay within the data range                                          // 7194
				minArgs[2] = axis.dataMin;                                                                                         // 7195
			}                                                                                                                   // 7196
			min = arrayMax(minArgs);                                                                                            // 7197
                                                                                                                       // 7198
			maxArgs = [min + minRange, pick(options.max, min + minRange)];                                                      // 7199
			if (spaceAvailable) { // if space is availabe, stay within the data range                                           // 7200
				maxArgs[2] = axis.dataMax;                                                                                         // 7201
			}                                                                                                                   // 7202
                                                                                                                       // 7203
			max = arrayMin(maxArgs);                                                                                            // 7204
                                                                                                                       // 7205
			// now if the max is adjusted, adjust the min back                                                                  // 7206
			if (max - min < minRange) {                                                                                         // 7207
				minArgs[0] = max - minRange;                                                                                       // 7208
				minArgs[1] = pick(options.min, max - minRange);                                                                    // 7209
				min = arrayMax(minArgs);                                                                                           // 7210
			}                                                                                                                   // 7211
		}                                                                                                                    // 7212
                                                                                                                       // 7213
		// Record modified extremes                                                                                          // 7214
		axis.min = min;                                                                                                      // 7215
		axis.max = max;                                                                                                      // 7216
	},                                                                                                                    // 7217
                                                                                                                       // 7218
	/**                                                                                                                   // 7219
	 * Update translation information                                                                                     // 7220
	 */                                                                                                                   // 7221
	setAxisTranslation: function (saveOld) {                                                                              // 7222
		var axis = this,                                                                                                     // 7223
			range = axis.max - axis.min,                                                                                        // 7224
			pointRange = axis.axisPointRange || 0,                                                                              // 7225
			closestPointRange,                                                                                                  // 7226
			minPointOffset = 0,                                                                                                 // 7227
			pointRangePadding = 0,                                                                                              // 7228
			linkedParent = axis.linkedParent,                                                                                   // 7229
			ordinalCorrection,                                                                                                  // 7230
			hasCategories = !!axis.categories,                                                                                  // 7231
			transA = axis.transA,                                                                                               // 7232
			isXAxis = axis.isXAxis;                                                                                             // 7233
                                                                                                                       // 7234
		// Adjust translation for padding. Y axis with categories need to go through the same (#1784).                       // 7235
		if (isXAxis || hasCategories || pointRange) {                                                                        // 7236
			if (linkedParent) {                                                                                                 // 7237
				minPointOffset = linkedParent.minPointOffset;                                                                      // 7238
				pointRangePadding = linkedParent.pointRangePadding;                                                                // 7239
                                                                                                                       // 7240
			} else {                                                                                                            // 7241
				each(axis.series, function (series) {                                                                              // 7242
					var seriesPointRange = hasCategories ? 1 : (isXAxis ? series.pointRange : (axis.axisPointRange || 0)), // #2806   // 7243
						pointPlacement = series.options.pointPlacement,                                                                  // 7244
						seriesClosestPointRange = series.closestPointRange;                                                              // 7245
                                                                                                                       // 7246
					if (seriesPointRange > range) { // #1446                                                                          // 7247
						seriesPointRange = 0;                                                                                            // 7248
					}                                                                                                                 // 7249
					pointRange = mathMax(pointRange, seriesPointRange);                                                               // 7250
                                                                                                                       // 7251
					if (!axis.single) {                                                                                               // 7252
						// minPointOffset is the value padding to the left of the axis in order to make                                  // 7253
						// room for points with a pointRange, typically columns. When the pointPlacement option                          // 7254
						// is 'between' or 'on', this padding does not apply.                                                            // 7255
						minPointOffset = mathMax(                                                                                        // 7256
							minPointOffset,                                                                                                 // 7257
							isString(pointPlacement) ? 0 : seriesPointRange / 2                                                             // 7258
						);                                                                                                               // 7259
                                                                                                                       // 7260
						// Determine the total padding needed to the length of the axis to make room for the                             // 7261
						// pointRange. If the series' pointPlacement is 'on', no padding is added.                                       // 7262
						pointRangePadding = mathMax(                                                                                     // 7263
							pointRangePadding,                                                                                              // 7264
							pointPlacement === 'on' ? 0 : seriesPointRange                                                                  // 7265
						);                                                                                                               // 7266
					}                                                                                                                 // 7267
                                                                                                                       // 7268
					// Set the closestPointRange                                                                                      // 7269
					if (!series.noSharedTooltip && defined(seriesClosestPointRange)) {                                                // 7270
						closestPointRange = defined(closestPointRange) ?                                                                 // 7271
							mathMin(closestPointRange, seriesClosestPointRange) :                                                           // 7272
							seriesClosestPointRange;                                                                                        // 7273
					}                                                                                                                 // 7274
				});                                                                                                                // 7275
			}                                                                                                                   // 7276
                                                                                                                       // 7277
			// Record minPointOffset and pointRangePadding                                                                      // 7278
			ordinalCorrection = axis.ordinalSlope && closestPointRange ? axis.ordinalSlope / closestPointRange : 1; // #988, #1853
			axis.minPointOffset = minPointOffset = minPointOffset * ordinalCorrection;                                          // 7280
			axis.pointRangePadding = pointRangePadding = pointRangePadding * ordinalCorrection;                                 // 7281
                                                                                                                       // 7282
			// pointRange means the width reserved for each point, like in a column chart                                       // 7283
			axis.pointRange = mathMin(pointRange, range);                                                                       // 7284
                                                                                                                       // 7285
			// closestPointRange means the closest distance between points. In columns                                          // 7286
			// it is mostly equal to pointRange, but in lines pointRange is 0 while closestPointRange                           // 7287
			// is some other value                                                                                              // 7288
			if (isXAxis) {                                                                                                      // 7289
				axis.closestPointRange = closestPointRange;                                                                        // 7290
			}                                                                                                                   // 7291
		}                                                                                                                    // 7292
                                                                                                                       // 7293
		// Secondary values                                                                                                  // 7294
		if (saveOld) {                                                                                                       // 7295
			axis.oldTransA = transA;                                                                                            // 7296
		}                                                                                                                    // 7297
		axis.translationSlope = axis.transA = transA = axis.len / ((range + pointRangePadding) || 1);                        // 7298
		axis.transB = axis.horiz ? axis.left : axis.bottom; // translation addend                                            // 7299
		axis.minPixelPadding = transA * minPointOffset;                                                                      // 7300
	},                                                                                                                    // 7301
                                                                                                                       // 7302
	/**                                                                                                                   // 7303
	 * Set the tick positions to round values and optionally extend the extremes                                          // 7304
	 * to the nearest tick                                                                                                // 7305
	 */                                                                                                                   // 7306
	setTickInterval: function (secondPass) {                                                                              // 7307
		var axis = this,                                                                                                     // 7308
			chart = axis.chart,                                                                                                 // 7309
			options = axis.options,                                                                                             // 7310
			isLog = axis.isLog,                                                                                                 // 7311
			isDatetimeAxis = axis.isDatetimeAxis,                                                                               // 7312
			isXAxis = axis.isXAxis,                                                                                             // 7313
			isLinked = axis.isLinked,                                                                                           // 7314
			maxPadding = options.maxPadding,                                                                                    // 7315
			minPadding = options.minPadding,                                                                                    // 7316
			length,                                                                                                             // 7317
			linkedParentExtremes,                                                                                               // 7318
			tickIntervalOption = options.tickInterval,                                                                          // 7319
			minTickInterval,                                                                                                    // 7320
			tickPixelIntervalOption = options.tickPixelInterval,                                                                // 7321
			categories = axis.categories;                                                                                       // 7322
                                                                                                                       // 7323
		if (!isDatetimeAxis && !categories && !isLinked) {                                                                   // 7324
			this.getTickAmount();                                                                                               // 7325
		}                                                                                                                    // 7326
                                                                                                                       // 7327
		// linked axis gets the extremes from the parent axis                                                                // 7328
		if (isLinked) {                                                                                                      // 7329
			axis.linkedParent = chart[axis.coll][options.linkedTo];                                                             // 7330
			linkedParentExtremes = axis.linkedParent.getExtremes();                                                             // 7331
			axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);                                            // 7332
			axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);                                            // 7333
			if (options.type !== axis.linkedParent.options.type) {                                                              // 7334
				error(11, 1); // Can't link axes of different type                                                                 // 7335
			}                                                                                                                   // 7336
		} else { // initial min and max from the extreme data values                                                         // 7337
			axis.min = pick(axis.userMin, options.min, axis.dataMin);                                                           // 7338
			axis.max = pick(axis.userMax, options.max, axis.dataMax);                                                           // 7339
		}                                                                                                                    // 7340
                                                                                                                       // 7341
		if (isLog) {                                                                                                         // 7342
			if (!secondPass && mathMin(axis.min, pick(axis.dataMin, axis.min)) <= 0) { // #978                                  // 7343
				error(10, 1); // Can't plot negative values on log axis                                                            // 7344
			}                                                                                                                   // 7345
			axis.min = correctFloat(log2lin(axis.min)); // correctFloat cures #934                                              // 7346
			axis.max = correctFloat(log2lin(axis.max));                                                                         // 7347
		}                                                                                                                    // 7348
                                                                                                                       // 7349
		// handle zoomed range                                                                                               // 7350
		if (axis.range && defined(axis.max)) {                                                                               // 7351
			axis.userMin = axis.min = mathMax(axis.min, axis.max - axis.range); // #618                                         // 7352
			axis.userMax = axis.max;                                                                                            // 7353
                                                                                                                       // 7354
			axis.range = null;  // don't use it when running setExtremes                                                        // 7355
		}                                                                                                                    // 7356
                                                                                                                       // 7357
		// Hook for adjusting this.min and this.max. Used by bubble series.                                                  // 7358
		if (axis.beforePadding) {                                                                                            // 7359
			axis.beforePadding();                                                                                               // 7360
		}                                                                                                                    // 7361
                                                                                                                       // 7362
		// adjust min and max for the minimum range                                                                          // 7363
		axis.adjustForMinRange();                                                                                            // 7364
                                                                                                                       // 7365
		// Pad the values to get clear of the chart's edges. To avoid tickInterval taking the padding                        // 7366
		// into account, we do this after computing tick interval (#1337).                                                   // 7367
		if (!categories && !axis.axisPointRange && !axis.usePercentage && !isLinked && defined(axis.min) && defined(axis.max)) {
			length = axis.max - axis.min;                                                                                       // 7369
			if (length) {                                                                                                       // 7370
				if (!defined(options.min) && !defined(axis.userMin) && minPadding && (axis.dataMin < 0 || !axis.ignoreMinPadding)) {
					axis.min -= length * minPadding;                                                                                  // 7372
				}                                                                                                                  // 7373
				if (!defined(options.max) && !defined(axis.userMax)  && maxPadding && (axis.dataMax > 0 || !axis.ignoreMaxPadding)) {
					axis.max += length * maxPadding;                                                                                  // 7375
				}                                                                                                                  // 7376
			}                                                                                                                   // 7377
		}                                                                                                                    // 7378
                                                                                                                       // 7379
		// Stay within floor and ceiling                                                                                     // 7380
		if (isNumber(options.floor)) {                                                                                       // 7381
			axis.min = mathMax(axis.min, options.floor);                                                                        // 7382
		}                                                                                                                    // 7383
		if (isNumber(options.ceiling)) {                                                                                     // 7384
			axis.max = mathMin(axis.max, options.ceiling);                                                                      // 7385
		}                                                                                                                    // 7386
                                                                                                                       // 7387
		// get tickInterval                                                                                                  // 7388
		if (axis.min === axis.max || axis.min === undefined || axis.max === undefined) {                                     // 7389
			axis.tickInterval = 1;                                                                                              // 7390
		} else if (isLinked && !tickIntervalOption &&                                                                        // 7391
				tickPixelIntervalOption === axis.linkedParent.options.tickPixelInterval) {                                         // 7392
			axis.tickInterval = tickIntervalOption = axis.linkedParent.tickInterval;                                            // 7393
		} else {                                                                                                             // 7394
			axis.tickInterval = pick(                                                                                           // 7395
				tickIntervalOption,                                                                                                // 7396
				this.tickAmount ? ((axis.max - axis.min) / mathMax(this.tickAmount - 1, 1)) : undefined,                           // 7397
				categories ? // for categoried axis, 1 is default, for linear axis use tickPix                                     // 7398
					1 :                                                                                                               // 7399
					// don't let it be more than the data range                                                                       // 7400
					(axis.max - axis.min) * tickPixelIntervalOption / mathMax(axis.len, tickPixelIntervalOption)                      // 7401
			);                                                                                                                  // 7402
		}                                                                                                                    // 7403
                                                                                                                       // 7404
		// Now we're finished detecting min and max, crop and group series data. This                                        // 7405
		// is in turn needed in order to find tick positions in ordinal axes.                                                // 7406
		if (isXAxis && !secondPass) {                                                                                        // 7407
			each(axis.series, function (series) {                                                                               // 7408
				series.processData(axis.min !== axis.oldMin || axis.max !== axis.oldMax);                                          // 7409
			});                                                                                                                 // 7410
		}                                                                                                                    // 7411
                                                                                                                       // 7412
		// set the translation factor used in translate function                                                             // 7413
		axis.setAxisTranslation(true);                                                                                       // 7414
                                                                                                                       // 7415
		// hook for ordinal axes and radial axes                                                                             // 7416
		if (axis.beforeSetTickPositions) {                                                                                   // 7417
			axis.beforeSetTickPositions();                                                                                      // 7418
		}                                                                                                                    // 7419
                                                                                                                       // 7420
		// hook for extensions, used in Highstock ordinal axes                                                               // 7421
		if (axis.postProcessTickInterval) {                                                                                  // 7422
			axis.tickInterval = axis.postProcessTickInterval(axis.tickInterval);                                                // 7423
		}                                                                                                                    // 7424
                                                                                                                       // 7425
		// In column-like charts, don't cramp in more ticks than there are points (#1943)                                    // 7426
		if (axis.pointRange) {                                                                                               // 7427
			axis.tickInterval = mathMax(axis.pointRange, axis.tickInterval);                                                    // 7428
		}                                                                                                                    // 7429
                                                                                                                       // 7430
		// Before normalizing the tick interval, handle minimum tick interval. This applies only if tickInterval is not defined.
		minTickInterval = pick(options.minTickInterval, axis.isDatetimeAxis && axis.closestPointRange);                      // 7432
		if (!tickIntervalOption && axis.tickInterval < minTickInterval) {                                                    // 7433
			axis.tickInterval = minTickInterval;                                                                                // 7434
		}                                                                                                                    // 7435
                                                                                                                       // 7436
		// for linear axes, get magnitude and normalize the interval                                                         // 7437
		if (!isDatetimeAxis && !isLog && !tickIntervalOption) {                                                              // 7438
			axis.tickInterval = normalizeTickInterval(                                                                          // 7439
				axis.tickInterval,                                                                                                 // 7440
				null,                                                                                                              // 7441
				getMagnitude(axis.tickInterval),                                                                                   // 7442
				// If the tick interval is between 0.5 and 5 and the axis max is in the order of                                   // 7443
				// thousands, chances are we are dealing with years. Don't allow decimals. #3363.                                  // 7444
				pick(options.allowDecimals, !(axis.tickInterval > 0.5 && axis.tickInterval < 5 && axis.max > 1000 && axis.max < 9999)),
				!!this.tickAmount                                                                                                  // 7446
			);                                                                                                                  // 7447
		}                                                                                                                    // 7448
		                                                                                                                     // 7449
		// Prevent ticks from getting so close that we can't draw the labels                                                 // 7450
		if (!this.tickAmount && this.len) { // Color axis with disabled legend has no length                                 // 7451
			axis.tickInterval = axis.unsquish();                                                                                // 7452
		}                                                                                                                    // 7453
                                                                                                                       // 7454
		this.setTickPositions();                                                                                             // 7455
	},                                                                                                                    // 7456
                                                                                                                       // 7457
	/**                                                                                                                   // 7458
	 * Now we have computed the normalized tickInterval, get the tick positions                                           // 7459
	 */                                                                                                                   // 7460
	setTickPositions: function () {                                                                                       // 7461
                                                                                                                       // 7462
		var options = this.options,                                                                                          // 7463
			tickPositions,                                                                                                      // 7464
			tickPositionsOption = options.tickPositions,                                                                        // 7465
			tickPositioner = options.tickPositioner,                                                                            // 7466
			startOnTick = options.startOnTick,                                                                                  // 7467
			endOnTick = options.endOnTick,                                                                                      // 7468
			single;                                                                                                             // 7469
                                                                                                                       // 7470
		// Set the tickmarkOffset                                                                                            // 7471
		this.tickmarkOffset = (this.categories && options.tickmarkPlacement === 'between' &&                                 // 7472
			this.tickInterval === 1) ? 0.5 : 0; // #3202                                                                        // 7473
                                                                                                                       // 7474
                                                                                                                       // 7475
		// get minorTickInterval                                                                                             // 7476
		this.minorTickInterval = options.minorTickInterval === 'auto' && this.tickInterval ?                                 // 7477
			this.tickInterval / 5 : options.minorTickInterval;                                                                  // 7478
                                                                                                                       // 7479
		// Find the tick positions                                                                                           // 7480
		this.tickPositions = tickPositions = tickPositionsOption && tickPositionsOption.slice(); // Work on a copy (#1565)   // 7481
		if (!tickPositions) {                                                                                                // 7482
                                                                                                                       // 7483
			if (this.isDatetimeAxis) {                                                                                          // 7484
				tickPositions = this.getTimeTicks(                                                                                 // 7485
					this.normalizeTimeTickInterval(this.tickInterval, options.units),                                                 // 7486
					this.min,                                                                                                         // 7487
					this.max,                                                                                                         // 7488
					options.startOfWeek,                                                                                              // 7489
					this.ordinalPositions,                                                                                            // 7490
					this.closestPointRange,                                                                                           // 7491
					true                                                                                                              // 7492
				);                                                                                                                 // 7493
			} else if (this.isLog) {                                                                                            // 7494
				tickPositions = this.getLogTickPositions(this.tickInterval, this.min, this.max);                                   // 7495
			} else {                                                                                                            // 7496
				tickPositions = this.getLinearTickPositions(this.tickInterval, this.min, this.max);                                // 7497
			}                                                                                                                   // 7498
                                                                                                                       // 7499
			this.tickPositions = tickPositions;                                                                                 // 7500
                                                                                                                       // 7501
			// Run the tick positioner callback, that allows modifying auto tick positions.                                     // 7502
			if (tickPositioner) {                                                                                               // 7503
				tickPositioner = tickPositioner.apply(this, [this.min, this.max]);                                                 // 7504
				if (tickPositioner) {                                                                                              // 7505
					this.tickPositions = tickPositions = tickPositioner;                                                              // 7506
				}                                                                                                                  // 7507
			}                                                                                                                   // 7508
                                                                                                                       // 7509
		}                                                                                                                    // 7510
                                                                                                                       // 7511
		if (!this.isLinked) {                                                                                                // 7512
                                                                                                                       // 7513
			// reset min/max or remove extremes based on start/end on tick                                                      // 7514
			this.trimTicks(tickPositions, startOnTick, endOnTick);                                                              // 7515
                                                                                                                       // 7516
			// When there is only one point, or all points have the same value on this axis, then min                           // 7517
			// and max are equal and tickPositions.length is 0 or 1. In this case, add some padding                             // 7518
			// in order to center the point, but leave it with one tick. #1337.                                                 // 7519
			if (this.min === this.max && defined(this.min) && !this.tickAmount) {                                               // 7520
				// Substract half a unit (#2619, #2846, #2515, #3390)                                                              // 7521
				single = true;                                                                                                     // 7522
				this.min -= 0.5;                                                                                                   // 7523
				this.max += 0.5;                                                                                                   // 7524
			}                                                                                                                   // 7525
			this.single = single;                                                                                               // 7526
                                                                                                                       // 7527
			if (!tickPositionsOption && !tickPositioner) {                                                                      // 7528
				this.adjustTickAmount();                                                                                           // 7529
			}                                                                                                                   // 7530
		}                                                                                                                    // 7531
	},                                                                                                                    // 7532
                                                                                                                       // 7533
	/**                                                                                                                   // 7534
	 * Handle startOnTick and endOnTick by either adapting to padding min/max or rounded min/max                          // 7535
	 */                                                                                                                   // 7536
	trimTicks: function (tickPositions, startOnTick, endOnTick) {                                                         // 7537
		var roundedMin = tickPositions[0],                                                                                   // 7538
			roundedMax = tickPositions[tickPositions.length - 1],                                                               // 7539
			minPointOffset = this.minPointOffset || 0;                                                                          // 7540
			                                                                                                                    // 7541
		if (startOnTick) {                                                                                                   // 7542
			this.min = roundedMin;                                                                                              // 7543
		} else if (this.min - minPointOffset > roundedMin) {                                                                 // 7544
			tickPositions.shift();                                                                                              // 7545
		}                                                                                                                    // 7546
                                                                                                                       // 7547
		if (endOnTick) {                                                                                                     // 7548
			this.max = roundedMax;                                                                                              // 7549
		} else if (this.max + minPointOffset < roundedMax) {                                                                 // 7550
			tickPositions.pop();                                                                                                // 7551
		}                                                                                                                    // 7552
                                                                                                                       // 7553
		// If no tick are left, set one tick in the middle (#3195)                                                           // 7554
		if (tickPositions.length === 0 && defined(roundedMin)) {                                                             // 7555
			tickPositions.push((roundedMax + roundedMin) / 2);                                                                  // 7556
		}		                                                                                                                  // 7557
	},                                                                                                                    // 7558
                                                                                                                       // 7559
	/**                                                                                                                   // 7560
	 * Set the max ticks of either the x and y axis collection                                                            // 7561
	 */                                                                                                                   // 7562
	getTickAmount: function () {                                                                                          // 7563
		var others = {}, // Whether there is another axis to pair with this one                                              // 7564
			hasOther,                                                                                                           // 7565
			options = this.options,                                                                                             // 7566
			tickAmount = options.tickAmount,                                                                                    // 7567
			tickPixelInterval = options.tickPixelInterval;                                                                      // 7568
                                                                                                                       // 7569
		if (!defined(options.tickInterval) && this.len < tickPixelInterval && !this.isRadial &&                              // 7570
				!this.isLog && options.startOnTick && options.endOnTick) {                                                         // 7571
			tickAmount = 2;                                                                                                     // 7572
		}                                                                                                                    // 7573
                                                                                                                       // 7574
		if (!tickAmount && this.chart.options.chart.alignTicks !== false && options.alignTicks !== false) {                  // 7575
			// Check if there are multiple axes in the same pane                                                                // 7576
			each(this.chart[this.coll], function (axis) {                                                                       // 7577
				var options = axis.options,                                                                                        // 7578
					horiz = axis.horiz,                                                                                               // 7579
					key = [horiz ? options.left : options.top, horiz ? options.width : options.height, options.pane].join(',');       // 7580
				                                                                                                                   // 7581
				if (others[key]) {                                                                                                 // 7582
					if (axis.series.length) {                                                                                         // 7583
						hasOther = true; // #4201                                                                                        // 7584
					}                                                                                                                 // 7585
				} else {                                                                                                           // 7586
					others[key] = 1;                                                                                                  // 7587
				}                                                                                                                  // 7588
			});                                                                                                                 // 7589
                                                                                                                       // 7590
			if (hasOther) {                                                                                                     // 7591
				// Add 1 because 4 tick intervals require 5 ticks (including first and last)                                       // 7592
				tickAmount = mathCeil(this.len / tickPixelInterval) + 1;                                                           // 7593
			}                                                                                                                   // 7594
		}                                                                                                                    // 7595
                                                                                                                       // 7596
		// For tick amounts of 2 and 3, compute five ticks and remove the intermediate ones. This                            // 7597
		// prevents the axis from adding ticks that are too far away from the data extremes.                                 // 7598
		if (tickAmount < 4) {                                                                                                // 7599
			this.finalTickAmt = tickAmount;                                                                                     // 7600
			tickAmount = 5;                                                                                                     // 7601
		}                                                                                                                    // 7602
		                                                                                                                     // 7603
		this.tickAmount = tickAmount;                                                                                        // 7604
	},                                                                                                                    // 7605
                                                                                                                       // 7606
	/**                                                                                                                   // 7607
	 * When using multiple axes, adjust the number of ticks to match the highest                                          // 7608
	 * number of ticks in that group                                                                                      // 7609
	 */                                                                                                                   // 7610
	adjustTickAmount: function () {                                                                                       // 7611
		var tickInterval = this.tickInterval,                                                                                // 7612
			tickPositions = this.tickPositions,                                                                                 // 7613
			tickAmount = this.tickAmount,                                                                                       // 7614
			finalTickAmt = this.finalTickAmt,                                                                                   // 7615
			currentTickAmount = tickPositions && tickPositions.length,                                                          // 7616
			i,                                                                                                                  // 7617
			len;                                                                                                                // 7618
                                                                                                                       // 7619
		if (currentTickAmount < tickAmount) { // TODO: Check #3411                                                           // 7620
			while (tickPositions.length < tickAmount) {                                                                         // 7621
				tickPositions.push(correctFloat(                                                                                   // 7622
					tickPositions[tickPositions.length - 1] + tickInterval                                                            // 7623
				));                                                                                                                // 7624
			}                                                                                                                   // 7625
			this.transA *= (currentTickAmount - 1) / (tickAmount - 1);                                                          // 7626
			this.max = tickPositions[tickPositions.length - 1];                                                                 // 7627
                                                                                                                       // 7628
		// We have too many ticks, run second pass to try to reduce ticks                                                    // 7629
		} else if (currentTickAmount > tickAmount) {                                                                         // 7630
			this.tickInterval *= 2;                                                                                             // 7631
			this.setTickPositions();                                                                                            // 7632
		}                                                                                                                    // 7633
                                                                                                                       // 7634
		// The finalTickAmt property is set in getTickAmount                                                                 // 7635
		if (defined(finalTickAmt)) {                                                                                         // 7636
			i = len = tickPositions.length;                                                                                     // 7637
			while (i--) {                                                                                                       // 7638
				if (                                                                                                               // 7639
					(finalTickAmt === 3 && i % 2 === 1) || // Remove every other tick                                                 // 7640
					(finalTickAmt <= 2 && i > 0 && i < len - 1) // Remove all but first and last                                      // 7641
				) {                                                                                                                // 7642
					tickPositions.splice(i, 1);                                                                                       // 7643
				}	                                                                                                                 // 7644
			}                                                                                                                   // 7645
			this.finalTickAmt = UNDEFINED;                                                                                      // 7646
		}                                                                                                                    // 7647
	},                                                                                                                    // 7648
                                                                                                                       // 7649
	/**                                                                                                                   // 7650
	 * Set the scale based on data min and max, user set min and max or options                                           // 7651
	 *                                                                                                                    // 7652
	 */                                                                                                                   // 7653
	setScale: function () {                                                                                               // 7654
		var axis = this,                                                                                                     // 7655
			stacks = axis.stacks,                                                                                               // 7656
			type,                                                                                                               // 7657
			i,                                                                                                                  // 7658
			isDirtyData,                                                                                                        // 7659
			isDirtyAxisLength;                                                                                                  // 7660
                                                                                                                       // 7661
		axis.oldMin = axis.min;                                                                                              // 7662
		axis.oldMax = axis.max;                                                                                              // 7663
		axis.oldAxisLength = axis.len;                                                                                       // 7664
                                                                                                                       // 7665
		// set the new axisLength                                                                                            // 7666
		axis.setAxisSize();                                                                                                  // 7667
		//axisLength = horiz ? axisWidth : axisHeight;                                                                       // 7668
		isDirtyAxisLength = axis.len !== axis.oldAxisLength;                                                                 // 7669
                                                                                                                       // 7670
		// is there new data?                                                                                                // 7671
		each(axis.series, function (series) {                                                                                // 7672
			if (series.isDirtyData || series.isDirty ||                                                                         // 7673
					series.xAxis.isDirty) { // when x axis is dirty, we need new data extremes for y as well                          // 7674
				isDirtyData = true;                                                                                                // 7675
			}                                                                                                                   // 7676
		});                                                                                                                  // 7677
                                                                                                                       // 7678
		// do we really need to go through all this?                                                                         // 7679
		if (isDirtyAxisLength || isDirtyData || axis.isLinked || axis.forceRedraw ||                                         // 7680
			axis.userMin !== axis.oldUserMin || axis.userMax !== axis.oldUserMax) {                                             // 7681
                                                                                                                       // 7682
			// reset stacks                                                                                                     // 7683
			if (!axis.isXAxis) {                                                                                                // 7684
				for (type in stacks) {                                                                                             // 7685
					for (i in stacks[type]) {                                                                                         // 7686
						stacks[type][i].total = null;                                                                                    // 7687
						stacks[type][i].cum = 0;                                                                                         // 7688
					}                                                                                                                 // 7689
				}                                                                                                                  // 7690
			}                                                                                                                   // 7691
                                                                                                                       // 7692
			axis.forceRedraw = false;                                                                                           // 7693
                                                                                                                       // 7694
			// get data extremes if needed                                                                                      // 7695
			axis.getSeriesExtremes();                                                                                           // 7696
                                                                                                                       // 7697
			// get fixed positions based on tickInterval                                                                        // 7698
			axis.setTickInterval();                                                                                             // 7699
                                                                                                                       // 7700
			// record old values to decide whether a rescale is necessary later on (#540)                                       // 7701
			axis.oldUserMin = axis.userMin;                                                                                     // 7702
			axis.oldUserMax = axis.userMax;                                                                                     // 7703
                                                                                                                       // 7704
			// Mark as dirty if it is not already set to dirty and extremes have changed. #595.                                 // 7705
			if (!axis.isDirty) {                                                                                                // 7706
				axis.isDirty = isDirtyAxisLength || axis.min !== axis.oldMin || axis.max !== axis.oldMax;                          // 7707
			}                                                                                                                   // 7708
		} else if (!axis.isXAxis) {                                                                                          // 7709
			if (axis.oldStacks) {                                                                                               // 7710
				stacks = axis.stacks = axis.oldStacks;                                                                             // 7711
			}                                                                                                                   // 7712
                                                                                                                       // 7713
			// reset stacks                                                                                                     // 7714
			for (type in stacks) {                                                                                              // 7715
				for (i in stacks[type]) {                                                                                          // 7716
					stacks[type][i].cum = stacks[type][i].total;                                                                      // 7717
				}                                                                                                                  // 7718
			}                                                                                                                   // 7719
		}                                                                                                                    // 7720
	},                                                                                                                    // 7721
                                                                                                                       // 7722
	/**                                                                                                                   // 7723
	 * Set the extremes and optionally redraw                                                                             // 7724
	 * @param {Number} newMin                                                                                             // 7725
	 * @param {Number} newMax                                                                                             // 7726
	 * @param {Boolean} redraw                                                                                            // 7727
	 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation                             // 7728
	 *    configuration                                                                                                   // 7729
	 * @param {Object} eventArguments                                                                                     // 7730
	 *                                                                                                                    // 7731
	 */                                                                                                                   // 7732
	setExtremes: function (newMin, newMax, redraw, animation, eventArguments) {                                           // 7733
		var axis = this,                                                                                                     // 7734
			chart = axis.chart;                                                                                                 // 7735
                                                                                                                       // 7736
		redraw = pick(redraw, true); // defaults to true                                                                     // 7737
                                                                                                                       // 7738
		each(axis.series, function (serie) {                                                                                 // 7739
			delete serie.kdTree;                                                                                                // 7740
		});                                                                                                                  // 7741
                                                                                                                       // 7742
		// Extend the arguments with min and max                                                                             // 7743
		eventArguments = extend(eventArguments, {                                                                            // 7744
			min: newMin,                                                                                                        // 7745
			max: newMax                                                                                                         // 7746
		});                                                                                                                  // 7747
                                                                                                                       // 7748
		// Fire the event                                                                                                    // 7749
		fireEvent(axis, 'setExtremes', eventArguments, function () { // the default event handler                            // 7750
                                                                                                                       // 7751
			axis.userMin = newMin;                                                                                              // 7752
			axis.userMax = newMax;                                                                                              // 7753
			axis.eventArgs = eventArguments;                                                                                    // 7754
                                                                                                                       // 7755
			// Mark for running afterSetExtremes                                                                                // 7756
			axis.isDirtyExtremes = true;                                                                                        // 7757
                                                                                                                       // 7758
			// redraw                                                                                                           // 7759
			if (redraw) {                                                                                                       // 7760
				chart.redraw(animation);                                                                                           // 7761
			}                                                                                                                   // 7762
		});                                                                                                                  // 7763
	},                                                                                                                    // 7764
                                                                                                                       // 7765
	/**                                                                                                                   // 7766
	 * Overridable method for zooming chart. Pulled out in a separate method to allow overriding                          // 7767
	 * in stock charts.                                                                                                   // 7768
	 */                                                                                                                   // 7769
	zoom: function (newMin, newMax) {                                                                                     // 7770
		var dataMin = this.dataMin,                                                                                          // 7771
			dataMax = this.dataMax,                                                                                             // 7772
			options = this.options;                                                                                             // 7773
                                                                                                                       // 7774
		// Prevent pinch zooming out of range. Check for defined is for #1946. #1734.                                        // 7775
		if (!this.allowZoomOutside) {                                                                                        // 7776
			if (defined(dataMin) && newMin <= mathMin(dataMin, pick(options.min, dataMin))) {                                   // 7777
				newMin = UNDEFINED;                                                                                                // 7778
			}                                                                                                                   // 7779
			if (defined(dataMax) && newMax >= mathMax(dataMax, pick(options.max, dataMax))) {                                   // 7780
				newMax = UNDEFINED;                                                                                                // 7781
			}                                                                                                                   // 7782
		}                                                                                                                    // 7783
                                                                                                                       // 7784
		// In full view, displaying the reset zoom button is not required                                                    // 7785
		this.displayBtn = newMin !== UNDEFINED || newMax !== UNDEFINED;                                                      // 7786
                                                                                                                       // 7787
		// Do it                                                                                                             // 7788
		this.setExtremes(                                                                                                    // 7789
			newMin,                                                                                                             // 7790
			newMax,                                                                                                             // 7791
			false,                                                                                                              // 7792
			UNDEFINED,                                                                                                          // 7793
			{ trigger: 'zoom' }                                                                                                 // 7794
		);                                                                                                                   // 7795
		return true;                                                                                                         // 7796
	},                                                                                                                    // 7797
                                                                                                                       // 7798
	/**                                                                                                                   // 7799
	 * Update the axis metrics                                                                                            // 7800
	 */                                                                                                                   // 7801
	setAxisSize: function () {                                                                                            // 7802
		var chart = this.chart,                                                                                              // 7803
			options = this.options,                                                                                             // 7804
			offsetLeft = options.offsetLeft || 0,                                                                               // 7805
			offsetRight = options.offsetRight || 0,                                                                             // 7806
			horiz = this.horiz,                                                                                                 // 7807
			width = pick(options.width, chart.plotWidth - offsetLeft + offsetRight),                                            // 7808
			height = pick(options.height, chart.plotHeight),                                                                    // 7809
			top = pick(options.top, chart.plotTop),                                                                             // 7810
			left = pick(options.left, chart.plotLeft + offsetLeft),                                                             // 7811
			percentRegex = /%$/;                                                                                                // 7812
                                                                                                                       // 7813
		// Check for percentage based input values                                                                           // 7814
		if (percentRegex.test(height)) {                                                                                     // 7815
			height = parseFloat(height) / 100 * chart.plotHeight;                                                               // 7816
		}                                                                                                                    // 7817
		if (percentRegex.test(top)) {                                                                                        // 7818
			top = parseFloat(top) / 100 * chart.plotHeight + chart.plotTop;                                                     // 7819
		}                                                                                                                    // 7820
                                                                                                                       // 7821
		// Expose basic values to use in Series object and navigator                                                         // 7822
		this.left = left;                                                                                                    // 7823
		this.top = top;                                                                                                      // 7824
		this.width = width;                                                                                                  // 7825
		this.height = height;                                                                                                // 7826
		this.bottom = chart.chartHeight - height - top;                                                                      // 7827
		this.right = chart.chartWidth - width - left;                                                                        // 7828
                                                                                                                       // 7829
		// Direction agnostic properties                                                                                     // 7830
		this.len = mathMax(horiz ? width : height, 0); // mathMax fixes #905                                                 // 7831
		this.pos = horiz ? left : top; // distance from SVG origin                                                           // 7832
	},                                                                                                                    // 7833
                                                                                                                       // 7834
	/**                                                                                                                   // 7835
	 * Get the actual axis extremes                                                                                       // 7836
	 */                                                                                                                   // 7837
	getExtremes: function () {                                                                                            // 7838
		var axis = this,                                                                                                     // 7839
			isLog = axis.isLog;                                                                                                 // 7840
                                                                                                                       // 7841
		return {                                                                                                             // 7842
			min: isLog ? correctFloat(lin2log(axis.min)) : axis.min,                                                            // 7843
			max: isLog ? correctFloat(lin2log(axis.max)) : axis.max,                                                            // 7844
			dataMin: axis.dataMin,                                                                                              // 7845
			dataMax: axis.dataMax,                                                                                              // 7846
			userMin: axis.userMin,                                                                                              // 7847
			userMax: axis.userMax                                                                                               // 7848
		};                                                                                                                   // 7849
	},                                                                                                                    // 7850
                                                                                                                       // 7851
	/**                                                                                                                   // 7852
	 * Get the zero plane either based on zero or on the min or max value.                                                // 7853
	 * Used in bar and area plots                                                                                         // 7854
	 */                                                                                                                   // 7855
	getThreshold: function (threshold) {                                                                                  // 7856
		var axis = this,                                                                                                     // 7857
			isLog = axis.isLog,                                                                                                 // 7858
			realMin = isLog ? lin2log(axis.min) : axis.min,                                                                     // 7859
			realMax = isLog ? lin2log(axis.max) : axis.max;                                                                     // 7860
                                                                                                                       // 7861
		// With a threshold of null, make the columns/areas rise from the top or bottom                                      // 7862
		// depending on the value, assuming an actual threshold of 0 (#4233).                                                // 7863
		if (threshold === null) {                                                                                            // 7864
			threshold = realMax < 0 ? realMax : realMin;                                                                        // 7865
		} else if (realMin > threshold) {                                                                                    // 7866
			threshold = realMin;                                                                                                // 7867
		} else if (realMax < threshold) {                                                                                    // 7868
			threshold = realMax;                                                                                                // 7869
		}                                                                                                                    // 7870
                                                                                                                       // 7871
		return axis.translate(threshold, 0, 1, 0, 1);                                                                        // 7872
	},                                                                                                                    // 7873
                                                                                                                       // 7874
	/**                                                                                                                   // 7875
	 * Compute auto alignment for the axis label based on which side the axis is on                                       // 7876
	 * and the given rotation for the label                                                                               // 7877
	 */                                                                                                                   // 7878
	autoLabelAlign: function (rotation) {                                                                                 // 7879
		var ret,                                                                                                             // 7880
			angle = (pick(rotation, 0) - (this.side * 90) + 720) % 360;                                                         // 7881
                                                                                                                       // 7882
		if (angle > 15 && angle < 165) {                                                                                     // 7883
			ret = 'right';                                                                                                      // 7884
		} else if (angle > 195 && angle < 345) {                                                                             // 7885
			ret = 'left';                                                                                                       // 7886
		} else {                                                                                                             // 7887
			ret = 'center';                                                                                                     // 7888
		}                                                                                                                    // 7889
		return ret;                                                                                                          // 7890
	},                                                                                                                    // 7891
                                                                                                                       // 7892
	/**                                                                                                                   // 7893
	 * Prevent the ticks from getting so close we can't draw the labels. On a horizontal                                  // 7894
	 * axis, this is handled by rotating the labels, removing ticks and adding ellipsis.                                  // 7895
	 * On a vertical axis remove ticks and add ellipsis.                                                                  // 7896
	 */                                                                                                                   // 7897
	unsquish: function () {                                                                                               // 7898
		var chart = this.chart,                                                                                              // 7899
			ticks = this.ticks,                                                                                                 // 7900
			labelOptions = this.options.labels,                                                                                 // 7901
			horiz = this.horiz,                                                                                                 // 7902
			tickInterval = this.tickInterval,                                                                                   // 7903
			newTickInterval = tickInterval,                                                                                     // 7904
			slotSize = this.len / (((this.categories ? 1 : 0) + this.max - this.min) / tickInterval),                           // 7905
			rotation,                                                                                                           // 7906
			rotationOption = labelOptions.rotation,                                                                             // 7907
			labelMetrics = chart.renderer.fontMetrics(labelOptions.style.fontSize, ticks[0] && ticks[0].label),                 // 7908
			step,                                                                                                               // 7909
			bestScore = Number.MAX_VALUE,                                                                                       // 7910
			autoRotation,                                                                                                       // 7911
			// Return the multiple of tickInterval that is needed to avoid collision                                            // 7912
			getStep = function (spaceNeeded) {                                                                                  // 7913
				var step = spaceNeeded / (slotSize || 1);                                                                          // 7914
				step = step > 1 ? mathCeil(step) : 1;                                                                              // 7915
				return step * tickInterval;                                                                                        // 7916
			};                                                                                                                  // 7917
		                                                                                                                     // 7918
		if (horiz) {                                                                                                         // 7919
			autoRotation = defined(rotationOption) ?                                                                            // 7920
				[rotationOption] :                                                                                                 // 7921
				slotSize < pick(labelOptions.autoRotationLimit, 80) && !labelOptions.staggerLines && !labelOptions.step && labelOptions.autoRotation;
                                                                                                                       // 7923
			if (autoRotation) {                                                                                                 // 7924
                                                                                                                       // 7925
				// Loop over the given autoRotation options, and determine which gives the best score. The                         // 7926
				// best score is that with the lowest number of steps and a rotation closest to horizontal.                        // 7927
				each(autoRotation, function (rot) {                                                                                // 7928
					var score;                                                                                                        // 7929
                                                                                                                       // 7930
					if (rot === rotationOption || (rot && rot >= -90 && rot <= 90)) { // #3891                                        // 7931
					                                                                                                                  // 7932
						step = getStep(mathAbs(labelMetrics.h / mathSin(deg2rad * rot)));                                                // 7933
                                                                                                                       // 7934
						score = step + mathAbs(rot / 360);                                                                               // 7935
                                                                                                                       // 7936
						if (score < bestScore) {                                                                                         // 7937
							bestScore = score;                                                                                              // 7938
							rotation = rot;                                                                                                 // 7939
							newTickInterval = step;                                                                                         // 7940
						}                                                                                                                // 7941
					}                                                                                                                 // 7942
				});                                                                                                                // 7943
			}                                                                                                                   // 7944
                                                                                                                       // 7945
		} else {                                                                                                             // 7946
			newTickInterval = getStep(labelMetrics.h);                                                                          // 7947
		}                                                                                                                    // 7948
                                                                                                                       // 7949
		this.autoRotation = autoRotation;                                                                                    // 7950
		this.labelRotation = rotation;                                                                                       // 7951
                                                                                                                       // 7952
		return newTickInterval;                                                                                              // 7953
	},                                                                                                                    // 7954
                                                                                                                       // 7955
	renderUnsquish: function () {                                                                                         // 7956
		var chart = this.chart,                                                                                              // 7957
			renderer = chart.renderer,                                                                                          // 7958
			tickPositions = this.tickPositions,                                                                                 // 7959
			ticks = this.ticks,                                                                                                 // 7960
			labelOptions = this.options.labels,                                                                                 // 7961
			horiz = this.horiz,                                                                                                 // 7962
			margin = chart.margin,                                                                                              // 7963
			slotCount = this.categories ? tickPositions.length : tickPositions.length - 1,                                      // 7964
			slotWidth = this.slotWidth = (horiz && !labelOptions.step && !labelOptions.rotation &&                              // 7965
				((this.staggerLines || 1) * chart.plotWidth) / slotCount) ||                                                       // 7966
				(!horiz && ((margin[3] && (margin[3] - chart.spacing[3])) || chart.chartWidth * 0.33)), // #1580, #1931,           // 7967
			innerWidth = mathMax(1, mathRound(slotWidth - 2 * (labelOptions.padding || 5))),                                    // 7968
			attr = {},                                                                                                          // 7969
			labelMetrics = renderer.fontMetrics(labelOptions.style.fontSize, ticks[0] && ticks[0].label),                       // 7970
			textOverflowOption = labelOptions.style.textOverflow,                                                               // 7971
			css,                                                                                                                // 7972
			labelLength = 0,                                                                                                    // 7973
			label,                                                                                                              // 7974
			i,                                                                                                                  // 7975
			pos;                                                                                                                // 7976
                                                                                                                       // 7977
		// Set rotation option unless it is "auto", like in gauges                                                           // 7978
		if (!isString(labelOptions.rotation)) {                                                                              // 7979
			attr.rotation = labelOptions.rotation;                                                                              // 7980
		}                                                                                                                    // 7981
		                                                                                                                     // 7982
		// Handle auto rotation on horizontal axis                                                                           // 7983
		if (this.autoRotation) {                                                                                             // 7984
                                                                                                                       // 7985
			// Get the longest label length                                                                                     // 7986
			each(tickPositions, function (tick) {                                                                               // 7987
				tick = ticks[tick];                                                                                                // 7988
				if (tick && tick.labelLength > labelLength) {                                                                      // 7989
					labelLength = tick.labelLength;                                                                                   // 7990
				}                                                                                                                  // 7991
			});                                                                                                                 // 7992
			                                                                                                                    // 7993
			// Apply rotation only if the label is too wide for the slot, and                                                   // 7994
			// the label is wider than its height.                                                                              // 7995
			if (labelLength > innerWidth && labelLength > labelMetrics.h) {                                                     // 7996
				attr.rotation = this.labelRotation;                                                                                // 7997
			} else {                                                                                                            // 7998
				this.labelRotation = 0;                                                                                            // 7999
			}                                                                                                                   // 8000
                                                                                                                       // 8001
		// Handle word-wrap or ellipsis on vertical axis                                                                     // 8002
		} else if (slotWidth) {                                                                                              // 8003
			// For word-wrap or ellipsis                                                                                        // 8004
			css = { width: innerWidth + PX };                                                                                   // 8005
                                                                                                                       // 8006
			if (!textOverflowOption) {                                                                                          // 8007
				css.textOverflow = 'clip';                                                                                         // 8008
                                                                                                                       // 8009
				// On vertical axis, only allow word wrap if there is room for more lines.                                         // 8010
				i = tickPositions.length;                                                                                          // 8011
				while (!horiz && i--) {                                                                                            // 8012
					pos = tickPositions[i];                                                                                           // 8013
					label = ticks[pos].label;                                                                                         // 8014
					if (label) {                                                                                                      // 8015
						// Reset ellipsis in order to get the correct bounding box (#4070)                                               // 8016
						if (label.styles.textOverflow === 'ellipsis') {                                                                  // 8017
							label.css({ textOverflow: 'clip' });                                                                            // 8018
						}                                                                                                                // 8019
						if (label.getBBox().height > this.len / tickPositions.length - (labelMetrics.h - labelMetrics.f)) {              // 8020
							label.specCss = { textOverflow: 'ellipsis' };                                                                   // 8021
						}                                                                                                                // 8022
					}                                                                                                                 // 8023
				}                                                                                                                  // 8024
			}                                                                                                                   // 8025
		}                                                                                                                    // 8026
                                                                                                                       // 8027
                                                                                                                       // 8028
		// Add ellipsis if the label length is significantly longer than ideal                                               // 8029
		if (attr.rotation) {                                                                                                 // 8030
			css = {                                                                                                             // 8031
				width: (labelLength > chart.chartHeight * 0.5 ? chart.chartHeight * 0.33 : chart.chartHeight) + PX                 // 8032
			};                                                                                                                  // 8033
			if (!textOverflowOption) {                                                                                          // 8034
				css.textOverflow = 'ellipsis';                                                                                     // 8035
			}                                                                                                                   // 8036
		}                                                                                                                    // 8037
                                                                                                                       // 8038
		// Set the explicit or automatic label alignment                                                                     // 8039
		this.labelAlign = attr.align = labelOptions.align || this.autoLabelAlign(this.labelRotation);                        // 8040
                                                                                                                       // 8041
		// Apply general and specific CSS                                                                                    // 8042
		each(tickPositions, function (pos) {                                                                                 // 8043
			var tick = ticks[pos],                                                                                              // 8044
				label = tick && tick.label;                                                                                        // 8045
			if (label) {                                                                                                        // 8046
				if (css) {                                                                                                         // 8047
					label.css(merge(css, label.specCss));                                                                             // 8048
				}                                                                                                                  // 8049
				delete label.specCss;                                                                                              // 8050
				label.attr(attr);                                                                                                  // 8051
				tick.rotation = attr.rotation;                                                                                     // 8052
			}                                                                                                                   // 8053
		});                                                                                                                  // 8054
                                                                                                                       // 8055
		// TODO: Why not part of getLabelPosition?                                                                           // 8056
		this.tickRotCorr = renderer.rotCorr(labelMetrics.b, this.labelRotation || 0, this.side === 2);                       // 8057
	},                                                                                                                    // 8058
                                                                                                                       // 8059
	/**                                                                                                                   // 8060
	 * Return true if the axis has associated data                                                                        // 8061
	 */                                                                                                                   // 8062
	hasData: function () {                                                                                                // 8063
		return this.hasVisibleSeries || (defined(this.min) && defined(this.max) && !!this.tickPositions);                    // 8064
	},                                                                                                                    // 8065
                                                                                                                       // 8066
	/**                                                                                                                   // 8067
	 * Render the tick labels to a preliminary position to get their sizes                                                // 8068
	 */                                                                                                                   // 8069
	getOffset: function () {                                                                                              // 8070
		var axis = this,                                                                                                     // 8071
			chart = axis.chart,                                                                                                 // 8072
			renderer = chart.renderer,                                                                                          // 8073
			options = axis.options,                                                                                             // 8074
			tickPositions = axis.tickPositions,                                                                                 // 8075
			ticks = axis.ticks,                                                                                                 // 8076
			horiz = axis.horiz,                                                                                                 // 8077
			side = axis.side,                                                                                                   // 8078
			invertedSide = chart.inverted ? [1, 0, 3, 2][side] : side,                                                          // 8079
			hasData,                                                                                                            // 8080
			showAxis,                                                                                                           // 8081
			titleOffset = 0,                                                                                                    // 8082
			titleOffsetOption,                                                                                                  // 8083
			titleMargin = 0,                                                                                                    // 8084
			axisTitleOptions = options.title,                                                                                   // 8085
			labelOptions = options.labels,                                                                                      // 8086
			labelOffset = 0, // reset                                                                                           // 8087
			labelOffsetPadded,                                                                                                  // 8088
			axisOffset = chart.axisOffset,                                                                                      // 8089
			clipOffset = chart.clipOffset,                                                                                      // 8090
			clip,                                                                                                               // 8091
			directionFactor = [-1, 1, 1, -1][side],                                                                             // 8092
			n,                                                                                                                  // 8093
			lineHeightCorrection;                                                                                               // 8094
                                                                                                                       // 8095
		// For reuse in Axis.render                                                                                          // 8096
		hasData = axis.hasData();                                                                                            // 8097
		axis.showAxis = showAxis = hasData || pick(options.showEmpty, true);                                                 // 8098
                                                                                                                       // 8099
		// Set/reset staggerLines                                                                                            // 8100
		axis.staggerLines = axis.horiz && labelOptions.staggerLines;                                                         // 8101
                                                                                                                       // 8102
		// Create the axisGroup and gridGroup elements on first iteration                                                    // 8103
		if (!axis.axisGroup) {                                                                                               // 8104
			axis.gridGroup = renderer.g('grid')                                                                                 // 8105
				.attr({ zIndex: options.gridZIndex || 1 })                                                                         // 8106
				.add();                                                                                                            // 8107
			axis.axisGroup = renderer.g('axis')                                                                                 // 8108
				.attr({ zIndex: options.zIndex || 2 })                                                                             // 8109
				.add();                                                                                                            // 8110
			axis.labelGroup = renderer.g('axis-labels')                                                                         // 8111
				.attr({ zIndex: labelOptions.zIndex || 7 })                                                                        // 8112
				.addClass(PREFIX + axis.coll.toLowerCase() + '-labels')                                                            // 8113
				.add();                                                                                                            // 8114
		}                                                                                                                    // 8115
                                                                                                                       // 8116
		if (hasData || axis.isLinked) {                                                                                      // 8117
			                                                                                                                    // 8118
			// Generate ticks                                                                                                   // 8119
			each(tickPositions, function (pos) {                                                                                // 8120
				if (!ticks[pos]) {                                                                                                 // 8121
					ticks[pos] = new Tick(axis, pos);                                                                                 // 8122
				} else {                                                                                                           // 8123
					ticks[pos].addLabel(); // update labels depending on tick interval                                                // 8124
				}                                                                                                                  // 8125
			});                                                                                                                 // 8126
                                                                                                                       // 8127
			axis.renderUnsquish();                                                                                              // 8128
                                                                                                                       // 8129
			each(tickPositions, function (pos) {                                                                                // 8130
				// left side must be align: right and right side must have align: left for labels                                  // 8131
				if (side === 0 || side === 2 || { 1: 'left', 3: 'right' }[side] === axis.labelAlign) {                             // 8132
                                                                                                                       // 8133
					// get the highest offset                                                                                         // 8134
					labelOffset = mathMax(                                                                                            // 8135
						ticks[pos].getLabelSize(),                                                                                       // 8136
						labelOffset                                                                                                      // 8137
					);                                                                                                                // 8138
				}                                                                                                                  // 8139
			});                                                                                                                 // 8140
                                                                                                                       // 8141
			if (axis.staggerLines) {                                                                                            // 8142
				labelOffset *= axis.staggerLines;                                                                                  // 8143
				axis.labelOffset = labelOffset;                                                                                    // 8144
			}                                                                                                                   // 8145
                                                                                                                       // 8146
                                                                                                                       // 8147
		} else { // doesn't have data                                                                                        // 8148
			for (n in ticks) {                                                                                                  // 8149
				ticks[n].destroy();                                                                                                // 8150
				delete ticks[n];                                                                                                   // 8151
			}                                                                                                                   // 8152
		}                                                                                                                    // 8153
                                                                                                                       // 8154
		if (axisTitleOptions && axisTitleOptions.text && axisTitleOptions.enabled !== false) {                               // 8155
			if (!axis.axisTitle) {                                                                                              // 8156
				axis.axisTitle = renderer.text(                                                                                    // 8157
					axisTitleOptions.text,                                                                                            // 8158
					0,                                                                                                                // 8159
					0,                                                                                                                // 8160
					axisTitleOptions.useHTML                                                                                          // 8161
				)                                                                                                                  // 8162
				.attr({                                                                                                            // 8163
					zIndex: 7,                                                                                                        // 8164
					rotation: axisTitleOptions.rotation || 0,                                                                         // 8165
					align:                                                                                                            // 8166
						axisTitleOptions.textAlign ||                                                                                    // 8167
						{ low: 'left', middle: 'center', high: 'right' }[axisTitleOptions.align]                                         // 8168
				})                                                                                                                 // 8169
				.addClass(PREFIX + this.coll.toLowerCase() + '-title')                                                             // 8170
				.css(axisTitleOptions.style)                                                                                       // 8171
				.add(axis.axisGroup);                                                                                              // 8172
				axis.axisTitle.isNew = true;                                                                                       // 8173
			}                                                                                                                   // 8174
                                                                                                                       // 8175
			if (showAxis) {                                                                                                     // 8176
				titleOffset = axis.axisTitle.getBBox()[horiz ? 'height' : 'width'];                                                // 8177
				titleOffsetOption = axisTitleOptions.offset;                                                                       // 8178
				titleMargin = defined(titleOffsetOption) ? 0 : pick(axisTitleOptions.margin, horiz ? 5 : 10);                      // 8179
			}                                                                                                                   // 8180
                                                                                                                       // 8181
			// hide or show the title depending on whether showEmpty is set                                                     // 8182
			axis.axisTitle[showAxis ? 'show' : 'hide']();                                                                       // 8183
		}                                                                                                                    // 8184
                                                                                                                       // 8185
		// handle automatic or user set offset                                                                               // 8186
		axis.offset = directionFactor * pick(options.offset, axisOffset[side]);                                              // 8187
                                                                                                                       // 8188
		axis.tickRotCorr = axis.tickRotCorr || { x: 0, y: 0 }; // polar                                                      // 8189
		lineHeightCorrection = side === 2 ? axis.tickRotCorr.y : 0;                                                          // 8190
		labelOffsetPadded = labelOffset + titleMargin +                                                                      // 8191
			(labelOffset && (directionFactor * (horiz ? pick(labelOptions.y, axis.tickRotCorr.y + 8) : labelOptions.x) - lineHeightCorrection));
		axis.axisTitleMargin = pick(titleOffsetOption, labelOffsetPadded);                                                   // 8193
                                                                                                                       // 8194
		axisOffset[side] = mathMax(                                                                                          // 8195
			axisOffset[side],                                                                                                   // 8196
			axis.axisTitleMargin + titleOffset + directionFactor * axis.offset,                                                 // 8197
			labelOffsetPadded // #3027                                                                                          // 8198
		);                                                                                                                   // 8199
                                                                                                                       // 8200
		// Decide the clipping needed to keep the graph inside the plot area and axis lines                                  // 8201
		clip = mathFloor(options.lineWidth / 2) * 2;                                                                         // 8202
		if (options.offset) {                                                                                                // 8203
			clip = mathMax(0, clip - options.offset);		                                                                         // 8204
		}                                                                                                                    // 8205
		clipOffset[invertedSide] = mathMax(clipOffset[invertedSide], clip);                                                  // 8206
	},                                                                                                                    // 8207
                                                                                                                       // 8208
	/**                                                                                                                   // 8209
	 * Get the path for the axis line                                                                                     // 8210
	 */                                                                                                                   // 8211
	getLinePath: function (lineWidth) {                                                                                   // 8212
		var chart = this.chart,                                                                                              // 8213
			opposite = this.opposite,                                                                                           // 8214
			offset = this.offset,                                                                                               // 8215
			horiz = this.horiz,                                                                                                 // 8216
			lineLeft = this.left + (opposite ? this.width : 0) + offset,                                                        // 8217
			lineTop = chart.chartHeight - this.bottom - (opposite ? this.height : 0) + offset;                                  // 8218
                                                                                                                       // 8219
		if (opposite) {                                                                                                      // 8220
			lineWidth *= -1; // crispify the other way - #1480, #1687                                                           // 8221
		}                                                                                                                    // 8222
                                                                                                                       // 8223
		return chart.renderer.crispLine([                                                                                    // 8224
				M,                                                                                                                 // 8225
				horiz ?                                                                                                            // 8226
					this.left :                                                                                                       // 8227
					lineLeft,                                                                                                         // 8228
				horiz ?                                                                                                            // 8229
					lineTop :                                                                                                         // 8230
					this.top,                                                                                                         // 8231
				L,                                                                                                                 // 8232
				horiz ?                                                                                                            // 8233
					chart.chartWidth - this.right :                                                                                   // 8234
					lineLeft,                                                                                                         // 8235
				horiz ?                                                                                                            // 8236
					lineTop :                                                                                                         // 8237
					chart.chartHeight - this.bottom                                                                                   // 8238
			], lineWidth);                                                                                                      // 8239
	},                                                                                                                    // 8240
                                                                                                                       // 8241
	/**                                                                                                                   // 8242
	 * Position the title                                                                                                 // 8243
	 */                                                                                                                   // 8244
	getTitlePosition: function () {                                                                                       // 8245
		// compute anchor points for each of the title align options                                                         // 8246
		var horiz = this.horiz,                                                                                              // 8247
			axisLeft = this.left,                                                                                               // 8248
			axisTop = this.top,                                                                                                 // 8249
			axisLength = this.len,                                                                                              // 8250
			axisTitleOptions = this.options.title,                                                                              // 8251
			margin = horiz ? axisLeft : axisTop,                                                                                // 8252
			opposite = this.opposite,                                                                                           // 8253
			offset = this.offset,                                                                                               // 8254
			xOption = axisTitleOptions.x || 0,                                                                                  // 8255
			yOption = axisTitleOptions.y || 0,                                                                                  // 8256
			fontSize = pInt(axisTitleOptions.style.fontSize || 12),                                                             // 8257
                                                                                                                       // 8258
			// the position in the length direction of the axis                                                                 // 8259
			alongAxis = {                                                                                                       // 8260
				low: margin + (horiz ? 0 : axisLength),                                                                            // 8261
				middle: margin + axisLength / 2,                                                                                   // 8262
				high: margin + (horiz ? axisLength : 0)                                                                            // 8263
			}[axisTitleOptions.align],                                                                                          // 8264
                                                                                                                       // 8265
			// the position in the perpendicular direction of the axis                                                          // 8266
			offAxis = (horiz ? axisTop + this.height : axisLeft) +                                                              // 8267
				(horiz ? 1 : -1) * // horizontal axis reverses the margin                                                          // 8268
				(opposite ? -1 : 1) * // so does opposite axes                                                                     // 8269
				this.axisTitleMargin +                                                                                             // 8270
				(this.side === 2 ? fontSize : 0);                                                                                  // 8271
                                                                                                                       // 8272
		return {                                                                                                             // 8273
			x: horiz ?                                                                                                          // 8274
				alongAxis + xOption :                                                                                              // 8275
				offAxis + (opposite ? this.width : 0) + offset + xOption,                                                          // 8276
			y: horiz ?                                                                                                          // 8277
				offAxis + yOption - (opposite ? this.height : 0) + offset :                                                        // 8278
				alongAxis + yOption                                                                                                // 8279
		};                                                                                                                   // 8280
	},                                                                                                                    // 8281
                                                                                                                       // 8282
	/**                                                                                                                   // 8283
	 * Render the axis                                                                                                    // 8284
	 */                                                                                                                   // 8285
	render: function () {                                                                                                 // 8286
		var axis = this,                                                                                                     // 8287
			chart = axis.chart,                                                                                                 // 8288
			renderer = chart.renderer,                                                                                          // 8289
			options = axis.options,                                                                                             // 8290
			isLog = axis.isLog,                                                                                                 // 8291
			isLinked = axis.isLinked,                                                                                           // 8292
			tickPositions = axis.tickPositions,                                                                                 // 8293
			axisTitle = axis.axisTitle,			                                                                                      // 8294
			ticks = axis.ticks,                                                                                                 // 8295
			minorTicks = axis.minorTicks,                                                                                       // 8296
			alternateBands = axis.alternateBands,                                                                               // 8297
			stackLabelOptions = options.stackLabels,                                                                            // 8298
			alternateGridColor = options.alternateGridColor,                                                                    // 8299
			tickmarkOffset = axis.tickmarkOffset,                                                                               // 8300
			lineWidth = options.lineWidth,                                                                                      // 8301
			linePath,                                                                                                           // 8302
			hasRendered = chart.hasRendered,                                                                                    // 8303
			slideInTicks = hasRendered && defined(axis.oldMin) && !isNaN(axis.oldMin),                                          // 8304
			showAxis = axis.showAxis,                                                                                           // 8305
			from,                                                                                                               // 8306
			to;                                                                                                                 // 8307
                                                                                                                       // 8308
		// Reset                                                                                                             // 8309
		axis.labelEdge.length = 0;                                                                                           // 8310
		//axis.justifyToPlot = overflow === 'justify';                                                                       // 8311
		axis.overlap = false;                                                                                                // 8312
                                                                                                                       // 8313
		// Mark all elements inActive before we go over and mark the active ones                                             // 8314
		each([ticks, minorTicks, alternateBands], function (coll) {                                                          // 8315
			var pos;                                                                                                            // 8316
			for (pos in coll) {                                                                                                 // 8317
				coll[pos].isActive = false;                                                                                        // 8318
			}                                                                                                                   // 8319
		});                                                                                                                  // 8320
                                                                                                                       // 8321
		// If the series has data draw the ticks. Else only the line and title                                               // 8322
		if (axis.hasData() || isLinked) {                                                                                    // 8323
                                                                                                                       // 8324
			// minor ticks                                                                                                      // 8325
			if (axis.minorTickInterval && !axis.categories) {                                                                   // 8326
				each(axis.getMinorTickPositions(), function (pos) {                                                                // 8327
					if (!minorTicks[pos]) {                                                                                           // 8328
						minorTicks[pos] = new Tick(axis, pos, 'minor');                                                                  // 8329
					}                                                                                                                 // 8330
                                                                                                                       // 8331
					// render new ticks in old position                                                                               // 8332
					if (slideInTicks && minorTicks[pos].isNew) {                                                                      // 8333
						minorTicks[pos].render(null, true);                                                                              // 8334
					}                                                                                                                 // 8335
                                                                                                                       // 8336
					minorTicks[pos].render(null, false, 1);                                                                           // 8337
				});                                                                                                                // 8338
			}                                                                                                                   // 8339
                                                                                                                       // 8340
			// Major ticks. Pull out the first item and render it last so that                                                  // 8341
			// we can get the position of the neighbour label. #808.                                                            // 8342
			if (tickPositions.length) { // #1300                                                                                // 8343
				each(tickPositions, function (pos, i) {                                                                            // 8344
                                                                                                                       // 8345
					// linked axes need an extra check to find out if                                                                 // 8346
					if (!isLinked || (pos >= axis.min && pos <= axis.max)) {                                                          // 8347
                                                                                                                       // 8348
						if (!ticks[pos]) {                                                                                               // 8349
							ticks[pos] = new Tick(axis, pos);                                                                               // 8350
						}                                                                                                                // 8351
                                                                                                                       // 8352
						// render new ticks in old position                                                                              // 8353
						if (slideInTicks && ticks[pos].isNew) {                                                                          // 8354
							ticks[pos].render(i, true, 0.1);                                                                                // 8355
						}                                                                                                                // 8356
                                                                                                                       // 8357
						ticks[pos].render(i);                                                                                            // 8358
					}                                                                                                                 // 8359
                                                                                                                       // 8360
				});                                                                                                                // 8361
				// In a categorized axis, the tick marks are displayed between labels. So                                          // 8362
				// we need to add a tick mark and grid line at the left edge of the X axis.                                        // 8363
				if (tickmarkOffset && (axis.min === 0 || axis.single)) {                                                           // 8364
					if (!ticks[-1]) {                                                                                                 // 8365
						ticks[-1] = new Tick(axis, -1, null, true);                                                                      // 8366
					}                                                                                                                 // 8367
					ticks[-1].render(-1);                                                                                             // 8368
				}                                                                                                                  // 8369
                                                                                                                       // 8370
			}                                                                                                                   // 8371
                                                                                                                       // 8372
			// alternate grid color                                                                                             // 8373
			if (alternateGridColor) {                                                                                           // 8374
				each(tickPositions, function (pos, i) {                                                                            // 8375
					if (i % 2 === 0 && pos < axis.max) {                                                                              // 8376
						if (!alternateBands[pos]) {                                                                                      // 8377
							alternateBands[pos] = new Highcharts.PlotLineOrBand(axis);                                                      // 8378
						}                                                                                                                // 8379
						from = pos + tickmarkOffset; // #949                                                                             // 8380
						to = tickPositions[i + 1] !== UNDEFINED ? tickPositions[i + 1] + tickmarkOffset : axis.max;                      // 8381
						alternateBands[pos].options = {                                                                                  // 8382
							from: isLog ? lin2log(from) : from,                                                                             // 8383
							to: isLog ? lin2log(to) : to,                                                                                   // 8384
							color: alternateGridColor                                                                                       // 8385
						};                                                                                                               // 8386
						alternateBands[pos].render();                                                                                    // 8387
						alternateBands[pos].isActive = true;                                                                             // 8388
					}                                                                                                                 // 8389
				});                                                                                                                // 8390
			}                                                                                                                   // 8391
                                                                                                                       // 8392
			// custom plot lines and bands                                                                                      // 8393
			if (!axis._addedPlotLB) { // only first time                                                                        // 8394
				each((options.plotLines || []).concat(options.plotBands || []), function (plotLineOptions) {                       // 8395
					axis.addPlotBandOrLine(plotLineOptions);                                                                          // 8396
				});                                                                                                                // 8397
				axis._addedPlotLB = true;                                                                                          // 8398
			}                                                                                                                   // 8399
                                                                                                                       // 8400
		} // end if hasData                                                                                                  // 8401
                                                                                                                       // 8402
		// Remove inactive ticks                                                                                             // 8403
		each([ticks, minorTicks, alternateBands], function (coll) {                                                          // 8404
			var pos,                                                                                                            // 8405
				i,                                                                                                                 // 8406
				forDestruction = [],                                                                                               // 8407
				delay = globalAnimation ? globalAnimation.duration || 500 : 0,                                                     // 8408
				destroyInactiveItems = function () {                                                                               // 8409
					i = forDestruction.length;                                                                                        // 8410
					while (i--) {                                                                                                     // 8411
						// When resizing rapidly, the same items may be destroyed in different timeouts,                                 // 8412
						// or the may be reactivated                                                                                     // 8413
						if (coll[forDestruction[i]] && !coll[forDestruction[i]].isActive) {                                              // 8414
							coll[forDestruction[i]].destroy();                                                                              // 8415
							delete coll[forDestruction[i]];                                                                                 // 8416
						}                                                                                                                // 8417
					}                                                                                                                 // 8418
                                                                                                                       // 8419
				};                                                                                                                 // 8420
                                                                                                                       // 8421
			for (pos in coll) {                                                                                                 // 8422
                                                                                                                       // 8423
				if (!coll[pos].isActive) {                                                                                         // 8424
					// Render to zero opacity                                                                                         // 8425
					coll[pos].render(pos, false, 0);                                                                                  // 8426
					coll[pos].isActive = false;                                                                                       // 8427
					forDestruction.push(pos);                                                                                         // 8428
				}                                                                                                                  // 8429
			}                                                                                                                   // 8430
                                                                                                                       // 8431
			// When the objects are finished fading out, destroy them                                                           // 8432
			if (coll === alternateBands || !chart.hasRendered || !delay) {                                                      // 8433
				destroyInactiveItems();                                                                                            // 8434
			} else if (delay) {                                                                                                 // 8435
				setTimeout(destroyInactiveItems, delay);                                                                           // 8436
			}                                                                                                                   // 8437
		});                                                                                                                  // 8438
                                                                                                                       // 8439
		// Static items. As the axis group is cleared on subsequent calls                                                    // 8440
		// to render, these items are added outside the group.                                                               // 8441
		// axis line                                                                                                         // 8442
		if (lineWidth) {                                                                                                     // 8443
			linePath = axis.getLinePath(lineWidth);                                                                             // 8444
			if (!axis.axisLine) {                                                                                               // 8445
				axis.axisLine = renderer.path(linePath)                                                                            // 8446
					.attr({                                                                                                           // 8447
						stroke: options.lineColor,                                                                                       // 8448
						'stroke-width': lineWidth,                                                                                       // 8449
						zIndex: 7                                                                                                        // 8450
					})                                                                                                                // 8451
					.add(axis.axisGroup);                                                                                             // 8452
			} else {                                                                                                            // 8453
				axis.axisLine.animate({ d: linePath });                                                                            // 8454
			}                                                                                                                   // 8455
                                                                                                                       // 8456
			// show or hide the line depending on options.showEmpty                                                             // 8457
			axis.axisLine[showAxis ? 'show' : 'hide']();                                                                        // 8458
		}                                                                                                                    // 8459
                                                                                                                       // 8460
		if (axisTitle && showAxis) {                                                                                         // 8461
                                                                                                                       // 8462
			axisTitle[axisTitle.isNew ? 'attr' : 'animate'](                                                                    // 8463
				axis.getTitlePosition()                                                                                            // 8464
			);                                                                                                                  // 8465
			axisTitle.isNew = false;                                                                                            // 8466
		}                                                                                                                    // 8467
                                                                                                                       // 8468
		// Stacked totals:                                                                                                   // 8469
		if (stackLabelOptions && stackLabelOptions.enabled) {                                                                // 8470
			axis.renderStackTotals();                                                                                           // 8471
		}                                                                                                                    // 8472
		// End stacked totals                                                                                                // 8473
                                                                                                                       // 8474
		axis.isDirty = false;                                                                                                // 8475
	},                                                                                                                    // 8476
                                                                                                                       // 8477
	/**                                                                                                                   // 8478
	 * Redraw the axis to reflect changes in the data or axis extremes                                                    // 8479
	 */                                                                                                                   // 8480
	redraw: function () {                                                                                                 // 8481
		                                                                                                                     // 8482
		// render the axis                                                                                                   // 8483
		this.render();                                                                                                       // 8484
                                                                                                                       // 8485
		// move plot lines and bands                                                                                         // 8486
		each(this.plotLinesAndBands, function (plotLine) {                                                                   // 8487
			plotLine.render();                                                                                                  // 8488
		});                                                                                                                  // 8489
                                                                                                                       // 8490
		// mark associated series as dirty and ready for redraw                                                              // 8491
		each(this.series, function (series) {                                                                                // 8492
			series.isDirty = true;                                                                                              // 8493
		});                                                                                                                  // 8494
                                                                                                                       // 8495
	},                                                                                                                    // 8496
                                                                                                                       // 8497
	/**                                                                                                                   // 8498
	 * Destroys an Axis instance.                                                                                         // 8499
	 */                                                                                                                   // 8500
	destroy: function (keepEvents) {                                                                                      // 8501
		var axis = this,                                                                                                     // 8502
			stacks = axis.stacks,                                                                                               // 8503
			stackKey,                                                                                                           // 8504
			plotLinesAndBands = axis.plotLinesAndBands,                                                                         // 8505
			i;                                                                                                                  // 8506
                                                                                                                       // 8507
		// Remove the events                                                                                                 // 8508
		if (!keepEvents) {                                                                                                   // 8509
			removeEvent(axis);                                                                                                  // 8510
		}                                                                                                                    // 8511
                                                                                                                       // 8512
		// Destroy each stack total                                                                                          // 8513
		for (stackKey in stacks) {                                                                                           // 8514
			destroyObjectProperties(stacks[stackKey]);                                                                          // 8515
                                                                                                                       // 8516
			stacks[stackKey] = null;                                                                                            // 8517
		}                                                                                                                    // 8518
                                                                                                                       // 8519
		// Destroy collections                                                                                               // 8520
		each([axis.ticks, axis.minorTicks, axis.alternateBands], function (coll) {                                           // 8521
			destroyObjectProperties(coll);                                                                                      // 8522
		});                                                                                                                  // 8523
		i = plotLinesAndBands.length;                                                                                        // 8524
		while (i--) { // #1975                                                                                               // 8525
			plotLinesAndBands[i].destroy();                                                                                     // 8526
		}                                                                                                                    // 8527
                                                                                                                       // 8528
		// Destroy local variables                                                                                           // 8529
		each(['stackTotalGroup', 'axisLine', 'axisTitle', 'axisGroup', 'cross', 'gridGroup', 'labelGroup'], function (prop) {
			if (axis[prop]) {                                                                                                   // 8531
				axis[prop] = axis[prop].destroy();                                                                                 // 8532
			}                                                                                                                   // 8533
		});                                                                                                                  // 8534
                                                                                                                       // 8535
		// Destroy crosshair                                                                                                 // 8536
		if (this.cross) {                                                                                                    // 8537
			this.cross.destroy();                                                                                               // 8538
		}                                                                                                                    // 8539
	},                                                                                                                    // 8540
                                                                                                                       // 8541
	/**                                                                                                                   // 8542
	 * Draw the crosshair                                                                                                 // 8543
	 */                                                                                                                   // 8544
	drawCrosshair: function (e, point) { // docs: Missing docs for Axis.crosshair. Also for properties.                   // 8545
                                                                                                                       // 8546
		var path,                                                                                                            // 8547
			options = this.crosshair,                                                                                           // 8548
			animation = options.animation,                                                                                      // 8549
			pos,                                                                                                                // 8550
			attribs,                                                                                                            // 8551
			categorized;                                                                                                        // 8552
		                                                                                                                     // 8553
		if (                                                                                                                 // 8554
			// Disabled in options                                                                                              // 8555
			!this.crosshair ||                                                                                                  // 8556
			// Snap                                                                                                             // 8557
			((defined(point) || !pick(this.crosshair.snap, true)) === false) ||                                                 // 8558
			// Not on this axis (#4095, #2888)                                                                                  // 8559
			(point && point.series && point.series[this.coll] !== this)                                                         // 8560
		) {                                                                                                                  // 8561
			this.hideCrosshair();                                                                                               // 8562
		                                                                                                                     // 8563
		} else {			                                                                                                          // 8564
                                                                                                                       // 8565
			// Get the path                                                                                                     // 8566
			if (!pick(options.snap, true)) {                                                                                    // 8567
				pos = (this.horiz ? e.chartX - this.pos : this.len - e.chartY + this.pos);                                         // 8568
			} else if (defined(point)) {                                                                                        // 8569
				/*jslint eqeq: true*/                                                                                              // 8570
				pos = this.isXAxis ? point.plotX : this.len - point.plotY; // #3834                                                // 8571
				/*jslint eqeq: false*/                                                                                             // 8572
			}                                                                                                                   // 8573
                                                                                                                       // 8574
			if (this.isRadial) {                                                                                                // 8575
				path = this.getPlotLinePath(this.isXAxis ? point.x : pick(point.stackY, point.y)) || null; // #3189                // 8576
			} else {                                                                                                            // 8577
				path = this.getPlotLinePath(null, null, null, null, pos) || null; // #3189                                         // 8578
			}                                                                                                                   // 8579
                                                                                                                       // 8580
			if (path === null) {                                                                                                // 8581
				this.hideCrosshair();                                                                                              // 8582
				return;                                                                                                            // 8583
			}                                                                                                                   // 8584
                                                                                                                       // 8585
			// Draw the cross                                                                                                   // 8586
			if (this.cross) {                                                                                                   // 8587
				this.cross                                                                                                         // 8588
					.attr({ visibility: VISIBLE })[animation ? 'animate' : 'attr']({ d: path }, animation);                           // 8589
			} else {                                                                                                            // 8590
				categorized = this.categories && !this.isRadial;                                                                   // 8591
				attribs = {                                                                                                        // 8592
					'stroke-width': options.width || (categorized ? this.transA : 1),                                                 // 8593
					stroke: options.color || (categorized ? 'rgba(155,200,255,0.2)' : '#C0C0C0'),                                     // 8594
					zIndex: options.zIndex || 2                                                                                       // 8595
				};                                                                                                                 // 8596
				if (options.dashStyle) {                                                                                           // 8597
					attribs.dashstyle = options.dashStyle;                                                                            // 8598
				}                                                                                                                  // 8599
				this.cross = this.chart.renderer.path(path).attr(attribs).add();                                                   // 8600
			}                                                                                                                   // 8601
                                                                                                                       // 8602
		}                                                                                                                    // 8603
                                                                                                                       // 8604
	},                                                                                                                    // 8605
                                                                                                                       // 8606
	/**                                                                                                                   // 8607
	 *	Hide the crosshair.                                                                                                // 8608
	 */                                                                                                                   // 8609
	hideCrosshair: function () {                                                                                          // 8610
		if (this.cross) {                                                                                                    // 8611
			this.cross.hide();                                                                                                  // 8612
		}                                                                                                                    // 8613
	}                                                                                                                     // 8614
}; // end Axis                                                                                                         // 8615
                                                                                                                       // 8616
extend(Axis.prototype, AxisPlotLineOrBandExtension);                                                                   // 8617
                                                                                                                       // 8618
/**                                                                                                                    // 8619
 * Set the tick positions to a time unit that makes sense, for example                                                 // 8620
 * on the first of each month or on every Monday. Return an array                                                      // 8621
 * with the time positions. Used in datetime axes as well as for grouping                                              // 8622
 * data on a datetime axis.                                                                                            // 8623
 *                                                                                                                     // 8624
 * @param {Object} normalizedInterval The interval in axis values (ms) and the count                                   // 8625
 * @param {Number} min The minimum in axis values                                                                      // 8626
 * @param {Number} max The maximum in axis values                                                                      // 8627
 * @param {Number} startOfWeek                                                                                         // 8628
 */                                                                                                                    // 8629
Axis.prototype.getTimeTicks = function (normalizedInterval, min, max, startOfWeek) {                                   // 8630
	var tickPositions = [],                                                                                               // 8631
		i,                                                                                                                   // 8632
		higherRanks = {},                                                                                                    // 8633
		useUTC = defaultOptions.global.useUTC,                                                                               // 8634
		minYear, // used in months and years as a basis for Date.UTC()                                                       // 8635
		minDate = new Date(min - getTZOffset(min)),                                                                          // 8636
		interval = normalizedInterval.unitRange,                                                                             // 8637
		count = normalizedInterval.count;                                                                                    // 8638
                                                                                                                       // 8639
	if (defined(min)) { // #1300                                                                                          // 8640
		minDate[setMilliseconds](interval >= timeUnits.second ? 0 : // #3935                                                 // 8641
			count * mathFloor(minDate.getMilliseconds() / count)); // #3652, #3654                                              // 8642
                                                                                                                       // 8643
		if (interval >= timeUnits.second) { // second                                                                        // 8644
			minDate[setSeconds](interval >= timeUnits.minute ? 0 : // #3935                                                     // 8645
				count * mathFloor(minDate.getSeconds() / count));                                                                  // 8646
		}                                                                                                                    // 8647
	                                                                                                                      // 8648
		if (interval >= timeUnits.minute) { // minute                                                                        // 8649
			minDate[setMinutes](interval >= timeUnits.hour ? 0 :                                                                // 8650
				count * mathFloor(minDate[getMinutes]() / count));                                                                 // 8651
		}                                                                                                                    // 8652
	                                                                                                                      // 8653
		if (interval >= timeUnits.hour) { // hour                                                                            // 8654
			minDate[setHours](interval >= timeUnits.day ? 0 :                                                                   // 8655
				count * mathFloor(minDate[getHours]() / count));                                                                   // 8656
		}                                                                                                                    // 8657
	                                                                                                                      // 8658
		if (interval >= timeUnits.day) { // day                                                                              // 8659
			minDate[setDate](interval >= timeUnits.month ? 1 :                                                                  // 8660
				count * mathFloor(minDate[getDate]() / count));                                                                    // 8661
		}                                                                                                                    // 8662
	                                                                                                                      // 8663
		if (interval >= timeUnits.month) { // month                                                                          // 8664
			minDate[setMonth](interval >= timeUnits.year ? 0 :                                                                  // 8665
				count * mathFloor(minDate[getMonth]() / count));                                                                   // 8666
			minYear = minDate[getFullYear]();                                                                                   // 8667
		}                                                                                                                    // 8668
	                                                                                                                      // 8669
		if (interval >= timeUnits.year) { // year                                                                            // 8670
			minYear -= minYear % count;                                                                                         // 8671
			minDate[setFullYear](minYear);                                                                                      // 8672
		}                                                                                                                    // 8673
	                                                                                                                      // 8674
		// week is a special case that runs outside the hierarchy                                                            // 8675
		if (interval === timeUnits.week) {                                                                                   // 8676
			// get start of current week, independent of count                                                                  // 8677
			minDate[setDate](minDate[getDate]() - minDate[getDay]() +                                                           // 8678
				pick(startOfWeek, 1));                                                                                             // 8679
		}                                                                                                                    // 8680
	                                                                                                                      // 8681
	                                                                                                                      // 8682
		// get tick positions                                                                                                // 8683
		i = 1;                                                                                                               // 8684
		if (timezoneOffset || getTimezoneOffset) {                                                                           // 8685
			minDate = minDate.getTime();                                                                                        // 8686
			minDate = new Date(minDate + getTZOffset(minDate));                                                                 // 8687
		}                                                                                                                    // 8688
		minYear = minDate[getFullYear]();                                                                                    // 8689
		var time = minDate.getTime(),                                                                                        // 8690
			minMonth = minDate[getMonth](),                                                                                     // 8691
			minDateDate = minDate[getDate](),                                                                                   // 8692
			localTimezoneOffset = (timeUnits.day +                                                                              // 8693
					(useUTC ? getTZOffset(minDate) : minDate.getTimezoneOffset() * 60 * 1000)                                         // 8694
				) % timeUnits.day; // #950, #3359                                                                                  // 8695
	                                                                                                                      // 8696
		// iterate and add tick positions at appropriate values                                                              // 8697
		while (time < max) {                                                                                                 // 8698
			tickPositions.push(time);                                                                                           // 8699
	                                                                                                                      // 8700
			// if the interval is years, use Date.UTC to increase years                                                         // 8701
			if (interval === timeUnits.year) {                                                                                  // 8702
				time = makeTime(minYear + i * count, 0);                                                                           // 8703
	                                                                                                                      // 8704
			// if the interval is months, use Date.UTC to increase months                                                       // 8705
			} else if (interval === timeUnits.month) {                                                                          // 8706
				time = makeTime(minYear, minMonth + i * count);                                                                    // 8707
	                                                                                                                      // 8708
			// if we're using global time, the interval is not fixed as it jumps                                                // 8709
			// one hour at the DST crossover                                                                                    // 8710
			} else if (!useUTC && (interval === timeUnits.day || interval === timeUnits.week)) {                                // 8711
				time = makeTime(minYear, minMonth, minDateDate +                                                                   // 8712
					i * count * (interval === timeUnits.day ? 1 : 7));                                                                // 8713
	                                                                                                                      // 8714
			// else, the interval is fixed and we use simple addition                                                           // 8715
			} else {                                                                                                            // 8716
				time += interval * count;                                                                                          // 8717
			}                                                                                                                   // 8718
	                                                                                                                      // 8719
			i++;                                                                                                                // 8720
		}                                                                                                                    // 8721
	                                                                                                                      // 8722
		// push the last time                                                                                                // 8723
		tickPositions.push(time);                                                                                            // 8724
                                                                                                                       // 8725
                                                                                                                       // 8726
		// mark new days if the time is dividible by day (#1649, #1760)                                                      // 8727
		each(grep(tickPositions, function (time) {                                                                           // 8728
			return interval <= timeUnits.hour && time % timeUnits.day === localTimezoneOffset;                                  // 8729
		}), function (time) {                                                                                                // 8730
			higherRanks[time] = 'day';                                                                                          // 8731
		});                                                                                                                  // 8732
	}                                                                                                                     // 8733
                                                                                                                       // 8734
                                                                                                                       // 8735
	// record information on the chosen unit - for dynamic label formatter                                                // 8736
	tickPositions.info = extend(normalizedInterval, {                                                                     // 8737
		higherRanks: higherRanks,                                                                                            // 8738
		totalRange: interval * count                                                                                         // 8739
	});                                                                                                                   // 8740
                                                                                                                       // 8741
	return tickPositions;                                                                                                 // 8742
};                                                                                                                     // 8743
                                                                                                                       // 8744
/**                                                                                                                    // 8745
 * Get a normalized tick interval for dates. Returns a configuration object with                                       // 8746
 * unit range (interval), count and name. Used to prepare data for getTimeTicks.                                       // 8747
 * Previously this logic was part of getTimeTicks, but as getTimeTicks now runs                                        // 8748
 * of segments in stock charts, the normalizing logic was extracted in order to                                        // 8749
 * prevent it for running over again for each segment having the same interval.                                        // 8750
 * #662, #697.                                                                                                         // 8751
 */                                                                                                                    // 8752
Axis.prototype.normalizeTimeTickInterval = function (tickInterval, unitsOption) {                                      // 8753
	var units = unitsOption || [[                                                                                         // 8754
				'millisecond', // unit name                                                                                        // 8755
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples                                                      // 8756
			], [                                                                                                                // 8757
				'second',                                                                                                          // 8758
				[1, 2, 5, 10, 15, 30]                                                                                              // 8759
			], [                                                                                                                // 8760
				'minute',                                                                                                          // 8761
				[1, 2, 5, 10, 15, 30]                                                                                              // 8762
			], [                                                                                                                // 8763
				'hour',                                                                                                            // 8764
				[1, 2, 3, 4, 6, 8, 12]                                                                                             // 8765
			], [                                                                                                                // 8766
				'day',                                                                                                             // 8767
				[1, 2]                                                                                                             // 8768
			], [                                                                                                                // 8769
				'week',                                                                                                            // 8770
				[1, 2]                                                                                                             // 8771
			], [                                                                                                                // 8772
				'month',                                                                                                           // 8773
				[1, 2, 3, 4, 6]                                                                                                    // 8774
			], [                                                                                                                // 8775
				'year',                                                                                                            // 8776
				null                                                                                                               // 8777
			]],                                                                                                                 // 8778
		unit = units[units.length - 1], // default unit is years                                                             // 8779
		interval = timeUnits[unit[0]],                                                                                       // 8780
		multiples = unit[1],                                                                                                 // 8781
		count,                                                                                                               // 8782
		i;                                                                                                                   // 8783
		                                                                                                                     // 8784
	// loop through the units to find the one that best fits the tickInterval                                             // 8785
	for (i = 0; i < units.length; i++) {                                                                                  // 8786
		unit = units[i];                                                                                                     // 8787
		interval = timeUnits[unit[0]];                                                                                       // 8788
		multiples = unit[1];                                                                                                 // 8789
                                                                                                                       // 8790
                                                                                                                       // 8791
		if (units[i + 1]) {                                                                                                  // 8792
			// lessThan is in the middle between the highest multiple and the next unit.                                        // 8793
			var lessThan = (interval * multiples[multiples.length - 1] +                                                        // 8794
						timeUnits[units[i + 1][0]]) / 2;                                                                                 // 8795
                                                                                                                       // 8796
			// break and keep the current unit                                                                                  // 8797
			if (tickInterval <= lessThan) {                                                                                     // 8798
				break;                                                                                                             // 8799
			}                                                                                                                   // 8800
		}                                                                                                                    // 8801
	}                                                                                                                     // 8802
                                                                                                                       // 8803
	// prevent 2.5 years intervals, though 25, 250 etc. are allowed                                                       // 8804
	if (interval === timeUnits.year && tickInterval < 5 * interval) {                                                     // 8805
		multiples = [1, 2, 5];                                                                                               // 8806
	}                                                                                                                     // 8807
                                                                                                                       // 8808
	// get the count                                                                                                      // 8809
	count = normalizeTickInterval(                                                                                        // 8810
		tickInterval / interval,                                                                                             // 8811
		multiples,                                                                                                           // 8812
		unit[0] === 'year' ? mathMax(getMagnitude(tickInterval / interval), 1) : 1 // #1913, #2360                           // 8813
	);                                                                                                                    // 8814
	                                                                                                                      // 8815
	return {                                                                                                              // 8816
		unitRange: interval,                                                                                                 // 8817
		count: count,                                                                                                        // 8818
		unitName: unit[0]                                                                                                    // 8819
	};                                                                                                                    // 8820
};/**                                                                                                                  // 8821
 * Methods defined on the Axis prototype                                                                               // 8822
 */                                                                                                                    // 8823
                                                                                                                       // 8824
/**                                                                                                                    // 8825
 * Set the tick positions of a logarithmic axis                                                                        // 8826
 */                                                                                                                    // 8827
Axis.prototype.getLogTickPositions = function (interval, min, max, minor) {                                            // 8828
	var axis = this,                                                                                                      // 8829
		options = axis.options,                                                                                              // 8830
		axisLength = axis.len,                                                                                               // 8831
		// Since we use this method for both major and minor ticks,                                                          // 8832
		// use a local variable and return the result                                                                        // 8833
		positions = [];                                                                                                      // 8834
	                                                                                                                      // 8835
	// Reset                                                                                                              // 8836
	if (!minor) {                                                                                                         // 8837
		axis._minorAutoInterval = null;                                                                                      // 8838
	}                                                                                                                     // 8839
	                                                                                                                      // 8840
	// First case: All ticks fall on whole logarithms: 1, 10, 100 etc.                                                    // 8841
	if (interval >= 0.5) {                                                                                                // 8842
		interval = mathRound(interval);                                                                                      // 8843
		positions = axis.getLinearTickPositions(interval, min, max);                                                         // 8844
		                                                                                                                     // 8845
	// Second case: We need intermediary ticks. For example                                                               // 8846
	// 1, 2, 4, 6, 8, 10, 20, 40 etc.                                                                                     // 8847
	} else if (interval >= 0.08) {                                                                                        // 8848
		var roundedMin = mathFloor(min),                                                                                     // 8849
			intermediate,                                                                                                       // 8850
			i,                                                                                                                  // 8851
			j,                                                                                                                  // 8852
			len,                                                                                                                // 8853
			pos,                                                                                                                // 8854
			lastPos,                                                                                                            // 8855
			break2;                                                                                                             // 8856
			                                                                                                                    // 8857
		if (interval > 0.3) {                                                                                                // 8858
			intermediate = [1, 2, 4];                                                                                           // 8859
		} else if (interval > 0.15) { // 0.2 equals five minor ticks per 1, 10, 100 etc                                      // 8860
			intermediate = [1, 2, 4, 6, 8];                                                                                     // 8861
		} else { // 0.1 equals ten minor ticks per 1, 10, 100 etc                                                            // 8862
			intermediate = [1, 2, 3, 4, 5, 6, 7, 8, 9];                                                                         // 8863
		}                                                                                                                    // 8864
		                                                                                                                     // 8865
		for (i = roundedMin; i < max + 1 && !break2; i++) {                                                                  // 8866
			len = intermediate.length;                                                                                          // 8867
			for (j = 0; j < len && !break2; j++) {                                                                              // 8868
				pos = log2lin(lin2log(i) * intermediate[j]);                                                                       // 8869
				if (pos > min && (!minor || lastPos <= max) && lastPos !== UNDEFINED) { // #1670, lastPos is #3113                 // 8870
					positions.push(lastPos);                                                                                          // 8871
				}                                                                                                                  // 8872
				                                                                                                                   // 8873
				if (lastPos > max) {                                                                                               // 8874
					break2 = true;                                                                                                    // 8875
				}                                                                                                                  // 8876
				lastPos = pos;                                                                                                     // 8877
			}                                                                                                                   // 8878
		}                                                                                                                    // 8879
		                                                                                                                     // 8880
	// Third case: We are so deep in between whole logarithmic values that                                                // 8881
	// we might as well handle the tick positions like a linear axis. For                                                 // 8882
	// example 1.01, 1.02, 1.03, 1.04.                                                                                    // 8883
	} else {                                                                                                              // 8884
		var realMin = lin2log(min),                                                                                          // 8885
			realMax = lin2log(max),                                                                                             // 8886
			tickIntervalOption = options[minor ? 'minorTickInterval' : 'tickInterval'],                                         // 8887
			filteredTickIntervalOption = tickIntervalOption === 'auto' ? null : tickIntervalOption,                             // 8888
			tickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1),                                              // 8889
			totalPixelLength = minor ? axisLength / axis.tickPositions.length : axisLength;                                     // 8890
		                                                                                                                     // 8891
		interval = pick(                                                                                                     // 8892
			filteredTickIntervalOption,                                                                                         // 8893
			axis._minorAutoInterval,                                                                                            // 8894
			(realMax - realMin) * tickPixelIntervalOption / (totalPixelLength || 1)                                             // 8895
		);                                                                                                                   // 8896
		                                                                                                                     // 8897
		interval = normalizeTickInterval(                                                                                    // 8898
			interval,                                                                                                           // 8899
			null,                                                                                                               // 8900
			getMagnitude(interval)                                                                                              // 8901
		);                                                                                                                   // 8902
		                                                                                                                     // 8903
		positions = map(axis.getLinearTickPositions(                                                                         // 8904
			interval,                                                                                                           // 8905
			realMin,                                                                                                            // 8906
			realMax	                                                                                                            // 8907
		), log2lin);                                                                                                         // 8908
		                                                                                                                     // 8909
		if (!minor) {                                                                                                        // 8910
			axis._minorAutoInterval = interval / 5;                                                                             // 8911
		}                                                                                                                    // 8912
	}                                                                                                                     // 8913
	                                                                                                                      // 8914
	// Set the axis-level tickInterval variable                                                                           // 8915
	if (!minor) {                                                                                                         // 8916
		axis.tickInterval = interval;                                                                                        // 8917
	}                                                                                                                     // 8918
	return positions;                                                                                                     // 8919
};/**                                                                                                                  // 8920
 * The tooltip object                                                                                                  // 8921
 * @param {Object} chart The chart instance                                                                            // 8922
 * @param {Object} options Tooltip options                                                                             // 8923
 */                                                                                                                    // 8924
var Tooltip = Highcharts.Tooltip = function () {                                                                       // 8925
	this.init.apply(this, arguments);                                                                                     // 8926
};                                                                                                                     // 8927
                                                                                                                       // 8928
Tooltip.prototype = {                                                                                                  // 8929
                                                                                                                       // 8930
	init: function (chart, options) {                                                                                     // 8931
                                                                                                                       // 8932
		var borderWidth = options.borderWidth,                                                                               // 8933
			style = options.style,                                                                                              // 8934
			padding = pInt(style.padding);                                                                                      // 8935
                                                                                                                       // 8936
		// Save the chart and options                                                                                        // 8937
		this.chart = chart;                                                                                                  // 8938
		this.options = options;                                                                                              // 8939
                                                                                                                       // 8940
		// Keep track of the current series                                                                                  // 8941
		//this.currentSeries = UNDEFINED;                                                                                    // 8942
                                                                                                                       // 8943
		// List of crosshairs                                                                                                // 8944
		this.crosshairs = [];                                                                                                // 8945
                                                                                                                       // 8946
		// Current values of x and y when animating                                                                          // 8947
		this.now = { x: 0, y: 0 };                                                                                           // 8948
                                                                                                                       // 8949
		// The tooltip is initially hidden                                                                                   // 8950
		this.isHidden = true;                                                                                                // 8951
                                                                                                                       // 8952
                                                                                                                       // 8953
		// create the label		                                                                                                // 8954
		this.label = chart.renderer.label('', 0, 0, options.shape || 'callout', null, null, options.useHTML, null, 'tooltip')
			.attr({                                                                                                             // 8956
				padding: padding,                                                                                                  // 8957
				fill: options.backgroundColor,                                                                                     // 8958
				'stroke-width': borderWidth,                                                                                       // 8959
				r: options.borderRadius,                                                                                           // 8960
				zIndex: 8                                                                                                          // 8961
			})                                                                                                                  // 8962
			.css(style)                                                                                                         // 8963
			.css({ padding: 0 }) // Remove it from VML, the padding is applied as an attribute instead (#1117)                  // 8964
			.add()                                                                                                              // 8965
			.attr({ y: -9999 }); // #2301, #2657                                                                                // 8966
                                                                                                                       // 8967
		// When using canVG the shadow shows up as a gray circle                                                             // 8968
		// even if the tooltip is hidden.                                                                                    // 8969
		if (!useCanVG) {                                                                                                     // 8970
			this.label.shadow(options.shadow);                                                                                  // 8971
		}                                                                                                                    // 8972
                                                                                                                       // 8973
		// Public property for getting the shared state.                                                                     // 8974
		this.shared = options.shared;                                                                                        // 8975
	},                                                                                                                    // 8976
                                                                                                                       // 8977
	/**                                                                                                                   // 8978
	 * Destroy the tooltip and its elements.                                                                              // 8979
	 */                                                                                                                   // 8980
	destroy: function () {                                                                                                // 8981
		// Destroy and clear local variables                                                                                 // 8982
		if (this.label) {                                                                                                    // 8983
			this.label = this.label.destroy();                                                                                  // 8984
		}                                                                                                                    // 8985
		clearTimeout(this.hideTimer);                                                                                        // 8986
		clearTimeout(this.tooltipTimeout);                                                                                   // 8987
	},                                                                                                                    // 8988
                                                                                                                       // 8989
	/**                                                                                                                   // 8990
	 * Provide a soft movement for the tooltip                                                                            // 8991
	 *                                                                                                                    // 8992
	 * @param {Number} x                                                                                                  // 8993
	 * @param {Number} y                                                                                                  // 8994
	 * @private                                                                                                           // 8995
	 */                                                                                                                   // 8996
	move: function (x, y, anchorX, anchorY) {                                                                             // 8997
		var tooltip = this,                                                                                                  // 8998
			now = tooltip.now,                                                                                                  // 8999
			animate = tooltip.options.animation !== false && !tooltip.isHidden &&                                               // 9000
				// When we get close to the target position, abort animation and land on the right place (#3056)                   // 9001
				(mathAbs(x - now.x) > 1 || mathAbs(y - now.y) > 1),                                                                // 9002
			skipAnchor = tooltip.followPointer || tooltip.len > 1;                                                              // 9003
                                                                                                                       // 9004
		// Get intermediate values for animation                                                                             // 9005
		extend(now, {                                                                                                        // 9006
			x: animate ? (2 * now.x + x) / 3 : x,                                                                               // 9007
			y: animate ? (now.y + y) / 2 : y,                                                                                   // 9008
			anchorX: skipAnchor ? UNDEFINED : animate ? (2 * now.anchorX + anchorX) / 3 : anchorX,                              // 9009
			anchorY: skipAnchor ? UNDEFINED : animate ? (now.anchorY + anchorY) / 2 : anchorY                                   // 9010
		});                                                                                                                  // 9011
                                                                                                                       // 9012
		// Move to the intermediate value                                                                                    // 9013
		tooltip.label.attr(now);                                                                                             // 9014
                                                                                                                       // 9015
		                                                                                                                     // 9016
		// Run on next tick of the mouse tracker                                                                             // 9017
		if (animate) {                                                                                                       // 9018
		                                                                                                                     // 9019
			// Never allow two timeouts                                                                                         // 9020
			clearTimeout(this.tooltipTimeout);                                                                                  // 9021
			                                                                                                                    // 9022
			// Set the fixed interval ticking for the smooth tooltip                                                            // 9023
			this.tooltipTimeout = setTimeout(function () {                                                                      // 9024
				// The interval function may still be running during destroy, so check that the chart is really there before calling.
				if (tooltip) {                                                                                                     // 9026
					tooltip.move(x, y, anchorX, anchorY);                                                                             // 9027
				}                                                                                                                  // 9028
			}, 32);                                                                                                             // 9029
			                                                                                                                    // 9030
		}                                                                                                                    // 9031
	},                                                                                                                    // 9032
                                                                                                                       // 9033
	/**                                                                                                                   // 9034
	 * Hide the tooltip                                                                                                   // 9035
	 */                                                                                                                   // 9036
	hide: function (delay) {                                                                                              // 9037
		var tooltip = this,                                                                                                  // 9038
			hoverPoints;                                                                                                        // 9039
		                                                                                                                     // 9040
		clearTimeout(this.hideTimer); // disallow duplicate timers (#1728, #1766)                                            // 9041
		if (!this.isHidden) {                                                                                                // 9042
			hoverPoints = this.chart.hoverPoints;                                                                               // 9043
                                                                                                                       // 9044
			this.hideTimer = setTimeout(function () {                                                                           // 9045
				tooltip.label.fadeOut();                                                                                           // 9046
				tooltip.isHidden = true;                                                                                           // 9047
			}, pick(delay, this.options.hideDelay, 500));                                                                       // 9048
		}                                                                                                                    // 9049
	},                                                                                                                    // 9050
	                                                                                                                      // 9051
	/**                                                                                                                   // 9052
	 * Extendable method to get the anchor position of the tooltip                                                        // 9053
	 * from a point or set of points                                                                                      // 9054
	 */                                                                                                                   // 9055
	getAnchor: function (points, mouseEvent) {                                                                            // 9056
		var ret,                                                                                                             // 9057
			chart = this.chart,                                                                                                 // 9058
			inverted = chart.inverted,                                                                                          // 9059
			plotTop = chart.plotTop,                                                                                            // 9060
			plotLeft = chart.plotLeft,                                                                                          // 9061
			plotX = 0,                                                                                                          // 9062
			plotY = 0,                                                                                                          // 9063
			yAxis,                                                                                                              // 9064
			xAxis;                                                                                                              // 9065
		                                                                                                                     // 9066
		points = splat(points);                                                                                              // 9067
		                                                                                                                     // 9068
		// Pie uses a special tooltipPos                                                                                     // 9069
		ret = points[0].tooltipPos;                                                                                          // 9070
		                                                                                                                     // 9071
		// When tooltip follows mouse, relate the position to the mouse                                                      // 9072
		if (this.followPointer && mouseEvent) {                                                                              // 9073
			if (mouseEvent.chartX === UNDEFINED) {                                                                              // 9074
				mouseEvent = chart.pointer.normalize(mouseEvent);                                                                  // 9075
			}                                                                                                                   // 9076
			ret = [                                                                                                             // 9077
				mouseEvent.chartX - chart.plotLeft,                                                                                // 9078
				mouseEvent.chartY - plotTop                                                                                        // 9079
			];                                                                                                                  // 9080
		}                                                                                                                    // 9081
		// When shared, use the average position                                                                             // 9082
		if (!ret) {                                                                                                          // 9083
			each(points, function (point) {                                                                                     // 9084
				yAxis = point.series.yAxis;                                                                                        // 9085
				xAxis = point.series.xAxis;                                                                                        // 9086
				plotX += point.plotX  + (!inverted && xAxis ? xAxis.left - plotLeft : 0);                                          // 9087
				plotY += (point.plotLow ? (point.plotLow + point.plotHigh) / 2 : point.plotY) +                                    // 9088
					(!inverted && yAxis ? yAxis.top - plotTop : 0); // #1151                                                          // 9089
			});                                                                                                                 // 9090
			                                                                                                                    // 9091
			plotX /= points.length;                                                                                             // 9092
			plotY /= points.length;                                                                                             // 9093
			                                                                                                                    // 9094
			ret = [                                                                                                             // 9095
				inverted ? chart.plotWidth - plotY : plotX,                                                                        // 9096
				this.shared && !inverted && points.length > 1 && mouseEvent ?                                                      // 9097
					mouseEvent.chartY - plotTop : // place shared tooltip next to the mouse (#424)                                    // 9098
					inverted ? chart.plotHeight - plotX : plotY                                                                       // 9099
			];                                                                                                                  // 9100
		}                                                                                                                    // 9101
                                                                                                                       // 9102
		return map(ret, mathRound);                                                                                          // 9103
	},                                                                                                                    // 9104
	                                                                                                                      // 9105
	/**                                                                                                                   // 9106
	 * Place the tooltip in a chart without spilling over                                                                 // 9107
	 * and not covering the point it self.                                                                                // 9108
	 */                                                                                                                   // 9109
	getPosition: function (boxWidth, boxHeight, point) {                                                                  // 9110
		                                                                                                                     // 9111
		var chart = this.chart,                                                                                              // 9112
			distance = this.distance,                                                                                           // 9113
			ret = {},                                                                                                           // 9114
			h = point.h || 0, // #4117                                                                                          // 9115
			swapped,                                                                                                            // 9116
			first = ['y', chart.chartHeight, boxHeight, point.plotY + chart.plotTop],                                           // 9117
			second = ['x', chart.chartWidth, boxWidth, point.plotX + chart.plotLeft],                                           // 9118
			// The far side is right or bottom                                                                                  // 9119
			preferFarSide = pick(point.ttBelow, (chart.inverted && !point.negative) || (!chart.inverted && point.negative)),    // 9120
			/**                                                                                                                 // 9121
			 * Handle the preferred dimension. When the preferred dimension is tooltip                                          // 9122
			 * on top or bottom of the point, it will look for space there.                                                     // 9123
			 */                                                                                                                 // 9124
			firstDimension = function (dim, outerSize, innerSize, point) {                                                      // 9125
				var roomLeft = innerSize < point - distance,                                                                       // 9126
					roomRight = point + distance + innerSize < outerSize,                                                             // 9127
					alignedLeft = point - distance - innerSize,                                                                       // 9128
					alignedRight = point + distance;                                                                                  // 9129
                                                                                                                       // 9130
				if (preferFarSide && roomRight) {                                                                                  // 9131
					ret[dim] = alignedRight;                                                                                          // 9132
				} else if (!preferFarSide && roomLeft) {                                                                           // 9133
					ret[dim] = alignedLeft;                                                                                           // 9134
				} else if (roomLeft) {                                                                                             // 9135
					ret[dim] = alignedLeft - h < 0 ? alignedLeft : alignedLeft - h;                                                   // 9136
				} else if (roomRight) {                                                                                            // 9137
					ret[dim] = alignedRight + h + innerSize > outerSize ? alignedRight : alignedRight + h;                            // 9138
				} else {                                                                                                           // 9139
					return false;                                                                                                     // 9140
				}                                                                                                                  // 9141
			},                                                                                                                  // 9142
			/**                                                                                                                 // 9143
			 * Handle the secondary dimension. If the preferred dimension is tooltip                                            // 9144
			 * on top or bottom of the point, the second dimension is to align the tooltip                                      // 9145
			 * above the point, trying to align center but allowing left or right                                               // 9146
			 * align within the chart box.                                                                                      // 9147
			 */                                                                                                                 // 9148
			secondDimension = function (dim, outerSize, innerSize, point) {                                                     // 9149
				// Too close to the edge, return false and swap dimensions                                                         // 9150
				if (point < distance || point > outerSize - distance) {                                                            // 9151
					return false;                                                                                                     // 9152
				                                                                                                                   // 9153
				// Align left/top                                                                                                  // 9154
				} else if (point < innerSize / 2) {                                                                                // 9155
					ret[dim] = 1;                                                                                                     // 9156
				// Align right/bottom                                                                                              // 9157
				} else if (point > outerSize - innerSize / 2) {                                                                    // 9158
					ret[dim] = outerSize - innerSize - 2;                                                                             // 9159
				// Align center                                                                                                    // 9160
				} else {                                                                                                           // 9161
					ret[dim] = point - innerSize / 2;                                                                                 // 9162
				}                                                                                                                  // 9163
			},                                                                                                                  // 9164
			/**                                                                                                                 // 9165
			 * Swap the dimensions                                                                                              // 9166
			 */                                                                                                                 // 9167
			swap = function (count) {                                                                                           // 9168
				var temp = first;                                                                                                  // 9169
				first = second;                                                                                                    // 9170
				second = temp;                                                                                                     // 9171
				swapped = count;                                                                                                   // 9172
			},                                                                                                                  // 9173
			run = function () {                                                                                                 // 9174
				if (firstDimension.apply(0, first) !== false) {                                                                    // 9175
					if (secondDimension.apply(0, second) === false && !swapped) {                                                     // 9176
						swap(true);                                                                                                      // 9177
						run();                                                                                                           // 9178
					}                                                                                                                 // 9179
				} else if (!swapped) {                                                                                             // 9180
					swap(true);                                                                                                       // 9181
					run();                                                                                                            // 9182
				} else {                                                                                                           // 9183
					ret.x = ret.y = 0;                                                                                                // 9184
				}                                                                                                                  // 9185
			};                                                                                                                  // 9186
                                                                                                                       // 9187
		// Under these conditions, prefer the tooltip on the side of the point                                               // 9188
		if (chart.inverted || this.len > 1) {                                                                                // 9189
			swap();                                                                                                             // 9190
		}                                                                                                                    // 9191
		run();                                                                                                               // 9192
                                                                                                                       // 9193
		return ret;                                                                                                          // 9194
	                                                                                                                      // 9195
	},                                                                                                                    // 9196
                                                                                                                       // 9197
	/**                                                                                                                   // 9198
	 * In case no user defined formatter is given, this will be used. Note that the context                               // 9199
	 * here is an object holding point, series, x, y etc.                                                                 // 9200
	 */                                                                                                                   // 9201
	defaultFormatter: function (tooltip) {                                                                                // 9202
		var items = this.points || splat(this),                                                                              // 9203
			s;                                                                                                                  // 9204
                                                                                                                       // 9205
		// build the header                                                                                                  // 9206
		s = [tooltip.tooltipFooterHeaderFormatter(items[0])]; //#3397: abstraction to enable formatting of footer and header // 9207
                                                                                                                       // 9208
		// build the values                                                                                                  // 9209
		s = s.concat(tooltip.bodyFormatter(items));                                                                          // 9210
                                                                                                                       // 9211
		// footer                                                                                                            // 9212
		s.push(tooltip.tooltipFooterHeaderFormatter(items[0], true)); //#3397: abstraction to enable formatting of footer and header
                                                                                                                       // 9214
		return s.join('');                                                                                                   // 9215
	},                                                                                                                    // 9216
                                                                                                                       // 9217
	/**                                                                                                                   // 9218
	 * Refresh the tooltip's text and position.                                                                           // 9219
	 * @param {Object} point                                                                                              // 9220
	 */                                                                                                                   // 9221
	refresh: function (point, mouseEvent) {                                                                               // 9222
		var tooltip = this,                                                                                                  // 9223
			chart = tooltip.chart,                                                                                              // 9224
			label = tooltip.label,                                                                                              // 9225
			options = tooltip.options,                                                                                          // 9226
			x,                                                                                                                  // 9227
			y,                                                                                                                  // 9228
			anchor,                                                                                                             // 9229
			textConfig = {},                                                                                                    // 9230
			text,                                                                                                               // 9231
			pointConfig = [],                                                                                                   // 9232
			formatter = options.formatter || tooltip.defaultFormatter,                                                          // 9233
			hoverPoints = chart.hoverPoints,                                                                                    // 9234
			borderColor,                                                                                                        // 9235
			shared = tooltip.shared,                                                                                            // 9236
			currentSeries;                                                                                                      // 9237
			                                                                                                                    // 9238
		clearTimeout(this.hideTimer);                                                                                        // 9239
		                                                                                                                     // 9240
		// get the reference point coordinates (pie charts use tooltipPos)                                                   // 9241
		tooltip.followPointer = splat(point)[0].series.tooltipOptions.followPointer;                                         // 9242
		anchor = tooltip.getAnchor(point, mouseEvent);                                                                       // 9243
		x = anchor[0];                                                                                                       // 9244
		y = anchor[1];                                                                                                       // 9245
                                                                                                                       // 9246
		// shared tooltip, array is sent over                                                                                // 9247
		if (shared && !(point.series && point.series.noSharedTooltip)) {                                                     // 9248
			                                                                                                                    // 9249
			// hide previous hoverPoints and set new                                                                            // 9250
			                                                                                                                    // 9251
			chart.hoverPoints = point;                                                                                          // 9252
			if (hoverPoints) {                                                                                                  // 9253
				each(hoverPoints, function (point) {                                                                               // 9254
					point.setState();                                                                                                 // 9255
				});                                                                                                                // 9256
			}                                                                                                                   // 9257
                                                                                                                       // 9258
			each(point, function (item) {                                                                                       // 9259
				item.setState(HOVER_STATE);                                                                                        // 9260
                                                                                                                       // 9261
				pointConfig.push(item.getLabelConfig());                                                                           // 9262
			});                                                                                                                 // 9263
                                                                                                                       // 9264
			textConfig = {                                                                                                      // 9265
				x: point[0].category,                                                                                              // 9266
				y: point[0].y                                                                                                      // 9267
			};                                                                                                                  // 9268
			textConfig.points = pointConfig;                                                                                    // 9269
			this.len = pointConfig.length;                                                                                      // 9270
			point = point[0];                                                                                                   // 9271
                                                                                                                       // 9272
		// single point tooltip                                                                                              // 9273
		} else {                                                                                                             // 9274
			textConfig = point.getLabelConfig();                                                                                // 9275
		}                                                                                                                    // 9276
		text = formatter.call(textConfig, tooltip);                                                                          // 9277
                                                                                                                       // 9278
		// register the current series                                                                                       // 9279
		currentSeries = point.series;                                                                                        // 9280
		this.distance = pick(currentSeries.tooltipOptions.distance, 16);                                                     // 9281
                                                                                                                       // 9282
		// update the inner HTML                                                                                             // 9283
		if (text === false) {                                                                                                // 9284
			this.hide();                                                                                                        // 9285
		} else {                                                                                                             // 9286
                                                                                                                       // 9287
			// show it                                                                                                          // 9288
			if (tooltip.isHidden) {                                                                                             // 9289
				stop(label);                                                                                                       // 9290
				label.attr('opacity', 1).show();                                                                                   // 9291
			}                                                                                                                   // 9292
                                                                                                                       // 9293
			// update text                                                                                                      // 9294
			label.attr({                                                                                                        // 9295
				text: text                                                                                                         // 9296
			});                                                                                                                 // 9297
                                                                                                                       // 9298
			// set the stroke color of the box                                                                                  // 9299
			borderColor = options.borderColor || point.color || currentSeries.color || '#606060';                               // 9300
			label.attr({                                                                                                        // 9301
				stroke: borderColor                                                                                                // 9302
			});                                                                                                                 // 9303
			tooltip.updatePosition({                                                                                            // 9304
				plotX: x,                                                                                                          // 9305
				plotY: y,                                                                                                          // 9306
				negative: point.negative,                                                                                          // 9307
				ttBelow: point.ttBelow,                                                                                            // 9308
				h: anchor[2] || 0                                                                                                  // 9309
			});                                                                                                                 // 9310
		                                                                                                                     // 9311
			this.isHidden = false;                                                                                              // 9312
		}                                                                                                                    // 9313
		fireEvent(chart, 'tooltipRefresh', {                                                                                 // 9314
				text: text,                                                                                                        // 9315
				x: x + chart.plotLeft,                                                                                             // 9316
				y: y + chart.plotTop,                                                                                              // 9317
				borderColor: borderColor                                                                                           // 9318
			});                                                                                                                 // 9319
	},                                                                                                                    // 9320
	                                                                                                                      // 9321
	/**                                                                                                                   // 9322
	 * Find the new position and perform the move                                                                         // 9323
	 */                                                                                                                   // 9324
	updatePosition: function (point) {                                                                                    // 9325
		var chart = this.chart,                                                                                              // 9326
			label = this.label,                                                                                                 // 9327
			pos = (this.options.positioner || this.getPosition).call(                                                           // 9328
				this,                                                                                                              // 9329
				label.width,                                                                                                       // 9330
				label.height,                                                                                                      // 9331
				point                                                                                                              // 9332
			);                                                                                                                  // 9333
                                                                                                                       // 9334
		// do the move                                                                                                       // 9335
		this.move(                                                                                                           // 9336
			mathRound(pos.x),                                                                                                   // 9337
			mathRound(pos.y || 0), // can be undefined (#3977)                                                                  // 9338
			point.plotX + chart.plotLeft,                                                                                       // 9339
			point.plotY + chart.plotTop                                                                                         // 9340
		);                                                                                                                   // 9341
	},                                                                                                                    // 9342
                                                                                                                       // 9343
	/**                                                                                                                   // 9344
	 * Get the best X date format based on the closest point range on the axis.                                           // 9345
	 */                                                                                                                   // 9346
	getXDateFormat: function (point, options, xAxis) {                                                                    // 9347
		var xDateFormat,                                                                                                     // 9348
			dateTimeLabelFormats = options.dateTimeLabelFormats,                                                                // 9349
			closestPointRange = xAxis && xAxis.closestPointRange,                                                               // 9350
			n,                                                                                                                  // 9351
			blank = '01-01 00:00:00.000',                                                                                       // 9352
			strpos = {                                                                                                          // 9353
				millisecond: 15,                                                                                                   // 9354
				second: 12,                                                                                                        // 9355
				minute: 9,                                                                                                         // 9356
				hour: 6,                                                                                                           // 9357
				day: 3                                                                                                             // 9358
			},                                                                                                                  // 9359
			date,                                                                                                               // 9360
			lastN = 'millisecond'; // for sub-millisecond data, #4223                                                           // 9361
                                                                                                                       // 9362
		if (closestPointRange) {                                                                                             // 9363
			date = dateFormat('%m-%d %H:%M:%S.%L', point.x);                                                                    // 9364
			for (n in timeUnits) {                                                                                              // 9365
                                                                                                                       // 9366
				// If the range is exactly one week and we're looking at a Sunday/Monday, go for the week format                   // 9367
				if (closestPointRange === timeUnits.week && +dateFormat('%w', point.x) === xAxis.options.startOfWeek &&            // 9368
						date.substr(6) === blank.substr(6)) {                                                                            // 9369
					n = 'week';                                                                                                       // 9370
					break;                                                                                                            // 9371
                                                                                                                       // 9372
				// The first format that is too great for the range                                                                // 9373
				} else if (timeUnits[n] > closestPointRange) {                                                                     // 9374
					n = lastN;                                                                                                        // 9375
					break;                                                                                                            // 9376
				                                                                                                                   // 9377
				// If the point is placed every day at 23:59, we need to show                                                      // 9378
				// the minutes as well. #2637.                                                                                     // 9379
				} else if (strpos[n] && date.substr(strpos[n]) !== blank.substr(strpos[n])) {                                      // 9380
					break;                                                                                                            // 9381
				}                                                                                                                  // 9382
                                                                                                                       // 9383
				// Weeks are outside the hierarchy, only apply them on Mondays/Sundays like in the first condition                 // 9384
				if (n !== 'week') {                                                                                                // 9385
					lastN = n;                                                                                                        // 9386
				}                                                                                                                  // 9387
			}                                                                                                                   // 9388
			                                                                                                                    // 9389
			if (n) {                                                                                                            // 9390
				xDateFormat = dateTimeLabelFormats[n];                                                                             // 9391
			}                                                                                                                   // 9392
		} else {                                                                                                             // 9393
			xDateFormat = dateTimeLabelFormats.day;                                                                             // 9394
		}                                                                                                                    // 9395
                                                                                                                       // 9396
		return xDateFormat || dateTimeLabelFormats.year; // #2546, 2581                                                      // 9397
	},                                                                                                                    // 9398
                                                                                                                       // 9399
	/**                                                                                                                   // 9400
	 * Format the footer/header of the tooltip                                                                            // 9401
	 * #3397: abstraction to enable formatting of footer and header                                                       // 9402
	 */                                                                                                                   // 9403
	tooltipFooterHeaderFormatter: function (point, isFooter) {                                                            // 9404
		var footOrHead = isFooter ? 'footer' : 'header',                                                                     // 9405
			series = point.series,                                                                                              // 9406
			tooltipOptions = series.tooltipOptions,                                                                             // 9407
			xDateFormat = tooltipOptions.xDateFormat,                                                                           // 9408
			xAxis = series.xAxis,                                                                                               // 9409
			isDateTime = xAxis && xAxis.options.type === 'datetime' && isNumber(point.key),                                     // 9410
			formatString = tooltipOptions[footOrHead+'Format'];                                                                 // 9411
                                                                                                                       // 9412
		// Guess the best date format based on the closest point distance (#568, #3418)                                      // 9413
		if (isDateTime && !xDateFormat) {                                                                                    // 9414
			xDateFormat = this.getXDateFormat(point, tooltipOptions, xAxis);                                                    // 9415
		}                                                                                                                    // 9416
                                                                                                                       // 9417
		// Insert the footer date format if any                                                                              // 9418
		if (isDateTime && xDateFormat) {                                                                                     // 9419
			formatString = formatString.replace('{point.key}', '{point.key:' + xDateFormat + '}');                              // 9420
		}                                                                                                                    // 9421
                                                                                                                       // 9422
		return format(formatString, {                                                                                        // 9423
			point: point,                                                                                                       // 9424
			series: series                                                                                                      // 9425
		});                                                                                                                  // 9426
	},                                                                                                                    // 9427
                                                                                                                       // 9428
	/**                                                                                                                   // 9429
     * Build the body (lines) of the tooltip by iterating over the items and returning one entry for each item,        // 9430
     * abstracting this functionality allows to easily overwrite and extend it.                                        // 9431
	 */                                                                                                                   // 9432
	bodyFormatter: function (items) {                                                                                     // 9433
        return map(items, function (item) {                                                                            // 9434
            var tooltipOptions = item.series.tooltipOptions;                                                           // 9435
            return (tooltipOptions.pointFormatter || item.point.tooltipFormatter).call(item.point, tooltipOptions.pointFormat);
        });                                                                                                            // 9437
    }                                                                                                                  // 9438
                                                                                                                       // 9439
};                                                                                                                     // 9440
                                                                                                                       // 9441
var hoverChartIndex;                                                                                                   // 9442
                                                                                                                       // 9443
// Global flag for touch support                                                                                       // 9444
hasTouch = doc.documentElement.ontouchstart !== UNDEFINED;                                                             // 9445
                                                                                                                       // 9446
/**                                                                                                                    // 9447
 * The mouse tracker object. All methods starting with "on" are primary DOM event handlers.                            // 9448
 * Subsequent methods should be named differently from what they are doing.                                            // 9449
 * @param {Object} chart The Chart instance                                                                            // 9450
 * @param {Object} options The root options object                                                                     // 9451
 */                                                                                                                    // 9452
var Pointer = Highcharts.Pointer = function (chart, options) {                                                         // 9453
	this.init(chart, options);                                                                                            // 9454
};                                                                                                                     // 9455
                                                                                                                       // 9456
Pointer.prototype = {                                                                                                  // 9457
	/**                                                                                                                   // 9458
	 * Initialize Pointer                                                                                                 // 9459
	 */                                                                                                                   // 9460
	init: function (chart, options) {                                                                                     // 9461
		                                                                                                                     // 9462
		var chartOptions = options.chart,                                                                                    // 9463
			chartEvents = chartOptions.events,                                                                                  // 9464
			zoomType = useCanVG ? '' : chartOptions.zoomType,                                                                   // 9465
			inverted = chart.inverted,                                                                                          // 9466
			zoomX,                                                                                                              // 9467
			zoomY;                                                                                                              // 9468
                                                                                                                       // 9469
		// Store references                                                                                                  // 9470
		this.options = options;                                                                                              // 9471
		this.chart = chart;                                                                                                  // 9472
		                                                                                                                     // 9473
		// Zoom status                                                                                                       // 9474
		this.zoomX = zoomX = /x/.test(zoomType);                                                                             // 9475
		this.zoomY = zoomY = /y/.test(zoomType);                                                                             // 9476
		this.zoomHor = (zoomX && !inverted) || (zoomY && inverted);                                                          // 9477
		this.zoomVert = (zoomY && !inverted) || (zoomX && inverted);                                                         // 9478
		this.hasZoom = zoomX || zoomY;                                                                                       // 9479
                                                                                                                       // 9480
		// Do we need to handle click on a touch device?                                                                     // 9481
		this.runChartClick = chartEvents && !!chartEvents.click;                                                             // 9482
                                                                                                                       // 9483
		this.pinchDown = [];                                                                                                 // 9484
		this.lastValidTouch = {};                                                                                            // 9485
                                                                                                                       // 9486
		if (Highcharts.Tooltip && options.tooltip.enabled) {                                                                 // 9487
			chart.tooltip = new Tooltip(chart, options.tooltip);                                                                // 9488
			this.followTouchMove = pick(options.tooltip.followTouchMove, true);                                                 // 9489
		}                                                                                                                    // 9490
                                                                                                                       // 9491
		this.setDOMEvents();                                                                                                 // 9492
	},                                                                                                                    // 9493
                                                                                                                       // 9494
	/**                                                                                                                   // 9495
	 * Add crossbrowser support for chartX and chartY                                                                     // 9496
	 * @param {Object} e The event object in standard browsers                                                            // 9497
	 */                                                                                                                   // 9498
	normalize: function (e, chartPosition) {                                                                              // 9499
		var chartX,                                                                                                          // 9500
			chartY,                                                                                                             // 9501
			ePos;                                                                                                               // 9502
                                                                                                                       // 9503
		// common IE normalizing                                                                                             // 9504
		e = e || window.event;                                                                                               // 9505
                                                                                                                       // 9506
		// Framework specific normalizing (#1165)                                                                            // 9507
		e = washMouseEvent(e);                                                                                               // 9508
                                                                                                                       // 9509
		// More IE normalizing, needs to go after washMouseEvent                                                             // 9510
		if (!e.target) {                                                                                                     // 9511
			e.target = e.srcElement;                                                                                            // 9512
		}                                                                                                                    // 9513
		                                                                                                                     // 9514
		// iOS (#2757)                                                                                                       // 9515
		ePos = e.touches ?  (e.touches.length ? e.touches.item(0) : e.changedTouches[0]) : e;                                // 9516
                                                                                                                       // 9517
		// Get mouse position                                                                                                // 9518
		if (!chartPosition) {                                                                                                // 9519
			this.chartPosition = chartPosition = offset(this.chart.container);                                                  // 9520
		}                                                                                                                    // 9521
                                                                                                                       // 9522
		// chartX and chartY                                                                                                 // 9523
		if (ePos.pageX === UNDEFINED) { // IE < 9. #886.                                                                     // 9524
			chartX = mathMax(e.x, e.clientX - chartPosition.left); // #2005, #2129: the second case is                          // 9525
				// for IE10 quirks mode within framesets                                                                           // 9526
			chartY = e.y;                                                                                                       // 9527
		} else {                                                                                                             // 9528
			chartX = ePos.pageX - chartPosition.left;                                                                           // 9529
			chartY = ePos.pageY - chartPosition.top;                                                                            // 9530
		}                                                                                                                    // 9531
                                                                                                                       // 9532
		return extend(e, {                                                                                                   // 9533
			chartX: mathRound(chartX),                                                                                          // 9534
			chartY: mathRound(chartY)                                                                                           // 9535
		});                                                                                                                  // 9536
	},                                                                                                                    // 9537
                                                                                                                       // 9538
	/**                                                                                                                   // 9539
	 * Get the click position in terms of axis values.                                                                    // 9540
	 *                                                                                                                    // 9541
	 * @param {Object} e A pointer event                                                                                  // 9542
	 */                                                                                                                   // 9543
	getCoordinates: function (e) {                                                                                        // 9544
		var coordinates = {                                                                                                  // 9545
				xAxis: [],                                                                                                         // 9546
				yAxis: []                                                                                                          // 9547
			};                                                                                                                  // 9548
                                                                                                                       // 9549
		each(this.chart.axes, function (axis) {                                                                              // 9550
			coordinates[axis.isXAxis ? 'xAxis' : 'yAxis'].push({                                                                // 9551
				axis: axis,                                                                                                        // 9552
				value: axis.toValue(e[axis.horiz ? 'chartX' : 'chartY'])                                                           // 9553
			});                                                                                                                 // 9554
		});                                                                                                                  // 9555
		return coordinates;                                                                                                  // 9556
	},                                                                                                                    // 9557
	                                                                                                                      // 9558
	/**                                                                                                                   // 9559
	 * With line type charts with a single tracker, get the point closest to the mouse.                                   // 9560
	 * Run Point.onMouseOver and display tooltip for the point or points.                                                 // 9561
	 */                                                                                                                   // 9562
	runPointActions: function (e) {                                                                                       // 9563
                                                                                                                       // 9564
		var pointer = this,                                                                                                  // 9565
			chart = pointer.chart,                                                                                              // 9566
			series = chart.series,                                                                                              // 9567
			tooltip = chart.tooltip,                                                                                            // 9568
			shared = tooltip ? tooltip.shared : false,                                                                          // 9569
			followPointer,                                                                                                      // 9570
			hoverPoint = chart.hoverPoint,                                                                                      // 9571
			hoverSeries = chart.hoverSeries,                                                                                    // 9572
			i,                                                                                                                  // 9573
			distance = chart.chartWidth,                                                                                        // 9574
			anchor,                                                                                                             // 9575
			noSharedTooltip,                                                                                                    // 9576
			directTouch,                                                                                                        // 9577
			kdpoints = [],                                                                                                      // 9578
			kdpoint,                                                                                                            // 9579
			kdpointT;                                                                                                           // 9580
                                                                                                                       // 9581
		// For hovering over the empty parts of the plot area (hoverSeries is undefined).                                    // 9582
		// If there is one series with point tracking (combo chart), don't go to nearest neighbour.                          // 9583
		if (!shared && !hoverSeries) {                                                                                       // 9584
			for (i = 0; i < series.length; i++) {                                                                               // 9585
				if (series[i].directTouch || !series[i].options.stickyTracking) {                                                  // 9586
					series = [];                                                                                                      // 9587
				}                                                                                                                  // 9588
			}                                                                                                                   // 9589
		}                                                                                                                    // 9590
                                                                                                                       // 9591
		// If it has a hoverPoint and that series requires direct touch (like columns),                                      // 9592
		// use the hoverPoint (#3899). Otherwise, search the k-d tree.                                                       // 9593
		if (!shared && hoverSeries && hoverSeries.directTouch && hoverPoint) {                                               // 9594
			kdpoint = hoverPoint;                                                                                               // 9595
                                                                                                                       // 9596
		// Handle shared tooltip or cases where a series is not yet hovered                                                  // 9597
		} else {                                                                                                             // 9598
			// Find nearest points on all series                                                                                // 9599
			each(series, function (s) {                                                                                         // 9600
				// Skip hidden series                                                                                              // 9601
				noSharedTooltip = s.noSharedTooltip && shared;                                                                     // 9602
				directTouch = !shared && s.directTouch;                                                                            // 9603
				if (s.visible && !noSharedTooltip && !directTouch && pick(s.options.enableMouseTracking, true)) { // #3821         // 9604
					kdpointT = s.searchPoint(e, !noSharedTooltip && s.kdDimensions === 1); // #3828                                   // 9605
					if (kdpointT) {                                                                                                   // 9606
						kdpoints.push(kdpointT);                                                                                         // 9607
					}                                                                                                                 // 9608
				}                                                                                                                  // 9609
			});                                                                                                                 // 9610
			// Find absolute nearest point                                                                                      // 9611
			each(kdpoints, function (p) {                                                                                       // 9612
				if (p && typeof p.dist === 'number' && p.dist < distance) {                                                        // 9613
					distance = p.dist;                                                                                                // 9614
					kdpoint = p;                                                                                                      // 9615
				}                                                                                                                  // 9616
			});                                                                                                                 // 9617
		}                                                                                                                    // 9618
                                                                                                                       // 9619
		// Refresh tooltip for kdpoint if new hover point or tooltip was hidden // #3926, #4200                              // 9620
		if (kdpoint && (kdpoint !== this.prevKDPoint || (tooltip && tooltip.isHidden))) {                                    // 9621
			// Draw tooltip if necessary                                                                                        // 9622
			if (shared && !kdpoint.series.noSharedTooltip) {                                                                    // 9623
				i = kdpoints.length;                                                                                               // 9624
				while (i--) {                                                                                                      // 9625
					if (kdpoints[i].clientX !== kdpoint.clientX || kdpoints[i].series.noSharedTooltip) {                              // 9626
						kdpoints.splice(i, 1);                                                                                           // 9627
					}                                                                                                                 // 9628
				}                                                                                                                  // 9629
				if (kdpoints.length && tooltip) {                                                                                  // 9630
					tooltip.refresh(kdpoints, e);                                                                                     // 9631
				}                                                                                                                  // 9632
                                                                                                                       // 9633
				// do mouseover on all points except the closest                                                                   // 9634
				each(kdpoints, function (point) {                                                                                  // 9635
					if (point !== kdpoint) {                                                                                          // 9636
						point.onMouseOver(e);                                                                                            // 9637
					}                                                                                                                 // 9638
				});	                                                                                                               // 9639
				// #3919, #3985 do mouseover on the closest point last to ensure it is the hoverpoint                              // 9640
				((hoverSeries && hoverSeries.directTouch && hoverPoint) || kdpoint).onMouseOver(e);                                // 9641
			} else {                                                                                                            // 9642
				if (tooltip) {                                                                                                     // 9643
					tooltip.refresh(kdpoint, e);                                                                                      // 9644
				}                                                                                                                  // 9645
				kdpoint.onMouseOver(e);                                                                                            // 9646
			}                                                                                                                   // 9647
			this.prevKDPoint = kdpoint;                                                                                         // 9648
		                                                                                                                     // 9649
		// Update positions (regardless of kdpoint or hoverPoint)                                                            // 9650
		} else {                                                                                                             // 9651
			followPointer = hoverSeries && hoverSeries.tooltipOptions.followPointer;                                            // 9652
			if (tooltip && followPointer && !tooltip.isHidden) {                                                                // 9653
				anchor = tooltip.getAnchor([{}], e);                                                                               // 9654
				tooltip.updatePosition({ plotX: anchor[0], plotY: anchor[1] });			                                                 // 9655
			}                                                                                                                   // 9656
		}                                                                                                                    // 9657
                                                                                                                       // 9658
		// Start the event listener to pick up the tooltip                                                                   // 9659
		if (tooltip && !pointer._onDocumentMouseMove) {                                                                      // 9660
			pointer._onDocumentMouseMove = function (e) {                                                                       // 9661
				if (charts[hoverChartIndex]) {                                                                                     // 9662
					charts[hoverChartIndex].pointer.onDocumentMouseMove(e);                                                           // 9663
				}                                                                                                                  // 9664
			};                                                                                                                  // 9665
			addEvent(doc, 'mousemove', pointer._onDocumentMouseMove);                                                           // 9666
		}                                                                                                                    // 9667
		                                                                                                                     // 9668
		// Crosshair                                                                                                         // 9669
		each(chart.axes, function (axis) {                                                                                   // 9670
			axis.drawCrosshair(e, pick(kdpoint, hoverPoint));                                                                   // 9671
		});	                                                                                                                 // 9672
		                                                                                                                     // 9673
                                                                                                                       // 9674
	},                                                                                                                    // 9675
                                                                                                                       // 9676
                                                                                                                       // 9677
                                                                                                                       // 9678
	/**                                                                                                                   // 9679
	 * Reset the tracking by hiding the tooltip, the hover series state and the hover point                               // 9680
	 *                                                                                                                    // 9681
	 * @param allowMove {Boolean} Instead of destroying the tooltip altogether, allow moving it if possible               // 9682
	 */                                                                                                                   // 9683
	reset: function (allowMove, delay) {                                                                                  // 9684
		var pointer = this,                                                                                                  // 9685
			chart = pointer.chart,                                                                                              // 9686
			hoverSeries = chart.hoverSeries,                                                                                    // 9687
			hoverPoint = chart.hoverPoint,                                                                                      // 9688
			hoverPoints = chart.hoverPoints,                                                                                    // 9689
			tooltip = chart.tooltip,                                                                                            // 9690
			tooltipPoints = tooltip && tooltip.shared ? hoverPoints : hoverPoint;                                               // 9691
			                                                                                                                    // 9692
		// Narrow in allowMove                                                                                               // 9693
		allowMove = allowMove && tooltip && tooltipPoints;                                                                   // 9694
			                                                                                                                    // 9695
		// Check if the points have moved outside the plot area, #1003		                                                     // 9696
		if (allowMove  && splat(tooltipPoints)[0].plotX === UNDEFINED) {                                                     // 9697
			allowMove = false;                                                                                                  // 9698
		}	                                                                                                                   // 9699
		// Just move the tooltip, #349                                                                                       // 9700
		if (allowMove) {                                                                                                     // 9701
			tooltip.refresh(tooltipPoints);                                                                                     // 9702
			if (hoverPoint) { // #2500                                                                                          // 9703
				hoverPoint.setState(hoverPoint.state, true);                                                                       // 9704
				each(chart.axes, function (axis) {                                                                                 // 9705
					if (pick(axis.options.crosshair && axis.options.crosshair.snap, true)) {                                          // 9706
						axis.drawCrosshair(null, hoverPoint);                                                                            // 9707
					}  else {                                                                                                         // 9708
						axis.hideCrosshair();                                                                                            // 9709
					}                                                                                                                 // 9710
				});                                                                                                                // 9711
				                                                                                                                   // 9712
			}                                                                                                                   // 9713
                                                                                                                       // 9714
		// Full reset                                                                                                        // 9715
		} else {                                                                                                             // 9716
                                                                                                                       // 9717
			if (hoverPoint) {                                                                                                   // 9718
				hoverPoint.onMouseOut();                                                                                           // 9719
			}                                                                                                                   // 9720
                                                                                                                       // 9721
			if (hoverPoints) {                                                                                                  // 9722
				each(hoverPoints, function (point) {                                                                               // 9723
					point.setState();                                                                                                 // 9724
				});                                                                                                                // 9725
			}                                                                                                                   // 9726
                                                                                                                       // 9727
			if (hoverSeries) {                                                                                                  // 9728
				hoverSeries.onMouseOut();                                                                                          // 9729
			}                                                                                                                   // 9730
                                                                                                                       // 9731
			if (tooltip) {                                                                                                      // 9732
				tooltip.hide(delay);                                                                                               // 9733
			}                                                                                                                   // 9734
                                                                                                                       // 9735
			if (pointer._onDocumentMouseMove) {                                                                                 // 9736
				removeEvent(doc, 'mousemove', pointer._onDocumentMouseMove);                                                       // 9737
				pointer._onDocumentMouseMove = null;                                                                               // 9738
			}                                                                                                                   // 9739
                                                                                                                       // 9740
			// Remove crosshairs                                                                                                // 9741
			each(chart.axes, function (axis) {                                                                                  // 9742
				axis.hideCrosshair();                                                                                              // 9743
			});                                                                                                                 // 9744
			                                                                                                                    // 9745
			pointer.hoverX = chart.hoverPoints = chart.hoverPoint = null;                                                       // 9746
                                                                                                                       // 9747
		}                                                                                                                    // 9748
	},                                                                                                                    // 9749
                                                                                                                       // 9750
	/**                                                                                                                   // 9751
	 * Scale series groups to a certain scale and translation                                                             // 9752
	 */                                                                                                                   // 9753
	scaleGroups: function (attribs, clip) {                                                                               // 9754
                                                                                                                       // 9755
		var chart = this.chart,                                                                                              // 9756
			seriesAttribs;                                                                                                      // 9757
                                                                                                                       // 9758
		// Scale each series                                                                                                 // 9759
		each(chart.series, function (series) {                                                                               // 9760
			seriesAttribs = attribs || series.getPlotBox(); // #1701                                                            // 9761
			if (series.xAxis && series.xAxis.zoomEnabled) {                                                                     // 9762
				series.group.attr(seriesAttribs);                                                                                  // 9763
				if (series.markerGroup) {                                                                                          // 9764
					series.markerGroup.attr(seriesAttribs);                                                                           // 9765
					series.markerGroup.clip(clip ? chart.clipRect : null);                                                            // 9766
				}                                                                                                                  // 9767
				if (series.dataLabelsGroup) {                                                                                      // 9768
					series.dataLabelsGroup.attr(seriesAttribs);                                                                       // 9769
				}                                                                                                                  // 9770
			}                                                                                                                   // 9771
		});                                                                                                                  // 9772
		                                                                                                                     // 9773
		// Clip                                                                                                              // 9774
		chart.clipRect.attr(clip || chart.clipBox);                                                                          // 9775
	},                                                                                                                    // 9776
                                                                                                                       // 9777
	/**                                                                                                                   // 9778
	 * Start a drag operation                                                                                             // 9779
	 */                                                                                                                   // 9780
	dragStart: function (e) {                                                                                             // 9781
		var chart = this.chart;                                                                                              // 9782
                                                                                                                       // 9783
		// Record the start position                                                                                         // 9784
		chart.mouseIsDown = e.type;                                                                                          // 9785
		chart.cancelClick = false;                                                                                           // 9786
		chart.mouseDownX = this.mouseDownX = e.chartX;                                                                       // 9787
		chart.mouseDownY = this.mouseDownY = e.chartY;                                                                       // 9788
	},                                                                                                                    // 9789
                                                                                                                       // 9790
	/**                                                                                                                   // 9791
	 * Perform a drag operation in response to a mousemove event while the mouse is down                                  // 9792
	 */                                                                                                                   // 9793
	drag: function (e) {                                                                                                  // 9794
                                                                                                                       // 9795
		var chart = this.chart,                                                                                              // 9796
			chartOptions = chart.options.chart,                                                                                 // 9797
			chartX = e.chartX,                                                                                                  // 9798
			chartY = e.chartY,                                                                                                  // 9799
			zoomHor = this.zoomHor,                                                                                             // 9800
			zoomVert = this.zoomVert,                                                                                           // 9801
			plotLeft = chart.plotLeft,                                                                                          // 9802
			plotTop = chart.plotTop,                                                                                            // 9803
			plotWidth = chart.plotWidth,                                                                                        // 9804
			plotHeight = chart.plotHeight,                                                                                      // 9805
			clickedInside,                                                                                                      // 9806
			size,                                                                                                               // 9807
			mouseDownX = this.mouseDownX,                                                                                       // 9808
			mouseDownY = this.mouseDownY,                                                                                       // 9809
			panKey = chartOptions.panKey && e[chartOptions.panKey + 'Key'];                                                     // 9810
                                                                                                                       // 9811
		// If the mouse is outside the plot area, adjust to cooordinates                                                     // 9812
		// inside to prevent the selection marker from going outside                                                         // 9813
		if (chartX < plotLeft) {                                                                                             // 9814
			chartX = plotLeft;                                                                                                  // 9815
		} else if (chartX > plotLeft + plotWidth) {                                                                          // 9816
			chartX = plotLeft + plotWidth;                                                                                      // 9817
		}                                                                                                                    // 9818
                                                                                                                       // 9819
		if (chartY < plotTop) {                                                                                              // 9820
			chartY = plotTop;                                                                                                   // 9821
		} else if (chartY > plotTop + plotHeight) {                                                                          // 9822
			chartY = plotTop + plotHeight;                                                                                      // 9823
		}                                                                                                                    // 9824
		                                                                                                                     // 9825
		// determine if the mouse has moved more than 10px                                                                   // 9826
		this.hasDragged = Math.sqrt(                                                                                         // 9827
			Math.pow(mouseDownX - chartX, 2) +                                                                                  // 9828
			Math.pow(mouseDownY - chartY, 2)                                                                                    // 9829
		);                                                                                                                   // 9830
		                                                                                                                     // 9831
		if (this.hasDragged > 10) {                                                                                          // 9832
			clickedInside = chart.isInsidePlot(mouseDownX - plotLeft, mouseDownY - plotTop);                                    // 9833
                                                                                                                       // 9834
			// make a selection                                                                                                 // 9835
			if (chart.hasCartesianSeries && (this.zoomX || this.zoomY) && clickedInside && !panKey) {                           // 9836
				if (!this.selectionMarker) {                                                                                       // 9837
					this.selectionMarker = chart.renderer.rect(                                                                       // 9838
						plotLeft,                                                                                                        // 9839
						plotTop,                                                                                                         // 9840
						zoomHor ? 1 : plotWidth,                                                                                         // 9841
						zoomVert ? 1 : plotHeight,                                                                                       // 9842
						0                                                                                                                // 9843
					)                                                                                                                 // 9844
					.attr({                                                                                                           // 9845
						fill: chartOptions.selectionMarkerFill || 'rgba(69,114,167,0.25)',                                               // 9846
						zIndex: 7                                                                                                        // 9847
					})                                                                                                                // 9848
					.add();                                                                                                           // 9849
				}                                                                                                                  // 9850
			}                                                                                                                   // 9851
                                                                                                                       // 9852
			// adjust the width of the selection marker                                                                         // 9853
			if (this.selectionMarker && zoomHor) {                                                                              // 9854
				size = chartX - mouseDownX;                                                                                        // 9855
				this.selectionMarker.attr({                                                                                        // 9856
					width: mathAbs(size),                                                                                             // 9857
					x: (size > 0 ? 0 : size) + mouseDownX                                                                             // 9858
				});                                                                                                                // 9859
			}                                                                                                                   // 9860
			// adjust the height of the selection marker                                                                        // 9861
			if (this.selectionMarker && zoomVert) {                                                                             // 9862
				size = chartY - mouseDownY;                                                                                        // 9863
				this.selectionMarker.attr({                                                                                        // 9864
					height: mathAbs(size),                                                                                            // 9865
					y: (size > 0 ? 0 : size) + mouseDownY                                                                             // 9866
				});                                                                                                                // 9867
			}                                                                                                                   // 9868
                                                                                                                       // 9869
			// panning                                                                                                          // 9870
			if (clickedInside && !this.selectionMarker && chartOptions.panning) {                                               // 9871
				chart.pan(e, chartOptions.panning);                                                                                // 9872
			}                                                                                                                   // 9873
		}                                                                                                                    // 9874
	},                                                                                                                    // 9875
                                                                                                                       // 9876
	/**                                                                                                                   // 9877
	 * On mouse up or touch end across the entire document, drop the selection.                                           // 9878
	 */                                                                                                                   // 9879
	drop: function (e) {                                                                                                  // 9880
		var pointer = this,                                                                                                  // 9881
			chart = this.chart,                                                                                                 // 9882
			hasPinched = this.hasPinched;                                                                                       // 9883
                                                                                                                       // 9884
		if (this.selectionMarker) {                                                                                          // 9885
			var selectionData = {                                                                                               // 9886
					xAxis: [],                                                                                                        // 9887
					yAxis: [],                                                                                                        // 9888
					originalEvent: e.originalEvent || e                                                                               // 9889
				},                                                                                                                 // 9890
				selectionBox = this.selectionMarker,                                                                               // 9891
				selectionLeft = selectionBox.attr ? selectionBox.attr('x') : selectionBox.x,                                       // 9892
				selectionTop = selectionBox.attr ? selectionBox.attr('y') : selectionBox.y,                                        // 9893
				selectionWidth = selectionBox.attr ? selectionBox.attr('width') : selectionBox.width,                              // 9894
				selectionHeight = selectionBox.attr ? selectionBox.attr('height') : selectionBox.height,                           // 9895
				runZoom;                                                                                                           // 9896
                                                                                                                       // 9897
			// a selection has been made                                                                                        // 9898
			if (this.hasDragged || hasPinched) {                                                                                // 9899
                                                                                                                       // 9900
				// record each axis' min and max                                                                                   // 9901
				each(chart.axes, function (axis) {                                                                                 // 9902
					if (axis.zoomEnabled && defined(axis.min) && (hasPinched || pointer[{ xAxis: 'zoomX', yAxis: 'zoomY' }[axis.coll]])) { // #859, #3569
						var horiz = axis.horiz,                                                                                          // 9904
							minPixelPadding = e.type === 'touchend' ? axis.minPixelPadding: 0, // #1207, #3075                              // 9905
							selectionMin = axis.toValue((horiz ? selectionLeft : selectionTop) + minPixelPadding),                          // 9906
							selectionMax = axis.toValue((horiz ? selectionLeft + selectionWidth : selectionTop + selectionHeight) - minPixelPadding);
                                                                                                                       // 9908
						selectionData[axis.coll].push({                                                                                  // 9909
							axis: axis,                                                                                                     // 9910
							min: mathMin(selectionMin, selectionMax), // for reversed axes                                                  // 9911
							max: mathMax(selectionMin, selectionMax)                                                                        // 9912
						});                                                                                                              // 9913
						runZoom = true;                                                                                                  // 9914
					}                                                                                                                 // 9915
				});                                                                                                                // 9916
				if (runZoom) {                                                                                                     // 9917
					fireEvent(chart, 'selection', selectionData, function (args) {                                                    // 9918
						chart.zoom(extend(args, hasPinched ? { animation: false } : null));                                              // 9919
					});                                                                                                               // 9920
				}                                                                                                                  // 9921
                                                                                                                       // 9922
			}                                                                                                                   // 9923
			this.selectionMarker = this.selectionMarker.destroy();                                                              // 9924
                                                                                                                       // 9925
			// Reset scaling preview                                                                                            // 9926
			if (hasPinched) {                                                                                                   // 9927
				this.scaleGroups();                                                                                                // 9928
			}                                                                                                                   // 9929
		}                                                                                                                    // 9930
                                                                                                                       // 9931
		// Reset all                                                                                                         // 9932
		if (chart) { // it may be destroyed on mouse up - #877                                                               // 9933
			css(chart.container, { cursor: chart._cursor });                                                                    // 9934
			chart.cancelClick = this.hasDragged > 10; // #370                                                                   // 9935
			chart.mouseIsDown = this.hasDragged = this.hasPinched = false;                                                      // 9936
			this.pinchDown = [];                                                                                                // 9937
		}                                                                                                                    // 9938
	},                                                                                                                    // 9939
                                                                                                                       // 9940
	onContainerMouseDown: function (e) {                                                                                  // 9941
                                                                                                                       // 9942
		e = this.normalize(e);                                                                                               // 9943
                                                                                                                       // 9944
		// issue #295, dragging not always working in Firefox                                                                // 9945
		if (e.preventDefault) {                                                                                              // 9946
			e.preventDefault();                                                                                                 // 9947
		}                                                                                                                    // 9948
		                                                                                                                     // 9949
		this.dragStart(e);                                                                                                   // 9950
	},                                                                                                                    // 9951
                                                                                                                       // 9952
	                                                                                                                      // 9953
                                                                                                                       // 9954
	onDocumentMouseUp: function (e) {                                                                                     // 9955
		if (charts[hoverChartIndex]) {                                                                                       // 9956
			charts[hoverChartIndex].pointer.drop(e);                                                                            // 9957
		}                                                                                                                    // 9958
	},                                                                                                                    // 9959
                                                                                                                       // 9960
	/**                                                                                                                   // 9961
	 * Special handler for mouse move that will hide the tooltip when the mouse leaves the plotarea.                      // 9962
	 * Issue #149 workaround. The mouseleave event does not always fire.                                                  // 9963
	 */                                                                                                                   // 9964
	onDocumentMouseMove: function (e) {                                                                                   // 9965
		var chart = this.chart,                                                                                              // 9966
			chartPosition = this.chartPosition;                                                                                 // 9967
                                                                                                                       // 9968
		e = this.normalize(e, chartPosition);                                                                                // 9969
                                                                                                                       // 9970
		// If we're outside, hide the tooltip                                                                                // 9971
		if (chartPosition && !this.inClass(e.target, 'highcharts-tracker') &&                                                // 9972
				!chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) {                                        // 9973
			this.reset();                                                                                                       // 9974
		}                                                                                                                    // 9975
	},                                                                                                                    // 9976
                                                                                                                       // 9977
	/**                                                                                                                   // 9978
	 * When mouse leaves the container, hide the tooltip.                                                                 // 9979
	 */                                                                                                                   // 9980
	onContainerMouseLeave: function () {                                                                                  // 9981
		var chart = charts[hoverChartIndex];                                                                                 // 9982
		if (chart) {                                                                                                         // 9983
			chart.pointer.reset();                                                                                              // 9984
			chart.pointer.chartPosition = null; // also reset the chart position, used in #149 fix                              // 9985
		}                                                                                                                    // 9986
	},                                                                                                                    // 9987
                                                                                                                       // 9988
	// The mousemove, touchmove and touchstart event handler                                                              // 9989
	onContainerMouseMove: function (e) {                                                                                  // 9990
                                                                                                                       // 9991
		var chart = this.chart;                                                                                              // 9992
                                                                                                                       // 9993
		hoverChartIndex = chart.index;                                                                                       // 9994
                                                                                                                       // 9995
		e = this.normalize(e);		                                                                                             // 9996
		e.returnValue = false; // #2251, #3224                                                                               // 9997
		                                                                                                                     // 9998
		if (chart.mouseIsDown === 'mousedown') {                                                                             // 9999
			this.drag(e);                                                                                                       // 10000
		}                                                                                                                    // 10001
		                                                                                                                     // 10002
		// Show the tooltip and run mouse over events (#977)                                                                 // 10003
		if ((this.inClass(e.target, 'highcharts-tracker') ||                                                                 // 10004
				chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) && !chart.openMenu) {                     // 10005
			this.runPointActions(e);                                                                                            // 10006
		}                                                                                                                    // 10007
	},                                                                                                                    // 10008
                                                                                                                       // 10009
	/**                                                                                                                   // 10010
	 * Utility to detect whether an element has, or has a parent with, a specific                                         // 10011
	 * class name. Used on detection of tracker objects and on deciding whether                                           // 10012
	 * hovering the tooltip should cause the active series to mouse out.                                                  // 10013
	 */                                                                                                                   // 10014
	inClass: function (element, className) {                                                                              // 10015
		var elemClassName;                                                                                                   // 10016
		while (element) {                                                                                                    // 10017
			elemClassName = attr(element, 'class');                                                                             // 10018
			if (elemClassName) {                                                                                                // 10019
				if (elemClassName.indexOf(className) !== -1) {                                                                     // 10020
					return true;                                                                                                      // 10021
				} else if (elemClassName.indexOf(PREFIX + 'container') !== -1) {                                                   // 10022
					return false;                                                                                                     // 10023
				}                                                                                                                  // 10024
			}                                                                                                                   // 10025
			element = element.parentNode;                                                                                       // 10026
		}		                                                                                                                  // 10027
	},                                                                                                                    // 10028
                                                                                                                       // 10029
	onTrackerMouseOut: function (e) {                                                                                     // 10030
		var series = this.chart.hoverSeries,                                                                                 // 10031
			relatedTarget = e.relatedTarget || e.toElement,                                                                     // 10032
			relatedSeries = relatedTarget && relatedTarget.point && relatedTarget.point.series; // #2499                        // 10033
		                                                                                                                     // 10034
		if (series && !series.options.stickyTracking && !this.inClass(relatedTarget, PREFIX + 'tooltip') &&                  // 10035
				relatedSeries !== series) {                                                                                        // 10036
			series.onMouseOut();                                                                                                // 10037
		}                                                                                                                    // 10038
	},                                                                                                                    // 10039
                                                                                                                       // 10040
	onContainerClick: function (e) {                                                                                      // 10041
		var chart = this.chart,                                                                                              // 10042
			hoverPoint = chart.hoverPoint,                                                                                      // 10043
			plotLeft = chart.plotLeft,                                                                                          // 10044
			plotTop = chart.plotTop;                                                                                            // 10045
		                                                                                                                     // 10046
		e = this.normalize(e);                                                                                               // 10047
		e.originalEvent = e; // #3913                                                                                        // 10048
                                                                                                                       // 10049
		if (!chart.cancelClick) {                                                                                            // 10050
			                                                                                                                    // 10051
			// On tracker click, fire the series and point events. #783, #1583                                                  // 10052
			if (hoverPoint && this.inClass(e.target, PREFIX + 'tracker')) {                                                     // 10053
                                                                                                                       // 10054
				// the series click event                                                                                          // 10055
				fireEvent(hoverPoint.series, 'click', extend(e, {                                                                  // 10056
					point: hoverPoint                                                                                                 // 10057
				}));                                                                                                               // 10058
                                                                                                                       // 10059
				// the point click event                                                                                           // 10060
				if (chart.hoverPoint) { // it may be destroyed (#1844)                                                             // 10061
					hoverPoint.firePointEvent('click', e);                                                                            // 10062
				}                                                                                                                  // 10063
                                                                                                                       // 10064
			// When clicking outside a tracker, fire a chart event                                                              // 10065
			} else {                                                                                                            // 10066
				extend(e, this.getCoordinates(e));                                                                                 // 10067
                                                                                                                       // 10068
				// fire a click event in the chart                                                                                 // 10069
				if (chart.isInsidePlot(e.chartX - plotLeft, e.chartY - plotTop)) {                                                 // 10070
					fireEvent(chart, 'click', e);                                                                                     // 10071
				}                                                                                                                  // 10072
			}                                                                                                                   // 10073
                                                                                                                       // 10074
                                                                                                                       // 10075
		}                                                                                                                    // 10076
	},                                                                                                                    // 10077
                                                                                                                       // 10078
	/**                                                                                                                   // 10079
	 * Set the JS DOM events on the container and document. This method should contain                                    // 10080
	 * a one-to-one assignment between methods and their handlers. Any advanced logic should                              // 10081
	 * be moved to the handler reflecting the event's name.                                                               // 10082
	 */                                                                                                                   // 10083
	setDOMEvents: function () {                                                                                           // 10084
                                                                                                                       // 10085
		var pointer = this,                                                                                                  // 10086
			container = pointer.chart.container;                                                                                // 10087
                                                                                                                       // 10088
		container.onmousedown = function (e) {                                                                               // 10089
			pointer.onContainerMouseDown(e);                                                                                    // 10090
		};                                                                                                                   // 10091
		container.onmousemove = function (e) {                                                                               // 10092
			pointer.onContainerMouseMove(e);                                                                                    // 10093
		};                                                                                                                   // 10094
		container.onclick = function (e) {                                                                                   // 10095
			pointer.onContainerClick(e);                                                                                        // 10096
		};                                                                                                                   // 10097
		addEvent(container, 'mouseleave', pointer.onContainerMouseLeave);                                                    // 10098
		if (chartCount === 1) {                                                                                              // 10099
			addEvent(doc, 'mouseup', pointer.onDocumentMouseUp);                                                                // 10100
		}                                                                                                                    // 10101
		if (hasTouch) {                                                                                                      // 10102
			container.ontouchstart = function (e) {                                                                             // 10103
				pointer.onContainerTouchStart(e);                                                                                  // 10104
			};                                                                                                                  // 10105
			container.ontouchmove = function (e) {                                                                              // 10106
				pointer.onContainerTouchMove(e);                                                                                   // 10107
			};                                                                                                                  // 10108
			if (chartCount === 1) {                                                                                             // 10109
				addEvent(doc, 'touchend', pointer.onDocumentTouchEnd);                                                             // 10110
			}                                                                                                                   // 10111
		}                                                                                                                    // 10112
		                                                                                                                     // 10113
	},                                                                                                                    // 10114
                                                                                                                       // 10115
	/**                                                                                                                   // 10116
	 * Destroys the Pointer object and disconnects DOM events.                                                            // 10117
	 */                                                                                                                   // 10118
	destroy: function () {                                                                                                // 10119
		var prop;                                                                                                            // 10120
                                                                                                                       // 10121
		removeEvent(this.chart.container, 'mouseleave', this.onContainerMouseLeave);                                         // 10122
		if (!chartCount) {                                                                                                   // 10123
			removeEvent(doc, 'mouseup', this.onDocumentMouseUp);                                                                // 10124
			removeEvent(doc, 'touchend', this.onDocumentTouchEnd);                                                              // 10125
		}                                                                                                                    // 10126
                                                                                                                       // 10127
		// memory and CPU leak                                                                                               // 10128
		clearInterval(this.tooltipTimeout);                                                                                  // 10129
                                                                                                                       // 10130
		for (prop in this) {                                                                                                 // 10131
			this[prop] = null;                                                                                                  // 10132
		}                                                                                                                    // 10133
	}                                                                                                                     // 10134
};                                                                                                                     // 10135
                                                                                                                       // 10136
                                                                                                                       // 10137
/* Support for touch devices */                                                                                        // 10138
extend(Highcharts.Pointer.prototype, {                                                                                 // 10139
                                                                                                                       // 10140
	/**                                                                                                                   // 10141
	 * Run translation operations                                                                                         // 10142
	 */                                                                                                                   // 10143
	pinchTranslate: function (pinchDown, touches, transform, selectionMarker, clip, lastValidTouch) {                     // 10144
		if (this.zoomHor || this.pinchHor) {                                                                                 // 10145
			this.pinchTranslateDirection(true, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);           // 10146
		}                                                                                                                    // 10147
		if (this.zoomVert || this.pinchVert) {                                                                               // 10148
			this.pinchTranslateDirection(false, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);          // 10149
		}                                                                                                                    // 10150
	},                                                                                                                    // 10151
                                                                                                                       // 10152
	/**                                                                                                                   // 10153
	 * Run translation operations for each direction (horizontal and vertical) independently                              // 10154
	 */                                                                                                                   // 10155
	pinchTranslateDirection: function (horiz, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch, forcedScale) {
		var chart = this.chart,                                                                                              // 10157
			xy = horiz ? 'x' : 'y',                                                                                             // 10158
			XY = horiz ? 'X' : 'Y',                                                                                             // 10159
			sChartXY = 'chart' + XY,                                                                                            // 10160
			wh = horiz ? 'width' : 'height',                                                                                    // 10161
			plotLeftTop = chart['plot' + (horiz ? 'Left' : 'Top')],                                                             // 10162
			selectionWH,                                                                                                        // 10163
			selectionXY,                                                                                                        // 10164
			clipXY,                                                                                                             // 10165
			scale = forcedScale || 1,                                                                                           // 10166
			inverted = chart.inverted,                                                                                          // 10167
			bounds = chart.bounds[horiz ? 'h' : 'v'],                                                                           // 10168
			singleTouch = pinchDown.length === 1,                                                                               // 10169
			touch0Start = pinchDown[0][sChartXY],                                                                               // 10170
			touch0Now = touches[0][sChartXY],                                                                                   // 10171
			touch1Start = !singleTouch && pinchDown[1][sChartXY],                                                               // 10172
			touch1Now = !singleTouch && touches[1][sChartXY],                                                                   // 10173
			outOfBounds,                                                                                                        // 10174
			transformScale,                                                                                                     // 10175
			scaleKey,                                                                                                           // 10176
			setScale = function () {                                                                                            // 10177
				if (!singleTouch && mathAbs(touch0Start - touch1Start) > 20) { // Don't zoom if fingers are too close on this axis // 10178
					scale = forcedScale || mathAbs(touch0Now - touch1Now) / mathAbs(touch0Start - touch1Start);                       // 10179
				}                                                                                                                  // 10180
				                                                                                                                   // 10181
				clipXY = ((plotLeftTop - touch0Now) / scale) + touch0Start;                                                        // 10182
				selectionWH = chart['plot' + (horiz ? 'Width' : 'Height')] / scale;                                                // 10183
			};                                                                                                                  // 10184
                                                                                                                       // 10185
		// Set the scale, first pass                                                                                         // 10186
		setScale();                                                                                                          // 10187
                                                                                                                       // 10188
		selectionXY = clipXY; // the clip position (x or y) is altered if out of bounds, the selection position is not       // 10189
                                                                                                                       // 10190
		// Out of bounds                                                                                                     // 10191
		if (selectionXY < bounds.min) {                                                                                      // 10192
			selectionXY = bounds.min;                                                                                           // 10193
			outOfBounds = true;                                                                                                 // 10194
		} else if (selectionXY + selectionWH > bounds.max) {                                                                 // 10195
			selectionXY = bounds.max - selectionWH;                                                                             // 10196
			outOfBounds = true;                                                                                                 // 10197
		}                                                                                                                    // 10198
		                                                                                                                     // 10199
		// Is the chart dragged off its bounds, determined by dataMin and dataMax?                                           // 10200
		if (outOfBounds) {                                                                                                   // 10201
                                                                                                                       // 10202
			// Modify the touchNow position in order to create an elastic drag movement. This indicates                         // 10203
			// to the user that the chart is responsive but can't be dragged further.                                           // 10204
			touch0Now -= 0.8 * (touch0Now - lastValidTouch[xy][0]);                                                             // 10205
			if (!singleTouch) {                                                                                                 // 10206
				touch1Now -= 0.8 * (touch1Now - lastValidTouch[xy][1]);                                                            // 10207
			}                                                                                                                   // 10208
                                                                                                                       // 10209
			// Set the scale, second pass to adapt to the modified touchNow positions                                           // 10210
			setScale();                                                                                                         // 10211
                                                                                                                       // 10212
		} else {                                                                                                             // 10213
			lastValidTouch[xy] = [touch0Now, touch1Now];                                                                        // 10214
		}                                                                                                                    // 10215
                                                                                                                       // 10216
		// Set geometry for clipping, selection and transformation                                                           // 10217
		if (!inverted) { // TODO: implement clipping for inverted charts                                                     // 10218
			clip[xy] = clipXY - plotLeftTop;                                                                                    // 10219
			clip[wh] = selectionWH;                                                                                             // 10220
		}                                                                                                                    // 10221
		scaleKey = inverted ? (horiz ? 'scaleY' : 'scaleX') : 'scale' + XY;                                                  // 10222
		transformScale = inverted ? 1 / scale : scale;                                                                       // 10223
                                                                                                                       // 10224
		selectionMarker[wh] = selectionWH;                                                                                   // 10225
		selectionMarker[xy] = selectionXY;                                                                                   // 10226
		transform[scaleKey] = scale;                                                                                         // 10227
		transform['translate' + XY] = (transformScale * plotLeftTop) + (touch0Now - (transformScale * touch0Start));         // 10228
	},                                                                                                                    // 10229
	                                                                                                                      // 10230
	/**                                                                                                                   // 10231
	 * Handle touch events with two touches                                                                               // 10232
	 */                                                                                                                   // 10233
	pinch: function (e) {                                                                                                 // 10234
                                                                                                                       // 10235
		var self = this,                                                                                                     // 10236
			chart = self.chart,                                                                                                 // 10237
			pinchDown = self.pinchDown,                                                                                         // 10238
			touches = e.touches,                                                                                                // 10239
			touchesLength = touches.length,                                                                                     // 10240
			lastValidTouch = self.lastValidTouch,                                                                               // 10241
			hasZoom = self.hasZoom,                                                                                             // 10242
			selectionMarker = self.selectionMarker,                                                                             // 10243
			transform = {},                                                                                                     // 10244
			fireClickEvent = touchesLength === 1 && ((self.inClass(e.target, PREFIX + 'tracker') &&                             // 10245
				chart.runTrackerClick) || self.runChartClick),                                                                     // 10246
			clip = {};                                                                                                          // 10247
                                                                                                                       // 10248
		// Don't initiate panning until the user has pinched. This prevents us from                                          // 10249
		// blocking page scrolling as users scroll down a long page (#4210).                                                 // 10250
		if (touchesLength > 1) {                                                                                             // 10251
			self.initiated = true;                                                                                              // 10252
		}                                                                                                                    // 10253
                                                                                                                       // 10254
		// On touch devices, only proceed to trigger click if a handler is defined                                           // 10255
		if (hasZoom && self.initiated && !fireClickEvent) {                                                                  // 10256
			e.preventDefault();                                                                                                 // 10257
		}                                                                                                                    // 10258
		                                                                                                                     // 10259
		// Normalize each touch                                                                                              // 10260
		map(touches, function (e) {                                                                                          // 10261
			return self.normalize(e);                                                                                           // 10262
		});                                                                                                                  // 10263
		                                                                                                                     // 10264
		// Register the touch start position                                                                                 // 10265
		if (e.type === 'touchstart') {                                                                                       // 10266
			each(touches, function (e, i) {                                                                                     // 10267
				pinchDown[i] = { chartX: e.chartX, chartY: e.chartY };                                                             // 10268
			});                                                                                                                 // 10269
			lastValidTouch.x = [pinchDown[0].chartX, pinchDown[1] && pinchDown[1].chartX];                                      // 10270
			lastValidTouch.y = [pinchDown[0].chartY, pinchDown[1] && pinchDown[1].chartY];                                      // 10271
                                                                                                                       // 10272
			// Identify the data bounds in pixels                                                                               // 10273
			each(chart.axes, function (axis) {                                                                                  // 10274
				if (axis.zoomEnabled) {                                                                                            // 10275
					var bounds = chart.bounds[axis.horiz ? 'h' : 'v'],                                                                // 10276
						minPixelPadding = axis.minPixelPadding,                                                                          // 10277
						min = axis.toPixels(pick(axis.options.min, axis.dataMin)),                                                       // 10278
						max = axis.toPixels(pick(axis.options.max, axis.dataMax)),                                                       // 10279
						absMin = mathMin(min, max),                                                                                      // 10280
						absMax = mathMax(min, max);                                                                                      // 10281
                                                                                                                       // 10282
					// Store the bounds for use in the touchmove handler                                                              // 10283
					bounds.min = mathMin(axis.pos, absMin - minPixelPadding);                                                         // 10284
					bounds.max = mathMax(axis.pos + axis.len, absMax + minPixelPadding);                                              // 10285
				}                                                                                                                  // 10286
			});                                                                                                                 // 10287
			self.res = true; // reset on next move                                                                              // 10288
		                                                                                                                     // 10289
		// Event type is touchmove, handle panning and pinching                                                              // 10290
		} else if (pinchDown.length) { // can be 0 when releasing, if touchend fires first                                   // 10291
			                                                                                                                    // 10292
                                                                                                                       // 10293
			// Set the marker                                                                                                   // 10294
			if (!selectionMarker) {                                                                                             // 10295
				self.selectionMarker = selectionMarker = extend({                                                                  // 10296
					destroy: noop                                                                                                     // 10297
				}, chart.plotBox);                                                                                                 // 10298
			}                                                                                                                   // 10299
			                                                                                                                    // 10300
			self.pinchTranslate(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);                          // 10301
                                                                                                                       // 10302
			self.hasPinched = hasZoom;                                                                                          // 10303
                                                                                                                       // 10304
			// Scale and translate the groups to provide visual feedback during pinching                                        // 10305
			self.scaleGroups(transform, clip);                                                                                  // 10306
			                                                                                                                    // 10307
			// Optionally move the tooltip on touchmove                                                                         // 10308
			if (!hasZoom && self.followTouchMove && touchesLength === 1) {                                                      // 10309
				this.runPointActions(self.normalize(e));                                                                           // 10310
			} else if (self.res) {                                                                                              // 10311
				self.res = false;                                                                                                  // 10312
				this.reset(false, 0);                                                                                              // 10313
			}                                                                                                                   // 10314
		}                                                                                                                    // 10315
	},                                                                                                                    // 10316
                                                                                                                       // 10317
	/**                                                                                                                   // 10318
	 * General touch handler shared by touchstart and touchmove.                                                          // 10319
	 */                                                                                                                   // 10320
	touch: function (e, start) {                                                                                          // 10321
		var chart = this.chart;                                                                                              // 10322
                                                                                                                       // 10323
		hoverChartIndex = chart.index;                                                                                       // 10324
                                                                                                                       // 10325
		if (e.touches.length === 1) {                                                                                        // 10326
                                                                                                                       // 10327
			e = this.normalize(e);                                                                                              // 10328
                                                                                                                       // 10329
			if (chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop) && !chart.openMenu) {                   // 10330
                                                                                                                       // 10331
				// Run mouse events and display tooltip etc                                                                        // 10332
				if (start) {                                                                                                       // 10333
					this.runPointActions(e);                                                                                          // 10334
				}                                                                                                                  // 10335
                                                                                                                       // 10336
				this.pinch(e);                                                                                                     // 10337
                                                                                                                       // 10338
			} else if (start) {                                                                                                 // 10339
				// Hide the tooltip on touching outside the plot area (#1203)                                                      // 10340
				this.reset();                                                                                                      // 10341
			}                                                                                                                   // 10342
                                                                                                                       // 10343
		} else if (e.touches.length === 2) {                                                                                 // 10344
			this.pinch(e);                                                                                                      // 10345
		}                                                                                                                    // 10346
	},                                                                                                                    // 10347
                                                                                                                       // 10348
	onContainerTouchStart: function (e) {                                                                                 // 10349
		this.touch(e, true);                                                                                                 // 10350
	},                                                                                                                    // 10351
                                                                                                                       // 10352
	onContainerTouchMove: function (e) {                                                                                  // 10353
		this.touch(e);                                                                                                       // 10354
	},                                                                                                                    // 10355
                                                                                                                       // 10356
	onDocumentTouchEnd: function (e) {                                                                                    // 10357
		if (charts[hoverChartIndex]) {                                                                                       // 10358
			charts[hoverChartIndex].pointer.drop(e);                                                                            // 10359
		}                                                                                                                    // 10360
	}                                                                                                                     // 10361
                                                                                                                       // 10362
});                                                                                                                    // 10363
if (win.PointerEvent || win.MSPointerEvent) {                                                                          // 10364
	                                                                                                                      // 10365
	// The touches object keeps track of the points being touched at all times                                            // 10366
	var touches = {},                                                                                                     // 10367
		hasPointerEvent = !!win.PointerEvent,                                                                                // 10368
		getWebkitTouches = function () {                                                                                     // 10369
			var key, fake = [];                                                                                                 // 10370
			fake.item = function (i) { return this[i]; };                                                                       // 10371
			for (key in touches) {                                                                                              // 10372
				if (touches.hasOwnProperty(key)) {                                                                                 // 10373
					fake.push({                                                                                                       // 10374
						pageX: touches[key].pageX,                                                                                       // 10375
						pageY: touches[key].pageY,                                                                                       // 10376
						target: touches[key].target                                                                                      // 10377
					});                                                                                                               // 10378
				}                                                                                                                  // 10379
			}                                                                                                                   // 10380
			return fake;                                                                                                        // 10381
		},                                                                                                                   // 10382
		translateMSPointer = function (e, method, wktype, callback) {                                                        // 10383
			var p;                                                                                                              // 10384
			e = e.originalEvent || e;                                                                                           // 10385
			if ((e.pointerType === 'touch' || e.pointerType === e.MSPOINTER_TYPE_TOUCH) && charts[hoverChartIndex]) {           // 10386
				callback(e);                                                                                                       // 10387
				p = charts[hoverChartIndex].pointer;                                                                               // 10388
				p[method]({                                                                                                        // 10389
					type: wktype,                                                                                                     // 10390
					target: e.currentTarget,                                                                                          // 10391
					preventDefault: noop,                                                                                             // 10392
					touches: getWebkitTouches()                                                                                       // 10393
				});				                                                                                                            // 10394
			}                                                                                                                   // 10395
		};                                                                                                                   // 10396
                                                                                                                       // 10397
	/**                                                                                                                   // 10398
	 * Extend the Pointer prototype with methods for each event handler and more                                          // 10399
	 */                                                                                                                   // 10400
	extend(Pointer.prototype, {                                                                                           // 10401
		onContainerPointerDown: function (e) {                                                                               // 10402
			translateMSPointer(e, 'onContainerTouchStart', 'touchstart', function (e) {                                         // 10403
				touches[e.pointerId] = { pageX: e.pageX, pageY: e.pageY, target: e.currentTarget };                                // 10404
			});                                                                                                                 // 10405
		},                                                                                                                   // 10406
		onContainerPointerMove: function (e) {                                                                               // 10407
			translateMSPointer(e, 'onContainerTouchMove', 'touchmove', function (e) {                                           // 10408
				touches[e.pointerId] = { pageX: e.pageX, pageY: e.pageY };                                                         // 10409
				if (!touches[e.pointerId].target) {                                                                                // 10410
					touches[e.pointerId].target = e.currentTarget;                                                                    // 10411
				}                                                                                                                  // 10412
			});                                                                                                                 // 10413
		},                                                                                                                   // 10414
		onDocumentPointerUp: function (e) {                                                                                  // 10415
			translateMSPointer(e, 'onDocumentTouchEnd', 'touchend', function (e) {                                              // 10416
				delete touches[e.pointerId];                                                                                       // 10417
			});                                                                                                                 // 10418
		},                                                                                                                   // 10419
                                                                                                                       // 10420
		/**                                                                                                                  // 10421
		 * Add or remove the MS Pointer specific events                                                                      // 10422
		 */                                                                                                                  // 10423
		batchMSEvents: function (fn) {                                                                                       // 10424
			fn(this.chart.container, hasPointerEvent ? 'pointerdown' : 'MSPointerDown', this.onContainerPointerDown);           // 10425
			fn(this.chart.container, hasPointerEvent ? 'pointermove' : 'MSPointerMove', this.onContainerPointerMove);           // 10426
			fn(doc, hasPointerEvent ? 'pointerup' : 'MSPointerUp', this.onDocumentPointerUp);                                   // 10427
		}                                                                                                                    // 10428
	});                                                                                                                   // 10429
                                                                                                                       // 10430
	// Disable default IE actions for pinch and such on chart element                                                     // 10431
	wrap(Pointer.prototype, 'init', function (proceed, chart, options) {                                                  // 10432
		proceed.call(this, chart, options);                                                                                  // 10433
		if (this.hasZoom) { // #4014                                                                                         // 10434
			css(chart.container, {                                                                                              // 10435
				'-ms-touch-action': NONE,                                                                                          // 10436
				'touch-action': NONE                                                                                               // 10437
			});                                                                                                                 // 10438
		}                                                                                                                    // 10439
	});                                                                                                                   // 10440
                                                                                                                       // 10441
	// Add IE specific touch events to chart                                                                              // 10442
	wrap(Pointer.prototype, 'setDOMEvents', function (proceed) {                                                          // 10443
		proceed.apply(this);                                                                                                 // 10444
		if (this.hasZoom || this.followTouchMove) {                                                                          // 10445
			this.batchMSEvents(addEvent);                                                                                       // 10446
		}                                                                                                                    // 10447
	});                                                                                                                   // 10448
	// Destroy MS events also                                                                                             // 10449
	wrap(Pointer.prototype, 'destroy', function (proceed) {                                                               // 10450
		this.batchMSEvents(removeEvent);                                                                                     // 10451
		proceed.call(this);                                                                                                  // 10452
	});                                                                                                                   // 10453
}                                                                                                                      // 10454
/**                                                                                                                    // 10455
 * The overview of the chart's series                                                                                  // 10456
 */                                                                                                                    // 10457
var Legend = Highcharts.Legend = function (chart, options) {                                                           // 10458
	this.init(chart, options);                                                                                            // 10459
};                                                                                                                     // 10460
                                                                                                                       // 10461
Legend.prototype = {                                                                                                   // 10462
	                                                                                                                      // 10463
	/**                                                                                                                   // 10464
	 * Initialize the legend                                                                                              // 10465
	 */                                                                                                                   // 10466
	init: function (chart, options) {                                                                                     // 10467
		                                                                                                                     // 10468
		var legend = this,                                                                                                   // 10469
			itemStyle = options.itemStyle,                                                                                      // 10470
			padding,                                                                                                            // 10471
			itemMarginTop = options.itemMarginTop || 0;                                                                         // 10472
	                                                                                                                      // 10473
		this.options = options;                                                                                              // 10474
                                                                                                                       // 10475
		if (!options.enabled) {                                                                                              // 10476
			return;                                                                                                             // 10477
		}                                                                                                                    // 10478
	                                                                                                                      // 10479
		legend.itemStyle = itemStyle;                                                                                        // 10480
		legend.itemHiddenStyle = merge(itemStyle, options.itemHiddenStyle);                                                  // 10481
		legend.itemMarginTop = itemMarginTop;                                                                                // 10482
		legend.padding = padding = pick(options.padding, 8);                                                                 // 10483
		legend.initialItemX = padding;                                                                                       // 10484
		legend.initialItemY = padding - 5; // 5 is the number of pixels above the text                                       // 10485
		legend.maxItemWidth = 0;                                                                                             // 10486
		legend.chart = chart;                                                                                                // 10487
		legend.itemHeight = 0;                                                                                               // 10488
		legend.symbolWidth = pick(options.symbolWidth, 16);                                                                  // 10489
		legend.pages = [];                                                                                                   // 10490
                                                                                                                       // 10491
                                                                                                                       // 10492
		// Render it                                                                                                         // 10493
		legend.render();                                                                                                     // 10494
                                                                                                                       // 10495
		// move checkboxes                                                                                                   // 10496
		addEvent(legend.chart, 'endResize', function () {                                                                    // 10497
			legend.positionCheckboxes();                                                                                        // 10498
		});                                                                                                                  // 10499
                                                                                                                       // 10500
	},                                                                                                                    // 10501
                                                                                                                       // 10502
	/**                                                                                                                   // 10503
	 * Set the colors for the legend item                                                                                 // 10504
	 * @param {Object} item A Series or Point instance                                                                    // 10505
	 * @param {Object} visible Dimmed or colored                                                                          // 10506
	 */                                                                                                                   // 10507
	colorizeItem: function (item, visible) {                                                                              // 10508
		var legend = this,                                                                                                   // 10509
			options = legend.options,                                                                                           // 10510
			legendItem = item.legendItem,                                                                                       // 10511
			legendLine = item.legendLine,                                                                                       // 10512
			legendSymbol = item.legendSymbol,                                                                                   // 10513
			hiddenColor = legend.itemHiddenStyle.color,                                                                         // 10514
			textColor = visible ? options.itemStyle.color : hiddenColor,                                                        // 10515
			symbolColor = visible ? (item.legendColor || item.color || '#CCC') : hiddenColor,                                   // 10516
			markerOptions = item.options && item.options.marker,                                                                // 10517
			symbolAttr = { fill: symbolColor },                                                                                 // 10518
			key,                                                                                                                // 10519
			val;                                                                                                                // 10520
		                                                                                                                     // 10521
		if (legendItem) {                                                                                                    // 10522
			legendItem.css({ fill: textColor, color: textColor }); // color for #1553, oldIE                                    // 10523
		}                                                                                                                    // 10524
		if (legendLine) {                                                                                                    // 10525
			legendLine.attr({ stroke: symbolColor });                                                                           // 10526
		}                                                                                                                    // 10527
		                                                                                                                     // 10528
		if (legendSymbol) {                                                                                                  // 10529
			                                                                                                                    // 10530
			// Apply marker options                                                                                             // 10531
			if (markerOptions && legendSymbol.isMarker) { // #585                                                               // 10532
				symbolAttr.stroke = symbolColor;                                                                                   // 10533
				markerOptions = item.convertAttribs(markerOptions);                                                                // 10534
				for (key in markerOptions) {                                                                                       // 10535
					val = markerOptions[key];                                                                                         // 10536
					if (val !== UNDEFINED) {                                                                                          // 10537
						symbolAttr[key] = val;                                                                                           // 10538
					}                                                                                                                 // 10539
				}                                                                                                                  // 10540
			}                                                                                                                   // 10541
                                                                                                                       // 10542
			legendSymbol.attr(symbolAttr);                                                                                      // 10543
		}                                                                                                                    // 10544
	},                                                                                                                    // 10545
                                                                                                                       // 10546
	/**                                                                                                                   // 10547
	 * Position the legend item                                                                                           // 10548
	 * @param {Object} item A Series or Point instance                                                                    // 10549
	 */                                                                                                                   // 10550
	positionItem: function (item) {                                                                                       // 10551
		var legend = this,                                                                                                   // 10552
			options = legend.options,                                                                                           // 10553
			symbolPadding = options.symbolPadding,                                                                              // 10554
			ltr = !options.rtl,                                                                                                 // 10555
			legendItemPos = item._legendItemPos,                                                                                // 10556
			itemX = legendItemPos[0],                                                                                           // 10557
			itemY = legendItemPos[1],                                                                                           // 10558
			checkbox = item.checkbox,                                                                                           // 10559
			legendGroup = item.legendGroup;                                                                                     // 10560
                                                                                                                       // 10561
		if (legendGroup && legendGroup.element) {                                                                            // 10562
			legendGroup.translate(                                                                                              // 10563
				ltr ? itemX : legend.legendWidth - itemX - 2 * symbolPadding - 4,                                                  // 10564
				itemY                                                                                                              // 10565
			);                                                                                                                  // 10566
		}                                                                                                                    // 10567
                                                                                                                       // 10568
		if (checkbox) {                                                                                                      // 10569
			checkbox.x = itemX;                                                                                                 // 10570
			checkbox.y = itemY;                                                                                                 // 10571
		}                                                                                                                    // 10572
	},                                                                                                                    // 10573
                                                                                                                       // 10574
	/**                                                                                                                   // 10575
	 * Destroy a single legend item                                                                                       // 10576
	 * @param {Object} item The series or point                                                                           // 10577
	 */                                                                                                                   // 10578
	destroyItem: function (item) {                                                                                        // 10579
		var checkbox = item.checkbox;                                                                                        // 10580
                                                                                                                       // 10581
		// destroy SVG elements                                                                                              // 10582
		each(['legendItem', 'legendLine', 'legendSymbol', 'legendGroup'], function (key) {                                   // 10583
			if (item[key]) {                                                                                                    // 10584
				item[key] = item[key].destroy();                                                                                   // 10585
			}                                                                                                                   // 10586
		});                                                                                                                  // 10587
                                                                                                                       // 10588
		if (checkbox) {                                                                                                      // 10589
			discardElement(item.checkbox);                                                                                      // 10590
		}                                                                                                                    // 10591
	},                                                                                                                    // 10592
                                                                                                                       // 10593
	/**                                                                                                                   // 10594
	 * Destroys the legend.                                                                                               // 10595
	 */                                                                                                                   // 10596
	destroy: function () {                                                                                                // 10597
		var legend = this,                                                                                                   // 10598
			legendGroup = legend.group,                                                                                         // 10599
			box = legend.box;                                                                                                   // 10600
                                                                                                                       // 10601
		if (box) {                                                                                                           // 10602
			legend.box = box.destroy();                                                                                         // 10603
		}                                                                                                                    // 10604
                                                                                                                       // 10605
		if (legendGroup) {                                                                                                   // 10606
			legend.group = legendGroup.destroy();                                                                               // 10607
		}                                                                                                                    // 10608
	},                                                                                                                    // 10609
                                                                                                                       // 10610
	/**                                                                                                                   // 10611
	 * Position the checkboxes after the width is determined                                                              // 10612
	 */                                                                                                                   // 10613
	positionCheckboxes: function (scrollOffset) {                                                                         // 10614
		var alignAttr = this.group.alignAttr,                                                                                // 10615
			translateY,                                                                                                         // 10616
			clipHeight = this.clipHeight || this.legendHeight;                                                                  // 10617
                                                                                                                       // 10618
		if (alignAttr) {                                                                                                     // 10619
			translateY = alignAttr.translateY;                                                                                  // 10620
			each(this.allItems, function (item) {                                                                               // 10621
				var checkbox = item.checkbox,                                                                                      // 10622
					top;                                                                                                              // 10623
				                                                                                                                   // 10624
				if (checkbox) {                                                                                                    // 10625
					top = (translateY + checkbox.y + (scrollOffset || 0) + 3);                                                        // 10626
					css(checkbox, {                                                                                                   // 10627
						left: (alignAttr.translateX + item.checkboxOffset + checkbox.x - 20) + PX,                                       // 10628
						top: top + PX,                                                                                                   // 10629
						display: top > translateY - 6 && top < translateY + clipHeight - 6 ? '' : NONE                                   // 10630
					});                                                                                                               // 10631
				}                                                                                                                  // 10632
			});                                                                                                                 // 10633
		}                                                                                                                    // 10634
	},                                                                                                                    // 10635
	                                                                                                                      // 10636
	/**                                                                                                                   // 10637
	 * Render the legend title on top of the legend                                                                       // 10638
	 */                                                                                                                   // 10639
	renderTitle: function () {                                                                                            // 10640
		var options = this.options,                                                                                          // 10641
			padding = this.padding,                                                                                             // 10642
			titleOptions = options.title,                                                                                       // 10643
			titleHeight = 0,                                                                                                    // 10644
			bBox;                                                                                                               // 10645
		                                                                                                                     // 10646
		if (titleOptions.text) {                                                                                             // 10647
			if (!this.title) {                                                                                                  // 10648
				this.title = this.chart.renderer.label(titleOptions.text, padding - 3, padding - 4, null, null, null, null, null, 'legend-title')
					.attr({ zIndex: 1 })                                                                                              // 10650
					.css(titleOptions.style)                                                                                          // 10651
					.add(this.group);                                                                                                 // 10652
			}                                                                                                                   // 10653
			bBox = this.title.getBBox();                                                                                        // 10654
			titleHeight = bBox.height;                                                                                          // 10655
			this.offsetWidth = bBox.width; // #1717                                                                             // 10656
			this.contentGroup.attr({ translateY: titleHeight });                                                                // 10657
		}                                                                                                                    // 10658
		this.titleHeight = titleHeight;                                                                                      // 10659
	},                                                                                                                    // 10660
                                                                                                                       // 10661
	/**                                                                                                                   // 10662
	 * Set the legend item text                                                                                           // 10663
	 */                                                                                                                   // 10664
	setText: function (item) {                                                                                            // 10665
		var options = this.options;                                                                                          // 10666
		item.legendItem.attr({                                                                                               // 10667
			text: options.labelFormat ? format(options.labelFormat, item) : options.labelFormatter.call(item)                   // 10668
		});                                                                                                                  // 10669
	},                                                                                                                    // 10670
                                                                                                                       // 10671
	/**                                                                                                                   // 10672
	 * Render a single specific legend item                                                                               // 10673
	 * @param {Object} item A series or point                                                                             // 10674
	 */                                                                                                                   // 10675
	renderItem: function (item) {                                                                                         // 10676
		var legend = this,                                                                                                   // 10677
			chart = legend.chart,                                                                                               // 10678
			renderer = chart.renderer,                                                                                          // 10679
			options = legend.options,                                                                                           // 10680
			horizontal = options.layout === 'horizontal',                                                                       // 10681
			symbolWidth = legend.symbolWidth,                                                                                   // 10682
			symbolPadding = options.symbolPadding,                                                                              // 10683
			itemStyle = legend.itemStyle,                                                                                       // 10684
			itemHiddenStyle = legend.itemHiddenStyle,                                                                           // 10685
			padding = legend.padding,                                                                                           // 10686
			itemDistance = horizontal ? pick(options.itemDistance, 20) : 0,                                                     // 10687
			ltr = !options.rtl,                                                                                                 // 10688
			itemHeight,                                                                                                         // 10689
			widthOption = options.width,                                                                                        // 10690
			itemMarginBottom = options.itemMarginBottom || 0,                                                                   // 10691
			itemMarginTop = legend.itemMarginTop,                                                                               // 10692
			initialItemX = legend.initialItemX,                                                                                 // 10693
			bBox,                                                                                                               // 10694
			itemWidth,                                                                                                          // 10695
			li = item.legendItem,                                                                                               // 10696
			series = item.series && item.series.drawLegendSymbol ? item.series : item,                                          // 10697
			seriesOptions = series.options,                                                                                     // 10698
			showCheckbox = legend.createCheckboxForItem && seriesOptions && seriesOptions.showCheckbox,                         // 10699
			useHTML = options.useHTML;                                                                                          // 10700
                                                                                                                       // 10701
		if (!li) { // generate it once, later move it                                                                        // 10702
                                                                                                                       // 10703
			// Generate the group box                                                                                           // 10704
			// A group to hold the symbol and text. Text is to be appended in Legend class.                                     // 10705
			item.legendGroup = renderer.g('legend-item')                                                                        // 10706
				.attr({ zIndex: 1 })                                                                                               // 10707
				.add(legend.scrollGroup);                                                                                          // 10708
                                                                                                                       // 10709
			// Generate the list item text and add it to the group                                                              // 10710
			item.legendItem = li = renderer.text(                                                                               // 10711
					'',                                                                                                               // 10712
					ltr ? symbolWidth + symbolPadding : -symbolPadding,                                                               // 10713
					legend.baseline || 0,                                                                                             // 10714
					useHTML                                                                                                           // 10715
				)                                                                                                                  // 10716
				.css(merge(item.visible ? itemStyle : itemHiddenStyle)) // merge to prevent modifying original (#1021)             // 10717
				.attr({                                                                                                            // 10718
					align: ltr ? 'left' : 'right',                                                                                    // 10719
					zIndex: 2                                                                                                         // 10720
				})                                                                                                                 // 10721
				.add(item.legendGroup);                                                                                            // 10722
                                                                                                                       // 10723
			// Get the baseline for the first item - the font size is equal for all                                             // 10724
			if (!legend.baseline) {                                                                                             // 10725
				legend.fontMetrics = renderer.fontMetrics(itemStyle.fontSize, li);                                                 // 10726
				legend.baseline = legend.fontMetrics.f + 3 + itemMarginTop;                                                        // 10727
				li.attr('y', legend.baseline);                                                                                     // 10728
			}                                                                                                                   // 10729
                                                                                                                       // 10730
			// Draw the legend symbol inside the group box                                                                      // 10731
			series.drawLegendSymbol(legend, item);                                                                              // 10732
                                                                                                                       // 10733
			if (legend.setItemEvents) {                                                                                         // 10734
				legend.setItemEvents(item, li, useHTML, itemStyle, itemHiddenStyle);                                               // 10735
			}			                                                                                                                // 10736
                                                                                                                       // 10737
			// Colorize the items                                                                                               // 10738
			legend.colorizeItem(item, item.visible);                                                                            // 10739
                                                                                                                       // 10740
			// add the HTML checkbox on top                                                                                     // 10741
			if (showCheckbox) {                                                                                                 // 10742
				legend.createCheckboxForItem(item);				                                                                            // 10743
			}                                                                                                                   // 10744
		}                                                                                                                    // 10745
                                                                                                                       // 10746
		// Always update the text                                                                                            // 10747
		legend.setText(item);                                                                                                // 10748
                                                                                                                       // 10749
		// calculate the positions for the next line                                                                         // 10750
		bBox = li.getBBox();                                                                                                 // 10751
                                                                                                                       // 10752
		itemWidth = item.checkboxOffset =                                                                                    // 10753
			options.itemWidth ||                                                                                                // 10754
			item.legendItemWidth ||                                                                                             // 10755
			symbolWidth + symbolPadding + bBox.width + itemDistance + (showCheckbox ? 20 : 0);                                  // 10756
		legend.itemHeight = itemHeight = mathRound(item.legendItemHeight || bBox.height);                                    // 10757
                                                                                                                       // 10758
		// if the item exceeds the width, start a new line                                                                   // 10759
		if (horizontal && legend.itemX - initialItemX + itemWidth >                                                          // 10760
				(widthOption || (chart.chartWidth - 2 * padding - initialItemX - options.x))) {                                    // 10761
			legend.itemX = initialItemX;                                                                                        // 10762
			legend.itemY += itemMarginTop + legend.lastLineHeight + itemMarginBottom;                                           // 10763
			legend.lastLineHeight = 0; // reset for next line (#915, #3976)                                                     // 10764
		}                                                                                                                    // 10765
                                                                                                                       // 10766
		// If the item exceeds the height, start a new column                                                                // 10767
		/*if (!horizontal && legend.itemY + options.y + itemHeight > chart.chartHeight - spacingTop - spacingBottom) {       // 10768
			legend.itemY = legend.initialItemY;                                                                                 // 10769
			legend.itemX += legend.maxItemWidth;                                                                                // 10770
			legend.maxItemWidth = 0;                                                                                            // 10771
		}*/                                                                                                                  // 10772
                                                                                                                       // 10773
		// Set the edge positions                                                                                            // 10774
		legend.maxItemWidth = mathMax(legend.maxItemWidth, itemWidth);                                                       // 10775
		legend.lastItemY = itemMarginTop + legend.itemY + itemMarginBottom;                                                  // 10776
		legend.lastLineHeight = mathMax(itemHeight, legend.lastLineHeight); // #915                                          // 10777
                                                                                                                       // 10778
		// cache the position of the newly generated or reordered items                                                      // 10779
		item._legendItemPos = [legend.itemX, legend.itemY];                                                                  // 10780
                                                                                                                       // 10781
		// advance                                                                                                           // 10782
		if (horizontal) {                                                                                                    // 10783
			legend.itemX += itemWidth;                                                                                          // 10784
                                                                                                                       // 10785
		} else {                                                                                                             // 10786
			legend.itemY += itemMarginTop + itemHeight + itemMarginBottom;                                                      // 10787
			legend.lastLineHeight = itemHeight;                                                                                 // 10788
		}                                                                                                                    // 10789
                                                                                                                       // 10790
		// the width of the widest item                                                                                      // 10791
		legend.offsetWidth = widthOption || mathMax(                                                                         // 10792
			(horizontal ? legend.itemX - initialItemX - itemDistance : itemWidth) + padding,                                    // 10793
			legend.offsetWidth                                                                                                  // 10794
		);                                                                                                                   // 10795
	},                                                                                                                    // 10796
                                                                                                                       // 10797
	/**                                                                                                                   // 10798
	 * Get all items, which is one item per series for normal series and one item per point                               // 10799
	 * for pie series.                                                                                                    // 10800
	 */                                                                                                                   // 10801
	getAllItems: function () {                                                                                            // 10802
		var allItems = [];                                                                                                   // 10803
		each(this.chart.series, function (series) {                                                                          // 10804
			var seriesOptions = series.options;                                                                                 // 10805
                                                                                                                       // 10806
			// Handle showInLegend. If the series is linked to another series, defaults to false.                               // 10807
			if (!pick(seriesOptions.showInLegend, !defined(seriesOptions.linkedTo) ? UNDEFINED : false, true)) {                // 10808
				return;                                                                                                            // 10809
			}                                                                                                                   // 10810
                                                                                                                       // 10811
			// use points or series for the legend item depending on legendType                                                 // 10812
			allItems = allItems.concat(                                                                                         // 10813
					series.legendItems ||                                                                                             // 10814
					(seriesOptions.legendType === 'point' ?                                                                           // 10815
							series.data :                                                                                                   // 10816
							series)                                                                                                         // 10817
			);                                                                                                                  // 10818
		});                                                                                                                  // 10819
		return allItems;                                                                                                     // 10820
	},                                                                                                                    // 10821
                                                                                                                       // 10822
	/**                                                                                                                   // 10823
	 * Adjust the chart margins by reserving space for the legend on only one side                                        // 10824
	 * of the chart. If the position is set to a corner, top or bottom is reserved                                        // 10825
	 * for horizontal legends and left or right for vertical ones.                                                        // 10826
	 */                                                                                                                   // 10827
	adjustMargins: function (margin, spacing) {                                                                           // 10828
		var chart = this.chart,                                                                                              // 10829
			options = this.options,                                                                                             // 10830
			// Use the first letter of each alignment option in order to detect the side                                        // 10831
			alignment = options.align[0] + options.verticalAlign[0] + options.layout[0];                                        // 10832
			                                                                                                                    // 10833
		if (this.display && !options.floating) {                                                                             // 10834
                                                                                                                       // 10835
			each([                                                                                                              // 10836
				/(lth|ct|rth)/,                                                                                                    // 10837
				/(rtv|rm|rbv)/,                                                                                                    // 10838
				/(rbh|cb|lbh)/,                                                                                                    // 10839
				/(lbv|lm|ltv)/                                                                                                     // 10840
			], function (alignments, side) {                                                                                    // 10841
				if (alignments.test(alignment) && !defined(margin[side])) {                                                        // 10842
					// Now we have detected on which side of the chart we should reserve space for the legend                         // 10843
					chart[marginNames[side]] = mathMax(                                                                               // 10844
						chart[marginNames[side]],                                                                                        // 10845
						chart.legend[(side + 1) % 2 ? 'legendHeight' : 'legendWidth'] +                                                  // 10846
							[1, -1, -1, 1][side] * options[(side % 2) ? 'x' : 'y'] +                                                        // 10847
							pick(options.margin, 12) +                                                                                      // 10848
							spacing[side]                                                                                                   // 10849
					);                                                                                                                // 10850
				}                                                                                                                  // 10851
			});                                                                                                                 // 10852
		}                                                                                                                    // 10853
	},                                                                                                                    // 10854
                                                                                                                       // 10855
	/**                                                                                                                   // 10856
	 * Render the legend. This method can be called both before and after                                                 // 10857
	 * chart.render. If called after, it will only rearrange items instead                                                // 10858
	 * of creating new ones.                                                                                              // 10859
	 */                                                                                                                   // 10860
	render: function () {                                                                                                 // 10861
		var legend = this,                                                                                                   // 10862
			chart = legend.chart,                                                                                               // 10863
			renderer = chart.renderer,                                                                                          // 10864
			legendGroup = legend.group,                                                                                         // 10865
			allItems,                                                                                                           // 10866
			display,                                                                                                            // 10867
			legendWidth,                                                                                                        // 10868
			legendHeight,                                                                                                       // 10869
			box = legend.box,                                                                                                   // 10870
			options = legend.options,                                                                                           // 10871
			padding = legend.padding,                                                                                           // 10872
			legendBorderWidth = options.borderWidth,                                                                            // 10873
			legendBackgroundColor = options.backgroundColor;                                                                    // 10874
                                                                                                                       // 10875
		legend.itemX = legend.initialItemX;                                                                                  // 10876
		legend.itemY = legend.initialItemY;                                                                                  // 10877
		legend.offsetWidth = 0;                                                                                              // 10878
		legend.lastItemY = 0;                                                                                                // 10879
                                                                                                                       // 10880
		if (!legendGroup) {                                                                                                  // 10881
			legend.group = legendGroup = renderer.g('legend')                                                                   // 10882
				.attr({ zIndex: 7 })                                                                                               // 10883
				.add();                                                                                                            // 10884
			legend.contentGroup = renderer.g()                                                                                  // 10885
				.attr({ zIndex: 1 }) // above background                                                                           // 10886
				.add(legendGroup);                                                                                                 // 10887
			legend.scrollGroup = renderer.g()                                                                                   // 10888
				.add(legend.contentGroup);                                                                                         // 10889
		}                                                                                                                    // 10890
		                                                                                                                     // 10891
		legend.renderTitle();                                                                                                // 10892
                                                                                                                       // 10893
		// add each series or point                                                                                          // 10894
		allItems = legend.getAllItems();                                                                                     // 10895
                                                                                                                       // 10896
		// sort by legendIndex                                                                                               // 10897
		stableSort(allItems, function (a, b) {                                                                               // 10898
			return ((a.options && a.options.legendIndex) || 0) - ((b.options && b.options.legendIndex) || 0);                   // 10899
		});                                                                                                                  // 10900
                                                                                                                       // 10901
		// reversed legend                                                                                                   // 10902
		if (options.reversed) {                                                                                              // 10903
			allItems.reverse();                                                                                                 // 10904
		}                                                                                                                    // 10905
                                                                                                                       // 10906
		legend.allItems = allItems;                                                                                          // 10907
		legend.display = display = !!allItems.length;                                                                        // 10908
                                                                                                                       // 10909
		// render the items                                                                                                  // 10910
		legend.lastLineHeight = 0;                                                                                           // 10911
		each(allItems, function (item) {                                                                                     // 10912
			legend.renderItem(item);                                                                                            // 10913
		});                                                                                                                  // 10914
                                                                                                                       // 10915
		// Get the box                                                                                                       // 10916
		legendWidth = (options.width || legend.offsetWidth) + padding;                                                       // 10917
		legendHeight = legend.lastItemY + legend.lastLineHeight + legend.titleHeight;                                        // 10918
		legendHeight = legend.handleOverflow(legendHeight);                                                                  // 10919
		legendHeight += padding;                                                                                             // 10920
                                                                                                                       // 10921
		// Draw the border and/or background                                                                                 // 10922
		if (legendBorderWidth || legendBackgroundColor) {                                                                    // 10923
                                                                                                                       // 10924
			if (!box) {                                                                                                         // 10925
				legend.box = box = renderer.rect(                                                                                  // 10926
					0,                                                                                                                // 10927
					0,                                                                                                                // 10928
					legendWidth,                                                                                                      // 10929
					legendHeight,                                                                                                     // 10930
					options.borderRadius,                                                                                             // 10931
					legendBorderWidth || 0                                                                                            // 10932
				).attr({                                                                                                           // 10933
					stroke: options.borderColor,                                                                                      // 10934
					'stroke-width': legendBorderWidth || 0,                                                                           // 10935
					fill: legendBackgroundColor || NONE                                                                               // 10936
				})                                                                                                                 // 10937
				.add(legendGroup)                                                                                                  // 10938
				.shadow(options.shadow);                                                                                           // 10939
				box.isNew = true;                                                                                                  // 10940
                                                                                                                       // 10941
			} else if (legendWidth > 0 && legendHeight > 0) {                                                                   // 10942
				box[box.isNew ? 'attr' : 'animate'](                                                                               // 10943
					box.crisp({ width: legendWidth, height: legendHeight })                                                           // 10944
				);                                                                                                                 // 10945
				box.isNew = false;                                                                                                 // 10946
			}                                                                                                                   // 10947
                                                                                                                       // 10948
			// hide the border if no items                                                                                      // 10949
			box[display ? 'show' : 'hide']();                                                                                   // 10950
		}                                                                                                                    // 10951
		                                                                                                                     // 10952
		legend.legendWidth = legendWidth;                                                                                    // 10953
		legend.legendHeight = legendHeight;                                                                                  // 10954
                                                                                                                       // 10955
		// Now that the legend width and height are established, put the items in the                                        // 10956
		// final position                                                                                                    // 10957
		each(allItems, function (item) {                                                                                     // 10958
			legend.positionItem(item);                                                                                          // 10959
		});                                                                                                                  // 10960
                                                                                                                       // 10961
		// 1.x compatibility: positioning based on style                                                                     // 10962
		/*var props = ['left', 'right', 'top', 'bottom'],                                                                    // 10963
			prop,                                                                                                               // 10964
			i = 4;                                                                                                              // 10965
		while (i--) {                                                                                                        // 10966
			prop = props[i];                                                                                                    // 10967
			if (options.style[prop] && options.style[prop] !== 'auto') {                                                        // 10968
				options[i < 2 ? 'align' : 'verticalAlign'] = prop;                                                                 // 10969
				options[i < 2 ? 'x' : 'y'] = pInt(options.style[prop]) * (i % 2 ? -1 : 1);                                         // 10970
			}                                                                                                                   // 10971
		}*/                                                                                                                  // 10972
                                                                                                                       // 10973
		if (display) {                                                                                                       // 10974
			legendGroup.align(extend({                                                                                          // 10975
				width: legendWidth,                                                                                                // 10976
				height: legendHeight                                                                                               // 10977
			}, options), true, 'spacingBox');                                                                                   // 10978
		}                                                                                                                    // 10979
                                                                                                                       // 10980
		if (!chart.isResizing) {                                                                                             // 10981
			this.positionCheckboxes();                                                                                          // 10982
		}                                                                                                                    // 10983
	},                                                                                                                    // 10984
	                                                                                                                      // 10985
	/**                                                                                                                   // 10986
	 * Set up the overflow handling by adding navigation with up and down arrows below the                                // 10987
	 * legend.                                                                                                            // 10988
	 */                                                                                                                   // 10989
	handleOverflow: function (legendHeight) {                                                                             // 10990
		var legend = this,                                                                                                   // 10991
			chart = this.chart,                                                                                                 // 10992
			renderer = chart.renderer,                                                                                          // 10993
			options = this.options,                                                                                             // 10994
			optionsY = options.y,                                                                                               // 10995
			alignTop = options.verticalAlign === 'top',                                                                         // 10996
			spaceHeight = chart.spacingBox.height + (alignTop ? -optionsY : optionsY) - this.padding,                           // 10997
			maxHeight = options.maxHeight,                                                                                      // 10998
			clipHeight,                                                                                                         // 10999
			clipRect = this.clipRect,                                                                                           // 11000
			navOptions = options.navigation,                                                                                    // 11001
			animation = pick(navOptions.animation, true),                                                                       // 11002
			arrowSize = navOptions.arrowSize || 12,                                                                             // 11003
			nav = this.nav,                                                                                                     // 11004
			pages = this.pages,                                                                                                 // 11005
			padding = this.padding,                                                                                             // 11006
			lastY,                                                                                                              // 11007
			allItems = this.allItems,                                                                                           // 11008
			clipToHeight = function (height) {                                                                                  // 11009
				clipRect.attr({                                                                                                    // 11010
					height: height                                                                                                    // 11011
				});                                                                                                                // 11012
                                                                                                                       // 11013
				// useHTML                                                                                                         // 11014
				if (legend.contentGroup.div) {                                                                                     // 11015
					legend.contentGroup.div.style.clip = 'rect(' + padding + 'px,9999px,' + (padding + height) + 'px,0)';             // 11016
				}                                                                                                                  // 11017
			};                                                                                                                  // 11018
                                                                                                                       // 11019
			                                                                                                                    // 11020
		// Adjust the height                                                                                                 // 11021
		if (options.layout === 'horizontal') {                                                                               // 11022
			spaceHeight /= 2;                                                                                                   // 11023
		}                                                                                                                    // 11024
		if (maxHeight) {                                                                                                     // 11025
			spaceHeight = mathMin(spaceHeight, maxHeight);                                                                      // 11026
		}                                                                                                                    // 11027
		                                                                                                                     // 11028
		// Reset the legend height and adjust the clipping rectangle                                                         // 11029
		pages.length = 0;                                                                                                    // 11030
		if (legendHeight > spaceHeight) {                                                                                    // 11031
                                                                                                                       // 11032
			this.clipHeight = clipHeight = mathMax(spaceHeight - 20 - this.titleHeight - padding, 0);                           // 11033
			this.currentPage = pick(this.currentPage, 1);                                                                       // 11034
			this.fullHeight = legendHeight;                                                                                     // 11035
			                                                                                                                    // 11036
			// Fill pages with Y positions so that the top of each a legend item defines                                        // 11037
			// the scroll top for each page (#2098)                                                                             // 11038
			each(allItems, function (item, i) {                                                                                 // 11039
				var y = item._legendItemPos[1],                                                                                    // 11040
					h = mathRound(item.legendItem.getBBox().height),                                                                  // 11041
					len = pages.length;                                                                                               // 11042
				                                                                                                                   // 11043
				if (!len || (y - pages[len - 1] > clipHeight && (lastY || y) !== pages[len - 1])) {                                // 11044
					pages.push(lastY || y);                                                                                           // 11045
					len++;                                                                                                            // 11046
				}                                                                                                                  // 11047
				                                                                                                                   // 11048
				if (i === allItems.length - 1 && y + h - pages[len - 1] > clipHeight) {                                            // 11049
					pages.push(y);                                                                                                    // 11050
				}                                                                                                                  // 11051
				if (y !== lastY) {                                                                                                 // 11052
					lastY = y;                                                                                                        // 11053
				}                                                                                                                  // 11054
			});                                                                                                                 // 11055
                                                                                                                       // 11056
			// Only apply clipping if needed. Clipping causes blurred legend in PDF export (#1787)                              // 11057
			if (!clipRect) {                                                                                                    // 11058
				clipRect = legend.clipRect = renderer.clipRect(0, padding, 9999, 0);                                               // 11059
				legend.contentGroup.clip(clipRect);                                                                                // 11060
			}                                                                                                                   // 11061
				                                                                                                                   // 11062
			clipToHeight(clipHeight);                                                                                           // 11063
                                                                                                                       // 11064
			// Add navigation elements                                                                                          // 11065
			if (!nav) {                                                                                                         // 11066
				this.nav = nav = renderer.g().attr({ zIndex: 1 }).add(this.group);                                                 // 11067
				this.up = renderer.symbol('triangle', 0, 0, arrowSize, arrowSize)                                                  // 11068
					.on('click', function () {                                                                                        // 11069
						legend.scroll(-1, animation);                                                                                    // 11070
					})                                                                                                                // 11071
					.add(nav);                                                                                                        // 11072
				this.pager = renderer.text('', 15, 10)                                                                             // 11073
					.css(navOptions.style)                                                                                            // 11074
					.add(nav);                                                                                                        // 11075
				this.down = renderer.symbol('triangle-down', 0, 0, arrowSize, arrowSize)                                           // 11076
					.on('click', function () {                                                                                        // 11077
						legend.scroll(1, animation);                                                                                     // 11078
					})                                                                                                                // 11079
					.add(nav);                                                                                                        // 11080
			}                                                                                                                   // 11081
			                                                                                                                    // 11082
			// Set initial position                                                                                             // 11083
			legend.scroll(0);                                                                                                   // 11084
			                                                                                                                    // 11085
			legendHeight = spaceHeight;                                                                                         // 11086
			                                                                                                                    // 11087
		} else if (nav) {                                                                                                    // 11088
			clipToHeight(chart.chartHeight);                                                                                    // 11089
			nav.hide();                                                                                                         // 11090
			this.scrollGroup.attr({                                                                                             // 11091
				translateY: 1                                                                                                      // 11092
			});                                                                                                                 // 11093
			this.clipHeight = 0; // #1379                                                                                       // 11094
		}                                                                                                                    // 11095
		                                                                                                                     // 11096
		return legendHeight;                                                                                                 // 11097
	},                                                                                                                    // 11098
	                                                                                                                      // 11099
	/**                                                                                                                   // 11100
	 * Scroll the legend by a number of pages                                                                             // 11101
	 * @param {Object} scrollBy                                                                                           // 11102
	 * @param {Object} animation                                                                                          // 11103
	 */                                                                                                                   // 11104
	scroll: function (scrollBy, animation) {                                                                              // 11105
		var pages = this.pages,                                                                                              // 11106
			pageCount = pages.length,                                                                                           // 11107
			currentPage = this.currentPage + scrollBy,                                                                          // 11108
			clipHeight = this.clipHeight,                                                                                       // 11109
			navOptions = this.options.navigation,                                                                               // 11110
			activeColor = navOptions.activeColor,                                                                               // 11111
			inactiveColor = navOptions.inactiveColor,                                                                           // 11112
			pager = this.pager,                                                                                                 // 11113
			padding = this.padding,                                                                                             // 11114
			scrollOffset;                                                                                                       // 11115
		                                                                                                                     // 11116
		// When resizing while looking at the last page                                                                      // 11117
		if (currentPage > pageCount) {                                                                                       // 11118
			currentPage = pageCount;                                                                                            // 11119
		}                                                                                                                    // 11120
		                                                                                                                     // 11121
		if (currentPage > 0) {                                                                                               // 11122
			                                                                                                                    // 11123
			if (animation !== UNDEFINED) {                                                                                      // 11124
				setAnimation(animation, this.chart);                                                                               // 11125
			}                                                                                                                   // 11126
			                                                                                                                    // 11127
			this.nav.attr({                                                                                                     // 11128
				translateX: padding,                                                                                               // 11129
				translateY: clipHeight + this.padding + 7 + this.titleHeight,                                                      // 11130
				visibility: VISIBLE                                                                                                // 11131
			});                                                                                                                 // 11132
			this.up.attr({                                                                                                      // 11133
					fill: currentPage === 1 ? inactiveColor : activeColor                                                             // 11134
				})                                                                                                                 // 11135
				.css({                                                                                                             // 11136
					cursor: currentPage === 1 ? 'default' : 'pointer'                                                                 // 11137
				});                                                                                                                // 11138
			pager.attr({                                                                                                        // 11139
				text: currentPage + '/' + pageCount                                                                                // 11140
			});                                                                                                                 // 11141
			this.down.attr({                                                                                                    // 11142
					x: 18 + this.pager.getBBox().width, // adjust to text width                                                       // 11143
					fill: currentPage === pageCount ? inactiveColor : activeColor                                                     // 11144
				})                                                                                                                 // 11145
				.css({                                                                                                             // 11146
					cursor: currentPage === pageCount ? 'default' : 'pointer'                                                         // 11147
				});                                                                                                                // 11148
			                                                                                                                    // 11149
			scrollOffset = -pages[currentPage - 1] + this.initialItemY;                                                         // 11150
                                                                                                                       // 11151
			this.scrollGroup.animate({                                                                                          // 11152
				translateY: scrollOffset                                                                                           // 11153
			});			                                                                                                              // 11154
			                                                                                                                    // 11155
			this.currentPage = currentPage;                                                                                     // 11156
			this.positionCheckboxes(scrollOffset);                                                                              // 11157
		}                                                                                                                    // 11158
			                                                                                                                    // 11159
	}                                                                                                                     // 11160
	                                                                                                                      // 11161
};                                                                                                                     // 11162
                                                                                                                       // 11163
/*                                                                                                                     // 11164
 * LegendSymbolMixin                                                                                                   // 11165
 */                                                                                                                    // 11166
                                                                                                                       // 11167
var LegendSymbolMixin = Highcharts.LegendSymbolMixin = {                                                               // 11168
                                                                                                                       // 11169
	/**                                                                                                                   // 11170
	 * Get the series' symbol in the legend                                                                               // 11171
	 *                                                                                                                    // 11172
	 * @param {Object} legend The legend object                                                                           // 11173
	 * @param {Object} item The series (this) or point                                                                    // 11174
	 */                                                                                                                   // 11175
	drawRectangle: function (legend, item) {                                                                              // 11176
		var symbolHeight = legend.options.symbolHeight || legend.fontMetrics.f;                                              // 11177
                                                                                                                       // 11178
		item.legendSymbol = this.chart.renderer.rect(                                                                        // 11179
			0,                                                                                                                  // 11180
			legend.baseline - symbolHeight + 1, // #3988                                                                        // 11181
			legend.symbolWidth,                                                                                                 // 11182
			symbolHeight,                                                                                                       // 11183
			legend.options.symbolRadius || 0                                                                                    // 11184
		).attr({                                                                                                             // 11185
			zIndex: 3                                                                                                           // 11186
		}).add(item.legendGroup);		                                                                                          // 11187
		                                                                                                                     // 11188
	},                                                                                                                    // 11189
                                                                                                                       // 11190
	/**                                                                                                                   // 11191
	 * Get the series' symbol in the legend. This method should be overridable to create custom                           // 11192
	 * symbols through Highcharts.seriesTypes[type].prototype.drawLegendSymbols.                                          // 11193
	 *                                                                                                                    // 11194
	 * @param {Object} legend The legend object                                                                           // 11195
	 */                                                                                                                   // 11196
	drawLineMarker: function (legend) {                                                                                   // 11197
                                                                                                                       // 11198
		var options = this.options,                                                                                          // 11199
			markerOptions = options.marker,                                                                                     // 11200
			radius,                                                                                                             // 11201
			legendSymbol,                                                                                                       // 11202
			symbolWidth = legend.symbolWidth,                                                                                   // 11203
			renderer = this.chart.renderer,                                                                                     // 11204
			legendItemGroup = this.legendGroup,                                                                                 // 11205
			verticalCenter = legend.baseline - mathRound(legend.fontMetrics.b * 0.3),                                           // 11206
			attr;                                                                                                               // 11207
                                                                                                                       // 11208
		// Draw the line                                                                                                     // 11209
		if (options.lineWidth) {                                                                                             // 11210
			attr = {                                                                                                            // 11211
				'stroke-width': options.lineWidth                                                                                  // 11212
			};                                                                                                                  // 11213
			if (options.dashStyle) {                                                                                            // 11214
				attr.dashstyle = options.dashStyle;                                                                                // 11215
			}                                                                                                                   // 11216
			this.legendLine = renderer.path([                                                                                   // 11217
				M,                                                                                                                 // 11218
				0,                                                                                                                 // 11219
				verticalCenter,                                                                                                    // 11220
				L,                                                                                                                 // 11221
				symbolWidth,                                                                                                       // 11222
				verticalCenter                                                                                                     // 11223
			])                                                                                                                  // 11224
			.attr(attr)                                                                                                         // 11225
			.add(legendItemGroup);                                                                                              // 11226
		}                                                                                                                    // 11227
		                                                                                                                     // 11228
		// Draw the marker                                                                                                   // 11229
		if (markerOptions && markerOptions.enabled !== false) {                                                              // 11230
			radius = markerOptions.radius;                                                                                      // 11231
			this.legendSymbol = legendSymbol = renderer.symbol(                                                                 // 11232
				this.symbol,                                                                                                       // 11233
				(symbolWidth / 2) - radius,                                                                                        // 11234
				verticalCenter - radius,                                                                                           // 11235
				2 * radius,                                                                                                        // 11236
				2 * radius                                                                                                         // 11237
			)                                                                                                                   // 11238
			.add(legendItemGroup);                                                                                              // 11239
			legendSymbol.isMarker = true;                                                                                       // 11240
		}                                                                                                                    // 11241
	}                                                                                                                     // 11242
};                                                                                                                     // 11243
                                                                                                                       // 11244
// Workaround for #2030, horizontal legend items not displaying in IE11 Preview,                                       // 11245
// and for #2580, a similar drawing flaw in Firefox 26.                                                                // 11246
// TODO: Explore if there's a general cause for this. The problem may be related                                       // 11247
// to nested group elements, as the legend item texts are within 4 group elements.                                     // 11248
if (/Trident\/7\.0/.test(userAgent) || isFirefox) {                                                                    // 11249
	wrap(Legend.prototype, 'positionItem', function (proceed, item) {                                                     // 11250
		var legend = this,                                                                                                   // 11251
			runPositionItem = function () { // If chart destroyed in sync, this is undefined (#2030)                            // 11252
				if (item._legendItemPos) {                                                                                         // 11253
					proceed.call(legend, item);                                                                                       // 11254
				}                                                                                                                  // 11255
			};                                                                                                                  // 11256
                                                                                                                       // 11257
		// Do it now, for export and to get checkbox placement                                                               // 11258
		runPositionItem();                                                                                                   // 11259
		                                                                                                                     // 11260
		// Do it after to work around the core issue                                                                         // 11261
		setTimeout(runPositionItem);                                                                                         // 11262
	});                                                                                                                   // 11263
}                                                                                                                      // 11264
/**                                                                                                                    // 11265
 * The chart class                                                                                                     // 11266
 * @param {Object} options                                                                                             // 11267
 * @param {Function} callback Function to run when the chart has loaded                                                // 11268
 */                                                                                                                    // 11269
var Chart = Highcharts.Chart = function () {                                                                           // 11270
	this.init.apply(this, arguments);                                                                                     // 11271
};                                                                                                                     // 11272
                                                                                                                       // 11273
Chart.prototype = {                                                                                                    // 11274
                                                                                                                       // 11275
	/**                                                                                                                   // 11276
	 * Hook for modules                                                                                                   // 11277
	 */                                                                                                                   // 11278
	callbacks: [],                                                                                                        // 11279
                                                                                                                       // 11280
	/**                                                                                                                   // 11281
	 * Initialize the chart                                                                                               // 11282
	 */                                                                                                                   // 11283
	init: function (userOptions, callback) {                                                                              // 11284
                                                                                                                       // 11285
		// Handle regular options                                                                                            // 11286
		var options,                                                                                                         // 11287
			seriesOptions = userOptions.series; // skip merging data points to increase performance                             // 11288
                                                                                                                       // 11289
		userOptions.series = null;                                                                                           // 11290
		options = merge(defaultOptions, userOptions); // do the merge                                                        // 11291
		options.series = userOptions.series = seriesOptions; // set back the series data                                     // 11292
		this.userOptions = userOptions;                                                                                      // 11293
                                                                                                                       // 11294
		var optionsChart = options.chart;                                                                                    // 11295
		                                                                                                                     // 11296
		// Create margin & spacing array                                                                                     // 11297
		this.margin = this.splashArray('margin', optionsChart);                                                              // 11298
		this.spacing = this.splashArray('spacing', optionsChart);                                                            // 11299
                                                                                                                       // 11300
		var chartEvents = optionsChart.events;                                                                               // 11301
                                                                                                                       // 11302
		//this.runChartClick = chartEvents && !!chartEvents.click;                                                           // 11303
		this.bounds = { h: {}, v: {} }; // Pixel data bounds for touch zoom                                                  // 11304
                                                                                                                       // 11305
		this.callback = callback;                                                                                            // 11306
		this.isResizing = 0;                                                                                                 // 11307
		this.options = options;                                                                                              // 11308
		//chartTitleOptions = UNDEFINED;                                                                                     // 11309
		//chartSubtitleOptions = UNDEFINED;                                                                                  // 11310
                                                                                                                       // 11311
		this.axes = [];                                                                                                      // 11312
		this.series = [];                                                                                                    // 11313
		this.hasCartesianSeries = optionsChart.showAxes;                                                                     // 11314
		//this.axisOffset = UNDEFINED;                                                                                       // 11315
		//this.maxTicks = UNDEFINED; // handle the greatest amount of ticks on grouped axes                                  // 11316
		//this.inverted = UNDEFINED;                                                                                         // 11317
		//this.loadingShown = UNDEFINED;                                                                                     // 11318
		//this.container = UNDEFINED;                                                                                        // 11319
		//this.chartWidth = UNDEFINED;                                                                                       // 11320
		//this.chartHeight = UNDEFINED;                                                                                      // 11321
		//this.marginRight = UNDEFINED;                                                                                      // 11322
		//this.marginBottom = UNDEFINED;                                                                                     // 11323
		//this.containerWidth = UNDEFINED;                                                                                   // 11324
		//this.containerHeight = UNDEFINED;                                                                                  // 11325
		//this.oldChartWidth = UNDEFINED;                                                                                    // 11326
		//this.oldChartHeight = UNDEFINED;                                                                                   // 11327
                                                                                                                       // 11328
		//this.renderTo = UNDEFINED;                                                                                         // 11329
		//this.renderToClone = UNDEFINED;                                                                                    // 11330
                                                                                                                       // 11331
		//this.spacingBox = UNDEFINED                                                                                        // 11332
                                                                                                                       // 11333
		//this.legend = UNDEFINED;                                                                                           // 11334
                                                                                                                       // 11335
		// Elements                                                                                                          // 11336
		//this.chartBackground = UNDEFINED;                                                                                  // 11337
		//this.plotBackground = UNDEFINED;                                                                                   // 11338
		//this.plotBGImage = UNDEFINED;                                                                                      // 11339
		//this.plotBorder = UNDEFINED;                                                                                       // 11340
		//this.loadingDiv = UNDEFINED;                                                                                       // 11341
		//this.loadingSpan = UNDEFINED;                                                                                      // 11342
                                                                                                                       // 11343
		var chart = this,                                                                                                    // 11344
			eventType;                                                                                                          // 11345
                                                                                                                       // 11346
		// Add the chart to the global lookup                                                                                // 11347
		chart.index = charts.length;                                                                                         // 11348
		charts.push(chart);                                                                                                  // 11349
		chartCount++;                                                                                                        // 11350
                                                                                                                       // 11351
		// Set up auto resize                                                                                                // 11352
		if (optionsChart.reflow !== false) {                                                                                 // 11353
			addEvent(chart, 'load', function () {                                                                               // 11354
				chart.initReflow();                                                                                                // 11355
			});                                                                                                                 // 11356
		}                                                                                                                    // 11357
                                                                                                                       // 11358
		// Chart event handlers                                                                                              // 11359
		if (chartEvents) {                                                                                                   // 11360
			for (eventType in chartEvents) {                                                                                    // 11361
				addEvent(chart, eventType, chartEvents[eventType]);                                                                // 11362
			}                                                                                                                   // 11363
		}                                                                                                                    // 11364
                                                                                                                       // 11365
		chart.xAxis = [];                                                                                                    // 11366
		chart.yAxis = [];                                                                                                    // 11367
                                                                                                                       // 11368
		// Expose methods and variables                                                                                      // 11369
		chart.animation = useCanVG ? false : pick(optionsChart.animation, true);                                             // 11370
		chart.pointCount = chart.colorCounter = chart.symbolCounter = 0;                                                     // 11371
                                                                                                                       // 11372
		chart.firstRender();                                                                                                 // 11373
	},                                                                                                                    // 11374
                                                                                                                       // 11375
	/**                                                                                                                   // 11376
	 * Initialize an individual series, called internally before render time                                              // 11377
	 */                                                                                                                   // 11378
	initSeries: function (options) {                                                                                      // 11379
		var chart = this,                                                                                                    // 11380
			optionsChart = chart.options.chart,                                                                                 // 11381
			type = options.type || optionsChart.type || optionsChart.defaultSeriesType,                                         // 11382
			series,                                                                                                             // 11383
			constr = seriesTypes[type];                                                                                         // 11384
                                                                                                                       // 11385
		// No such series type                                                                                               // 11386
		if (!constr) {                                                                                                       // 11387
			error(17, true);                                                                                                    // 11388
		}                                                                                                                    // 11389
                                                                                                                       // 11390
		series = new constr();                                                                                               // 11391
		series.init(this, options);                                                                                          // 11392
		return series;                                                                                                       // 11393
	},                                                                                                                    // 11394
                                                                                                                       // 11395
	/**                                                                                                                   // 11396
	 * Check whether a given point is within the plot area                                                                // 11397
	 *                                                                                                                    // 11398
	 * @param {Number} plotX Pixel x relative to the plot area                                                            // 11399
	 * @param {Number} plotY Pixel y relative to the plot area                                                            // 11400
	 * @param {Boolean} inverted Whether the chart is inverted                                                            // 11401
	 */                                                                                                                   // 11402
	isInsidePlot: function (plotX, plotY, inverted) {                                                                     // 11403
		var x = inverted ? plotY : plotX,                                                                                    // 11404
			y = inverted ? plotX : plotY;                                                                                       // 11405
			                                                                                                                    // 11406
		return x >= 0 &&                                                                                                     // 11407
			x <= this.plotWidth &&                                                                                              // 11408
			y >= 0 &&                                                                                                           // 11409
			y <= this.plotHeight;                                                                                               // 11410
	},                                                                                                                    // 11411
                                                                                                                       // 11412
	/**                                                                                                                   // 11413
	 * Redraw legend, axes or series based on updated data                                                                // 11414
	 *                                                                                                                    // 11415
	 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation                             // 11416
	 *    configuration                                                                                                   // 11417
	 */                                                                                                                   // 11418
	redraw: function (animation) {                                                                                        // 11419
		var chart = this,                                                                                                    // 11420
			axes = chart.axes,                                                                                                  // 11421
			series = chart.series,                                                                                              // 11422
			pointer = chart.pointer,                                                                                            // 11423
			legend = chart.legend,                                                                                              // 11424
			redrawLegend = chart.isDirtyLegend,                                                                                 // 11425
			hasStackedSeries,                                                                                                   // 11426
			hasDirtyStacks,                                                                                                     // 11427
			hasCartesianSeries = chart.hasCartesianSeries,                                                                      // 11428
			isDirtyBox = chart.isDirtyBox, // todo: check if it has actually changed?                                           // 11429
			seriesLength = series.length,                                                                                       // 11430
			i = seriesLength,                                                                                                   // 11431
			serie,                                                                                                              // 11432
			renderer = chart.renderer,                                                                                          // 11433
			isHiddenChart = renderer.isHidden(),                                                                                // 11434
			afterRedraw = [];                                                                                                   // 11435
			                                                                                                                    // 11436
		setAnimation(animation, chart);                                                                                      // 11437
		                                                                                                                     // 11438
		if (isHiddenChart) {                                                                                                 // 11439
			chart.cloneRenderTo();                                                                                              // 11440
		}                                                                                                                    // 11441
                                                                                                                       // 11442
		// Adjust title layout (reflow multiline text)                                                                       // 11443
		chart.layOutTitles();                                                                                                // 11444
                                                                                                                       // 11445
		// link stacked series                                                                                               // 11446
		while (i--) {                                                                                                        // 11447
			serie = series[i];                                                                                                  // 11448
                                                                                                                       // 11449
			if (serie.options.stacking) {                                                                                       // 11450
				hasStackedSeries = true;                                                                                           // 11451
				                                                                                                                   // 11452
				if (serie.isDirty) {                                                                                               // 11453
					hasDirtyStacks = true;                                                                                            // 11454
					break;                                                                                                            // 11455
				}                                                                                                                  // 11456
			}                                                                                                                   // 11457
		}                                                                                                                    // 11458
		if (hasDirtyStacks) { // mark others as dirty                                                                        // 11459
			i = seriesLength;                                                                                                   // 11460
			while (i--) {                                                                                                       // 11461
				serie = series[i];                                                                                                 // 11462
				if (serie.options.stacking) {                                                                                      // 11463
					serie.isDirty = true;                                                                                             // 11464
				}                                                                                                                  // 11465
			}                                                                                                                   // 11466
		}                                                                                                                    // 11467
                                                                                                                       // 11468
		// Handle updated data in the series                                                                                 // 11469
		each(series, function (serie) {                                                                                      // 11470
			if (serie.isDirty) {                                                                                                // 11471
				if (serie.options.legendType === 'point') {                                                                        // 11472
					if (serie.updateTotals) {                                                                                         // 11473
						serie.updateTotals();                                                                                            // 11474
					}                                                                                                                 // 11475
					redrawLegend = true;                                                                                              // 11476
				}                                                                                                                  // 11477
			}                                                                                                                   // 11478
		});                                                                                                                  // 11479
                                                                                                                       // 11480
		// handle added or removed series                                                                                    // 11481
		if (redrawLegend && legend.options.enabled) { // series or pie points are added or removed                           // 11482
			// draw legend graphics                                                                                             // 11483
			legend.render();                                                                                                    // 11484
                                                                                                                       // 11485
			chart.isDirtyLegend = false;                                                                                        // 11486
		}                                                                                                                    // 11487
                                                                                                                       // 11488
		// reset stacks                                                                                                      // 11489
		if (hasStackedSeries) {                                                                                              // 11490
			chart.getStacks();                                                                                                  // 11491
		}                                                                                                                    // 11492
                                                                                                                       // 11493
                                                                                                                       // 11494
		if (hasCartesianSeries) {                                                                                            // 11495
			if (!chart.isResizing) {                                                                                            // 11496
                                                                                                                       // 11497
				// reset maxTicks                                                                                                  // 11498
				chart.maxTicks = null;                                                                                             // 11499
                                                                                                                       // 11500
				// set axes scales                                                                                                 // 11501
				each(axes, function (axis) {                                                                                       // 11502
					axis.setScale();                                                                                                  // 11503
				});                                                                                                                // 11504
			}                                                                                                                   // 11505
		}                                                                                                                    // 11506
                                                                                                                       // 11507
		chart.getMargins(); // #3098                                                                                         // 11508
                                                                                                                       // 11509
		if (hasCartesianSeries) {                                                                                            // 11510
			// If one axis is dirty, all axes must be redrawn (#792, #2169)                                                     // 11511
			each(axes, function (axis) {                                                                                        // 11512
				if (axis.isDirty) {                                                                                                // 11513
					isDirtyBox = true;                                                                                                // 11514
				}                                                                                                                  // 11515
			});                                                                                                                 // 11516
                                                                                                                       // 11517
			// redraw axes                                                                                                      // 11518
			each(axes, function (axis) {                                                                                        // 11519
				                                                                                                                   // 11520
				// Fire 'afterSetExtremes' only if extremes are set                                                                // 11521
				if (axis.isDirtyExtremes) { // #821                                                                                // 11522
					axis.isDirtyExtremes = false;                                                                                     // 11523
					afterRedraw.push(function () { // prevent a recursive call to chart.redraw() (#1119)                              // 11524
						fireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes())); // #747, #751                   // 11525
						delete axis.eventArgs;                                                                                           // 11526
					});                                                                                                               // 11527
				}                                                                                                                  // 11528
				                                                                                                                   // 11529
				if (isDirtyBox || hasStackedSeries) {                                                                              // 11530
					axis.redraw();                                                                                                    // 11531
				}                                                                                                                  // 11532
			});                                                                                                                 // 11533
		}                                                                                                                    // 11534
		                                                                                                                     // 11535
		// the plot areas size has changed                                                                                   // 11536
		if (isDirtyBox) {                                                                                                    // 11537
			chart.drawChartBox();                                                                                               // 11538
		}                                                                                                                    // 11539
                                                                                                                       // 11540
                                                                                                                       // 11541
		// redraw affected series                                                                                            // 11542
		each(series, function (serie) {                                                                                      // 11543
			if (serie.isDirty && serie.visible &&                                                                               // 11544
					(!serie.isCartesian || serie.xAxis)) { // issue #153                                                              // 11545
				serie.redraw();                                                                                                    // 11546
			}                                                                                                                   // 11547
		});                                                                                                                  // 11548
                                                                                                                       // 11549
		// move tooltip or reset                                                                                             // 11550
		if (pointer) {                                                                                                       // 11551
			pointer.reset(true);                                                                                                // 11552
		}                                                                                                                    // 11553
                                                                                                                       // 11554
		// redraw if canvas                                                                                                  // 11555
		renderer.draw();                                                                                                     // 11556
                                                                                                                       // 11557
		// fire the event                                                                                                    // 11558
		fireEvent(chart, 'redraw'); // jQuery breaks this when calling it from addEvent. Overwrites chart.redraw             // 11559
		                                                                                                                     // 11560
		if (isHiddenChart) {                                                                                                 // 11561
			chart.cloneRenderTo(true);                                                                                          // 11562
		}                                                                                                                    // 11563
		                                                                                                                     // 11564
		// Fire callbacks that are put on hold until after the redraw                                                        // 11565
		each(afterRedraw, function (callback) {                                                                              // 11566
			callback.call();                                                                                                    // 11567
		});                                                                                                                  // 11568
	},                                                                                                                    // 11569
                                                                                                                       // 11570
	/**                                                                                                                   // 11571
	 * Get an axis, series or point object by id.                                                                         // 11572
	 * @param id {String} The id as given in the configuration options                                                    // 11573
	 */                                                                                                                   // 11574
	get: function (id) {                                                                                                  // 11575
		var chart = this,                                                                                                    // 11576
			axes = chart.axes,                                                                                                  // 11577
			series = chart.series;                                                                                              // 11578
                                                                                                                       // 11579
		var i,                                                                                                               // 11580
			j,                                                                                                                  // 11581
			points;                                                                                                             // 11582
                                                                                                                       // 11583
		// search axes                                                                                                       // 11584
		for (i = 0; i < axes.length; i++) {                                                                                  // 11585
			if (axes[i].options.id === id) {                                                                                    // 11586
				return axes[i];                                                                                                    // 11587
			}                                                                                                                   // 11588
		}                                                                                                                    // 11589
                                                                                                                       // 11590
		// search series                                                                                                     // 11591
		for (i = 0; i < series.length; i++) {                                                                                // 11592
			if (series[i].options.id === id) {                                                                                  // 11593
				return series[i];                                                                                                  // 11594
			}                                                                                                                   // 11595
		}                                                                                                                    // 11596
                                                                                                                       // 11597
		// search points                                                                                                     // 11598
		for (i = 0; i < series.length; i++) {                                                                                // 11599
			points = series[i].points || [];                                                                                    // 11600
			for (j = 0; j < points.length; j++) {                                                                               // 11601
				if (points[j].id === id) {                                                                                         // 11602
					return points[j];                                                                                                 // 11603
				}                                                                                                                  // 11604
			}                                                                                                                   // 11605
		}                                                                                                                    // 11606
		return null;                                                                                                         // 11607
	},                                                                                                                    // 11608
                                                                                                                       // 11609
	/**                                                                                                                   // 11610
	 * Create the Axis instances based on the config options                                                              // 11611
	 */                                                                                                                   // 11612
	getAxes: function () {                                                                                                // 11613
		var chart = this,                                                                                                    // 11614
			options = this.options,                                                                                             // 11615
			xAxisOptions = options.xAxis = splat(options.xAxis || {}),                                                          // 11616
			yAxisOptions = options.yAxis = splat(options.yAxis || {}),                                                          // 11617
			optionsArray,                                                                                                       // 11618
			axis;                                                                                                               // 11619
                                                                                                                       // 11620
		// make sure the options are arrays and add some members                                                             // 11621
		each(xAxisOptions, function (axis, i) {                                                                              // 11622
			axis.index = i;                                                                                                     // 11623
			axis.isX = true;                                                                                                    // 11624
		});                                                                                                                  // 11625
                                                                                                                       // 11626
		each(yAxisOptions, function (axis, i) {                                                                              // 11627
			axis.index = i;                                                                                                     // 11628
		});                                                                                                                  // 11629
                                                                                                                       // 11630
		// concatenate all axis options into one array                                                                       // 11631
		optionsArray = xAxisOptions.concat(yAxisOptions);                                                                    // 11632
                                                                                                                       // 11633
		each(optionsArray, function (axisOptions) {                                                                          // 11634
			axis = new Axis(chart, axisOptions);                                                                                // 11635
		});                                                                                                                  // 11636
	},                                                                                                                    // 11637
                                                                                                                       // 11638
                                                                                                                       // 11639
	/**                                                                                                                   // 11640
	 * Get the currently selected points from all series                                                                  // 11641
	 */                                                                                                                   // 11642
	getSelectedPoints: function () {                                                                                      // 11643
		var points = [];                                                                                                     // 11644
		each(this.series, function (serie) {                                                                                 // 11645
			points = points.concat(grep(serie.points || [], function (point) {                                                  // 11646
				return point.selected;                                                                                             // 11647
			}));                                                                                                                // 11648
		});                                                                                                                  // 11649
		return points;                                                                                                       // 11650
	},                                                                                                                    // 11651
                                                                                                                       // 11652
	/**                                                                                                                   // 11653
	 * Get the currently selected series                                                                                  // 11654
	 */                                                                                                                   // 11655
	getSelectedSeries: function () {                                                                                      // 11656
		return grep(this.series, function (serie) {                                                                          // 11657
			return serie.selected;                                                                                              // 11658
		});                                                                                                                  // 11659
	},                                                                                                                    // 11660
                                                                                                                       // 11661
	/**                                                                                                                   // 11662
	 * Generate stacks for each series and calculate stacks total values                                                  // 11663
	 */                                                                                                                   // 11664
	getStacks: function () {                                                                                              // 11665
		var chart = this;                                                                                                    // 11666
                                                                                                                       // 11667
		// reset stacks for each yAxis                                                                                       // 11668
		each(chart.yAxis, function (axis) {                                                                                  // 11669
			if (axis.stacks && axis.hasVisibleSeries) {                                                                         // 11670
				axis.oldStacks = axis.stacks;                                                                                      // 11671
			}                                                                                                                   // 11672
		});                                                                                                                  // 11673
                                                                                                                       // 11674
		each(chart.series, function (series) {                                                                               // 11675
			if (series.options.stacking && (series.visible === true || chart.options.chart.ignoreHiddenSeries === false)) {     // 11676
				series.stackKey = series.type + pick(series.options.stack, '');                                                    // 11677
			}                                                                                                                   // 11678
		});                                                                                                                  // 11679
	},	                                                                                                                   // 11680
                                                                                                                       // 11681
	/**                                                                                                                   // 11682
	 * Show the title and subtitle of the chart                                                                           // 11683
	 *                                                                                                                    // 11684
	 * @param titleOptions {Object} New title options                                                                     // 11685
	 * @param subtitleOptions {Object} New subtitle options                                                               // 11686
	 *                                                                                                                    // 11687
	 */                                                                                                                   // 11688
	setTitle: function (titleOptions, subtitleOptions, redraw) {                                                          // 11689
		var chart = this,                                                                                                    // 11690
			options = chart.options,                                                                                            // 11691
			chartTitleOptions,                                                                                                  // 11692
			chartSubtitleOptions;                                                                                               // 11693
                                                                                                                       // 11694
		chartTitleOptions = options.title = merge(options.title, titleOptions);                                              // 11695
		chartSubtitleOptions = options.subtitle = merge(options.subtitle, subtitleOptions);                                  // 11696
                                                                                                                       // 11697
		// add title and subtitle                                                                                            // 11698
		each([                                                                                                               // 11699
			['title', titleOptions, chartTitleOptions],                                                                         // 11700
			['subtitle', subtitleOptions, chartSubtitleOptions]                                                                 // 11701
		], function (arr) {                                                                                                  // 11702
			var name = arr[0],                                                                                                  // 11703
				title = chart[name],                                                                                               // 11704
				titleOptions = arr[1],                                                                                             // 11705
				chartTitleOptions = arr[2];                                                                                        // 11706
                                                                                                                       // 11707
			if (title && titleOptions) {                                                                                        // 11708
				chart[name] = title = title.destroy(); // remove old                                                               // 11709
			}                                                                                                                   // 11710
			                                                                                                                    // 11711
			if (chartTitleOptions && chartTitleOptions.text && !title) {                                                        // 11712
				chart[name] = chart.renderer.text(                                                                                 // 11713
					chartTitleOptions.text,                                                                                           // 11714
					0,                                                                                                                // 11715
					0,                                                                                                                // 11716
					chartTitleOptions.useHTML                                                                                         // 11717
				)                                                                                                                  // 11718
				.attr({                                                                                                            // 11719
					align: chartTitleOptions.align,                                                                                   // 11720
					'class': PREFIX + name,                                                                                           // 11721
					zIndex: chartTitleOptions.zIndex || 4                                                                             // 11722
				})                                                                                                                 // 11723
				.css(chartTitleOptions.style)                                                                                      // 11724
				.add();                                                                                                            // 11725
			}	                                                                                                                  // 11726
		});                                                                                                                  // 11727
		chart.layOutTitles(redraw);                                                                                          // 11728
	},                                                                                                                    // 11729
                                                                                                                       // 11730
	/**                                                                                                                   // 11731
	 * Lay out the chart titles and cache the full offset height for use in getMargins                                    // 11732
	 */                                                                                                                   // 11733
	layOutTitles: function (redraw) {                                                                                     // 11734
		var titleOffset = 0,                                                                                                 // 11735
			title = this.title,                                                                                                 // 11736
			subtitle = this.subtitle,                                                                                           // 11737
			options = this.options,                                                                                             // 11738
			titleOptions = options.title,                                                                                       // 11739
			subtitleOptions = options.subtitle,                                                                                 // 11740
			requiresDirtyBox,                                                                                                   // 11741
			renderer = this.renderer,                                                                                           // 11742
			autoWidth = this.spacingBox.width - 44; // 44 makes room for default context button                                 // 11743
                                                                                                                       // 11744
		if (title) {                                                                                                         // 11745
			title                                                                                                               // 11746
				.css({ width: (titleOptions.width || autoWidth) + PX })                                                            // 11747
				.align(extend({                                                                                                    // 11748
					y: renderer.fontMetrics(titleOptions.style.fontSize, title).b - 3                                                 // 11749
				}, titleOptions), false, 'spacingBox');                                                                            // 11750
			                                                                                                                    // 11751
			if (!titleOptions.floating && !titleOptions.verticalAlign) {                                                        // 11752
				titleOffset = title.getBBox().height;                                                                              // 11753
			}                                                                                                                   // 11754
		}                                                                                                                    // 11755
		if (subtitle) {                                                                                                      // 11756
			subtitle                                                                                                            // 11757
				.css({ width: (subtitleOptions.width || autoWidth) + PX })                                                         // 11758
				.align(extend({                                                                                                    // 11759
					y: titleOffset + (titleOptions.margin - 13) + renderer.fontMetrics(titleOptions.style.fontSize, subtitle).b       // 11760
				}, subtitleOptions), false, 'spacingBox');                                                                         // 11761
			                                                                                                                    // 11762
			if (!subtitleOptions.floating && !subtitleOptions.verticalAlign) {                                                  // 11763
				titleOffset = mathCeil(titleOffset + subtitle.getBBox().height);                                                   // 11764
			}                                                                                                                   // 11765
		}                                                                                                                    // 11766
                                                                                                                       // 11767
		requiresDirtyBox = this.titleOffset !== titleOffset;				                                                             // 11768
		this.titleOffset = titleOffset; // used in getMargins                                                                // 11769
                                                                                                                       // 11770
		if (!this.isDirtyBox && requiresDirtyBox) {                                                                          // 11771
			this.isDirtyBox = requiresDirtyBox;                                                                                 // 11772
			// Redraw if necessary (#2719, #2744)		                                                                             // 11773
			if (this.hasRendered && pick(redraw, true) && this.isDirtyBox) {                                                    // 11774
				this.redraw();                                                                                                     // 11775
			}                                                                                                                   // 11776
		}                                                                                                                    // 11777
	},                                                                                                                    // 11778
                                                                                                                       // 11779
	/**                                                                                                                   // 11780
	 * Get chart width and height according to options and container size                                                 // 11781
	 */                                                                                                                   // 11782
	getChartSize: function () {                                                                                           // 11783
		var chart = this,                                                                                                    // 11784
			optionsChart = chart.options.chart,                                                                                 // 11785
			widthOption = optionsChart.width,                                                                                   // 11786
			heightOption = optionsChart.height,                                                                                 // 11787
			renderTo = chart.renderToClone || chart.renderTo;                                                                   // 11788
                                                                                                                       // 11789
		// get inner width and height from jQuery (#824)                                                                     // 11790
		if (!defined(widthOption)) {                                                                                         // 11791
			chart.containerWidth = adapterRun(renderTo, 'width');                                                               // 11792
		}                                                                                                                    // 11793
		if (!defined(heightOption)) {                                                                                        // 11794
			chart.containerHeight = adapterRun(renderTo, 'height');                                                             // 11795
		}                                                                                                                    // 11796
		                                                                                                                     // 11797
		chart.chartWidth = mathMax(0, widthOption || chart.containerWidth || 600); // #1393, 1460                            // 11798
		chart.chartHeight = mathMax(0, pick(heightOption,                                                                    // 11799
			// the offsetHeight of an empty container is 0 in standard browsers, but 19 in IE7:                                 // 11800
			chart.containerHeight > 19 ? chart.containerHeight : 400));                                                         // 11801
	},                                                                                                                    // 11802
                                                                                                                       // 11803
	/**                                                                                                                   // 11804
	 * Create a clone of the chart's renderTo div and place it outside the viewport to allow                              // 11805
	 * size computation on chart.render and chart.redraw                                                                  // 11806
	 */                                                                                                                   // 11807
	cloneRenderTo: function (revert) {                                                                                    // 11808
		var clone = this.renderToClone,                                                                                      // 11809
			container = this.container;                                                                                         // 11810
		                                                                                                                     // 11811
		// Destroy the clone and bring the container back to the real renderTo div                                           // 11812
		if (revert) {                                                                                                        // 11813
			if (clone) {                                                                                                        // 11814
				this.renderTo.appendChild(container);                                                                              // 11815
				discardElement(clone);                                                                                             // 11816
				delete this.renderToClone;                                                                                         // 11817
			}                                                                                                                   // 11818
		                                                                                                                     // 11819
		// Set up the clone                                                                                                  // 11820
		} else {                                                                                                             // 11821
			if (container && container.parentNode === this.renderTo) {                                                          // 11822
				this.renderTo.removeChild(container); // do not clone this                                                         // 11823
			}                                                                                                                   // 11824
			this.renderToClone = clone = this.renderTo.cloneNode(0);                                                            // 11825
			css(clone, {                                                                                                        // 11826
				position: ABSOLUTE,                                                                                                // 11827
				top: '-9999px',                                                                                                    // 11828
				display: 'block' // #833                                                                                           // 11829
			});                                                                                                                 // 11830
			if (clone.style.setProperty) { // #2631                                                                             // 11831
				clone.style.setProperty('display', 'block', 'important');                                                          // 11832
			}                                                                                                                   // 11833
			doc.body.appendChild(clone);                                                                                        // 11834
			if (container) {                                                                                                    // 11835
				clone.appendChild(container);                                                                                      // 11836
			}                                                                                                                   // 11837
		}                                                                                                                    // 11838
	},                                                                                                                    // 11839
                                                                                                                       // 11840
	/**                                                                                                                   // 11841
	 * Get the containing element, determine the size and create the inner container                                      // 11842
	 * div to hold the chart                                                                                              // 11843
	 */                                                                                                                   // 11844
	getContainer: function () {                                                                                           // 11845
		var chart = this,                                                                                                    // 11846
			container,                                                                                                          // 11847
			optionsChart = chart.options.chart,                                                                                 // 11848
			chartWidth,                                                                                                         // 11849
			chartHeight,                                                                                                        // 11850
			renderTo,                                                                                                           // 11851
			indexAttrName = 'data-highcharts-chart',                                                                            // 11852
			oldChartIndex,                                                                                                      // 11853
			containerId;                                                                                                        // 11854
                                                                                                                       // 11855
		chart.renderTo = renderTo = optionsChart.renderTo;                                                                   // 11856
		containerId = PREFIX + idCounter++;                                                                                  // 11857
                                                                                                                       // 11858
		if (isString(renderTo)) {                                                                                            // 11859
			chart.renderTo = renderTo = doc.getElementById(renderTo);                                                           // 11860
		}                                                                                                                    // 11861
		                                                                                                                     // 11862
		// Display an error if the renderTo is wrong                                                                         // 11863
		if (!renderTo) {                                                                                                     // 11864
			error(13, true);                                                                                                    // 11865
		}                                                                                                                    // 11866
		                                                                                                                     // 11867
		// If the container already holds a chart, destroy it. The check for hasRendered is there                            // 11868
		// because web pages that are saved to disk from the browser, will preserve the data-highcharts-chart                // 11869
		// attribute and the SVG contents, but not an interactive chart. So in this case,                                    // 11870
		// charts[oldChartIndex] will point to the wrong chart if any (#2609).                                               // 11871
		oldChartIndex = pInt(attr(renderTo, indexAttrName));                                                                 // 11872
		if (!isNaN(oldChartIndex) && charts[oldChartIndex] && charts[oldChartIndex].hasRendered) {                           // 11873
			charts[oldChartIndex].destroy();                                                                                    // 11874
		}		                                                                                                                  // 11875
		                                                                                                                     // 11876
		// Make a reference to the chart from the div                                                                        // 11877
		attr(renderTo, indexAttrName, chart.index);                                                                          // 11878
                                                                                                                       // 11879
		// remove previous chart                                                                                             // 11880
		renderTo.innerHTML = '';                                                                                             // 11881
                                                                                                                       // 11882
		// If the container doesn't have an offsetWidth, it has or is a child of a node                                      // 11883
		// that has display:none. We need to temporarily move it out to a visible                                            // 11884
		// state to determine the size, else the legend and tooltips won't render                                            // 11885
		// properly. The allowClone option is used in sparklines as a micro optimization,                                    // 11886
		// saving about 1-2 ms each chart.                                                                                   // 11887
		if (!optionsChart.skipClone && !renderTo.offsetWidth) {                                                              // 11888
			chart.cloneRenderTo();                                                                                              // 11889
		}                                                                                                                    // 11890
                                                                                                                       // 11891
		// get the width and height                                                                                          // 11892
		chart.getChartSize();                                                                                                // 11893
		chartWidth = chart.chartWidth;                                                                                       // 11894
		chartHeight = chart.chartHeight;                                                                                     // 11895
                                                                                                                       // 11896
		// create the inner container                                                                                        // 11897
		chart.container = container = createElement(DIV, {                                                                   // 11898
				className: PREFIX + 'container' +                                                                                  // 11899
					(optionsChart.className ? ' ' + optionsChart.className : ''),                                                     // 11900
				id: containerId                                                                                                    // 11901
			}, extend({                                                                                                         // 11902
				position: RELATIVE,                                                                                                // 11903
				overflow: HIDDEN, // needed for context menu (avoid scrollbars) and                                                // 11904
					// content overflow in IE                                                                                         // 11905
				width: chartWidth + PX,                                                                                            // 11906
				height: chartHeight + PX,                                                                                          // 11907
				textAlign: 'left',                                                                                                 // 11908
				lineHeight: 'normal', // #427                                                                                      // 11909
				zIndex: 0, // #1072                                                                                                // 11910
				'-webkit-tap-highlight-color': 'rgba(0,0,0,0)'                                                                     // 11911
			}, optionsChart.style),                                                                                             // 11912
			chart.renderToClone || renderTo                                                                                     // 11913
		);                                                                                                                   // 11914
                                                                                                                       // 11915
		// cache the cursor (#1650)                                                                                          // 11916
		chart._cursor = container.style.cursor;                                                                              // 11917
                                                                                                                       // 11918
		// Initialize the renderer                                                                                           // 11919
		chart.renderer =                                                                                                     // 11920
			optionsChart.forExport ? // force SVG, used for SVG export                                                          // 11921
				new SVGRenderer(container, chartWidth, chartHeight, optionsChart.style, true) :                                    // 11922
				new Renderer(container, chartWidth, chartHeight, optionsChart.style);                                              // 11923
                                                                                                                       // 11924
		if (useCanVG) {                                                                                                      // 11925
			// If we need canvg library, extend and configure the renderer                                                      // 11926
			// to get the tracker for translating mouse events                                                                  // 11927
			chart.renderer.create(chart, container, chartWidth, chartHeight);                                                   // 11928
		}                                                                                                                    // 11929
		// Add a reference to the charts index                                                                               // 11930
		chart.renderer.chartIndex = chart.index;                                                                             // 11931
	},                                                                                                                    // 11932
                                                                                                                       // 11933
	/**                                                                                                                   // 11934
	 * Calculate margins by rendering axis labels in a preliminary position. Title,                                       // 11935
	 * subtitle and legend have already been rendered at this stage, but will be                                          // 11936
	 * moved into their final positions                                                                                   // 11937
	 */                                                                                                                   // 11938
	getMargins: function (skipAxes) {                                                                                     // 11939
		var chart = this,                                                                                                    // 11940
			spacing = chart.spacing,                                                                                            // 11941
			margin = chart.margin,                                                                                              // 11942
			titleOffset = chart.titleOffset;                                                                                    // 11943
                                                                                                                       // 11944
		chart.resetMargins();                                                                                                // 11945
                                                                                                                       // 11946
		// Adjust for title and subtitle                                                                                     // 11947
		if (titleOffset && !defined(margin[0])) {                                                                            // 11948
			chart.plotTop = mathMax(chart.plotTop, titleOffset + chart.options.title.margin + spacing[0]);                      // 11949
		}                                                                                                                    // 11950
		                                                                                                                     // 11951
		// Adjust for legend                                                                                                 // 11952
		chart.legend.adjustMargins(margin, spacing);                                                                         // 11953
                                                                                                                       // 11954
		// adjust for scroller                                                                                               // 11955
		if (chart.extraBottomMargin) {                                                                                       // 11956
			chart.marginBottom += chart.extraBottomMargin;                                                                      // 11957
		}                                                                                                                    // 11958
		if (chart.extraTopMargin) {                                                                                          // 11959
			chart.plotTop += chart.extraTopMargin;                                                                              // 11960
		}                                                                                                                    // 11961
		if (!skipAxes) {                                                                                                     // 11962
			this.getAxisMargins();                                                                                              // 11963
		}                                                                                                                    // 11964
	},                                                                                                                    // 11965
                                                                                                                       // 11966
	getAxisMargins: function () {                                                                                         // 11967
                                                                                                                       // 11968
		var chart = this,                                                                                                    // 11969
			axisOffset = chart.axisOffset = [0, 0, 0, 0], // top, right, bottom, left                                           // 11970
			margin = chart.margin;                                                                                              // 11971
		                                                                                                                     // 11972
		// pre-render axes to get labels offset width                                                                        // 11973
		if (chart.hasCartesianSeries) {                                                                                      // 11974
			each(chart.axes, function (axis) {                                                                                  // 11975
				axis.getOffset();                                                                                                  // 11976
			});                                                                                                                 // 11977
		}                                                                                                                    // 11978
                                                                                                                       // 11979
		// Add the axis offsets                                                                                              // 11980
		each(marginNames, function (m, side) {                                                                               // 11981
			if (!defined(margin[side])) {                                                                                       // 11982
				chart[m] += axisOffset[side];                                                                                      // 11983
			}		                                                                                                                 // 11984
		});                                                                                                                  // 11985
                                                                                                                       // 11986
		chart.setChartSize();                                                                                                // 11987
                                                                                                                       // 11988
	},                                                                                                                    // 11989
                                                                                                                       // 11990
	/**                                                                                                                   // 11991
	 * Resize the chart to its container if size is not explicitly set                                                    // 11992
	 */                                                                                                                   // 11993
	reflow: function (e) {                                                                                                // 11994
		var chart = this,                                                                                                    // 11995
			optionsChart = chart.options.chart,                                                                                 // 11996
			renderTo = chart.renderTo,                                                                                          // 11997
			width = optionsChart.width || adapterRun(renderTo, 'width'),                                                        // 11998
			height = optionsChart.height || adapterRun(renderTo, 'height'),                                                     // 11999
			target = e ? e.target : win, // #805 - MooTools doesn't supply e                                                    // 12000
			doReflow = function () {                                                                                            // 12001
				if (chart.container) { // It may have been destroyed in the meantime (#1257)                                       // 12002
					chart.setSize(width, height, false);                                                                              // 12003
					chart.hasUserSize = null;                                                                                         // 12004
				}                                                                                                                  // 12005
			};                                                                                                                  // 12006
			                                                                                                                    // 12007
		// Width and height checks for display:none. Target is doc in IE8 and Opera,                                         // 12008
		// win in Firefox, Chrome and IE9.                                                                                   // 12009
		if (!chart.hasUserSize && !chart.isPrinting && width && height && (target === win || target === doc)) { // #1093     // 12010
			if (width !== chart.containerWidth || height !== chart.containerHeight) {                                           // 12011
				clearTimeout(chart.reflowTimeout);                                                                                 // 12012
				if (e) { // Called from window.resize                                                                              // 12013
					chart.reflowTimeout = setTimeout(doReflow, 100);                                                                  // 12014
				} else { // Called directly (#2224)                                                                                // 12015
					doReflow();                                                                                                       // 12016
				}                                                                                                                  // 12017
			}                                                                                                                   // 12018
			chart.containerWidth = width;                                                                                       // 12019
			chart.containerHeight = height;                                                                                     // 12020
		}                                                                                                                    // 12021
	},                                                                                                                    // 12022
                                                                                                                       // 12023
	/**                                                                                                                   // 12024
	 * Add the event handlers necessary for auto resizing                                                                 // 12025
	 */                                                                                                                   // 12026
	initReflow: function () {                                                                                             // 12027
		var chart = this,                                                                                                    // 12028
			reflow = function (e) {                                                                                             // 12029
				chart.reflow(e);                                                                                                   // 12030
			};                                                                                                                  // 12031
			                                                                                                                    // 12032
		                                                                                                                     // 12033
		addEvent(win, 'resize', reflow);                                                                                     // 12034
		addEvent(chart, 'destroy', function () {                                                                             // 12035
			removeEvent(win, 'resize', reflow);                                                                                 // 12036
		});                                                                                                                  // 12037
	},                                                                                                                    // 12038
                                                                                                                       // 12039
	/**                                                                                                                   // 12040
	 * Resize the chart to a given width and height                                                                       // 12041
	 * @param {Number} width                                                                                              // 12042
	 * @param {Number} height                                                                                             // 12043
	 * @param {Object|Boolean} animation                                                                                  // 12044
	 */                                                                                                                   // 12045
	setSize: function (width, height, animation) {                                                                        // 12046
		var chart = this,                                                                                                    // 12047
			chartWidth,                                                                                                         // 12048
			chartHeight,                                                                                                        // 12049
			fireEndResize;                                                                                                      // 12050
                                                                                                                       // 12051
		// Handle the isResizing counter                                                                                     // 12052
		chart.isResizing += 1;                                                                                               // 12053
		fireEndResize = function () {                                                                                        // 12054
			if (chart) {                                                                                                        // 12055
				fireEvent(chart, 'endResize', null, function () {                                                                  // 12056
					chart.isResizing -= 1;                                                                                            // 12057
				});                                                                                                                // 12058
			}                                                                                                                   // 12059
		};                                                                                                                   // 12060
                                                                                                                       // 12061
		// set the animation for the current process                                                                         // 12062
		setAnimation(animation, chart);                                                                                      // 12063
                                                                                                                       // 12064
		chart.oldChartHeight = chart.chartHeight;                                                                            // 12065
		chart.oldChartWidth = chart.chartWidth;                                                                              // 12066
		if (defined(width)) {                                                                                                // 12067
			chart.chartWidth = chartWidth = mathMax(0, mathRound(width));                                                       // 12068
			chart.hasUserSize = !!chartWidth;                                                                                   // 12069
		}                                                                                                                    // 12070
		if (defined(height)) {                                                                                               // 12071
			chart.chartHeight = chartHeight = mathMax(0, mathRound(height));                                                    // 12072
		}                                                                                                                    // 12073
                                                                                                                       // 12074
		// Resize the container with the global animation applied if enabled (#2503)                                         // 12075
		(globalAnimation ? animate : css)(chart.container, {                                                                 // 12076
			width: chartWidth + PX,                                                                                             // 12077
			height: chartHeight + PX                                                                                            // 12078
		}, globalAnimation);                                                                                                 // 12079
                                                                                                                       // 12080
		chart.setChartSize(true);                                                                                            // 12081
		chart.renderer.setSize(chartWidth, chartHeight, animation);                                                          // 12082
                                                                                                                       // 12083
		// handle axes                                                                                                       // 12084
		chart.maxTicks = null;                                                                                               // 12085
		each(chart.axes, function (axis) {                                                                                   // 12086
			axis.isDirty = true;                                                                                                // 12087
			axis.setScale();                                                                                                    // 12088
		});                                                                                                                  // 12089
                                                                                                                       // 12090
		// make sure non-cartesian series are also handled                                                                   // 12091
		each(chart.series, function (serie) {                                                                                // 12092
			serie.isDirty = true;                                                                                               // 12093
		});                                                                                                                  // 12094
                                                                                                                       // 12095
		chart.isDirtyLegend = true; // force legend redraw                                                                   // 12096
		chart.isDirtyBox = true; // force redraw of plot and chart border                                                    // 12097
                                                                                                                       // 12098
		chart.layOutTitles(); // #2857                                                                                       // 12099
		chart.getMargins();                                                                                                  // 12100
                                                                                                                       // 12101
		chart.redraw(animation);                                                                                             // 12102
                                                                                                                       // 12103
                                                                                                                       // 12104
		chart.oldChartHeight = null;                                                                                         // 12105
		fireEvent(chart, 'resize');                                                                                          // 12106
                                                                                                                       // 12107
		// fire endResize and set isResizing back                                                                            // 12108
		// If animation is disabled, fire without delay                                                                      // 12109
		if (globalAnimation === false) {                                                                                     // 12110
			fireEndResize();                                                                                                    // 12111
		} else { // else set a timeout with the animation duration                                                           // 12112
			setTimeout(fireEndResize, (globalAnimation && globalAnimation.duration) || 500);                                    // 12113
		}                                                                                                                    // 12114
	},                                                                                                                    // 12115
                                                                                                                       // 12116
	/**                                                                                                                   // 12117
	 * Set the public chart properties. This is done before and after the pre-render                                      // 12118
	 * to determine margin sizes                                                                                          // 12119
	 */                                                                                                                   // 12120
	setChartSize: function (skipAxes) {                                                                                   // 12121
		var chart = this,                                                                                                    // 12122
			inverted = chart.inverted,                                                                                          // 12123
			renderer = chart.renderer,                                                                                          // 12124
			chartWidth = chart.chartWidth,                                                                                      // 12125
			chartHeight = chart.chartHeight,                                                                                    // 12126
			optionsChart = chart.options.chart,                                                                                 // 12127
			spacing = chart.spacing,                                                                                            // 12128
			clipOffset = chart.clipOffset,                                                                                      // 12129
			clipX,                                                                                                              // 12130
			clipY,                                                                                                              // 12131
			plotLeft,                                                                                                           // 12132
			plotTop,                                                                                                            // 12133
			plotWidth,                                                                                                          // 12134
			plotHeight,                                                                                                         // 12135
			plotBorderWidth;                                                                                                    // 12136
                                                                                                                       // 12137
		chart.plotLeft = plotLeft = mathRound(chart.plotLeft);                                                               // 12138
		chart.plotTop = plotTop = mathRound(chart.plotTop);                                                                  // 12139
		chart.plotWidth = plotWidth = mathMax(0, mathRound(chartWidth - plotLeft - chart.marginRight));                      // 12140
		chart.plotHeight = plotHeight = mathMax(0, mathRound(chartHeight - plotTop - chart.marginBottom));                   // 12141
                                                                                                                       // 12142
		chart.plotSizeX = inverted ? plotHeight : plotWidth;                                                                 // 12143
		chart.plotSizeY = inverted ? plotWidth : plotHeight;                                                                 // 12144
		                                                                                                                     // 12145
		chart.plotBorderWidth = optionsChart.plotBorderWidth || 0;                                                           // 12146
                                                                                                                       // 12147
		// Set boxes used for alignment                                                                                      // 12148
		chart.spacingBox = renderer.spacingBox = {                                                                           // 12149
			x: spacing[3],                                                                                                      // 12150
			y: spacing[0],                                                                                                      // 12151
			width: chartWidth - spacing[3] - spacing[1],                                                                        // 12152
			height: chartHeight - spacing[0] - spacing[2]                                                                       // 12153
		};                                                                                                                   // 12154
		chart.plotBox = renderer.plotBox = {                                                                                 // 12155
			x: plotLeft,                                                                                                        // 12156
			y: plotTop,                                                                                                         // 12157
			width: plotWidth,                                                                                                   // 12158
			height: plotHeight                                                                                                  // 12159
		};                                                                                                                   // 12160
                                                                                                                       // 12161
		plotBorderWidth = 2 * mathFloor(chart.plotBorderWidth / 2);                                                          // 12162
		clipX = mathCeil(mathMax(plotBorderWidth, clipOffset[3]) / 2);                                                       // 12163
		clipY = mathCeil(mathMax(plotBorderWidth, clipOffset[0]) / 2);                                                       // 12164
		chart.clipBox = {                                                                                                    // 12165
			x: clipX,                                                                                                           // 12166
			y: clipY,                                                                                                           // 12167
			width: mathFloor(chart.plotSizeX - mathMax(plotBorderWidth, clipOffset[1]) / 2 - clipX),                            // 12168
			height: mathMax(0, mathFloor(chart.plotSizeY - mathMax(plotBorderWidth, clipOffset[2]) / 2 - clipY))                // 12169
		};                                                                                                                   // 12170
                                                                                                                       // 12171
		if (!skipAxes) {                                                                                                     // 12172
			each(chart.axes, function (axis) {                                                                                  // 12173
				axis.setAxisSize();                                                                                                // 12174
				axis.setAxisTranslation();                                                                                         // 12175
			});                                                                                                                 // 12176
		}                                                                                                                    // 12177
	},                                                                                                                    // 12178
                                                                                                                       // 12179
	/**                                                                                                                   // 12180
	 * Initial margins before auto size margins are applied                                                               // 12181
	 */                                                                                                                   // 12182
	resetMargins: function () {                                                                                           // 12183
		var chart = this;                                                                                                    // 12184
                                                                                                                       // 12185
		each(marginNames, function (m, side) {                                                                               // 12186
			chart[m] = pick(chart.margin[side], chart.spacing[side]);                                                           // 12187
		});                                                                                                                  // 12188
		chart.axisOffset = [0, 0, 0, 0]; // top, right, bottom, left                                                         // 12189
		chart.clipOffset = [0, 0, 0, 0];                                                                                     // 12190
	},                                                                                                                    // 12191
                                                                                                                       // 12192
	/**                                                                                                                   // 12193
	 * Draw the borders and backgrounds for chart and plot area                                                           // 12194
	 */                                                                                                                   // 12195
	drawChartBox: function () {                                                                                           // 12196
		var chart = this,                                                                                                    // 12197
			optionsChart = chart.options.chart,                                                                                 // 12198
			renderer = chart.renderer,                                                                                          // 12199
			chartWidth = chart.chartWidth,                                                                                      // 12200
			chartHeight = chart.chartHeight,                                                                                    // 12201
			chartBackground = chart.chartBackground,                                                                            // 12202
			plotBackground = chart.plotBackground,                                                                              // 12203
			plotBorder = chart.plotBorder,                                                                                      // 12204
			plotBGImage = chart.plotBGImage,                                                                                    // 12205
			chartBorderWidth = optionsChart.borderWidth || 0,                                                                   // 12206
			chartBackgroundColor = optionsChart.backgroundColor,                                                                // 12207
			plotBackgroundColor = optionsChart.plotBackgroundColor,                                                             // 12208
			plotBackgroundImage = optionsChart.plotBackgroundImage,                                                             // 12209
			plotBorderWidth = optionsChart.plotBorderWidth || 0,                                                                // 12210
			mgn,                                                                                                                // 12211
			bgAttr,                                                                                                             // 12212
			plotLeft = chart.plotLeft,                                                                                          // 12213
			plotTop = chart.plotTop,                                                                                            // 12214
			plotWidth = chart.plotWidth,                                                                                        // 12215
			plotHeight = chart.plotHeight,                                                                                      // 12216
			plotBox = chart.plotBox,                                                                                            // 12217
			clipRect = chart.clipRect,                                                                                          // 12218
			clipBox = chart.clipBox;                                                                                            // 12219
                                                                                                                       // 12220
		// Chart area                                                                                                        // 12221
		mgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);                                                              // 12222
                                                                                                                       // 12223
		if (chartBorderWidth || chartBackgroundColor) {                                                                      // 12224
			if (!chartBackground) {                                                                                             // 12225
				                                                                                                                   // 12226
				bgAttr = {                                                                                                         // 12227
					fill: chartBackgroundColor || NONE                                                                                // 12228
				};                                                                                                                 // 12229
				if (chartBorderWidth) { // #980                                                                                    // 12230
					bgAttr.stroke = optionsChart.borderColor;                                                                         // 12231
					bgAttr['stroke-width'] = chartBorderWidth;                                                                        // 12232
				}                                                                                                                  // 12233
				chart.chartBackground = renderer.rect(mgn / 2, mgn / 2, chartWidth - mgn, chartHeight - mgn,                       // 12234
						optionsChart.borderRadius, chartBorderWidth)                                                                     // 12235
					.attr(bgAttr)                                                                                                     // 12236
					.addClass(PREFIX + 'background')                                                                                  // 12237
					.add()                                                                                                            // 12238
					.shadow(optionsChart.shadow);                                                                                     // 12239
                                                                                                                       // 12240
			} else { // resize                                                                                                  // 12241
				chartBackground.animate(                                                                                           // 12242
					chartBackground.crisp({ width: chartWidth - mgn, height: chartHeight - mgn })                                     // 12243
				);                                                                                                                 // 12244
			}                                                                                                                   // 12245
		}                                                                                                                    // 12246
                                                                                                                       // 12247
                                                                                                                       // 12248
		// Plot background                                                                                                   // 12249
		if (plotBackgroundColor) {                                                                                           // 12250
			if (!plotBackground) {                                                                                              // 12251
				chart.plotBackground = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0)                                  // 12252
					.attr({                                                                                                           // 12253
						fill: plotBackgroundColor                                                                                        // 12254
					})                                                                                                                // 12255
					.add()                                                                                                            // 12256
					.shadow(optionsChart.plotShadow);                                                                                 // 12257
			} else {                                                                                                            // 12258
				plotBackground.animate(plotBox);                                                                                   // 12259
			}                                                                                                                   // 12260
		}                                                                                                                    // 12261
		if (plotBackgroundImage) {                                                                                           // 12262
			if (!plotBGImage) {                                                                                                 // 12263
				chart.plotBGImage = renderer.image(plotBackgroundImage, plotLeft, plotTop, plotWidth, plotHeight)                  // 12264
					.add();                                                                                                           // 12265
			} else {                                                                                                            // 12266
				plotBGImage.animate(plotBox);                                                                                      // 12267
			}                                                                                                                   // 12268
		}                                                                                                                    // 12269
		                                                                                                                     // 12270
		// Plot clip                                                                                                         // 12271
		if (!clipRect) {                                                                                                     // 12272
			chart.clipRect = renderer.clipRect(clipBox);                                                                        // 12273
		} else {                                                                                                             // 12274
			clipRect.animate({                                                                                                  // 12275
				width: clipBox.width,                                                                                              // 12276
				height: clipBox.height                                                                                             // 12277
			});                                                                                                                 // 12278
		}                                                                                                                    // 12279
                                                                                                                       // 12280
		// Plot area border                                                                                                  // 12281
		if (plotBorderWidth) {                                                                                               // 12282
			if (!plotBorder) {                                                                                                  // 12283
				chart.plotBorder = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0, -plotBorderWidth)                    // 12284
					.attr({                                                                                                           // 12285
						stroke: optionsChart.plotBorderColor,                                                                            // 12286
						'stroke-width': plotBorderWidth,                                                                                 // 12287
						fill: NONE,                                                                                                      // 12288
						zIndex: 1                                                                                                        // 12289
					})                                                                                                                // 12290
					.add();                                                                                                           // 12291
			} else {                                                                                                            // 12292
				plotBorder.animate(                                                                                                // 12293
					plotBorder.crisp({ x: plotLeft, y: plotTop, width: plotWidth, height: plotHeight, strokeWidth: -plotBorderWidth }) //#3282 plotBorder should be negative
				);                                                                                                                 // 12295
			}                                                                                                                   // 12296
		}                                                                                                                    // 12297
                                                                                                                       // 12298
		// reset                                                                                                             // 12299
		chart.isDirtyBox = false;                                                                                            // 12300
	},                                                                                                                    // 12301
                                                                                                                       // 12302
	/**                                                                                                                   // 12303
	 * Detect whether a certain chart property is needed based on inspecting its options                                  // 12304
	 * and series. This mainly applies to the chart.invert property, and in extensions to                                 // 12305
	 * the chart.angular and chart.polar properties.                                                                      // 12306
	 */                                                                                                                   // 12307
	propFromSeries: function () {                                                                                         // 12308
		var chart = this,                                                                                                    // 12309
			optionsChart = chart.options.chart,                                                                                 // 12310
			klass,                                                                                                              // 12311
			seriesOptions = chart.options.series,                                                                               // 12312
			i,                                                                                                                  // 12313
			value;                                                                                                              // 12314
			                                                                                                                    // 12315
			                                                                                                                    // 12316
		each(['inverted', 'angular', 'polar'], function (key) {                                                              // 12317
			                                                                                                                    // 12318
			// The default series type's class                                                                                  // 12319
			klass = seriesTypes[optionsChart.type || optionsChart.defaultSeriesType];                                           // 12320
			                                                                                                                    // 12321
			// Get the value from available chart-wide properties                                                               // 12322
			value = (                                                                                                           // 12323
				chart[key] || // 1. it is set before                                                                               // 12324
				optionsChart[key] || // 2. it is set in the options                                                                // 12325
				(klass && klass.prototype[key]) // 3. it's default series class requires it                                        // 12326
			);                                                                                                                  // 12327
	                                                                                                                      // 12328
			// 4. Check if any the chart's series require it                                                                    // 12329
			i = seriesOptions && seriesOptions.length;                                                                          // 12330
			while (!value && i--) {                                                                                             // 12331
				klass = seriesTypes[seriesOptions[i].type];                                                                        // 12332
				if (klass && klass.prototype[key]) {                                                                               // 12333
					value = true;                                                                                                     // 12334
				}                                                                                                                  // 12335
			}                                                                                                                   // 12336
	                                                                                                                      // 12337
			// Set the chart property                                                                                           // 12338
			chart[key] = value;	                                                                                                // 12339
		});                                                                                                                  // 12340
		                                                                                                                     // 12341
	},                                                                                                                    // 12342
                                                                                                                       // 12343
	/**                                                                                                                   // 12344
	 * Link two or more series together. This is done initially from Chart.render,                                        // 12345
	 * and after Chart.addSeries and Series.remove.                                                                       // 12346
	 */                                                                                                                   // 12347
	linkSeries: function () {                                                                                             // 12348
		var chart = this,                                                                                                    // 12349
			chartSeries = chart.series;                                                                                         // 12350
                                                                                                                       // 12351
		// Reset links                                                                                                       // 12352
		each(chartSeries, function (series) {                                                                                // 12353
			series.linkedSeries.length = 0;                                                                                     // 12354
		});                                                                                                                  // 12355
                                                                                                                       // 12356
		// Apply new links                                                                                                   // 12357
		each(chartSeries, function (series) {                                                                                // 12358
			var linkedTo = series.options.linkedTo;                                                                             // 12359
			if (isString(linkedTo)) {                                                                                           // 12360
				if (linkedTo === ':previous') {                                                                                    // 12361
					linkedTo = chart.series[series.index - 1];                                                                        // 12362
				} else {                                                                                                           // 12363
					linkedTo = chart.get(linkedTo);                                                                                   // 12364
				}                                                                                                                  // 12365
				if (linkedTo) {                                                                                                    // 12366
					linkedTo.linkedSeries.push(series);                                                                               // 12367
					series.linkedParent = linkedTo;                                                                                   // 12368
				}                                                                                                                  // 12369
			}                                                                                                                   // 12370
		});                                                                                                                  // 12371
	},                                                                                                                    // 12372
                                                                                                                       // 12373
	/**                                                                                                                   // 12374
	 * Render series for the chart                                                                                        // 12375
	 */                                                                                                                   // 12376
	renderSeries: function () {                                                                                           // 12377
		each(this.series, function (serie) {                                                                                 // 12378
			serie.translate();                                                                                                  // 12379
			serie.render();                                                                                                     // 12380
		});                                                                                                                  // 12381
	},                                                                                                                    // 12382
		                                                                                                                     // 12383
	/**                                                                                                                   // 12384
	 * Render labels for the chart                                                                                        // 12385
	 */                                                                                                                   // 12386
	renderLabels: function () {                                                                                           // 12387
		var chart = this,                                                                                                    // 12388
			labels = chart.options.labels;                                                                                      // 12389
		if (labels.items) {                                                                                                  // 12390
			each(labels.items, function (label) {                                                                               // 12391
				var style = extend(labels.style, label.style),                                                                     // 12392
					x = pInt(style.left) + chart.plotLeft,                                                                            // 12393
					y = pInt(style.top) + chart.plotTop + 12;                                                                         // 12394
                                                                                                                       // 12395
				// delete to prevent rewriting in IE                                                                               // 12396
				delete style.left;                                                                                                 // 12397
				delete style.top;                                                                                                  // 12398
                                                                                                                       // 12399
				chart.renderer.text(                                                                                               // 12400
					label.html,                                                                                                       // 12401
					x,                                                                                                                // 12402
					y                                                                                                                 // 12403
				)                                                                                                                  // 12404
				.attr({ zIndex: 2 })                                                                                               // 12405
				.css(style)                                                                                                        // 12406
				.add();                                                                                                            // 12407
                                                                                                                       // 12408
			});                                                                                                                 // 12409
		}                                                                                                                    // 12410
	},                                                                                                                    // 12411
                                                                                                                       // 12412
	/**                                                                                                                   // 12413
	 * Render all graphics for the chart                                                                                  // 12414
	 */                                                                                                                   // 12415
	render: function () {                                                                                                 // 12416
		var chart = this,                                                                                                    // 12417
			axes = chart.axes,                                                                                                  // 12418
			renderer = chart.renderer,                                                                                          // 12419
			options = chart.options,                                                                                            // 12420
			tempWidth,                                                                                                          // 12421
			tempHeight,                                                                                                         // 12422
			redoHorizontal,                                                                                                     // 12423
			redoVertical;                                                                                                       // 12424
                                                                                                                       // 12425
		// Title                                                                                                             // 12426
		chart.setTitle();                                                                                                    // 12427
                                                                                                                       // 12428
                                                                                                                       // 12429
		// Legend                                                                                                            // 12430
		chart.legend = new Legend(chart, options.legend);                                                                    // 12431
                                                                                                                       // 12432
		chart.getStacks(); // render stacks                                                                                  // 12433
                                                                                                                       // 12434
		// Get chart margins                                                                                                 // 12435
		chart.getMargins(true);                                                                                              // 12436
		chart.setChartSize();                                                                                                // 12437
                                                                                                                       // 12438
		// Record preliminary dimensions for later comparison                                                                // 12439
		tempWidth = chart.plotWidth;                                                                                         // 12440
		tempHeight = chart.plotHeight = chart.plotHeight - 13; // 13 is the most common height of X axis labels              // 12441
                                                                                                                       // 12442
		// Get margins by pre-rendering axes                                                                                 // 12443
		each(axes, function (axis) {                                                                                         // 12444
			axis.setScale();                                                                                                    // 12445
		});                                                                                                                  // 12446
		chart.getAxisMargins();                                                                                              // 12447
                                                                                                                       // 12448
		// If the plot area size has changed significantly, calculate tick positions again                                   // 12449
		redoHorizontal = tempWidth / chart.plotWidth > 1.1;                                                                  // 12450
		redoVertical = tempHeight / chart.plotHeight > 1.1;                                                                  // 12451
                                                                                                                       // 12452
		if (redoHorizontal || redoVertical) {                                                                                // 12453
                                                                                                                       // 12454
			chart.maxTicks = null; // reset for second pass                                                                     // 12455
			each(axes, function (axis) {                                                                                        // 12456
				if ((axis.horiz && redoHorizontal) || (!axis.horiz && redoVertical)) {                                             // 12457
					axis.setTickInterval(true); // update to reflect the new margins                                                  // 12458
				}                                                                                                                  // 12459
			});                                                                                                                 // 12460
			chart.getMargins(); // second pass to check for new labels                                                          // 12461
		}                                                                                                                    // 12462
                                                                                                                       // 12463
		// Draw the borders and backgrounds                                                                                  // 12464
		chart.drawChartBox();		                                                                                              // 12465
                                                                                                                       // 12466
                                                                                                                       // 12467
		// Axes                                                                                                              // 12468
		if (chart.hasCartesianSeries) {                                                                                      // 12469
			each(axes, function (axis) {                                                                                        // 12470
				axis.render();                                                                                                     // 12471
			});                                                                                                                 // 12472
		}                                                                                                                    // 12473
                                                                                                                       // 12474
		// The series                                                                                                        // 12475
		if (!chart.seriesGroup) {                                                                                            // 12476
			chart.seriesGroup = renderer.g('series-group')                                                                      // 12477
				.attr({ zIndex: 3 })                                                                                               // 12478
				.add();                                                                                                            // 12479
		}                                                                                                                    // 12480
		chart.renderSeries();                                                                                                // 12481
                                                                                                                       // 12482
		// Labels                                                                                                            // 12483
		chart.renderLabels();                                                                                                // 12484
                                                                                                                       // 12485
		// Credits                                                                                                           // 12486
		chart.showCredits(options.credits);                                                                                  // 12487
                                                                                                                       // 12488
		// Set flag                                                                                                          // 12489
		chart.hasRendered = true;                                                                                            // 12490
                                                                                                                       // 12491
	},                                                                                                                    // 12492
                                                                                                                       // 12493
	/**                                                                                                                   // 12494
	 * Show chart credits based on config options                                                                         // 12495
	 */                                                                                                                   // 12496
	showCredits: function (credits) {                                                                                     // 12497
		if (credits.enabled && !this.credits) {                                                                              // 12498
			this.credits = this.renderer.text(                                                                                  // 12499
				credits.text,                                                                                                      // 12500
				0,                                                                                                                 // 12501
				0                                                                                                                  // 12502
			)                                                                                                                   // 12503
			.on('click', function () {                                                                                          // 12504
				if (credits.href) {                                                                                                // 12505
					location.href = credits.href;                                                                                     // 12506
				}                                                                                                                  // 12507
			})                                                                                                                  // 12508
			.attr({                                                                                                             // 12509
				align: credits.position.align,                                                                                     // 12510
				zIndex: 8                                                                                                          // 12511
			})                                                                                                                  // 12512
			.css(credits.style)                                                                                                 // 12513
			.add()                                                                                                              // 12514
			.align(credits.position);                                                                                           // 12515
		}                                                                                                                    // 12516
	},                                                                                                                    // 12517
                                                                                                                       // 12518
	/**                                                                                                                   // 12519
	 * Clean up memory usage                                                                                              // 12520
	 */                                                                                                                   // 12521
	destroy: function () {                                                                                                // 12522
		var chart = this,                                                                                                    // 12523
			axes = chart.axes,                                                                                                  // 12524
			series = chart.series,                                                                                              // 12525
			container = chart.container,                                                                                        // 12526
			i,                                                                                                                  // 12527
			parentNode = container && container.parentNode;                                                                     // 12528
			                                                                                                                    // 12529
		// fire the chart.destoy event                                                                                       // 12530
		fireEvent(chart, 'destroy');                                                                                         // 12531
		                                                                                                                     // 12532
		// Delete the chart from charts lookup array                                                                         // 12533
		charts[chart.index] = UNDEFINED;                                                                                     // 12534
		chartCount--;                                                                                                        // 12535
		chart.renderTo.removeAttribute('data-highcharts-chart');                                                             // 12536
                                                                                                                       // 12537
		// remove events                                                                                                     // 12538
		removeEvent(chart);                                                                                                  // 12539
                                                                                                                       // 12540
		// ==== Destroy collections:                                                                                         // 12541
		// Destroy axes                                                                                                      // 12542
		i = axes.length;                                                                                                     // 12543
		while (i--) {                                                                                                        // 12544
			axes[i] = axes[i].destroy();                                                                                        // 12545
		}                                                                                                                    // 12546
                                                                                                                       // 12547
		// Destroy each series                                                                                               // 12548
		i = series.length;                                                                                                   // 12549
		while (i--) {                                                                                                        // 12550
			series[i] = series[i].destroy();                                                                                    // 12551
		}                                                                                                                    // 12552
                                                                                                                       // 12553
		// ==== Destroy chart properties:                                                                                    // 12554
		each(['title', 'subtitle', 'chartBackground', 'plotBackground', 'plotBGImage',                                       // 12555
				'plotBorder', 'seriesGroup', 'clipRect', 'credits', 'pointer', 'scroller',                                         // 12556
				'rangeSelector', 'legend', 'resetZoomButton', 'tooltip', 'renderer'], function (name) {                            // 12557
			var prop = chart[name];                                                                                             // 12558
                                                                                                                       // 12559
			if (prop && prop.destroy) {                                                                                         // 12560
				chart[name] = prop.destroy();                                                                                      // 12561
			}                                                                                                                   // 12562
		});                                                                                                                  // 12563
                                                                                                                       // 12564
		// remove container and all SVG                                                                                      // 12565
		if (container) { // can break in IE when destroyed before finished loading                                           // 12566
			container.innerHTML = '';                                                                                           // 12567
			removeEvent(container);                                                                                             // 12568
			if (parentNode) {                                                                                                   // 12569
				discardElement(container);                                                                                         // 12570
			}                                                                                                                   // 12571
                                                                                                                       // 12572
		}                                                                                                                    // 12573
                                                                                                                       // 12574
		// clean it all up                                                                                                   // 12575
		for (i in chart) {                                                                                                   // 12576
			delete chart[i];                                                                                                    // 12577
		}                                                                                                                    // 12578
                                                                                                                       // 12579
	},                                                                                                                    // 12580
                                                                                                                       // 12581
                                                                                                                       // 12582
	/**                                                                                                                   // 12583
	 * VML namespaces can't be added until after complete. Listening                                                      // 12584
	 * for Perini's doScroll hack is not enough.                                                                          // 12585
	 */                                                                                                                   // 12586
	isReadyToRender: function () {                                                                                        // 12587
		var chart = this;                                                                                                    // 12588
                                                                                                                       // 12589
		// Note: in spite of JSLint's complaints, win == win.top is required                                                 // 12590
		/*jslint eqeq: true*/                                                                                                // 12591
		if ((!hasSVG && (win == win.top && doc.readyState !== 'complete')) || (useCanVG && !win.canvg)) {                    // 12592
		/*jslint eqeq: false*/                                                                                               // 12593
			if (useCanVG) {                                                                                                     // 12594
				// Delay rendering until canvg library is downloaded and ready                                                     // 12595
				CanVGController.push(function () { chart.firstRender(); }, chart.options.global.canvasToolsURL);                   // 12596
			} else {                                                                                                            // 12597
				doc.attachEvent('onreadystatechange', function () {                                                                // 12598
					doc.detachEvent('onreadystatechange', chart.firstRender);                                                         // 12599
					if (doc.readyState === 'complete') {                                                                              // 12600
						chart.firstRender();                                                                                             // 12601
					}                                                                                                                 // 12602
				});                                                                                                                // 12603
			}                                                                                                                   // 12604
			return false;                                                                                                       // 12605
		}                                                                                                                    // 12606
		return true;                                                                                                         // 12607
	},                                                                                                                    // 12608
                                                                                                                       // 12609
	/**                                                                                                                   // 12610
	 * Prepare for first rendering after all data are loaded                                                              // 12611
	 */                                                                                                                   // 12612
	firstRender: function () {                                                                                            // 12613
		var chart = this,                                                                                                    // 12614
			options = chart.options,                                                                                            // 12615
			callback = chart.callback;                                                                                          // 12616
                                                                                                                       // 12617
		// Check whether the chart is ready to render                                                                        // 12618
		if (!chart.isReadyToRender()) {                                                                                      // 12619
			return;                                                                                                             // 12620
		}                                                                                                                    // 12621
                                                                                                                       // 12622
		// Create the container                                                                                              // 12623
		chart.getContainer();                                                                                                // 12624
                                                                                                                       // 12625
		// Run an early event after the container and renderer are established                                               // 12626
		fireEvent(chart, 'init');                                                                                            // 12627
                                                                                                                       // 12628
		                                                                                                                     // 12629
		chart.resetMargins();                                                                                                // 12630
		chart.setChartSize();                                                                                                // 12631
                                                                                                                       // 12632
		// Set the common chart properties (mainly invert) from the given series                                             // 12633
		chart.propFromSeries();                                                                                              // 12634
                                                                                                                       // 12635
		// get axes                                                                                                          // 12636
		chart.getAxes();                                                                                                     // 12637
                                                                                                                       // 12638
		// Initialize the series                                                                                             // 12639
		each(options.series || [], function (serieOptions) {                                                                 // 12640
			chart.initSeries(serieOptions);                                                                                     // 12641
		});                                                                                                                  // 12642
                                                                                                                       // 12643
		chart.linkSeries();                                                                                                  // 12644
                                                                                                                       // 12645
		// Run an event after axes and series are initialized, but before render. At this stage,                             // 12646
		// the series data is indexed and cached in the xData and yData arrays, so we can access                             // 12647
		// those before rendering. Used in Highstock.                                                                        // 12648
		fireEvent(chart, 'beforeRender');                                                                                    // 12649
                                                                                                                       // 12650
		// depends on inverted and on margins being set                                                                      // 12651
		if (Highcharts.Pointer) {                                                                                            // 12652
			chart.pointer = new Pointer(chart, options);                                                                        // 12653
		}                                                                                                                    // 12654
                                                                                                                       // 12655
		chart.render();                                                                                                      // 12656
                                                                                                                       // 12657
		// add canvas                                                                                                        // 12658
		chart.renderer.draw();                                                                                               // 12659
		// run callbacks                                                                                                     // 12660
		if (callback) {                                                                                                      // 12661
			callback.apply(chart, [chart]);                                                                                     // 12662
		}                                                                                                                    // 12663
		each(chart.callbacks, function (fn) {                                                                                // 12664
			if (chart.index !== UNDEFINED) { // Chart destroyed in its own callback (#3600)                                     // 12665
				fn.apply(chart, [chart]);                                                                                          // 12666
			}                                                                                                                   // 12667
		});                                                                                                                  // 12668
		                                                                                                                     // 12669
		// Fire the load event                                                                                               // 12670
		fireEvent(chart, 'load');		                                                                                          // 12671
		                                                                                                                     // 12672
		// If the chart was rendered outside the top container, put it back in (#3679)                                       // 12673
		chart.cloneRenderTo(true);                                                                                           // 12674
                                                                                                                       // 12675
	},                                                                                                                    // 12676
                                                                                                                       // 12677
	/**                                                                                                                   // 12678
	* Creates arrays for spacing and margin from given options.                                                           // 12679
	*/                                                                                                                    // 12680
	splashArray: function (target, options) {                                                                             // 12681
		var oVar = options[target],                                                                                          // 12682
			tArray = isObject(oVar) ? oVar : [oVar, oVar, oVar, oVar];                                                          // 12683
                                                                                                                       // 12684
		return [pick(options[target + 'Top'], tArray[0]),                                                                    // 12685
				pick(options[target + 'Right'], tArray[1]),                                                                        // 12686
				pick(options[target + 'Bottom'], tArray[2]),                                                                       // 12687
				pick(options[target + 'Left'], tArray[3])];                                                                        // 12688
	}                                                                                                                     // 12689
}; // end Chart                                                                                                        // 12690
                                                                                                                       // 12691
var CenteredSeriesMixin = Highcharts.CenteredSeriesMixin = {                                                           // 12692
	/**                                                                                                                   // 12693
	 * Get the center of the pie based on the size and center options relative to the                                     // 12694
	 * plot area. Borrowed by the polar and gauge series types.                                                           // 12695
	 */                                                                                                                   // 12696
	getCenter: function () {                                                                                              // 12697
		                                                                                                                     // 12698
		var options = this.options,                                                                                          // 12699
			chart = this.chart,                                                                                                 // 12700
			slicingRoom = 2 * (options.slicedOffset || 0),                                                                      // 12701
			handleSlicingRoom,                                                                                                  // 12702
			plotWidth = chart.plotWidth - 2 * slicingRoom,                                                                      // 12703
			plotHeight = chart.plotHeight - 2 * slicingRoom,                                                                    // 12704
			centerOption = options.center,                                                                                      // 12705
			positions = [pick(centerOption[0], '50%'), pick(centerOption[1], '50%'), options.size || '100%', options.innerSize || 0],
			smallestSize = mathMin(plotWidth, plotHeight),                                                                      // 12707
			i,                                                                                                                  // 12708
			value;                                                                                                              // 12709
                                                                                                                       // 12710
		for (i = 0; i < 4; ++i) {                                                                                            // 12711
			value = positions[i];                                                                                               // 12712
			handleSlicingRoom = i < 2 || (i === 2 && /%$/.test(value));                                                         // 12713
			                                                                                                                    // 12714
			// i == 0: centerX, relative to width                                                                               // 12715
			// i == 1: centerY, relative to height                                                                              // 12716
			// i == 2: size, relative to smallestSize                                                                           // 12717
			// i == 3: innerSize, relative to size                                                                              // 12718
			positions[i] = relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) +                      // 12719
				(handleSlicingRoom ? slicingRoom : 0);                                                                             // 12720
                                                                                                                       // 12721
		}                                                                                                                    // 12722
		return positions;                                                                                                    // 12723
	}                                                                                                                     // 12724
};                                                                                                                     // 12725
                                                                                                                       // 12726
/**                                                                                                                    // 12727
 * The Point object and prototype. Inheritable and used as base for PiePoint                                           // 12728
 */                                                                                                                    // 12729
var Point = function () {};                                                                                            // 12730
Point.prototype = {                                                                                                    // 12731
                                                                                                                       // 12732
	/**                                                                                                                   // 12733
	 * Initialize the point                                                                                               // 12734
	 * @param {Object} series The series object containing this point                                                     // 12735
	 * @param {Object} options The data in either number, array or object format                                          // 12736
	 */                                                                                                                   // 12737
	init: function (series, options, x) {                                                                                 // 12738
                                                                                                                       // 12739
		var point = this,                                                                                                    // 12740
			colors;                                                                                                             // 12741
		point.series = series;                                                                                               // 12742
		point.color = series.color; // #3445                                                                                 // 12743
		point.applyOptions(options, x);                                                                                      // 12744
		point.pointAttr = {};                                                                                                // 12745
                                                                                                                       // 12746
		if (series.options.colorByPoint) {                                                                                   // 12747
			colors = series.options.colors || series.chart.options.colors;                                                      // 12748
			point.color = point.color || colors[series.colorCounter++];                                                         // 12749
			// loop back to zero                                                                                                // 12750
			if (series.colorCounter === colors.length) {                                                                        // 12751
				series.colorCounter = 0;                                                                                           // 12752
			}                                                                                                                   // 12753
		}                                                                                                                    // 12754
                                                                                                                       // 12755
		series.chart.pointCount++;                                                                                           // 12756
		return point;                                                                                                        // 12757
	},                                                                                                                    // 12758
	/**                                                                                                                   // 12759
	 * Apply the options containing the x and y data and possible some extra properties.                                  // 12760
	 * This is called on point init or from point.update.                                                                 // 12761
	 *                                                                                                                    // 12762
	 * @param {Object} options                                                                                            // 12763
	 */                                                                                                                   // 12764
	applyOptions: function (options, x) {                                                                                 // 12765
		var point = this,                                                                                                    // 12766
			series = point.series,                                                                                              // 12767
			pointValKey = series.options.pointValKey || series.pointValKey;                                                     // 12768
                                                                                                                       // 12769
		options = Point.prototype.optionsToObject.call(this, options);                                                       // 12770
                                                                                                                       // 12771
		// copy options directly to point                                                                                    // 12772
		extend(point, options);                                                                                              // 12773
		point.options = point.options ? extend(point.options, options) : options;                                            // 12774
                                                                                                                       // 12775
		// For higher dimension series types. For instance, for ranges, point.y is mapped to point.low.                      // 12776
		if (pointValKey) {                                                                                                   // 12777
			point.y = point[pointValKey];                                                                                       // 12778
		}                                                                                                                    // 12779
                                                                                                                       // 12780
		// If no x is set by now, get auto incremented value. All points must have an                                        // 12781
		// x value, however the y value can be null to create a gap in the series                                            // 12782
		if (point.x === UNDEFINED && series) {                                                                               // 12783
			point.x = x === UNDEFINED ? series.autoIncrement() : x;                                                             // 12784
		}                                                                                                                    // 12785
                                                                                                                       // 12786
		return point;                                                                                                        // 12787
	},                                                                                                                    // 12788
                                                                                                                       // 12789
	/**                                                                                                                   // 12790
	 * Transform number or array configs into objects                                                                     // 12791
	 */                                                                                                                   // 12792
	optionsToObject: function (options) {                                                                                 // 12793
		var ret = {},                                                                                                        // 12794
			series = this.series,                                                                                               // 12795
			keys = series.options.keys,                                                                                         // 12796
			pointArrayMap = keys || series.pointArrayMap || ['y'],                                                              // 12797
			valueCount = pointArrayMap.length,                                                                                  // 12798
			firstItemType,                                                                                                      // 12799
			i = 0,                                                                                                              // 12800
			j = 0;                                                                                                              // 12801
                                                                                                                       // 12802
		if (typeof options === 'number' || options === null) {                                                               // 12803
			ret[pointArrayMap[0]] = options;                                                                                    // 12804
                                                                                                                       // 12805
		} else if (isArray(options)) {                                                                                       // 12806
			// with leading x value                                                                                             // 12807
			if (!keys && options.length > valueCount) {                                                                         // 12808
				firstItemType = typeof options[0];                                                                                 // 12809
				if (firstItemType === 'string') {                                                                                  // 12810
					ret.name = options[0];                                                                                            // 12811
				} else if (firstItemType === 'number') {                                                                           // 12812
					ret.x = options[0];                                                                                               // 12813
				}                                                                                                                  // 12814
				i++;                                                                                                               // 12815
			}                                                                                                                   // 12816
			while (j < valueCount) {                                                                                            // 12817
				ret[pointArrayMap[j++]] = options[i++];                                                                            // 12818
			}                                                                                                                   // 12819
		} else if (typeof options === 'object') {                                                                            // 12820
			ret = options;                                                                                                      // 12821
                                                                                                                       // 12822
			// This is the fastest way to detect if there are individual point dataLabels that need                             // 12823
			// to be considered in drawDataLabels. These can only occur in object configs.                                      // 12824
			if (options.dataLabels) {                                                                                           // 12825
				series._hasPointLabels = true;                                                                                     // 12826
			}                                                                                                                   // 12827
                                                                                                                       // 12828
			// Same approach as above for markers                                                                               // 12829
			if (options.marker) {                                                                                               // 12830
				series._hasPointMarkers = true;                                                                                    // 12831
			}                                                                                                                   // 12832
		}                                                                                                                    // 12833
		return ret;                                                                                                          // 12834
	},                                                                                                                    // 12835
                                                                                                                       // 12836
	/**                                                                                                                   // 12837
	 * Destroy a point to clear memory. Its reference still stays in series.data.                                         // 12838
	 */                                                                                                                   // 12839
	destroy: function () {                                                                                                // 12840
		var point = this,                                                                                                    // 12841
			series = point.series,                                                                                              // 12842
			chart = series.chart,                                                                                               // 12843
			hoverPoints = chart.hoverPoints,                                                                                    // 12844
			prop;                                                                                                               // 12845
                                                                                                                       // 12846
		chart.pointCount--;                                                                                                  // 12847
                                                                                                                       // 12848
		if (hoverPoints) {                                                                                                   // 12849
			point.setState();                                                                                                   // 12850
			erase(hoverPoints, point);                                                                                          // 12851
			if (!hoverPoints.length) {                                                                                          // 12852
				chart.hoverPoints = null;                                                                                          // 12853
			}                                                                                                                   // 12854
                                                                                                                       // 12855
		}                                                                                                                    // 12856
		if (point === chart.hoverPoint) {                                                                                    // 12857
			point.onMouseOut();                                                                                                 // 12858
		}                                                                                                                    // 12859
                                                                                                                       // 12860
		// remove all events                                                                                                 // 12861
		if (point.graphic || point.dataLabel) { // removeEvent and destroyElements are performance expensive                 // 12862
			removeEvent(point);                                                                                                 // 12863
			point.destroyElements();                                                                                            // 12864
		}                                                                                                                    // 12865
                                                                                                                       // 12866
		if (point.legendItem) { // pies have legend items                                                                    // 12867
			chart.legend.destroyItem(point);                                                                                    // 12868
		}                                                                                                                    // 12869
                                                                                                                       // 12870
		for (prop in point) {                                                                                                // 12871
			point[prop] = null;                                                                                                 // 12872
		}                                                                                                                    // 12873
                                                                                                                       // 12874
                                                                                                                       // 12875
	},                                                                                                                    // 12876
                                                                                                                       // 12877
	/**                                                                                                                   // 12878
	 * Destroy SVG elements associated with the point                                                                     // 12879
	 */                                                                                                                   // 12880
	destroyElements: function () {                                                                                        // 12881
		var point = this,                                                                                                    // 12882
			props = ['graphic', 'dataLabel', 'dataLabelUpper', 'group', 'connector', 'shadowGroup'],                            // 12883
			prop,                                                                                                               // 12884
			i = 6;                                                                                                              // 12885
		while (i--) {                                                                                                        // 12886
			prop = props[i];                                                                                                    // 12887
			if (point[prop]) {                                                                                                  // 12888
				point[prop] = point[prop].destroy();                                                                               // 12889
			}                                                                                                                   // 12890
		}                                                                                                                    // 12891
	},                                                                                                                    // 12892
                                                                                                                       // 12893
	/**                                                                                                                   // 12894
	 * Return the configuration hash needed for the data label and tooltip formatters                                     // 12895
	 */                                                                                                                   // 12896
	getLabelConfig: function () {                                                                                         // 12897
		var point = this;                                                                                                    // 12898
		return {                                                                                                             // 12899
			x: point.category,                                                                                                  // 12900
			y: point.y,                                                                                                         // 12901
			key: point.name || point.category,                                                                                  // 12902
			series: point.series,                                                                                               // 12903
			point: point,                                                                                                       // 12904
			percentage: point.percentage,                                                                                       // 12905
			total: point.total || point.stackTotal                                                                              // 12906
		};                                                                                                                   // 12907
	},	                                                                                                                   // 12908
                                                                                                                       // 12909
	/**                                                                                                                   // 12910
	 * Extendable method for formatting each point's tooltip line                                                         // 12911
	 *                                                                                                                    // 12912
	 * @return {String} A string to be concatenated in to the common tooltip text                                         // 12913
	 */                                                                                                                   // 12914
	tooltipFormatter: function (pointFormat) {                                                                            // 12915
                                                                                                                       // 12916
		// Insert options for valueDecimals, valuePrefix, and valueSuffix                                                    // 12917
		var series = this.series,                                                                                            // 12918
			seriesTooltipOptions = series.tooltipOptions,                                                                       // 12919
			valueDecimals = pick(seriesTooltipOptions.valueDecimals, ''),                                                       // 12920
			valuePrefix = seriesTooltipOptions.valuePrefix || '',                                                               // 12921
			valueSuffix = seriesTooltipOptions.valueSuffix || '';                                                               // 12922
                                                                                                                       // 12923
		// Loop over the point array map and replace unformatted values with sprintf formatting markup                       // 12924
		each(series.pointArrayMap || ['y'], function (key) {                                                                 // 12925
			key = '{point.' + key; // without the closing bracket                                                               // 12926
			if (valuePrefix || valueSuffix) {                                                                                   // 12927
				pointFormat = pointFormat.replace(key + '}', valuePrefix + key + '}' + valueSuffix);                               // 12928
			}                                                                                                                   // 12929
			pointFormat = pointFormat.replace(key + '}', key + ':,.' + valueDecimals + 'f}');                                   // 12930
		});                                                                                                                  // 12931
                                                                                                                       // 12932
		return format(pointFormat, {                                                                                         // 12933
			point: this,                                                                                                        // 12934
			series: this.series                                                                                                 // 12935
		});                                                                                                                  // 12936
	},                                                                                                                    // 12937
                                                                                                                       // 12938
	/**                                                                                                                   // 12939
	 * Fire an event on the Point object. Must not be renamed to fireEvent, as this                                       // 12940
	 * causes a name clash in MooTools                                                                                    // 12941
	 * @param {String} eventType                                                                                          // 12942
	 * @param {Object} eventArgs Additional event arguments                                                               // 12943
	 * @param {Function} defaultFunction Default event handler                                                            // 12944
	 */                                                                                                                   // 12945
	firePointEvent: function (eventType, eventArgs, defaultFunction) {                                                    // 12946
		var point = this,                                                                                                    // 12947
			series = this.series,                                                                                               // 12948
			seriesOptions = series.options;                                                                                     // 12949
                                                                                                                       // 12950
		// load event handlers on demand to save time on mouseover/out                                                       // 12951
		if (seriesOptions.point.events[eventType] || (point.options && point.options.events && point.options.events[eventType])) {
			this.importEvents();                                                                                                // 12953
		}                                                                                                                    // 12954
                                                                                                                       // 12955
		// add default handler if in selection mode                                                                          // 12956
		if (eventType === 'click' && seriesOptions.allowPointSelect) {                                                       // 12957
			defaultFunction = function (event) {                                                                                // 12958
				// Control key is for Windows, meta (= Cmd key) for Mac, Shift for Opera                                           // 12959
				if (point.select) { // Could be destroyed by prior event handlers (#2911)                                          // 12960
					point.select(null, event.ctrlKey || event.metaKey || event.shiftKey);                                             // 12961
				}                                                                                                                  // 12962
			};                                                                                                                  // 12963
		}                                                                                                                    // 12964
                                                                                                                       // 12965
		fireEvent(this, eventType, eventArgs, defaultFunction);                                                              // 12966
	}                                                                                                                     // 12967
};/**                                                                                                                  // 12968
 * @classDescription The base function which all other series types inherit from. The data in the series is stored     // 12969
 * in various arrays.                                                                                                  // 12970
 *                                                                                                                     // 12971
 * - First, series.options.data contains all the original config options for                                           // 12972
 * each point whether added by options or methods like series.addPoint.                                                // 12973
 * - Next, series.data contains those values converted to points, but in case the series data length                   // 12974
 * exceeds the cropThreshold, or if the data is grouped, series.data doesn't contain all the points. It                // 12975
 * only contains the points that have been created on demand.                                                          // 12976
 * - Then there's series.points that contains all currently visible point objects. In case of cropping,                // 12977
 * the cropped-away points are not part of this array. The series.points array starts at series.cropStart              // 12978
 * compared to series.data and series.options.data. If however the series data is grouped, these can't                 // 12979
 * be correlated one to one.                                                                                           // 12980
 * - series.xData and series.processedXData contain clean x values, equivalent to series.data and series.points.       // 12981
 * - series.yData and series.processedYData contain clean x values, equivalent to series.data and series.points.       // 12982
 *                                                                                                                     // 12983
 * @param {Object} chart                                                                                               // 12984
 * @param {Object} options                                                                                             // 12985
 */                                                                                                                    // 12986
var Series = Highcharts.Series = function () {};                                                                       // 12987
                                                                                                                       // 12988
Series.prototype = {                                                                                                   // 12989
                                                                                                                       // 12990
	isCartesian: true,                                                                                                    // 12991
	type: 'line',                                                                                                         // 12992
	pointClass: Point,                                                                                                    // 12993
	sorted: true, // requires the data to be sorted                                                                       // 12994
	requireSorting: true,                                                                                                 // 12995
	pointAttrToOptions: { // mapping between SVG attributes and the corresponding options                                 // 12996
		stroke: 'lineColor',                                                                                                 // 12997
		'stroke-width': 'lineWidth',                                                                                         // 12998
		fill: 'fillColor',                                                                                                   // 12999
		r: 'radius'                                                                                                          // 13000
	},                                                                                                                    // 13001
	axisTypes: ['xAxis', 'yAxis'],                                                                                        // 13002
	colorCounter: 0,                                                                                                      // 13003
	parallelArrays: ['x', 'y'], // each point's x and y values are stored in this.xData and this.yData                    // 13004
	init: function (chart, options) {                                                                                     // 13005
		var series = this,                                                                                                   // 13006
			eventType,                                                                                                          // 13007
			events,                                                                                                             // 13008
			chartSeries = chart.series,                                                                                         // 13009
			sortByIndex = function (a, b) {                                                                                     // 13010
				return pick(a.options.index, a._i) - pick(b.options.index, b._i);                                                  // 13011
			};                                                                                                                  // 13012
                                                                                                                       // 13013
		series.chart = chart;                                                                                                // 13014
		series.options = options = series.setOptions(options); // merge with plotOptions                                     // 13015
		series.linkedSeries = [];                                                                                            // 13016
                                                                                                                       // 13017
		// bind the axes                                                                                                     // 13018
		series.bindAxes();                                                                                                   // 13019
                                                                                                                       // 13020
		// set some variables                                                                                                // 13021
		extend(series, {                                                                                                     // 13022
			name: options.name,                                                                                                 // 13023
			state: NORMAL_STATE,                                                                                                // 13024
			pointAttr: {},                                                                                                      // 13025
			visible: options.visible !== false, // true by default                                                              // 13026
			selected: options.selected === true // false by default                                                             // 13027
		});                                                                                                                  // 13028
                                                                                                                       // 13029
		// special                                                                                                           // 13030
		if (useCanVG) {                                                                                                      // 13031
			options.animation = false;                                                                                          // 13032
		}                                                                                                                    // 13033
                                                                                                                       // 13034
		// register event listeners                                                                                          // 13035
		events = options.events;                                                                                             // 13036
		for (eventType in events) {                                                                                          // 13037
			addEvent(series, eventType, events[eventType]);                                                                     // 13038
		}                                                                                                                    // 13039
		if (                                                                                                                 // 13040
			(events && events.click) ||                                                                                         // 13041
			(options.point && options.point.events && options.point.events.click) ||                                            // 13042
			options.allowPointSelect                                                                                            // 13043
		) {                                                                                                                  // 13044
			chart.runTrackerClick = true;                                                                                       // 13045
		}                                                                                                                    // 13046
                                                                                                                       // 13047
		series.getColor();                                                                                                   // 13048
		series.getSymbol();                                                                                                  // 13049
                                                                                                                       // 13050
		// Set the data                                                                                                      // 13051
		each(series.parallelArrays, function (key) {                                                                         // 13052
			series[key + 'Data'] = [];                                                                                          // 13053
		});                                                                                                                  // 13054
		series.setData(options.data, false);                                                                                 // 13055
                                                                                                                       // 13056
		// Mark cartesian                                                                                                    // 13057
		if (series.isCartesian) {                                                                                            // 13058
			chart.hasCartesianSeries = true;                                                                                    // 13059
		}                                                                                                                    // 13060
                                                                                                                       // 13061
		// Register it in the chart                                                                                          // 13062
		chartSeries.push(series);                                                                                            // 13063
		series._i = chartSeries.length - 1;                                                                                  // 13064
                                                                                                                       // 13065
		// Sort series according to index option (#248, #1123, #2456)                                                        // 13066
		stableSort(chartSeries, sortByIndex);                                                                                // 13067
		if (this.yAxis) {                                                                                                    // 13068
			stableSort(this.yAxis.series, sortByIndex);                                                                         // 13069
		}                                                                                                                    // 13070
                                                                                                                       // 13071
		each(chartSeries, function (series, i) {                                                                             // 13072
			series.index = i;                                                                                                   // 13073
			series.name = series.name || 'Series ' + (i + 1);                                                                   // 13074
		});                                                                                                                  // 13075
                                                                                                                       // 13076
	},                                                                                                                    // 13077
                                                                                                                       // 13078
	/**                                                                                                                   // 13079
	 * Set the xAxis and yAxis properties of cartesian series, and register the series                                    // 13080
	 * in the axis.series array                                                                                           // 13081
	 */                                                                                                                   // 13082
	bindAxes: function () {                                                                                               // 13083
		var series = this,                                                                                                   // 13084
			seriesOptions = series.options,                                                                                     // 13085
			chart = series.chart,                                                                                               // 13086
			axisOptions;                                                                                                        // 13087
                                                                                                                       // 13088
		each(series.axisTypes || [], function (AXIS) { // repeat for xAxis and yAxis                                         // 13089
                                                                                                                       // 13090
			each(chart[AXIS], function (axis) { // loop through the chart's axis objects                                        // 13091
				axisOptions = axis.options;                                                                                        // 13092
                                                                                                                       // 13093
				// apply if the series xAxis or yAxis option mathches the number of the                                            // 13094
				// axis, or if undefined, use the first axis                                                                       // 13095
				if ((seriesOptions[AXIS] === axisOptions.index) ||                                                                 // 13096
						(seriesOptions[AXIS] !== UNDEFINED && seriesOptions[AXIS] === axisOptions.id) ||                                 // 13097
						(seriesOptions[AXIS] === UNDEFINED && axisOptions.index === 0)) {                                                // 13098
                                                                                                                       // 13099
					// register this series in the axis.series lookup                                                                 // 13100
					axis.series.push(series);                                                                                         // 13101
                                                                                                                       // 13102
					// set this series.xAxis or series.yAxis reference                                                                // 13103
					series[AXIS] = axis;                                                                                              // 13104
                                                                                                                       // 13105
					// mark dirty for redraw                                                                                          // 13106
					axis.isDirty = true;                                                                                              // 13107
				}                                                                                                                  // 13108
			});                                                                                                                 // 13109
                                                                                                                       // 13110
			// The series needs an X and an Y axis                                                                              // 13111
			if (!series[AXIS] && series.optionalAxis !== AXIS) {                                                                // 13112
				error(18, true);                                                                                                   // 13113
			}                                                                                                                   // 13114
                                                                                                                       // 13115
		});                                                                                                                  // 13116
	},                                                                                                                    // 13117
                                                                                                                       // 13118
	/**                                                                                                                   // 13119
	 * For simple series types like line and column, the data values are held in arrays like                              // 13120
	 * xData and yData for quick lookup to find extremes and more. For multidimensional series                            // 13121
	 * like bubble and map, this can be extended with arrays like zData and valueData by                                  // 13122
	 * adding to the series.parallelArrays array.                                                                         // 13123
	 */                                                                                                                   // 13124
	updateParallelArrays: function (point, i) {                                                                           // 13125
		var series = point.series,                                                                                           // 13126
			args = arguments,                                                                                                   // 13127
			fn = typeof i === 'number' ?                                                                                        // 13128
				 // Insert the value in the given position                                                                         // 13129
				function (key) {                                                                                                   // 13130
					var val = key === 'y' && series.toYData ? series.toYData(point) : point[key];                                     // 13131
					series[key + 'Data'][i] = val;                                                                                    // 13132
				} :                                                                                                                // 13133
				// Apply the method specified in i with the following arguments as arguments                                       // 13134
				function (key) {                                                                                                   // 13135
					Array.prototype[i].apply(series[key + 'Data'], Array.prototype.slice.call(args, 2));                              // 13136
				};                                                                                                                 // 13137
                                                                                                                       // 13138
		each(series.parallelArrays, fn);                                                                                     // 13139
	},                                                                                                                    // 13140
                                                                                                                       // 13141
	/**                                                                                                                   // 13142
	 * Return an auto incremented x value based on the pointStart and pointInterval options.                              // 13143
	 * This is only used if an x value is not given for the point that calls autoIncrement.                               // 13144
	 */                                                                                                                   // 13145
	autoIncrement: function () {                                                                                          // 13146
                                                                                                                       // 13147
		var options = this.options,                                                                                          // 13148
			xIncrement = this.xIncrement,                                                                                       // 13149
			date,                                                                                                               // 13150
			pointInterval,                                                                                                      // 13151
			pointIntervalUnit = options.pointIntervalUnit;                                                                      // 13152
		                                                                                                                     // 13153
		xIncrement = pick(xIncrement, options.pointStart, 0);                                                                // 13154
		                                                                                                                     // 13155
		this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);                             // 13156
		                                                                                                                     // 13157
		// Added code for pointInterval strings                                                                              // 13158
		if (pointIntervalUnit === 'month' || pointIntervalUnit === 'year') {                                                 // 13159
			date = new Date(xIncrement);                                                                                        // 13160
			date = (pointIntervalUnit === 'month') ?                                                                            // 13161
				+date[setMonth](date[getMonth]() + pointInterval) :                                                                // 13162
				+date[setFullYear](date[getFullYear]() + pointInterval);                                                           // 13163
			pointInterval = date - xIncrement;                                                                                  // 13164
		}                                                                                                                    // 13165
		                                                                                                                     // 13166
		this.xIncrement = xIncrement + pointInterval;                                                                        // 13167
		return xIncrement;                                                                                                   // 13168
	},                                                                                                                    // 13169
                                                                                                                       // 13170
	/**                                                                                                                   // 13171
	 * Divide the series data into segments divided by null values.                                                       // 13172
	 */                                                                                                                   // 13173
	getSegments: function () {                                                                                            // 13174
		var series = this,                                                                                                   // 13175
			lastNull = -1,                                                                                                      // 13176
			segments = [],                                                                                                      // 13177
			i,                                                                                                                  // 13178
			points = series.points,                                                                                             // 13179
			pointsLength = points.length;                                                                                       // 13180
                                                                                                                       // 13181
		if (pointsLength) { // no action required for []                                                                     // 13182
                                                                                                                       // 13183
			// if connect nulls, just remove null points                                                                        // 13184
			if (series.options.connectNulls) {                                                                                  // 13185
				i = pointsLength;                                                                                                  // 13186
				while (i--) {                                                                                                      // 13187
					if (points[i].y === null) {                                                                                       // 13188
						points.splice(i, 1);                                                                                             // 13189
					}                                                                                                                 // 13190
				}                                                                                                                  // 13191
				if (points.length) {                                                                                               // 13192
					segments = [points];                                                                                              // 13193
				}                                                                                                                  // 13194
                                                                                                                       // 13195
			// else, split on null points                                                                                       // 13196
			} else {                                                                                                            // 13197
				each(points, function (point, i) {                                                                                 // 13198
					if (point.y === null) {                                                                                           // 13199
						if (i > lastNull + 1) {                                                                                          // 13200
							segments.push(points.slice(lastNull + 1, i));                                                                   // 13201
						}                                                                                                                // 13202
						lastNull = i;                                                                                                    // 13203
					} else if (i === pointsLength - 1) { // last value                                                                // 13204
						segments.push(points.slice(lastNull + 1, i + 1));                                                                // 13205
					}                                                                                                                 // 13206
				});                                                                                                                // 13207
			}                                                                                                                   // 13208
		}                                                                                                                    // 13209
                                                                                                                       // 13210
		// register it                                                                                                       // 13211
		series.segments = segments;                                                                                          // 13212
	},                                                                                                                    // 13213
                                                                                                                       // 13214
	/**                                                                                                                   // 13215
	 * Set the series options by merging from the options tree                                                            // 13216
	 * @param {Object} itemOptions                                                                                        // 13217
	 */                                                                                                                   // 13218
	setOptions: function (itemOptions) {                                                                                  // 13219
		var chart = this.chart,                                                                                              // 13220
			chartOptions = chart.options,                                                                                       // 13221
			plotOptions = chartOptions.plotOptions,                                                                             // 13222
			userOptions = chart.userOptions || {},                                                                              // 13223
			userPlotOptions = userOptions.plotOptions || {},                                                                    // 13224
			typeOptions = plotOptions[this.type],                                                                               // 13225
			options,                                                                                                            // 13226
			zones;                                                                                                              // 13227
                                                                                                                       // 13228
		this.userOptions = itemOptions;                                                                                      // 13229
                                                                                                                       // 13230
		// General series options take precedence over type options because otherwise, default                               // 13231
		// type options like column.animation would be overwritten by the general option.                                    // 13232
		// But issues have been raised here (#3881), and the solution may be to distinguish                                  // 13233
		// between default option and userOptions like in the tooltip below.                                                 // 13234
		options = merge(                                                                                                     // 13235
			typeOptions,                                                                                                        // 13236
			plotOptions.series,                                                                                                 // 13237
			itemOptions                                                                                                         // 13238
		);                                                                                                                   // 13239
                                                                                                                       // 13240
		// The tooltip options are merged between global and series specific options                                         // 13241
		this.tooltipOptions = merge(                                                                                         // 13242
			defaultOptions.tooltip,                                                                                             // 13243
			defaultOptions.plotOptions[this.type].tooltip,                                                                      // 13244
			userOptions.tooltip,                                                                                                // 13245
			userPlotOptions.series && userPlotOptions.series.tooltip,                                                           // 13246
			userPlotOptions[this.type] && userPlotOptions[this.type].tooltip,                                                   // 13247
			itemOptions.tooltip                                                                                                 // 13248
		);                                                                                                                   // 13249
                                                                                                                       // 13250
		// Delete marker object if not allowed (#1125)                                                                       // 13251
		if (typeOptions.marker === null) {                                                                                   // 13252
			delete options.marker;                                                                                              // 13253
		}                                                                                                                    // 13254
                                                                                                                       // 13255
		// Handle color zones                                                                                                // 13256
		this.zoneAxis = options.zoneAxis;                                                                                    // 13257
		zones = this.zones = (options.zones || []).slice();                                                                  // 13258
		if ((options.negativeColor || options.negativeFillColor) && !options.zones) {                                        // 13259
			zones.push({                                                                                                        // 13260
				value: options[this.zoneAxis + 'Threshold'] || options.threshold || 0,                                             // 13261
				color: options.negativeColor,                                                                                      // 13262
				fillColor: options.negativeFillColor                                                                               // 13263
			});                                                                                                                 // 13264
		}                                                                                                                    // 13265
		if (zones.length) { // Push one extra zone for the rest                                                              // 13266
			if (defined(zones[zones.length - 1].value)) {                                                                       // 13267
				zones.push({                                                                                                       // 13268
					color: this.color,                                                                                                // 13269
					fillColor: this.fillColor                                                                                         // 13270
				});                                                                                                                // 13271
			}                                                                                                                   // 13272
		}                                                                                                                    // 13273
		return options;                                                                                                      // 13274
	},                                                                                                                    // 13275
                                                                                                                       // 13276
	getCyclic: function (prop, value, defaults) {                                                                         // 13277
		var i,                                                                                                               // 13278
			userOptions = this.userOptions,                                                                                     // 13279
			indexName = '_' + prop + 'Index',                                                                                   // 13280
			counterName = prop + 'Counter';                                                                                     // 13281
                                                                                                                       // 13282
		if (!value) {                                                                                                        // 13283
			if (defined(userOptions[indexName])) { // after Series.update()                                                     // 13284
				i = userOptions[indexName];                                                                                        // 13285
			} else {                                                                                                            // 13286
				userOptions[indexName] = i = this.chart[counterName] % defaults.length;                                            // 13287
				this.chart[counterName] += 1;                                                                                      // 13288
			}                                                                                                                   // 13289
			value = defaults[i];                                                                                                // 13290
		}                                                                                                                    // 13291
		this[prop] = value;                                                                                                  // 13292
	},                                                                                                                    // 13293
                                                                                                                       // 13294
	/**                                                                                                                   // 13295
	 * Get the series' color                                                                                              // 13296
	 */                                                                                                                   // 13297
	getColor: function () {                                                                                               // 13298
		if (!this.options.colorByPoint) {                                                                                    // 13299
			this.getCyclic('color', this.options.color || defaultPlotOptions[this.type].color, this.chart.options.colors);      // 13300
		}                                                                                                                    // 13301
	},                                                                                                                    // 13302
	/**                                                                                                                   // 13303
	 * Get the series' symbol                                                                                             // 13304
	 */                                                                                                                   // 13305
	getSymbol: function () {                                                                                              // 13306
		var seriesMarkerOption = this.options.marker;                                                                        // 13307
                                                                                                                       // 13308
		this.getCyclic('symbol', seriesMarkerOption.symbol, this.chart.options.symbols);                                     // 13309
                                                                                                                       // 13310
		// don't substract radius in image symbols (#604)                                                                    // 13311
		if (/^url/.test(this.symbol)) {                                                                                      // 13312
			seriesMarkerOption.radius = 0;                                                                                      // 13313
		}                                                                                                                    // 13314
	},                                                                                                                    // 13315
                                                                                                                       // 13316
	drawLegendSymbol: LegendSymbolMixin.drawLineMarker,                                                                   // 13317
                                                                                                                       // 13318
	/**                                                                                                                   // 13319
	 * Replace the series data with a new set of data                                                                     // 13320
	 * @param {Object} data                                                                                               // 13321
	 * @param {Object} redraw                                                                                             // 13322
	 */                                                                                                                   // 13323
	setData: function (data, redraw, animation, updatePoints) {                                                           // 13324
		var series = this,                                                                                                   // 13325
			oldData = series.points,                                                                                            // 13326
			oldDataLength = (oldData && oldData.length) || 0,                                                                   // 13327
			dataLength,                                                                                                         // 13328
			options = series.options,                                                                                           // 13329
			chart = series.chart,                                                                                               // 13330
			firstPoint = null,                                                                                                  // 13331
			xAxis = series.xAxis,                                                                                               // 13332
			hasCategories = xAxis && !!xAxis.categories,                                                                        // 13333
			i,                                                                                                                  // 13334
			turboThreshold = options.turboThreshold,                                                                            // 13335
			pt,                                                                                                                 // 13336
			xData = this.xData,                                                                                                 // 13337
			yData = this.yData,                                                                                                 // 13338
			pointArrayMap = series.pointArrayMap,                                                                               // 13339
			valueCount = pointArrayMap && pointArrayMap.length;                                                                 // 13340
                                                                                                                       // 13341
		data = data || [];                                                                                                   // 13342
		dataLength = data.length;                                                                                            // 13343
		redraw = pick(redraw, true);                                                                                         // 13344
                                                                                                                       // 13345
		// If the point count is the same as is was, just run Point.update which is                                          // 13346
		// cheaper, allows animation, and keeps references to points.                                                        // 13347
		if (updatePoints !== false && dataLength && oldDataLength === dataLength && !series.cropped && !series.hasGroupedData && series.visible) {
			each(data, function (point, i) {                                                                                    // 13349
				if (oldData[i].update) { // Linked, previously hidden series (#3709)                                               // 13350
					oldData[i].update(point, false, null, false);                                                                     // 13351
				}                                                                                                                  // 13352
			});                                                                                                                 // 13353
                                                                                                                       // 13354
		} else {                                                                                                             // 13355
                                                                                                                       // 13356
			// Reset properties                                                                                                 // 13357
			series.xIncrement = null;                                                                                           // 13358
			series.pointRange = hasCategories ? 1 : options.pointRange;                                                         // 13359
                                                                                                                       // 13360
			series.colorCounter = 0; // for series with colorByPoint (#1547)                                                    // 13361
			                                                                                                                    // 13362
			// Update parallel arrays                                                                                           // 13363
			each(this.parallelArrays, function (key) {                                                                          // 13364
				series[key + 'Data'].length = 0;                                                                                   // 13365
			});                                                                                                                 // 13366
                                                                                                                       // 13367
			// In turbo mode, only one- or twodimensional arrays of numbers are allowed. The                                    // 13368
			// first value is tested, and we assume that all the rest are defined the same                                      // 13369
			// way. Although the 'for' loops are similar, they are repeated inside each                                         // 13370
			// if-else conditional for max performance.                                                                         // 13371
			if (turboThreshold && dataLength > turboThreshold) {                                                                // 13372
                                                                                                                       // 13373
				// find the first non-null point                                                                                   // 13374
				i = 0;                                                                                                             // 13375
				while (firstPoint === null && i < dataLength) {                                                                    // 13376
					firstPoint = data[i];                                                                                             // 13377
					i++;                                                                                                              // 13378
				}                                                                                                                  // 13379
                                                                                                                       // 13380
                                                                                                                       // 13381
				if (isNumber(firstPoint)) { // assume all points are numbers                                                       // 13382
					var x = pick(options.pointStart, 0),                                                                              // 13383
						pointInterval = pick(options.pointInterval, 1);                                                                  // 13384
                                                                                                                       // 13385
					for (i = 0; i < dataLength; i++) {                                                                                // 13386
						xData[i] = x;                                                                                                    // 13387
						yData[i] = data[i];                                                                                              // 13388
						x += pointInterval;                                                                                              // 13389
					}                                                                                                                 // 13390
					series.xIncrement = x;                                                                                            // 13391
				} else if (isArray(firstPoint)) { // assume all points are arrays                                                  // 13392
					if (valueCount) { // [x, low, high] or [x, o, h, l, c]                                                            // 13393
						for (i = 0; i < dataLength; i++) {                                                                               // 13394
							pt = data[i];                                                                                                   // 13395
							xData[i] = pt[0];                                                                                               // 13396
							yData[i] = pt.slice(1, valueCount + 1);                                                                         // 13397
						}                                                                                                                // 13398
					} else { // [x, y]                                                                                                // 13399
						for (i = 0; i < dataLength; i++) {                                                                               // 13400
							pt = data[i];                                                                                                   // 13401
							xData[i] = pt[0];                                                                                               // 13402
							yData[i] = pt[1];                                                                                               // 13403
						}                                                                                                                // 13404
					}                                                                                                                 // 13405
				} else {                                                                                                           // 13406
					error(12); // Highcharts expects configs to be numbers or arrays in turbo mode                                    // 13407
				}                                                                                                                  // 13408
			} else {                                                                                                            // 13409
				for (i = 0; i < dataLength; i++) {                                                                                 // 13410
					if (data[i] !== UNDEFINED) { // stray commas in oldIE                                                             // 13411
						pt = { series: series };                                                                                         // 13412
						series.pointClass.prototype.applyOptions.apply(pt, [data[i]]);                                                   // 13413
						series.updateParallelArrays(pt, i);                                                                              // 13414
						if (hasCategories && pt.name) {                                                                                  // 13415
							xAxis.names[pt.x] = pt.name; // #2046                                                                           // 13416
						}                                                                                                                // 13417
					}                                                                                                                 // 13418
				}                                                                                                                  // 13419
			}                                                                                                                   // 13420
                                                                                                                       // 13421
			// Forgetting to cast strings to numbers is a common caveat when handling CSV or JSON                               // 13422
			if (isString(yData[0])) {                                                                                           // 13423
				error(14, true);                                                                                                   // 13424
			}                                                                                                                   // 13425
                                                                                                                       // 13426
			series.data = [];                                                                                                   // 13427
			series.options.data = data;                                                                                         // 13428
			//series.zData = zData;                                                                                             // 13429
                                                                                                                       // 13430
			// destroy old points                                                                                               // 13431
			i = oldDataLength;                                                                                                  // 13432
			while (i--) {                                                                                                       // 13433
				if (oldData[i] && oldData[i].destroy) {                                                                            // 13434
					oldData[i].destroy();                                                                                             // 13435
				}                                                                                                                  // 13436
			}                                                                                                                   // 13437
                                                                                                                       // 13438
			// reset minRange (#878)                                                                                            // 13439
			if (xAxis) {                                                                                                        // 13440
				xAxis.minRange = xAxis.userMinRange;                                                                               // 13441
			}                                                                                                                   // 13442
                                                                                                                       // 13443
			// redraw                                                                                                           // 13444
			series.isDirty = series.isDirtyData = chart.isDirtyBox = true;                                                      // 13445
			animation = false;                                                                                                  // 13446
		}                                                                                                                    // 13447
                                                                                                                       // 13448
		if (redraw) {                                                                                                        // 13449
			chart.redraw(animation);                                                                                            // 13450
		}                                                                                                                    // 13451
	},                                                                                                                    // 13452
                                                                                                                       // 13453
	/**                                                                                                                   // 13454
	 * Process the data by cropping away unused data points if the series is longer                                       // 13455
	 * than the crop threshold. This saves computing time for lage series.                                                // 13456
	 */                                                                                                                   // 13457
	processData: function (force) {                                                                                       // 13458
		var series = this,                                                                                                   // 13459
			processedXData = series.xData, // copied during slice operation below                                               // 13460
			processedYData = series.yData,                                                                                      // 13461
			dataLength = processedXData.length,                                                                                 // 13462
			croppedData,                                                                                                        // 13463
			cropStart = 0,                                                                                                      // 13464
			cropped,                                                                                                            // 13465
			distance,                                                                                                           // 13466
			closestPointRange,                                                                                                  // 13467
			xAxis = series.xAxis,                                                                                               // 13468
			i, // loop variable                                                                                                 // 13469
			options = series.options,                                                                                           // 13470
			cropThreshold = options.cropThreshold,                                                                              // 13471
			isCartesian = series.isCartesian,                                                                                   // 13472
			xExtremes,                                                                                                          // 13473
			min,                                                                                                                // 13474
			max;                                                                                                                // 13475
                                                                                                                       // 13476
		// If the series data or axes haven't changed, don't go through this. Return false to pass                           // 13477
		// the message on to override methods like in data grouping.                                                         // 13478
		if (isCartesian && !series.isDirty && !xAxis.isDirty && !series.yAxis.isDirty && !force) {                           // 13479
			return false;                                                                                                       // 13480
		}                                                                                                                    // 13481
                                                                                                                       // 13482
		if (xAxis) {                                                                                                         // 13483
			xExtremes = xAxis.getExtremes(); // corrected for log axis (#3053)                                                  // 13484
			min = xExtremes.min;                                                                                                // 13485
			max = xExtremes.max;                                                                                                // 13486
		}                                                                                                                    // 13487
                                                                                                                       // 13488
		// optionally filter out points outside the plot area                                                                // 13489
		if (isCartesian && series.sorted && (!cropThreshold || dataLength > cropThreshold || series.forceCrop)) {            // 13490
			                                                                                                                    // 13491
			// it's outside current extremes                                                                                    // 13492
			if (processedXData[dataLength - 1] < min || processedXData[0] > max) {                                              // 13493
				processedXData = [];                                                                                               // 13494
				processedYData = [];                                                                                               // 13495
                                                                                                                       // 13496
			// only crop if it's actually spilling out                                                                          // 13497
			} else if (processedXData[0] < min || processedXData[dataLength - 1] > max) {                                       // 13498
				croppedData = this.cropData(series.xData, series.yData, min, max);                                                 // 13499
				processedXData = croppedData.xData;                                                                                // 13500
				processedYData = croppedData.yData;                                                                                // 13501
				cropStart = croppedData.start;                                                                                     // 13502
				cropped = true;                                                                                                    // 13503
			}                                                                                                                   // 13504
		}                                                                                                                    // 13505
                                                                                                                       // 13506
                                                                                                                       // 13507
		// Find the closest distance between processed points                                                                // 13508
		for (i = processedXData.length - 1; i >= 0; i--) {                                                                   // 13509
			distance = processedXData[i] - processedXData[i - 1];                                                               // 13510
			                                                                                                                    // 13511
			if (distance > 0 && (closestPointRange === UNDEFINED || distance < closestPointRange)) {                            // 13512
				closestPointRange = distance;                                                                                      // 13513
                                                                                                                       // 13514
			// Unsorted data is not supported by the line tooltip, as well as data grouping and                                 // 13515
			// navigation in Stock charts (#725) and width calculation of columns (#1900)                                       // 13516
			} else if (distance < 0 && series.requireSorting) {                                                                 // 13517
				error(15);                                                                                                         // 13518
			}                                                                                                                   // 13519
		}                                                                                                                    // 13520
                                                                                                                       // 13521
		// Record the properties                                                                                             // 13522
		series.cropped = cropped; // undefined or true                                                                       // 13523
		series.cropStart = cropStart;                                                                                        // 13524
		series.processedXData = processedXData;                                                                              // 13525
		series.processedYData = processedYData;                                                                              // 13526
                                                                                                                       // 13527
		if (options.pointRange === null) { // null means auto, as for columns, candlesticks and OHLC                         // 13528
			series.pointRange = closestPointRange || 1;                                                                         // 13529
		}                                                                                                                    // 13530
		series.closestPointRange = closestPointRange;                                                                        // 13531
                                                                                                                       // 13532
	},                                                                                                                    // 13533
                                                                                                                       // 13534
	/**                                                                                                                   // 13535
	 * Iterate over xData and crop values between min and max. Returns object containing crop start/end                   // 13536
	 * cropped xData with corresponding part of yData, dataMin and dataMax within the cropped range                       // 13537
	 */                                                                                                                   // 13538
	cropData: function (xData, yData, min, max) {                                                                         // 13539
		var dataLength = xData.length,                                                                                       // 13540
			cropStart = 0,                                                                                                      // 13541
			cropEnd = dataLength,                                                                                               // 13542
			cropShoulder = pick(this.cropShoulder, 1), // line-type series need one point outside                               // 13543
			i;                                                                                                                  // 13544
                                                                                                                       // 13545
		// iterate up to find slice start                                                                                    // 13546
		for (i = 0; i < dataLength; i++) {                                                                                   // 13547
			if (xData[i] >= min) {                                                                                              // 13548
				cropStart = mathMax(0, i - cropShoulder);                                                                          // 13549
				break;                                                                                                             // 13550
			}                                                                                                                   // 13551
		}                                                                                                                    // 13552
                                                                                                                       // 13553
		// proceed to find slice end                                                                                         // 13554
		for (; i < dataLength; i++) {                                                                                        // 13555
			if (xData[i] > max) {                                                                                               // 13556
				cropEnd = i + cropShoulder;                                                                                        // 13557
				break;                                                                                                             // 13558
			}                                                                                                                   // 13559
		}                                                                                                                    // 13560
                                                                                                                       // 13561
		return {                                                                                                             // 13562
			xData: xData.slice(cropStart, cropEnd),                                                                             // 13563
			yData: yData.slice(cropStart, cropEnd),                                                                             // 13564
			start: cropStart,                                                                                                   // 13565
			end: cropEnd                                                                                                        // 13566
		};                                                                                                                   // 13567
	},                                                                                                                    // 13568
                                                                                                                       // 13569
                                                                                                                       // 13570
	/**                                                                                                                   // 13571
	 * Generate the data point after the data has been processed by cropping away                                         // 13572
	 * unused points and optionally grouped in Highcharts Stock.                                                          // 13573
	 */                                                                                                                   // 13574
	generatePoints: function () {                                                                                         // 13575
		var series = this,                                                                                                   // 13576
			options = series.options,                                                                                           // 13577
			dataOptions = options.data,                                                                                         // 13578
			data = series.data,                                                                                                 // 13579
			dataLength,                                                                                                         // 13580
			processedXData = series.processedXData,                                                                             // 13581
			processedYData = series.processedYData,                                                                             // 13582
			pointClass = series.pointClass,                                                                                     // 13583
			processedDataLength = processedXData.length,                                                                        // 13584
			cropStart = series.cropStart || 0,                                                                                  // 13585
			cursor,                                                                                                             // 13586
			hasGroupedData = series.hasGroupedData,                                                                             // 13587
			point,                                                                                                              // 13588
			points = [],                                                                                                        // 13589
			i;                                                                                                                  // 13590
                                                                                                                       // 13591
		if (!data && !hasGroupedData) {                                                                                      // 13592
			var arr = [];                                                                                                       // 13593
			arr.length = dataOptions.length;                                                                                    // 13594
			data = series.data = arr;                                                                                           // 13595
		}                                                                                                                    // 13596
                                                                                                                       // 13597
		for (i = 0; i < processedDataLength; i++) {                                                                          // 13598
			cursor = cropStart + i;                                                                                             // 13599
			if (!hasGroupedData) {                                                                                              // 13600
				if (data[cursor]) {                                                                                                // 13601
					point = data[cursor];                                                                                             // 13602
				} else if (dataOptions[cursor] !== UNDEFINED) { // #970                                                            // 13603
					data[cursor] = point = (new pointClass()).init(series, dataOptions[cursor], processedXData[i]);                   // 13604
				}                                                                                                                  // 13605
				points[i] = point;                                                                                                 // 13606
			} else {                                                                                                            // 13607
				// splat the y data in case of ohlc data array                                                                     // 13608
				points[i] = (new pointClass()).init(series, [processedXData[i]].concat(splat(processedYData[i])));                 // 13609
			}                                                                                                                   // 13610
			points[i].index = cursor; // For faster access in Point.update                                                      // 13611
		}                                                                                                                    // 13612
                                                                                                                       // 13613
		// Hide cropped-away points - this only runs when the number of points is above cropThreshold, or when               // 13614
		// swithching view from non-grouped data to grouped data (#637)                                                      // 13615
		if (data && (processedDataLength !== (dataLength = data.length) || hasGroupedData)) {                                // 13616
			for (i = 0; i < dataLength; i++) {                                                                                  // 13617
				if (i === cropStart && !hasGroupedData) { // when has grouped data, clear all points                               // 13618
					i += processedDataLength;                                                                                         // 13619
				}                                                                                                                  // 13620
				if (data[i]) {                                                                                                     // 13621
					data[i].destroyElements();                                                                                        // 13622
					data[i].plotX = UNDEFINED; // #1003                                                                               // 13623
				}                                                                                                                  // 13624
			}                                                                                                                   // 13625
		}                                                                                                                    // 13626
                                                                                                                       // 13627
		series.data = data;                                                                                                  // 13628
		series.points = points;                                                                                              // 13629
	},                                                                                                                    // 13630
                                                                                                                       // 13631
	/**                                                                                                                   // 13632
	 * Calculate Y extremes for visible data                                                                              // 13633
	 */                                                                                                                   // 13634
	getExtremes: function (yData) {                                                                                       // 13635
		var xAxis = this.xAxis,                                                                                              // 13636
			yAxis = this.yAxis,                                                                                                 // 13637
			xData = this.processedXData,                                                                                        // 13638
			yDataLength,                                                                                                        // 13639
			activeYData = [],                                                                                                   // 13640
			activeCounter = 0,                                                                                                  // 13641
			xExtremes = xAxis.getExtremes(), // #2117, need to compensate for log X axis                                        // 13642
			xMin = xExtremes.min,                                                                                               // 13643
			xMax = xExtremes.max,                                                                                               // 13644
			validValue,                                                                                                         // 13645
			withinRange,                                                                                                        // 13646
			x,                                                                                                                  // 13647
			y,                                                                                                                  // 13648
			i,                                                                                                                  // 13649
			j;                                                                                                                  // 13650
                                                                                                                       // 13651
		yData = yData || this.stackedYData || this.processedYData;                                                           // 13652
		yDataLength = yData.length;                                                                                          // 13653
                                                                                                                       // 13654
		for (i = 0; i < yDataLength; i++) {                                                                                  // 13655
                                                                                                                       // 13656
			x = xData[i];                                                                                                       // 13657
			y = yData[i];                                                                                                       // 13658
                                                                                                                       // 13659
			// For points within the visible range, including the first point outside the                                       // 13660
			// visible range, consider y extremes                                                                               // 13661
			validValue = y !== null && y !== UNDEFINED && (!yAxis.isLog || (y.length || y > 0));                                // 13662
			withinRange = this.getExtremesFromAll || this.options.getExtremesFromAll || this.cropped ||                         // 13663
				((xData[i + 1] || x) >= xMin &&	(xData[i - 1] || x) <= xMax);                                                      // 13664
                                                                                                                       // 13665
			if (validValue && withinRange) {                                                                                    // 13666
                                                                                                                       // 13667
				j = y.length;                                                                                                      // 13668
				if (j) { // array, like ohlc or range data                                                                         // 13669
					while (j--) {                                                                                                     // 13670
						if (y[j] !== null) {                                                                                             // 13671
							activeYData[activeCounter++] = y[j];                                                                            // 13672
						}                                                                                                                // 13673
					}                                                                                                                 // 13674
				} else {                                                                                                           // 13675
					activeYData[activeCounter++] = y;                                                                                 // 13676
				}                                                                                                                  // 13677
			}                                                                                                                   // 13678
		}                                                                                                                    // 13679
		this.dataMin = arrayMin(activeYData);                                                                                // 13680
		this.dataMax = arrayMax(activeYData);                                                                                // 13681
	},                                                                                                                    // 13682
                                                                                                                       // 13683
	/**                                                                                                                   // 13684
	 * Translate data points from raw data values to chart specific positioning data                                      // 13685
	 * needed later in drawPoints, drawGraph and drawTracker.                                                             // 13686
	 */                                                                                                                   // 13687
	translate: function () {                                                                                              // 13688
		if (!this.processedXData) { // hidden series                                                                         // 13689
			this.processData();                                                                                                 // 13690
		}                                                                                                                    // 13691
		this.generatePoints();                                                                                               // 13692
		var series = this,                                                                                                   // 13693
			options = series.options,                                                                                           // 13694
			stacking = options.stacking,                                                                                        // 13695
			xAxis = series.xAxis,                                                                                               // 13696
			categories = xAxis.categories,                                                                                      // 13697
			yAxis = series.yAxis,                                                                                               // 13698
			points = series.points,                                                                                             // 13699
			dataLength = points.length,                                                                                         // 13700
			hasModifyValue = !!series.modifyValue,                                                                              // 13701
			i,                                                                                                                  // 13702
			pointPlacement = options.pointPlacement,                                                                            // 13703
			dynamicallyPlaced = pointPlacement === 'between' || isNumber(pointPlacement),                                       // 13704
			threshold = options.threshold,                                                                                      // 13705
			stackThreshold = options.startFromThreshold ? threshold : 0,                                                        // 13706
			plotX,                                                                                                              // 13707
			plotY,                                                                                                              // 13708
			lastPlotX,                                                                                                          // 13709
			closestPointRangePx = Number.MAX_VALUE;                                                                             // 13710
                                                                                                                       // 13711
		// Translate each point                                                                                              // 13712
		for (i = 0; i < dataLength; i++) {                                                                                   // 13713
			var point = points[i],                                                                                              // 13714
				xValue = point.x,                                                                                                  // 13715
				yValue = point.y,                                                                                                  // 13716
				yBottom = point.low,                                                                                               // 13717
				stack = stacking && yAxis.stacks[(series.negStacks && yValue < (stackThreshold ? 0 : threshold) ? '-' : '') + series.stackKey],
				pointStack,                                                                                                        // 13719
				stackValues;                                                                                                       // 13720
                                                                                                                       // 13721
			// Discard disallowed y values for log axes (#3434)                                                                 // 13722
			if (yAxis.isLog && yValue !== null && yValue <= 0) {                                                                // 13723
				point.y = yValue = null;                                                                                           // 13724
				error(10);                                                                                                         // 13725
			}                                                                                                                   // 13726
                                                                                                                       // 13727
			// Get the plotX translation                                                                                        // 13728
			point.plotX = plotX = mathMin(mathMax(-1e5, xAxis.translate(xValue, 0, 0, 0, 1, pointPlacement, this.type === 'flags')), 1e5); // #3923
                                                                                                                       // 13730
                                                                                                                       // 13731
			// Calculate the bottom y value for stacked series                                                                  // 13732
			if (stacking && series.visible && stack && stack[xValue]) {                                                         // 13733
                                                                                                                       // 13734
				pointStack = stack[xValue];                                                                                        // 13735
				stackValues = pointStack.points[series.index + ',' + i];                                                           // 13736
				yBottom = stackValues[0];                                                                                          // 13737
				yValue = stackValues[1];                                                                                           // 13738
                                                                                                                       // 13739
				if (yBottom === stackThreshold) {                                                                                  // 13740
					yBottom = pick(threshold, yAxis.min);                                                                             // 13741
				}                                                                                                                  // 13742
				if (yAxis.isLog && yBottom <= 0) { // #1200, #1232                                                                 // 13743
					yBottom = null;                                                                                                   // 13744
				}                                                                                                                  // 13745
                                                                                                                       // 13746
				point.total = point.stackTotal = pointStack.total;                                                                 // 13747
				point.percentage = pointStack.total && (point.y / pointStack.total * 100);                                         // 13748
				point.stackY = yValue;                                                                                             // 13749
                                                                                                                       // 13750
				// Place the stack label                                                                                           // 13751
				pointStack.setOffset(series.pointXOffset || 0, series.barW || 0);                                                  // 13752
                                                                                                                       // 13753
			}                                                                                                                   // 13754
                                                                                                                       // 13755
			// Set translated yBottom or remove it                                                                              // 13756
			point.yBottom = defined(yBottom) ?                                                                                  // 13757
				yAxis.translate(yBottom, 0, 1, 0, 1) :                                                                             // 13758
				null;                                                                                                              // 13759
                                                                                                                       // 13760
			// general hook, used for Highstock compare mode                                                                    // 13761
			if (hasModifyValue) {                                                                                               // 13762
				yValue = series.modifyValue(yValue, point);                                                                        // 13763
			}                                                                                                                   // 13764
                                                                                                                       // 13765
			// Set the the plotY value, reset it for redraws                                                                    // 13766
			point.plotY = plotY = (typeof yValue === 'number' && yValue !== Infinity) ?                                         // 13767
				mathMin(mathMax(-1e5, yAxis.translate(yValue, 0, 1, 0, 1)), 1e5) : // #3201                                        // 13768
				UNDEFINED;                                                                                                         // 13769
			point.isInside = plotY !== UNDEFINED && plotY >= 0 && plotY <= yAxis.len && // #3519                                // 13770
				plotX >= 0 && plotX <= xAxis.len;                                                                                  // 13771
                                                                                                                       // 13772
                                                                                                                       // 13773
			// Set client related positions for mouse tracking                                                                  // 13774
			point.clientX = dynamicallyPlaced ? xAxis.translate(xValue, 0, 0, 0, 1) : plotX; // #1514                           // 13775
                                                                                                                       // 13776
			point.negative = point.y < (threshold || 0);                                                                        // 13777
                                                                                                                       // 13778
			// some API data                                                                                                    // 13779
			point.category = categories && categories[point.x] !== UNDEFINED ?                                                  // 13780
				categories[point.x] : point.x;                                                                                     // 13781
                                                                                                                       // 13782
			// Determine auto enabling of markers (#3635)                                                                       // 13783
			if (i) {                                                                                                            // 13784
				closestPointRangePx = mathMin(closestPointRangePx, mathAbs(plotX - lastPlotX));                                    // 13785
			}                                                                                                                   // 13786
			lastPlotX = plotX;                                                                                                  // 13787
                                                                                                                       // 13788
		}                                                                                                                    // 13789
                                                                                                                       // 13790
		series.closestPointRangePx = closestPointRangePx;                                                                    // 13791
                                                                                                                       // 13792
		// now that we have the cropped data, build the segments                                                             // 13793
		series.getSegments();                                                                                                // 13794
	},                                                                                                                    // 13795
                                                                                                                       // 13796
	/**                                                                                                                   // 13797
	 * Set the clipping for the series. For animated series it is called twice, first to initiate                         // 13798
	 * animating the clip then the second time without the animation to set the final clip.                               // 13799
	 */                                                                                                                   // 13800
	setClip: function (animation) {                                                                                       // 13801
		var chart = this.chart,                                                                                              // 13802
			renderer = chart.renderer,                                                                                          // 13803
			inverted = chart.inverted,                                                                                          // 13804
			seriesClipBox = this.clipBox,                                                                                       // 13805
			clipBox = seriesClipBox || chart.clipBox,                                                                           // 13806
			sharedClipKey = this.sharedClipKey || ['_sharedClip', animation && animation.duration, animation && animation.easing, clipBox.height].join(','),
			clipRect = chart[sharedClipKey],                                                                                    // 13808
			markerClipRect = chart[sharedClipKey + 'm'];                                                                        // 13809
                                                                                                                       // 13810
		// If a clipping rectangle with the same properties is currently present in the chart, use that.                     // 13811
		if (!clipRect) {                                                                                                     // 13812
                                                                                                                       // 13813
			// When animation is set, prepare the initial positions                                                             // 13814
			if (animation) {                                                                                                    // 13815
				clipBox.width = 0;                                                                                                 // 13816
                                                                                                                       // 13817
				chart[sharedClipKey + 'm'] = markerClipRect = renderer.clipRect(                                                   // 13818
					-99, // include the width of the first marker                                                                     // 13819
					inverted ? -chart.plotLeft : -chart.plotTop,                                                                      // 13820
					99,                                                                                                               // 13821
					inverted ? chart.chartWidth : chart.chartHeight                                                                   // 13822
				);                                                                                                                 // 13823
			}                                                                                                                   // 13824
			chart[sharedClipKey] = clipRect = renderer.clipRect(clipBox);                                                       // 13825
			                                                                                                                    // 13826
		}                                                                                                                    // 13827
		if (animation) {                                                                                                     // 13828
			clipRect.count += 1;                                                                                                // 13829
		}                                                                                                                    // 13830
                                                                                                                       // 13831
		if (this.options.clip !== false) {                                                                                   // 13832
			this.group.clip(animation || seriesClipBox ? clipRect : chart.clipRect);                                            // 13833
			this.markerGroup.clip(markerClipRect);                                                                              // 13834
			this.sharedClipKey = sharedClipKey;                                                                                 // 13835
		}                                                                                                                    // 13836
                                                                                                                       // 13837
		// Remove the shared clipping rectangle when all series are shown                                                    // 13838
		if (!animation) {                                                                                                    // 13839
			clipRect.count -= 1;                                                                                                // 13840
			if (clipRect.count <= 0 && sharedClipKey && chart[sharedClipKey]) {                                                 // 13841
				if (!seriesClipBox) {                                                                                              // 13842
					chart[sharedClipKey] = chart[sharedClipKey].destroy();                                                            // 13843
				}                                                                                                                  // 13844
				if (chart[sharedClipKey + 'm']) {                                                                                  // 13845
					chart[sharedClipKey + 'm'] = chart[sharedClipKey + 'm'].destroy();                                                // 13846
				}                                                                                                                  // 13847
			}                                                                                                                   // 13848
		}                                                                                                                    // 13849
	},                                                                                                                    // 13850
                                                                                                                       // 13851
	/**                                                                                                                   // 13852
	 * Animate in the series                                                                                              // 13853
	 */                                                                                                                   // 13854
	animate: function (init) {                                                                                            // 13855
		var series = this,                                                                                                   // 13856
			chart = series.chart,                                                                                               // 13857
			clipRect,                                                                                                           // 13858
			animation = series.options.animation,                                                                               // 13859
			sharedClipKey;                                                                                                      // 13860
                                                                                                                       // 13861
		// Animation option is set to true                                                                                   // 13862
		if (animation && !isObject(animation)) {                                                                             // 13863
			animation = defaultPlotOptions[series.type].animation;                                                              // 13864
		}                                                                                                                    // 13865
                                                                                                                       // 13866
		// Initialize the animation. Set up the clipping rectangle.                                                          // 13867
		if (init) {                                                                                                          // 13868
                                                                                                                       // 13869
			series.setClip(animation);                                                                                          // 13870
                                                                                                                       // 13871
		// Run the animation                                                                                                 // 13872
		} else {                                                                                                             // 13873
			sharedClipKey = this.sharedClipKey;                                                                                 // 13874
			clipRect = chart[sharedClipKey];                                                                                    // 13875
			if (clipRect) {                                                                                                     // 13876
				clipRect.animate({                                                                                                 // 13877
					width: chart.plotSizeX                                                                                            // 13878
				}, animation);                                                                                                     // 13879
			}                                                                                                                   // 13880
			if (chart[sharedClipKey + 'm']) {                                                                                   // 13881
				chart[sharedClipKey + 'm'].animate({                                                                               // 13882
					width: chart.plotSizeX + 99                                                                                       // 13883
				}, animation);                                                                                                     // 13884
			}                                                                                                                   // 13885
                                                                                                                       // 13886
			// Delete this function to allow it only once                                                                       // 13887
			series.animate = null;                                                                                              // 13888
                                                                                                                       // 13889
		}                                                                                                                    // 13890
	},                                                                                                                    // 13891
                                                                                                                       // 13892
	/**                                                                                                                   // 13893
	 * This runs after animation to land on the final plot clipping                                                       // 13894
	 */                                                                                                                   // 13895
	afterAnimate: function () {                                                                                           // 13896
		this.setClip();                                                                                                      // 13897
		fireEvent(this, 'afterAnimate');                                                                                     // 13898
	},                                                                                                                    // 13899
                                                                                                                       // 13900
	/**                                                                                                                   // 13901
	 * Draw the markers                                                                                                   // 13902
	 */                                                                                                                   // 13903
	drawPoints: function () {                                                                                             // 13904
		var series = this,                                                                                                   // 13905
			pointAttr,                                                                                                          // 13906
			points = series.points,                                                                                             // 13907
			chart = series.chart,                                                                                               // 13908
			plotX,                                                                                                              // 13909
			plotY,                                                                                                              // 13910
			i,                                                                                                                  // 13911
			point,                                                                                                              // 13912
			radius,                                                                                                             // 13913
			symbol,                                                                                                             // 13914
			isImage,                                                                                                            // 13915
			graphic,                                                                                                            // 13916
			options = series.options,                                                                                           // 13917
			seriesMarkerOptions = options.marker,                                                                               // 13918
			seriesPointAttr = series.pointAttr[''],                                                                             // 13919
			pointMarkerOptions,                                                                                                 // 13920
			hasPointMarker,                                                                                                     // 13921
			enabled,                                                                                                            // 13922
			isInside,                                                                                                           // 13923
			markerGroup = series.markerGroup,                                                                                   // 13924
			xAxis = series.xAxis,                                                                                               // 13925
			globallyEnabled = pick(                                                                                             // 13926
				seriesMarkerOptions.enabled,                                                                                       // 13927
				xAxis.isRadial,                                                                                                    // 13928
				series.closestPointRangePx > 2 * seriesMarkerOptions.radius                                                        // 13929
			);                                                                                                                  // 13930
                                                                                                                       // 13931
		if (seriesMarkerOptions.enabled !== false || series._hasPointMarkers) {                                              // 13932
                                                                                                                       // 13933
			i = points.length;                                                                                                  // 13934
			while (i--) {                                                                                                       // 13935
				point = points[i];                                                                                                 // 13936
				plotX = mathFloor(point.plotX); // #1843                                                                           // 13937
				plotY = point.plotY;                                                                                               // 13938
				graphic = point.graphic;                                                                                           // 13939
				pointMarkerOptions = point.marker || {};                                                                           // 13940
				hasPointMarker = !!point.marker;                                                                                   // 13941
				enabled = (globallyEnabled && pointMarkerOptions.enabled === UNDEFINED) || pointMarkerOptions.enabled;             // 13942
				isInside = point.isInside;                                                                                         // 13943
                                                                                                                       // 13944
				// only draw the point if y is defined                                                                             // 13945
				if (enabled && plotY !== UNDEFINED && !isNaN(plotY) && point.y !== null) {                                         // 13946
                                                                                                                       // 13947
					// shortcuts                                                                                                      // 13948
					pointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || seriesPointAttr;                     // 13949
					radius = pointAttr.r;                                                                                             // 13950
					symbol = pick(pointMarkerOptions.symbol, series.symbol);                                                          // 13951
					isImage = symbol.indexOf('url') === 0;                                                                            // 13952
                                                                                                                       // 13953
					if (graphic) { // update                                                                                          // 13954
						graphic[isInside ? 'show' : 'hide'](true) // Since the marker group isn't clipped, each individual marker must be toggled
							.animate(extend({                                                                                               // 13956
								x: plotX - radius,                                                                                             // 13957
								y: plotY - radius                                                                                              // 13958
							}, graphic.symbolName ? { // don't apply to image symbols #507                                                  // 13959
								width: 2 * radius,                                                                                             // 13960
								height: 2 * radius                                                                                             // 13961
							} : {}));                                                                                                       // 13962
					} else if (isInside && (radius > 0 || isImage)) {                                                                 // 13963
						point.graphic = graphic = chart.renderer.symbol(                                                                 // 13964
							symbol,                                                                                                         // 13965
							plotX - radius,                                                                                                 // 13966
							plotY - radius,                                                                                                 // 13967
							2 * radius,                                                                                                     // 13968
							2 * radius,                                                                                                     // 13969
							hasPointMarker ? pointMarkerOptions : seriesMarkerOptions                                                       // 13970
						)                                                                                                                // 13971
						.attr(pointAttr)                                                                                                 // 13972
						.add(markerGroup);                                                                                               // 13973
					}                                                                                                                 // 13974
                                                                                                                       // 13975
				} else if (graphic) {                                                                                              // 13976
					point.graphic = graphic.destroy(); // #1269                                                                       // 13977
				}                                                                                                                  // 13978
			}                                                                                                                   // 13979
		}                                                                                                                    // 13980
                                                                                                                       // 13981
	},                                                                                                                    // 13982
                                                                                                                       // 13983
	/**                                                                                                                   // 13984
	 * Convert state properties from API naming conventions to SVG attributes                                             // 13985
	 *                                                                                                                    // 13986
	 * @param {Object} options API options object                                                                         // 13987
	 * @param {Object} base1 SVG attribute object to inherit from                                                         // 13988
	 * @param {Object} base2 Second level SVG attribute object to inherit from                                            // 13989
	 */                                                                                                                   // 13990
	convertAttribs: function (options, base1, base2, base3) {                                                             // 13991
		var conversion = this.pointAttrToOptions,                                                                            // 13992
			attr,                                                                                                               // 13993
			option,                                                                                                             // 13994
			obj = {};                                                                                                           // 13995
                                                                                                                       // 13996
		options = options || {};                                                                                             // 13997
		base1 = base1 || {};                                                                                                 // 13998
		base2 = base2 || {};                                                                                                 // 13999
		base3 = base3 || {};                                                                                                 // 14000
                                                                                                                       // 14001
		for (attr in conversion) {                                                                                           // 14002
			option = conversion[attr];                                                                                          // 14003
			obj[attr] = pick(options[option], base1[attr], base2[attr], base3[attr]);                                           // 14004
		}                                                                                                                    // 14005
		return obj;                                                                                                          // 14006
	},                                                                                                                    // 14007
                                                                                                                       // 14008
	/**                                                                                                                   // 14009
	 * Get the state attributes. Each series type has its own set of attributes                                           // 14010
	 * that are allowed to change on a point's state change. Series wide attributes are stored for                        // 14011
	 * all series, and additionally point specific attributes are stored for all                                          // 14012
	 * points with individual marker options. If such options are not defined for the point,                              // 14013
	 * a reference to the series wide attributes is stored in point.pointAttr.                                            // 14014
	 */                                                                                                                   // 14015
	getAttribs: function () {                                                                                             // 14016
		var series = this,                                                                                                   // 14017
			seriesOptions = series.options,                                                                                     // 14018
			normalOptions = defaultPlotOptions[series.type].marker ? seriesOptions.marker : seriesOptions,                      // 14019
			stateOptions = normalOptions.states,                                                                                // 14020
			stateOptionsHover = stateOptions[HOVER_STATE],                                                                      // 14021
			pointStateOptionsHover,                                                                                             // 14022
			seriesColor = series.color,                                                                                         // 14023
			seriesNegativeColor = series.options.negativeColor,                                                                 // 14024
			normalDefaults = {                                                                                                  // 14025
				stroke: seriesColor,                                                                                               // 14026
				fill: seriesColor                                                                                                  // 14027
			},                                                                                                                  // 14028
			points = series.points || [], // #927                                                                               // 14029
			i,                                                                                                                  // 14030
			point,                                                                                                              // 14031
			seriesPointAttr = [],                                                                                               // 14032
			pointAttr,                                                                                                          // 14033
			pointAttrToOptions = series.pointAttrToOptions,                                                                     // 14034
			hasPointSpecificOptions = series.hasPointSpecificOptions,                                                           // 14035
			defaultLineColor = normalOptions.lineColor,                                                                         // 14036
			defaultFillColor = normalOptions.fillColor,                                                                         // 14037
			turboThreshold = seriesOptions.turboThreshold,                                                                      // 14038
			zones = series.zones,                                                                                               // 14039
			zoneAxis = series.zoneAxis || 'y',                                                                                  // 14040
			attr,                                                                                                               // 14041
			key;                                                                                                                // 14042
                                                                                                                       // 14043
		// series type specific modifications                                                                                // 14044
		if (seriesOptions.marker) { // line, spline, area, areaspline, scatter                                               // 14045
                                                                                                                       // 14046
			// if no hover radius is given, default to normal radius + 2                                                        // 14047
			stateOptionsHover.radius = stateOptionsHover.radius || normalOptions.radius + stateOptionsHover.radiusPlus;         // 14048
			stateOptionsHover.lineWidth = stateOptionsHover.lineWidth || normalOptions.lineWidth + stateOptionsHover.lineWidthPlus;
                                                                                                                       // 14050
		} else { // column, bar, pie                                                                                         // 14051
                                                                                                                       // 14052
			// if no hover color is given, brighten the normal color                                                            // 14053
			stateOptionsHover.color = stateOptionsHover.color ||                                                                // 14054
				Color(stateOptionsHover.color || seriesColor)                                                                      // 14055
					.brighten(stateOptionsHover.brightness).get();                                                                    // 14056
                                                                                                                       // 14057
			// if no hover negativeColor is given, brighten the normal negativeColor                                            // 14058
			stateOptionsHover.negativeColor = stateOptionsHover.negativeColor ||                                                // 14059
				Color(stateOptionsHover.negativeColor || seriesNegativeColor)                                                      // 14060
					.brighten(stateOptionsHover.brightness).get();                                                                    // 14061
		}                                                                                                                    // 14062
                                                                                                                       // 14063
		// general point attributes for the series normal state                                                              // 14064
		seriesPointAttr[NORMAL_STATE] = series.convertAttribs(normalOptions, normalDefaults);                                // 14065
                                                                                                                       // 14066
		// HOVER_STATE and SELECT_STATE states inherit from normal state except the default radius                           // 14067
		each([HOVER_STATE, SELECT_STATE], function (state) {                                                                 // 14068
			seriesPointAttr[state] =                                                                                            // 14069
					series.convertAttribs(stateOptions[state], seriesPointAttr[NORMAL_STATE]);                                        // 14070
		});                                                                                                                  // 14071
                                                                                                                       // 14072
		// set it                                                                                                            // 14073
		series.pointAttr = seriesPointAttr;                                                                                  // 14074
                                                                                                                       // 14075
                                                                                                                       // 14076
		// Generate the point-specific attribute collections if specific point                                               // 14077
		// options are given. If not, create a referance to the series wide point                                            // 14078
		// attributes                                                                                                        // 14079
		i = points.length;                                                                                                   // 14080
		if (!turboThreshold || i < turboThreshold || hasPointSpecificOptions) {                                              // 14081
			while (i--) {                                                                                                       // 14082
				point = points[i];                                                                                                 // 14083
				normalOptions = (point.options && point.options.marker) || point.options;                                          // 14084
				if (normalOptions && normalOptions.enabled === false) {                                                            // 14085
					normalOptions.radius = 0;                                                                                         // 14086
				}                                                                                                                  // 14087
                                                                                                                       // 14088
				if (zones.length) {                                                                                                // 14089
					var j = 0,                                                                                                        // 14090
						threshold = zones[j];                                                                                            // 14091
					while (point[zoneAxis] >= threshold.value) {				                                                                  // 14092
						threshold = zones[++j];                                                                                          // 14093
					}                                                                                                                 // 14094
					                                                                                                                  // 14095
					point.color = point.fillColor = threshold.color;                                                                  // 14096
				}                                                                                                                  // 14097
                                                                                                                       // 14098
				hasPointSpecificOptions = seriesOptions.colorByPoint || point.color; // #868                                       // 14099
                                                                                                                       // 14100
				// check if the point has specific visual options                                                                  // 14101
				if (point.options) {                                                                                               // 14102
					for (key in pointAttrToOptions) {                                                                                 // 14103
						if (defined(normalOptions[pointAttrToOptions[key]])) {                                                           // 14104
							hasPointSpecificOptions = true;                                                                                 // 14105
						}                                                                                                                // 14106
					}                                                                                                                 // 14107
				}                                                                                                                  // 14108
                                                                                                                       // 14109
				// a specific marker config object is defined for the individual point:                                            // 14110
				// create it's own attribute collection                                                                            // 14111
				if (hasPointSpecificOptions) {                                                                                     // 14112
					normalOptions = normalOptions || {};                                                                              // 14113
					pointAttr = [];                                                                                                   // 14114
					stateOptions = normalOptions.states || {}; // reassign for individual point                                       // 14115
					pointStateOptionsHover = stateOptions[HOVER_STATE] = stateOptions[HOVER_STATE] || {};                             // 14116
                                                                                                                       // 14117
					// Handle colors for column and pies                                                                              // 14118
					if (!seriesOptions.marker) { // column, bar, point                                                                // 14119
						// If no hover color is given, brighten the normal color. #1619, #2579                                           // 14120
						pointStateOptionsHover.color = pointStateOptionsHover.color || (!point.options.color && stateOptionsHover[(point.negative && seriesNegativeColor ? 'negativeColor' : 'color')]) ||
							Color(point.color)                                                                                              // 14122
								.brighten(pointStateOptionsHover.brightness || stateOptionsHover.brightness)                                   // 14123
								.get();                                                                                                        // 14124
					}                                                                                                                 // 14125
                                                                                                                       // 14126
					// normal point state inherits series wide normal state                                                           // 14127
					attr = { color: point.color }; // #868                                                                            // 14128
					if (!defaultFillColor) { // Individual point color or negative color markers (#2219)                              // 14129
						attr.fillColor = point.color;                                                                                    // 14130
					}                                                                                                                 // 14131
					if (!defaultLineColor) {                                                                                          // 14132
						attr.lineColor = point.color; // Bubbles take point color, line markers use white                                // 14133
					}                                                                                                                 // 14134
					// Color is explicitly set to null or undefined (#1288, #4068)                                                    // 14135
					if (normalOptions.hasOwnProperty('color') && !normalOptions.color) {                                              // 14136
						delete normalOptions.color;                                                                                      // 14137
					}                                                                                                                 // 14138
					pointAttr[NORMAL_STATE] = series.convertAttribs(extend(attr, normalOptions), seriesPointAttr[NORMAL_STATE]);      // 14139
                                                                                                                       // 14140
					// inherit from point normal and series hover                                                                     // 14141
					pointAttr[HOVER_STATE] = series.convertAttribs(                                                                   // 14142
						stateOptions[HOVER_STATE],                                                                                       // 14143
						seriesPointAttr[HOVER_STATE],                                                                                    // 14144
						pointAttr[NORMAL_STATE]                                                                                          // 14145
					);                                                                                                                // 14146
                                                                                                                       // 14147
					// inherit from point normal and series hover                                                                     // 14148
					pointAttr[SELECT_STATE] = series.convertAttribs(                                                                  // 14149
						stateOptions[SELECT_STATE],                                                                                      // 14150
						seriesPointAttr[SELECT_STATE],                                                                                   // 14151
						pointAttr[NORMAL_STATE]                                                                                          // 14152
					);                                                                                                                // 14153
                                                                                                                       // 14154
                                                                                                                       // 14155
				// no marker config object is created: copy a reference to the series-wide                                         // 14156
				// attribute collection                                                                                            // 14157
				} else {                                                                                                           // 14158
					pointAttr = seriesPointAttr;                                                                                      // 14159
				}                                                                                                                  // 14160
                                                                                                                       // 14161
				point.pointAttr = pointAttr;                                                                                       // 14162
			}                                                                                                                   // 14163
		}                                                                                                                    // 14164
	},                                                                                                                    // 14165
                                                                                                                       // 14166
	/**                                                                                                                   // 14167
	 * Clear DOM objects and free up memory                                                                               // 14168
	 */                                                                                                                   // 14169
	destroy: function () {                                                                                                // 14170
		var series = this,                                                                                                   // 14171
			chart = series.chart,                                                                                               // 14172
			issue134 = /AppleWebKit\/533/.test(userAgent),                                                                      // 14173
			destroy,                                                                                                            // 14174
			i,                                                                                                                  // 14175
			data = series.data || [],                                                                                           // 14176
			point,                                                                                                              // 14177
			prop,                                                                                                               // 14178
			axis;                                                                                                               // 14179
                                                                                                                       // 14180
		// add event hook                                                                                                    // 14181
		fireEvent(series, 'destroy');                                                                                        // 14182
                                                                                                                       // 14183
		// remove all events                                                                                                 // 14184
		removeEvent(series);                                                                                                 // 14185
                                                                                                                       // 14186
		// erase from axes                                                                                                   // 14187
		each(series.axisTypes || [], function (AXIS) {                                                                       // 14188
			axis = series[AXIS];                                                                                                // 14189
			if (axis) {                                                                                                         // 14190
				erase(axis.series, series);                                                                                        // 14191
				axis.isDirty = axis.forceRedraw = true;                                                                            // 14192
			}                                                                                                                   // 14193
		});                                                                                                                  // 14194
                                                                                                                       // 14195
		// remove legend items                                                                                               // 14196
		if (series.legendItem) {                                                                                             // 14197
			series.chart.legend.destroyItem(series);                                                                            // 14198
		}                                                                                                                    // 14199
                                                                                                                       // 14200
		// destroy all points with their elements                                                                            // 14201
		i = data.length;                                                                                                     // 14202
		while (i--) {                                                                                                        // 14203
			point = data[i];                                                                                                    // 14204
			if (point && point.destroy) {                                                                                       // 14205
				point.destroy();                                                                                                   // 14206
			}                                                                                                                   // 14207
		}                                                                                                                    // 14208
		series.points = null;                                                                                                // 14209
                                                                                                                       // 14210
		// Clear the animation timeout if we are destroying the series during initial animation                              // 14211
		clearTimeout(series.animationTimeout);                                                                               // 14212
                                                                                                                       // 14213
		// Destroy all SVGElements associated to the series                                                                  // 14214
		for (prop in series) {                                                                                               // 14215
			if (series[prop] instanceof SVGElement && !series[prop].survive) { // Survive provides a hook for not destroying    // 14216
                                                                                                                       // 14217
				// issue 134 workaround                                                                                            // 14218
				destroy = issue134 && prop === 'group' ?                                                                           // 14219
					'hide' :                                                                                                          // 14220
					'destroy';                                                                                                        // 14221
                                                                                                                       // 14222
				series[prop][destroy]();                                                                                           // 14223
			}                                                                                                                   // 14224
		}                                                                                                                    // 14225
                                                                                                                       // 14226
		// remove from hoverSeries                                                                                           // 14227
		if (chart.hoverSeries === series) {                                                                                  // 14228
			chart.hoverSeries = null;                                                                                           // 14229
		}                                                                                                                    // 14230
		erase(chart.series, series);                                                                                         // 14231
                                                                                                                       // 14232
		// clear all members                                                                                                 // 14233
		for (prop in series) {                                                                                               // 14234
			delete series[prop];                                                                                                // 14235
		}                                                                                                                    // 14236
	},                                                                                                                    // 14237
                                                                                                                       // 14238
	/**                                                                                                                   // 14239
	 * Return the graph path of a segment                                                                                 // 14240
	 */                                                                                                                   // 14241
	getSegmentPath: function (segment) {                                                                                  // 14242
		var series = this,                                                                                                   // 14243
			segmentPath = [],                                                                                                   // 14244
			step = series.options.step;                                                                                         // 14245
                                                                                                                       // 14246
		// build the segment line                                                                                            // 14247
		each(segment, function (point, i) {                                                                                  // 14248
                                                                                                                       // 14249
			var plotX = point.plotX,                                                                                            // 14250
				plotY = point.plotY,                                                                                               // 14251
				lastPoint;                                                                                                         // 14252
                                                                                                                       // 14253
			if (series.getPointSpline) { // generate the spline as defined in the SplineSeries object                           // 14254
				segmentPath.push.apply(segmentPath, series.getPointSpline(segment, point, i));                                     // 14255
                                                                                                                       // 14256
			} else {                                                                                                            // 14257
                                                                                                                       // 14258
				// moveTo or lineTo                                                                                                // 14259
				segmentPath.push(i ? L : M);                                                                                       // 14260
                                                                                                                       // 14261
				// step line?                                                                                                      // 14262
				if (step && i) {                                                                                                   // 14263
					lastPoint = segment[i - 1];                                                                                       // 14264
					if (step === 'right') {                                                                                           // 14265
						segmentPath.push(                                                                                                // 14266
							lastPoint.plotX,                                                                                                // 14267
							plotY                                                                                                           // 14268
						);                                                                                                               // 14269
                                                                                                                       // 14270
					} else if (step === 'center') {                                                                                   // 14271
						segmentPath.push(                                                                                                // 14272
							(lastPoint.plotX + plotX) / 2,                                                                                  // 14273
							lastPoint.plotY,                                                                                                // 14274
							(lastPoint.plotX + plotX) / 2,                                                                                  // 14275
							plotY                                                                                                           // 14276
						);                                                                                                               // 14277
                                                                                                                       // 14278
					} else {                                                                                                          // 14279
						segmentPath.push(                                                                                                // 14280
							plotX,                                                                                                          // 14281
							lastPoint.plotY                                                                                                 // 14282
						);                                                                                                               // 14283
					}                                                                                                                 // 14284
				}                                                                                                                  // 14285
                                                                                                                       // 14286
				// normal line to next point                                                                                       // 14287
				segmentPath.push(                                                                                                  // 14288
					point.plotX,                                                                                                      // 14289
					point.plotY                                                                                                       // 14290
				);                                                                                                                 // 14291
			}                                                                                                                   // 14292
		});                                                                                                                  // 14293
                                                                                                                       // 14294
		return segmentPath;                                                                                                  // 14295
	},                                                                                                                    // 14296
                                                                                                                       // 14297
	/**                                                                                                                   // 14298
	 * Get the graph path                                                                                                 // 14299
	 */                                                                                                                   // 14300
	getGraphPath: function () {                                                                                           // 14301
		var series = this,                                                                                                   // 14302
			graphPath = [],                                                                                                     // 14303
			segmentPath,                                                                                                        // 14304
			singlePoints = []; // used in drawTracker                                                                           // 14305
                                                                                                                       // 14306
		// Divide into segments and build graph and area paths                                                               // 14307
		each(series.segments, function (segment) {                                                                           // 14308
                                                                                                                       // 14309
			segmentPath = series.getSegmentPath(segment);                                                                       // 14310
                                                                                                                       // 14311
			// add the segment to the graph, or a single point for tracking                                                     // 14312
			if (segment.length > 1) {                                                                                           // 14313
				graphPath = graphPath.concat(segmentPath);                                                                         // 14314
			} else {                                                                                                            // 14315
				singlePoints.push(segment[0]);                                                                                     // 14316
			}                                                                                                                   // 14317
		});                                                                                                                  // 14318
                                                                                                                       // 14319
		// Record it for use in drawGraph and drawTracker, and return graphPath                                              // 14320
		series.singlePoints = singlePoints;                                                                                  // 14321
		series.graphPath = graphPath;                                                                                        // 14322
                                                                                                                       // 14323
		return graphPath;                                                                                                    // 14324
                                                                                                                       // 14325
	},                                                                                                                    // 14326
                                                                                                                       // 14327
	/**                                                                                                                   // 14328
	 * Draw the actual graph                                                                                              // 14329
	 */                                                                                                                   // 14330
	drawGraph: function () {                                                                                              // 14331
		var series = this,                                                                                                   // 14332
			options = this.options,                                                                                             // 14333
			props = [['graph', options.lineColor || this.color, options.dashStyle]],                                            // 14334
			lineWidth = options.lineWidth,                                                                                      // 14335
			roundCap = options.linecap !== 'square',                                                                            // 14336
			graphPath = this.getGraphPath(),                                                                                    // 14337
			fillColor = (this.fillGraph && this.color) || NONE, // polygon series use filled graph                              // 14338
			zones = this.zones;                                                                                                 // 14339
                                                                                                                       // 14340
		each(zones, function (threshold, i) {                                                                                // 14341
			props.push(['zoneGraph' + i, threshold.color || series.color, threshold.dashStyle || options.dashStyle]);           // 14342
		});                                                                                                                  // 14343
		                                                                                                                     // 14344
		// Draw the graph                                                                                                    // 14345
		each(props, function (prop, i) {                                                                                     // 14346
			var graphKey = prop[0],                                                                                             // 14347
				graph = series[graphKey],                                                                                          // 14348
				attribs;                                                                                                           // 14349
                                                                                                                       // 14350
			if (graph) {                                                                                                        // 14351
				stop(graph); // cancel running animations, #459                                                                    // 14352
				graph.animate({ d: graphPath });                                                                                   // 14353
                                                                                                                       // 14354
			} else if ((lineWidth || fillColor) && graphPath.length) { // #1487                                                 // 14355
				attribs = {                                                                                                        // 14356
					stroke: prop[1],                                                                                                  // 14357
					'stroke-width': lineWidth,                                                                                        // 14358
					fill: fillColor,                                                                                                  // 14359
					zIndex: 1 // #1069                                                                                                // 14360
				};                                                                                                                 // 14361
				if (prop[2]) {                                                                                                     // 14362
					attribs.dashstyle = prop[2];                                                                                      // 14363
				} else if (roundCap) {                                                                                             // 14364
					attribs['stroke-linecap'] = attribs['stroke-linejoin'] = 'round';                                                 // 14365
				}                                                                                                                  // 14366
                                                                                                                       // 14367
				series[graphKey] = series.chart.renderer.path(graphPath)                                                           // 14368
					.attr(attribs)                                                                                                    // 14369
					.add(series.group)                                                                                                // 14370
					.shadow((i < 2) && options.shadow); // add shadow to normal series (0) or to first zone (1) #3932                 // 14371
			}                                                                                                                   // 14372
		});                                                                                                                  // 14373
	},                                                                                                                    // 14374
                                                                                                                       // 14375
	/**                                                                                                                   // 14376
	 * Clip the graphs into the positive and negative coloured graphs                                                     // 14377
	 */                                                                                                                   // 14378
	applyZones: function () {                                                                                             // 14379
		var series = this,                                                                                                   // 14380
			chart = this.chart,                                                                                                 // 14381
			renderer = chart.renderer,                                                                                          // 14382
			zones = this.zones,                                                                                                 // 14383
			translatedFrom,                                                                                                     // 14384
			translatedTo,                                                                                                       // 14385
			clips = this.clips || [],                                                                                           // 14386
			clipAttr,                                                                                                           // 14387
			graph = this.graph,                                                                                                 // 14388
			area = this.area,                                                                                                   // 14389
			chartSizeMax = mathMax(chart.chartWidth, chart.chartHeight),                                                        // 14390
			zoneAxis = this.zoneAxis || 'y',                                                                                    // 14391
			axis = this[zoneAxis + 'Axis'],                                                                                     // 14392
			extremes,                                                                                                           // 14393
			reversed = axis.reversed,                                                                                           // 14394
			inverted = chart.inverted,                                                                                          // 14395
			horiz = axis.horiz,                                                                                                 // 14396
			pxRange,                                                                                                            // 14397
			pxPosMin,                                                                                                           // 14398
			pxPosMax,                                                                                                           // 14399
			ignoreZones = false;                                                                                                // 14400
                                                                                                                       // 14401
		if (zones.length && (graph || area)) {                                                                               // 14402
			// The use of the Color Threshold assumes there are no gaps                                                         // 14403
			// so it is safe to hide the original graph and area                                                                // 14404
			if (graph) {                                                                                                        // 14405
				graph.hide();                                                                                                      // 14406
			}                                                                                                                   // 14407
			if (area) {                                                                                                         // 14408
				area.hide();                                                                                                       // 14409
			}                                                                                                                   // 14410
                                                                                                                       // 14411
			// Create the clips                                                                                                 // 14412
			extremes = axis.getExtremes();                                                                                      // 14413
			each(zones, function (threshold, i) {                                                                               // 14414
                                                                                                                       // 14415
				translatedFrom = reversed ?                                                                                        // 14416
					(horiz ? chart.plotWidth : 0) :                                                                                   // 14417
					(horiz ? 0 : axis.toPixels(extremes.min));                                                                        // 14418
				translatedFrom = mathMin(mathMax(pick(translatedTo, translatedFrom), 0), chartSizeMax);                            // 14419
				translatedTo = mathMin(mathMax(mathRound(axis.toPixels(pick(threshold.value, extremes.max), true)), 0), chartSizeMax);
				                                                                                                                   // 14421
				if (ignoreZones) {                                                                                                 // 14422
					translatedFrom = translatedTo = axis.toPixels(extremes.max);                                                      // 14423
				}                                                                                                                  // 14424
                                                                                                                       // 14425
				pxRange = Math.abs(translatedFrom - translatedTo);                                                                 // 14426
				pxPosMin = mathMin(translatedFrom, translatedTo);                                                                  // 14427
				pxPosMax = mathMax(translatedFrom, translatedTo);                                                                  // 14428
				if (axis.isXAxis) {                                                                                                // 14429
					clipAttr = {                                                                                                      // 14430
						x: inverted ? pxPosMax : pxPosMin,                                                                               // 14431
						y: 0,                                                                                                            // 14432
						width: pxRange,                                                                                                  // 14433
						height: chartSizeMax                                                                                             // 14434
					};                                                                                                                // 14435
					if (!horiz) {                                                                                                     // 14436
						clipAttr.x = chart.plotHeight - clipAttr.x;                                                                      // 14437
					}                                                                                                                 // 14438
				} else {                                                                                                           // 14439
					clipAttr = {                                                                                                      // 14440
						x: 0,                                                                                                            // 14441
						y: inverted ? pxPosMax : pxPosMin,                                                                               // 14442
						width: chartSizeMax,                                                                                             // 14443
						height: pxRange                                                                                                  // 14444
					};					                                                                                                           // 14445
					if (horiz) {                                                                                                      // 14446
						clipAttr.y = chart.plotWidth - clipAttr.y;                                                                       // 14447
					}                                                                                                                 // 14448
				}                                                                                                                  // 14449
                                                                                                                       // 14450
				/// VML SUPPPORT                                                                                                   // 14451
				if (chart.inverted && renderer.isVML) {                                                                            // 14452
					if (axis.isXAxis) {			                                                                                            // 14453
						clipAttr = {                                                                                                     // 14454
							x: 0,                                                                                                           // 14455
							y: reversed ? pxPosMin : pxPosMax,                                                                              // 14456
							height: clipAttr.width,                                                                                         // 14457
							width: chart.chartWidth                                                                                         // 14458
						};		                                                                                                             // 14459
					} else {				                                                                                                      // 14460
						clipAttr = {                                                                                                     // 14461
							x: clipAttr.y - chart.plotLeft - chart.spacingBox.x,                                                            // 14462
							y: 0,                                                                                                           // 14463
							width: clipAttr.height,                                                                                         // 14464
							height: chart.chartHeight                                                                                       // 14465
						};	                                                                                                              // 14466
					}				                                                                                                             // 14467
				}                                                                                                                  // 14468
				/// END OF VML SUPPORT                                                                                             // 14469
                                                                                                                       // 14470
				if (clips[i]) {                                                                                                    // 14471
					clips[i].animate(clipAttr);                                                                                       // 14472
				} else {                                                                                                           // 14473
					clips[i] = renderer.clipRect(clipAttr);                                                                           // 14474
                                                                                                                       // 14475
					if (graph) {                                                                                                      // 14476
						series['zoneGraph' + i].clip(clips[i]);                                                                          // 14477
					}                                                                                                                 // 14478
                                                                                                                       // 14479
					if (area) {                                                                                                       // 14480
						series['zoneArea' + i].clip(clips[i]);                                                                           // 14481
					}                                                                                                                 // 14482
				}                                                                                                                  // 14483
				// if this zone extends out of the axis, ignore the others                                                         // 14484
				ignoreZones = threshold.value > extremes.max;                                                                      // 14485
			});                                                                                                                 // 14486
			this.clips = clips;                                                                                                 // 14487
		}                                                                                                                    // 14488
	},                                                                                                                    // 14489
                                                                                                                       // 14490
	/**                                                                                                                   // 14491
	 * Initialize and perform group inversion on series.group and series.markerGroup                                      // 14492
	 */                                                                                                                   // 14493
	invertGroups: function () {                                                                                           // 14494
		var series = this,                                                                                                   // 14495
			chart = series.chart;                                                                                               // 14496
                                                                                                                       // 14497
		// Pie, go away (#1736)                                                                                              // 14498
		if (!series.xAxis) {                                                                                                 // 14499
			return;                                                                                                             // 14500
		}                                                                                                                    // 14501
                                                                                                                       // 14502
		// A fixed size is needed for inversion to work                                                                      // 14503
		function setInvert() {                                                                                               // 14504
			var size = {                                                                                                        // 14505
				width: series.yAxis.len,                                                                                           // 14506
				height: series.xAxis.len                                                                                           // 14507
			};                                                                                                                  // 14508
                                                                                                                       // 14509
			each(['group', 'markerGroup'], function (groupName) {                                                               // 14510
				if (series[groupName]) {                                                                                           // 14511
					series[groupName].attr(size).invert();                                                                            // 14512
				}                                                                                                                  // 14513
			});                                                                                                                 // 14514
		}                                                                                                                    // 14515
                                                                                                                       // 14516
		addEvent(chart, 'resize', setInvert); // do it on resize                                                             // 14517
		addEvent(series, 'destroy', function () {                                                                            // 14518
			removeEvent(chart, 'resize', setInvert);                                                                            // 14519
		});                                                                                                                  // 14520
                                                                                                                       // 14521
		// Do it now                                                                                                         // 14522
		setInvert(); // do it now                                                                                            // 14523
                                                                                                                       // 14524
		// On subsequent render and redraw, just do setInvert without setting up events again                                // 14525
		series.invertGroups = setInvert;                                                                                     // 14526
	},                                                                                                                    // 14527
                                                                                                                       // 14528
	/**                                                                                                                   // 14529
	 * General abstraction for creating plot groups like series.group, series.dataLabelsGroup and                         // 14530
	 * series.markerGroup. On subsequent calls, the group will only be adjusted to the updated plot size.                 // 14531
	 */                                                                                                                   // 14532
	plotGroup: function (prop, name, visibility, zIndex, parent) {                                                        // 14533
		var group = this[prop],                                                                                              // 14534
			isNew = !group;                                                                                                     // 14535
                                                                                                                       // 14536
		// Generate it on first call                                                                                         // 14537
		if (isNew) {                                                                                                         // 14538
			this[prop] = group = this.chart.renderer.g(name)                                                                    // 14539
				.attr({                                                                                                            // 14540
					visibility: visibility,                                                                                           // 14541
					zIndex: zIndex || 0.1 // IE8 needs this                                                                           // 14542
				})                                                                                                                 // 14543
				.add(parent);                                                                                                      // 14544
		}                                                                                                                    // 14545
		// Place it on first and subsequent (redraw) calls                                                                   // 14546
		group[isNew ? 'attr' : 'animate'](this.getPlotBox());                                                                // 14547
		return group;                                                                                                        // 14548
	},                                                                                                                    // 14549
                                                                                                                       // 14550
	/**                                                                                                                   // 14551
	 * Get the translation and scale for the plot area of this series                                                     // 14552
	 */                                                                                                                   // 14553
	getPlotBox: function () {                                                                                             // 14554
		var chart = this.chart,                                                                                              // 14555
			xAxis = this.xAxis,                                                                                                 // 14556
			yAxis = this.yAxis;                                                                                                 // 14557
                                                                                                                       // 14558
		// Swap axes for inverted (#2339)                                                                                    // 14559
		if (chart.inverted) {                                                                                                // 14560
			xAxis = yAxis;                                                                                                      // 14561
			yAxis = this.xAxis;                                                                                                 // 14562
		}                                                                                                                    // 14563
		return {                                                                                                             // 14564
			translateX: xAxis ? xAxis.left : chart.plotLeft,                                                                    // 14565
			translateY: yAxis ? yAxis.top : chart.plotTop,                                                                      // 14566
			scaleX: 1, // #1623                                                                                                 // 14567
			scaleY: 1                                                                                                           // 14568
		};                                                                                                                   // 14569
	},                                                                                                                    // 14570
                                                                                                                       // 14571
	/**                                                                                                                   // 14572
	 * Render the graph and markers                                                                                       // 14573
	 */                                                                                                                   // 14574
	render: function () {                                                                                                 // 14575
		var series = this,                                                                                                   // 14576
			chart = series.chart,                                                                                               // 14577
			group,                                                                                                              // 14578
			options = series.options,                                                                                           // 14579
			animation = options.animation,                                                                                      // 14580
			// Animation doesn't work in IE8 quirks when the group div is hidden,                                               // 14581
			// and looks bad in other oldIE                                                                                     // 14582
			animDuration = (animation && !!series.animate && chart.renderer.isSVG && pick(animation.duration, 500)) || 0,       // 14583
			visibility = series.visible ? VISIBLE : HIDDEN,                                                                     // 14584
			zIndex = options.zIndex,                                                                                            // 14585
			hasRendered = series.hasRendered,                                                                                   // 14586
			chartSeriesGroup = chart.seriesGroup;                                                                               // 14587
                                                                                                                       // 14588
		// the group                                                                                                         // 14589
		group = series.plotGroup(                                                                                            // 14590
			'group',                                                                                                            // 14591
			'series',                                                                                                           // 14592
			visibility,                                                                                                         // 14593
			zIndex,                                                                                                             // 14594
			chartSeriesGroup                                                                                                    // 14595
		);                                                                                                                   // 14596
                                                                                                                       // 14597
		series.markerGroup = series.plotGroup(                                                                               // 14598
			'markerGroup',                                                                                                      // 14599
			'markers',                                                                                                          // 14600
			visibility,                                                                                                         // 14601
			zIndex,                                                                                                             // 14602
			chartSeriesGroup                                                                                                    // 14603
		);                                                                                                                   // 14604
                                                                                                                       // 14605
		// initiate the animation                                                                                            // 14606
		if (animDuration) {                                                                                                  // 14607
			series.animate(true);                                                                                               // 14608
		}                                                                                                                    // 14609
                                                                                                                       // 14610
		// cache attributes for shapes                                                                                       // 14611
		series.getAttribs();                                                                                                 // 14612
                                                                                                                       // 14613
		// SVGRenderer needs to know this before drawing elements (#1089, #1795)                                             // 14614
		group.inverted = series.isCartesian ? chart.inverted : false;                                                        // 14615
                                                                                                                       // 14616
		// draw the graph if any                                                                                             // 14617
		if (series.drawGraph) {                                                                                              // 14618
			series.drawGraph();                                                                                                 // 14619
			series.applyZones();                                                                                                // 14620
		}                                                                                                                    // 14621
                                                                                                                       // 14622
		each(series.points, function (point) {                                                                               // 14623
			if (point.redraw) {                                                                                                 // 14624
				point.redraw();                                                                                                    // 14625
			}                                                                                                                   // 14626
		});                                                                                                                  // 14627
                                                                                                                       // 14628
		// draw the data labels (inn pies they go before the points)                                                         // 14629
		if (series.drawDataLabels) {                                                                                         // 14630
			series.drawDataLabels();                                                                                            // 14631
		}                                                                                                                    // 14632
                                                                                                                       // 14633
		// draw the points                                                                                                   // 14634
		if (series.visible) {                                                                                                // 14635
			series.drawPoints();                                                                                                // 14636
		}                                                                                                                    // 14637
                                                                                                                       // 14638
                                                                                                                       // 14639
		// draw the mouse tracking area                                                                                      // 14640
		if (series.drawTracker && series.options.enableMouseTracking !== false) {                                            // 14641
			series.drawTracker();                                                                                               // 14642
		}                                                                                                                    // 14643
                                                                                                                       // 14644
		// Handle inverted series and tracker groups                                                                         // 14645
		if (chart.inverted) {                                                                                                // 14646
			series.invertGroups();                                                                                              // 14647
		}                                                                                                                    // 14648
                                                                                                                       // 14649
		// Initial clipping, must be defined after inverting groups for VML. Applies to columns etc. (#3839).                // 14650
		if (options.clip !== false && !series.sharedClipKey && !hasRendered) {                                               // 14651
			group.clip(chart.clipRect);                                                                                         // 14652
		}                                                                                                                    // 14653
                                                                                                                       // 14654
		// Run the animation                                                                                                 // 14655
		if (animDuration) {                                                                                                  // 14656
			series.animate();                                                                                                   // 14657
		}                                                                                                                    // 14658
                                                                                                                       // 14659
		// Call the afterAnimate function on animation complete (but don't overwrite the animation.complete option           // 14660
		// which should be available to the user).                                                                           // 14661
		if (!hasRendered) {                                                                                                  // 14662
			if (animDuration) {                                                                                                 // 14663
				series.animationTimeout = setTimeout(function () {                                                                 // 14664
					series.afterAnimate();                                                                                            // 14665
				}, animDuration);                                                                                                  // 14666
			} else {                                                                                                            // 14667
				series.afterAnimate();                                                                                             // 14668
			}                                                                                                                   // 14669
		}                                                                                                                    // 14670
                                                                                                                       // 14671
		series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see                        // 14672
		// (See #322) series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see          // 14673
		series.hasRendered = true;                                                                                           // 14674
	},                                                                                                                    // 14675
                                                                                                                       // 14676
	/**                                                                                                                   // 14677
	 * Redraw the series after an update in the axes.                                                                     // 14678
	 */                                                                                                                   // 14679
	redraw: function () {                                                                                                 // 14680
		var series = this,                                                                                                   // 14681
			chart = series.chart,                                                                                               // 14682
			wasDirtyData = series.isDirtyData, // cache it here as it is set to false in render, but used after                 // 14683
			wasDirty = series.isDirty,                                                                                          // 14684
			group = series.group,                                                                                               // 14685
			xAxis = series.xAxis,                                                                                               // 14686
			yAxis = series.yAxis;                                                                                               // 14687
                                                                                                                       // 14688
		// reposition on resize                                                                                              // 14689
		if (group) {                                                                                                         // 14690
			if (chart.inverted) {                                                                                               // 14691
				group.attr({                                                                                                       // 14692
					width: chart.plotWidth,                                                                                           // 14693
					height: chart.plotHeight                                                                                          // 14694
				});                                                                                                                // 14695
			}                                                                                                                   // 14696
                                                                                                                       // 14697
			group.animate({                                                                                                     // 14698
				translateX: pick(xAxis && xAxis.left, chart.plotLeft),                                                             // 14699
				translateY: pick(yAxis && yAxis.top, chart.plotTop)                                                                // 14700
			});                                                                                                                 // 14701
		}                                                                                                                    // 14702
                                                                                                                       // 14703
		series.translate();                                                                                                  // 14704
		series.render();                                                                                                     // 14705
		if (wasDirtyData) {                                                                                                  // 14706
			fireEvent(series, 'updatedData');                                                                                   // 14707
		}                                                                                                                    // 14708
		if (wasDirty || wasDirtyData) {			// #3945 recalculate the kdtree when dirty                                         // 14709
			delete this.kdTree; // #3868 recalculate the kdtree with dirty data                                                 // 14710
		}                                                                                                                    // 14711
	},                                                                                                                    // 14712
                                                                                                                       // 14713
	/**                                                                                                                   // 14714
	 * KD Tree && PointSearching Implementation                                                                           // 14715
	 */                                                                                                                   // 14716
                                                                                                                       // 14717
	kdDimensions: 1,                                                                                                      // 14718
	kdAxisArray: ['clientX', 'plotY'],                                                                                    // 14719
                                                                                                                       // 14720
	searchPoint: function (e, compareX) {                                                                                 // 14721
		var series = this,                                                                                                   // 14722
			xAxis = series.xAxis,                                                                                               // 14723
			yAxis = series.yAxis,                                                                                               // 14724
			inverted = series.chart.inverted;                                                                                   // 14725
		                                                                                                                     // 14726
		return this.searchKDTree({                                                                                           // 14727
			clientX: inverted ? xAxis.len - e.chartY + xAxis.pos : e.chartX - xAxis.pos,                                        // 14728
			plotY: inverted ? yAxis.len - e.chartX + yAxis.pos : e.chartY - yAxis.pos                                           // 14729
		}, compareX);                                                                                                        // 14730
	},                                                                                                                    // 14731
                                                                                                                       // 14732
	buildKDTree: function () {                                                                                            // 14733
		var series = this,                                                                                                   // 14734
			dimensions = series.kdDimensions;                                                                                   // 14735
                                                                                                                       // 14736
		// Internal function                                                                                                 // 14737
		function _kdtree(points, depth, dimensions) {                                                                        // 14738
			var axis, median, length = points && points.length;                                                                 // 14739
                                                                                                                       // 14740
			if (length) {                                                                                                       // 14741
                                                                                                                       // 14742
				// alternate between the axis                                                                                      // 14743
				axis = series.kdAxisArray[depth % dimensions];                                                                     // 14744
                                                                                                                       // 14745
				// sort point array                                                                                                // 14746
				points.sort(function(a, b) {                                                                                       // 14747
					return a[axis] - b[axis];                                                                                         // 14748
				});                                                                                                                // 14749
			                                                                                                                    // 14750
				median = Math.floor(length / 2);                                                                                   // 14751
				                                                                                                                   // 14752
				// build and return nod                                                                                            // 14753
				return {                                                                                                           // 14754
					point: points[median],                                                                                            // 14755
					left: _kdtree(points.slice(0, median), depth + 1, dimensions),                                                    // 14756
					right: _kdtree(points.slice(median + 1), depth + 1, dimensions)                                                   // 14757
				};                                                                                                                 // 14758
			                                                                                                                    // 14759
			}                                                                                                                   // 14760
		}                                                                                                                    // 14761
                                                                                                                       // 14762
		// Start the recursive build process with a clone of the points array and null points filtered out (#3873)           // 14763
		function startRecursive() {                                                                                          // 14764
			var points = grep(series.points, function (point) {                                                                 // 14765
				return point.y !== null;                                                                                           // 14766
			});                                                                                                                 // 14767
                                                                                                                       // 14768
			series.kdTree = _kdtree(points, dimensions, dimensions);                                                            // 14769
		}                                                                                                                    // 14770
		delete series.kdTree;                                                                                                // 14771
		                                                                                                                     // 14772
		if (series.options.kdSync) {  // For testing tooltips, don't build async                                             // 14773
			startRecursive();                                                                                                   // 14774
		} else {                                                                                                             // 14775
			setTimeout(startRecursive);                                                                                         // 14776
		}                                                                                                                    // 14777
	},                                                                                                                    // 14778
                                                                                                                       // 14779
	searchKDTree: function (point, compareX) {                                                                            // 14780
		var series = this,                                                                                                   // 14781
			kdX = this.kdAxisArray[0],                                                                                          // 14782
			kdY = this.kdAxisArray[1],                                                                                          // 14783
			kdComparer = compareX ? 'distX' : 'dist';                                                                           // 14784
                                                                                                                       // 14785
		// Set the one and two dimensional distance on the point object                                                      // 14786
		function setDistance(p1, p2) {                                                                                       // 14787
			var x = (defined(p1[kdX]) && defined(p2[kdX])) ? Math.pow(p1[kdX] - p2[kdX], 2) : null,                             // 14788
				y = (defined(p1[kdY]) && defined(p2[kdY])) ? Math.pow(p1[kdY] - p2[kdY], 2) : null,                                // 14789
				r = (x || 0) + (y || 0);                                                                                           // 14790
                                                                                                                       // 14791
			p2.dist = defined(r) ? Math.sqrt(r) : Number.MAX_VALUE;                                                             // 14792
			p2.distX = defined(x) ? Math.sqrt(x) : Number.MAX_VALUE;                                                            // 14793
		}                                                                                                                    // 14794
		function _search(search, tree, depth, dimensions) {                                                                  // 14795
			var point = tree.point,                                                                                             // 14796
				axis = series.kdAxisArray[depth % dimensions],                                                                     // 14797
				tdist,                                                                                                             // 14798
				sideA,                                                                                                             // 14799
				sideB,                                                                                                             // 14800
				ret = point,                                                                                                       // 14801
				nPoint1,                                                                                                           // 14802
				nPoint2;                                                                                                           // 14803
			                                                                                                                    // 14804
			setDistance(search, point);                                                                                         // 14805
                                                                                                                       // 14806
			// Pick side based on distance to splitting point                                                                   // 14807
			tdist = search[axis] - point[axis];                                                                                 // 14808
			sideA = tdist < 0 ? 'left' : 'right';                                                                               // 14809
			sideB = tdist < 0 ? 'right' : 'left';                                                                               // 14810
                                                                                                                       // 14811
			// End of tree                                                                                                      // 14812
			if (tree[sideA]) {                                                                                                  // 14813
				nPoint1 =_search(search, tree[sideA], depth + 1, dimensions);                                                      // 14814
                                                                                                                       // 14815
				ret = (nPoint1[kdComparer] < ret[kdComparer] ? nPoint1 : point);                                                   // 14816
			}                                                                                                                   // 14817
			if (tree[sideB]) {                                                                                                  // 14818
				// compare distance to current best to splitting point to decide wether to check side B or not                     // 14819
				if (Math.sqrt(tdist * tdist) < ret[kdComparer]) {                                                                  // 14820
					nPoint2 = _search(search, tree[sideB], depth + 1, dimensions);                                                    // 14821
					ret = (nPoint2[kdComparer] < ret[kdComparer] ? nPoint2 : ret);                                                    // 14822
				}                                                                                                                  // 14823
			}                                                                                                                   // 14824
			                                                                                                                    // 14825
			return ret;                                                                                                         // 14826
		}                                                                                                                    // 14827
                                                                                                                       // 14828
		if (!this.kdTree) {                                                                                                  // 14829
			this.buildKDTree();                                                                                                 // 14830
		}                                                                                                                    // 14831
                                                                                                                       // 14832
		if (this.kdTree) {                                                                                                   // 14833
			return _search(point,                                                                                               // 14834
				this.kdTree, this.kdDimensions, this.kdDimensions);                                                                // 14835
		}                                                                                                                    // 14836
	}                                                                                                                     // 14837
                                                                                                                       // 14838
}; // end Series prototype                                                                                             // 14839
                                                                                                                       // 14840
/**                                                                                                                    // 14841
 * The class for stack items                                                                                           // 14842
 */                                                                                                                    // 14843
function StackItem(axis, options, isNegative, x, stackOption) {                                                        // 14844
	                                                                                                                      // 14845
	var inverted = axis.chart.inverted;                                                                                   // 14846
                                                                                                                       // 14847
	this.axis = axis;                                                                                                     // 14848
                                                                                                                       // 14849
	// Tells if the stack is negative                                                                                     // 14850
	this.isNegative = isNegative;                                                                                         // 14851
                                                                                                                       // 14852
	// Save the options to be able to style the label                                                                     // 14853
	this.options = options;                                                                                               // 14854
                                                                                                                       // 14855
	// Save the x value to be able to position the label later                                                            // 14856
	this.x = x;                                                                                                           // 14857
                                                                                                                       // 14858
	// Initialize total value                                                                                             // 14859
	this.total = null;                                                                                                    // 14860
                                                                                                                       // 14861
	// This will keep each points' extremes stored by series.index and point index                                        // 14862
	this.points = {};                                                                                                     // 14863
                                                                                                                       // 14864
	// Save the stack option on the series configuration object, and whether to treat it as percent                       // 14865
	this.stack = stackOption;                                                                                             // 14866
                                                                                                                       // 14867
	// The align options and text align varies on whether the stack is negative and                                       // 14868
	// if the chart is inverted or not.                                                                                   // 14869
	// First test the user supplied value, then use the dynamic.                                                          // 14870
	this.alignOptions = {                                                                                                 // 14871
		align: options.align || (inverted ? (isNegative ? 'left' : 'right') : 'center'),                                     // 14872
		verticalAlign: options.verticalAlign || (inverted ? 'middle' : (isNegative ? 'bottom' : 'top')),                     // 14873
		y: pick(options.y, inverted ? 4 : (isNegative ? 14 : -6)),                                                           // 14874
		x: pick(options.x, inverted ? (isNegative ? -6 : 6) : 0)                                                             // 14875
	};                                                                                                                    // 14876
                                                                                                                       // 14877
	this.textAlign = options.textAlign || (inverted ? (isNegative ? 'right' : 'left') : 'center');                        // 14878
}                                                                                                                      // 14879
                                                                                                                       // 14880
StackItem.prototype = {                                                                                                // 14881
	destroy: function () {                                                                                                // 14882
		destroyObjectProperties(this, this.axis);                                                                            // 14883
	},                                                                                                                    // 14884
                                                                                                                       // 14885
	/**                                                                                                                   // 14886
	 * Renders the stack total label and adds it to the stack label group.                                                // 14887
	 */                                                                                                                   // 14888
	render: function (group) {                                                                                            // 14889
		var options = this.options,                                                                                          // 14890
			formatOption = options.format,                                                                                      // 14891
			str = formatOption ?                                                                                                // 14892
				format(formatOption, this) :                                                                                       // 14893
				options.formatter.call(this);  // format the text in the label                                                     // 14894
                                                                                                                       // 14895
		// Change the text to reflect the new total and set visibility to hidden in case the serie is hidden                 // 14896
		if (this.label) {                                                                                                    // 14897
			this.label.attr({text: str, visibility: HIDDEN});                                                                   // 14898
		// Create new label                                                                                                  // 14899
		} else {                                                                                                             // 14900
			this.label =                                                                                                        // 14901
				this.axis.chart.renderer.text(str, null, null, options.useHTML)		// dummy positions, actual position updated with setOffset method in columnseries
					.css(options.style)				// apply style                                                                             // 14903
					.attr({                                                                                                           // 14904
						align: this.textAlign,				// fix the text-anchor                                                                 // 14905
						rotation: options.rotation,	// rotation                                                                          // 14906
						visibility: HIDDEN					// hidden until setOffset is called                                                       // 14907
					})				                                                                                                            // 14908
					.add(group);							// add to the labels-group                                                                     // 14909
		}                                                                                                                    // 14910
	},                                                                                                                    // 14911
                                                                                                                       // 14912
	/**                                                                                                                   // 14913
	 * Sets the offset that the stack has from the x value and repositions the label.                                     // 14914
	 */                                                                                                                   // 14915
	setOffset: function (xOffset, xWidth) {                                                                               // 14916
		var stackItem = this,                                                                                                // 14917
			axis = stackItem.axis,                                                                                              // 14918
			chart = axis.chart,                                                                                                 // 14919
			inverted = chart.inverted,                                                                                          // 14920
			reversed = axis.reversed,                                                                                           // 14921
			neg = (this.isNegative && !reversed) || (!this.isNegative && reversed), // #4056                                    // 14922
			y = axis.translate(axis.usePercentage ? 100 : this.total, 0, 0, 0, 1), // stack value translated mapped to chart coordinates
			yZero = axis.translate(0),						// stack origin                                                                     // 14924
			h = mathAbs(y - yZero),							// stack height                                                                       // 14925
			x = chart.xAxis[0].translate(this.x) + xOffset,	// stack x position                                                 // 14926
			plotHeight = chart.plotHeight,                                                                                      // 14927
			stackBox = {	// this is the box for the complete stack                                                              // 14928
				x: inverted ? (neg ? y : y - h) : x,                                                                               // 14929
				y: inverted ? plotHeight - x - xWidth : (neg ? (plotHeight - y - h) : plotHeight - y),                             // 14930
				width: inverted ? h : xWidth,                                                                                      // 14931
				height: inverted ? xWidth : h                                                                                      // 14932
			},                                                                                                                  // 14933
			label = this.label,                                                                                                 // 14934
			alignAttr;                                                                                                          // 14935
		                                                                                                                     // 14936
		if (label) {                                                                                                         // 14937
			label.align(this.alignOptions, null, stackBox);	// align the label to the box                                       // 14938
				                                                                                                                   // 14939
			// Set visibility (#678)                                                                                            // 14940
			alignAttr = label.alignAttr;                                                                                        // 14941
			label[this.options.crop === false || chart.isInsidePlot(alignAttr.x, alignAttr.y) ? 'show' : 'hide'](true);         // 14942
		}                                                                                                                    // 14943
	}                                                                                                                     // 14944
};                                                                                                                     // 14945
                                                                                                                       // 14946
                                                                                                                       // 14947
// Stacking methods defined on the Axis prototype                                                                      // 14948
                                                                                                                       // 14949
/**                                                                                                                    // 14950
 * Build the stacks from top down                                                                                      // 14951
 */                                                                                                                    // 14952
Axis.prototype.buildStacks = function () {                                                                             // 14953
	var series = this.series,                                                                                             // 14954
		reversedStacks = pick(this.options.reversedStacks, true),                                                            // 14955
		i = series.length;                                                                                                   // 14956
	if (!this.isXAxis) {                                                                                                  // 14957
		this.usePercentage = false;                                                                                          // 14958
		while (i--) {                                                                                                        // 14959
			series[reversedStacks ? i : series.length - i - 1].setStackedPoints();                                              // 14960
		}                                                                                                                    // 14961
		// Loop up again to compute percent stack                                                                            // 14962
		if (this.usePercentage) {                                                                                            // 14963
			for (i = 0; i < series.length; i++) {                                                                               // 14964
				series[i].setPercentStacks();                                                                                      // 14965
			}                                                                                                                   // 14966
		}                                                                                                                    // 14967
	}                                                                                                                     // 14968
};                                                                                                                     // 14969
                                                                                                                       // 14970
Axis.prototype.renderStackTotals = function () {                                                                       // 14971
	var axis = this,                                                                                                      // 14972
		chart = axis.chart,                                                                                                  // 14973
		renderer = chart.renderer,                                                                                           // 14974
		stacks = axis.stacks,                                                                                                // 14975
		stackKey,                                                                                                            // 14976
		oneStack,                                                                                                            // 14977
		stackCategory,                                                                                                       // 14978
		stackTotalGroup = axis.stackTotalGroup;                                                                              // 14979
                                                                                                                       // 14980
	// Create a separate group for the stack total labels                                                                 // 14981
	if (!stackTotalGroup) {                                                                                               // 14982
		axis.stackTotalGroup = stackTotalGroup =                                                                             // 14983
			renderer.g('stack-labels')                                                                                          // 14984
				.attr({                                                                                                            // 14985
					visibility: VISIBLE,                                                                                              // 14986
					zIndex: 6                                                                                                         // 14987
				})                                                                                                                 // 14988
				.add();                                                                                                            // 14989
	}                                                                                                                     // 14990
                                                                                                                       // 14991
	// plotLeft/Top will change when y axis gets wider so we need to translate the                                        // 14992
	// stackTotalGroup at every render call. See bug #506 and #516                                                        // 14993
	stackTotalGroup.translate(chart.plotLeft, chart.plotTop);                                                             // 14994
                                                                                                                       // 14995
	// Render each stack total                                                                                            // 14996
	for (stackKey in stacks) {                                                                                            // 14997
		oneStack = stacks[stackKey];                                                                                         // 14998
		for (stackCategory in oneStack) {                                                                                    // 14999
			oneStack[stackCategory].render(stackTotalGroup);                                                                    // 15000
		}                                                                                                                    // 15001
	}                                                                                                                     // 15002
};                                                                                                                     // 15003
                                                                                                                       // 15004
                                                                                                                       // 15005
// Stacking methods defnied for Series prototype                                                                       // 15006
                                                                                                                       // 15007
/**                                                                                                                    // 15008
 * Adds series' points value to corresponding stack                                                                    // 15009
 */                                                                                                                    // 15010
Series.prototype.setStackedPoints = function () {                                                                      // 15011
	if (!this.options.stacking || (this.visible !== true && this.chart.options.chart.ignoreHiddenSeries !== false)) {     // 15012
		return;                                                                                                              // 15013
	}                                                                                                                     // 15014
                                                                                                                       // 15015
	var series = this,                                                                                                    // 15016
		xData = series.processedXData,                                                                                       // 15017
		yData = series.processedYData,                                                                                       // 15018
		stackedYData = [],                                                                                                   // 15019
		yDataLength = yData.length,                                                                                          // 15020
		seriesOptions = series.options,                                                                                      // 15021
		threshold = seriesOptions.threshold,                                                                                 // 15022
		stackThreshold = seriesOptions.startFromThreshold ? threshold : 0,                                                   // 15023
		stackOption = seriesOptions.stack,                                                                                   // 15024
		stacking = seriesOptions.stacking,                                                                                   // 15025
		stackKey = series.stackKey,                                                                                          // 15026
		negKey = '-' + stackKey,                                                                                             // 15027
		negStacks = series.negStacks,                                                                                        // 15028
		yAxis = series.yAxis,                                                                                                // 15029
		stacks = yAxis.stacks,                                                                                               // 15030
		oldStacks = yAxis.oldStacks,                                                                                         // 15031
		isNegative,                                                                                                          // 15032
		stack,                                                                                                               // 15033
		other,                                                                                                               // 15034
		key,                                                                                                                 // 15035
		pointKey,                                                                                                            // 15036
		i,                                                                                                                   // 15037
		x,                                                                                                                   // 15038
		y;                                                                                                                   // 15039
                                                                                                                       // 15040
	// loop over the non-null y values and read them into a local array                                                   // 15041
	for (i = 0; i < yDataLength; i++) {                                                                                   // 15042
		x = xData[i];                                                                                                        // 15043
		y = yData[i];                                                                                                        // 15044
		pointKey = series.index + ',' + i;                                                                                   // 15045
                                                                                                                       // 15046
		// Read stacked values into a stack based on the x value,                                                            // 15047
		// the sign of y and the stack key. Stacking is also handled for null values (#739)                                  // 15048
		isNegative = negStacks && y < (stackThreshold ? 0 : threshold);                                                      // 15049
		key = isNegative ? negKey : stackKey;                                                                                // 15050
                                                                                                                       // 15051
		// Create empty object for this stack if it doesn't exist yet                                                        // 15052
		if (!stacks[key]) {                                                                                                  // 15053
			stacks[key] = {};                                                                                                   // 15054
		}                                                                                                                    // 15055
                                                                                                                       // 15056
		// Initialize StackItem for this x                                                                                   // 15057
		if (!stacks[key][x]) {                                                                                               // 15058
			if (oldStacks[key] && oldStacks[key][x]) {                                                                          // 15059
				stacks[key][x] = oldStacks[key][x];                                                                                // 15060
				stacks[key][x].total = null;                                                                                       // 15061
			} else {                                                                                                            // 15062
				stacks[key][x] = new StackItem(yAxis, yAxis.options.stackLabels, isNegative, x, stackOption);                      // 15063
			}                                                                                                                   // 15064
		}                                                                                                                    // 15065
                                                                                                                       // 15066
		// If the StackItem doesn't exist, create it first                                                                   // 15067
		stack = stacks[key][x];                                                                                              // 15068
		//stack.points[pointKey] = [stack.cum || stackThreshold];                                                            // 15069
		stack.points[pointKey] = [pick(stack.cum, stackThreshold)];                                                          // 15070
                                                                                                                       // 15071
		                                                                                                                     // 15072
                                                                                                                       // 15073
		// Add value to the stack total                                                                                      // 15074
		if (stacking === 'percent') {                                                                                        // 15075
                                                                                                                       // 15076
			// Percent stacked column, totals are the same for the positive and negative stacks                                 // 15077
			other = isNegative ? stackKey : negKey;                                                                             // 15078
			if (negStacks && stacks[other] && stacks[other][x]) {                                                               // 15079
				other = stacks[other][x];                                                                                          // 15080
				stack.total = other.total = mathMax(other.total, stack.total) + mathAbs(y) || 0;                                   // 15081
                                                                                                                       // 15082
			// Percent stacked areas                                                                                            // 15083
			} else {                                                                                                            // 15084
				stack.total = correctFloat(stack.total + (mathAbs(y) || 0));                                                       // 15085
			}                                                                                                                   // 15086
		} else {                                                                                                             // 15087
			stack.total = correctFloat(stack.total + (y || 0));                                                                 // 15088
		}                                                                                                                    // 15089
                                                                                                                       // 15090
		stack.cum = pick(stack.cum, stackThreshold) + (y || 0);                                                              // 15091
                                                                                                                       // 15092
		stack.points[pointKey].push(stack.cum);                                                                              // 15093
		stackedYData[i] = stack.cum;                                                                                         // 15094
                                                                                                                       // 15095
	}                                                                                                                     // 15096
                                                                                                                       // 15097
	if (stacking === 'percent') {                                                                                         // 15098
		yAxis.usePercentage = true;                                                                                          // 15099
	}                                                                                                                     // 15100
                                                                                                                       // 15101
	this.stackedYData = stackedYData; // To be used in getExtremes                                                        // 15102
                                                                                                                       // 15103
	// Reset old stacks                                                                                                   // 15104
	yAxis.oldStacks = {};                                                                                                 // 15105
};                                                                                                                     // 15106
                                                                                                                       // 15107
/**                                                                                                                    // 15108
 * Iterate over all stacks and compute the absolute values to percent                                                  // 15109
 */                                                                                                                    // 15110
Series.prototype.setPercentStacks = function () {                                                                      // 15111
	var series = this,                                                                                                    // 15112
		stackKey = series.stackKey,                                                                                          // 15113
		stacks = series.yAxis.stacks,                                                                                        // 15114
		processedXData = series.processedXData;                                                                              // 15115
                                                                                                                       // 15116
	each([stackKey, '-' + stackKey], function (key) {                                                                     // 15117
		var i = processedXData.length,                                                                                       // 15118
			x,                                                                                                                  // 15119
			stack,                                                                                                              // 15120
			pointExtremes,                                                                                                      // 15121
			totalFactor;                                                                                                        // 15122
                                                                                                                       // 15123
		while (i--) {                                                                                                        // 15124
			x = processedXData[i];                                                                                              // 15125
			stack = stacks[key] && stacks[key][x];                                                                              // 15126
			pointExtremes = stack && stack.points[series.index + ',' + i];                                                      // 15127
			if (pointExtremes) {                                                                                                // 15128
				totalFactor = stack.total ? 100 / stack.total : 0;                                                                 // 15129
				pointExtremes[0] = correctFloat(pointExtremes[0] * totalFactor); // Y bottom value                                 // 15130
				pointExtremes[1] = correctFloat(pointExtremes[1] * totalFactor); // Y value                                        // 15131
				series.stackedYData[i] = pointExtremes[1];                                                                         // 15132
			}                                                                                                                   // 15133
		}                                                                                                                    // 15134
	});                                                                                                                   // 15135
};                                                                                                                     // 15136
                                                                                                                       // 15137
// Extend the Chart prototype for dynamic methods                                                                      // 15138
extend(Chart.prototype, {                                                                                              // 15139
                                                                                                                       // 15140
	/**                                                                                                                   // 15141
	 * Add a series dynamically after  time                                                                               // 15142
	 *                                                                                                                    // 15143
	 * @param {Object} options The config options                                                                         // 15144
	 * @param {Boolean} redraw Whether to redraw the chart after adding. Defaults to true.                                // 15145
	 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation                             // 15146
	 *    configuration                                                                                                   // 15147
	 *                                                                                                                    // 15148
	 * @return {Object} series The newly created series object                                                            // 15149
	 */                                                                                                                   // 15150
	addSeries: function (options, redraw, animation) {                                                                    // 15151
		var series,                                                                                                          // 15152
			chart = this;                                                                                                       // 15153
                                                                                                                       // 15154
		if (options) {                                                                                                       // 15155
			redraw = pick(redraw, true); // defaults to true                                                                    // 15156
                                                                                                                       // 15157
			fireEvent(chart, 'addSeries', { options: options }, function () {                                                   // 15158
				series = chart.initSeries(options);                                                                                // 15159
                                                                                                                       // 15160
				chart.isDirtyLegend = true; // the series array is out of sync with the display                                    // 15161
				chart.linkSeries();                                                                                                // 15162
				if (redraw) {                                                                                                      // 15163
					chart.redraw(animation);                                                                                          // 15164
				}                                                                                                                  // 15165
			});                                                                                                                 // 15166
		}                                                                                                                    // 15167
                                                                                                                       // 15168
		return series;                                                                                                       // 15169
	},                                                                                                                    // 15170
                                                                                                                       // 15171
	/**                                                                                                                   // 15172
     * Add an axis to the chart                                                                                        // 15173
     * @param {Object} options The axis option                                                                         // 15174
     * @param {Boolean} isX Whether it is an X axis or a value axis                                                    // 15175
     */                                                                                                                // 15176
	addAxis: function (options, isX, redraw, animation) {                                                                 // 15177
		var key = isX ? 'xAxis' : 'yAxis',                                                                                   // 15178
			chartOptions = this.options,                                                                                        // 15179
			axis;                                                                                                               // 15180
                                                                                                                       // 15181
		/*jslint unused: false*/                                                                                             // 15182
		axis = new Axis(this, merge(options, {                                                                               // 15183
			index: this[key].length,                                                                                            // 15184
			isX: isX                                                                                                            // 15185
		}));                                                                                                                 // 15186
		/*jslint unused: true*/                                                                                              // 15187
                                                                                                                       // 15188
		// Push the new axis options to the chart options                                                                    // 15189
		chartOptions[key] = splat(chartOptions[key] || {});                                                                  // 15190
		chartOptions[key].push(options);                                                                                     // 15191
                                                                                                                       // 15192
		if (pick(redraw, true)) {                                                                                            // 15193
			this.redraw(animation);                                                                                             // 15194
		}                                                                                                                    // 15195
	},                                                                                                                    // 15196
                                                                                                                       // 15197
	/**                                                                                                                   // 15198
	 * Dim the chart and show a loading text or symbol                                                                    // 15199
	 * @param {String} str An optional text to show in the loading label instead of the default one                       // 15200
	 */                                                                                                                   // 15201
	showLoading: function (str) {                                                                                         // 15202
		var chart = this,                                                                                                    // 15203
			options = chart.options,                                                                                            // 15204
			loadingDiv = chart.loadingDiv,                                                                                      // 15205
			loadingOptions = options.loading,                                                                                   // 15206
			setLoadingSize = function () {                                                                                      // 15207
				if (loadingDiv) {                                                                                                  // 15208
					css(loadingDiv, {                                                                                                 // 15209
						left: chart.plotLeft + PX,                                                                                       // 15210
						top: chart.plotTop + PX,                                                                                         // 15211
						width: chart.plotWidth + PX,                                                                                     // 15212
						height: chart.plotHeight + PX                                                                                    // 15213
					});                                                                                                               // 15214
				}                                                                                                                  // 15215
			};                                                                                                                  // 15216
                                                                                                                       // 15217
		// create the layer at the first call                                                                                // 15218
		if (!loadingDiv) {                                                                                                   // 15219
			chart.loadingDiv = loadingDiv = createElement(DIV, {                                                                // 15220
				className: PREFIX + 'loading'                                                                                      // 15221
			}, extend(loadingOptions.style, {                                                                                   // 15222
				zIndex: 10,                                                                                                        // 15223
				display: NONE                                                                                                      // 15224
			}), chart.container);                                                                                               // 15225
                                                                                                                       // 15226
			chart.loadingSpan = createElement(                                                                                  // 15227
				'span',                                                                                                            // 15228
				null,                                                                                                              // 15229
				loadingOptions.labelStyle,                                                                                         // 15230
				loadingDiv                                                                                                         // 15231
			);                                                                                                                  // 15232
			addEvent(chart, 'redraw', setLoadingSize); // #1080                                                                 // 15233
		}                                                                                                                    // 15234
                                                                                                                       // 15235
		// update text                                                                                                       // 15236
		chart.loadingSpan.innerHTML = str || options.lang.loading;                                                           // 15237
                                                                                                                       // 15238
		// show it                                                                                                           // 15239
		if (!chart.loadingShown) {                                                                                           // 15240
			css(loadingDiv, {                                                                                                   // 15241
				opacity: 0,                                                                                                        // 15242
				display: ''				                                                                                                    // 15243
			});                                                                                                                 // 15244
			animate(loadingDiv, {                                                                                               // 15245
				opacity: loadingOptions.style.opacity                                                                              // 15246
			}, {                                                                                                                // 15247
				duration: loadingOptions.showDuration || 0                                                                         // 15248
			});                                                                                                                 // 15249
			chart.loadingShown = true;                                                                                          // 15250
		}                                                                                                                    // 15251
		setLoadingSize();                                                                                                    // 15252
	},                                                                                                                    // 15253
                                                                                                                       // 15254
	/**                                                                                                                   // 15255
	 * Hide the loading layer                                                                                             // 15256
	 */                                                                                                                   // 15257
	hideLoading: function () {                                                                                            // 15258
		var options = this.options,                                                                                          // 15259
			loadingDiv = this.loadingDiv;                                                                                       // 15260
                                                                                                                       // 15261
		if (loadingDiv) {                                                                                                    // 15262
			animate(loadingDiv, {                                                                                               // 15263
				opacity: 0                                                                                                         // 15264
			}, {                                                                                                                // 15265
				duration: options.loading.hideDuration || 100,                                                                     // 15266
				complete: function () {                                                                                            // 15267
					css(loadingDiv, { display: NONE });                                                                               // 15268
				}                                                                                                                  // 15269
			});                                                                                                                 // 15270
		}                                                                                                                    // 15271
		this.loadingShown = false;                                                                                           // 15272
	}                                                                                                                     // 15273
});                                                                                                                    // 15274
                                                                                                                       // 15275
// extend the Point prototype for dynamic methods                                                                      // 15276
extend(Point.prototype, {                                                                                              // 15277
	/**                                                                                                                   // 15278
	 * Update the point with new options (typically x/y data) and optionally redraw the series.                           // 15279
	 *                                                                                                                    // 15280
	 * @param {Object} options Point options as defined in the series.data array                                          // 15281
	 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call                                   // 15282
	 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation                             // 15283
	 *    configuration                                                                                                   // 15284
	 *                                                                                                                    // 15285
	 */                                                                                                                   // 15286
	update: function (options, redraw, animation, runEvent) {                                                             // 15287
		var point = this,                                                                                                    // 15288
			series = point.series,                                                                                              // 15289
			graphic = point.graphic,                                                                                            // 15290
			i,                                                                                                                  // 15291
			chart = series.chart,                                                                                               // 15292
			seriesOptions = series.options,                                                                                     // 15293
			names = series.xAxis && series.xAxis.names;                                                                         // 15294
                                                                                                                       // 15295
		redraw = pick(redraw, true);                                                                                         // 15296
                                                                                                                       // 15297
		function update() {                                                                                                  // 15298
                                                                                                                       // 15299
			point.applyOptions(options);                                                                                        // 15300
                                                                                                                       // 15301
			// Update visuals                                                                                                   // 15302
			if (point.y === null && graphic) { // #4146                                                                         // 15303
				point.graphic = graphic.destroy();                                                                                 // 15304
			}                                                                                                                   // 15305
			if (isObject(options) && !isArray(options)) {                                                                       // 15306
				// Defer the actual redraw until getAttribs has been called (#3260)                                                // 15307
				point.redraw = function () {                                                                                       // 15308
					if (graphic) {                                                                                                    // 15309
						if (options && options.marker && options.marker.symbol) {                                                        // 15310
							point.graphic = graphic.destroy();                                                                              // 15311
						} else {                                                                                                         // 15312
							graphic.attr(point.pointAttr[point.state || ''])[point.visible === false ? 'hide' : 'show'](); // #2430         // 15313
						}                                                                                                                // 15314
					}                                                                                                                 // 15315
					if (options && options.dataLabels && point.dataLabel) { // #2468                                                  // 15316
						point.dataLabel = point.dataLabel.destroy();                                                                     // 15317
					}                                                                                                                 // 15318
					point.redraw = null;                                                                                              // 15319
				};                                                                                                                 // 15320
			}                                                                                                                   // 15321
                                                                                                                       // 15322
			// record changes in the parallel arrays                                                                            // 15323
			i = point.index;                                                                                                    // 15324
			series.updateParallelArrays(point, i);                                                                              // 15325
			if (names && point.name) {                                                                                          // 15326
				names[point.x] = point.name;                                                                                       // 15327
			}                                                                                                                   // 15328
                                                                                                                       // 15329
			seriesOptions.data[i] = point.options;                                                                              // 15330
                                                                                                                       // 15331
			// redraw                                                                                                           // 15332
			series.isDirty = series.isDirtyData = true;                                                                         // 15333
			if (!series.fixedBox && series.hasCartesianSeries) { // #1906, #2320                                                // 15334
				chart.isDirtyBox = true;                                                                                           // 15335
			}                                                                                                                   // 15336
                                                                                                                       // 15337
			if (seriesOptions.legendType === 'point') { // #1831, #1885                                                         // 15338
				chart.isDirtyLegend = true;                                                                                        // 15339
			}                                                                                                                   // 15340
			if (redraw) {                                                                                                       // 15341
				chart.redraw(animation);                                                                                           // 15342
			}                                                                                                                   // 15343
		}                                                                                                                    // 15344
                                                                                                                       // 15345
		// Fire the event with a default handler of doing the update                                                         // 15346
		if (runEvent === false) { // When called from setData                                                                // 15347
			update();                                                                                                           // 15348
		} else {                                                                                                             // 15349
			point.firePointEvent('update', { options: options }, update);                                                       // 15350
		}                                                                                                                    // 15351
	},                                                                                                                    // 15352
                                                                                                                       // 15353
	/**                                                                                                                   // 15354
	 * Remove a point and optionally redraw the series and if necessary the axes                                          // 15355
	 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call                                   // 15356
	 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation                             // 15357
	 *    configuration                                                                                                   // 15358
	 */                                                                                                                   // 15359
	remove: function (redraw, animation) {                                                                                // 15360
		this.series.removePoint(inArray(this, this.series.data), redraw, animation);                                         // 15361
	}                                                                                                                     // 15362
});                                                                                                                    // 15363
                                                                                                                       // 15364
// Extend the series prototype for dynamic methods                                                                     // 15365
extend(Series.prototype, {                                                                                             // 15366
	/**                                                                                                                   // 15367
	 * Add a point dynamically after chart load time                                                                      // 15368
	 * @param {Object} options Point options as given in series.data                                                      // 15369
	 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call                                   // 15370
	 * @param {Boolean} shift If shift is true, a point is shifted off the start                                          // 15371
	 *    of the series as one is appended to the end.                                                                    // 15372
	 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation                             // 15373
	 *    configuration                                                                                                   // 15374
	 */                                                                                                                   // 15375
	addPoint: function (options, redraw, shift, animation) {                                                              // 15376
		var series = this,                                                                                                   // 15377
			seriesOptions = series.options,                                                                                     // 15378
			data = series.data,                                                                                                 // 15379
			graph = series.graph,                                                                                               // 15380
			area = series.area,                                                                                                 // 15381
			chart = series.chart,                                                                                               // 15382
			names = series.xAxis && series.xAxis.names,                                                                         // 15383
			currentShift = (graph && graph.shift) || 0,                                                                         // 15384
			shiftShapes = ['graph', 'area'],                                                                                    // 15385
			dataOptions = seriesOptions.data,                                                                                   // 15386
			point,                                                                                                              // 15387
			isInTheMiddle,                                                                                                      // 15388
			xData = series.xData,                                                                                               // 15389
			i,                                                                                                                  // 15390
			x;                                                                                                                  // 15391
                                                                                                                       // 15392
		setAnimation(animation, chart);                                                                                      // 15393
                                                                                                                       // 15394
		// Make graph animate sideways                                                                                       // 15395
		if (shift) {                                                                                                         // 15396
			i = series.zones.length;                                                                                            // 15397
			while (i--) {                                                                                                       // 15398
				shiftShapes.push('zoneGraph' + i, 'zoneArea' + i);                                                                 // 15399
			}                                                                                                                   // 15400
			each(shiftShapes, function (shape) {                                                                                // 15401
				if (series[shape]) {                                                                                               // 15402
					series[shape].shift = currentShift + 1;                                                                           // 15403
				}                                                                                                                  // 15404
			});                                                                                                                 // 15405
		}                                                                                                                    // 15406
		if (area) {                                                                                                          // 15407
			area.isArea = true; // needed in animation, both with and without shift                                             // 15408
		}                                                                                                                    // 15409
                                                                                                                       // 15410
		// Optional redraw, defaults to true                                                                                 // 15411
		redraw = pick(redraw, true);                                                                                         // 15412
                                                                                                                       // 15413
		// Get options and push the point to xData, yData and series.options. In series.generatePoints                       // 15414
		// the Point instance will be created on demand and pushed to the series.data array.                                 // 15415
		point = { series: series };                                                                                          // 15416
		series.pointClass.prototype.applyOptions.apply(point, [options]);                                                    // 15417
		x = point.x;                                                                                                         // 15418
                                                                                                                       // 15419
		// Get the insertion point                                                                                           // 15420
		i = xData.length;                                                                                                    // 15421
		if (series.requireSorting && x < xData[i - 1]) {                                                                     // 15422
			isInTheMiddle = true;                                                                                               // 15423
			while (i && xData[i - 1] > x) {                                                                                     // 15424
				i--;                                                                                                               // 15425
			}                                                                                                                   // 15426
		}                                                                                                                    // 15427
                                                                                                                       // 15428
		series.updateParallelArrays(point, 'splice', i, 0, 0); // insert undefined item                                      // 15429
		series.updateParallelArrays(point, i); // update it                                                                  // 15430
                                                                                                                       // 15431
		if (names && point.name) {                                                                                           // 15432
			names[x] = point.name;                                                                                              // 15433
		}                                                                                                                    // 15434
		dataOptions.splice(i, 0, options);                                                                                   // 15435
                                                                                                                       // 15436
		if (isInTheMiddle) {                                                                                                 // 15437
			series.data.splice(i, 0, null);                                                                                     // 15438
			series.processData();                                                                                               // 15439
		}                                                                                                                    // 15440
                                                                                                                       // 15441
		// Generate points to be added to the legend (#1329)                                                                 // 15442
		if (seriesOptions.legendType === 'point') {                                                                          // 15443
			series.generatePoints();                                                                                            // 15444
		}                                                                                                                    // 15445
                                                                                                                       // 15446
		// Shift the first point off the parallel arrays                                                                     // 15447
		// todo: consider series.removePoint(i) method                                                                       // 15448
		if (shift) {                                                                                                         // 15449
			if (data[0] && data[0].remove) {                                                                                    // 15450
				data[0].remove(false);                                                                                             // 15451
			} else {                                                                                                            // 15452
				data.shift();                                                                                                      // 15453
				series.updateParallelArrays(point, 'shift');                                                                       // 15454
                                                                                                                       // 15455
				dataOptions.shift();                                                                                               // 15456
			}                                                                                                                   // 15457
		}                                                                                                                    // 15458
                                                                                                                       // 15459
		// redraw                                                                                                            // 15460
		series.isDirty = true;                                                                                               // 15461
		series.isDirtyData = true;                                                                                           // 15462
		if (redraw) {                                                                                                        // 15463
			series.getAttribs(); // #1937                                                                                       // 15464
			chart.redraw();                                                                                                     // 15465
		}                                                                                                                    // 15466
	},                                                                                                                    // 15467
                                                                                                                       // 15468
	/**                                                                                                                   // 15469
	 * Remove a point (rendered or not), by index                                                                         // 15470
	 */                                                                                                                   // 15471
	removePoint: function (i, redraw, animation) {                                                                        // 15472
                                                                                                                       // 15473
		var series = this,                                                                                                   // 15474
			data = series.data,                                                                                                 // 15475
			point = data[i],                                                                                                    // 15476
			points = series.points,                                                                                             // 15477
			chart = series.chart,                                                                                               // 15478
			remove = function () {                                                                                              // 15479
                                                                                                                       // 15480
				if (data.length === points.length) {                                                                               // 15481
					points.splice(i, 1);                                                                                              // 15482
				}                                                                                                                  // 15483
				data.splice(i, 1);                                                                                                 // 15484
				series.options.data.splice(i, 1);                                                                                  // 15485
				series.updateParallelArrays(point || { series: series }, 'splice', i, 1);                                          // 15486
                                                                                                                       // 15487
				if (point) {                                                                                                       // 15488
					point.destroy();                                                                                                  // 15489
				}                                                                                                                  // 15490
                                                                                                                       // 15491
				// redraw                                                                                                          // 15492
				series.isDirty = true;                                                                                             // 15493
				series.isDirtyData = true;                                                                                         // 15494
				if (redraw) {                                                                                                      // 15495
					chart.redraw();                                                                                                   // 15496
				}                                                                                                                  // 15497
			};                                                                                                                  // 15498
                                                                                                                       // 15499
		setAnimation(animation, chart);                                                                                      // 15500
		redraw = pick(redraw, true);                                                                                         // 15501
                                                                                                                       // 15502
		// Fire the event with a default handler of removing the point                                                       // 15503
		if (point) {                                                                                                         // 15504
			point.firePointEvent('remove', null, remove);                                                                       // 15505
		} else {                                                                                                             // 15506
			remove();                                                                                                           // 15507
		}                                                                                                                    // 15508
	},                                                                                                                    // 15509
                                                                                                                       // 15510
	/**                                                                                                                   // 15511
	 * Remove a series and optionally redraw the chart                                                                    // 15512
	 *                                                                                                                    // 15513
	 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call                                   // 15514
	 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation                             // 15515
	 *    configuration                                                                                                   // 15516
	 */                                                                                                                   // 15517
                                                                                                                       // 15518
	remove: function (redraw, animation) {                                                                                // 15519
		var series = this,                                                                                                   // 15520
			chart = series.chart;                                                                                               // 15521
		redraw = pick(redraw, true);                                                                                         // 15522
                                                                                                                       // 15523
		if (!series.isRemoving) {  /* prevent triggering native event in jQuery                                              // 15524
				(calling the remove function from the remove event) */                                                             // 15525
			series.isRemoving = true;                                                                                           // 15526
                                                                                                                       // 15527
			// fire the event with a default handler of removing the point                                                      // 15528
			fireEvent(series, 'remove', null, function () {                                                                     // 15529
                                                                                                                       // 15530
                                                                                                                       // 15531
				// destroy elements                                                                                                // 15532
				series.destroy();                                                                                                  // 15533
                                                                                                                       // 15534
                                                                                                                       // 15535
				// redraw                                                                                                          // 15536
				chart.isDirtyLegend = chart.isDirtyBox = true;                                                                     // 15537
				chart.linkSeries();                                                                                                // 15538
                                                                                                                       // 15539
				if (redraw) {                                                                                                      // 15540
					chart.redraw(animation);                                                                                          // 15541
				}                                                                                                                  // 15542
			});                                                                                                                 // 15543
                                                                                                                       // 15544
		}                                                                                                                    // 15545
		series.isRemoving = false;                                                                                           // 15546
	},                                                                                                                    // 15547
                                                                                                                       // 15548
	/**                                                                                                                   // 15549
	 * Update the series with a new set of options                                                                        // 15550
	 */                                                                                                                   // 15551
	update: function (newOptions, redraw) {                                                                               // 15552
		var series = this,                                                                                                   // 15553
			chart = this.chart,                                                                                                 // 15554
			// must use user options when changing type because this.options is merged                                          // 15555
			// in with type specific plotOptions                                                                                // 15556
			oldOptions = this.userOptions,                                                                                      // 15557
			oldType = this.type,                                                                                                // 15558
			proto = seriesTypes[oldType].prototype,                                                                             // 15559
			preserve = ['group', 'markerGroup', 'dataLabelsGroup'],                                                             // 15560
			n;                                                                                                                  // 15561
                                                                                                                       // 15562
		// If we're changing type or zIndex, create new groups (#3380, #3404)                                                // 15563
		if ((newOptions.type && newOptions.type !== oldType) || newOptions.zIndex !== undefined) {                           // 15564
			preserve.length = 0;                                                                                                // 15565
		}                                                                                                                    // 15566
                                                                                                                       // 15567
		// Make sure groups are not destroyed (#3094)                                                                        // 15568
		each(preserve, function (prop) {                                                                                     // 15569
			preserve[prop] = series[prop];                                                                                      // 15570
			delete series[prop];                                                                                                // 15571
		});                                                                                                                  // 15572
                                                                                                                       // 15573
		// Do the merge, with some forced options                                                                            // 15574
		newOptions = merge(oldOptions, {                                                                                     // 15575
			animation: false,                                                                                                   // 15576
			index: this.index,                                                                                                  // 15577
			pointStart: this.xData[0] // when updating after addPoint                                                           // 15578
		}, { data: this.options.data }, newOptions);                                                                         // 15579
                                                                                                                       // 15580
		// Destroy the series and delete all properties. Reinsert all methods                                                // 15581
		// and properties from the new type prototype (#2270, #3719)                                                         // 15582
		this.remove(false);                                                                                                  // 15583
		for (n in proto) {                                                                                                   // 15584
			this[n] = UNDEFINED;                                                                                                // 15585
		}                                                                                                                    // 15586
		extend(this, seriesTypes[newOptions.type || oldType].prototype);                                                     // 15587
                                                                                                                       // 15588
		// Re-register groups (#3094)                                                                                        // 15589
		each(preserve, function (prop) {                                                                                     // 15590
			series[prop] = preserve[prop];                                                                                      // 15591
		});                                                                                                                  // 15592
                                                                                                                       // 15593
		this.init(chart, newOptions);                                                                                        // 15594
		chart.linkSeries(); // Links are lost in this.remove (#3028)                                                         // 15595
		if (pick(redraw, true)) {                                                                                            // 15596
			chart.redraw(false);                                                                                                // 15597
		}                                                                                                                    // 15598
	}                                                                                                                     // 15599
});                                                                                                                    // 15600
                                                                                                                       // 15601
// Extend the Axis.prototype for dynamic methods                                                                       // 15602
extend(Axis.prototype, {                                                                                               // 15603
                                                                                                                       // 15604
	/**                                                                                                                   // 15605
	 * Update the axis with a new options structure                                                                       // 15606
	 */                                                                                                                   // 15607
	update: function (newOptions, redraw) {                                                                               // 15608
		var chart = this.chart;                                                                                              // 15609
                                                                                                                       // 15610
		newOptions = chart.options[this.coll][this.options.index] = merge(this.userOptions, newOptions);                     // 15611
                                                                                                                       // 15612
		this.destroy(true);                                                                                                  // 15613
		this._addedPlotLB = this.chart._labelPanes = UNDEFINED; // #1611, #2887, #4314                                       // 15614
                                                                                                                       // 15615
		this.init(chart, extend(newOptions, { events: UNDEFINED }));                                                         // 15616
                                                                                                                       // 15617
		chart.isDirtyBox = true;                                                                                             // 15618
		if (pick(redraw, true)) {                                                                                            // 15619
			chart.redraw();                                                                                                     // 15620
		}                                                                                                                    // 15621
	},                                                                                                                    // 15622
                                                                                                                       // 15623
	/**                                                                                                                   // 15624
     * Remove the axis from the chart                                                                                  // 15625
     */                                                                                                                // 15626
	remove: function (redraw) {                                                                                           // 15627
		var chart = this.chart,                                                                                              // 15628
			key = this.coll, // xAxis or yAxis                                                                                  // 15629
			axisSeries = this.series,                                                                                           // 15630
			i = axisSeries.length;                                                                                              // 15631
                                                                                                                       // 15632
		// Remove associated series (#2687)                                                                                  // 15633
		while (i--) {                                                                                                        // 15634
			if (axisSeries[i]) {                                                                                                // 15635
				axisSeries[i].remove(false);                                                                                       // 15636
			}                                                                                                                   // 15637
		}                                                                                                                    // 15638
                                                                                                                       // 15639
		// Remove the axis                                                                                                   // 15640
		erase(chart.axes, this);                                                                                             // 15641
		erase(chart[key], this);                                                                                             // 15642
		chart.options[key].splice(this.options.index, 1);                                                                    // 15643
		each(chart[key], function (axis, i) { // Re-index, #1706                                                             // 15644
			axis.options.index = i;                                                                                             // 15645
		});                                                                                                                  // 15646
		this.destroy();                                                                                                      // 15647
		chart.isDirtyBox = true;                                                                                             // 15648
                                                                                                                       // 15649
		if (pick(redraw, true)) {                                                                                            // 15650
			chart.redraw();                                                                                                     // 15651
		}                                                                                                                    // 15652
	},                                                                                                                    // 15653
                                                                                                                       // 15654
	/**                                                                                                                   // 15655
	 * Update the axis title by options                                                                                   // 15656
	 */                                                                                                                   // 15657
	setTitle: function (newTitleOptions, redraw) {                                                                        // 15658
		this.update({ title: newTitleOptions }, redraw);                                                                     // 15659
	},                                                                                                                    // 15660
                                                                                                                       // 15661
	/**                                                                                                                   // 15662
	 * Set new axis categories and optionally redraw                                                                      // 15663
	 * @param {Array} categories                                                                                          // 15664
	 * @param {Boolean} redraw                                                                                            // 15665
	 */                                                                                                                   // 15666
	setCategories: function (categories, redraw) {                                                                        // 15667
		this.update({ categories: categories }, redraw);                                                                     // 15668
	}                                                                                                                     // 15669
                                                                                                                       // 15670
});                                                                                                                    // 15671
                                                                                                                       // 15672
                                                                                                                       // 15673
/**                                                                                                                    // 15674
 * LineSeries object                                                                                                   // 15675
 */                                                                                                                    // 15676
var LineSeries = extendClass(Series);                                                                                  // 15677
seriesTypes.line = LineSeries;                                                                                         // 15678
                                                                                                                       // 15679
/**                                                                                                                    // 15680
 * Set the default options for area                                                                                    // 15681
 */                                                                                                                    // 15682
defaultPlotOptions.area = merge(defaultSeriesOptions, {                                                                // 15683
	threshold: 0                                                                                                          // 15684
	// trackByArea: false,                                                                                                // 15685
	// lineColor: null, // overrides color, but lets fillColor be unaltered                                               // 15686
	// fillOpacity: 0.75,                                                                                                 // 15687
	// fillColor: null                                                                                                    // 15688
});                                                                                                                    // 15689
                                                                                                                       // 15690
/**                                                                                                                    // 15691
 * AreaSeries object                                                                                                   // 15692
 */                                                                                                                    // 15693
var AreaSeries = extendClass(Series, {                                                                                 // 15694
	type: 'area',                                                                                                         // 15695
	/**                                                                                                                   // 15696
	 * For stacks, don't split segments on null values. Instead, draw null values with                                    // 15697
	 * no marker. Also insert dummy points for any X position that exists in other series                                 // 15698
	 * in the stack.                                                                                                      // 15699
	 */                                                                                                                   // 15700
	getSegments: function () {                                                                                            // 15701
		var series = this,                                                                                                   // 15702
			segments = [],                                                                                                      // 15703
			segment = [],                                                                                                       // 15704
			keys = [],                                                                                                          // 15705
			xAxis = this.xAxis,                                                                                                 // 15706
			yAxis = this.yAxis,                                                                                                 // 15707
			stack = yAxis.stacks[this.stackKey],                                                                                // 15708
			pointMap = {},                                                                                                      // 15709
			plotX,                                                                                                              // 15710
			plotY,                                                                                                              // 15711
			points = this.points,                                                                                               // 15712
			connectNulls = this.options.connectNulls,                                                                           // 15713
			i,                                                                                                                  // 15714
			x;                                                                                                                  // 15715
                                                                                                                       // 15716
		if (this.options.stacking && !this.cropped) { // cropped causes artefacts in Stock, and perf issue                   // 15717
			// Create a map where we can quickly look up the points by their X value.                                           // 15718
			for (i = 0; i < points.length; i++) {                                                                               // 15719
				pointMap[points[i].x] = points[i];                                                                                 // 15720
			}                                                                                                                   // 15721
                                                                                                                       // 15722
			// Sort the keys (#1651)                                                                                            // 15723
			for (x in stack) {                                                                                                  // 15724
				if (stack[x].total !== null) { // nulled after switching between grouping and not (#1651, #2336)                   // 15725
					keys.push(+x);                                                                                                    // 15726
				}                                                                                                                  // 15727
			}                                                                                                                   // 15728
			keys.sort(function (a, b) {                                                                                         // 15729
				return a - b;                                                                                                      // 15730
			});                                                                                                                 // 15731
                                                                                                                       // 15732
			each(keys, function (x) {                                                                                           // 15733
				var y = 0,                                                                                                         // 15734
					stackPoint;                                                                                                       // 15735
                                                                                                                       // 15736
				if (connectNulls && (!pointMap[x] || pointMap[x].y === null)) { // #1836                                           // 15737
					return;                                                                                                           // 15738
                                                                                                                       // 15739
				// The point exists, push it to the segment                                                                        // 15740
				} else if (pointMap[x]) {                                                                                          // 15741
					segment.push(pointMap[x]);                                                                                        // 15742
                                                                                                                       // 15743
				// There is no point for this X value in this series, so we                                                        // 15744
				// insert a dummy point in order for the areas to be drawn                                                         // 15745
				// correctly.                                                                                                      // 15746
				} else {                                                                                                           // 15747
                                                                                                                       // 15748
					// Loop down the stack to find the series below this one that has                                                 // 15749
					// a value (#1991)                                                                                                // 15750
					for (i = series.index; i <= yAxis.series.length; i++) {                                                           // 15751
						stackPoint = stack[x].points[i + ',' + x];                                                                       // 15752
						if (stackPoint) {                                                                                                // 15753
							y = stackPoint[1];                                                                                              // 15754
							break;                                                                                                          // 15755
						}                                                                                                                // 15756
					}                                                                                                                 // 15757
                                                                                                                       // 15758
					plotX = xAxis.translate(x);                                                                                       // 15759
					plotY = yAxis.toPixels(y, true);                                                                                  // 15760
					segment.push({                                                                                                    // 15761
						y: null,                                                                                                         // 15762
						plotX: plotX,                                                                                                    // 15763
						clientX: plotX,                                                                                                  // 15764
						plotY: plotY,                                                                                                    // 15765
						yBottom: plotY,                                                                                                  // 15766
						onMouseOver: noop                                                                                                // 15767
					});                                                                                                               // 15768
				}                                                                                                                  // 15769
			});                                                                                                                 // 15770
                                                                                                                       // 15771
			if (segment.length) {                                                                                               // 15772
				segments.push(segment);                                                                                            // 15773
			}                                                                                                                   // 15774
                                                                                                                       // 15775
		} else {                                                                                                             // 15776
			Series.prototype.getSegments.call(this);                                                                            // 15777
			segments = this.segments;                                                                                           // 15778
		}                                                                                                                    // 15779
                                                                                                                       // 15780
		this.segments = segments;                                                                                            // 15781
	},                                                                                                                    // 15782
	                                                                                                                      // 15783
	/**                                                                                                                   // 15784
	 * Extend the base Series getSegmentPath method by adding the path for the area.                                      // 15785
	 * This path is pushed to the series.areaPath property.                                                               // 15786
	 */                                                                                                                   // 15787
	getSegmentPath: function (segment) {                                                                                  // 15788
		                                                                                                                     // 15789
		var segmentPath = Series.prototype.getSegmentPath.call(this, segment), // call base method                           // 15790
			areaSegmentPath = [].concat(segmentPath), // work on a copy for the area path                                       // 15791
			i,                                                                                                                  // 15792
			options = this.options,                                                                                             // 15793
			segLength = segmentPath.length,                                                                                     // 15794
			translatedThreshold = this.yAxis.getThreshold(options.threshold), // #2181                                          // 15795
			yBottom;                                                                                                            // 15796
		                                                                                                                     // 15797
		if (segLength === 3) { // for animation from 1 to two points                                                         // 15798
			areaSegmentPath.push(L, segmentPath[1], segmentPath[2]);                                                            // 15799
		}                                                                                                                    // 15800
		if (options.stacking && !this.closedStacks) {                                                                        // 15801
			                                                                                                                    // 15802
			// Follow stack back. Todo: implement areaspline. A general solution could be to                                    // 15803
			// reverse the entire graphPath of the previous series, though may be hard with                                     // 15804
			// splines and with series with different extremes                                                                  // 15805
			for (i = segment.length - 1; i >= 0; i--) {                                                                         // 15806
                                                                                                                       // 15807
				yBottom = pick(segment[i].yBottom, translatedThreshold);                                                           // 15808
			                                                                                                                    // 15809
				// step line?                                                                                                      // 15810
				if (i < segment.length - 1 && options.step) {                                                                      // 15811
					areaSegmentPath.push(segment[i + 1].plotX, yBottom);                                                              // 15812
				}                                                                                                                  // 15813
				                                                                                                                   // 15814
				areaSegmentPath.push(segment[i].plotX, yBottom);                                                                   // 15815
			}                                                                                                                   // 15816
                                                                                                                       // 15817
		} else { // follow zero line back                                                                                    // 15818
			this.closeSegment(areaSegmentPath, segment, translatedThreshold);                                                   // 15819
		}                                                                                                                    // 15820
		this.areaPath = this.areaPath.concat(areaSegmentPath);                                                               // 15821
		return segmentPath;                                                                                                  // 15822
	},                                                                                                                    // 15823
	                                                                                                                      // 15824
	/**                                                                                                                   // 15825
	 * Extendable method to close the segment path of an area. This is overridden in polar                                // 15826
	 * charts.                                                                                                            // 15827
	 */                                                                                                                   // 15828
	closeSegment: function (path, segment, translatedThreshold) {                                                         // 15829
		path.push(                                                                                                           // 15830
			L,                                                                                                                  // 15831
			segment[segment.length - 1].plotX,                                                                                  // 15832
			translatedThreshold,                                                                                                // 15833
			L,                                                                                                                  // 15834
			segment[0].plotX,                                                                                                   // 15835
			translatedThreshold                                                                                                 // 15836
		);                                                                                                                   // 15837
	},                                                                                                                    // 15838
	                                                                                                                      // 15839
	/**                                                                                                                   // 15840
	 * Draw the graph and the underlying area. This method calls the Series base                                          // 15841
	 * function and adds the area. The areaPath is calculated in the getSegmentPath                                       // 15842
	 * method called from Series.prototype.drawGraph.                                                                     // 15843
	 */                                                                                                                   // 15844
	drawGraph: function () {                                                                                              // 15845
		                                                                                                                     // 15846
		// Define or reset areaPath                                                                                          // 15847
		this.areaPath = [];                                                                                                  // 15848
		                                                                                                                     // 15849
		// Call the base method                                                                                              // 15850
		Series.prototype.drawGraph.apply(this);                                                                              // 15851
		                                                                                                                     // 15852
		// Define local variables                                                                                            // 15853
		var series = this,                                                                                                   // 15854
			areaPath = this.areaPath,                                                                                           // 15855
			options = this.options,                                                                                             // 15856
			zones = this.zones,                                                                                                 // 15857
			props = [['area', this.color, options.fillColor]]; // area name, main color, fill color                             // 15858
		                                                                                                                     // 15859
		each(zones, function (threshold, i) {                                                                                // 15860
			props.push(['zoneArea' + i, threshold.color || series.color, threshold.fillColor || options.fillColor]);            // 15861
		});                                                                                                                  // 15862
		each(props, function (prop) {                                                                                        // 15863
			var areaKey = prop[0],                                                                                              // 15864
				area = series[areaKey];                                                                                            // 15865
				                                                                                                                   // 15866
			// Create or update the area                                                                                        // 15867
			if (area) { // update                                                                                               // 15868
				area.animate({ d: areaPath });                                                                                     // 15869
	                                                                                                                      // 15870
			} else { // create                                                                                                  // 15871
				series[areaKey] = series.chart.renderer.path(areaPath)                                                             // 15872
					.attr({                                                                                                           // 15873
						fill: pick(                                                                                                      // 15874
							prop[2],                                                                                                        // 15875
							Color(prop[1]).setOpacity(pick(options.fillOpacity, 0.75)).get()                                                // 15876
						),                                                                                                               // 15877
						zIndex: 0 // #1069                                                                                               // 15878
					}).add(series.group);                                                                                             // 15879
			}                                                                                                                   // 15880
		});                                                                                                                  // 15881
	},                                                                                                                    // 15882
                                                                                                                       // 15883
	drawLegendSymbol: LegendSymbolMixin.drawRectangle                                                                     // 15884
});                                                                                                                    // 15885
                                                                                                                       // 15886
seriesTypes.area = AreaSeries;                                                                                         // 15887
/**                                                                                                                    // 15888
 * Set the default options for spline                                                                                  // 15889
 */                                                                                                                    // 15890
defaultPlotOptions.spline = merge(defaultSeriesOptions);                                                               // 15891
                                                                                                                       // 15892
/**                                                                                                                    // 15893
 * SplineSeries object                                                                                                 // 15894
 */                                                                                                                    // 15895
var SplineSeries = extendClass(Series, {                                                                               // 15896
	type: 'spline',                                                                                                       // 15897
                                                                                                                       // 15898
	/**                                                                                                                   // 15899
	 * Get the spline segment from a given point's previous neighbour to the given point                                  // 15900
	 */                                                                                                                   // 15901
	getPointSpline: function (segment, point, i) {                                                                        // 15902
		var smoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc       // 15903
			denom = smoothing + 1,                                                                                              // 15904
			plotX = point.plotX,                                                                                                // 15905
			plotY = point.plotY,                                                                                                // 15906
			lastPoint = segment[i - 1],                                                                                         // 15907
			nextPoint = segment[i + 1],                                                                                         // 15908
			leftContX,                                                                                                          // 15909
			leftContY,                                                                                                          // 15910
			rightContX,                                                                                                         // 15911
			rightContY,                                                                                                         // 15912
			ret;                                                                                                                // 15913
                                                                                                                       // 15914
		// find control points                                                                                               // 15915
		if (lastPoint && nextPoint) {                                                                                        // 15916
		                                                                                                                     // 15917
			var lastX = lastPoint.plotX,                                                                                        // 15918
				lastY = lastPoint.plotY,                                                                                           // 15919
				nextX = nextPoint.plotX,                                                                                           // 15920
				nextY = nextPoint.plotY,                                                                                           // 15921
				correction;                                                                                                        // 15922
                                                                                                                       // 15923
			leftContX = (smoothing * plotX + lastX) / denom;                                                                    // 15924
			leftContY = (smoothing * plotY + lastY) / denom;                                                                    // 15925
			rightContX = (smoothing * plotX + nextX) / denom;                                                                   // 15926
			rightContY = (smoothing * plotY + nextY) / denom;                                                                   // 15927
                                                                                                                       // 15928
			// have the two control points make a straight line through main point                                              // 15929
			correction = ((rightContY - leftContY) * (rightContX - plotX)) /                                                    // 15930
				(rightContX - leftContX) + plotY - rightContY;                                                                     // 15931
                                                                                                                       // 15932
			leftContY += correction;                                                                                            // 15933
			rightContY += correction;                                                                                           // 15934
                                                                                                                       // 15935
			// to prevent false extremes, check that control points are between                                                 // 15936
			// neighbouring points' y values                                                                                    // 15937
			if (leftContY > lastY && leftContY > plotY) {                                                                       // 15938
				leftContY = mathMax(lastY, plotY);                                                                                 // 15939
				rightContY = 2 * plotY - leftContY; // mirror of left control point                                                // 15940
			} else if (leftContY < lastY && leftContY < plotY) {                                                                // 15941
				leftContY = mathMin(lastY, plotY);                                                                                 // 15942
				rightContY = 2 * plotY - leftContY;                                                                                // 15943
			}                                                                                                                   // 15944
			if (rightContY > nextY && rightContY > plotY) {                                                                     // 15945
				rightContY = mathMax(nextY, plotY);                                                                                // 15946
				leftContY = 2 * plotY - rightContY;                                                                                // 15947
			} else if (rightContY < nextY && rightContY < plotY) {                                                              // 15948
				rightContY = mathMin(nextY, plotY);                                                                                // 15949
				leftContY = 2 * plotY - rightContY;                                                                                // 15950
			}                                                                                                                   // 15951
                                                                                                                       // 15952
			// record for drawing in next point                                                                                 // 15953
			point.rightContX = rightContX;                                                                                      // 15954
			point.rightContY = rightContY;                                                                                      // 15955
                                                                                                                       // 15956
		}                                                                                                                    // 15957
		                                                                                                                     // 15958
		// Visualize control points for debugging                                                                            // 15959
		/*                                                                                                                   // 15960
		if (leftContX) {                                                                                                     // 15961
			this.chart.renderer.circle(leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop, 2)                      // 15962
				.attr({                                                                                                            // 15963
					stroke: 'red',                                                                                                    // 15964
					'stroke-width': 1,                                                                                                // 15965
					fill: 'none'                                                                                                      // 15966
				})                                                                                                                 // 15967
				.add();                                                                                                            // 15968
			this.chart.renderer.path(['M', leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop,                     // 15969
				'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])                                                     // 15970
				.attr({                                                                                                            // 15971
					stroke: 'red',                                                                                                    // 15972
					'stroke-width': 1                                                                                                 // 15973
				})                                                                                                                 // 15974
				.add();                                                                                                            // 15975
			this.chart.renderer.circle(rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop, 2)                    // 15976
				.attr({                                                                                                            // 15977
					stroke: 'green',                                                                                                  // 15978
					'stroke-width': 1,                                                                                                // 15979
					fill: 'none'                                                                                                      // 15980
				})                                                                                                                 // 15981
				.add();                                                                                                            // 15982
			this.chart.renderer.path(['M', rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop,                   // 15983
				'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])                                                     // 15984
				.attr({                                                                                                            // 15985
					stroke: 'green',                                                                                                  // 15986
					'stroke-width': 1                                                                                                 // 15987
				})                                                                                                                 // 15988
				.add();                                                                                                            // 15989
		}                                                                                                                    // 15990
		*/                                                                                                                   // 15991
                                                                                                                       // 15992
		// moveTo or lineTo                                                                                                  // 15993
		if (!i) {                                                                                                            // 15994
			ret = [M, plotX, plotY];                                                                                            // 15995
		} else { // curve from last point to this                                                                            // 15996
			ret = [                                                                                                             // 15997
				'C',                                                                                                               // 15998
				lastPoint.rightContX || lastPoint.plotX,                                                                           // 15999
				lastPoint.rightContY || lastPoint.plotY,                                                                           // 16000
				leftContX || plotX,                                                                                                // 16001
				leftContY || plotY,                                                                                                // 16002
				plotX,                                                                                                             // 16003
				plotY                                                                                                              // 16004
			];                                                                                                                  // 16005
			lastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later                              // 16006
		}                                                                                                                    // 16007
		return ret;                                                                                                          // 16008
	}                                                                                                                     // 16009
});                                                                                                                    // 16010
seriesTypes.spline = SplineSeries;                                                                                     // 16011
                                                                                                                       // 16012
/**                                                                                                                    // 16013
 * Set the default options for areaspline                                                                              // 16014
 */                                                                                                                    // 16015
defaultPlotOptions.areaspline = merge(defaultPlotOptions.area);                                                        // 16016
                                                                                                                       // 16017
/**                                                                                                                    // 16018
 * AreaSplineSeries object                                                                                             // 16019
 */                                                                                                                    // 16020
var areaProto = AreaSeries.prototype,                                                                                  // 16021
	AreaSplineSeries = extendClass(SplineSeries, {                                                                        // 16022
		type: 'areaspline',                                                                                                  // 16023
		closedStacks: true, // instead of following the previous graph back, follow the threshold back                       // 16024
		                                                                                                                     // 16025
		// Mix in methods from the area series                                                                               // 16026
		getSegmentPath: areaProto.getSegmentPath,                                                                            // 16027
		closeSegment: areaProto.closeSegment,                                                                                // 16028
		drawGraph: areaProto.drawGraph,                                                                                      // 16029
		drawLegendSymbol: LegendSymbolMixin.drawRectangle                                                                    // 16030
	});                                                                                                                   // 16031
                                                                                                                       // 16032
seriesTypes.areaspline = AreaSplineSeries;                                                                             // 16033
                                                                                                                       // 16034
/**                                                                                                                    // 16035
 * Set the default options for column                                                                                  // 16036
 */                                                                                                                    // 16037
defaultPlotOptions.column = merge(defaultSeriesOptions, {                                                              // 16038
	borderColor: '#FFFFFF',                                                                                               // 16039
	//borderWidth: 1,                                                                                                     // 16040
	borderRadius: 0,                                                                                                      // 16041
	//colorByPoint: undefined,                                                                                            // 16042
	groupPadding: 0.2,                                                                                                    // 16043
	//grouping: true,                                                                                                     // 16044
	marker: null, // point options are specified in the base options                                                      // 16045
	pointPadding: 0.1,                                                                                                    // 16046
	//pointWidth: null,                                                                                                   // 16047
	minPointLength: 0,                                                                                                    // 16048
	cropThreshold: 50, // when there are more points, they will not animate out of the chart on xAxis.setExtremes         // 16049
	pointRange: null, // null means auto, meaning 1 in a categorized axis and least distance between points if not categories
	states: {                                                                                                             // 16051
		hover: {                                                                                                             // 16052
			brightness: 0.1,                                                                                                    // 16053
			shadow: false,                                                                                                      // 16054
			halo: false                                                                                                         // 16055
		},                                                                                                                   // 16056
		select: {                                                                                                            // 16057
			color: '#C0C0C0',                                                                                                   // 16058
			borderColor: '#000000',                                                                                             // 16059
			shadow: false                                                                                                       // 16060
		}                                                                                                                    // 16061
	},                                                                                                                    // 16062
	dataLabels: {                                                                                                         // 16063
		align: null, // auto                                                                                                 // 16064
		verticalAlign: null, // auto                                                                                         // 16065
		y: null                                                                                                              // 16066
	},                                                                                                                    // 16067
	startFromThreshold: true, // docs: http://jsfiddle.net/highcharts/hz8fopan/14/                                        // 16068
	stickyTracking: false,                                                                                                // 16069
	tooltip: {                                                                                                            // 16070
		distance: 6                                                                                                          // 16071
	},                                                                                                                    // 16072
	threshold: 0                                                                                                          // 16073
});                                                                                                                    // 16074
                                                                                                                       // 16075
/**                                                                                                                    // 16076
 * ColumnSeries object                                                                                                 // 16077
 */                                                                                                                    // 16078
var ColumnSeries = extendClass(Series, {                                                                               // 16079
	type: 'column',                                                                                                       // 16080
	pointAttrToOptions: { // mapping between SVG attributes and the corresponding options                                 // 16081
		stroke: 'borderColor',                                                                                               // 16082
		fill: 'color',                                                                                                       // 16083
		r: 'borderRadius'                                                                                                    // 16084
	},                                                                                                                    // 16085
	cropShoulder: 0,                                                                                                      // 16086
	directTouch: true, // When tooltip is not shared, this series (and derivatives) requires direct touch/hover. KD-tree does not apply.
	trackerGroups: ['group', 'dataLabelsGroup'],                                                                          // 16088
	negStacks: true, // use separate negative stacks, unlike area stacks where a negative                                 // 16089
		// point is substracted from previous (#1910)                                                                        // 16090
	                                                                                                                      // 16091
	/**                                                                                                                   // 16092
	 * Initialize the series                                                                                              // 16093
	 */                                                                                                                   // 16094
	init: function () {                                                                                                   // 16095
		Series.prototype.init.apply(this, arguments);                                                                        // 16096
                                                                                                                       // 16097
		var series = this,                                                                                                   // 16098
			chart = series.chart;                                                                                               // 16099
                                                                                                                       // 16100
		// if the series is added dynamically, force redraw of other                                                         // 16101
		// series affected by a new column                                                                                   // 16102
		if (chart.hasRendered) {                                                                                             // 16103
			each(chart.series, function (otherSeries) {                                                                         // 16104
				if (otherSeries.type === series.type) {                                                                            // 16105
					otherSeries.isDirty = true;                                                                                       // 16106
				}                                                                                                                  // 16107
			});                                                                                                                 // 16108
		}                                                                                                                    // 16109
	},                                                                                                                    // 16110
                                                                                                                       // 16111
	/**                                                                                                                   // 16112
	 * Return the width and x offset of the columns adjusted for grouping, groupPadding, pointPadding,                    // 16113
	 * pointWidth etc.                                                                                                    // 16114
	 */                                                                                                                   // 16115
	getColumnMetrics: function () {                                                                                       // 16116
                                                                                                                       // 16117
		var series = this,                                                                                                   // 16118
			options = series.options,                                                                                           // 16119
			xAxis = series.xAxis,                                                                                               // 16120
			yAxis = series.yAxis,                                                                                               // 16121
			reversedXAxis = xAxis.reversed,                                                                                     // 16122
			stackKey,                                                                                                           // 16123
			stackGroups = {},                                                                                                   // 16124
			columnIndex,                                                                                                        // 16125
			columnCount = 0;                                                                                                    // 16126
                                                                                                                       // 16127
		// Get the total number of column type series.                                                                       // 16128
		// This is called on every series. Consider moving this logic to a                                                   // 16129
		// chart.orderStacks() function and call it on init, addSeries and removeSeries                                      // 16130
		if (options.grouping === false) {                                                                                    // 16131
			columnCount = 1;                                                                                                    // 16132
		} else {                                                                                                             // 16133
			each(series.chart.series, function (otherSeries) {                                                                  // 16134
				var otherOptions = otherSeries.options,                                                                            // 16135
					otherYAxis = otherSeries.yAxis;                                                                                   // 16136
				if (otherSeries.type === series.type && otherSeries.visible &&                                                     // 16137
						yAxis.len === otherYAxis.len && yAxis.pos === otherYAxis.pos) {  // #642, #2086                                  // 16138
					if (otherOptions.stacking) {                                                                                      // 16139
						stackKey = otherSeries.stackKey;                                                                                 // 16140
						if (stackGroups[stackKey] === UNDEFINED) {                                                                       // 16141
							stackGroups[stackKey] = columnCount++;                                                                          // 16142
						}                                                                                                                // 16143
						columnIndex = stackGroups[stackKey];                                                                             // 16144
					} else if (otherOptions.grouping !== false) { // #1162                                                            // 16145
						columnIndex = columnCount++;                                                                                     // 16146
					}                                                                                                                 // 16147
					otherSeries.columnIndex = columnIndex;                                                                            // 16148
				}                                                                                                                  // 16149
			});                                                                                                                 // 16150
		}                                                                                                                    // 16151
                                                                                                                       // 16152
		var categoryWidth = mathMin(                                                                                         // 16153
				mathAbs(xAxis.transA) * (xAxis.ordinalSlope || options.pointRange || xAxis.closestPointRange || xAxis.tickInterval || 1), // #2610
				xAxis.len // #1535                                                                                                 // 16155
			),                                                                                                                  // 16156
			groupPadding = categoryWidth * options.groupPadding,                                                                // 16157
			groupWidth = categoryWidth - 2 * groupPadding,                                                                      // 16158
			pointOffsetWidth = groupWidth / columnCount,                                                                        // 16159
			optionPointWidth = options.pointWidth,                                                                              // 16160
			pointPadding = defined(optionPointWidth) ? (pointOffsetWidth - optionPointWidth) / 2 :                              // 16161
				pointOffsetWidth * options.pointPadding,                                                                           // 16162
			pointWidth = pick(optionPointWidth, pointOffsetWidth - 2 * pointPadding), // exact point width, used in polar charts
			colIndex = (reversedXAxis ?                                                                                         // 16164
				columnCount - (series.columnIndex || 0) : // #1251                                                                 // 16165
				series.columnIndex) || 0,                                                                                          // 16166
			pointXOffset = pointPadding + (groupPadding + colIndex *                                                            // 16167
				pointOffsetWidth - (categoryWidth / 2)) *                                                                          // 16168
				(reversedXAxis ? -1 : 1);                                                                                          // 16169
                                                                                                                       // 16170
		// Save it for reading in linked series (Error bars particularly)                                                    // 16171
		return (series.columnMetrics = {                                                                                     // 16172
			width: pointWidth,                                                                                                  // 16173
			offset: pointXOffset                                                                                                // 16174
		});                                                                                                                  // 16175
			                                                                                                                    // 16176
	},                                                                                                                    // 16177
                                                                                                                       // 16178
	/**                                                                                                                   // 16179
	 * Translate each point to the plot area coordinate system and find shape positions                                   // 16180
	 */                                                                                                                   // 16181
	translate: function () {                                                                                              // 16182
		var series = this,                                                                                                   // 16183
			chart = series.chart,                                                                                               // 16184
			options = series.options,                                                                                           // 16185
			borderWidth = series.borderWidth = pick(                                                                            // 16186
				options.borderWidth,                                                                                               // 16187
				series.closestPointRange * series.xAxis.transA < 2 ? 0 : 1 // #3635                                                // 16188
			),                                                                                                                  // 16189
			yAxis = series.yAxis,                                                                                               // 16190
			threshold = options.threshold,                                                                                      // 16191
			translatedThreshold = series.translatedThreshold = yAxis.getThreshold(threshold),                                   // 16192
			minPointLength = pick(options.minPointLength, 5),                                                                   // 16193
			metrics = series.getColumnMetrics(),                                                                                // 16194
			pointWidth = metrics.width,                                                                                         // 16195
			seriesBarW = series.barW = mathMax(pointWidth, 1 + 2 * borderWidth), // postprocessed for border width              // 16196
			pointXOffset = series.pointXOffset = metrics.offset,                                                                // 16197
			xCrisp = -(borderWidth % 2 ? 0.5 : 0),                                                                              // 16198
			yCrisp = borderWidth % 2 ? 0.5 : 1;                                                                                 // 16199
                                                                                                                       // 16200
		if (chart.inverted) {                                                                                                // 16201
			translatedThreshold -= 0.5; // #3355                                                                                // 16202
			if (chart.renderer.isVML) {                                                                                         // 16203
				yCrisp += 1;                                                                                                       // 16204
			}                                                                                                                   // 16205
		}                                                                                                                    // 16206
                                                                                                                       // 16207
		// When the pointPadding is 0, we want the columns to be packed tightly, so we allow individual                      // 16208
		// columns to have individual sizes. When pointPadding is greater, we strive for equal-width                         // 16209
		// columns (#2694).                                                                                                  // 16210
		if (options.pointPadding) {                                                                                          // 16211
			seriesBarW = mathCeil(seriesBarW);                                                                                  // 16212
		}                                                                                                                    // 16213
                                                                                                                       // 16214
		Series.prototype.translate.apply(series);                                                                            // 16215
                                                                                                                       // 16216
		// Record the new values                                                                                             // 16217
		each(series.points, function (point) {                                                                               // 16218
			var yBottom = pick(point.yBottom, translatedThreshold),                                                             // 16219
				safeDistance = 999 + mathAbs(yBottom),                                                                             // 16220
				plotY = mathMin(mathMax(-safeDistance, point.plotY), yAxis.len + safeDistance), // Don't draw too far outside plot area (#1303, #2241, #4264)
				barX = point.plotX + pointXOffset,                                                                                 // 16222
				barW = seriesBarW,                                                                                                 // 16223
				barY = mathMin(plotY, yBottom),                                                                                    // 16224
				right,                                                                                                             // 16225
				bottom,                                                                                                            // 16226
				fromTop,                                                                                                           // 16227
				up,                                                                                                                // 16228
				barH = mathMax(plotY, yBottom) - barY;                                                                             // 16229
                                                                                                                       // 16230
			// Handle options.minPointLength                                                                                    // 16231
			if (mathAbs(barH) < minPointLength) {                                                                               // 16232
				if (minPointLength) {                                                                                              // 16233
					barH = minPointLength;                                                                                            // 16234
					up = (!yAxis.reversed && !point.negative) || (yAxis.reversed && point.negative);                                  // 16235
					barY =                                                                                                            // 16236
						mathRound(mathAbs(barY - translatedThreshold) > minPointLength ? // stacked                                      // 16237
							yBottom - minPointLength : // keep position                                                                     // 16238
							translatedThreshold - (up ? minPointLength : 0)); // #1485, #4051                                               // 16239
				}                                                                                                                  // 16240
			}                                                                                                                   // 16241
                                                                                                                       // 16242
			// Cache for access in polar                                                                                        // 16243
			point.barX = barX;                                                                                                  // 16244
			point.pointWidth = pointWidth;                                                                                      // 16245
                                                                                                                       // 16246
			// Round off to obtain crisp edges and avoid overlapping with neighbours (#2694)                                    // 16247
			right = mathRound(barX + barW) + xCrisp;                                                                            // 16248
			barX = mathRound(barX) + xCrisp;                                                                                    // 16249
			barW = right - barX;                                                                                                // 16250
                                                                                                                       // 16251
			fromTop = mathAbs(barY) < 0.5;                                                                                      // 16252
			bottom = mathMin(mathRound(barY + barH) + yCrisp, 9e4); // #3575                                                    // 16253
			barY = mathRound(barY) + yCrisp;                                                                                    // 16254
			barH = bottom - barY;                                                                                               // 16255
                                                                                                                       // 16256
			// Top edges are exceptions                                                                                         // 16257
			if (fromTop) {                                                                                                      // 16258
				barY -= 1;                                                                                                         // 16259
				barH += 1;                                                                                                         // 16260
			}                                                                                                                   // 16261
                                                                                                                       // 16262
			// Fix the tooltip on center of grouped columns (#1216, #424, #3648)                                                // 16263
			point.tooltipPos = chart.inverted ?                                                                                 // 16264
				[yAxis.len + yAxis.pos - chart.plotLeft - plotY, series.xAxis.len - barX - barW / 2, barH] :                       // 16265
				[barX + barW / 2, plotY + yAxis.pos - chart.plotTop, barH];                                                        // 16266
                                                                                                                       // 16267
			// Register shape type and arguments to be used in drawPoints                                                       // 16268
			point.shapeType = 'rect';                                                                                           // 16269
			point.shapeArgs = {                                                                                                 // 16270
				x: barX,                                                                                                           // 16271
				y: barY,                                                                                                           // 16272
				width: barW,                                                                                                       // 16273
				height: barH                                                                                                       // 16274
			};                                                                                                                  // 16275
		});                                                                                                                  // 16276
                                                                                                                       // 16277
	},                                                                                                                    // 16278
                                                                                                                       // 16279
	getSymbol: noop,                                                                                                      // 16280
	                                                                                                                      // 16281
	/**                                                                                                                   // 16282
	 * Use a solid rectangle like the area series types                                                                   // 16283
	 */                                                                                                                   // 16284
	drawLegendSymbol: LegendSymbolMixin.drawRectangle,                                                                    // 16285
	                                                                                                                      // 16286
	                                                                                                                      // 16287
	/**                                                                                                                   // 16288
	 * Columns have no graph                                                                                              // 16289
	 */                                                                                                                   // 16290
	drawGraph: noop,                                                                                                      // 16291
                                                                                                                       // 16292
	/**                                                                                                                   // 16293
	 * Draw the columns. For bars, the series.group is rotated, so the same coordinates                                   // 16294
	 * apply for columns and bars. This method is inherited by scatter series.                                            // 16295
	 *                                                                                                                    // 16296
	 */                                                                                                                   // 16297
	drawPoints: function () {                                                                                             // 16298
		var series = this,                                                                                                   // 16299
			chart = this.chart,                                                                                                 // 16300
			options = series.options,                                                                                           // 16301
			renderer = chart.renderer,                                                                                          // 16302
			animationLimit = options.animationLimit || 250,                                                                     // 16303
			shapeArgs,                                                                                                          // 16304
			pointAttr;                                                                                                          // 16305
                                                                                                                       // 16306
		// draw the columns                                                                                                  // 16307
		each(series.points, function (point) {                                                                               // 16308
			var plotY = point.plotY,                                                                                            // 16309
				graphic = point.graphic,                                                                                           // 16310
				borderAttr;                                                                                                        // 16311
                                                                                                                       // 16312
			if (plotY !== UNDEFINED && !isNaN(plotY) && point.y !== null) {                                                     // 16313
				shapeArgs = point.shapeArgs;                                                                                       // 16314
                                                                                                                       // 16315
				borderAttr = defined(series.borderWidth) ? {                                                                       // 16316
					'stroke-width': series.borderWidth                                                                                // 16317
				} : {};                                                                                                            // 16318
                                                                                                                       // 16319
				pointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || series.pointAttr[NORMAL_STATE];       // 16320
				                                                                                                                   // 16321
				if (graphic) { // update                                                                                           // 16322
					stop(graphic);                                                                                                    // 16323
					graphic.attr(borderAttr)[chart.pointCount < animationLimit ? 'animate' : 'attr'](merge(shapeArgs));               // 16324
                                                                                                                       // 16325
				} else {                                                                                                           // 16326
					point.graphic = graphic = renderer[point.shapeType](shapeArgs)                                                    // 16327
						.attr(borderAttr)                                                                                                // 16328
						.attr(pointAttr)                                                                                                 // 16329
						.add(series.group)                                                                                               // 16330
						.shadow(options.shadow, null, options.stacking && !options.borderRadius);                                        // 16331
				}                                                                                                                  // 16332
                                                                                                                       // 16333
			} else if (graphic) {                                                                                               // 16334
				point.graphic = graphic.destroy(); // #1269                                                                        // 16335
			}                                                                                                                   // 16336
		});                                                                                                                  // 16337
	},                                                                                                                    // 16338
                                                                                                                       // 16339
	/**                                                                                                                   // 16340
	 * Animate the column heights one by one from zero                                                                    // 16341
	 * @param {Boolean} init Whether to initialize the animation or run it                                                // 16342
	 */                                                                                                                   // 16343
	animate: function (init) {                                                                                            // 16344
		var series = this,                                                                                                   // 16345
			yAxis = this.yAxis,                                                                                                 // 16346
			options = series.options,                                                                                           // 16347
			inverted = this.chart.inverted,                                                                                     // 16348
			attr = {},                                                                                                          // 16349
			translatedThreshold;                                                                                                // 16350
                                                                                                                       // 16351
		if (hasSVG) { // VML is too slow anyway                                                                              // 16352
			if (init) {                                                                                                         // 16353
				attr.scaleY = 0.001;                                                                                               // 16354
				translatedThreshold = mathMin(yAxis.pos + yAxis.len, mathMax(yAxis.pos, yAxis.toPixels(options.threshold)));       // 16355
				if (inverted) {                                                                                                    // 16356
					attr.translateX = translatedThreshold - yAxis.len;                                                                // 16357
				} else {                                                                                                           // 16358
					attr.translateY = translatedThreshold;                                                                            // 16359
				}                                                                                                                  // 16360
				series.group.attr(attr);                                                                                           // 16361
                                                                                                                       // 16362
			} else { // run the animation                                                                                       // 16363
				                                                                                                                   // 16364
				attr.scaleY = 1;                                                                                                   // 16365
				attr[inverted ? 'translateX' : 'translateY'] = yAxis.pos;                                                          // 16366
				series.group.animate(attr, series.options.animation);                                                              // 16367
                                                                                                                       // 16368
				// delete this function to allow it only once                                                                      // 16369
				series.animate = null;                                                                                             // 16370
			}                                                                                                                   // 16371
		}                                                                                                                    // 16372
	},                                                                                                                    // 16373
	                                                                                                                      // 16374
	/**                                                                                                                   // 16375
	 * Remove this series from the chart                                                                                  // 16376
	 */                                                                                                                   // 16377
	remove: function () {                                                                                                 // 16378
		var series = this,                                                                                                   // 16379
			chart = series.chart;                                                                                               // 16380
                                                                                                                       // 16381
		// column and bar series affects other series of the same type                                                       // 16382
		// as they are either stacked or grouped                                                                             // 16383
		if (chart.hasRendered) {                                                                                             // 16384
			each(chart.series, function (otherSeries) {                                                                         // 16385
				if (otherSeries.type === series.type) {                                                                            // 16386
					otherSeries.isDirty = true;                                                                                       // 16387
				}                                                                                                                  // 16388
			});                                                                                                                 // 16389
		}                                                                                                                    // 16390
                                                                                                                       // 16391
		Series.prototype.remove.apply(series, arguments);                                                                    // 16392
	}                                                                                                                     // 16393
});                                                                                                                    // 16394
seriesTypes.column = ColumnSeries;                                                                                     // 16395
/**                                                                                                                    // 16396
 * Set the default options for bar                                                                                     // 16397
 */                                                                                                                    // 16398
defaultPlotOptions.bar = merge(defaultPlotOptions.column);                                                             // 16399
/**                                                                                                                    // 16400
 * The Bar series class                                                                                                // 16401
 */                                                                                                                    // 16402
var BarSeries = extendClass(ColumnSeries, {                                                                            // 16403
	type: 'bar',                                                                                                          // 16404
	inverted: true                                                                                                        // 16405
});                                                                                                                    // 16406
seriesTypes.bar = BarSeries;                                                                                           // 16407
                                                                                                                       // 16408
/**                                                                                                                    // 16409
 * Set the default options for scatter                                                                                 // 16410
 */                                                                                                                    // 16411
defaultPlotOptions.scatter = merge(defaultSeriesOptions, {                                                             // 16412
	lineWidth: 0,                                                                                                         // 16413
	marker: {                                                                                                             // 16414
		enabled: true // Overrides auto-enabling in line series (#3647)                                                      // 16415
	},                                                                                                                    // 16416
	tooltip: {                                                                                                            // 16417
		headerFormat: '<span style="color:{series.color}">\u25CF</span> <span style="font-size: 10px;"> {series.name}</span><br/>',
		pointFormat: 'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'                                                      // 16419
	}                                                                                                                     // 16420
});                                                                                                                    // 16421
                                                                                                                       // 16422
/**                                                                                                                    // 16423
 * The scatter series class                                                                                            // 16424
 */                                                                                                                    // 16425
var ScatterSeries = extendClass(Series, {                                                                              // 16426
	type: 'scatter',                                                                                                      // 16427
	sorted: false,                                                                                                        // 16428
	requireSorting: false,                                                                                                // 16429
	noSharedTooltip: true,                                                                                                // 16430
	trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],                                                           // 16431
	takeOrdinalPosition: false, // #2342                                                                                  // 16432
	kdDimensions: 2,                                                                                                      // 16433
	drawGraph: function () {                                                                                              // 16434
		if (this.options.lineWidth) {                                                                                        // 16435
			Series.prototype.drawGraph.call(this);                                                                              // 16436
		}                                                                                                                    // 16437
	}                                                                                                                     // 16438
});                                                                                                                    // 16439
                                                                                                                       // 16440
seriesTypes.scatter = ScatterSeries;                                                                                   // 16441
                                                                                                                       // 16442
/**                                                                                                                    // 16443
 * Set the default options for pie                                                                                     // 16444
 */                                                                                                                    // 16445
defaultPlotOptions.pie = merge(defaultSeriesOptions, {                                                                 // 16446
	borderColor: '#FFFFFF',                                                                                               // 16447
	borderWidth: 1,                                                                                                       // 16448
	center: [null, null],                                                                                                 // 16449
	clip: false,                                                                                                          // 16450
	colorByPoint: true, // always true for pies                                                                           // 16451
	dataLabels: {                                                                                                         // 16452
		// align: null,                                                                                                      // 16453
		// connectorWidth: 1,                                                                                                // 16454
		// connectorColor: point.color,                                                                                      // 16455
		// connectorPadding: 5,                                                                                              // 16456
		distance: 30,                                                                                                        // 16457
		enabled: true,                                                                                                       // 16458
		formatter: function () { // #2945                                                                                    // 16459
			return this.point.name;                                                                                             // 16460
		},                                                                                                                   // 16461
		// softConnector: true,                                                                                              // 16462
		x: 0                                                                                                                 // 16463
		// y: 0                                                                                                              // 16464
	},                                                                                                                    // 16465
	ignoreHiddenPoint: true,                                                                                              // 16466
	//innerSize: 0,                                                                                                       // 16467
	legendType: 'point',                                                                                                  // 16468
	marker: null, // point options are specified in the base options                                                      // 16469
	size: null,                                                                                                           // 16470
	showInLegend: false,                                                                                                  // 16471
	slicedOffset: 10,                                                                                                     // 16472
	states: {                                                                                                             // 16473
		hover: {                                                                                                             // 16474
			brightness: 0.1,                                                                                                    // 16475
			shadow: false                                                                                                       // 16476
		}                                                                                                                    // 16477
	},                                                                                                                    // 16478
	stickyTracking: false,                                                                                                // 16479
	tooltip: {                                                                                                            // 16480
		followPointer: true                                                                                                  // 16481
	}                                                                                                                     // 16482
});                                                                                                                    // 16483
                                                                                                                       // 16484
/**                                                                                                                    // 16485
 * Extended point object for pies                                                                                      // 16486
 */                                                                                                                    // 16487
var PiePoint = extendClass(Point, {                                                                                    // 16488
	/**                                                                                                                   // 16489
	 * Initiate the pie slice                                                                                             // 16490
	 */                                                                                                                   // 16491
	init: function () {                                                                                                   // 16492
                                                                                                                       // 16493
		Point.prototype.init.apply(this, arguments);                                                                         // 16494
                                                                                                                       // 16495
		var point = this,                                                                                                    // 16496
			toggleSlice;                                                                                                        // 16497
                                                                                                                       // 16498
		extend(point, {                                                                                                      // 16499
			visible: point.visible !== false,                                                                                   // 16500
			name: pick(point.name, 'Slice')                                                                                     // 16501
		});                                                                                                                  // 16502
                                                                                                                       // 16503
		// add event listener for select                                                                                     // 16504
		toggleSlice = function (e) {                                                                                         // 16505
			point.slice(e.type === 'select');                                                                                   // 16506
		};                                                                                                                   // 16507
		addEvent(point, 'select', toggleSlice);                                                                              // 16508
		addEvent(point, 'unselect', toggleSlice);                                                                            // 16509
                                                                                                                       // 16510
		return point;                                                                                                        // 16511
	},                                                                                                                    // 16512
                                                                                                                       // 16513
	/**                                                                                                                   // 16514
	 * Toggle the visibility of the pie slice                                                                             // 16515
	 * @param {Boolean} vis Whether to show the slice or not. If undefined, the                                           // 16516
	 *    visibility is toggled                                                                                           // 16517
	 */                                                                                                                   // 16518
	setVisible: function (vis, redraw) {                                                                                  // 16519
		var point = this,                                                                                                    // 16520
			series = point.series,                                                                                              // 16521
			chart = series.chart,                                                                                               // 16522
			ignoreHiddenPoint = series.options.ignoreHiddenPoint;                                                               // 16523
		                                                                                                                     // 16524
		redraw = pick(redraw, ignoreHiddenPoint);                                                                            // 16525
                                                                                                                       // 16526
		if (vis !== point.visible) {                                                                                         // 16527
                                                                                                                       // 16528
			// If called without an argument, toggle visibility                                                                 // 16529
			point.visible = point.options.visible = vis = vis === UNDEFINED ? !point.visible : vis;                             // 16530
			series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data                        // 16531
                                                                                                                       // 16532
			// Show and hide associated elements. This is performed regardless of redraw or not,                                // 16533
			// because chart.redraw only handles full series.                                                                   // 16534
			each(['graphic', 'dataLabel', 'connector', 'shadowGroup'], function (key) {                                         // 16535
				if (point[key]) {                                                                                                  // 16536
					point[key][vis ? 'show' : 'hide'](true);                                                                          // 16537
				}                                                                                                                  // 16538
			});                                                                                                                 // 16539
                                                                                                                       // 16540
			if (point.legendItem) {                                                                                             // 16541
				chart.legend.colorizeItem(point, vis);                                                                             // 16542
			}                                                                                                                   // 16543
                                                                                                                       // 16544
			// #4170, hide halo after hiding point                                                                              // 16545
			if (!vis && point.state === 'hover') {                                                                              // 16546
				point.setState('');                                                                                                // 16547
			}                                                                                                                   // 16548
			                                                                                                                    // 16549
			// Handle ignore hidden slices                                                                                      // 16550
			if (ignoreHiddenPoint) {                                                                                            // 16551
				series.isDirty = true;                                                                                             // 16552
			}                                                                                                                   // 16553
                                                                                                                       // 16554
			if (redraw) {                                                                                                       // 16555
				chart.redraw();                                                                                                    // 16556
			}                                                                                                                   // 16557
		}                                                                                                                    // 16558
	},                                                                                                                    // 16559
                                                                                                                       // 16560
	/**                                                                                                                   // 16561
	 * Set or toggle whether the slice is cut out from the pie                                                            // 16562
	 * @param {Boolean} sliced When undefined, the slice state is toggled                                                 // 16563
	 * @param {Boolean} redraw Whether to redraw the chart. True by default.                                              // 16564
	 */                                                                                                                   // 16565
	slice: function (sliced, redraw, animation) {                                                                         // 16566
		var point = this,                                                                                                    // 16567
			series = point.series,                                                                                              // 16568
			chart = series.chart,                                                                                               // 16569
			translation;                                                                                                        // 16570
                                                                                                                       // 16571
		setAnimation(animation, chart);                                                                                      // 16572
                                                                                                                       // 16573
		// redraw is true by default                                                                                         // 16574
		redraw = pick(redraw, true);                                                                                         // 16575
                                                                                                                       // 16576
		// if called without an argument, toggle                                                                             // 16577
		point.sliced = point.options.sliced = sliced = defined(sliced) ? sliced : !point.sliced;                             // 16578
		series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data                         // 16579
                                                                                                                       // 16580
		translation = sliced ? point.slicedTranslation : {                                                                   // 16581
			translateX: 0,                                                                                                      // 16582
			translateY: 0                                                                                                       // 16583
		};                                                                                                                   // 16584
                                                                                                                       // 16585
		point.graphic.animate(translation);                                                                                  // 16586
		                                                                                                                     // 16587
		if (point.shadowGroup) {                                                                                             // 16588
			point.shadowGroup.animate(translation);                                                                             // 16589
		}                                                                                                                    // 16590
                                                                                                                       // 16591
	},                                                                                                                    // 16592
                                                                                                                       // 16593
	haloPath: function (size) {                                                                                           // 16594
		var shapeArgs = this.shapeArgs,                                                                                      // 16595
			chart = this.series.chart;                                                                                          // 16596
                                                                                                                       // 16597
		return this.sliced || !this.visible ? [] : this.series.chart.renderer.symbols.arc(chart.plotLeft + shapeArgs.x, chart.plotTop + shapeArgs.y, shapeArgs.r + size, shapeArgs.r + size, {
			innerR: this.shapeArgs.r,                                                                                           // 16599
			start: shapeArgs.start,                                                                                             // 16600
			end: shapeArgs.end                                                                                                  // 16601
		});                                                                                                                  // 16602
	}                                                                                                                     // 16603
});                                                                                                                    // 16604
                                                                                                                       // 16605
/**                                                                                                                    // 16606
 * The Pie series class                                                                                                // 16607
 */                                                                                                                    // 16608
var PieSeries = {                                                                                                      // 16609
	type: 'pie',                                                                                                          // 16610
	isCartesian: false,                                                                                                   // 16611
	pointClass: PiePoint,                                                                                                 // 16612
	requireSorting: false,                                                                                                // 16613
	directTouch: true,                                                                                                    // 16614
	noSharedTooltip: true,                                                                                                // 16615
	trackerGroups: ['group', 'dataLabelsGroup'],                                                                          // 16616
	axisTypes: [],                                                                                                        // 16617
	pointAttrToOptions: { // mapping between SVG attributes and the corresponding options                                 // 16618
		stroke: 'borderColor',                                                                                               // 16619
		'stroke-width': 'borderWidth',                                                                                       // 16620
		fill: 'color'                                                                                                        // 16621
	},                                                                                                                    // 16622
                                                                                                                       // 16623
	/**                                                                                                                   // 16624
	 * Pies have one color each point                                                                                     // 16625
	 */                                                                                                                   // 16626
	getColor: noop,                                                                                                       // 16627
                                                                                                                       // 16628
	/**                                                                                                                   // 16629
	 * Animate the pies in                                                                                                // 16630
	 */                                                                                                                   // 16631
	animate: function (init) {                                                                                            // 16632
		var series = this,                                                                                                   // 16633
			points = series.points,                                                                                             // 16634
			startAngleRad = series.startAngleRad;                                                                               // 16635
                                                                                                                       // 16636
		if (!init) {                                                                                                         // 16637
			each(points, function (point) {                                                                                     // 16638
				var graphic = point.graphic,                                                                                       // 16639
					args = point.shapeArgs;                                                                                           // 16640
                                                                                                                       // 16641
				if (graphic) {                                                                                                     // 16642
					// start values                                                                                                   // 16643
					graphic.attr({                                                                                                    // 16644
						r: point.startR || (series.center[3] / 2), // animate from inner radius (#779)                                   // 16645
						start: startAngleRad,                                                                                            // 16646
						end: startAngleRad                                                                                               // 16647
					});                                                                                                               // 16648
                                                                                                                       // 16649
					// animate                                                                                                        // 16650
					graphic.animate({                                                                                                 // 16651
						r: args.r,                                                                                                       // 16652
						start: args.start,                                                                                               // 16653
						end: args.end                                                                                                    // 16654
					}, series.options.animation);                                                                                     // 16655
				}                                                                                                                  // 16656
			});                                                                                                                 // 16657
                                                                                                                       // 16658
			// delete this function to allow it only once                                                                       // 16659
			series.animate = null;                                                                                              // 16660
		}                                                                                                                    // 16661
	},                                                                                                                    // 16662
                                                                                                                       // 16663
	/**                                                                                                                   // 16664
	 * Extend the basic setData method by running processData and generatePoints immediately,                             // 16665
	 * in order to access the points from the legend.                                                                     // 16666
	 */                                                                                                                   // 16667
	setData: function (data, redraw, animation, updatePoints) {                                                           // 16668
		Series.prototype.setData.call(this, data, false, animation, updatePoints);                                           // 16669
		this.processData();                                                                                                  // 16670
		this.generatePoints();                                                                                               // 16671
		if (pick(redraw, true)) {                                                                                            // 16672
			this.chart.redraw(animation);                                                                                       // 16673
		}                                                                                                                    // 16674
	},                                                                                                                    // 16675
                                                                                                                       // 16676
	/**                                                                                                                   // 16677
	 * Recompute total chart sum and update percentages of points.                                                        // 16678
	 */                                                                                                                   // 16679
	updateTotals: function () {                                                                                           // 16680
		var i,                                                                                                               // 16681
			total = 0,                                                                                                          // 16682
			points = this.points,                                                                                               // 16683
			len = points.length,                                                                                                // 16684
			point,                                                                                                              // 16685
			ignoreHiddenPoint = this.options.ignoreHiddenPoint;                                                                 // 16686
                                                                                                                       // 16687
		// Get the total sum                                                                                                 // 16688
		for (i = 0; i < len; i++) {                                                                                          // 16689
			point = points[i];                                                                                                  // 16690
			total += (ignoreHiddenPoint && !point.visible) ? 0 : point.y;                                                       // 16691
		}                                                                                                                    // 16692
		this.total = total;                                                                                                  // 16693
                                                                                                                       // 16694
		// Set each point's properties                                                                                       // 16695
		for (i = 0; i < len; i++) {                                                                                          // 16696
			point = points[i];                                                                                                  // 16697
			point.percentage = (total > 0 && (point.visible || !ignoreHiddenPoint)) ? point.y / total * 100 : 0;                // 16698
			point.total = total;                                                                                                // 16699
		}                                                                                                                    // 16700
	},                                                                                                                    // 16701
                                                                                                                       // 16702
	/**                                                                                                                   // 16703
	 * Extend the generatePoints method by adding total and percentage properties to each point                           // 16704
	 */                                                                                                                   // 16705
	generatePoints: function () {                                                                                         // 16706
		Series.prototype.generatePoints.call(this);                                                                          // 16707
		this.updateTotals();                                                                                                 // 16708
	},                                                                                                                    // 16709
	                                                                                                                      // 16710
	/**                                                                                                                   // 16711
	 * Do translation for pie slices                                                                                      // 16712
	 */                                                                                                                   // 16713
	translate: function (positions) {                                                                                     // 16714
		this.generatePoints();                                                                                               // 16715
		                                                                                                                     // 16716
		var series = this,                                                                                                   // 16717
			cumulative = 0,                                                                                                     // 16718
			precision = 1000, // issue #172                                                                                     // 16719
			options = series.options,                                                                                           // 16720
			slicedOffset = options.slicedOffset,                                                                                // 16721
			connectorOffset = slicedOffset + options.borderWidth,                                                               // 16722
			start,                                                                                                              // 16723
			end,                                                                                                                // 16724
			angle,                                                                                                              // 16725
			startAngle = options.startAngle || 0,                                                                               // 16726
			startAngleRad = series.startAngleRad = mathPI / 180 * (startAngle - 90),                                            // 16727
			endAngleRad = series.endAngleRad = mathPI / 180 * ((pick(options.endAngle, startAngle + 360)) - 90),                // 16728
			circ = endAngleRad - startAngleRad, //2 * mathPI,                                                                   // 16729
			points = series.points,                                                                                             // 16730
			radiusX, // the x component of the radius vector for a given point                                                  // 16731
			radiusY,                                                                                                            // 16732
			labelDistance = options.dataLabels.distance,                                                                        // 16733
			ignoreHiddenPoint = options.ignoreHiddenPoint,                                                                      // 16734
			i,                                                                                                                  // 16735
			len = points.length,                                                                                                // 16736
			point;                                                                                                              // 16737
                                                                                                                       // 16738
		// Get positions - either an integer or a percentage string must be given.                                           // 16739
		// If positions are passed as a parameter, we're in a recursive loop for adjusting                                   // 16740
		// space for data labels.                                                                                            // 16741
		if (!positions) {                                                                                                    // 16742
			series.center = positions = series.getCenter();                                                                     // 16743
		}                                                                                                                    // 16744
                                                                                                                       // 16745
		// utility for getting the x value from a given y, used for anticollision logic in data labels                       // 16746
		series.getX = function (y, left) {                                                                                   // 16747
                                                                                                                       // 16748
			angle = math.asin(mathMin((y - positions[1]) / (positions[2] / 2 + labelDistance), 1));                             // 16749
                                                                                                                       // 16750
			return positions[0] +                                                                                               // 16751
				(left ? -1 : 1) *                                                                                                  // 16752
				(mathCos(angle) * (positions[2] / 2 + labelDistance));                                                             // 16753
		};                                                                                                                   // 16754
                                                                                                                       // 16755
		// Calculate the geometry for each point                                                                             // 16756
		for (i = 0; i < len; i++) {                                                                                          // 16757
			                                                                                                                    // 16758
			point = points[i];                                                                                                  // 16759
			                                                                                                                    // 16760
			// set start and end angle                                                                                          // 16761
			start = startAngleRad + (cumulative * circ);                                                                        // 16762
			if (!ignoreHiddenPoint || point.visible) {                                                                          // 16763
				cumulative += point.percentage / 100;                                                                              // 16764
			}                                                                                                                   // 16765
			end = startAngleRad + (cumulative * circ);                                                                          // 16766
                                                                                                                       // 16767
			// set the shape                                                                                                    // 16768
			point.shapeType = 'arc';                                                                                            // 16769
			point.shapeArgs = {                                                                                                 // 16770
				x: positions[0],                                                                                                   // 16771
				y: positions[1],                                                                                                   // 16772
				r: positions[2] / 2,                                                                                               // 16773
				innerR: positions[3] / 2,                                                                                          // 16774
				start: mathRound(start * precision) / precision,                                                                   // 16775
				end: mathRound(end * precision) / precision                                                                        // 16776
			};                                                                                                                  // 16777
                                                                                                                       // 16778
			// The angle must stay within -90 and 270 (#2645)                                                                   // 16779
			angle = (end + start) / 2;                                                                                          // 16780
			if (angle > 1.5 * mathPI) {                                                                                         // 16781
				angle -= 2 * mathPI;                                                                                               // 16782
			} else if (angle < -mathPI / 2) {                                                                                   // 16783
				angle += 2 * mathPI;                                                                                               // 16784
			}                                                                                                                   // 16785
                                                                                                                       // 16786
			// Center for the sliced out slice                                                                                  // 16787
			point.slicedTranslation = {                                                                                         // 16788
				translateX: mathRound(mathCos(angle) * slicedOffset),                                                              // 16789
				translateY: mathRound(mathSin(angle) * slicedOffset)                                                               // 16790
			};                                                                                                                  // 16791
                                                                                                                       // 16792
			// set the anchor point for tooltips                                                                                // 16793
			radiusX = mathCos(angle) * positions[2] / 2;                                                                        // 16794
			radiusY = mathSin(angle) * positions[2] / 2;                                                                        // 16795
			point.tooltipPos = [                                                                                                // 16796
				positions[0] + radiusX * 0.7,                                                                                      // 16797
				positions[1] + radiusY * 0.7                                                                                       // 16798
			];                                                                                                                  // 16799
			                                                                                                                    // 16800
			point.half = angle < -mathPI / 2 || angle > mathPI / 2 ? 1 : 0;                                                     // 16801
			point.angle = angle;                                                                                                // 16802
                                                                                                                       // 16803
			// set the anchor point for data labels                                                                             // 16804
			connectorOffset = mathMin(connectorOffset, labelDistance / 2); // #1678                                             // 16805
			point.labelPos = [                                                                                                  // 16806
				positions[0] + radiusX + mathCos(angle) * labelDistance, // first break of connector                               // 16807
				positions[1] + radiusY + mathSin(angle) * labelDistance, // a/a                                                    // 16808
				positions[0] + radiusX + mathCos(angle) * connectorOffset, // second break, right outside pie                      // 16809
				positions[1] + radiusY + mathSin(angle) * connectorOffset, // a/a                                                  // 16810
				positions[0] + radiusX, // landing point for connector                                                             // 16811
				positions[1] + radiusY, // a/a                                                                                     // 16812
				labelDistance < 0 ? // alignment                                                                                   // 16813
					'center' :                                                                                                        // 16814
					point.half ? 'right' : 'left', // alignment                                                                       // 16815
				angle // center angle                                                                                              // 16816
			];                                                                                                                  // 16817
                                                                                                                       // 16818
		}                                                                                                                    // 16819
	},                                                                                                                    // 16820
	                                                                                                                      // 16821
	drawGraph: null,                                                                                                      // 16822
                                                                                                                       // 16823
	/**                                                                                                                   // 16824
	 * Draw the data points                                                                                               // 16825
	 */                                                                                                                   // 16826
	drawPoints: function () {                                                                                             // 16827
		var series = this,                                                                                                   // 16828
			chart = series.chart,                                                                                               // 16829
			renderer = chart.renderer,                                                                                          // 16830
			groupTranslation,                                                                                                   // 16831
			//center,                                                                                                           // 16832
			graphic,                                                                                                            // 16833
			//group,                                                                                                            // 16834
			shadow = series.options.shadow,                                                                                     // 16835
			shadowGroup,                                                                                                        // 16836
			shapeArgs,                                                                                                          // 16837
			attr;                                                                                                               // 16838
                                                                                                                       // 16839
		if (shadow && !series.shadowGroup) {                                                                                 // 16840
			series.shadowGroup = renderer.g('shadow')                                                                           // 16841
				.add(series.group);                                                                                                // 16842
		}                                                                                                                    // 16843
                                                                                                                       // 16844
		// draw the slices                                                                                                   // 16845
		each(series.points, function (point) {                                                                               // 16846
			graphic = point.graphic;                                                                                            // 16847
			shapeArgs = point.shapeArgs;                                                                                        // 16848
			shadowGroup = point.shadowGroup;                                                                                    // 16849
                                                                                                                       // 16850
			// put the shadow behind all points                                                                                 // 16851
			if (shadow && !shadowGroup) {                                                                                       // 16852
				shadowGroup = point.shadowGroup = renderer.g('shadow')                                                             // 16853
					.add(series.shadowGroup);                                                                                         // 16854
			}                                                                                                                   // 16855
                                                                                                                       // 16856
			// if the point is sliced, use special translation, else use plot area traslation                                   // 16857
			groupTranslation = point.sliced ? point.slicedTranslation : {                                                       // 16858
				translateX: 0,                                                                                                     // 16859
				translateY: 0                                                                                                      // 16860
			};                                                                                                                  // 16861
                                                                                                                       // 16862
			//group.translate(groupTranslation[0], groupTranslation[1]);                                                        // 16863
			if (shadowGroup) {                                                                                                  // 16864
				shadowGroup.attr(groupTranslation);                                                                                // 16865
			}                                                                                                                   // 16866
                                                                                                                       // 16867
			// draw the slice                                                                                                   // 16868
			if (graphic) {                                                                                                      // 16869
				graphic.animate(extend(shapeArgs, groupTranslation));				                                                          // 16870
			} else {                                                                                                            // 16871
				attr = { 'stroke-linejoin': 'round' };                                                                             // 16872
				if (!point.visible) {                                                                                              // 16873
					attr.visibility = 'hidden';                                                                                       // 16874
				}                                                                                                                  // 16875
                                                                                                                       // 16876
				point.graphic = graphic = renderer[point.shapeType](shapeArgs)                                                     // 16877
					.setRadialReference(series.center)                                                                                // 16878
					.attr(                                                                                                            // 16879
						point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE]                                                    // 16880
					)                                                                                                                 // 16881
					.attr(attr)                                                                                                       // 16882
					.attr(groupTranslation)                                                                                           // 16883
					.add(series.group)                                                                                                // 16884
					.shadow(shadow, shadowGroup);	                                                                                    // 16885
			}                                                                                                                   // 16886
                                                                                                                       // 16887
		});                                                                                                                  // 16888
                                                                                                                       // 16889
	},                                                                                                                    // 16890
                                                                                                                       // 16891
                                                                                                                       // 16892
	searchPoint: noop,                                                                                                    // 16893
                                                                                                                       // 16894
	/**                                                                                                                   // 16895
	 * Utility for sorting data labels                                                                                    // 16896
	 */                                                                                                                   // 16897
	sortByAngle: function (points, sign) {                                                                                // 16898
		points.sort(function (a, b) {                                                                                        // 16899
			return a.angle !== undefined && (b.angle - a.angle) * sign;                                                         // 16900
		});                                                                                                                  // 16901
	},		                                                                                                                  // 16902
                                                                                                                       // 16903
	/**                                                                                                                   // 16904
	 * Use a simple symbol from LegendSymbolMixin                                                                         // 16905
	 */                                                                                                                   // 16906
	drawLegendSymbol: LegendSymbolMixin.drawRectangle,                                                                    // 16907
                                                                                                                       // 16908
	/**                                                                                                                   // 16909
	 * Use the getCenter method from drawLegendSymbol                                                                     // 16910
	 */                                                                                                                   // 16911
	getCenter: CenteredSeriesMixin.getCenter,                                                                             // 16912
                                                                                                                       // 16913
	/**                                                                                                                   // 16914
	 * Pies don't have point marker symbols                                                                               // 16915
	 */                                                                                                                   // 16916
	getSymbol: noop                                                                                                       // 16917
                                                                                                                       // 16918
};                                                                                                                     // 16919
PieSeries = extendClass(Series, PieSeries);                                                                            // 16920
seriesTypes.pie = PieSeries;                                                                                           // 16921
                                                                                                                       // 16922
/**                                                                                                                    // 16923
 * Draw the data labels                                                                                                // 16924
 */                                                                                                                    // 16925
Series.prototype.drawDataLabels = function () {                                                                        // 16926
                                                                                                                       // 16927
	var series = this,                                                                                                    // 16928
		seriesOptions = series.options,                                                                                      // 16929
		cursor = seriesOptions.cursor,                                                                                       // 16930
		options = seriesOptions.dataLabels,                                                                                  // 16931
		points = series.points,                                                                                              // 16932
		pointOptions,                                                                                                        // 16933
		generalOptions,                                                                                                      // 16934
		hasRendered = series.hasRendered || 0,                                                                               // 16935
		str,                                                                                                                 // 16936
		dataLabelsGroup,                                                                                                     // 16937
		renderer = series.chart.renderer;                                                                                    // 16938
                                                                                                                       // 16939
	if (options.enabled || series._hasPointLabels) {                                                                      // 16940
                                                                                                                       // 16941
		// Process default alignment of data labels for columns                                                              // 16942
		if (series.dlProcessOptions) {                                                                                       // 16943
			series.dlProcessOptions(options);                                                                                   // 16944
		}                                                                                                                    // 16945
                                                                                                                       // 16946
		// Create a separate group for the data labels to avoid rotation                                                     // 16947
		dataLabelsGroup = series.plotGroup(                                                                                  // 16948
			'dataLabelsGroup',                                                                                                  // 16949
			'data-labels',                                                                                                      // 16950
			options.defer ? HIDDEN : VISIBLE,                                                                                   // 16951
			options.zIndex || 6                                                                                                 // 16952
		);                                                                                                                   // 16953
                                                                                                                       // 16954
		if (pick(options.defer, true)) {                                                                                     // 16955
			dataLabelsGroup.attr({ opacity: +hasRendered }); // #3300                                                           // 16956
			if (!hasRendered) {                                                                                                 // 16957
				addEvent(series, 'afterAnimate', function () {                                                                     // 16958
					if (series.visible) { // #3023, #3024                                                                             // 16959
						dataLabelsGroup.show();                                                                                          // 16960
					}                                                                                                                 // 16961
					dataLabelsGroup[seriesOptions.animation ? 'animate' : 'attr']({ opacity: 1 }, { duration: 200 });                 // 16962
				});                                                                                                                // 16963
			}                                                                                                                   // 16964
		}                                                                                                                    // 16965
                                                                                                                       // 16966
		// Make the labels for each point                                                                                    // 16967
		generalOptions = options;                                                                                            // 16968
		each(points, function (point) {                                                                                      // 16969
                                                                                                                       // 16970
			var enabled,                                                                                                        // 16971
				dataLabel = point.dataLabel,                                                                                       // 16972
				labelConfig,                                                                                                       // 16973
				attr,                                                                                                              // 16974
				name,                                                                                                              // 16975
				rotation,                                                                                                          // 16976
				connector = point.connector,                                                                                       // 16977
				isNew = true,                                                                                                      // 16978
				style,                                                                                                             // 16979
				moreStyle = {};                                                                                                    // 16980
                                                                                                                       // 16981
			// Determine if each data label is enabled                                                                          // 16982
			pointOptions = point.dlOptions || (point.options && point.options.dataLabels); // dlOptions is used in treemaps     // 16983
			enabled = pick(pointOptions && pointOptions.enabled, generalOptions.enabled); // #2282                              // 16984
                                                                                                                       // 16985
                                                                                                                       // 16986
			// If the point is outside the plot area, destroy it. #678, #820                                                    // 16987
			if (dataLabel && !enabled) {                                                                                        // 16988
				point.dataLabel = dataLabel.destroy();                                                                             // 16989
                                                                                                                       // 16990
			// Individual labels are disabled if the are explicitly disabled                                                    // 16991
			// in the point options, or if they fall outside the plot area.                                                     // 16992
			} else if (enabled) {                                                                                               // 16993
                                                                                                                       // 16994
				// Create individual options structure that can be extended without                                                // 16995
				// affecting others                                                                                                // 16996
				options = merge(generalOptions, pointOptions);                                                                     // 16997
				style = options.style;                                                                                             // 16998
                                                                                                                       // 16999
				rotation = options.rotation;                                                                                       // 17000
                                                                                                                       // 17001
				// Get the string                                                                                                  // 17002
				labelConfig = point.getLabelConfig();                                                                              // 17003
				str = options.format ?                                                                                             // 17004
					format(options.format, labelConfig) :                                                                             // 17005
					options.formatter.call(labelConfig, options);                                                                     // 17006
                                                                                                                       // 17007
				// Determine the color                                                                                             // 17008
				style.color = pick(options.color, style.color, series.color, 'black');                                             // 17009
                                                                                                                       // 17010
                                                                                                                       // 17011
				// update existing label                                                                                           // 17012
				if (dataLabel) {                                                                                                   // 17013
                                                                                                                       // 17014
					if (defined(str)) {                                                                                               // 17015
						dataLabel                                                                                                        // 17016
							.attr({                                                                                                         // 17017
								text: str                                                                                                      // 17018
							});                                                                                                             // 17019
						isNew = false;                                                                                                   // 17020
                                                                                                                       // 17021
					} else { // #1437 - the label is shown conditionally                                                              // 17022
						point.dataLabel = dataLabel = dataLabel.destroy();                                                               // 17023
						if (connector) {                                                                                                 // 17024
							point.connector = connector.destroy();                                                                          // 17025
						}                                                                                                                // 17026
					}                                                                                                                 // 17027
                                                                                                                       // 17028
				// create new label                                                                                                // 17029
				} else if (defined(str)) {                                                                                         // 17030
					attr = {                                                                                                          // 17031
						//align: align,                                                                                                  // 17032
						fill: options.backgroundColor,                                                                                   // 17033
						stroke: options.borderColor,                                                                                     // 17034
						'stroke-width': options.borderWidth,                                                                             // 17035
						r: options.borderRadius || 0,                                                                                    // 17036
						rotation: rotation,                                                                                              // 17037
						padding: options.padding,                                                                                        // 17038
						zIndex: 1                                                                                                        // 17039
					};                                                                                                                // 17040
					                                                                                                                  // 17041
					// Get automated contrast color                                                                                   // 17042
					if (style.color === 'contrast') {                                                                                 // 17043
						moreStyle.color = options.inside || options.distance < 0 || !!seriesOptions.stacking ?                           // 17044
							renderer.getContrast(point.color || series.color) :                                                             // 17045
							'#000000';                                                                                                      // 17046
					}                                                                                                                 // 17047
					if (cursor) {                                                                                                     // 17048
						moreStyle.cursor = cursor;                                                                                       // 17049
					}                                                                                                                 // 17050
					                                                                                                                  // 17051
                                                                                                                       // 17052
					// Remove unused attributes (#947)                                                                                // 17053
					for (name in attr) {                                                                                              // 17054
						if (attr[name] === UNDEFINED) {                                                                                  // 17055
							delete attr[name];                                                                                              // 17056
						}                                                                                                                // 17057
					}                                                                                                                 // 17058
                                                                                                                       // 17059
					dataLabel = point.dataLabel = renderer[rotation ? 'text' : 'label']( // labels don't support rotation             // 17060
						str,                                                                                                             // 17061
						0,                                                                                                               // 17062
						-999,                                                                                                            // 17063
						options.shape,                                                                                                   // 17064
						null,                                                                                                            // 17065
						null,                                                                                                            // 17066
						options.useHTML                                                                                                  // 17067
					)                                                                                                                 // 17068
					.attr(attr)                                                                                                       // 17069
					.css(extend(style, moreStyle))                                                                                    // 17070
					.add(dataLabelsGroup)                                                                                             // 17071
					.shadow(options.shadow);                                                                                          // 17072
                                                                                                                       // 17073
				}                                                                                                                  // 17074
                                                                                                                       // 17075
				if (dataLabel) {                                                                                                   // 17076
					// Now the data label is created and placed at 0,0, so we need to align it                                        // 17077
					series.alignDataLabel(point, dataLabel, options, null, isNew);                                                    // 17078
				}                                                                                                                  // 17079
			}                                                                                                                   // 17080
		});                                                                                                                  // 17081
	}                                                                                                                     // 17082
};                                                                                                                     // 17083
                                                                                                                       // 17084
/**                                                                                                                    // 17085
 * Align each individual data label                                                                                    // 17086
 */                                                                                                                    // 17087
Series.prototype.alignDataLabel = function (point, dataLabel, options, alignTo, isNew) {                               // 17088
	var chart = this.chart,                                                                                               // 17089
		inverted = chart.inverted,                                                                                           // 17090
		plotX = pick(point.plotX, -999),                                                                                     // 17091
		plotY = pick(point.plotY, -999),                                                                                     // 17092
		bBox = dataLabel.getBBox(),                                                                                          // 17093
		baseline = chart.renderer.fontMetrics(options.style.fontSize).b,                                                     // 17094
		rotCorr, // rotation correction                                                                                      // 17095
		// Math.round for rounding errors (#2683), alignTo to allow column labels (#2700)                                    // 17096
		visible = this.visible && (point.series.forceDL || chart.isInsidePlot(plotX, mathRound(plotY), inverted) ||          // 17097
			(alignTo && chart.isInsidePlot(plotX, inverted ? alignTo.x + 1 : alignTo.y + alignTo.height - 1, inverted))),       // 17098
		alignAttr; // the final position;                                                                                    // 17099
                                                                                                                       // 17100
	if (visible) {                                                                                                        // 17101
                                                                                                                       // 17102
		// The alignment box is a singular point                                                                             // 17103
		alignTo = extend({                                                                                                   // 17104
			x: inverted ? chart.plotWidth - plotY : plotX,                                                                      // 17105
			y: mathRound(inverted ? chart.plotHeight - plotX : plotY),                                                          // 17106
			width: 0,                                                                                                           // 17107
			height: 0                                                                                                           // 17108
		}, alignTo);                                                                                                         // 17109
                                                                                                                       // 17110
		// Add the text size for alignment calculation                                                                       // 17111
		extend(options, {                                                                                                    // 17112
			width: bBox.width,                                                                                                  // 17113
			height: bBox.height                                                                                                 // 17114
		});                                                                                                                  // 17115
                                                                                                                       // 17116
		// Allow a hook for changing alignment in the last moment, then do the alignment                                     // 17117
		if (options.rotation) { // Fancy box alignment isn't supported for rotated text                                      // 17118
			rotCorr = chart.renderer.rotCorr(baseline, options.rotation); // #3723                                              // 17119
			dataLabel[isNew ? 'attr' : 'animate']({                                                                             // 17120
					x: alignTo.x + options.x + alignTo.width / 2 + rotCorr.x,                                                         // 17121
					y: alignTo.y + options.y + alignTo.height / 2                                                                     // 17122
				})                                                                                                                 // 17123
				.attr({ // #3003                                                                                                   // 17124
					align: options.align                                                                                              // 17125
				});                                                                                                                // 17126
		} else {                                                                                                             // 17127
			dataLabel.align(options, null, alignTo);                                                                            // 17128
			alignAttr = dataLabel.alignAttr;                                                                                    // 17129
                                                                                                                       // 17130
			// Handle justify or crop                                                                                           // 17131
			if (pick(options.overflow, 'justify') === 'justify') {                                                              // 17132
				this.justifyDataLabel(dataLabel, options, alignAttr, bBox, alignTo, isNew);                                        // 17133
                                                                                                                       // 17134
			} else if (pick(options.crop, true)) {                                                                              // 17135
				// Now check that the data label is within the plot area                                                           // 17136
				visible = chart.isInsidePlot(alignAttr.x, alignAttr.y) && chart.isInsidePlot(alignAttr.x + bBox.width, alignAttr.y + bBox.height);
                                                                                                                       // 17138
			}                                                                                                                   // 17139
                                                                                                                       // 17140
			// When we're using a shape, make it possible with a connector or an arrow pointing to thie point                   // 17141
			if (options.shape) {                                                                                                // 17142
				dataLabel.attr({                                                                                                   // 17143
					anchorX: point.plotX,                                                                                             // 17144
					anchorY: point.plotY                                                                                              // 17145
				});                                                                                                                // 17146
			}                                                                                                                   // 17147
                                                                                                                       // 17148
		}                                                                                                                    // 17149
	}                                                                                                                     // 17150
                                                                                                                       // 17151
	// Show or hide based on the final aligned position                                                                   // 17152
	if (!visible) {                                                                                                       // 17153
		dataLabel.attr({ y: -999 });                                                                                         // 17154
		dataLabel.placed = false; // don't animate back in                                                                   // 17155
	}                                                                                                                     // 17156
                                                                                                                       // 17157
};                                                                                                                     // 17158
                                                                                                                       // 17159
/**                                                                                                                    // 17160
 * If data labels fall partly outside the plot area, align them back in, in a way that                                 // 17161
 * doesn't hide the point.                                                                                             // 17162
 */                                                                                                                    // 17163
Series.prototype.justifyDataLabel = function (dataLabel, options, alignAttr, bBox, alignTo, isNew) {                   // 17164
	var chart = this.chart,                                                                                               // 17165
		align = options.align,                                                                                               // 17166
		verticalAlign = options.verticalAlign,                                                                               // 17167
		off,                                                                                                                 // 17168
		justified,                                                                                                           // 17169
		padding = dataLabel.box ? 0 : (dataLabel.padding || 0);                                                              // 17170
                                                                                                                       // 17171
	// Off left                                                                                                           // 17172
	off = alignAttr.x + padding;                                                                                          // 17173
	if (off < 0) {                                                                                                        // 17174
		if (align === 'right') {                                                                                             // 17175
			options.align = 'left';                                                                                             // 17176
		} else {                                                                                                             // 17177
			options.x = -off;                                                                                                   // 17178
		}                                                                                                                    // 17179
		justified = true;                                                                                                    // 17180
	}                                                                                                                     // 17181
                                                                                                                       // 17182
	// Off right                                                                                                          // 17183
	off = alignAttr.x + bBox.width - padding;                                                                             // 17184
	if (off > chart.plotWidth) {                                                                                          // 17185
		if (align === 'left') {                                                                                              // 17186
			options.align = 'right';                                                                                            // 17187
		} else {                                                                                                             // 17188
			options.x = chart.plotWidth - off;                                                                                  // 17189
		}                                                                                                                    // 17190
		justified = true;                                                                                                    // 17191
	}                                                                                                                     // 17192
                                                                                                                       // 17193
	// Off top                                                                                                            // 17194
	off = alignAttr.y + padding;                                                                                          // 17195
	if (off < 0) {                                                                                                        // 17196
		if (verticalAlign === 'bottom') {                                                                                    // 17197
			options.verticalAlign = 'top';                                                                                      // 17198
		} else {                                                                                                             // 17199
			options.y = -off;                                                                                                   // 17200
		}                                                                                                                    // 17201
		justified = true;                                                                                                    // 17202
	}                                                                                                                     // 17203
                                                                                                                       // 17204
	// Off bottom                                                                                                         // 17205
	off = alignAttr.y + bBox.height - padding;                                                                            // 17206
	if (off > chart.plotHeight) {                                                                                         // 17207
		if (verticalAlign === 'top') {                                                                                       // 17208
			options.verticalAlign = 'bottom';                                                                                   // 17209
		} else {                                                                                                             // 17210
			options.y = chart.plotHeight - off;                                                                                 // 17211
		}                                                                                                                    // 17212
		justified = true;                                                                                                    // 17213
	}                                                                                                                     // 17214
                                                                                                                       // 17215
	if (justified) {                                                                                                      // 17216
		dataLabel.placed = !isNew;                                                                                           // 17217
		dataLabel.align(options, null, alignTo);                                                                             // 17218
	}                                                                                                                     // 17219
};                                                                                                                     // 17220
                                                                                                                       // 17221
/**                                                                                                                    // 17222
 * Override the base drawDataLabels method by pie specific functionality                                               // 17223
 */                                                                                                                    // 17224
if (seriesTypes.pie) {                                                                                                 // 17225
	seriesTypes.pie.prototype.drawDataLabels = function () {                                                              // 17226
		var series = this,                                                                                                   // 17227
			data = series.data,                                                                                                 // 17228
			point,                                                                                                              // 17229
			chart = series.chart,                                                                                               // 17230
			options = series.options.dataLabels,                                                                                // 17231
			connectorPadding = pick(options.connectorPadding, 10),                                                              // 17232
			connectorWidth = pick(options.connectorWidth, 1),                                                                   // 17233
			plotWidth = chart.plotWidth,                                                                                        // 17234
			plotHeight = chart.plotHeight,                                                                                      // 17235
			connector,                                                                                                          // 17236
			connectorPath,                                                                                                      // 17237
			softConnector = pick(options.softConnector, true),                                                                  // 17238
			distanceOption = options.distance,                                                                                  // 17239
			seriesCenter = series.center,                                                                                       // 17240
			radius = seriesCenter[2] / 2,                                                                                       // 17241
			centerY = seriesCenter[1],                                                                                          // 17242
			outside = distanceOption > 0,                                                                                       // 17243
			dataLabel,                                                                                                          // 17244
			dataLabelWidth,                                                                                                     // 17245
			labelPos,                                                                                                           // 17246
			labelHeight,                                                                                                        // 17247
			halves = [// divide the points into right and left halves for anti collision                                        // 17248
				[], // right                                                                                                       // 17249
				[]  // left                                                                                                        // 17250
			],                                                                                                                  // 17251
			x,                                                                                                                  // 17252
			y,                                                                                                                  // 17253
			visibility,                                                                                                         // 17254
			rankArr,                                                                                                            // 17255
			i,                                                                                                                  // 17256
			j,                                                                                                                  // 17257
			overflow = [0, 0, 0, 0], // top, right, bottom, left                                                                // 17258
			sort = function (a, b) {                                                                                            // 17259
				return b.y - a.y;                                                                                                  // 17260
			};                                                                                                                  // 17261
                                                                                                                       // 17262
		// get out if not enabled                                                                                            // 17263
		if (!series.visible || (!options.enabled && !series._hasPointLabels)) {                                              // 17264
			return;                                                                                                             // 17265
		}                                                                                                                    // 17266
                                                                                                                       // 17267
		// run parent method                                                                                                 // 17268
		Series.prototype.drawDataLabels.apply(series);                                                                       // 17269
                                                                                                                       // 17270
		// arrange points for detection collision                                                                            // 17271
		each(data, function (point) {                                                                                        // 17272
			if (point.dataLabel && point.visible) { // #407, #2510                                                              // 17273
				halves[point.half].push(point);                                                                                    // 17274
			}                                                                                                                   // 17275
		});                                                                                                                  // 17276
                                                                                                                       // 17277
		/* Loop over the points in each half, starting from the top and bottom                                               // 17278
		 * of the pie to detect overlapping labels.                                                                          // 17279
		 */                                                                                                                  // 17280
		i = 2;                                                                                                               // 17281
		while (i--) {                                                                                                        // 17282
                                                                                                                       // 17283
			var slots = [],                                                                                                     // 17284
				slotsLength,                                                                                                       // 17285
				usedSlots = [],                                                                                                    // 17286
				points = halves[i],                                                                                                // 17287
				pos,                                                                                                               // 17288
				bottom,                                                                                                            // 17289
				length = points.length,                                                                                            // 17290
				slotIndex;                                                                                                         // 17291
                                                                                                                       // 17292
			if (!length) {                                                                                                      // 17293
				continue;                                                                                                          // 17294
			}                                                                                                                   // 17295
                                                                                                                       // 17296
			// Sort by angle                                                                                                    // 17297
			series.sortByAngle(points, i - 0.5);                                                                                // 17298
                                                                                                                       // 17299
			// Assume equal label heights on either hemisphere (#2630)                                                          // 17300
			j = labelHeight = 0;                                                                                                // 17301
			while (!labelHeight && points[j]) { // #1569                                                                        // 17302
				labelHeight = points[j] && points[j].dataLabel && (points[j].dataLabel.getBBox().height || 21); // 21 is for #968  // 17303
				j++;                                                                                                               // 17304
			}                                                                                                                   // 17305
                                                                                                                       // 17306
			// Only do anti-collision when we are outside the pie and have connectors (#856)                                    // 17307
			if (distanceOption > 0) {                                                                                           // 17308
                                                                                                                       // 17309
				// Build the slots                                                                                                 // 17310
				bottom = mathMin(centerY + radius + distanceOption, chart.plotHeight);                                             // 17311
				for (pos = mathMax(0, centerY - radius - distanceOption); pos <= bottom; pos += labelHeight) {                     // 17312
					slots.push(pos);                                                                                                  // 17313
				}                                                                                                                  // 17314
				slotsLength = slots.length;                                                                                        // 17315
                                                                                                                       // 17316
                                                                                                                       // 17317
				/* Visualize the slots                                                                                             // 17318
				if (!series.slotElements) {                                                                                        // 17319
					series.slotElements = [];                                                                                         // 17320
				}                                                                                                                  // 17321
				if (i === 1) {                                                                                                     // 17322
					series.slotElements.forEach(function (elem) {                                                                     // 17323
						elem.destroy();                                                                                                  // 17324
					});                                                                                                               // 17325
					series.slotElements.length = 0;                                                                                   // 17326
				}                                                                                                                  // 17327
					                                                                                                                  // 17328
				slots.forEach(function (pos, no) {                                                                                 // 17329
					var slotX = series.getX(pos, i) + chart.plotLeft - (i ? 100 : 0),                                                 // 17330
						slotY = pos + chart.plotTop;                                                                                     // 17331
					                                                                                                                  // 17332
					if (!isNaN(slotX)) {                                                                                              // 17333
						series.slotElements.push(chart.renderer.rect(slotX, slotY - 7, 100, labelHeight, 1)                              // 17334
							.attr({                                                                                                         // 17335
								'stroke-width': 1,                                                                                             // 17336
								stroke: 'silver',                                                                                              // 17337
								fill: 'rgba(0,0,255,0.1)'                                                                                      // 17338
							})                                                                                                              // 17339
							.add());                                                                                                        // 17340
						series.slotElements.push(chart.renderer.text('Slot '+ no, slotX, slotY + 4)                                      // 17341
							.attr({                                                                                                         // 17342
								fill: 'silver'                                                                                                 // 17343
							}).add());                                                                                                      // 17344
					}                                                                                                                 // 17345
				});                                                                                                                // 17346
				// */                                                                                                              // 17347
                                                                                                                       // 17348
				// if there are more values than available slots, remove lowest values                                             // 17349
				if (length > slotsLength) {                                                                                        // 17350
					// create an array for sorting and ranking the points within each quarter                                         // 17351
					rankArr = [].concat(points);                                                                                      // 17352
					rankArr.sort(sort);                                                                                               // 17353
					j = length;                                                                                                       // 17354
					while (j--) {                                                                                                     // 17355
						rankArr[j].rank = j;                                                                                             // 17356
					}                                                                                                                 // 17357
					j = length;                                                                                                       // 17358
					while (j--) {                                                                                                     // 17359
						if (points[j].rank >= slotsLength) {                                                                             // 17360
							points.splice(j, 1);                                                                                            // 17361
						}                                                                                                                // 17362
					}                                                                                                                 // 17363
					length = points.length;                                                                                           // 17364
				}                                                                                                                  // 17365
                                                                                                                       // 17366
				// The label goes to the nearest open slot, but not closer to the edge than                                        // 17367
				// the label's index.                                                                                              // 17368
				for (j = 0; j < length; j++) {                                                                                     // 17369
                                                                                                                       // 17370
					point = points[j];                                                                                                // 17371
					labelPos = point.labelPos;                                                                                        // 17372
                                                                                                                       // 17373
					var closest = 9999,                                                                                               // 17374
						distance,                                                                                                        // 17375
						slotI;                                                                                                           // 17376
                                                                                                                       // 17377
					// find the closest slot index                                                                                    // 17378
					for (slotI = 0; slotI < slotsLength; slotI++) {                                                                   // 17379
						distance = mathAbs(slots[slotI] - labelPos[1]);                                                                  // 17380
						if (distance < closest) {                                                                                        // 17381
							closest = distance;                                                                                             // 17382
							slotIndex = slotI;                                                                                              // 17383
						}                                                                                                                // 17384
					}                                                                                                                 // 17385
                                                                                                                       // 17386
					// if that slot index is closer to the edges of the slots, move it                                                // 17387
					// to the closest appropriate slot                                                                                // 17388
					if (slotIndex < j && slots[j] !== null) { // cluster at the top                                                   // 17389
						slotIndex = j;                                                                                                   // 17390
					} else if (slotsLength  < length - j + slotIndex && slots[j] !== null) { // cluster at the bottom                 // 17391
						slotIndex = slotsLength - length + j;                                                                            // 17392
						while (slots[slotIndex] === null) { // make sure it is not taken                                                 // 17393
							slotIndex++;                                                                                                    // 17394
						}                                                                                                                // 17395
					} else {                                                                                                          // 17396
						// Slot is taken, find next free slot below. In the next run, the next slice will find the                       // 17397
						// slot above these, because it is the closest one                                                               // 17398
						while (slots[slotIndex] === null) { // make sure it is not taken                                                 // 17399
							slotIndex++;                                                                                                    // 17400
						}                                                                                                                // 17401
					}                                                                                                                 // 17402
                                                                                                                       // 17403
					usedSlots.push({ i: slotIndex, y: slots[slotIndex] });                                                            // 17404
					slots[slotIndex] = null; // mark as taken                                                                         // 17405
				}                                                                                                                  // 17406
				// sort them in order to fill in from the top                                                                      // 17407
				usedSlots.sort(sort);                                                                                              // 17408
			}                                                                                                                   // 17409
                                                                                                                       // 17410
			// now the used slots are sorted, fill them up sequentially                                                         // 17411
			for (j = 0; j < length; j++) {                                                                                      // 17412
                                                                                                                       // 17413
				var slot, naturalY;                                                                                                // 17414
                                                                                                                       // 17415
				point = points[j];                                                                                                 // 17416
				labelPos = point.labelPos;                                                                                         // 17417
				dataLabel = point.dataLabel;                                                                                       // 17418
				visibility = point.visible === false ? HIDDEN : 'inherit';                                                         // 17419
				naturalY = labelPos[1];                                                                                            // 17420
                                                                                                                       // 17421
				if (distanceOption > 0) {                                                                                          // 17422
					slot = usedSlots.pop();                                                                                           // 17423
					slotIndex = slot.i;                                                                                               // 17424
                                                                                                                       // 17425
					// if the slot next to currrent slot is free, the y value is allowed                                              // 17426
					// to fall back to the natural position                                                                           // 17427
					y = slot.y;                                                                                                       // 17428
					if ((naturalY > y && slots[slotIndex + 1] !== null) ||                                                            // 17429
							(naturalY < y &&  slots[slotIndex - 1] !== null)) {                                                             // 17430
						y = mathMin(mathMax(0, naturalY), chart.plotHeight);                                                             // 17431
					}                                                                                                                 // 17432
                                                                                                                       // 17433
				} else {                                                                                                           // 17434
					y = naturalY;                                                                                                     // 17435
				}                                                                                                                  // 17436
                                                                                                                       // 17437
				// get the x - use the natural x position for first and last slot, to prevent the top                              // 17438
				// and botton slice connectors from touching each other on either side                                             // 17439
				x = options.justify ?                                                                                              // 17440
					seriesCenter[0] + (i ? -1 : 1) * (radius + distanceOption) :                                                      // 17441
					series.getX(y === centerY - radius - distanceOption || y === centerY + radius + distanceOption ? naturalY : y, i);
                                                                                                                       // 17443
                                                                                                                       // 17444
				// Record the placement and visibility                                                                             // 17445
				dataLabel._attr = {                                                                                                // 17446
					visibility: visibility,                                                                                           // 17447
					align: labelPos[6]                                                                                                // 17448
				};                                                                                                                 // 17449
				dataLabel._pos = {                                                                                                 // 17450
					x: x + options.x +                                                                                                // 17451
						({ left: connectorPadding, right: -connectorPadding }[labelPos[6]] || 0),                                        // 17452
					y: y + options.y - 10 // 10 is for the baseline (label vs text)                                                   // 17453
				};                                                                                                                 // 17454
				dataLabel.connX = x;                                                                                               // 17455
				dataLabel.connY = y;                                                                                               // 17456
                                                                                                                       // 17457
                                                                                                                       // 17458
				// Detect overflowing data labels                                                                                  // 17459
				if (this.options.size === null) {                                                                                  // 17460
					dataLabelWidth = dataLabel.width;                                                                                 // 17461
					// Overflow left                                                                                                  // 17462
					if (x - dataLabelWidth < connectorPadding) {                                                                      // 17463
						overflow[3] = mathMax(mathRound(dataLabelWidth - x + connectorPadding), overflow[3]);                            // 17464
                                                                                                                       // 17465
					// Overflow right                                                                                                 // 17466
					} else if (x + dataLabelWidth > plotWidth - connectorPadding) {                                                   // 17467
						overflow[1] = mathMax(mathRound(x + dataLabelWidth - plotWidth + connectorPadding), overflow[1]);                // 17468
					}                                                                                                                 // 17469
                                                                                                                       // 17470
					// Overflow top                                                                                                   // 17471
					if (y - labelHeight / 2 < 0) {                                                                                    // 17472
						overflow[0] = mathMax(mathRound(-y + labelHeight / 2), overflow[0]);                                             // 17473
                                                                                                                       // 17474
					// Overflow left                                                                                                  // 17475
					} else if (y + labelHeight / 2 > plotHeight) {                                                                    // 17476
						overflow[2] = mathMax(mathRound(y + labelHeight / 2 - plotHeight), overflow[2]);                                 // 17477
					}                                                                                                                 // 17478
				}                                                                                                                  // 17479
			} // for each point                                                                                                 // 17480
		} // for each half                                                                                                   // 17481
                                                                                                                       // 17482
		// Do not apply the final placement and draw the connectors until we have verified                                   // 17483
		// that labels are not spilling over.                                                                                // 17484
		if (arrayMax(overflow) === 0 || this.verifyDataLabelOverflow(overflow)) {                                            // 17485
                                                                                                                       // 17486
			// Place the labels in the final position                                                                           // 17487
			this.placeDataLabels();                                                                                             // 17488
                                                                                                                       // 17489
			// Draw the connectors                                                                                              // 17490
			if (outside && connectorWidth) {                                                                                    // 17491
				each(this.points, function (point) {                                                                               // 17492
					connector = point.connector;                                                                                      // 17493
					labelPos = point.labelPos;                                                                                        // 17494
					dataLabel = point.dataLabel;                                                                                      // 17495
                                                                                                                       // 17496
					if (dataLabel && dataLabel._pos && point.visible) {                                                               // 17497
						visibility = dataLabel._attr.visibility;                                                                         // 17498
						x = dataLabel.connX;                                                                                             // 17499
						y = dataLabel.connY;                                                                                             // 17500
						connectorPath = softConnector ? [                                                                                // 17501
							M,                                                                                                              // 17502
							x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label                                     // 17503
							'C',                                                                                                            // 17504
							x, y, // first break, next to the label                                                                         // 17505
							2 * labelPos[2] - labelPos[4], 2 * labelPos[3] - labelPos[5],                                                   // 17506
							labelPos[2], labelPos[3], // second break                                                                       // 17507
							L,                                                                                                              // 17508
							labelPos[4], labelPos[5] // base                                                                                // 17509
						] : [                                                                                                            // 17510
							M,                                                                                                              // 17511
							x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label                                     // 17512
							L,                                                                                                              // 17513
							labelPos[2], labelPos[3], // second break                                                                       // 17514
							L,                                                                                                              // 17515
							labelPos[4], labelPos[5] // base                                                                                // 17516
						];                                                                                                               // 17517
                                                                                                                       // 17518
						if (connector) {                                                                                                 // 17519
							connector.animate({ d: connectorPath });                                                                        // 17520
							connector.attr('visibility', visibility);                                                                       // 17521
                                                                                                                       // 17522
						} else {                                                                                                         // 17523
							point.connector = connector = series.chart.renderer.path(connectorPath).attr({                                  // 17524
								'stroke-width': connectorWidth,                                                                                // 17525
								stroke: options.connectorColor || point.color || '#606060',                                                    // 17526
								visibility: visibility                                                                                         // 17527
								//zIndex: 0 // #2722 (reversed)                                                                                // 17528
							})                                                                                                              // 17529
							.add(series.dataLabelsGroup);                                                                                   // 17530
						}                                                                                                                // 17531
					} else if (connector) {                                                                                           // 17532
						point.connector = connector.destroy();                                                                           // 17533
					}                                                                                                                 // 17534
				});                                                                                                                // 17535
			}                                                                                                                   // 17536
		}                                                                                                                    // 17537
	};                                                                                                                    // 17538
	/**                                                                                                                   // 17539
	 * Perform the final placement of the data labels after we have verified that they                                    // 17540
	 * fall within the plot area.                                                                                         // 17541
	 */                                                                                                                   // 17542
	seriesTypes.pie.prototype.placeDataLabels = function () {                                                             // 17543
		each(this.points, function (point) {                                                                                 // 17544
			var dataLabel = point.dataLabel,                                                                                    // 17545
				_pos;                                                                                                              // 17546
                                                                                                                       // 17547
			if (dataLabel && point.visible) {                                                                                   // 17548
				_pos = dataLabel._pos;                                                                                             // 17549
				if (_pos) {                                                                                                        // 17550
					dataLabel.attr(dataLabel._attr);                                                                                  // 17551
					dataLabel[dataLabel.moved ? 'animate' : 'attr'](_pos);                                                            // 17552
					dataLabel.moved = true;                                                                                           // 17553
				} else if (dataLabel) {                                                                                            // 17554
					dataLabel.attr({ y: -999 });                                                                                      // 17555
				}                                                                                                                  // 17556
			}                                                                                                                   // 17557
		});                                                                                                                  // 17558
	};                                                                                                                    // 17559
                                                                                                                       // 17560
	seriesTypes.pie.prototype.alignDataLabel =  noop;                                                                     // 17561
                                                                                                                       // 17562
	/**                                                                                                                   // 17563
	 * Verify whether the data labels are allowed to draw, or we should run more translation and data                     // 17564
	 * label positioning to keep them inside the plot area. Returns true when data labels are ready                       // 17565
	 * to draw.                                                                                                           // 17566
	 */                                                                                                                   // 17567
	seriesTypes.pie.prototype.verifyDataLabelOverflow = function (overflow) {                                             // 17568
                                                                                                                       // 17569
		var center = this.center,                                                                                            // 17570
			options = this.options,                                                                                             // 17571
			centerOption = options.center,                                                                                      // 17572
			minSize = options.minSize || 80,                                                                                    // 17573
			newSize = minSize,                                                                                                  // 17574
			ret;                                                                                                                // 17575
                                                                                                                       // 17576
		// Handle horizontal size and center                                                                                 // 17577
		if (centerOption[0] !== null) { // Fixed center                                                                      // 17578
			newSize = mathMax(center[2] - mathMax(overflow[1], overflow[3]), minSize);                                          // 17579
                                                                                                                       // 17580
		} else { // Auto center                                                                                              // 17581
			newSize = mathMax(                                                                                                  // 17582
				center[2] - overflow[1] - overflow[3], // horizontal overflow                                                      // 17583
				minSize                                                                                                            // 17584
			);                                                                                                                  // 17585
			center[0] += (overflow[3] - overflow[1]) / 2; // horizontal center                                                  // 17586
		}                                                                                                                    // 17587
                                                                                                                       // 17588
		// Handle vertical size and center                                                                                   // 17589
		if (centerOption[1] !== null) { // Fixed center                                                                      // 17590
			newSize = mathMax(mathMin(newSize, center[2] - mathMax(overflow[0], overflow[2])), minSize);                        // 17591
                                                                                                                       // 17592
		} else { // Auto center                                                                                              // 17593
			newSize = mathMax(                                                                                                  // 17594
				mathMin(                                                                                                           // 17595
					newSize,                                                                                                          // 17596
					center[2] - overflow[0] - overflow[2] // vertical overflow                                                        // 17597
				),                                                                                                                 // 17598
				minSize                                                                                                            // 17599
			);                                                                                                                  // 17600
			center[1] += (overflow[0] - overflow[2]) / 2; // vertical center                                                    // 17601
		}                                                                                                                    // 17602
                                                                                                                       // 17603
		// If the size must be decreased, we need to run translate and drawDataLabels again                                  // 17604
		if (newSize < center[2]) {                                                                                           // 17605
			center[2] = newSize;                                                                                                // 17606
			center[3] = relativeLength(options.innerSize || 0, newSize);                                                        // 17607
			this.translate(center);                                                                                             // 17608
			each(this.points, function (point) {                                                                                // 17609
				if (point.dataLabel) {                                                                                             // 17610
					point.dataLabel._pos = null; // reset                                                                             // 17611
				}                                                                                                                  // 17612
			});                                                                                                                 // 17613
                                                                                                                       // 17614
			if (this.drawDataLabels) {                                                                                          // 17615
				this.drawDataLabels();                                                                                             // 17616
			}                                                                                                                   // 17617
		// Else, return true to indicate that the pie and its labels is within the plot area                                 // 17618
		} else {                                                                                                             // 17619
			ret = true;                                                                                                         // 17620
		}                                                                                                                    // 17621
		return ret;                                                                                                          // 17622
	};                                                                                                                    // 17623
}                                                                                                                      // 17624
                                                                                                                       // 17625
if (seriesTypes.column) {                                                                                              // 17626
                                                                                                                       // 17627
	/**                                                                                                                   // 17628
	 * Override the basic data label alignment by adjusting for the position of the column                                // 17629
	 */                                                                                                                   // 17630
	seriesTypes.column.prototype.alignDataLabel = function (point, dataLabel, options,  alignTo, isNew) {                 // 17631
		var inverted = this.chart.inverted,                                                                                  // 17632
			series = point.series,                                                                                              // 17633
			dlBox = point.dlBox || point.shapeArgs, // data label box for alignment                                             // 17634
			below = pick(point.below, point.plotY > pick(this.translatedThreshold, series.yAxis.len)), // point.below is used in range series
			inside = pick(options.inside, !!this.options.stacking); // draw it inside the box?                                  // 17636
                                                                                                                       // 17637
		// Align to the column itself, or the top of it                                                                      // 17638
		if (dlBox) { // Area range uses this method but not alignTo                                                          // 17639
			alignTo = merge(dlBox);                                                                                             // 17640
                                                                                                                       // 17641
			if (inverted) {                                                                                                     // 17642
				alignTo = {                                                                                                        // 17643
					x: series.yAxis.len - alignTo.y - alignTo.height,                                                                 // 17644
					y: series.xAxis.len - alignTo.x - alignTo.width,                                                                  // 17645
					width: alignTo.height,                                                                                            // 17646
					height: alignTo.width                                                                                             // 17647
				};                                                                                                                 // 17648
			}                                                                                                                   // 17649
                                                                                                                       // 17650
			// Compute the alignment box                                                                                        // 17651
			if (!inside) {                                                                                                      // 17652
				if (inverted) {                                                                                                    // 17653
					alignTo.x += below ? 0 : alignTo.width;                                                                           // 17654
					alignTo.width = 0;                                                                                                // 17655
				} else {                                                                                                           // 17656
					alignTo.y += below ? alignTo.height : 0;                                                                          // 17657
					alignTo.height = 0;                                                                                               // 17658
				}                                                                                                                  // 17659
			}                                                                                                                   // 17660
		}                                                                                                                    // 17661
                                                                                                                       // 17662
                                                                                                                       // 17663
		// When alignment is undefined (typically columns and bars), display the individual                                  // 17664
		// point below or above the point depending on the threshold                                                         // 17665
		options.align = pick(                                                                                                // 17666
			options.align,                                                                                                      // 17667
			!inverted || inside ? 'center' : below ? 'right' : 'left'                                                           // 17668
		);                                                                                                                   // 17669
		options.verticalAlign = pick(                                                                                        // 17670
			options.verticalAlign,                                                                                              // 17671
			inverted || inside ? 'middle' : below ? 'top' : 'bottom'                                                            // 17672
		);                                                                                                                   // 17673
                                                                                                                       // 17674
		// Call the parent method                                                                                            // 17675
		Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);                               // 17676
	};                                                                                                                    // 17677
}                                                                                                                      // 17678
                                                                                                                       // 17679
                                                                                                                       // 17680
                                                                                                                       // 17681
/**                                                                                                                    // 17682
 * Highcharts JS v4.1.7 (2015-06-26)                                                                                   // 17683
 * Highcharts module to hide overlapping data labels. This module is included by default in Highmaps.                  // 17684
 *                                                                                                                     // 17685
 * (c) 2010-2014 Torstein Honsi                                                                                        // 17686
 *                                                                                                                     // 17687
 * License: www.highcharts.com/license                                                                                 // 17688
 */                                                                                                                    // 17689
                                                                                                                       // 17690
/*global Highcharts, HighchartsAdapter */                                                                              // 17691
(function (H) {                                                                                                        // 17692
	var Chart = H.Chart,                                                                                                  // 17693
		each = H.each,                                                                                                       // 17694
		pick = H.pick,                                                                                                       // 17695
		addEvent = HighchartsAdapter.addEvent;                                                                               // 17696
                                                                                                                       // 17697
	// Collect potensial overlapping data labels. Stack labels probably don't need to be                                  // 17698
	// considered because they are usually accompanied by data labels that lie inside the columns.                        // 17699
	Chart.prototype.callbacks.push(function (chart) {                                                                     // 17700
		function collectAndHide() {                                                                                          // 17701
			var labels = [];                                                                                                    // 17702
                                                                                                                       // 17703
			each(chart.series, function (series) {                                                                              // 17704
				var dlOptions = series.options.dataLabels;                                                                         // 17705
				if ((dlOptions.enabled || series._hasPointLabels) && !dlOptions.allowOverlap && series.visible) { // #3866         // 17706
					each(series.points, function (point) {                                                                            // 17707
						if (point.dataLabel) {                                                                                           // 17708
							point.dataLabel.labelrank = pick(point.labelrank, point.shapeArgs && point.shapeArgs.height); // #4118          // 17709
							labels.push(point.dataLabel);                                                                                   // 17710
						}                                                                                                                // 17711
					});                                                                                                               // 17712
				}                                                                                                                  // 17713
			});                                                                                                                 // 17714
			chart.hideOverlappingLabels(labels);                                                                                // 17715
		}                                                                                                                    // 17716
                                                                                                                       // 17717
		// Do it now ...                                                                                                     // 17718
		collectAndHide();                                                                                                    // 17719
                                                                                                                       // 17720
		// ... and after each chart redraw                                                                                   // 17721
		addEvent(chart, 'redraw', collectAndHide);                                                                           // 17722
                                                                                                                       // 17723
	});                                                                                                                   // 17724
                                                                                                                       // 17725
	/**                                                                                                                   // 17726
	 * Hide overlapping labels. Labels are moved and faded in and out on zoom to provide a smooth                         // 17727
	 * visual imression.                                                                                                  // 17728
	 */		                                                                                                                 // 17729
	Chart.prototype.hideOverlappingLabels = function (labels) {                                                           // 17730
                                                                                                                       // 17731
		var len = labels.length,                                                                                             // 17732
			label,                                                                                                              // 17733
			i,                                                                                                                  // 17734
			j,                                                                                                                  // 17735
			label1,                                                                                                             // 17736
			label2,                                                                                                             // 17737
			intersectRect = function (pos1, pos2, size1, size2) {                                                               // 17738
				return !(                                                                                                          // 17739
					pos2.x > pos1.x + size1.width ||                                                                                  // 17740
					pos2.x + size2.width < pos1.x ||                                                                                  // 17741
					pos2.y > pos1.y + size1.height ||                                                                                 // 17742
					pos2.y + size2.height < pos1.y                                                                                    // 17743
				);                                                                                                                 // 17744
			};                                                                                                                  // 17745
	                                                                                                                      // 17746
		// Mark with initial opacity                                                                                         // 17747
		for (i = 0; i < len; i++) {                                                                                          // 17748
			label = labels[i];                                                                                                  // 17749
			if (label) {                                                                                                        // 17750
				label.oldOpacity = label.opacity;                                                                                  // 17751
				label.newOpacity = 1;                                                                                              // 17752
			}                                                                                                                   // 17753
		}                                                                                                                    // 17754
                                                                                                                       // 17755
		// Prevent a situation in a gradually rising slope, that each label                                                  // 17756
		// will hide the previous one because the previous one always has                                                    // 17757
		// lower rank.                                                                                                       // 17758
		labels.sort(function (a, b) {                                                                                        // 17759
			return b.labelrank - a.labelrank;                                                                                   // 17760
		});                                                                                                                  // 17761
                                                                                                                       // 17762
		// Detect overlapping labels                                                                                         // 17763
		for (i = 0; i < len; i++) {                                                                                          // 17764
			label1 = labels[i];                                                                                                 // 17765
                                                                                                                       // 17766
			for (j = i + 1; j < len; ++j) {                                                                                     // 17767
				label2 = labels[j];                                                                                                // 17768
				if (label1 && label2 && label1.placed && label2.placed && label1.newOpacity !== 0 && label2.newOpacity !== 0 &&    // 17769
						intersectRect(label1.alignAttr, label2.alignAttr, label1, label2)) {                                             // 17770
					(label1.labelrank < label2.labelrank ? label1 : label2).newOpacity = 0;                                           // 17771
				}                                                                                                                  // 17772
			}                                                                                                                   // 17773
		}                                                                                                                    // 17774
                                                                                                                       // 17775
		// Hide or show                                                                                                      // 17776
		for (i = 0; i < len; i++) {                                                                                          // 17777
			label = labels[i];                                                                                                  // 17778
			if (label) {                                                                                                        // 17779
				if (label.oldOpacity !== label.newOpacity && label.placed) {                                                       // 17780
					label.alignAttr.opacity = label.newOpacity;                                                                       // 17781
					label[label.isOld && label.newOpacity ? 'animate' : 'attr'](label.alignAttr);                                     // 17782
				}                                                                                                                  // 17783
				label.isOld = true;                                                                                                // 17784
			}                                                                                                                   // 17785
		}                                                                                                                    // 17786
	};                                                                                                                    // 17787
                                                                                                                       // 17788
}(Highcharts));/**                                                                                                     // 17789
 * TrackerMixin for points and graphs                                                                                  // 17790
 */                                                                                                                    // 17791
                                                                                                                       // 17792
var TrackerMixin = Highcharts.TrackerMixin = {                                                                         // 17793
                                                                                                                       // 17794
	drawTrackerPoint: function () {                                                                                       // 17795
		var series = this,                                                                                                   // 17796
			chart = series.chart,                                                                                               // 17797
			pointer = chart.pointer,                                                                                            // 17798
			cursor = series.options.cursor,                                                                                     // 17799
			css = cursor && { cursor: cursor },                                                                                 // 17800
			onMouseOver = function (e) {                                                                                        // 17801
				var target = e.target,                                                                                             // 17802
				point;                                                                                                             // 17803
                                                                                                                       // 17804
				while (target && !point) {                                                                                         // 17805
					point = target.point;                                                                                             // 17806
					target = target.parentNode;                                                                                       // 17807
				}                                                                                                                  // 17808
                                                                                                                       // 17809
				if (point !== UNDEFINED && point !== chart.hoverPoint) { // undefined on graph in scatterchart                     // 17810
					point.onMouseOver(e);                                                                                             // 17811
				}                                                                                                                  // 17812
			};                                                                                                                  // 17813
                                                                                                                       // 17814
		// Add reference to the point                                                                                        // 17815
		each(series.points, function (point) {                                                                               // 17816
			if (point.graphic) {                                                                                                // 17817
				point.graphic.element.point = point;                                                                               // 17818
			}                                                                                                                   // 17819
			if (point.dataLabel) {                                                                                              // 17820
				point.dataLabel.element.point = point;                                                                             // 17821
			}                                                                                                                   // 17822
		});                                                                                                                  // 17823
                                                                                                                       // 17824
		// Add the event listeners, we need to do this only once                                                             // 17825
		if (!series._hasTracking) {                                                                                          // 17826
			each(series.trackerGroups, function (key) {                                                                         // 17827
				if (series[key]) { // we don't always have dataLabelsGroup                                                         // 17828
					series[key]                                                                                                       // 17829
						.addClass(PREFIX + 'tracker')                                                                                    // 17830
						.on('mouseover', onMouseOver)                                                                                    // 17831
						.on('mouseout', function (e) { pointer.onTrackerMouseOut(e); })                                                  // 17832
						.css(css);                                                                                                       // 17833
					if (hasTouch) {                                                                                                   // 17834
						series[key].on('touchstart', onMouseOver);                                                                       // 17835
					}                                                                                                                 // 17836
				}                                                                                                                  // 17837
			});                                                                                                                 // 17838
			series._hasTracking = true;                                                                                         // 17839
		}                                                                                                                    // 17840
	},                                                                                                                    // 17841
                                                                                                                       // 17842
	/**                                                                                                                   // 17843
	 * Draw the tracker object that sits above all data labels and markers to                                             // 17844
	 * track mouse events on the graph or points. For the line type charts                                                // 17845
	 * the tracker uses the same graphPath, but with a greater stroke width                                               // 17846
	 * for better control.                                                                                                // 17847
	 */                                                                                                                   // 17848
	drawTrackerGraph: function () {                                                                                       // 17849
		var series = this,                                                                                                   // 17850
			options = series.options,                                                                                           // 17851
			trackByArea = options.trackByArea,                                                                                  // 17852
			trackerPath = [].concat(trackByArea ? series.areaPath : series.graphPath),                                          // 17853
			trackerPathLength = trackerPath.length,                                                                             // 17854
			chart = series.chart,                                                                                               // 17855
			pointer = chart.pointer,                                                                                            // 17856
			renderer = chart.renderer,                                                                                          // 17857
			snap = chart.options.tooltip.snap,                                                                                  // 17858
			tracker = series.tracker,                                                                                           // 17859
			cursor = options.cursor,                                                                                            // 17860
			css = cursor && { cursor: cursor },                                                                                 // 17861
			singlePoints = series.singlePoints,                                                                                 // 17862
			singlePoint,                                                                                                        // 17863
			i,                                                                                                                  // 17864
			onMouseOver = function () {                                                                                         // 17865
				if (chart.hoverSeries !== series) {                                                                                // 17866
					series.onMouseOver();                                                                                             // 17867
				}                                                                                                                  // 17868
			},                                                                                                                  // 17869
			/*                                                                                                                  // 17870
			 * Empirical lowest possible opacities for TRACKER_FILL for an element to stay invisible but clickable              // 17871
			 * IE6: 0.002                                                                                                       // 17872
			 * IE7: 0.002                                                                                                       // 17873
			 * IE8: 0.002                                                                                                       // 17874
			 * IE9: 0.00000000001 (unlimited)                                                                                   // 17875
			 * IE10: 0.0001 (exporting only)                                                                                    // 17876
			 * FF: 0.00000000001 (unlimited)                                                                                    // 17877
			 * Chrome: 0.000001                                                                                                 // 17878
			 * Safari: 0.000001                                                                                                 // 17879
			 * Opera: 0.00000000001 (unlimited)                                                                                 // 17880
			 */                                                                                                                 // 17881
			TRACKER_FILL = 'rgba(192,192,192,' + (hasSVG ? 0.0001 : 0.002) + ')';                                               // 17882
                                                                                                                       // 17883
		// Extend end points. A better way would be to use round linecaps,                                                   // 17884
		// but those are not clickable in VML.                                                                               // 17885
		if (trackerPathLength && !trackByArea) {                                                                             // 17886
			i = trackerPathLength + 1;                                                                                          // 17887
			while (i--) {                                                                                                       // 17888
				if (trackerPath[i] === M) { // extend left side                                                                    // 17889
					trackerPath.splice(i + 1, 0, trackerPath[i + 1] - snap, trackerPath[i + 2], L);                                   // 17890
				}                                                                                                                  // 17891
				if ((i && trackerPath[i] === M) || i === trackerPathLength) { // extend right side                                 // 17892
					trackerPath.splice(i, 0, L, trackerPath[i - 2] + snap, trackerPath[i - 1]);                                       // 17893
				}                                                                                                                  // 17894
			}                                                                                                                   // 17895
		}                                                                                                                    // 17896
                                                                                                                       // 17897
		// handle single points                                                                                              // 17898
		for (i = 0; i < singlePoints.length; i++) {                                                                          // 17899
			singlePoint = singlePoints[i];                                                                                      // 17900
			trackerPath.push(M, singlePoint.plotX - snap, singlePoint.plotY,                                                    // 17901
			L, singlePoint.plotX + snap, singlePoint.plotY);                                                                    // 17902
		}                                                                                                                    // 17903
                                                                                                                       // 17904
		// draw the tracker                                                                                                  // 17905
		if (tracker) {                                                                                                       // 17906
			tracker.attr({ d: trackerPath });                                                                                   // 17907
		} else { // create                                                                                                   // 17908
                                                                                                                       // 17909
			series.tracker = renderer.path(trackerPath)                                                                         // 17910
			.attr({                                                                                                             // 17911
				'stroke-linejoin': 'round', // #1225                                                                               // 17912
				visibility: series.visible ? VISIBLE : HIDDEN,                                                                     // 17913
				stroke: TRACKER_FILL,                                                                                              // 17914
				fill: trackByArea ? TRACKER_FILL : NONE,                                                                           // 17915
				'stroke-width' : options.lineWidth + (trackByArea ? 0 : 2 * snap),                                                 // 17916
				zIndex: 2                                                                                                          // 17917
			})                                                                                                                  // 17918
			.add(series.group);                                                                                                 // 17919
                                                                                                                       // 17920
			// The tracker is added to the series group, which is clipped, but is covered                                       // 17921
			// by the marker group. So the marker group also needs to capture events.                                           // 17922
			each([series.tracker, series.markerGroup], function (tracker) {                                                     // 17923
				tracker.addClass(PREFIX + 'tracker')                                                                               // 17924
					.on('mouseover', onMouseOver)                                                                                     // 17925
					.on('mouseout', function (e) { pointer.onTrackerMouseOut(e); })                                                   // 17926
					.css(css);                                                                                                        // 17927
                                                                                                                       // 17928
				if (hasTouch) {                                                                                                    // 17929
					tracker.on('touchstart', onMouseOver);                                                                            // 17930
				}                                                                                                                  // 17931
			});                                                                                                                 // 17932
		}                                                                                                                    // 17933
	}                                                                                                                     // 17934
};                                                                                                                     // 17935
/* End TrackerMixin */                                                                                                 // 17936
                                                                                                                       // 17937
                                                                                                                       // 17938
/**                                                                                                                    // 17939
 * Add tracking event listener to the series group, so the point graphics                                              // 17940
 * themselves act as trackers                                                                                          // 17941
 */                                                                                                                    // 17942
                                                                                                                       // 17943
if (seriesTypes.column) {                                                                                              // 17944
	ColumnSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;	                                                  // 17945
}                                                                                                                      // 17946
                                                                                                                       // 17947
if (seriesTypes.pie) {                                                                                                 // 17948
	seriesTypes.pie.prototype.drawTracker = TrackerMixin.drawTrackerPoint;                                                // 17949
}                                                                                                                      // 17950
                                                                                                                       // 17951
if (seriesTypes.scatter) {                                                                                             // 17952
	ScatterSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;                                                  // 17953
}                                                                                                                      // 17954
                                                                                                                       // 17955
/*                                                                                                                     // 17956
 * Extend Legend for item events                                                                                       // 17957
 */                                                                                                                    // 17958
extend(Legend.prototype, {                                                                                             // 17959
                                                                                                                       // 17960
	setItemEvents: function (item, legendItem, useHTML, itemStyle, itemHiddenStyle) {                                     // 17961
	var legend = this;                                                                                                    // 17962
	// Set the events on the item group, or in case of useHTML, the item itself (#1249)                                   // 17963
	(useHTML ? legendItem : item.legendGroup).on('mouseover', function () {                                               // 17964
			item.setState(HOVER_STATE);                                                                                         // 17965
			legendItem.css(legend.options.itemHoverStyle);                                                                      // 17966
		})                                                                                                                   // 17967
		.on('mouseout', function () {                                                                                        // 17968
			legendItem.css(item.visible ? itemStyle : itemHiddenStyle);                                                         // 17969
			item.setState();                                                                                                    // 17970
		})                                                                                                                   // 17971
		.on('click', function (event) {                                                                                      // 17972
			var strLegendItemClick = 'legendItemClick',                                                                         // 17973
				fnLegendItemClick = function () {                                                                                  // 17974
					item.setVisible();                                                                                                // 17975
				};                                                                                                                 // 17976
				                                                                                                                   // 17977
			// Pass over the click/touch event. #4.                                                                             // 17978
			event = {                                                                                                           // 17979
				browserEvent: event                                                                                                // 17980
			};                                                                                                                  // 17981
                                                                                                                       // 17982
			// click the name or symbol                                                                                         // 17983
			if (item.firePointEvent) { // point                                                                                 // 17984
				item.firePointEvent(strLegendItemClick, event, fnLegendItemClick);                                                 // 17985
			} else {                                                                                                            // 17986
				fireEvent(item, strLegendItemClick, event, fnLegendItemClick);                                                     // 17987
			}                                                                                                                   // 17988
		});                                                                                                                  // 17989
	},                                                                                                                    // 17990
                                                                                                                       // 17991
	createCheckboxForItem: function (item) {                                                                              // 17992
		var legend = this;                                                                                                   // 17993
                                                                                                                       // 17994
		item.checkbox = createElement('input', {                                                                             // 17995
			type: 'checkbox',                                                                                                   // 17996
			checked: item.selected,                                                                                             // 17997
			defaultChecked: item.selected // required by IE7                                                                    // 17998
		}, legend.options.itemCheckboxStyle, legend.chart.container);                                                        // 17999
                                                                                                                       // 18000
		addEvent(item.checkbox, 'click', function (event) {                                                                  // 18001
			var target = event.target;                                                                                          // 18002
			fireEvent(item.series || item, 'checkboxClick', { // #3712                                                          // 18003
					checked: target.checked,                                                                                          // 18004
					item: item                                                                                                        // 18005
				},                                                                                                                 // 18006
				function () {                                                                                                      // 18007
					item.select();                                                                                                    // 18008
				}                                                                                                                  // 18009
			);                                                                                                                  // 18010
		});                                                                                                                  // 18011
	}	                                                                                                                    // 18012
});                                                                                                                    // 18013
                                                                                                                       // 18014
/*                                                                                                                     // 18015
 * Add pointer cursor to legend itemstyle in defaultOptions                                                            // 18016
 */                                                                                                                    // 18017
defaultOptions.legend.itemStyle.cursor = 'pointer';                                                                    // 18018
                                                                                                                       // 18019
                                                                                                                       // 18020
/*                                                                                                                     // 18021
 * Extend the Chart object with interaction                                                                            // 18022
 */                                                                                                                    // 18023
                                                                                                                       // 18024
extend(Chart.prototype, {                                                                                              // 18025
	/**                                                                                                                   // 18026
	 * Display the zoom button                                                                                            // 18027
	 */                                                                                                                   // 18028
	showResetZoom: function () {                                                                                          // 18029
		var chart = this,                                                                                                    // 18030
			lang = defaultOptions.lang,                                                                                         // 18031
			btnOptions = chart.options.chart.resetZoomButton,                                                                   // 18032
			theme = btnOptions.theme,                                                                                           // 18033
			states = theme.states,                                                                                              // 18034
			alignTo = btnOptions.relativeTo === 'chart' ? null : 'plotBox';                                                     // 18035
			                                                                                                                    // 18036
		this.resetZoomButton = chart.renderer.button(lang.resetZoom, null, null, function () { chart.zoomOut(); }, theme, states && states.hover)
			.attr({                                                                                                             // 18038
				align: btnOptions.position.align,                                                                                  // 18039
				title: lang.resetZoomTitle                                                                                         // 18040
			})                                                                                                                  // 18041
			.add()                                                                                                              // 18042
			.align(btnOptions.position, false, alignTo);                                                                        // 18043
			                                                                                                                    // 18044
	},                                                                                                                    // 18045
                                                                                                                       // 18046
	/**                                                                                                                   // 18047
	 * Zoom out to 1:1                                                                                                    // 18048
	 */                                                                                                                   // 18049
	zoomOut: function () {                                                                                                // 18050
		var chart = this;                                                                                                    // 18051
		fireEvent(chart, 'selection', { resetSelection: true }, function () {                                                // 18052
			chart.zoom();                                                                                                       // 18053
		});                                                                                                                  // 18054
	},                                                                                                                    // 18055
                                                                                                                       // 18056
	/**                                                                                                                   // 18057
	 * Zoom into a given portion of the chart given by axis coordinates                                                   // 18058
	 * @param {Object} event                                                                                              // 18059
	 */                                                                                                                   // 18060
	zoom: function (event) {                                                                                              // 18061
		var chart = this,                                                                                                    // 18062
			hasZoomed,                                                                                                          // 18063
			pointer = chart.pointer,                                                                                            // 18064
			displayButton = false,                                                                                              // 18065
			resetZoomButton;                                                                                                    // 18066
                                                                                                                       // 18067
		// If zoom is called with no arguments, reset the axes                                                               // 18068
		if (!event || event.resetSelection) {                                                                                // 18069
			each(chart.axes, function (axis) {                                                                                  // 18070
				hasZoomed = axis.zoom();                                                                                           // 18071
			});                                                                                                                 // 18072
		} else { // else, zoom in on all axes                                                                                // 18073
			each(event.xAxis.concat(event.yAxis), function (axisData) {                                                         // 18074
				var axis = axisData.axis,                                                                                          // 18075
					isXAxis = axis.isXAxis;                                                                                           // 18076
                                                                                                                       // 18077
				// don't zoom more than minRange                                                                                   // 18078
				if (pointer[isXAxis ? 'zoomX' : 'zoomY'] || pointer[isXAxis ? 'pinchX' : 'pinchY']) {                              // 18079
					hasZoomed = axis.zoom(axisData.min, axisData.max);                                                                // 18080
					if (axis.displayBtn) {                                                                                            // 18081
						displayButton = true;                                                                                            // 18082
					}                                                                                                                 // 18083
				}                                                                                                                  // 18084
			});                                                                                                                 // 18085
		}                                                                                                                    // 18086
		                                                                                                                     // 18087
		// Show or hide the Reset zoom button                                                                                // 18088
		resetZoomButton = chart.resetZoomButton;                                                                             // 18089
		if (displayButton && !resetZoomButton) {                                                                             // 18090
			chart.showResetZoom();                                                                                              // 18091
		} else if (!displayButton && isObject(resetZoomButton)) {                                                            // 18092
			chart.resetZoomButton = resetZoomButton.destroy();                                                                  // 18093
		}                                                                                                                    // 18094
		                                                                                                                     // 18095
                                                                                                                       // 18096
		// Redraw                                                                                                            // 18097
		if (hasZoomed) {                                                                                                     // 18098
			chart.redraw(                                                                                                       // 18099
				pick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100) // animation                 // 18100
			);                                                                                                                  // 18101
		}                                                                                                                    // 18102
	},                                                                                                                    // 18103
                                                                                                                       // 18104
	/**                                                                                                                   // 18105
	 * Pan the chart by dragging the mouse across the pane. This function is called                                       // 18106
	 * on mouse move, and the distance to pan is computed from chartX compared to                                         // 18107
	 * the first chartX position in the dragging operation.                                                               // 18108
	 */                                                                                                                   // 18109
	pan: function (e, panning) {                                                                                          // 18110
                                                                                                                       // 18111
		var chart = this,                                                                                                    // 18112
			hoverPoints = chart.hoverPoints,                                                                                    // 18113
			doRedraw;                                                                                                           // 18114
                                                                                                                       // 18115
		// remove active points for shared tooltip                                                                           // 18116
		if (hoverPoints) {                                                                                                   // 18117
			each(hoverPoints, function (point) {                                                                                // 18118
				point.setState();                                                                                                  // 18119
			});                                                                                                                 // 18120
		}                                                                                                                    // 18121
                                                                                                                       // 18122
		each(panning === 'xy' ? [1, 0] : [1], function (isX) { // xy is used in maps                                         // 18123
			var mousePos = e[isX ? 'chartX' : 'chartY'],                                                                        // 18124
				axis = chart[isX ? 'xAxis' : 'yAxis'][0],                                                                          // 18125
				startPos = chart[isX ? 'mouseDownX' : 'mouseDownY'],                                                               // 18126
				halfPointRange = (axis.pointRange || 0) / 2,                                                                       // 18127
				extremes = axis.getExtremes(),                                                                                     // 18128
				newMin = axis.toValue(startPos - mousePos, true) + halfPointRange,                                                 // 18129
				newMax = axis.toValue(startPos + chart[isX ? 'plotWidth' : 'plotHeight'] - mousePos, true) - halfPointRange,       // 18130
				goingLeft = startPos > mousePos; // #3613                                                                          // 18131
                                                                                                                       // 18132
			if (axis.series.length &&                                                                                           // 18133
					(goingLeft || newMin > mathMin(extremes.dataMin, extremes.min)) &&                                                // 18134
					(!goingLeft || newMax < mathMax(extremes.dataMax, extremes.max))) {                                               // 18135
				axis.setExtremes(newMin, newMax, false, false, { trigger: 'pan' });                                                // 18136
				doRedraw = true;                                                                                                   // 18137
			}                                                                                                                   // 18138
                                                                                                                       // 18139
			chart[isX ? 'mouseDownX' : 'mouseDownY'] = mousePos; // set new reference for next run                              // 18140
		});                                                                                                                  // 18141
                                                                                                                       // 18142
		if (doRedraw) {                                                                                                      // 18143
			chart.redraw(false);                                                                                                // 18144
		}                                                                                                                    // 18145
		css(chart.container, { cursor: 'move' });                                                                            // 18146
	}                                                                                                                     // 18147
});                                                                                                                    // 18148
                                                                                                                       // 18149
/*                                                                                                                     // 18150
 * Extend the Point object with interaction                                                                            // 18151
 */                                                                                                                    // 18152
extend(Point.prototype, {                                                                                              // 18153
	/**                                                                                                                   // 18154
	 * Toggle the selection status of a point                                                                             // 18155
	 * @param {Boolean} selected Whether to select or unselect the point.                                                 // 18156
	 * @param {Boolean} accumulate Whether to add to the previous selection. By default,                                  // 18157
	 *		 this happens if the control key (Cmd on Mac) was pressed during clicking.                                        // 18158
	 */                                                                                                                   // 18159
	select: function (selected, accumulate) {                                                                             // 18160
		var point = this,                                                                                                    // 18161
			series = point.series,                                                                                              // 18162
			chart = series.chart;                                                                                               // 18163
                                                                                                                       // 18164
		selected = pick(selected, !point.selected);                                                                          // 18165
                                                                                                                       // 18166
		// fire the event with the defalut handler                                                                           // 18167
		point.firePointEvent(selected ? 'select' : 'unselect', { accumulate: accumulate }, function () {                     // 18168
			point.selected = point.options.selected = selected;                                                                 // 18169
			series.options.data[inArray(point, series.data)] = point.options;                                                   // 18170
                                                                                                                       // 18171
			point.setState(selected && SELECT_STATE);                                                                           // 18172
                                                                                                                       // 18173
			// unselect all other points unless Ctrl or Cmd + click                                                             // 18174
			if (!accumulate) {                                                                                                  // 18175
				each(chart.getSelectedPoints(), function (loopPoint) {                                                             // 18176
					if (loopPoint.selected && loopPoint !== point) {                                                                  // 18177
						loopPoint.selected = loopPoint.options.selected = false;                                                         // 18178
						series.options.data[inArray(loopPoint, series.data)] = loopPoint.options;                                        // 18179
						loopPoint.setState(NORMAL_STATE);                                                                                // 18180
							loopPoint.firePointEvent('unselect');                                                                           // 18181
					}                                                                                                                 // 18182
				});                                                                                                                // 18183
			}                                                                                                                   // 18184
		});                                                                                                                  // 18185
	},                                                                                                                    // 18186
                                                                                                                       // 18187
	/**                                                                                                                   // 18188
	 * Runs on mouse over the point                                                                                       // 18189
	 */                                                                                                                   // 18190
	onMouseOver: function (e) {                                                                                           // 18191
		var point = this,                                                                                                    // 18192
			series = point.series,                                                                                              // 18193
			chart = series.chart,                                                                                               // 18194
			tooltip = chart.tooltip,                                                                                            // 18195
			hoverPoint = chart.hoverPoint;                                                                                      // 18196
                                                                                                                       // 18197
		if (chart.hoverSeries !== series) {                                                                                  // 18198
			series.onMouseOver();                                                                                               // 18199
		}		                                                                                                                  // 18200
                                                                                                                       // 18201
		// set normal state to previous series                                                                               // 18202
		if (hoverPoint && hoverPoint !== point) {                                                                            // 18203
			hoverPoint.onMouseOut();                                                                                            // 18204
		}                                                                                                                    // 18205
                                                                                                                       // 18206
		if (point.series) { // It may have been destroyed, #4130                                                             // 18207
                                                                                                                       // 18208
			// trigger the event                                                                                                // 18209
			point.firePointEvent('mouseOver');                                                                                  // 18210
                                                                                                                       // 18211
			// update the tooltip                                                                                               // 18212
			if (tooltip && (!tooltip.shared || series.noSharedTooltip)) {                                                       // 18213
				tooltip.refresh(point, e);                                                                                         // 18214
			}                                                                                                                   // 18215
                                                                                                                       // 18216
			// hover this                                                                                                       // 18217
			point.setState(HOVER_STATE);                                                                                        // 18218
			chart.hoverPoint = point;                                                                                           // 18219
		}                                                                                                                    // 18220
	},                                                                                                                    // 18221
                                                                                                                       // 18222
	/**                                                                                                                   // 18223
	 * Runs on mouse out from the point                                                                                   // 18224
	 */                                                                                                                   // 18225
	onMouseOut: function () {                                                                                             // 18226
		var chart = this.series.chart,                                                                                       // 18227
			hoverPoints = chart.hoverPoints;                                                                                    // 18228
                                                                                                                       // 18229
		this.firePointEvent('mouseOut');                                                                                     // 18230
                                                                                                                       // 18231
		if (!hoverPoints || inArray(this, hoverPoints) === -1) { // #887, #2240                                              // 18232
			this.setState();                                                                                                    // 18233
			chart.hoverPoint = null;                                                                                            // 18234
		}                                                                                                                    // 18235
	},                                                                                                                    // 18236
                                                                                                                       // 18237
	/**                                                                                                                   // 18238
	 * Import events from the series' and point's options. Only do it on                                                  // 18239
	 * demand, to save processing time on hovering.                                                                       // 18240
	 */                                                                                                                   // 18241
	importEvents: function () {                                                                                           // 18242
		if (!this.hasImportedEvents) {                                                                                       // 18243
			var point = this,                                                                                                   // 18244
				options = merge(point.series.options.point, point.options),                                                        // 18245
				events = options.events,                                                                                           // 18246
				eventType;                                                                                                         // 18247
                                                                                                                       // 18248
			point.events = events;                                                                                              // 18249
                                                                                                                       // 18250
			for (eventType in events) {                                                                                         // 18251
				addEvent(point, eventType, events[eventType]);                                                                     // 18252
			}                                                                                                                   // 18253
			this.hasImportedEvents = true;                                                                                      // 18254
                                                                                                                       // 18255
		}                                                                                                                    // 18256
	},                                                                                                                    // 18257
                                                                                                                       // 18258
	/**                                                                                                                   // 18259
	 * Set the point's state                                                                                              // 18260
	 * @param {String} state                                                                                              // 18261
	 */                                                                                                                   // 18262
	setState: function (state, move) {                                                                                    // 18263
		var point = this,                                                                                                    // 18264
			plotX = point.plotX,                                                                                                // 18265
			plotY = point.plotY,                                                                                                // 18266
			series = point.series,                                                                                              // 18267
			stateOptions = series.options.states,                                                                               // 18268
			markerOptions = defaultPlotOptions[series.type].marker && series.options.marker,                                    // 18269
			normalDisabled = markerOptions && !markerOptions.enabled,                                                           // 18270
			markerStateOptions = markerOptions && markerOptions.states[state],                                                  // 18271
			stateDisabled = markerStateOptions && markerStateOptions.enabled === false,                                         // 18272
			stateMarkerGraphic = series.stateMarkerGraphic,                                                                     // 18273
			pointMarker = point.marker || {},                                                                                   // 18274
			chart = series.chart,                                                                                               // 18275
			radius,                                                                                                             // 18276
			halo = series.halo,                                                                                                 // 18277
			haloOptions,                                                                                                        // 18278
			newSymbol,                                                                                                          // 18279
			pointAttr;                                                                                                          // 18280
                                                                                                                       // 18281
		state = state || NORMAL_STATE; // empty string                                                                       // 18282
		pointAttr = point.pointAttr[state] || series.pointAttr[state];                                                       // 18283
                                                                                                                       // 18284
		if (                                                                                                                 // 18285
				// already has this state                                                                                          // 18286
				(state === point.state && !move) ||                                                                                // 18287
				// selected points don't respond to hover                                                                          // 18288
				(point.selected && state !== SELECT_STATE) ||                                                                      // 18289
				// series' state options is disabled                                                                               // 18290
				(stateOptions[state] && stateOptions[state].enabled === false) ||                                                  // 18291
				// general point marker's state options is disabled                                                                // 18292
				(state && (stateDisabled || (normalDisabled && markerStateOptions.enabled === false))) ||                          // 18293
				// individual point marker's state options is disabled                                                             // 18294
				(state && pointMarker.states && pointMarker.states[state] && pointMarker.states[state].enabled === false) // #1610 // 18295
                                                                                                                       // 18296
			) {                                                                                                                 // 18297
			return;                                                                                                             // 18298
		}                                                                                                                    // 18299
                                                                                                                       // 18300
		// apply hover styles to the existing point                                                                          // 18301
		if (point.graphic) {                                                                                                 // 18302
			radius = markerOptions && point.graphic.symbolName && pointAttr.r;                                                  // 18303
			point.graphic.attr(merge(                                                                                           // 18304
				pointAttr,                                                                                                         // 18305
				radius ? { // new symbol attributes (#507, #612)                                                                   // 18306
					x: plotX - radius,                                                                                                // 18307
					y: plotY - radius,                                                                                                // 18308
					width: 2 * radius,                                                                                                // 18309
					height: 2 * radius                                                                                                // 18310
				} : {}                                                                                                             // 18311
			));                                                                                                                 // 18312
                                                                                                                       // 18313
			// Zooming in from a range with no markers to a range with markers                                                  // 18314
			if (stateMarkerGraphic) {                                                                                           // 18315
				stateMarkerGraphic.hide();                                                                                         // 18316
			}                                                                                                                   // 18317
		} else {                                                                                                             // 18318
			// if a graphic is not applied to each point in the normal state, create a shared                                   // 18319
			// graphic for the hover state                                                                                      // 18320
			if (state && markerStateOptions) {                                                                                  // 18321
				radius = markerStateOptions.radius;                                                                                // 18322
				newSymbol = pointMarker.symbol || series.symbol;                                                                   // 18323
                                                                                                                       // 18324
				// If the point has another symbol than the previous one, throw away the                                           // 18325
				// state marker graphic and force a new one (#1459)                                                                // 18326
				if (stateMarkerGraphic && stateMarkerGraphic.currentSymbol !== newSymbol) {                                        // 18327
					stateMarkerGraphic = stateMarkerGraphic.destroy();                                                                // 18328
				}                                                                                                                  // 18329
                                                                                                                       // 18330
				// Add a new state marker graphic                                                                                  // 18331
				if (!stateMarkerGraphic) {                                                                                         // 18332
					if (newSymbol) {                                                                                                  // 18333
						series.stateMarkerGraphic = stateMarkerGraphic = chart.renderer.symbol(                                          // 18334
							newSymbol,                                                                                                      // 18335
							plotX - radius,                                                                                                 // 18336
							plotY - radius,                                                                                                 // 18337
							2 * radius,                                                                                                     // 18338
							2 * radius                                                                                                      // 18339
						)                                                                                                                // 18340
						.attr(pointAttr)                                                                                                 // 18341
						.add(series.markerGroup);                                                                                        // 18342
						stateMarkerGraphic.currentSymbol = newSymbol;                                                                    // 18343
					}                                                                                                                 // 18344
                                                                                                                       // 18345
				// Move the existing graphic                                                                                       // 18346
				} else {                                                                                                           // 18347
					stateMarkerGraphic[move ? 'animate' : 'attr']({ // #1054                                                          // 18348
						x: plotX - radius,                                                                                               // 18349
						y: plotY - radius                                                                                                // 18350
					});                                                                                                               // 18351
				}                                                                                                                  // 18352
			}                                                                                                                   // 18353
                                                                                                                       // 18354
			if (stateMarkerGraphic) {                                                                                           // 18355
				stateMarkerGraphic[state && chart.isInsidePlot(plotX, plotY, chart.inverted) ? 'show' : 'hide'](); // #2450        // 18356
				stateMarkerGraphic.element.point = point; // #4310                                                                 // 18357
			}                                                                                                                   // 18358
		}                                                                                                                    // 18359
                                                                                                                       // 18360
		// Show me your halo                                                                                                 // 18361
		haloOptions = stateOptions[state] && stateOptions[state].halo;                                                       // 18362
		if (haloOptions && haloOptions.size) {                                                                               // 18363
			if (!halo) {                                                                                                        // 18364
				series.halo = halo = chart.renderer.path()                                                                         // 18365
					.add(chart.seriesGroup);                                                                                          // 18366
			}                                                                                                                   // 18367
			halo.attr(extend({                                                                                                  // 18368
				fill: Color(point.color || series.color).setOpacity(haloOptions.opacity).get()                                     // 18369
			}, haloOptions.attributes))[move ? 'animate' : 'attr']({                                                            // 18370
				d: point.haloPath(haloOptions.size)                                                                                // 18371
			});                                                                                                                 // 18372
		} else if (halo) {                                                                                                   // 18373
			halo.attr({ d: [] });                                                                                               // 18374
		}                                                                                                                    // 18375
                                                                                                                       // 18376
		point.state = state;                                                                                                 // 18377
	},                                                                                                                    // 18378
                                                                                                                       // 18379
	haloPath: function (size) {                                                                                           // 18380
		var series = this.series,                                                                                            // 18381
			chart = series.chart,                                                                                               // 18382
			plotBox = series.getPlotBox(),                                                                                      // 18383
			inverted = chart.inverted;                                                                                          // 18384
                                                                                                                       // 18385
		return chart.renderer.symbols.circle(                                                                                // 18386
			plotBox.translateX + (inverted ? series.yAxis.len - this.plotY : this.plotX) - size,                                // 18387
			plotBox.translateY + (inverted ? series.xAxis.len - this.plotX : this.plotY) - size,                                // 18388
			size * 2,                                                                                                           // 18389
			size * 2                                                                                                            // 18390
		);                                                                                                                   // 18391
	}                                                                                                                     // 18392
});                                                                                                                    // 18393
                                                                                                                       // 18394
/*                                                                                                                     // 18395
 * Extend the Series object with interaction                                                                           // 18396
 */                                                                                                                    // 18397
                                                                                                                       // 18398
extend(Series.prototype, {                                                                                             // 18399
	/**                                                                                                                   // 18400
	 * Series mouse over handler                                                                                          // 18401
	 */                                                                                                                   // 18402
	onMouseOver: function () {                                                                                            // 18403
		var series = this,                                                                                                   // 18404
			chart = series.chart,                                                                                               // 18405
			hoverSeries = chart.hoverSeries;                                                                                    // 18406
                                                                                                                       // 18407
		// set normal state to previous series                                                                               // 18408
		if (hoverSeries && hoverSeries !== series) {                                                                         // 18409
			hoverSeries.onMouseOut();                                                                                           // 18410
		}                                                                                                                    // 18411
                                                                                                                       // 18412
		// trigger the event, but to save processing time,                                                                   // 18413
		// only if defined                                                                                                   // 18414
		if (series.options.events.mouseOver) {                                                                               // 18415
			fireEvent(series, 'mouseOver');                                                                                     // 18416
		}                                                                                                                    // 18417
                                                                                                                       // 18418
		// hover this                                                                                                        // 18419
		series.setState(HOVER_STATE);                                                                                        // 18420
		chart.hoverSeries = series;                                                                                          // 18421
	},                                                                                                                    // 18422
                                                                                                                       // 18423
	/**                                                                                                                   // 18424
	 * Series mouse out handler                                                                                           // 18425
	 */                                                                                                                   // 18426
	onMouseOut: function () {                                                                                             // 18427
		// trigger the event only if listeners exist                                                                         // 18428
		var series = this,                                                                                                   // 18429
			options = series.options,                                                                                           // 18430
			chart = series.chart,                                                                                               // 18431
			tooltip = chart.tooltip,                                                                                            // 18432
			hoverPoint = chart.hoverPoint;                                                                                      // 18433
                                                                                                                       // 18434
		chart.hoverSeries = null; // #182, set to null before the mouseOut event fires                                       // 18435
                                                                                                                       // 18436
		// trigger mouse out on the point, which must be in this series                                                      // 18437
		if (hoverPoint) {                                                                                                    // 18438
			hoverPoint.onMouseOut();                                                                                            // 18439
		}                                                                                                                    // 18440
                                                                                                                       // 18441
		// fire the mouse out event                                                                                          // 18442
		if (series && options.events.mouseOut) {                                                                             // 18443
			fireEvent(series, 'mouseOut');                                                                                      // 18444
		}                                                                                                                    // 18445
                                                                                                                       // 18446
                                                                                                                       // 18447
		// hide the tooltip                                                                                                  // 18448
		if (tooltip && !options.stickyTracking && (!tooltip.shared || series.noSharedTooltip)) {                             // 18449
			tooltip.hide();                                                                                                     // 18450
		}                                                                                                                    // 18451
                                                                                                                       // 18452
		// set normal state                                                                                                  // 18453
		series.setState();                                                                                                   // 18454
	},                                                                                                                    // 18455
                                                                                                                       // 18456
	/**                                                                                                                   // 18457
	 * Set the state of the graph                                                                                         // 18458
	 */                                                                                                                   // 18459
	setState: function (state) {                                                                                          // 18460
		var series = this,                                                                                                   // 18461
			options = series.options,                                                                                           // 18462
			graph = series.graph,                                                                                               // 18463
			stateOptions = options.states,                                                                                      // 18464
			lineWidth = options.lineWidth,                                                                                      // 18465
			attribs,                                                                                                            // 18466
			i = 0;                                                                                                              // 18467
                                                                                                                       // 18468
		state = state || NORMAL_STATE;                                                                                       // 18469
                                                                                                                       // 18470
		if (series.state !== state) {                                                                                        // 18471
			series.state = state;                                                                                               // 18472
                                                                                                                       // 18473
			if (stateOptions[state] && stateOptions[state].enabled === false) {                                                 // 18474
				return;                                                                                                            // 18475
			}                                                                                                                   // 18476
                                                                                                                       // 18477
			if (state) {                                                                                                        // 18478
				lineWidth = stateOptions[state].lineWidth || lineWidth + (stateOptions[state].lineWidthPlus || 0); // #4035        // 18479
			}                                                                                                                   // 18480
                                                                                                                       // 18481
			if (graph && !graph.dashstyle) { // hover is turned off for dashed lines in VML                                     // 18482
				attribs = {                                                                                                        // 18483
					'stroke-width': lineWidth                                                                                         // 18484
				};                                                                                                                 // 18485
				// use attr because animate will cause any other animation on the graph to stop                                    // 18486
				graph.attr(attribs);                                                                                               // 18487
				while (series['zoneGraph' + i]) {                                                                                  // 18488
					series['zoneGraph' + i].attr(attribs);                                                                            // 18489
					i = i + 1;                                                                                                        // 18490
				}                                                                                                                  // 18491
			}                                                                                                                   // 18492
		}                                                                                                                    // 18493
	},                                                                                                                    // 18494
                                                                                                                       // 18495
	/**                                                                                                                   // 18496
	 * Set the visibility of the graph                                                                                    // 18497
	 *                                                                                                                    // 18498
	 * @param vis {Boolean} True to show the series, false to hide. If UNDEFINED,                                         // 18499
	 *				the visibility is toggled.                                                                                      // 18500
	 */                                                                                                                   // 18501
	setVisible: function (vis, redraw) {                                                                                  // 18502
		var series = this,                                                                                                   // 18503
			chart = series.chart,                                                                                               // 18504
			legendItem = series.legendItem,                                                                                     // 18505
			showOrHide,                                                                                                         // 18506
			ignoreHiddenSeries = chart.options.chart.ignoreHiddenSeries,                                                        // 18507
			oldVisibility = series.visible;                                                                                     // 18508
                                                                                                                       // 18509
		// if called without an argument, toggle visibility                                                                  // 18510
		series.visible = vis = series.userOptions.visible = vis === UNDEFINED ? !oldVisibility : vis;                        // 18511
		showOrHide = vis ? 'show' : 'hide';                                                                                  // 18512
                                                                                                                       // 18513
		// show or hide elements                                                                                             // 18514
		each(['group', 'dataLabelsGroup', 'markerGroup', 'tracker'], function (key) {                                        // 18515
			if (series[key]) {                                                                                                  // 18516
				series[key][showOrHide]();                                                                                         // 18517
			}                                                                                                                   // 18518
		});                                                                                                                  // 18519
                                                                                                                       // 18520
                                                                                                                       // 18521
		// hide tooltip (#1361)                                                                                              // 18522
		if (chart.hoverSeries === series || (chart.hoverPoint && chart.hoverPoint.series) === series) {                      // 18523
			series.onMouseOut();                                                                                                // 18524
		}                                                                                                                    // 18525
                                                                                                                       // 18526
                                                                                                                       // 18527
		if (legendItem) {                                                                                                    // 18528
			chart.legend.colorizeItem(series, vis);                                                                             // 18529
		}                                                                                                                    // 18530
                                                                                                                       // 18531
                                                                                                                       // 18532
		// rescale or adapt to resized chart                                                                                 // 18533
		series.isDirty = true;                                                                                               // 18534
		// in a stack, all other series are affected                                                                         // 18535
		if (series.options.stacking) {                                                                                       // 18536
			each(chart.series, function (otherSeries) {                                                                         // 18537
				if (otherSeries.options.stacking && otherSeries.visible) {                                                         // 18538
					otherSeries.isDirty = true;                                                                                       // 18539
				}                                                                                                                  // 18540
			});                                                                                                                 // 18541
		}                                                                                                                    // 18542
                                                                                                                       // 18543
		// show or hide linked series                                                                                        // 18544
		each(series.linkedSeries, function (otherSeries) {                                                                   // 18545
			otherSeries.setVisible(vis, false);                                                                                 // 18546
		});                                                                                                                  // 18547
                                                                                                                       // 18548
		if (ignoreHiddenSeries) {                                                                                            // 18549
			chart.isDirtyBox = true;                                                                                            // 18550
		}                                                                                                                    // 18551
		if (redraw !== false) {                                                                                              // 18552
			chart.redraw();                                                                                                     // 18553
		}                                                                                                                    // 18554
                                                                                                                       // 18555
		fireEvent(series, showOrHide);                                                                                       // 18556
	},                                                                                                                    // 18557
                                                                                                                       // 18558
	/**                                                                                                                   // 18559
	 * Show the graph                                                                                                     // 18560
	 */                                                                                                                   // 18561
	show: function () {                                                                                                   // 18562
		this.setVisible(true);                                                                                               // 18563
	},                                                                                                                    // 18564
                                                                                                                       // 18565
	/**                                                                                                                   // 18566
	 * Hide the graph                                                                                                     // 18567
	 */                                                                                                                   // 18568
	hide: function () {                                                                                                   // 18569
		this.setVisible(false);                                                                                              // 18570
	},                                                                                                                    // 18571
                                                                                                                       // 18572
                                                                                                                       // 18573
	/**                                                                                                                   // 18574
	 * Set the selected state of the graph                                                                                // 18575
	 *                                                                                                                    // 18576
	 * @param selected {Boolean} True to select the series, false to unselect. If                                         // 18577
	 *				UNDEFINED, the selection state is toggled.                                                                      // 18578
	 */                                                                                                                   // 18579
	select: function (selected) {                                                                                         // 18580
		var series = this;                                                                                                   // 18581
		// if called without an argument, toggle                                                                             // 18582
		series.selected = selected = (selected === UNDEFINED) ? !series.selected : selected;                                 // 18583
                                                                                                                       // 18584
		if (series.checkbox) {                                                                                               // 18585
			series.checkbox.checked = selected;                                                                                 // 18586
		}                                                                                                                    // 18587
                                                                                                                       // 18588
		fireEvent(series, selected ? 'select' : 'unselect');                                                                 // 18589
	},                                                                                                                    // 18590
                                                                                                                       // 18591
	drawTracker: TrackerMixin.drawTrackerGraph                                                                            // 18592
});                                                                                                                    // 18593
// global variables                                                                                                    // 18594
extend(Highcharts, {                                                                                                   // 18595
	                                                                                                                      // 18596
	// Constructors                                                                                                       // 18597
	Color: Color,                                                                                                         // 18598
	Point: Point,                                                                                                         // 18599
	Tick: Tick,	                                                                                                          // 18600
	Renderer: Renderer,                                                                                                   // 18601
	SVGElement: SVGElement,                                                                                               // 18602
	SVGRenderer: SVGRenderer,                                                                                             // 18603
	                                                                                                                      // 18604
	// Various                                                                                                            // 18605
	arrayMin: arrayMin,                                                                                                   // 18606
	arrayMax: arrayMax,                                                                                                   // 18607
	charts: charts,                                                                                                       // 18608
	dateFormat: dateFormat,                                                                                               // 18609
	error: error,                                                                                                         // 18610
	format: format,                                                                                                       // 18611
	pathAnim: pathAnim,                                                                                                   // 18612
	getOptions: getOptions,                                                                                               // 18613
	hasBidiBug: hasBidiBug,                                                                                               // 18614
	isTouchDevice: isTouchDevice,                                                                                         // 18615
	setOptions: setOptions,                                                                                               // 18616
	addEvent: addEvent,                                                                                                   // 18617
	removeEvent: removeEvent,                                                                                             // 18618
	createElement: createElement,                                                                                         // 18619
	discardElement: discardElement,                                                                                       // 18620
	css: css,                                                                                                             // 18621
	each: each,                                                                                                           // 18622
	map: map,                                                                                                             // 18623
	merge: merge,                                                                                                         // 18624
	splat: splat,                                                                                                         // 18625
	extendClass: extendClass,                                                                                             // 18626
	pInt: pInt,                                                                                                           // 18627
	svg: hasSVG,                                                                                                          // 18628
	canvas: useCanVG,                                                                                                     // 18629
	vml: !hasSVG && !useCanVG,                                                                                            // 18630
	product: PRODUCT,                                                                                                     // 18631
	version: VERSION                                                                                                      // 18632
});                                                                                                                    // 18633
                                                                                                                       // 18634
}());                                                                                                                  // 18635
                                                                                                                       // 18636
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/maazalik:highcharts/lib/no-data-to-display.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license Highcharts JS v4.1.7 (2015-06-26)                                                                          // 2
 * Plugin for displaying a message when there is no data visible in chart.                                             // 3
 *                                                                                                                     // 4
 * (c) 2010-2014 Highsoft AS                                                                                           // 5
 * Author: Oystein Moseng                                                                                              // 6
 *                                                                                                                     // 7
 * License: www.highcharts.com/license                                                                                 // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
(function (H) {                                                                                                        // 11
	                                                                                                                      // 12
	var seriesTypes = H.seriesTypes,                                                                                      // 13
		chartPrototype = H.Chart.prototype,                                                                                  // 14
		defaultOptions = H.getOptions(),                                                                                     // 15
		extend = H.extend,                                                                                                   // 16
		each = H.each;                                                                                                       // 17
                                                                                                                       // 18
	// Add language option                                                                                                // 19
	extend(defaultOptions.lang, {                                                                                         // 20
		noData: 'No data to display'                                                                                         // 21
	});                                                                                                                   // 22
	                                                                                                                      // 23
	// Add default display options for message                                                                            // 24
	defaultOptions.noData = {                                                                                             // 25
		position: {                                                                                                          // 26
			x: 0,                                                                                                               // 27
			y: 0,			                                                                                                            // 28
			align: 'center',                                                                                                    // 29
			verticalAlign: 'middle'                                                                                             // 30
		},                                                                                                                   // 31
		attr: {						                                                                                                        // 32
		},                                                                                                                   // 33
		style: {	                                                                                                            // 34
			fontWeight: 'bold',		                                                                                               // 35
			fontSize: '12px',                                                                                                   // 36
			color: '#60606a'		                                                                                                  // 37
		}                                                                                                                    // 38
		// useHTML: false // docs                                                                                            // 39
	};                                                                                                                    // 40
                                                                                                                       // 41
	/**                                                                                                                   // 42
	 * Define hasData functions for series. These return true if there are data points on this series within the plot area
	 */	                                                                                                                  // 44
	function hasDataPie() {                                                                                               // 45
		return !!this.points.length; /* != 0 */                                                                              // 46
	}                                                                                                                     // 47
                                                                                                                       // 48
	each(['pie', 'gauge', 'waterfall', 'bubble'], function (type) {                                                       // 49
		if (seriesTypes[type]) {                                                                                             // 50
			seriesTypes[type].prototype.hasData = hasDataPie;                                                                   // 51
		}                                                                                                                    // 52
	});                                                                                                                   // 53
                                                                                                                       // 54
	H.Series.prototype.hasData = function () {                                                                            // 55
		return this.visible && this.dataMax !== undefined && this.dataMin !== undefined; // #3703                            // 56
	};                                                                                                                    // 57
	                                                                                                                      // 58
	/**                                                                                                                   // 59
	 * Display a no-data message.                                                                                         // 60
	 *                                                                                                                    // 61
	 * @param {String} str An optional message to show in place of the default one                                        // 62
	 */                                                                                                                   // 63
	chartPrototype.showNoData = function (str) {                                                                          // 64
		var chart = this,                                                                                                    // 65
			options = chart.options,                                                                                            // 66
			text = str || options.lang.noData,                                                                                  // 67
			noDataOptions = options.noData;                                                                                     // 68
                                                                                                                       // 69
		if (!chart.noDataLabel) {                                                                                            // 70
			chart.noDataLabel = chart.renderer                                                                                  // 71
				.label(                                                                                                            // 72
					text,                                                                                                             // 73
					0,                                                                                                                // 74
					0,                                                                                                                // 75
					null,                                                                                                             // 76
					null,                                                                                                             // 77
					null,                                                                                                             // 78
					noDataOptions.useHTML,                                                                                            // 79
					null,                                                                                                             // 80
					'no-data'                                                                                                         // 81
				)                                                                                                                  // 82
				.attr(noDataOptions.attr)                                                                                          // 83
				.css(noDataOptions.style)                                                                                          // 84
				.add();                                                                                                            // 85
			chart.noDataLabel.align(extend(chart.noDataLabel.getBBox(), noDataOptions.position), false, 'plotBox');             // 86
		}                                                                                                                    // 87
	};                                                                                                                    // 88
                                                                                                                       // 89
	/**                                                                                                                   // 90
	 * Hide no-data message	                                                                                              // 91
	 */	                                                                                                                  // 92
	chartPrototype.hideNoData = function () {                                                                             // 93
		var chart = this;                                                                                                    // 94
		if (chart.noDataLabel) {                                                                                             // 95
			chart.noDataLabel = chart.noDataLabel.destroy();                                                                    // 96
		}                                                                                                                    // 97
	};                                                                                                                    // 98
                                                                                                                       // 99
	/**                                                                                                                   // 100
	 * Returns true if there are data points within the plot area now                                                     // 101
	 */	                                                                                                                  // 102
	chartPrototype.hasData = function () {                                                                                // 103
		var chart = this,                                                                                                    // 104
			series = chart.series,                                                                                              // 105
			i = series.length;                                                                                                  // 106
                                                                                                                       // 107
		while (i--) {                                                                                                        // 108
			if (series[i].hasData() && !series[i].options.isInternal) {                                                         // 109
				return true;                                                                                                       // 110
			}	                                                                                                                  // 111
		}                                                                                                                    // 112
                                                                                                                       // 113
		return false;                                                                                                        // 114
	};                                                                                                                    // 115
                                                                                                                       // 116
	/**                                                                                                                   // 117
	 * Show no-data message if there is no data in sight. Otherwise, hide it.                                             // 118
	 */                                                                                                                   // 119
	function handleNoData() {                                                                                             // 120
		var chart = this;                                                                                                    // 121
		if (chart.hasData()) {                                                                                               // 122
			chart.hideNoData();                                                                                                 // 123
		} else {                                                                                                             // 124
			chart.showNoData();                                                                                                 // 125
		}                                                                                                                    // 126
	}                                                                                                                     // 127
                                                                                                                       // 128
	/**                                                                                                                   // 129
	 * Add event listener to handle automatic display of no-data message                                                  // 130
	 */                                                                                                                   // 131
	chartPrototype.callbacks.push(function (chart) {                                                                      // 132
		H.addEvent(chart, 'load', handleNoData);                                                                             // 133
		H.addEvent(chart, 'redraw', handleNoData);                                                                           // 134
	});                                                                                                                   // 135
                                                                                                                       // 136
}(Highcharts));                                                                                                        // 137
                                                                                                                       // 138
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/maazalik:highcharts/lib/highcharts-more.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// ==ClosureCompiler==                                                                                                 // 1
// @compilation_level SIMPLE_OPTIMIZATIONS                                                                             // 2
                                                                                                                       // 3
/**                                                                                                                    // 4
 * @license Highcharts JS v4.1.7 (2015-06-26)                                                                          // 5
 *                                                                                                                     // 6
 * (c) 2009-2014 Torstein Honsi                                                                                        // 7
 *                                                                                                                     // 8
 * License: www.highcharts.com/license                                                                                 // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
// JSLint options:                                                                                                     // 12
/*global Highcharts, HighchartsAdapter, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console */
                                                                                                                       // 14
(function (Highcharts, UNDEFINED) {                                                                                    // 15
var arrayMin = Highcharts.arrayMin,                                                                                    // 16
	arrayMax = Highcharts.arrayMax,                                                                                       // 17
	each = Highcharts.each,                                                                                               // 18
	extend = Highcharts.extend,                                                                                           // 19
	merge = Highcharts.merge,                                                                                             // 20
	map = Highcharts.map,                                                                                                 // 21
	pick = Highcharts.pick,                                                                                               // 22
	pInt = Highcharts.pInt,                                                                                               // 23
	defaultPlotOptions = Highcharts.getOptions().plotOptions,                                                             // 24
	seriesTypes = Highcharts.seriesTypes,                                                                                 // 25
	extendClass = Highcharts.extendClass,                                                                                 // 26
	splat = Highcharts.splat,                                                                                             // 27
	wrap = Highcharts.wrap,                                                                                               // 28
	Axis = Highcharts.Axis,                                                                                               // 29
	Tick = Highcharts.Tick,                                                                                               // 30
	Point = Highcharts.Point,                                                                                             // 31
	Pointer = Highcharts.Pointer,                                                                                         // 32
	CenteredSeriesMixin = Highcharts.CenteredSeriesMixin,                                                                 // 33
	TrackerMixin = Highcharts.TrackerMixin,                                                                               // 34
	Series = Highcharts.Series,                                                                                           // 35
	math = Math,                                                                                                          // 36
	mathRound = math.round,                                                                                               // 37
	mathFloor = math.floor,                                                                                               // 38
	mathMax = math.max,                                                                                                   // 39
	Color = Highcharts.Color,                                                                                             // 40
	noop = function () {};/**                                                                                             // 41
 * The Pane object allows options that are common to a set of X and Y axes.                                            // 42
 *                                                                                                                     // 43
 * In the future, this can be extended to basic Highcharts and Highstock.                                              // 44
 */                                                                                                                    // 45
function Pane(options, chart, firstAxis) {                                                                             // 46
	this.init.call(this, options, chart, firstAxis);                                                                      // 47
}                                                                                                                      // 48
                                                                                                                       // 49
// Extend the Pane prototype                                                                                           // 50
extend(Pane.prototype, {                                                                                               // 51
	                                                                                                                      // 52
	/**                                                                                                                   // 53
	 * Initiate the Pane object                                                                                           // 54
	 */                                                                                                                   // 55
	init: function (options, chart, firstAxis) {                                                                          // 56
		var pane = this,                                                                                                     // 57
			backgroundOption,                                                                                                   // 58
			defaultOptions = pane.defaultOptions;                                                                               // 59
		                                                                                                                     // 60
		pane.chart = chart;                                                                                                  // 61
		                                                                                                                     // 62
		// Set options. Angular charts have a default background (#3318)                                                     // 63
		pane.options = options = merge(defaultOptions, chart.angular ? { background: {} } : undefined, options);             // 64
		                                                                                                                     // 65
		backgroundOption = options.background;                                                                               // 66
		                                                                                                                     // 67
		// To avoid having weighty logic to place, update and remove the backgrounds,                                        // 68
		// push them to the first axis' plot bands and borrow the existing logic there.                                      // 69
		if (backgroundOption) {                                                                                              // 70
			each([].concat(splat(backgroundOption)).reverse(), function (config) {                                              // 71
				var backgroundColor = config.backgroundColor,  // if defined, replace the old one (specific for gradients)         // 72
					axisUserOptions = firstAxis.userOptions;                                                                          // 73
				config = merge(pane.defaultBackgroundOptions, config);                                                             // 74
				if (backgroundColor) {                                                                                             // 75
					config.backgroundColor = backgroundColor;                                                                         // 76
				}                                                                                                                  // 77
				config.color = config.backgroundColor; // due to naming in plotBands                                               // 78
				firstAxis.options.plotBands.unshift(config);                                                                       // 79
				axisUserOptions.plotBands = axisUserOptions.plotBands || []; // #3176                                              // 80
				axisUserOptions.plotBands.unshift(config);                                                                         // 81
			});                                                                                                                 // 82
		}                                                                                                                    // 83
	},                                                                                                                    // 84
	                                                                                                                      // 85
	/**                                                                                                                   // 86
	 * The default options object                                                                                         // 87
	 */                                                                                                                   // 88
	defaultOptions: {                                                                                                     // 89
		// background: {conditional},                                                                                        // 90
		center: ['50%', '50%'],                                                                                              // 91
		size: '85%',                                                                                                         // 92
		startAngle: 0                                                                                                        // 93
		//endAngle: startAngle + 360                                                                                         // 94
	},	                                                                                                                   // 95
	                                                                                                                      // 96
	/**                                                                                                                   // 97
	 * The default background options                                                                                     // 98
	 */                                                                                                                   // 99
	defaultBackgroundOptions: {                                                                                           // 100
		shape: 'circle',                                                                                                     // 101
		borderWidth: 1,                                                                                                      // 102
		borderColor: 'silver',                                                                                               // 103
		backgroundColor: {                                                                                                   // 104
			linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },                                                                     // 105
			stops: [                                                                                                            // 106
				[0, '#FFF'],                                                                                                       // 107
				[1, '#DDD']                                                                                                        // 108
			]                                                                                                                   // 109
		},                                                                                                                   // 110
		from: -Number.MAX_VALUE, // corrected to axis min                                                                    // 111
		innerRadius: 0,                                                                                                      // 112
		to: Number.MAX_VALUE, // corrected to axis max                                                                       // 113
		outerRadius: '105%'                                                                                                  // 114
	}                                                                                                                     // 115
	                                                                                                                      // 116
});                                                                                                                    // 117
var axisProto = Axis.prototype,                                                                                        // 118
	tickProto = Tick.prototype;                                                                                           // 119
	                                                                                                                      // 120
/**                                                                                                                    // 121
 * Augmented methods for the x axis in order to hide it completely, used for the X axis in gauges                      // 122
 */                                                                                                                    // 123
var hiddenAxisMixin = {                                                                                                // 124
	getOffset: noop,                                                                                                      // 125
	redraw: function () {                                                                                                 // 126
		this.isDirty = false; // prevent setting Y axis dirty                                                                // 127
	},                                                                                                                    // 128
	render: function () {                                                                                                 // 129
		this.isDirty = false; // prevent setting Y axis dirty                                                                // 130
	},                                                                                                                    // 131
	setScale: noop,                                                                                                       // 132
	setCategories: noop,                                                                                                  // 133
	setTitle: noop                                                                                                        // 134
};                                                                                                                     // 135
                                                                                                                       // 136
/**                                                                                                                    // 137
 * Augmented methods for the value axis                                                                                // 138
 */                                                                                                                    // 139
/*jslint unparam: true*/                                                                                               // 140
var radialAxisMixin = {                                                                                                // 141
	isRadial: true,                                                                                                       // 142
	                                                                                                                      // 143
	/**                                                                                                                   // 144
	 * The default options extend defaultYAxisOptions                                                                     // 145
	 */                                                                                                                   // 146
	defaultRadialGaugeOptions: {                                                                                          // 147
		labels: {                                                                                                            // 148
			align: 'center',                                                                                                    // 149
			x: 0,                                                                                                               // 150
			y: null // auto                                                                                                     // 151
		},                                                                                                                   // 152
		minorGridLineWidth: 0,                                                                                               // 153
		minorTickInterval: 'auto',                                                                                           // 154
		minorTickLength: 10,                                                                                                 // 155
		minorTickPosition: 'inside',                                                                                         // 156
		minorTickWidth: 1,                                                                                                   // 157
		tickLength: 10,                                                                                                      // 158
		tickPosition: 'inside',                                                                                              // 159
		tickWidth: 2,                                                                                                        // 160
		title: {                                                                                                             // 161
			rotation: 0                                                                                                         // 162
		},                                                                                                                   // 163
		zIndex: 2 // behind dials, points in the series group                                                                // 164
	},                                                                                                                    // 165
	                                                                                                                      // 166
	// Circular axis around the perimeter of a polar chart                                                                // 167
	defaultRadialXOptions: {                                                                                              // 168
		gridLineWidth: 1, // spokes                                                                                          // 169
		labels: {                                                                                                            // 170
			align: null, // auto                                                                                                // 171
			distance: 15,                                                                                                       // 172
			x: 0,                                                                                                               // 173
			y: null // auto                                                                                                     // 174
		},                                                                                                                   // 175
		maxPadding: 0,                                                                                                       // 176
		minPadding: 0,                                                                                                       // 177
		showLastLabel: false,                                                                                                // 178
		tickLength: 0                                                                                                        // 179
	},                                                                                                                    // 180
	                                                                                                                      // 181
	// Radial axis, like a spoke in a polar chart                                                                         // 182
	defaultRadialYOptions: {                                                                                              // 183
		gridLineInterpolation: 'circle',                                                                                     // 184
		labels: {                                                                                                            // 185
			align: 'right',                                                                                                     // 186
			x: -3,                                                                                                              // 187
			y: -2                                                                                                               // 188
		},                                                                                                                   // 189
		showLastLabel: false,                                                                                                // 190
		title: {                                                                                                             // 191
			x: 4,                                                                                                               // 192
			text: null,                                                                                                         // 193
			rotation: 90                                                                                                        // 194
		}                                                                                                                    // 195
	},                                                                                                                    // 196
	                                                                                                                      // 197
	/**                                                                                                                   // 198
	 * Merge and set options                                                                                              // 199
	 */                                                                                                                   // 200
	setOptions: function (userOptions) {                                                                                  // 201
		                                                                                                                     // 202
		var options = this.options = merge(                                                                                  // 203
			this.defaultOptions,                                                                                                // 204
			this.defaultRadialOptions,                                                                                          // 205
			userOptions                                                                                                         // 206
		);                                                                                                                   // 207
                                                                                                                       // 208
		// Make sure the plotBands array is instanciated for each Axis (#2649)                                               // 209
		if (!options.plotBands) {                                                                                            // 210
			options.plotBands = [];                                                                                             // 211
		}                                                                                                                    // 212
		                                                                                                                     // 213
	},                                                                                                                    // 214
	                                                                                                                      // 215
	/**                                                                                                                   // 216
	 * Wrap the getOffset method to return zero offset for title or labels in a radial                                    // 217
	 * axis                                                                                                               // 218
	 */                                                                                                                   // 219
	getOffset: function () {                                                                                              // 220
		// Call the Axis prototype method (the method we're in now is on the instance)                                       // 221
		axisProto.getOffset.call(this);                                                                                      // 222
		                                                                                                                     // 223
		// Title or label offsets are not counted                                                                            // 224
		this.chart.axisOffset[this.side] = 0;                                                                                // 225
		                                                                                                                     // 226
		// Set the center array                                                                                              // 227
		this.center = this.pane.center = CenteredSeriesMixin.getCenter.call(this.pane);                                      // 228
	},                                                                                                                    // 229
                                                                                                                       // 230
                                                                                                                       // 231
	/**                                                                                                                   // 232
	 * Get the path for the axis line. This method is also referenced in the getPlotLinePath                              // 233
	 * method.                                                                                                            // 234
	 */                                                                                                                   // 235
	getLinePath: function (lineWidth, radius) {                                                                           // 236
		var center = this.center;                                                                                            // 237
		radius = pick(radius, center[2] / 2 - this.offset);                                                                  // 238
		                                                                                                                     // 239
		return this.chart.renderer.symbols.arc(                                                                              // 240
			this.left + center[0],                                                                                              // 241
			this.top + center[1],                                                                                               // 242
			radius,                                                                                                             // 243
			radius,                                                                                                             // 244
			{                                                                                                                   // 245
				start: this.startAngleRad,                                                                                         // 246
				end: this.endAngleRad,                                                                                             // 247
				open: true,                                                                                                        // 248
				innerR: 0                                                                                                          // 249
			}                                                                                                                   // 250
		);                                                                                                                   // 251
	},                                                                                                                    // 252
                                                                                                                       // 253
	/**                                                                                                                   // 254
	 * Override setAxisTranslation by setting the translation to the difference                                           // 255
	 * in rotation. This allows the translate method to return angle for                                                  // 256
	 * any given value.                                                                                                   // 257
	 */                                                                                                                   // 258
	setAxisTranslation: function () {                                                                                     // 259
		                                                                                                                     // 260
		// Call uber method		                                                                                                // 261
		axisProto.setAxisTranslation.call(this);                                                                             // 262
			                                                                                                                    // 263
		// Set transA and minPixelPadding                                                                                    // 264
		if (this.center) { // it's not defined the first time                                                                // 265
			if (this.isCircular) {                                                                                              // 266
				                                                                                                                   // 267
				this.transA = (this.endAngleRad - this.startAngleRad) /                                                            // 268
					((this.max - this.min) || 1);                                                                                     // 269
					                                                                                                                  // 270
				                                                                                                                   // 271
			} else {                                                                                                            // 272
				this.transA = (this.center[2] / 2) / ((this.max - this.min) || 1);                                                 // 273
			}                                                                                                                   // 274
			                                                                                                                    // 275
			if (this.isXAxis) {                                                                                                 // 276
				this.minPixelPadding = this.transA * this.minPointOffset;                                                          // 277
			} else {                                                                                                            // 278
				// This is a workaround for regression #2593, but categories still don't position correctly.                       // 279
				// TODO: Implement true handling of Y axis categories on gauges.                                                   // 280
				this.minPixelPadding = 0;                                                                                          // 281
			}                                                                                                                   // 282
		}                                                                                                                    // 283
	},                                                                                                                    // 284
	                                                                                                                      // 285
	/**                                                                                                                   // 286
	 * In case of auto connect, add one closestPointRange to the max value right before                                   // 287
	 * tickPositions are computed, so that ticks will extend passed the real max.                                         // 288
	 */                                                                                                                   // 289
	beforeSetTickPositions: function () {                                                                                 // 290
		if (this.autoConnect) {                                                                                              // 291
			this.max += (this.categories && 1) || this.pointRange || this.closestPointRange || 0; // #1197, #2260               // 292
		}                                                                                                                    // 293
	},                                                                                                                    // 294
	                                                                                                                      // 295
	/**                                                                                                                   // 296
	 * Override the setAxisSize method to use the arc's circumference as length. This                                     // 297
	 * allows tickPixelInterval to apply to pixel lengths along the perimeter                                             // 298
	 */                                                                                                                   // 299
	setAxisSize: function () {                                                                                            // 300
		                                                                                                                     // 301
		axisProto.setAxisSize.call(this);                                                                                    // 302
                                                                                                                       // 303
		if (this.isRadial) {                                                                                                 // 304
                                                                                                                       // 305
			// Set the center array                                                                                             // 306
			this.center = this.pane.center = Highcharts.CenteredSeriesMixin.getCenter.call(this.pane);                          // 307
                                                                                                                       // 308
			// The sector is used in Axis.translate to compute the translation of reversed axis points (#2570)                  // 309
			if (this.isCircular) {                                                                                              // 310
				this.sector = this.endAngleRad - this.startAngleRad;	                                                              // 311
			}                                                                                                                   // 312
			                                                                                                                    // 313
			// Axis len is used to lay out the ticks                                                                            // 314
			this.len = this.width = this.height = this.center[2] * pick(this.sector, 1) / 2;                                    // 315
                                                                                                                       // 316
                                                                                                                       // 317
		}                                                                                                                    // 318
	},                                                                                                                    // 319
	                                                                                                                      // 320
	/**                                                                                                                   // 321
	 * Returns the x, y coordinate of a point given by a value and a pixel distance                                       // 322
	 * from center                                                                                                        // 323
	 */                                                                                                                   // 324
	getPosition: function (value, length) {                                                                               // 325
		return this.postTranslate(                                                                                           // 326
			this.isCircular ? this.translate(value) : 0, // #2848                                                               // 327
			pick(this.isCircular ? length : this.translate(value), this.center[2] / 2) - this.offset                            // 328
		);		                                                                                                                 // 329
	},                                                                                                                    // 330
	                                                                                                                      // 331
	/**                                                                                                                   // 332
	 * Translate from intermediate plotX (angle), plotY (axis.len - radius) to final chart coordinates.                   // 333
	 */                                                                                                                   // 334
	postTranslate: function (angle, radius) {                                                                             // 335
		                                                                                                                     // 336
		var chart = this.chart,                                                                                              // 337
			center = this.center;                                                                                               // 338
			                                                                                                                    // 339
		angle = this.startAngleRad + angle;                                                                                  // 340
                                                                                                                       // 341
		return {                                                                                                             // 342
			x: chart.plotLeft + center[0] + Math.cos(angle) * radius,                                                           // 343
			y: chart.plotTop + center[1] + Math.sin(angle) * radius                                                             // 344
		};                                                                                                                   // 345
		                                                                                                                     // 346
	},                                                                                                                    // 347
	                                                                                                                      // 348
	/**                                                                                                                   // 349
	 * Find the path for plot bands along the radial axis                                                                 // 350
	 */                                                                                                                   // 351
	getPlotBandPath: function (from, to, options) {                                                                       // 352
		var center = this.center,                                                                                            // 353
			startAngleRad = this.startAngleRad,                                                                                 // 354
			fullRadius = center[2] / 2,                                                                                         // 355
			radii = [                                                                                                           // 356
				pick(options.outerRadius, '100%'),                                                                                 // 357
				options.innerRadius,                                                                                               // 358
				pick(options.thickness, 10)                                                                                        // 359
			],                                                                                                                  // 360
			percentRegex = /%$/,                                                                                                // 361
			start,                                                                                                              // 362
			end,                                                                                                                // 363
			open,                                                                                                               // 364
			isCircular = this.isCircular, // X axis in a polar chart                                                            // 365
			ret;                                                                                                                // 366
			                                                                                                                    // 367
		// Polygonal plot bands                                                                                              // 368
		if (this.options.gridLineInterpolation === 'polygon') {                                                              // 369
			ret = this.getPlotLinePath(from).concat(this.getPlotLinePath(to, true));                                            // 370
		                                                                                                                     // 371
		// Circular grid bands                                                                                               // 372
		} else {                                                                                                             // 373
                                                                                                                       // 374
			// Keep within bounds                                                                                               // 375
			from = Math.max(from, this.min);                                                                                    // 376
			to = Math.min(to, this.max);                                                                                        // 377
			                                                                                                                    // 378
			// Plot bands on Y axis (radial axis) - inner and outer radius depend on to and from                                // 379
			if (!isCircular) {                                                                                                  // 380
				radii[0] = this.translate(from);                                                                                   // 381
				radii[1] = this.translate(to);                                                                                     // 382
			}                                                                                                                   // 383
			                                                                                                                    // 384
			// Convert percentages to pixel values                                                                              // 385
			radii = map(radii, function (radius) {                                                                              // 386
				if (percentRegex.test(radius)) {                                                                                   // 387
					radius = (pInt(radius, 10) * fullRadius) / 100;                                                                   // 388
				}                                                                                                                  // 389
				return radius;                                                                                                     // 390
			});                                                                                                                 // 391
			                                                                                                                    // 392
			// Handle full circle                                                                                               // 393
			if (options.shape === 'circle' || !isCircular) {                                                                    // 394
				start = -Math.PI / 2;                                                                                              // 395
				end = Math.PI * 1.5;                                                                                               // 396
				open = true;                                                                                                       // 397
			} else {                                                                                                            // 398
				start = startAngleRad + this.translate(from);                                                                      // 399
				end = startAngleRad + this.translate(to);                                                                          // 400
			}                                                                                                                   // 401
		                                                                                                                     // 402
		                                                                                                                     // 403
			ret = this.chart.renderer.symbols.arc(                                                                              // 404
				this.left + center[0],                                                                                             // 405
				this.top + center[1],                                                                                              // 406
				radii[0],                                                                                                          // 407
				radii[0],                                                                                                          // 408
				{                                                                                                                  // 409
					start: Math.min(start, end), // Math is for reversed yAxis (#3606)                                                // 410
					end: Math.max(start, end),                                                                                        // 411
					innerR: pick(radii[1], radii[0] - radii[2]),                                                                      // 412
					open: open                                                                                                        // 413
				}                                                                                                                  // 414
			);                                                                                                                  // 415
		}                                                                                                                    // 416
                                                                                                                       // 417
		return ret;                                                                                                          // 418
	},                                                                                                                    // 419
	                                                                                                                      // 420
	/**                                                                                                                   // 421
	 * Find the path for plot lines perpendicular to the radial axis.                                                     // 422
	 */                                                                                                                   // 423
	getPlotLinePath: function (value, reverse) {                                                                          // 424
		var axis = this,                                                                                                     // 425
			center = axis.center,                                                                                               // 426
			chart = axis.chart,                                                                                                 // 427
			end = axis.getPosition(value),                                                                                      // 428
			xAxis,                                                                                                              // 429
			xy,                                                                                                                 // 430
			tickPositions,                                                                                                      // 431
			ret;                                                                                                                // 432
		                                                                                                                     // 433
		// Spokes                                                                                                            // 434
		if (axis.isCircular) {                                                                                               // 435
			ret = ['M', center[0] + chart.plotLeft, center[1] + chart.plotTop, 'L', end.x, end.y];                              // 436
		                                                                                                                     // 437
		// Concentric circles			                                                                                             // 438
		} else if (axis.options.gridLineInterpolation === 'circle') {                                                        // 439
			value = axis.translate(value);                                                                                      // 440
			if (value) { // a value of 0 is in the center                                                                       // 441
				ret = axis.getLinePath(0, value);                                                                                  // 442
			}                                                                                                                   // 443
		// Concentric polygons                                                                                               // 444
		} else {                                                                                                             // 445
			// Find the X axis in the same pane                                                                                 // 446
			each(chart.xAxis, function (a) {                                                                                    // 447
				if (a.pane === axis.pane) {                                                                                        // 448
					xAxis = a;                                                                                                        // 449
				}                                                                                                                  // 450
			});                                                                                                                 // 451
			ret = [];                                                                                                           // 452
			value = axis.translate(value);                                                                                      // 453
			tickPositions = xAxis.tickPositions;                                                                                // 454
			if (xAxis.autoConnect) {                                                                                            // 455
				tickPositions = tickPositions.concat([tickPositions[0]]);                                                          // 456
			}                                                                                                                   // 457
			// Reverse the positions for concatenation of polygonal plot bands                                                  // 458
			if (reverse) {                                                                                                      // 459
				tickPositions = [].concat(tickPositions).reverse();                                                                // 460
			}                                                                                                                   // 461
				                                                                                                                   // 462
			each(tickPositions, function (pos, i) {                                                                             // 463
				xy = xAxis.getPosition(pos, value);                                                                                // 464
				ret.push(i ? 'L' : 'M', xy.x, xy.y);                                                                               // 465
			});                                                                                                                 // 466
			                                                                                                                    // 467
		}                                                                                                                    // 468
		return ret;                                                                                                          // 469
	},                                                                                                                    // 470
	                                                                                                                      // 471
	/**                                                                                                                   // 472
	 * Find the position for the axis title, by default inside the gauge                                                  // 473
	 */                                                                                                                   // 474
	getTitlePosition: function () {                                                                                       // 475
		var center = this.center,                                                                                            // 476
			chart = this.chart,                                                                                                 // 477
			titleOptions = this.options.title;                                                                                  // 478
		                                                                                                                     // 479
		return {                                                                                                             // 480
			x: chart.plotLeft + center[0] + (titleOptions.x || 0),                                                              // 481
			y: chart.plotTop + center[1] - ({ high: 0.5, middle: 0.25, low: 0 }[titleOptions.align] *                           // 482
				center[2]) + (titleOptions.y || 0)                                                                                 // 483
		};                                                                                                                   // 484
	}                                                                                                                     // 485
	                                                                                                                      // 486
};                                                                                                                     // 487
/*jslint unparam: false*/                                                                                              // 488
                                                                                                                       // 489
/**                                                                                                                    // 490
 * Override axisProto.init to mix in special axis instance functions and function overrides                            // 491
 */                                                                                                                    // 492
wrap(axisProto, 'init', function (proceed, chart, userOptions) {                                                       // 493
	var axis = this,                                                                                                      // 494
		angular = chart.angular,                                                                                             // 495
		polar = chart.polar,                                                                                                 // 496
		isX = userOptions.isX,                                                                                               // 497
		isHidden = angular && isX,                                                                                           // 498
		isCircular,                                                                                                          // 499
		startAngleRad,                                                                                                       // 500
		endAngleRad,                                                                                                         // 501
		options,                                                                                                             // 502
		chartOptions = chart.options,                                                                                        // 503
		paneIndex = userOptions.pane || 0,                                                                                   // 504
		pane,                                                                                                                // 505
		paneOptions;                                                                                                         // 506
		                                                                                                                     // 507
	// Before prototype.init                                                                                              // 508
	if (angular) {                                                                                                        // 509
		extend(this, isHidden ? hiddenAxisMixin : radialAxisMixin);                                                          // 510
		isCircular =  !isX;                                                                                                  // 511
		if (isCircular) {                                                                                                    // 512
			this.defaultRadialOptions = this.defaultRadialGaugeOptions;                                                         // 513
		}                                                                                                                    // 514
		                                                                                                                     // 515
	} else if (polar) {                                                                                                   // 516
		//extend(this, userOptions.isX ? radialAxisMixin : radialAxisMixin);                                                 // 517
		extend(this, radialAxisMixin);                                                                                       // 518
		isCircular = isX;                                                                                                    // 519
		this.defaultRadialOptions = isX ? this.defaultRadialXOptions : merge(this.defaultYAxisOptions, this.defaultRadialYOptions);
		                                                                                                                     // 521
	}                                                                                                                     // 522
	                                                                                                                      // 523
	// Run prototype.init                                                                                                 // 524
	proceed.call(this, chart, userOptions);                                                                               // 525
	                                                                                                                      // 526
	if (!isHidden && (angular || polar)) {                                                                                // 527
		options = this.options;                                                                                              // 528
		                                                                                                                     // 529
		// Create the pane and set the pane options.                                                                         // 530
		if (!chart.panes) {                                                                                                  // 531
			chart.panes = [];                                                                                                   // 532
		}                                                                                                                    // 533
		this.pane = pane = chart.panes[paneIndex] = chart.panes[paneIndex] || new Pane(                                      // 534
			splat(chartOptions.pane)[paneIndex],                                                                                // 535
			chart,                                                                                                              // 536
			axis                                                                                                                // 537
		);                                                                                                                   // 538
		paneOptions = pane.options;                                                                                          // 539
		                                                                                                                     // 540
			                                                                                                                    // 541
		// Disable certain features on angular and polar axes                                                                // 542
		chart.inverted = false;                                                                                              // 543
		chartOptions.chart.zoomType = null;                                                                                  // 544
		                                                                                                                     // 545
		// Start and end angle options are                                                                                   // 546
		// given in degrees relative to top, while internal computations are                                                 // 547
		// in radians relative to right (like SVG).                                                                          // 548
		this.startAngleRad = startAngleRad = (paneOptions.startAngle - 90) * Math.PI / 180;                                  // 549
		this.endAngleRad = endAngleRad = (pick(paneOptions.endAngle, paneOptions.startAngle + 360)  - 90) * Math.PI / 180;   // 550
		this.offset = options.offset || 0;                                                                                   // 551
		                                                                                                                     // 552
		this.isCircular = isCircular;                                                                                        // 553
		                                                                                                                     // 554
		// Automatically connect grid lines?                                                                                 // 555
		if (isCircular && userOptions.max === UNDEFINED && endAngleRad - startAngleRad === 2 * Math.PI) {                    // 556
			this.autoConnect = true;                                                                                            // 557
		}                                                                                                                    // 558
	}                                                                                                                     // 559
	                                                                                                                      // 560
});                                                                                                                    // 561
                                                                                                                       // 562
/**                                                                                                                    // 563
 * Add special cases within the Tick class' methods for radial axes.                                                   // 564
 */	                                                                                                                   // 565
wrap(tickProto, 'getPosition', function (proceed, horiz, pos, tickmarkOffset, old) {                                   // 566
	var axis = this.axis;                                                                                                 // 567
	                                                                                                                      // 568
	return axis.getPosition ?                                                                                             // 569
		axis.getPosition(pos) :                                                                                              // 570
		proceed.call(this, horiz, pos, tickmarkOffset, old);	                                                                // 571
});                                                                                                                    // 572
                                                                                                                       // 573
/**                                                                                                                    // 574
 * Wrap the getLabelPosition function to find the center position of the label                                         // 575
 * based on the distance option                                                                                        // 576
 */	                                                                                                                   // 577
wrap(tickProto, 'getLabelPosition', function (proceed, x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {
	var axis = this.axis,                                                                                                 // 579
		optionsY = labelOptions.y,                                                                                           // 580
		ret,                                                                                                                 // 581
		centerSlot = 20, // 20 degrees to each side at the top and bottom                                                    // 582
		align = labelOptions.align,                                                                                          // 583
		angle = ((axis.translate(this.pos) + axis.startAngleRad + Math.PI / 2) / Math.PI * 180) % 360;                       // 584
                                                                                                                       // 585
	if (axis.isRadial) {                                                                                                  // 586
		ret = axis.getPosition(this.pos, (axis.center[2] / 2) + pick(labelOptions.distance, -25));                           // 587
		                                                                                                                     // 588
		// Automatically rotated                                                                                             // 589
		if (labelOptions.rotation === 'auto') {                                                                              // 590
			label.attr({                                                                                                        // 591
				rotation: angle                                                                                                    // 592
			});                                                                                                                 // 593
		                                                                                                                     // 594
		// Vertically centered                                                                                               // 595
		} else if (optionsY === null) {                                                                                      // 596
			optionsY = axis.chart.renderer.fontMetrics(label.styles.fontSize).b - label.getBBox().height / 2;                   // 597
		}                                                                                                                    // 598
		                                                                                                                     // 599
		// Automatic alignment                                                                                               // 600
		if (align === null) {                                                                                                // 601
			if (axis.isCircular) {                                                                                              // 602
				if (this.label.getBBox().width > axis.len * axis.tickInterval / (axis.max - axis.min)) { // #3506                  // 603
					centerSlot = 0;                                                                                                   // 604
				}                                                                                                                  // 605
				if (angle > centerSlot && angle < 180 - centerSlot) {                                                              // 606
					align = 'left'; // right hemisphere                                                                               // 607
				} else if (angle > 180 + centerSlot && angle < 360 - centerSlot) {                                                 // 608
					align = 'right'; // left hemisphere                                                                               // 609
				} else {                                                                                                           // 610
					align = 'center'; // top or bottom                                                                                // 611
				}                                                                                                                  // 612
			} else {                                                                                                            // 613
				align = 'center';                                                                                                  // 614
			}                                                                                                                   // 615
			label.attr({                                                                                                        // 616
				align: align                                                                                                       // 617
			});                                                                                                                 // 618
		}                                                                                                                    // 619
		                                                                                                                     // 620
		ret.x += labelOptions.x;                                                                                             // 621
		ret.y += optionsY;                                                                                                   // 622
		                                                                                                                     // 623
	} else {                                                                                                              // 624
		ret = proceed.call(this, x, y, label, horiz, labelOptions, tickmarkOffset, index, step);                             // 625
	}                                                                                                                     // 626
	return ret;                                                                                                           // 627
});                                                                                                                    // 628
                                                                                                                       // 629
/**                                                                                                                    // 630
 * Wrap the getMarkPath function to return the path of the radial marker                                               // 631
 */                                                                                                                    // 632
wrap(tickProto, 'getMarkPath', function (proceed, x, y, tickLength, tickWidth, horiz, renderer) {                      // 633
	var axis = this.axis,                                                                                                 // 634
		endPoint,                                                                                                            // 635
		ret;                                                                                                                 // 636
		                                                                                                                     // 637
	if (axis.isRadial) {                                                                                                  // 638
		endPoint = axis.getPosition(this.pos, axis.center[2] / 2 + tickLength);                                              // 639
		ret = [                                                                                                              // 640
			'M',                                                                                                                // 641
			x,                                                                                                                  // 642
			y,                                                                                                                  // 643
			'L',                                                                                                                // 644
			endPoint.x,                                                                                                         // 645
			endPoint.y                                                                                                          // 646
		];                                                                                                                   // 647
	} else {                                                                                                              // 648
		ret = proceed.call(this, x, y, tickLength, tickWidth, horiz, renderer);                                              // 649
	}                                                                                                                     // 650
	return ret;                                                                                                           // 651
});/*                                                                                                                  // 652
 * The AreaRangeSeries class                                                                                           // 653
 *                                                                                                                     // 654
 */                                                                                                                    // 655
                                                                                                                       // 656
/**                                                                                                                    // 657
 * Extend the default options with map options                                                                         // 658
 */                                                                                                                    // 659
defaultPlotOptions.arearange = merge(defaultPlotOptions.area, {                                                        // 660
	lineWidth: 1,                                                                                                         // 661
	marker: null,                                                                                                         // 662
	threshold: null,                                                                                                      // 663
	tooltip: {                                                                                                            // 664
		pointFormat: '<span style="color:{series.color}">\u25CF</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'
	},                                                                                                                    // 666
	trackByArea: true,                                                                                                    // 667
	dataLabels: {                                                                                                         // 668
		align: null,                                                                                                         // 669
		verticalAlign: null,                                                                                                 // 670
		xLow: 0,                                                                                                             // 671
		xHigh: 0,                                                                                                            // 672
		yLow: 0,                                                                                                             // 673
		yHigh: 0	                                                                                                            // 674
	},                                                                                                                    // 675
	states: {                                                                                                             // 676
		hover: {                                                                                                             // 677
			halo: false                                                                                                         // 678
		}                                                                                                                    // 679
	}                                                                                                                     // 680
});                                                                                                                    // 681
                                                                                                                       // 682
/**                                                                                                                    // 683
 * Add the series type                                                                                                 // 684
 */                                                                                                                    // 685
seriesTypes.arearange = extendClass(seriesTypes.area, {                                                                // 686
	type: 'arearange',                                                                                                    // 687
	pointArrayMap: ['low', 'high'],                                                                                       // 688
	toYData: function (point) {                                                                                           // 689
		return [point.low, point.high];                                                                                      // 690
	},                                                                                                                    // 691
	pointValKey: 'low',                                                                                                   // 692
	deferTranslatePolar: true,                                                                                            // 693
                                                                                                                       // 694
	/**                                                                                                                   // 695
	 * Translate a point's plotHigh from the internal angle and radius measures to                                        // 696
	 * true plotHigh coordinates. This is an addition of the toXY method found in                                         // 697
	 * Polar.js, because it runs too early for arearanges to be considered (#3419).                                       // 698
	 */                                                                                                                   // 699
	highToXY: function (point) {                                                                                          // 700
		// Find the polar plotX and plotY                                                                                    // 701
		var chart = this.chart,                                                                                              // 702
			xy = this.xAxis.postTranslate(point.rectPlotX, this.yAxis.len - point.plotHigh);                                    // 703
		point.plotHighX = xy.x - chart.plotLeft;                                                                             // 704
		point.plotHigh = xy.y - chart.plotTop;                                                                               // 705
	},                                                                                                                    // 706
	                                                                                                                      // 707
	/**                                                                                                                   // 708
	 * Extend getSegments to force null points if the higher value is null. #1703.                                        // 709
	 */                                                                                                                   // 710
	getSegments: function () {                                                                                            // 711
		var series = this;                                                                                                   // 712
                                                                                                                       // 713
		each(series.points, function (point) {                                                                               // 714
			if (!series.options.connectNulls && (point.low === null || point.high === null)) {                                  // 715
				point.y = null;                                                                                                    // 716
			} else if (point.low === null && point.high !== null) {                                                             // 717
				point.y = point.high;                                                                                              // 718
			}                                                                                                                   // 719
		});                                                                                                                  // 720
		Series.prototype.getSegments.call(this);                                                                             // 721
	},                                                                                                                    // 722
	                                                                                                                      // 723
	/**                                                                                                                   // 724
	 * Translate data points from raw values x and y to plotX and plotY                                                   // 725
	 */                                                                                                                   // 726
	translate: function () {                                                                                              // 727
		var series = this,                                                                                                   // 728
			yAxis = series.yAxis;                                                                                               // 729
                                                                                                                       // 730
		seriesTypes.area.prototype.translate.apply(series);                                                                  // 731
                                                                                                                       // 732
		// Set plotLow and plotHigh                                                                                          // 733
		each(series.points, function (point) {                                                                               // 734
                                                                                                                       // 735
			var low = point.low,                                                                                                // 736
				high = point.high,                                                                                                 // 737
				plotY = point.plotY;                                                                                               // 738
                                                                                                                       // 739
			if (high === null && low === null) {                                                                                // 740
				point.y = null;                                                                                                    // 741
			} else if (low === null) {                                                                                          // 742
				point.plotLow = point.plotY = null;                                                                                // 743
				point.plotHigh = yAxis.translate(high, 0, 1, 0, 1);                                                                // 744
			} else if (high === null) {                                                                                         // 745
				point.plotLow = plotY;                                                                                             // 746
				point.plotHigh = null;                                                                                             // 747
			} else {                                                                                                            // 748
				point.plotLow = plotY;                                                                                             // 749
				point.plotHigh = yAxis.translate(high, 0, 1, 0, 1);                                                                // 750
			}                                                                                                                   // 751
		});                                                                                                                  // 752
                                                                                                                       // 753
		// Postprocess plotHigh                                                                                              // 754
		if (this.chart.polar) {                                                                                              // 755
			each(this.points, function (point) {                                                                                // 756
				series.highToXY(point);                                                                                            // 757
			});                                                                                                                 // 758
		}                                                                                                                    // 759
	},                                                                                                                    // 760
	                                                                                                                      // 761
	/**                                                                                                                   // 762
	 * Extend the line series' getSegmentPath method by applying the segment                                              // 763
	 * path to both lower and higher values of the range                                                                  // 764
	 */                                                                                                                   // 765
	getSegmentPath: function (segment) {                                                                                  // 766
		                                                                                                                     // 767
		var lowSegment,                                                                                                      // 768
			highSegment = [],                                                                                                   // 769
			i = segment.length,                                                                                                 // 770
			baseGetSegmentPath = Series.prototype.getSegmentPath,                                                               // 771
			point,                                                                                                              // 772
			linePath,                                                                                                           // 773
			lowerPath,                                                                                                          // 774
			options = this.options,                                                                                             // 775
			step = options.step,                                                                                                // 776
			higherPath;                                                                                                         // 777
			                                                                                                                    // 778
		// Remove nulls from low segment                                                                                     // 779
		lowSegment = HighchartsAdapter.grep(segment, function (point) {                                                      // 780
			return point.plotLow !== null;                                                                                      // 781
		});                                                                                                                  // 782
		                                                                                                                     // 783
		// Make a segment with plotX and plotY for the top values                                                            // 784
		while (i--) {                                                                                                        // 785
			point = segment[i];                                                                                                 // 786
			if (point.plotHigh !== null) {                                                                                      // 787
				highSegment.push({                                                                                                 // 788
					plotX: point.plotHighX || point.plotX, // plotHighX is for polar charts                                           // 789
					plotY: point.plotHigh                                                                                             // 790
				});                                                                                                                // 791
			}                                                                                                                   // 792
		}                                                                                                                    // 793
		                                                                                                                     // 794
		// Get the paths                                                                                                     // 795
		lowerPath = baseGetSegmentPath.call(this, lowSegment);                                                               // 796
		if (step) {                                                                                                          // 797
			if (step === true) {                                                                                                // 798
				step = 'left';                                                                                                     // 799
			}                                                                                                                   // 800
			options.step = { left: 'right', center: 'center', right: 'left' }[step]; // swap for reading in getSegmentPath      // 801
		}                                                                                                                    // 802
		higherPath = baseGetSegmentPath.call(this, highSegment);                                                             // 803
		options.step = step;                                                                                                 // 804
		                                                                                                                     // 805
		// Create a line on both top and bottom of the range                                                                 // 806
		linePath = [].concat(lowerPath, higherPath);                                                                         // 807
		                                                                                                                     // 808
		// For the area path, we need to change the 'move' statement into 'lineTo' or 'curveTo'                              // 809
		if (!this.chart.polar) {                                                                                             // 810
			higherPath[0] = 'L'; // this probably doesn't work for spline                                                       // 811
		}                                                                                                                    // 812
		this.areaPath = this.areaPath.concat(lowerPath, higherPath);                                                         // 813
		                                                                                                                     // 814
		return linePath;                                                                                                     // 815
	},                                                                                                                    // 816
	                                                                                                                      // 817
	/**                                                                                                                   // 818
	 * Extend the basic drawDataLabels method by running it for both lower and higher                                     // 819
	 * values.                                                                                                            // 820
	 */                                                                                                                   // 821
	drawDataLabels: function () {                                                                                         // 822
		                                                                                                                     // 823
		var data = this.data,                                                                                                // 824
			length = data.length,                                                                                               // 825
			i,                                                                                                                  // 826
			originalDataLabels = [],                                                                                            // 827
			seriesProto = Series.prototype,                                                                                     // 828
			dataLabelOptions = this.options.dataLabels,                                                                         // 829
			align = dataLabelOptions.align,                                                                                     // 830
			point,                                                                                                              // 831
			up,                                                                                                                 // 832
			inverted = this.chart.inverted;                                                                                     // 833
			                                                                                                                    // 834
		if (dataLabelOptions.enabled || this._hasPointLabels) {                                                              // 835
			                                                                                                                    // 836
			// Step 1: set preliminary values for plotY and dataLabel and draw the upper labels                                 // 837
			i = length;                                                                                                         // 838
			while (i--) {                                                                                                       // 839
				point = data[i];                                                                                                   // 840
				if (point) {                                                                                                       // 841
					up = point.plotHigh > point.plotLow;                                                                              // 842
					                                                                                                                  // 843
					// Set preliminary values                                                                                         // 844
					point.y = point.high;                                                                                             // 845
					point._plotY = point.plotY;                                                                                       // 846
					point.plotY = point.plotHigh;                                                                                     // 847
					                                                                                                                  // 848
					// Store original data labels and set preliminary label objects to be picked up                                   // 849
					// in the uber method                                                                                             // 850
					originalDataLabels[i] = point.dataLabel;                                                                          // 851
					point.dataLabel = point.dataLabelUpper;                                                                           // 852
					                                                                                                                  // 853
					// Set the default offset                                                                                         // 854
					point.below = up;                                                                                                 // 855
					if (inverted) {                                                                                                   // 856
						if (!align) {                                                                                                    // 857
							dataLabelOptions.align = up ? 'right' : 'left';                                                                 // 858
						}                                                                                                                // 859
						dataLabelOptions.x = dataLabelOptions.xHigh;								                                                             // 860
					} else {                                                                                                          // 861
						dataLabelOptions.y = dataLabelOptions.yHigh;                                                                     // 862
					}                                                                                                                 // 863
				}                                                                                                                  // 864
			}                                                                                                                   // 865
			                                                                                                                    // 866
			if (seriesProto.drawDataLabels) {                                                                                   // 867
				seriesProto.drawDataLabels.apply(this, arguments); // #1209                                                        // 868
			}                                                                                                                   // 869
			                                                                                                                    // 870
			// Step 2: reorganize and handle data labels for the lower values                                                   // 871
			i = length;                                                                                                         // 872
			while (i--) {                                                                                                       // 873
				point = data[i];                                                                                                   // 874
				if (point) {                                                                                                       // 875
					up = point.plotHigh > point.plotLow;                                                                              // 876
					                                                                                                                  // 877
					// Move the generated labels from step 1, and reassign the original data labels                                   // 878
					point.dataLabelUpper = point.dataLabel;                                                                           // 879
					point.dataLabel = originalDataLabels[i];                                                                          // 880
					                                                                                                                  // 881
					// Reset values                                                                                                   // 882
					point.y = point.low;                                                                                              // 883
					point.plotY = point._plotY;                                                                                       // 884
					                                                                                                                  // 885
					// Set the default offset                                                                                         // 886
					point.below = !up;                                                                                                // 887
					if (inverted) {                                                                                                   // 888
						if (!align) {                                                                                                    // 889
							dataLabelOptions.align = up ? 'left' : 'right';                                                                 // 890
						}                                                                                                                // 891
						dataLabelOptions.x = dataLabelOptions.xLow;                                                                      // 892
					} else {                                                                                                          // 893
						dataLabelOptions.y = dataLabelOptions.yLow;                                                                      // 894
					}                                                                                                                 // 895
				}                                                                                                                  // 896
			}                                                                                                                   // 897
			if (seriesProto.drawDataLabels) {                                                                                   // 898
				seriesProto.drawDataLabels.apply(this, arguments);                                                                 // 899
			}                                                                                                                   // 900
		}                                                                                                                    // 901
                                                                                                                       // 902
		dataLabelOptions.align = align;                                                                                      // 903
	                                                                                                                      // 904
	},                                                                                                                    // 905
	                                                                                                                      // 906
	alignDataLabel: function () {                                                                                         // 907
		seriesTypes.column.prototype.alignDataLabel.apply(this, arguments);                                                  // 908
	},                                                                                                                    // 909
	                                                                                                                      // 910
	setStackedPoints: noop,                                                                                               // 911
	                                                                                                                      // 912
	getSymbol: noop,                                                                                                      // 913
	                                                                                                                      // 914
	drawPoints: noop                                                                                                      // 915
});/**                                                                                                                 // 916
 * The AreaSplineRangeSeries class                                                                                     // 917
 */                                                                                                                    // 918
                                                                                                                       // 919
defaultPlotOptions.areasplinerange = merge(defaultPlotOptions.arearange);                                              // 920
                                                                                                                       // 921
/**                                                                                                                    // 922
 * AreaSplineRangeSeries object                                                                                        // 923
 */                                                                                                                    // 924
seriesTypes.areasplinerange = extendClass(seriesTypes.arearange, {                                                     // 925
	type: 'areasplinerange',                                                                                              // 926
	getPointSpline: seriesTypes.spline.prototype.getPointSpline                                                           // 927
});                                                                                                                    // 928
                                                                                                                       // 929
(function () {                                                                                                         // 930
	                                                                                                                      // 931
	var colProto = seriesTypes.column.prototype;                                                                          // 932
                                                                                                                       // 933
	/**                                                                                                                   // 934
	 * The ColumnRangeSeries class                                                                                        // 935
	 */                                                                                                                   // 936
	defaultPlotOptions.columnrange = merge(defaultPlotOptions.column, defaultPlotOptions.arearange, {                     // 937
		lineWidth: 1,                                                                                                        // 938
		pointRange: null                                                                                                     // 939
	});                                                                                                                   // 940
                                                                                                                       // 941
	/**                                                                                                                   // 942
	 * ColumnRangeSeries object                                                                                           // 943
	 */                                                                                                                   // 944
	seriesTypes.columnrange = extendClass(seriesTypes.arearange, {                                                        // 945
		type: 'columnrange',                                                                                                 // 946
		/**                                                                                                                  // 947
		 * Translate data points from raw values x and y to plotX and plotY                                                  // 948
		 */                                                                                                                  // 949
		translate: function () {                                                                                             // 950
			var series = this,                                                                                                  // 951
				yAxis = series.yAxis,                                                                                              // 952
				plotHigh;                                                                                                          // 953
                                                                                                                       // 954
			colProto.translate.apply(series);                                                                                   // 955
                                                                                                                       // 956
			// Set plotLow and plotHigh                                                                                         // 957
			each(series.points, function (point) {                                                                              // 958
				var shapeArgs = point.shapeArgs,                                                                                   // 959
					minPointLength = series.options.minPointLength,                                                                   // 960
					heightDifference,                                                                                                 // 961
					height,                                                                                                           // 962
					y;                                                                                                                // 963
                                                                                                                       // 964
				point.tooltipPos = null; // don't inherit from column                                                              // 965
				point.plotHigh = plotHigh = yAxis.translate(point.high, 0, 1, 0, 1);                                               // 966
				point.plotLow = point.plotY;                                                                                       // 967
                                                                                                                       // 968
				// adjust shape                                                                                                    // 969
				y = plotHigh;                                                                                                      // 970
				height = point.plotY - plotHigh;                                                                                   // 971
                                                                                                                       // 972
				// Adjust for minPointLength                                                                                       // 973
				if (Math.abs(height) < minPointLength) {                                                                           // 974
					heightDifference = (minPointLength - height);                                                                     // 975
					height += heightDifference;                                                                                       // 976
					y -= heightDifference / 2;                                                                                        // 977
                                                                                                                       // 978
				// Adjust for negative ranges or reversed Y axis (#1457)                                                           // 979
				} else if (height < 0) {                                                                                           // 980
					height *= -1;                                                                                                     // 981
					y -= height;                                                                                                      // 982
				}                                                                                                                  // 983
                                                                                                                       // 984
				shapeArgs.height = height;                                                                                         // 985
				shapeArgs.y = y;                                                                                                   // 986
			});                                                                                                                 // 987
		},                                                                                                                   // 988
		directTouch: true,                                                                                                   // 989
		trackerGroups: ['group', 'dataLabelsGroup'],                                                                         // 990
		drawGraph: noop,                                                                                                     // 991
		pointAttrToOptions: colProto.pointAttrToOptions,                                                                     // 992
		drawPoints: colProto.drawPoints,                                                                                     // 993
		drawTracker: colProto.drawTracker,                                                                                   // 994
		animate: colProto.animate,                                                                                           // 995
		getColumnMetrics: colProto.getColumnMetrics                                                                          // 996
	});                                                                                                                   // 997
}());                                                                                                                  // 998
                                                                                                                       // 999
/*                                                                                                                     // 1000
 * The GaugeSeries class                                                                                               // 1001
 */                                                                                                                    // 1002
                                                                                                                       // 1003
                                                                                                                       // 1004
                                                                                                                       // 1005
/**                                                                                                                    // 1006
 * Extend the default options                                                                                          // 1007
 */                                                                                                                    // 1008
defaultPlotOptions.gauge = merge(defaultPlotOptions.line, {                                                            // 1009
	dataLabels: {                                                                                                         // 1010
		enabled: true,                                                                                                       // 1011
		defer: false,                                                                                                        // 1012
		y: 15,                                                                                                               // 1013
		borderWidth: 1,                                                                                                      // 1014
		borderColor: 'silver',                                                                                               // 1015
		borderRadius: 3,                                                                                                     // 1016
		crop: false,                                                                                                         // 1017
		verticalAlign: 'top',                                                                                                // 1018
		zIndex: 2                                                                                                            // 1019
	},                                                                                                                    // 1020
	dial: {                                                                                                               // 1021
		// radius: '80%',                                                                                                    // 1022
		// backgroundColor: 'black',                                                                                         // 1023
		// borderColor: 'silver',                                                                                            // 1024
		// borderWidth: 0,                                                                                                   // 1025
		// baseWidth: 3,                                                                                                     // 1026
		// topWidth: 1,                                                                                                      // 1027
		// baseLength: '70%' // of radius                                                                                    // 1028
		// rearLength: '10%'                                                                                                 // 1029
	},                                                                                                                    // 1030
	pivot: {                                                                                                              // 1031
		//radius: 5,                                                                                                         // 1032
		//borderWidth: 0                                                                                                     // 1033
		//borderColor: 'silver',                                                                                             // 1034
		//backgroundColor: 'black'                                                                                           // 1035
	},                                                                                                                    // 1036
	tooltip: {                                                                                                            // 1037
		headerFormat: ''                                                                                                     // 1038
	},                                                                                                                    // 1039
	showInLegend: false                                                                                                   // 1040
});                                                                                                                    // 1041
                                                                                                                       // 1042
/**                                                                                                                    // 1043
 * Extend the point object                                                                                             // 1044
 */                                                                                                                    // 1045
var GaugePoint = extendClass(Point, {                                                                                  // 1046
	/**                                                                                                                   // 1047
	 * Don't do any hover colors or anything                                                                              // 1048
	 */                                                                                                                   // 1049
	setState: function (state) {                                                                                          // 1050
		this.state = state;                                                                                                  // 1051
	}                                                                                                                     // 1052
});                                                                                                                    // 1053
                                                                                                                       // 1054
                                                                                                                       // 1055
/**                                                                                                                    // 1056
 * Add the series type                                                                                                 // 1057
 */                                                                                                                    // 1058
var GaugeSeries = {                                                                                                    // 1059
	type: 'gauge',                                                                                                        // 1060
	pointClass: GaugePoint,                                                                                               // 1061
	                                                                                                                      // 1062
	// chart.angular will be set to true when a gauge series is present, and this will                                    // 1063
	// be used on the axes                                                                                                // 1064
	angular: true,                                                                                                        // 1065
	drawGraph: noop,                                                                                                      // 1066
	fixedBox: true,                                                                                                       // 1067
	forceDL: true,                                                                                                        // 1068
	trackerGroups: ['group', 'dataLabelsGroup'],                                                                          // 1069
	                                                                                                                      // 1070
	/**                                                                                                                   // 1071
	 * Calculate paths etc                                                                                                // 1072
	 */                                                                                                                   // 1073
	translate: function () {                                                                                              // 1074
		                                                                                                                     // 1075
		var series = this,                                                                                                   // 1076
			yAxis = series.yAxis,                                                                                               // 1077
			options = series.options,                                                                                           // 1078
			center = yAxis.center;                                                                                              // 1079
			                                                                                                                    // 1080
		series.generatePoints();                                                                                             // 1081
		                                                                                                                     // 1082
		each(series.points, function (point) {                                                                               // 1083
			                                                                                                                    // 1084
			var dialOptions = merge(options.dial, point.dial),                                                                  // 1085
				radius = (pInt(pick(dialOptions.radius, 80)) * center[2]) / 200,                                                   // 1086
				baseLength = (pInt(pick(dialOptions.baseLength, 70)) * radius) / 100,                                              // 1087
				rearLength = (pInt(pick(dialOptions.rearLength, 10)) * radius) / 100,                                              // 1088
				baseWidth = dialOptions.baseWidth || 3,                                                                            // 1089
				topWidth = dialOptions.topWidth || 1,                                                                              // 1090
				overshoot = options.overshoot,                                                                                     // 1091
				rotation = yAxis.startAngleRad + yAxis.translate(point.y, null, null, null, true);                                 // 1092
                                                                                                                       // 1093
			// Handle the wrap and overshoot options                                                                            // 1094
			if (overshoot && typeof overshoot === 'number') {                                                                   // 1095
				overshoot = overshoot / 180 * Math.PI;                                                                             // 1096
				rotation = Math.max(yAxis.startAngleRad - overshoot, Math.min(yAxis.endAngleRad + overshoot, rotation));			        // 1097
			                                                                                                                    // 1098
			} else if (options.wrap === false) {                                                                                // 1099
				rotation = Math.max(yAxis.startAngleRad, Math.min(yAxis.endAngleRad, rotation));                                   // 1100
			}                                                                                                                   // 1101
                                                                                                                       // 1102
			rotation = rotation * 180 / Math.PI;                                                                                // 1103
				                                                                                                                   // 1104
			point.shapeType = 'path';                                                                                           // 1105
			point.shapeArgs = {                                                                                                 // 1106
				d: dialOptions.path || [                                                                                           // 1107
					'M',                                                                                                              // 1108
					-rearLength, -baseWidth / 2,                                                                                      // 1109
					'L',                                                                                                              // 1110
					baseLength, -baseWidth / 2,                                                                                       // 1111
					radius, -topWidth / 2,                                                                                            // 1112
					radius, topWidth / 2,                                                                                             // 1113
					baseLength, baseWidth / 2,                                                                                        // 1114
					-rearLength, baseWidth / 2,                                                                                       // 1115
					'z'                                                                                                               // 1116
				],                                                                                                                 // 1117
				translateX: center[0],                                                                                             // 1118
				translateY: center[1],                                                                                             // 1119
				rotation: rotation                                                                                                 // 1120
			};                                                                                                                  // 1121
			                                                                                                                    // 1122
			// Positions for data label                                                                                         // 1123
			point.plotX = center[0];                                                                                            // 1124
			point.plotY = center[1];                                                                                            // 1125
		});                                                                                                                  // 1126
	},                                                                                                                    // 1127
	                                                                                                                      // 1128
	/**                                                                                                                   // 1129
	 * Draw the points where each point is one needle                                                                     // 1130
	 */                                                                                                                   // 1131
	drawPoints: function () {                                                                                             // 1132
		                                                                                                                     // 1133
		var series = this,                                                                                                   // 1134
			center = series.yAxis.center,                                                                                       // 1135
			pivot = series.pivot,                                                                                               // 1136
			options = series.options,                                                                                           // 1137
			pivotOptions = options.pivot,                                                                                       // 1138
			renderer = series.chart.renderer;                                                                                   // 1139
		                                                                                                                     // 1140
		each(series.points, function (point) {                                                                               // 1141
			                                                                                                                    // 1142
			var graphic = point.graphic,                                                                                        // 1143
				shapeArgs = point.shapeArgs,                                                                                       // 1144
				d = shapeArgs.d,                                                                                                   // 1145
				dialOptions = merge(options.dial, point.dial); // #1233                                                            // 1146
			                                                                                                                    // 1147
			if (graphic) {                                                                                                      // 1148
				graphic.animate(shapeArgs);                                                                                        // 1149
				shapeArgs.d = d; // animate alters it                                                                              // 1150
			} else {                                                                                                            // 1151
				point.graphic = renderer[point.shapeType](shapeArgs)                                                               // 1152
					.attr({                                                                                                           // 1153
						stroke: dialOptions.borderColor || 'none',                                                                       // 1154
						'stroke-width': dialOptions.borderWidth || 0,                                                                    // 1155
						fill: dialOptions.backgroundColor || 'black',                                                                    // 1156
						rotation: shapeArgs.rotation // required by VML when animation is false                                          // 1157
					})                                                                                                                // 1158
					.add(series.group);                                                                                               // 1159
			}                                                                                                                   // 1160
		});                                                                                                                  // 1161
		                                                                                                                     // 1162
		// Add or move the pivot                                                                                             // 1163
		if (pivot) {                                                                                                         // 1164
			pivot.animate({ // #1235                                                                                            // 1165
				translateX: center[0],                                                                                             // 1166
				translateY: center[1]                                                                                              // 1167
			});                                                                                                                 // 1168
		} else {                                                                                                             // 1169
			series.pivot = renderer.circle(0, 0, pick(pivotOptions.radius, 5))                                                  // 1170
				.attr({                                                                                                            // 1171
					'stroke-width': pivotOptions.borderWidth || 0,                                                                    // 1172
					stroke: pivotOptions.borderColor || 'silver',                                                                     // 1173
					fill: pivotOptions.backgroundColor || 'black'                                                                     // 1174
				})                                                                                                                 // 1175
				.translate(center[0], center[1])                                                                                   // 1176
				.add(series.group);                                                                                                // 1177
		}                                                                                                                    // 1178
	},                                                                                                                    // 1179
	                                                                                                                      // 1180
	/**                                                                                                                   // 1181
	 * Animate the arrow up from startAngle                                                                               // 1182
	 */                                                                                                                   // 1183
	animate: function (init) {                                                                                            // 1184
		var series = this;                                                                                                   // 1185
                                                                                                                       // 1186
		if (!init) {                                                                                                         // 1187
			each(series.points, function (point) {                                                                              // 1188
				var graphic = point.graphic;                                                                                       // 1189
                                                                                                                       // 1190
				if (graphic) {                                                                                                     // 1191
					// start value                                                                                                    // 1192
					graphic.attr({                                                                                                    // 1193
						rotation: series.yAxis.startAngleRad * 180 / Math.PI                                                             // 1194
					});                                                                                                               // 1195
                                                                                                                       // 1196
					// animate                                                                                                        // 1197
					graphic.animate({                                                                                                 // 1198
						rotation: point.shapeArgs.rotation                                                                               // 1199
					}, series.options.animation);                                                                                     // 1200
				}                                                                                                                  // 1201
			});                                                                                                                 // 1202
                                                                                                                       // 1203
			// delete this function to allow it only once                                                                       // 1204
			series.animate = null;                                                                                              // 1205
		}                                                                                                                    // 1206
	},                                                                                                                    // 1207
	                                                                                                                      // 1208
	render: function () {                                                                                                 // 1209
		this.group = this.plotGroup(                                                                                         // 1210
			'group',                                                                                                            // 1211
			'series',                                                                                                           // 1212
			this.visible ? 'visible' : 'hidden',                                                                                // 1213
			this.options.zIndex,                                                                                                // 1214
			this.chart.seriesGroup                                                                                              // 1215
		);                                                                                                                   // 1216
		Series.prototype.render.call(this);                                                                                  // 1217
		this.group.clip(this.chart.clipRect);                                                                                // 1218
	},                                                                                                                    // 1219
	                                                                                                                      // 1220
	/**                                                                                                                   // 1221
	 * Extend the basic setData method by running processData and generatePoints immediately,                             // 1222
	 * in order to access the points from the legend.                                                                     // 1223
	 */                                                                                                                   // 1224
	setData: function (data, redraw) {                                                                                    // 1225
		Series.prototype.setData.call(this, data, false);                                                                    // 1226
		this.processData();                                                                                                  // 1227
		this.generatePoints();                                                                                               // 1228
		if (pick(redraw, true)) {                                                                                            // 1229
			this.chart.redraw();                                                                                                // 1230
		}                                                                                                                    // 1231
	},                                                                                                                    // 1232
                                                                                                                       // 1233
	/**                                                                                                                   // 1234
	 * If the tracking module is loaded, add the point tracker                                                            // 1235
	 */                                                                                                                   // 1236
	drawTracker: TrackerMixin && TrackerMixin.drawTrackerPoint                                                            // 1237
};                                                                                                                     // 1238
seriesTypes.gauge = extendClass(seriesTypes.line, GaugeSeries);                                                        // 1239
                                                                                                                       // 1240
/* ****************************************************************************                                        // 1241
 * Start Box plot series code											      *                                                                        // 1242
 *****************************************************************************/                                        // 1243
                                                                                                                       // 1244
// Set default options                                                                                                 // 1245
defaultPlotOptions.boxplot = merge(defaultPlotOptions.column, {                                                        // 1246
	fillColor: '#FFFFFF',                                                                                                 // 1247
	lineWidth: 1,                                                                                                         // 1248
	//medianColor: null,                                                                                                  // 1249
	medianWidth: 2,                                                                                                       // 1250
	states: {                                                                                                             // 1251
		hover: {                                                                                                             // 1252
			brightness: -0.3                                                                                                    // 1253
		}                                                                                                                    // 1254
	},                                                                                                                    // 1255
	//stemColor: null,                                                                                                    // 1256
	//stemDashStyle: 'solid'                                                                                              // 1257
	//stemWidth: null,                                                                                                    // 1258
	threshold: null,                                                                                                      // 1259
	tooltip: {                                                                                                            // 1260
		pointFormat: '<span style="color:{point.color}">\u25CF</span> <b> {series.name}</b><br/>' + // docs                  // 1261
			'Maximum: {point.high}<br/>' +                                                                                      // 1262
			'Upper quartile: {point.q3}<br/>' +                                                                                 // 1263
			'Median: {point.median}<br/>' +                                                                                     // 1264
			'Lower quartile: {point.q1}<br/>' +                                                                                 // 1265
			'Minimum: {point.low}<br/>'                                                                                         // 1266
			                                                                                                                    // 1267
	},                                                                                                                    // 1268
	//whiskerColor: null,                                                                                                 // 1269
	whiskerLength: '50%',                                                                                                 // 1270
	whiskerWidth: 2                                                                                                       // 1271
});                                                                                                                    // 1272
                                                                                                                       // 1273
// Create the series object                                                                                            // 1274
seriesTypes.boxplot = extendClass(seriesTypes.column, {                                                                // 1275
	type: 'boxplot',                                                                                                      // 1276
	pointArrayMap: ['low', 'q1', 'median', 'q3', 'high'], // array point configs are mapped to this                       // 1277
	toYData: function (point) { // return a plain array for speedy calculation                                            // 1278
		return [point.low, point.q1, point.median, point.q3, point.high];                                                    // 1279
	},                                                                                                                    // 1280
	pointValKey: 'high', // defines the top of the tracker                                                                // 1281
	                                                                                                                      // 1282
	/**                                                                                                                   // 1283
	 * One-to-one mapping from options to SVG attributes                                                                  // 1284
	 */                                                                                                                   // 1285
	pointAttrToOptions: { // mapping between SVG attributes and the corresponding options                                 // 1286
		fill: 'fillColor',                                                                                                   // 1287
		stroke: 'color',                                                                                                     // 1288
		'stroke-width': 'lineWidth'                                                                                          // 1289
	},                                                                                                                    // 1290
	                                                                                                                      // 1291
	/**                                                                                                                   // 1292
	 * Disable data labels for box plot                                                                                   // 1293
	 */                                                                                                                   // 1294
	drawDataLabels: noop,                                                                                                 // 1295
                                                                                                                       // 1296
	/**                                                                                                                   // 1297
	 * Translate data points from raw values x and y to plotX and plotY                                                   // 1298
	 */                                                                                                                   // 1299
	translate: function () {                                                                                              // 1300
		var series = this,                                                                                                   // 1301
			yAxis = series.yAxis,                                                                                               // 1302
			pointArrayMap = series.pointArrayMap;                                                                               // 1303
                                                                                                                       // 1304
		seriesTypes.column.prototype.translate.apply(series);                                                                // 1305
                                                                                                                       // 1306
		// do the translation on each point dimension                                                                        // 1307
		each(series.points, function (point) {                                                                               // 1308
			each(pointArrayMap, function (key) {                                                                                // 1309
				if (point[key] !== null) {                                                                                         // 1310
					point[key + 'Plot'] = yAxis.translate(point[key], 0, 1, 0, 1);                                                    // 1311
				}                                                                                                                  // 1312
			});                                                                                                                 // 1313
		});                                                                                                                  // 1314
	},                                                                                                                    // 1315
                                                                                                                       // 1316
	/**                                                                                                                   // 1317
	 * Draw the data points                                                                                               // 1318
	 */                                                                                                                   // 1319
	drawPoints: function () {                                                                                             // 1320
		var series = this,  //state = series.state,                                                                          // 1321
			points = series.points,                                                                                             // 1322
			options = series.options,                                                                                           // 1323
			chart = series.chart,                                                                                               // 1324
			renderer = chart.renderer,                                                                                          // 1325
			pointAttr,                                                                                                          // 1326
			q1Plot,                                                                                                             // 1327
			q3Plot,                                                                                                             // 1328
			highPlot,                                                                                                           // 1329
			lowPlot,                                                                                                            // 1330
			medianPlot,                                                                                                         // 1331
			crispCorr,                                                                                                          // 1332
			crispX,                                                                                                             // 1333
			graphic,                                                                                                            // 1334
			stemPath,                                                                                                           // 1335
			stemAttr,                                                                                                           // 1336
			boxPath,                                                                                                            // 1337
			whiskersPath,                                                                                                       // 1338
			whiskersAttr,                                                                                                       // 1339
			medianPath,                                                                                                         // 1340
			medianAttr,                                                                                                         // 1341
			width,                                                                                                              // 1342
			left,                                                                                                               // 1343
			right,                                                                                                              // 1344
			halfWidth,                                                                                                          // 1345
			shapeArgs,                                                                                                          // 1346
			color,                                                                                                              // 1347
			doQuartiles = series.doQuartiles !== false, // error bar inherits this series type but doesn't do quartiles         // 1348
			whiskerLength = parseInt(series.options.whiskerLength, 10) / 100;                                                   // 1349
                                                                                                                       // 1350
                                                                                                                       // 1351
		each(points, function (point) {                                                                                      // 1352
                                                                                                                       // 1353
			graphic = point.graphic;                                                                                            // 1354
			shapeArgs = point.shapeArgs; // the box                                                                             // 1355
			stemAttr = {};                                                                                                      // 1356
			whiskersAttr = {};                                                                                                  // 1357
			medianAttr = {};                                                                                                    // 1358
			color = point.color || series.color;                                                                                // 1359
			                                                                                                                    // 1360
			if (point.plotY !== UNDEFINED) {                                                                                    // 1361
                                                                                                                       // 1362
				pointAttr = point.pointAttr[point.selected ? 'selected' : ''];                                                     // 1363
                                                                                                                       // 1364
				// crisp vector coordinates                                                                                        // 1365
				width = shapeArgs.width;                                                                                           // 1366
				left = mathFloor(shapeArgs.x);                                                                                     // 1367
				right = left + width;                                                                                              // 1368
				halfWidth = mathRound(width / 2);                                                                                  // 1369
				//crispX = mathRound(left + halfWidth) + crispCorr;                                                                // 1370
				q1Plot = mathFloor(doQuartiles ? point.q1Plot : point.lowPlot);// + crispCorr;                                     // 1371
				q3Plot = mathFloor(doQuartiles ? point.q3Plot : point.lowPlot);// + crispCorr;                                     // 1372
				highPlot = mathFloor(point.highPlot);// + crispCorr;                                                               // 1373
				lowPlot = mathFloor(point.lowPlot);// + crispCorr;                                                                 // 1374
				                                                                                                                   // 1375
				// Stem attributes                                                                                                 // 1376
				stemAttr.stroke = point.stemColor || options.stemColor || color;                                                   // 1377
				stemAttr['stroke-width'] = pick(point.stemWidth, options.stemWidth, options.lineWidth);                            // 1378
				stemAttr.dashstyle = point.stemDashStyle || options.stemDashStyle;                                                 // 1379
				                                                                                                                   // 1380
				// Whiskers attributes                                                                                             // 1381
				whiskersAttr.stroke = point.whiskerColor || options.whiskerColor || color;                                         // 1382
				whiskersAttr['stroke-width'] = pick(point.whiskerWidth, options.whiskerWidth, options.lineWidth);                  // 1383
				                                                                                                                   // 1384
				// Median attributes                                                                                               // 1385
				medianAttr.stroke = point.medianColor || options.medianColor || color;                                             // 1386
				medianAttr['stroke-width'] = pick(point.medianWidth, options.medianWidth, options.lineWidth);                      // 1387
				                                                                                                                   // 1388
				// The stem                                                                                                        // 1389
				crispCorr = (stemAttr['stroke-width'] % 2) / 2;                                                                    // 1390
				crispX = left + halfWidth + crispCorr;				                                                                         // 1391
				stemPath = [                                                                                                       // 1392
					// stem up                                                                                                        // 1393
					'M',                                                                                                              // 1394
					crispX, q3Plot,                                                                                                   // 1395
					'L',                                                                                                              // 1396
					crispX, highPlot,                                                                                                 // 1397
					                                                                                                                  // 1398
					// stem down                                                                                                      // 1399
					'M',                                                                                                              // 1400
					crispX, q1Plot,                                                                                                   // 1401
					'L',                                                                                                              // 1402
					crispX, lowPlot                                                                                                   // 1403
				];                                                                                                                 // 1404
				                                                                                                                   // 1405
				// The box                                                                                                         // 1406
				if (doQuartiles) {                                                                                                 // 1407
					crispCorr = (pointAttr['stroke-width'] % 2) / 2;                                                                  // 1408
					crispX = mathFloor(crispX) + crispCorr;                                                                           // 1409
					q1Plot = mathFloor(q1Plot) + crispCorr;                                                                           // 1410
					q3Plot = mathFloor(q3Plot) + crispCorr;                                                                           // 1411
					left += crispCorr;                                                                                                // 1412
					right += crispCorr;                                                                                               // 1413
					boxPath = [                                                                                                       // 1414
						'M',                                                                                                             // 1415
						left, q3Plot,                                                                                                    // 1416
						'L',                                                                                                             // 1417
						left, q1Plot,                                                                                                    // 1418
						'L',                                                                                                             // 1419
						right, q1Plot,                                                                                                   // 1420
						'L',                                                                                                             // 1421
						right, q3Plot,                                                                                                   // 1422
						'L',                                                                                                             // 1423
						left, q3Plot,                                                                                                    // 1424
						'z'                                                                                                              // 1425
					];                                                                                                                // 1426
				}                                                                                                                  // 1427
				                                                                                                                   // 1428
				// The whiskers                                                                                                    // 1429
				if (whiskerLength) {                                                                                               // 1430
					crispCorr = (whiskersAttr['stroke-width'] % 2) / 2;                                                               // 1431
					highPlot = highPlot + crispCorr;                                                                                  // 1432
					lowPlot = lowPlot + crispCorr;                                                                                    // 1433
					whiskersPath = [                                                                                                  // 1434
						// High whisker                                                                                                  // 1435
						'M',                                                                                                             // 1436
						crispX - halfWidth * whiskerLength,                                                                              // 1437
						highPlot,                                                                                                        // 1438
						'L',                                                                                                             // 1439
						crispX + halfWidth * whiskerLength,                                                                              // 1440
						highPlot,                                                                                                        // 1441
						                                                                                                                 // 1442
						// Low whisker                                                                                                   // 1443
						'M',                                                                                                             // 1444
						crispX - halfWidth * whiskerLength,                                                                              // 1445
						lowPlot,                                                                                                         // 1446
						'L',                                                                                                             // 1447
						crispX + halfWidth * whiskerLength,                                                                              // 1448
						lowPlot                                                                                                          // 1449
					];                                                                                                                // 1450
				}                                                                                                                  // 1451
				                                                                                                                   // 1452
				// The median                                                                                                      // 1453
				crispCorr = (medianAttr['stroke-width'] % 2) / 2;				                                                              // 1454
				medianPlot = mathRound(point.medianPlot) + crispCorr;                                                              // 1455
				medianPath = [                                                                                                     // 1456
					'M',                                                                                                              // 1457
					left,                                                                                                             // 1458
					medianPlot,                                                                                                       // 1459
					'L',                                                                                                              // 1460
					right,                                                                                                            // 1461
					medianPlot                                                                                                        // 1462
				];                                                                                                                 // 1463
				                                                                                                                   // 1464
				// Create or update the graphics                                                                                   // 1465
				if (graphic) { // update                                                                                           // 1466
					                                                                                                                  // 1467
					point.stem.animate({ d: stemPath });                                                                              // 1468
					if (whiskerLength) {                                                                                              // 1469
						point.whiskers.animate({ d: whiskersPath });                                                                     // 1470
					}                                                                                                                 // 1471
					if (doQuartiles) {                                                                                                // 1472
						point.box.animate({ d: boxPath });                                                                               // 1473
					}                                                                                                                 // 1474
					point.medianShape.animate({ d: medianPath });                                                                     // 1475
					                                                                                                                  // 1476
				} else { // create new                                                                                             // 1477
					point.graphic = graphic = renderer.g()                                                                            // 1478
						.add(series.group);                                                                                              // 1479
					                                                                                                                  // 1480
					point.stem = renderer.path(stemPath)                                                                              // 1481
						.attr(stemAttr)                                                                                                  // 1482
						.add(graphic);                                                                                                   // 1483
						                                                                                                                 // 1484
					if (whiskerLength) {                                                                                              // 1485
						point.whiskers = renderer.path(whiskersPath)                                                                     // 1486
							.attr(whiskersAttr)                                                                                             // 1487
							.add(graphic);                                                                                                  // 1488
					}                                                                                                                 // 1489
					if (doQuartiles) {                                                                                                // 1490
						point.box = renderer.path(boxPath)                                                                               // 1491
							.attr(pointAttr)                                                                                                // 1492
							.add(graphic);                                                                                                  // 1493
					}	                                                                                                                // 1494
					point.medianShape = renderer.path(medianPath)                                                                     // 1495
						.attr(medianAttr)                                                                                                // 1496
						.add(graphic);                                                                                                   // 1497
				}                                                                                                                  // 1498
			}                                                                                                                   // 1499
		});                                                                                                                  // 1500
                                                                                                                       // 1501
	},                                                                                                                    // 1502
	setStackedPoints: noop // #3890                                                                                       // 1503
                                                                                                                       // 1504
                                                                                                                       // 1505
});                                                                                                                    // 1506
                                                                                                                       // 1507
/* ****************************************************************************                                        // 1508
 * End Box plot series code												*                                                                               // 1509
 *****************************************************************************/                                        // 1510
/* ****************************************************************************                                        // 1511
 * Start error bar series code                                                *                                        // 1512
 *****************************************************************************/                                        // 1513
                                                                                                                       // 1514
// 1 - set default options                                                                                             // 1515
defaultPlotOptions.errorbar = merge(defaultPlotOptions.boxplot, {                                                      // 1516
	color: '#000000',                                                                                                     // 1517
	grouping: false,                                                                                                      // 1518
	linkedTo: ':previous',                                                                                                // 1519
	tooltip: {                                                                                                            // 1520
		pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>' // docs
	},                                                                                                                    // 1522
	whiskerWidth: null                                                                                                    // 1523
});                                                                                                                    // 1524
                                                                                                                       // 1525
// 2 - Create the series object                                                                                        // 1526
seriesTypes.errorbar = extendClass(seriesTypes.boxplot, {                                                              // 1527
	type: 'errorbar',                                                                                                     // 1528
	pointArrayMap: ['low', 'high'], // array point configs are mapped to this                                             // 1529
	toYData: function (point) { // return a plain array for speedy calculation                                            // 1530
		return [point.low, point.high];                                                                                      // 1531
	},                                                                                                                    // 1532
	pointValKey: 'high', // defines the top of the tracker                                                                // 1533
	doQuartiles: false,                                                                                                   // 1534
	drawDataLabels: seriesTypes.arearange ? seriesTypes.arearange.prototype.drawDataLabels : noop,                        // 1535
                                                                                                                       // 1536
	/**                                                                                                                   // 1537
	 * Get the width and X offset, either on top of the linked series column                                              // 1538
	 * or standalone                                                                                                      // 1539
	 */                                                                                                                   // 1540
	getColumnMetrics: function () {                                                                                       // 1541
		return (this.linkedParent && this.linkedParent.columnMetrics) ||                                                     // 1542
			seriesTypes.column.prototype.getColumnMetrics.call(this);                                                           // 1543
	}                                                                                                                     // 1544
});                                                                                                                    // 1545
                                                                                                                       // 1546
/* ****************************************************************************                                        // 1547
 * End error bar series code                                                  *                                        // 1548
 *****************************************************************************/                                        // 1549
/* ****************************************************************************                                        // 1550
 * Start Waterfall series code                                                *                                        // 1551
 *****************************************************************************/                                        // 1552
                                                                                                                       // 1553
// 1 - set default options                                                                                             // 1554
defaultPlotOptions.waterfall = merge(defaultPlotOptions.column, {                                                      // 1555
	lineWidth: 1,                                                                                                         // 1556
	lineColor: '#333',                                                                                                    // 1557
	dashStyle: 'dot',                                                                                                     // 1558
	borderColor: '#333',                                                                                                  // 1559
	dataLabels: {                                                                                                         // 1560
		inside: true                                                                                                         // 1561
	},                                                                                                                    // 1562
	states: {                                                                                                             // 1563
		hover: {                                                                                                             // 1564
			lineWidthPlus: 0 // #3126                                                                                           // 1565
		}                                                                                                                    // 1566
	}                                                                                                                     // 1567
});                                                                                                                    // 1568
                                                                                                                       // 1569
                                                                                                                       // 1570
// 2 - Create the series object                                                                                        // 1571
seriesTypes.waterfall = extendClass(seriesTypes.column, {                                                              // 1572
	type: 'waterfall',                                                                                                    // 1573
                                                                                                                       // 1574
	upColorProp: 'fill',                                                                                                  // 1575
                                                                                                                       // 1576
	pointValKey: 'y',                                                                                                     // 1577
                                                                                                                       // 1578
	/**                                                                                                                   // 1579
	 * Translate data points from raw values                                                                              // 1580
	 */                                                                                                                   // 1581
	translate: function () {                                                                                              // 1582
		var series = this,                                                                                                   // 1583
			options = series.options,                                                                                           // 1584
			yAxis = series.yAxis,                                                                                               // 1585
			len,                                                                                                                // 1586
			i,                                                                                                                  // 1587
			points,                                                                                                             // 1588
			point,                                                                                                              // 1589
			shapeArgs,                                                                                                          // 1590
			stack,                                                                                                              // 1591
			y,                                                                                                                  // 1592
			yValue,                                                                                                             // 1593
			previousY,                                                                                                          // 1594
			previousIntermediate,                                                                                               // 1595
			range,                                                                                                              // 1596
			threshold = options.threshold,                                                                                      // 1597
			stacking = options.stacking,                                                                                        // 1598
			tooltipY;                                                                                                           // 1599
                                                                                                                       // 1600
		// run column series translate                                                                                       // 1601
		seriesTypes.column.prototype.translate.apply(this);                                                                  // 1602
                                                                                                                       // 1603
		previousY = previousIntermediate = threshold;                                                                        // 1604
		points = series.points;                                                                                              // 1605
                                                                                                                       // 1606
		for (i = 0, len = points.length; i < len; i++) {                                                                     // 1607
			// cache current point object                                                                                       // 1608
			point = points[i];                                                                                                  // 1609
			yValue = this.processedYData[i];                                                                                    // 1610
			shapeArgs = point.shapeArgs;                                                                                        // 1611
                                                                                                                       // 1612
			// get current stack                                                                                                // 1613
			stack = stacking && yAxis.stacks[(series.negStacks && yValue < threshold ? '-' : '') + series.stackKey];            // 1614
			range = stack ?                                                                                                     // 1615
				stack[point.x].points[series.index + ',' + i] :                                                                    // 1616
				[0, yValue];                                                                                                       // 1617
                                                                                                                       // 1618
			// override point value for sums                                                                                    // 1619
			// #3710 Update point does not propagate to sum                                                                     // 1620
			if (point.isSum) {                                                                                                  // 1621
				point.y = yValue;                                                                                                  // 1622
			} else if (point.isIntermediateSum) {                                                                               // 1623
				point.y = yValue - previousIntermediate; // #3840                                                                  // 1624
			}                                                                                                                   // 1625
			// up points                                                                                                        // 1626
			y = mathMax(previousY, previousY + point.y) + range[0];                                                             // 1627
			shapeArgs.y = yAxis.translate(y, 0, 1);                                                                             // 1628
                                                                                                                       // 1629
                                                                                                                       // 1630
			// sum points                                                                                                       // 1631
			if (point.isSum) {                                                                                                  // 1632
				shapeArgs.y = yAxis.translate(range[1], 0, 1);                                                                     // 1633
				shapeArgs.height = Math.min(yAxis.translate(range[0], 0, 1), yAxis.len) - shapeArgs.y; // #4256                    // 1634
                                                                                                                       // 1635
			} else if (point.isIntermediateSum) {                                                                               // 1636
				shapeArgs.y = yAxis.translate(range[1], 0, 1);                                                                     // 1637
				shapeArgs.height = Math.min(yAxis.translate(previousIntermediate, 0, 1), yAxis.len) - shapeArgs.y;                 // 1638
				previousIntermediate = range[1];                                                                                   // 1639
                                                                                                                       // 1640
			// If it's not the sum point, update previous stack end position and get                                            // 1641
			// shape height (#3886)                                                                                             // 1642
			} else {                                                                                                            // 1643
				if (previousY !== 0) { // Not the first point                                                                      // 1644
					shapeArgs.height = yValue > 0 ?                                                                                   // 1645
						yAxis.translate(previousY, 0, 1) - shapeArgs.y :                                                                 // 1646
						yAxis.translate(previousY, 0, 1) - yAxis.translate(previousY - yValue, 0, 1);                                    // 1647
				}                                                                                                                  // 1648
				previousY += yValue;                                                                                               // 1649
			}                                                                                                                   // 1650
			// #3952 Negative sum or intermediate sum not rendered correctly                                                    // 1651
			if (shapeArgs.height < 0) {                                                                                         // 1652
				shapeArgs.y += shapeArgs.height;                                                                                   // 1653
				shapeArgs.height *= -1;                                                                                            // 1654
			}                                                                                                                   // 1655
                                                                                                                       // 1656
			point.plotY = shapeArgs.y = mathRound(shapeArgs.y) - (series.borderWidth % 2) / 2;                                  // 1657
			shapeArgs.height = mathMax(mathRound(shapeArgs.height), 0.001); // #3151                                            // 1658
			point.yBottom = shapeArgs.y + shapeArgs.height;                                                                     // 1659
                                                                                                                       // 1660
			// Correct tooltip placement (#3014)                                                                                // 1661
			tooltipY = point.plotY + (point.negative ? shapeArgs.height : 0);                                                   // 1662
			if (series.chart.inverted) {                                                                                        // 1663
				point.tooltipPos[0] = yAxis.len - tooltipY;                                                                        // 1664
			} else {                                                                                                            // 1665
				point.tooltipPos[1] = tooltipY;                                                                                    // 1666
			}                                                                                                                   // 1667
                                                                                                                       // 1668
		}                                                                                                                    // 1669
	},                                                                                                                    // 1670
                                                                                                                       // 1671
	/**                                                                                                                   // 1672
	 * Call default processData then override yData to reflect waterfall's extremes on yAxis                              // 1673
	 */                                                                                                                   // 1674
	processData: function (force) {                                                                                       // 1675
		var series = this,                                                                                                   // 1676
			options = series.options,                                                                                           // 1677
			yData = series.yData,                                                                                               // 1678
			points = series.options.data, // #3710 Update point does not propagate to sum                                       // 1679
			point,                                                                                                              // 1680
			dataLength = yData.length,                                                                                          // 1681
			threshold = options.threshold || 0,                                                                                 // 1682
			subSum,                                                                                                             // 1683
			sum,                                                                                                                // 1684
			dataMin,                                                                                                            // 1685
			dataMax,                                                                                                            // 1686
			y,                                                                                                                  // 1687
			i;                                                                                                                  // 1688
                                                                                                                       // 1689
		sum = subSum = dataMin = dataMax = threshold;                                                                        // 1690
                                                                                                                       // 1691
		for (i = 0; i < dataLength; i++) {                                                                                   // 1692
			y = yData[i];                                                                                                       // 1693
			point = points && points[i] ? points[i] : {};                                                                       // 1694
                                                                                                                       // 1695
			if (y === "sum" || point.isSum) {                                                                                   // 1696
				yData[i] = sum;                                                                                                    // 1697
			} else if (y === "intermediateSum" || point.isIntermediateSum) {                                                    // 1698
				yData[i] = subSum;                                                                                                 // 1699
			} else {                                                                                                            // 1700
				sum += y;                                                                                                          // 1701
				subSum += y;                                                                                                       // 1702
			}                                                                                                                   // 1703
			dataMin = Math.min(sum, dataMin);                                                                                   // 1704
			dataMax = Math.max(sum, dataMax);                                                                                   // 1705
		}                                                                                                                    // 1706
                                                                                                                       // 1707
		Series.prototype.processData.call(this, force);                                                                      // 1708
                                                                                                                       // 1709
		// Record extremes                                                                                                   // 1710
		series.dataMin = dataMin;                                                                                            // 1711
		series.dataMax = dataMax;                                                                                            // 1712
	},                                                                                                                    // 1713
                                                                                                                       // 1714
	/**                                                                                                                   // 1715
	 * Return y value or string if point is sum                                                                           // 1716
	 */                                                                                                                   // 1717
	toYData: function (pt) {                                                                                              // 1718
		if (pt.isSum) {                                                                                                      // 1719
			return (pt.x === 0 ? null : "sum"); //#3245 Error when first element is Sum or Intermediate Sum                     // 1720
		} else if (pt.isIntermediateSum) {                                                                                   // 1721
			return (pt.x === 0 ? null : "intermediateSum"); //#3245                                                             // 1722
		}                                                                                                                    // 1723
		return pt.y;                                                                                                         // 1724
	},                                                                                                                    // 1725
                                                                                                                       // 1726
	/**                                                                                                                   // 1727
	 * Postprocess mapping between options and SVG attributes                                                             // 1728
	 */                                                                                                                   // 1729
	getAttribs: function () {                                                                                             // 1730
		seriesTypes.column.prototype.getAttribs.apply(this, arguments);                                                      // 1731
                                                                                                                       // 1732
		var series = this,                                                                                                   // 1733
			options = series.options,                                                                                           // 1734
			stateOptions = options.states,                                                                                      // 1735
			upColor = options.upColor || series.color,                                                                          // 1736
			hoverColor = Highcharts.Color(upColor).brighten(0.1).get(),                                                         // 1737
			seriesDownPointAttr = merge(series.pointAttr),                                                                      // 1738
			upColorProp = series.upColorProp;                                                                                   // 1739
                                                                                                                       // 1740
		seriesDownPointAttr[''][upColorProp] = upColor;                                                                      // 1741
		seriesDownPointAttr.hover[upColorProp] = stateOptions.hover.upColor || hoverColor;                                   // 1742
		seriesDownPointAttr.select[upColorProp] = stateOptions.select.upColor || upColor;                                    // 1743
                                                                                                                       // 1744
		each(series.points, function (point) {                                                                               // 1745
			if (!point.options.color) {                                                                                         // 1746
				// Up color                                                                                                        // 1747
				if (point.y > 0) {                                                                                                 // 1748
					point.pointAttr = seriesDownPointAttr;                                                                            // 1749
					point.color = upColor;                                                                                            // 1750
                                                                                                                       // 1751
				// Down color (#3710, update to negative)                                                                          // 1752
				} else {                                                                                                           // 1753
					point.pointAttr = series.pointAttr;                                                                               // 1754
				}                                                                                                                  // 1755
			}                                                                                                                   // 1756
		});                                                                                                                  // 1757
	},                                                                                                                    // 1758
                                                                                                                       // 1759
	/**                                                                                                                   // 1760
	 * Draw columns' connector lines                                                                                      // 1761
	 */                                                                                                                   // 1762
	getGraphPath: function () {                                                                                           // 1763
                                                                                                                       // 1764
		var data = this.data,                                                                                                // 1765
			length = data.length,                                                                                               // 1766
			lineWidth = this.options.lineWidth + this.borderWidth,                                                              // 1767
			normalizer = mathRound(lineWidth) % 2 / 2,                                                                          // 1768
			path = [],                                                                                                          // 1769
			M = 'M',                                                                                                            // 1770
			L = 'L',                                                                                                            // 1771
			prevArgs,                                                                                                           // 1772
			pointArgs,                                                                                                          // 1773
			i,                                                                                                                  // 1774
			d;                                                                                                                  // 1775
                                                                                                                       // 1776
		for (i = 1; i < length; i++) {                                                                                       // 1777
			pointArgs = data[i].shapeArgs;                                                                                      // 1778
			prevArgs = data[i - 1].shapeArgs;                                                                                   // 1779
                                                                                                                       // 1780
			d = [                                                                                                               // 1781
				M,                                                                                                                 // 1782
				prevArgs.x + prevArgs.width, prevArgs.y + normalizer,                                                              // 1783
				L,                                                                                                                 // 1784
				pointArgs.x, prevArgs.y + normalizer                                                                               // 1785
			];                                                                                                                  // 1786
                                                                                                                       // 1787
			if (data[i - 1].y < 0) {                                                                                            // 1788
				d[2] += prevArgs.height;                                                                                           // 1789
				d[5] += prevArgs.height;                                                                                           // 1790
			}                                                                                                                   // 1791
                                                                                                                       // 1792
			path = path.concat(d);                                                                                              // 1793
		}                                                                                                                    // 1794
                                                                                                                       // 1795
		return path;                                                                                                         // 1796
	},                                                                                                                    // 1797
                                                                                                                       // 1798
	/**                                                                                                                   // 1799
	 * Extremes are recorded in processData                                                                               // 1800
	 */                                                                                                                   // 1801
	getExtremes: noop,                                                                                                    // 1802
                                                                                                                       // 1803
	drawGraph: Series.prototype.drawGraph                                                                                 // 1804
});                                                                                                                    // 1805
                                                                                                                       // 1806
/* ****************************************************************************                                        // 1807
 * End Waterfall series code                                                  *                                        // 1808
 *****************************************************************************/                                        // 1809
/**                                                                                                                    // 1810
 * Set the default options for polygon                                                                                 // 1811
 */                                                                                                                    // 1812
defaultPlotOptions.polygon = merge(defaultPlotOptions.scatter, {                                                       // 1813
	marker: {                                                                                                             // 1814
		enabled: false                                                                                                       // 1815
	}                                                                                                                     // 1816
});                                                                                                                    // 1817
                                                                                                                       // 1818
/**                                                                                                                    // 1819
 * The polygon series class                                                                                            // 1820
 */                                                                                                                    // 1821
seriesTypes.polygon = extendClass(seriesTypes.scatter, {                                                               // 1822
	type: 'polygon',                                                                                                      // 1823
	fillGraph: true,                                                                                                      // 1824
	// Close all segments                                                                                                 // 1825
	getSegmentPath: function (segment) {                                                                                  // 1826
		return Series.prototype.getSegmentPath.call(this, segment).concat('z');                                              // 1827
	},                                                                                                                    // 1828
	drawGraph: Series.prototype.drawGraph,                                                                                // 1829
	drawLegendSymbol: Highcharts.LegendSymbolMixin.drawRectangle                                                          // 1830
});                                                                                                                    // 1831
/* ****************************************************************************                                        // 1832
 * Start Bubble series code											          *                                                                      // 1833
 *****************************************************************************/                                        // 1834
                                                                                                                       // 1835
// 1 - set default options                                                                                             // 1836
defaultPlotOptions.bubble = merge(defaultPlotOptions.scatter, {                                                        // 1837
	dataLabels: {                                                                                                         // 1838
		formatter: function () { // #2945                                                                                    // 1839
			return this.point.z;                                                                                                // 1840
		},                                                                                                                   // 1841
		inside: true,                                                                                                        // 1842
		verticalAlign: 'middle'                                                                                              // 1843
	},                                                                                                                    // 1844
	// displayNegative: true,                                                                                             // 1845
	marker: {                                                                                                             // 1846
		// fillOpacity: 0.5,                                                                                                 // 1847
		lineColor: null, // inherit from series.color                                                                        // 1848
		lineWidth: 1                                                                                                         // 1849
	},                                                                                                                    // 1850
	minSize: 8,                                                                                                           // 1851
	maxSize: '20%',                                                                                                       // 1852
	// negativeColor: null,                                                                                               // 1853
	// sizeBy: 'area'                                                                                                     // 1854
	states: {                                                                                                             // 1855
		hover: {                                                                                                             // 1856
			halo: {                                                                                                             // 1857
				size: 5                                                                                                            // 1858
			}                                                                                                                   // 1859
		}                                                                                                                    // 1860
	},                                                                                                                    // 1861
	tooltip: {                                                                                                            // 1862
		pointFormat: '({point.x}, {point.y}), Size: {point.z}'                                                               // 1863
	},                                                                                                                    // 1864
	turboThreshold: 0,                                                                                                    // 1865
	zThreshold: 0,                                                                                                        // 1866
	zoneAxis: 'z'                                                                                                         // 1867
});                                                                                                                    // 1868
                                                                                                                       // 1869
var BubblePoint = extendClass(Point, {                                                                                 // 1870
	haloPath: function () {                                                                                               // 1871
		return Point.prototype.haloPath.call(this, this.shapeArgs.r + this.series.options.states.hover.halo.size);           // 1872
	},                                                                                                                    // 1873
	ttBelow: false                                                                                                        // 1874
});                                                                                                                    // 1875
                                                                                                                       // 1876
// 2 - Create the series object                                                                                        // 1877
seriesTypes.bubble = extendClass(seriesTypes.scatter, {                                                                // 1878
	type: 'bubble',                                                                                                       // 1879
	pointClass: BubblePoint,                                                                                              // 1880
	pointArrayMap: ['y', 'z'],                                                                                            // 1881
	parallelArrays: ['x', 'y', 'z'],                                                                                      // 1882
	trackerGroups: ['group', 'dataLabelsGroup'],                                                                          // 1883
	bubblePadding: true,                                                                                                  // 1884
	zoneAxis: 'z',                                                                                                        // 1885
	                                                                                                                      // 1886
	/**                                                                                                                   // 1887
	 * Mapping between SVG attributes and the corresponding options                                                       // 1888
	 */                                                                                                                   // 1889
	pointAttrToOptions: {                                                                                                 // 1890
		stroke: 'lineColor',                                                                                                 // 1891
		'stroke-width': 'lineWidth',                                                                                         // 1892
		fill: 'fillColor'                                                                                                    // 1893
	},                                                                                                                    // 1894
	                                                                                                                      // 1895
	/**                                                                                                                   // 1896
	 * Apply the fillOpacity to all fill positions                                                                        // 1897
	 */                                                                                                                   // 1898
	applyOpacity: function (fill) {                                                                                       // 1899
		var markerOptions = this.options.marker,                                                                             // 1900
			fillOpacity = pick(markerOptions.fillOpacity, 0.5);                                                                 // 1901
		                                                                                                                     // 1902
		// When called from Legend.colorizeItem, the fill isn't predefined                                                   // 1903
		fill = fill || markerOptions.fillColor || this.color;                                                                // 1904
		                                                                                                                     // 1905
		if (fillOpacity !== 1) {                                                                                             // 1906
			fill = Color(fill).setOpacity(fillOpacity).get('rgba');                                                             // 1907
		}                                                                                                                    // 1908
		return fill;                                                                                                         // 1909
	},                                                                                                                    // 1910
	                                                                                                                      // 1911
	/**                                                                                                                   // 1912
	 * Extend the convertAttribs method by applying opacity to the fill                                                   // 1913
	 */                                                                                                                   // 1914
	convertAttribs: function () {                                                                                         // 1915
		var obj = Series.prototype.convertAttribs.apply(this, arguments);                                                    // 1916
		                                                                                                                     // 1917
		obj.fill = this.applyOpacity(obj.fill);                                                                              // 1918
		                                                                                                                     // 1919
		return obj;                                                                                                          // 1920
	},                                                                                                                    // 1921
                                                                                                                       // 1922
	/**                                                                                                                   // 1923
	 * Get the radius for each point based on the minSize, maxSize and each point's Z value. This                         // 1924
	 * must be done prior to Series.translate because the axis needs to add padding in                                    // 1925
	 * accordance with the point sizes.                                                                                   // 1926
	 */                                                                                                                   // 1927
	getRadii: function (zMin, zMax, minSize, maxSize) {                                                                   // 1928
		var len,                                                                                                             // 1929
			i,                                                                                                                  // 1930
			pos,                                                                                                                // 1931
			zData = this.zData,                                                                                                 // 1932
			radii = [],                                                                                                         // 1933
			sizeByArea = this.options.sizeBy !== 'width',                                                                       // 1934
			zRange;                                                                                                             // 1935
		                                                                                                                     // 1936
		// Set the shape type and arguments to be picked up in drawPoints                                                    // 1937
		for (i = 0, len = zData.length; i < len; i++) {                                                                      // 1938
			zRange = zMax - zMin;                                                                                               // 1939
			pos = zRange > 0 ? // relative size, a number between 0 and 1                                                       // 1940
				(zData[i] - zMin) / (zMax - zMin) :                                                                                // 1941
				0.5;                                                                                                               // 1942
			if (sizeByArea && pos >= 0) {                                                                                       // 1943
				pos = Math.sqrt(pos);                                                                                              // 1944
			}                                                                                                                   // 1945
			radii.push(math.ceil(minSize + pos * (maxSize - minSize)) / 2);                                                     // 1946
		}                                                                                                                    // 1947
		this.radii = radii;                                                                                                  // 1948
	},                                                                                                                    // 1949
	                                                                                                                      // 1950
	/**                                                                                                                   // 1951
	 * Perform animation on the bubbles                                                                                   // 1952
	 */                                                                                                                   // 1953
	animate: function (init) {                                                                                            // 1954
		var animation = this.options.animation;                                                                              // 1955
		                                                                                                                     // 1956
		if (!init) { // run the animation                                                                                    // 1957
			each(this.points, function (point) {                                                                                // 1958
				var graphic = point.graphic,                                                                                       // 1959
					shapeArgs = point.shapeArgs;                                                                                      // 1960
                                                                                                                       // 1961
				if (graphic && shapeArgs) {                                                                                        // 1962
					// start values                                                                                                   // 1963
					graphic.attr('r', 1);                                                                                             // 1964
                                                                                                                       // 1965
					// animate                                                                                                        // 1966
					graphic.animate({                                                                                                 // 1967
						r: shapeArgs.r                                                                                                   // 1968
					}, animation);                                                                                                    // 1969
				}                                                                                                                  // 1970
			});                                                                                                                 // 1971
                                                                                                                       // 1972
			// delete this function to allow it only once                                                                       // 1973
			this.animate = null;                                                                                                // 1974
		}                                                                                                                    // 1975
	},                                                                                                                    // 1976
	                                                                                                                      // 1977
	/**                                                                                                                   // 1978
	 * Extend the base translate method to handle bubble size                                                             // 1979
	 */                                                                                                                   // 1980
	translate: function () {                                                                                              // 1981
		                                                                                                                     // 1982
		var i,                                                                                                               // 1983
			data = this.data,                                                                                                   // 1984
			point,                                                                                                              // 1985
			radius,                                                                                                             // 1986
			radii = this.radii;                                                                                                 // 1987
		                                                                                                                     // 1988
		// Run the parent method                                                                                             // 1989
		seriesTypes.scatter.prototype.translate.call(this);                                                                  // 1990
		                                                                                                                     // 1991
		// Set the shape type and arguments to be picked up in drawPoints                                                    // 1992
		i = data.length;                                                                                                     // 1993
		                                                                                                                     // 1994
		while (i--) {                                                                                                        // 1995
			point = data[i];                                                                                                    // 1996
			radius = radii ? radii[i] : 0; // #1737                                                                             // 1997
			                                                                                                                    // 1998
			if (radius >= this.minPxSize / 2) {                                                                                 // 1999
				// Shape arguments                                                                                                 // 2000
				point.shapeType = 'circle';                                                                                        // 2001
				point.shapeArgs = {                                                                                                // 2002
					x: point.plotX,                                                                                                   // 2003
					y: point.plotY,                                                                                                   // 2004
					r: radius                                                                                                         // 2005
				};                                                                                                                 // 2006
				                                                                                                                   // 2007
				// Alignment box for the data label                                                                                // 2008
				point.dlBox = {                                                                                                    // 2009
					x: point.plotX - radius,                                                                                          // 2010
					y: point.plotY - radius,                                                                                          // 2011
					width: 2 * radius,                                                                                                // 2012
					height: 2 * radius                                                                                                // 2013
				};                                                                                                                 // 2014
			} else { // below zThreshold                                                                                        // 2015
				point.shapeArgs = point.plotY = point.dlBox = UNDEFINED; // #1691                                                  // 2016
			}                                                                                                                   // 2017
		}                                                                                                                    // 2018
	},                                                                                                                    // 2019
	                                                                                                                      // 2020
	/**                                                                                                                   // 2021
	 * Get the series' symbol in the legend                                                                               // 2022
	 *                                                                                                                    // 2023
	 * @param {Object} legend The legend object                                                                           // 2024
	 * @param {Object} item The series (this) or point                                                                    // 2025
	 */                                                                                                                   // 2026
	drawLegendSymbol: function (legend, item) {                                                                           // 2027
		var radius = pInt(legend.itemStyle.fontSize) / 2;                                                                    // 2028
		                                                                                                                     // 2029
		item.legendSymbol = this.chart.renderer.circle(                                                                      // 2030
			radius,                                                                                                             // 2031
			legend.baseline - radius,                                                                                           // 2032
			radius                                                                                                              // 2033
		).attr({                                                                                                             // 2034
			zIndex: 3                                                                                                           // 2035
		}).add(item.legendGroup);                                                                                            // 2036
		item.legendSymbol.isMarker = true;	                                                                                  // 2037
		                                                                                                                     // 2038
	},                                                                                                                    // 2039
		                                                                                                                     // 2040
	drawPoints: seriesTypes.column.prototype.drawPoints,                                                                  // 2041
	alignDataLabel: seriesTypes.column.prototype.alignDataLabel,                                                          // 2042
	buildKDTree: noop,                                                                                                    // 2043
	applyZones: noop                                                                                                      // 2044
});                                                                                                                    // 2045
                                                                                                                       // 2046
/**                                                                                                                    // 2047
 * Add logic to pad each axis with the amount of pixels                                                                // 2048
 * necessary to avoid the bubbles to overflow.                                                                         // 2049
 */                                                                                                                    // 2050
Axis.prototype.beforePadding = function () {                                                                           // 2051
	var axis = this,                                                                                                      // 2052
		axisLength = this.len,                                                                                               // 2053
		chart = this.chart,                                                                                                  // 2054
		pxMin = 0,                                                                                                           // 2055
		pxMax = axisLength,                                                                                                  // 2056
		isXAxis = this.isXAxis,                                                                                              // 2057
		dataKey = isXAxis ? 'xData' : 'yData',                                                                               // 2058
		min = this.min,                                                                                                      // 2059
		extremes = {},                                                                                                       // 2060
		smallestSize = math.min(chart.plotWidth, chart.plotHeight),                                                          // 2061
		zMin = Number.MAX_VALUE,                                                                                             // 2062
		zMax = -Number.MAX_VALUE,                                                                                            // 2063
		range = this.max - min,                                                                                              // 2064
		transA = axisLength / range,                                                                                         // 2065
		activeSeries = [];                                                                                                   // 2066
                                                                                                                       // 2067
	// Handle padding on the second pass, or on redraw                                                                    // 2068
	each(this.series, function (series) {                                                                                 // 2069
                                                                                                                       // 2070
		var seriesOptions = series.options,                                                                                  // 2071
			zData;                                                                                                              // 2072
                                                                                                                       // 2073
		if (series.bubblePadding && (series.visible || !chart.options.chart.ignoreHiddenSeries)) {                           // 2074
                                                                                                                       // 2075
			// Correction for #1673                                                                                             // 2076
			axis.allowZoomOutside = true;                                                                                       // 2077
                                                                                                                       // 2078
			// Cache it                                                                                                         // 2079
			activeSeries.push(series);                                                                                          // 2080
                                                                                                                       // 2081
			if (isXAxis) { // because X axis is evaluated first                                                                 // 2082
			                                                                                                                    // 2083
				// For each series, translate the size extremes to pixel values                                                    // 2084
				each(['minSize', 'maxSize'], function (prop) {                                                                     // 2085
					var length = seriesOptions[prop],                                                                                 // 2086
						isPercent = /%$/.test(length);                                                                                   // 2087
					                                                                                                                  // 2088
					length = pInt(length);                                                                                            // 2089
					extremes[prop] = isPercent ?                                                                                      // 2090
						smallestSize * length / 100 :                                                                                    // 2091
						length;                                                                                                          // 2092
					                                                                                                                  // 2093
				});                                                                                                                // 2094
				series.minPxSize = extremes.minSize;                                                                               // 2095
				                                                                                                                   // 2096
				// Find the min and max Z                                                                                          // 2097
				zData = series.zData;                                                                                              // 2098
				if (zData.length) { // #1735                                                                                       // 2099
					zMin = pick(seriesOptions.zMin, math.min(                                                                         // 2100
						zMin,                                                                                                            // 2101
						math.max(                                                                                                        // 2102
							arrayMin(zData),                                                                                                // 2103
							seriesOptions.displayNegative === false ? seriesOptions.zThreshold : -Number.MAX_VALUE                          // 2104
						)                                                                                                                // 2105
					));                                                                                                               // 2106
					zMax = pick(seriesOptions.zMax, math.max(zMax, arrayMax(zData)));                                                 // 2107
				}                                                                                                                  // 2108
			}                                                                                                                   // 2109
		}                                                                                                                    // 2110
	});                                                                                                                   // 2111
                                                                                                                       // 2112
	each(activeSeries, function (series) {                                                                                // 2113
                                                                                                                       // 2114
		var data = series[dataKey],                                                                                          // 2115
			i = data.length,                                                                                                    // 2116
			radius;                                                                                                             // 2117
                                                                                                                       // 2118
		if (isXAxis) {                                                                                                       // 2119
			series.getRadii(zMin, zMax, extremes.minSize, extremes.maxSize);                                                    // 2120
		}                                                                                                                    // 2121
		                                                                                                                     // 2122
		if (range > 0) {                                                                                                     // 2123
			while (i--) {                                                                                                       // 2124
				if (typeof data[i] === 'number') {                                                                                 // 2125
					radius = series.radii[i];                                                                                         // 2126
					pxMin = Math.min(((data[i] - min) * transA) - radius, pxMin);                                                     // 2127
					pxMax = Math.max(((data[i] - min) * transA) + radius, pxMax);                                                     // 2128
				}                                                                                                                  // 2129
			}                                                                                                                   // 2130
		}                                                                                                                    // 2131
	});                                                                                                                   // 2132
	                                                                                                                      // 2133
	if (activeSeries.length && range > 0 && pick(this.options.min, this.userMin) === UNDEFINED && pick(this.options.max, this.userMax) === UNDEFINED) {
		pxMax -= axisLength;                                                                                                 // 2135
		transA *= (axisLength + pxMin - pxMax) / axisLength;                                                                 // 2136
		this.min += pxMin / transA;                                                                                          // 2137
		this.max += pxMax / transA;                                                                                          // 2138
	}                                                                                                                     // 2139
};                                                                                                                     // 2140
                                                                                                                       // 2141
/* ****************************************************************************                                        // 2142
 * End Bubble series code                                                     *                                        // 2143
 *****************************************************************************/                                        // 2144
                                                                                                                       // 2145
(function () {                                                                                                         // 2146
                                                                                                                       // 2147
	/**                                                                                                                   // 2148
	 * Extensions for polar charts. Additionally, much of the geometry required for polar charts is                       // 2149
	 * gathered in RadialAxes.js.                                                                                         // 2150
	 *                                                                                                                    // 2151
	 */                                                                                                                   // 2152
                                                                                                                       // 2153
	var seriesProto = Series.prototype,                                                                                   // 2154
		pointerProto = Pointer.prototype,                                                                                    // 2155
		colProto;                                                                                                            // 2156
                                                                                                                       // 2157
	/**                                                                                                                   // 2158
	 * Search a k-d tree by the point angle, used for shared tooltips in polar charts                                     // 2159
	 */                                                                                                                   // 2160
	seriesProto.searchPointByAngle = function (e) {                                                                       // 2161
		var series = this,                                                                                                   // 2162
			chart = series.chart,                                                                                               // 2163
			xAxis = series.xAxis,                                                                                               // 2164
			center = xAxis.pane.center,                                                                                         // 2165
			plotX = e.chartX - center[0] - chart.plotLeft,                                                                      // 2166
			plotY = e.chartY - center[1] - chart.plotTop;                                                                       // 2167
                                                                                                                       // 2168
		return this.searchKDTree({                                                                                           // 2169
			clientX: 180 + (Math.atan2(plotX, plotY) * (-180 / Math.PI))                                                        // 2170
		});                                                                                                                  // 2171
                                                                                                                       // 2172
	};                                                                                                                    // 2173
	                                                                                                                      // 2174
	/**                                                                                                                   // 2175
	 * Wrap the buildKDTree function so that it searches by angle (clientX) in case of shared tooltip,                    // 2176
	 * and by two dimensional distance in case of non-shared.                                                             // 2177
	 */                                                                                                                   // 2178
	wrap(seriesProto, 'buildKDTree', function (proceed) {                                                                 // 2179
		if (this.chart.polar) {                                                                                              // 2180
			if (this.kdByAngle) {                                                                                               // 2181
				this.searchPoint = this.searchPointByAngle;                                                                        // 2182
			} else {                                                                                                            // 2183
				this.kdDimensions = 2;                                                                                             // 2184
			}                                                                                                                   // 2185
		}                                                                                                                    // 2186
		proceed.apply(this);                                                                                                 // 2187
	});                                                                                                                   // 2188
                                                                                                                       // 2189
	/**                                                                                                                   // 2190
	 * Translate a point's plotX and plotY from the internal angle and radius measures to                                 // 2191
	 * true plotX, plotY coordinates                                                                                      // 2192
	 */                                                                                                                   // 2193
	seriesProto.toXY = function (point) {                                                                                 // 2194
		var xy,                                                                                                              // 2195
			chart = this.chart,                                                                                                 // 2196
			plotX = point.plotX,                                                                                                // 2197
			plotY = point.plotY,                                                                                                // 2198
			clientX;                                                                                                            // 2199
	                                                                                                                      // 2200
		// Save rectangular plotX, plotY for later computation                                                               // 2201
		point.rectPlotX = plotX;                                                                                             // 2202
		point.rectPlotY = plotY;                                                                                             // 2203
	                                                                                                                      // 2204
		// Find the polar plotX and plotY                                                                                    // 2205
		xy = this.xAxis.postTranslate(point.plotX, this.yAxis.len - plotY);                                                  // 2206
		point.plotX = point.polarPlotX = xy.x - chart.plotLeft;                                                              // 2207
		point.plotY = point.polarPlotY = xy.y - chart.plotTop;                                                               // 2208
                                                                                                                       // 2209
		// If shared tooltip, record the angle in degrees in order to align X points. Otherwise,                             // 2210
		// use a standard k-d tree to get the nearest point in two dimensions.                                               // 2211
		if (this.kdByAngle) {                                                                                                // 2212
			clientX = ((plotX / Math.PI * 180) + this.xAxis.pane.options.startAngle) % 360;                                     // 2213
			if (clientX < 0) { // #2665                                                                                         // 2214
				clientX += 360;                                                                                                    // 2215
			}                                                                                                                   // 2216
			point.clientX = clientX;                                                                                            // 2217
		} else {                                                                                                             // 2218
			point.clientX = point.plotX;                                                                                        // 2219
		}                                                                                                                    // 2220
	};                                                                                                                    // 2221
                                                                                                                       // 2222
	/**                                                                                                                   // 2223
	 * Add some special init logic to areas and areasplines                                                               // 2224
	 */                                                                                                                   // 2225
	function initArea(proceed, chart, options) {                                                                          // 2226
		proceed.call(this, chart, options);                                                                                  // 2227
		if (this.chart.polar) {                                                                                              // 2228
		                                                                                                                     // 2229
			/**                                                                                                                 // 2230
			 * Overridden method to close a segment path. While in a cartesian plane the area                                   // 2231
			 * goes down to the threshold, in the polar chart it goes to the center.                                            // 2232
			 */                                                                                                                 // 2233
			this.closeSegment = function (path) {                                                                               // 2234
				var center = this.xAxis.center;                                                                                    // 2235
				path.push(                                                                                                         // 2236
					'L',                                                                                                              // 2237
					center[0],                                                                                                        // 2238
					center[1]                                                                                                         // 2239
				);			                                                                                                              // 2240
			};                                                                                                                  // 2241
		                                                                                                                     // 2242
			// Instead of complicated logic to draw an area around the inner area in a stack,                                   // 2243
			// just draw it behind                                                                                              // 2244
			this.closedStacks = true;                                                                                           // 2245
		}                                                                                                                    // 2246
	}                                                                                                                     // 2247
                                                                                                                       // 2248
                                                                                                                       // 2249
	if (seriesTypes.area) {		                                                                                             // 2250
		wrap(seriesTypes.area.prototype, 'init', initArea);	                                                                 // 2251
	}                                                                                                                     // 2252
	if (seriesTypes.areaspline) {		                                                                                       // 2253
		wrap(seriesTypes.areaspline.prototype, 'init', initArea);			                                                         // 2254
	}	                                                                                                                    // 2255
                                                                                                                       // 2256
	if (seriesTypes.spline) {                                                                                             // 2257
		/**                                                                                                                  // 2258
		 * Overridden method for calculating a spline from one point to the next                                             // 2259
		 */                                                                                                                  // 2260
		wrap(seriesTypes.spline.prototype, 'getPointSpline', function (proceed, segment, point, i) {                         // 2261
	                                                                                                                      // 2262
			var ret,                                                                                                            // 2263
				smoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc;        // 2264
				denom = smoothing + 1,                                                                                             // 2265
				plotX,                                                                                                             // 2266
				plotY,                                                                                                             // 2267
				lastPoint,                                                                                                         // 2268
				nextPoint,                                                                                                         // 2269
				lastX,                                                                                                             // 2270
				lastY,                                                                                                             // 2271
				nextX,                                                                                                             // 2272
				nextY,                                                                                                             // 2273
				leftContX,                                                                                                         // 2274
				leftContY,                                                                                                         // 2275
				rightContX,                                                                                                        // 2276
				rightContY,                                                                                                        // 2277
				distanceLeftControlPoint,                                                                                          // 2278
				distanceRightControlPoint,                                                                                         // 2279
				leftContAngle,                                                                                                     // 2280
				rightContAngle,                                                                                                    // 2281
				jointAngle;                                                                                                        // 2282
		                                                                                                                     // 2283
		                                                                                                                     // 2284
			if (this.chart.polar) {                                                                                             // 2285
		                                                                                                                     // 2286
				plotX = point.plotX;                                                                                               // 2287
				plotY = point.plotY;                                                                                               // 2288
				lastPoint = segment[i - 1];                                                                                        // 2289
				nextPoint = segment[i + 1];                                                                                        // 2290
			                                                                                                                    // 2291
				// Connect ends                                                                                                    // 2292
				if (this.connectEnds) {                                                                                            // 2293
					if (!lastPoint) {                                                                                                 // 2294
						lastPoint = segment[segment.length - 2]; // not the last but the second last, because the segment is already connected
					}                                                                                                                 // 2296
					if (!nextPoint) {                                                                                                 // 2297
						nextPoint = segment[1];                                                                                          // 2298
					}	                                                                                                                // 2299
				}                                                                                                                  // 2300
                                                                                                                       // 2301
				// find control points                                                                                             // 2302
				if (lastPoint && nextPoint) {                                                                                      // 2303
		                                                                                                                     // 2304
					lastX = lastPoint.plotX;                                                                                          // 2305
					lastY = lastPoint.plotY;                                                                                          // 2306
					nextX = nextPoint.plotX;                                                                                          // 2307
					nextY = nextPoint.plotY;                                                                                          // 2308
					leftContX = (smoothing * plotX + lastX) / denom;                                                                  // 2309
					leftContY = (smoothing * plotY + lastY) / denom;                                                                  // 2310
					rightContX = (smoothing * plotX + nextX) / denom;                                                                 // 2311
					rightContY = (smoothing * plotY + nextY) / denom;                                                                 // 2312
					distanceLeftControlPoint = Math.sqrt(Math.pow(leftContX - plotX, 2) + Math.pow(leftContY - plotY, 2));            // 2313
					distanceRightControlPoint = Math.sqrt(Math.pow(rightContX - plotX, 2) + Math.pow(rightContY - plotY, 2));         // 2314
					leftContAngle = Math.atan2(leftContY - plotY, leftContX - plotX);                                                 // 2315
					rightContAngle = Math.atan2(rightContY - plotY, rightContX - plotX);                                              // 2316
					jointAngle = (Math.PI / 2) + ((leftContAngle + rightContAngle) / 2);                                              // 2317
				                                                                                                                   // 2318
				                                                                                                                   // 2319
					// Ensure the right direction, jointAngle should be in the same quadrant as leftContAngle                         // 2320
					if (Math.abs(leftContAngle - jointAngle) > Math.PI / 2) {                                                         // 2321
						jointAngle -= Math.PI;                                                                                           // 2322
					}                                                                                                                 // 2323
			                                                                                                                    // 2324
					// Find the corrected control points for a spline straight through the point                                      // 2325
					leftContX = plotX + Math.cos(jointAngle) * distanceLeftControlPoint;                                              // 2326
					leftContY = plotY + Math.sin(jointAngle) * distanceLeftControlPoint;                                              // 2327
					rightContX = plotX + Math.cos(Math.PI + jointAngle) * distanceRightControlPoint;                                  // 2328
					rightContY = plotY + Math.sin(Math.PI + jointAngle) * distanceRightControlPoint;                                  // 2329
			                                                                                                                    // 2330
					// Record for drawing in next point                                                                               // 2331
					point.rightContX = rightContX;                                                                                    // 2332
					point.rightContY = rightContY;                                                                                    // 2333
                                                                                                                       // 2334
				}                                                                                                                  // 2335
		                                                                                                                     // 2336
		                                                                                                                     // 2337
				// moveTo or lineTo                                                                                                // 2338
				if (!i) {                                                                                                          // 2339
					ret = ['M', plotX, plotY];                                                                                        // 2340
				} else { // curve from last point to this                                                                          // 2341
					ret = [                                                                                                           // 2342
						'C',                                                                                                             // 2343
						lastPoint.rightContX || lastPoint.plotX,                                                                         // 2344
						lastPoint.rightContY || lastPoint.plotY,                                                                         // 2345
						leftContX || plotX,                                                                                              // 2346
						leftContY || plotY,                                                                                              // 2347
						plotX,                                                                                                           // 2348
						plotY                                                                                                            // 2349
					];                                                                                                                // 2350
					lastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later                            // 2351
				}                                                                                                                  // 2352
		                                                                                                                     // 2353
		                                                                                                                     // 2354
			} else {                                                                                                            // 2355
				ret = proceed.call(this, segment, point, i);                                                                       // 2356
			}                                                                                                                   // 2357
			return ret;                                                                                                         // 2358
		});                                                                                                                  // 2359
	}                                                                                                                     // 2360
                                                                                                                       // 2361
	/**                                                                                                                   // 2362
	 * Extend translate. The plotX and plotY values are computed as if the polar chart were a                             // 2363
	 * cartesian plane, where plotX denotes the angle in radians and (yAxis.len - plotY) is the pixel distance from       // 2364
	 * center.                                                                                                            // 2365
	 */                                                                                                                   // 2366
	wrap(seriesProto, 'translate', function (proceed) {                                                                   // 2367
		var chart = this.chart,                                                                                              // 2368
			points,                                                                                                             // 2369
			i;                                                                                                                  // 2370
                                                                                                                       // 2371
		// Run uber method                                                                                                   // 2372
		proceed.call(this);                                                                                                  // 2373
	                                                                                                                      // 2374
		// Postprocess plot coordinates                                                                                      // 2375
		if (chart.polar) {                                                                                                   // 2376
			this.kdByAngle = chart.tooltip && chart.tooltip.shared;                                                             // 2377
	                                                                                                                      // 2378
			if (!this.preventPostTranslate) {                                                                                   // 2379
				points = this.points;                                                                                              // 2380
				i = points.length;                                                                                                 // 2381
                                                                                                                       // 2382
				while (i--) {                                                                                                      // 2383
					// Translate plotX, plotY from angle and radius to true plot coordinates                                          // 2384
					this.toXY(points[i]);                                                                                             // 2385
				}                                                                                                                  // 2386
			}                                                                                                                   // 2387
		}                                                                                                                    // 2388
	});                                                                                                                   // 2389
                                                                                                                       // 2390
	/**                                                                                                                   // 2391
	 * Extend getSegmentPath to allow connecting ends across 0 to provide a closed circle in                              // 2392
	 * line-like series.                                                                                                  // 2393
	 */                                                                                                                   // 2394
	wrap(seriesProto, 'getSegmentPath', function (proceed, segment) {                                                     // 2395
		                                                                                                                     // 2396
		var points = this.points;                                                                                            // 2397
	                                                                                                                      // 2398
		// Connect the path                                                                                                  // 2399
		if (this.chart.polar && this.options.connectEnds !== false &&                                                        // 2400
				segment[segment.length - 1] === points[points.length - 1] && points[0].y !== null) {                               // 2401
			this.connectEnds = true; // re-used in splines                                                                      // 2402
			segment = [].concat(segment, [points[0]]);                                                                          // 2403
		}                                                                                                                    // 2404
	                                                                                                                      // 2405
		// Run uber method                                                                                                   // 2406
		return proceed.call(this, segment);                                                                                  // 2407
	                                                                                                                      // 2408
	});                                                                                                                   // 2409
                                                                                                                       // 2410
                                                                                                                       // 2411
	function polarAnimate(proceed, init) {                                                                                // 2412
		var chart = this.chart,                                                                                              // 2413
			animation = this.options.animation,                                                                                 // 2414
			group = this.group,                                                                                                 // 2415
			markerGroup = this.markerGroup,                                                                                     // 2416
			center = this.xAxis.center,                                                                                         // 2417
			plotLeft = chart.plotLeft,                                                                                          // 2418
			plotTop = chart.plotTop,                                                                                            // 2419
			attribs;                                                                                                            // 2420
                                                                                                                       // 2421
		// Specific animation for polar charts                                                                               // 2422
		if (chart.polar) {                                                                                                   // 2423
		                                                                                                                     // 2424
			// Enable animation on polar charts only in SVG. In VML, the scaling is different, plus animation                   // 2425
			// would be so slow it would't matter.                                                                              // 2426
			if (chart.renderer.isSVG) {                                                                                         // 2427
                                                                                                                       // 2428
				if (animation === true) {                                                                                          // 2429
					animation = {};                                                                                                   // 2430
				}                                                                                                                  // 2431
	                                                                                                                      // 2432
				// Initialize the animation                                                                                        // 2433
				if (init) {                                                                                                        // 2434
				                                                                                                                   // 2435
					// Scale down the group and place it in the center                                                                // 2436
					attribs = {                                                                                                       // 2437
						translateX: center[0] + plotLeft,                                                                                // 2438
						translateY: center[1] + plotTop,                                                                                 // 2439
						scaleX: 0.001, // #1499                                                                                          // 2440
						scaleY: 0.001                                                                                                    // 2441
					};                                                                                                                // 2442
					                                                                                                                  // 2443
					group.attr(attribs);                                                                                              // 2444
					if (markerGroup) {                                                                                                // 2445
						//markerGroup.attrSetters = group.attrSetters;                                                                   // 2446
						markerGroup.attr(attribs);                                                                                       // 2447
					}                                                                                                                 // 2448
				                                                                                                                   // 2449
				// Run the animation                                                                                               // 2450
				} else {                                                                                                           // 2451
					attribs = {                                                                                                       // 2452
						translateX: plotLeft,                                                                                            // 2453
						translateY: plotTop,                                                                                             // 2454
						scaleX: 1,                                                                                                       // 2455
						scaleY: 1                                                                                                        // 2456
					};                                                                                                                // 2457
					group.animate(attribs, animation);                                                                                // 2458
					if (markerGroup) {                                                                                                // 2459
						markerGroup.animate(attribs, animation);                                                                         // 2460
					}                                                                                                                 // 2461
				                                                                                                                   // 2462
					// Delete this function to allow it only once                                                                     // 2463
					this.animate = null;                                                                                              // 2464
				}                                                                                                                  // 2465
			}                                                                                                                   // 2466
	                                                                                                                      // 2467
		// For non-polar charts, revert to the basic animation                                                               // 2468
		} else {                                                                                                             // 2469
			proceed.call(this, init);                                                                                           // 2470
		}                                                                                                                    // 2471
	}                                                                                                                     // 2472
                                                                                                                       // 2473
	// Define the animate method for regular series                                                                       // 2474
	wrap(seriesProto, 'animate', polarAnimate);                                                                           // 2475
                                                                                                                       // 2476
                                                                                                                       // 2477
	if (seriesTypes.column) {                                                                                             // 2478
                                                                                                                       // 2479
		colProto = seriesTypes.column.prototype;                                                                             // 2480
		/**                                                                                                                  // 2481
		* Define the animate method for columnseries                                                                         // 2482
		*/                                                                                                                   // 2483
		wrap(colProto, 'animate', polarAnimate);                                                                             // 2484
                                                                                                                       // 2485
                                                                                                                       // 2486
		/**                                                                                                                  // 2487
		 * Extend the column prototype's translate method                                                                    // 2488
		 */                                                                                                                  // 2489
		wrap(colProto, 'translate', function (proceed) {                                                                     // 2490
		                                                                                                                     // 2491
			var xAxis = this.xAxis,                                                                                             // 2492
				len = this.yAxis.len,                                                                                              // 2493
				center = xAxis.center,                                                                                             // 2494
				startAngleRad = xAxis.startAngleRad,                                                                               // 2495
				renderer = this.chart.renderer,                                                                                    // 2496
				start,                                                                                                             // 2497
				points,                                                                                                            // 2498
				point,                                                                                                             // 2499
				i;                                                                                                                 // 2500
	                                                                                                                      // 2501
			this.preventPostTranslate = true;                                                                                   // 2502
	                                                                                                                      // 2503
			// Run uber method                                                                                                  // 2504
			proceed.call(this);                                                                                                 // 2505
	                                                                                                                      // 2506
			// Postprocess plot coordinates                                                                                     // 2507
			if (xAxis.isRadial) {                                                                                               // 2508
				points = this.points;                                                                                              // 2509
				i = points.length;                                                                                                 // 2510
				while (i--) {                                                                                                      // 2511
					point = points[i];                                                                                                // 2512
					start = point.barX + startAngleRad;                                                                               // 2513
					point.shapeType = 'path';                                                                                         // 2514
					point.shapeArgs = {                                                                                               // 2515
						d: renderer.symbols.arc(                                                                                         // 2516
							center[0],                                                                                                      // 2517
							center[1],                                                                                                      // 2518
							len - point.plotY,                                                                                              // 2519
							null,                                                                                                           // 2520
							{                                                                                                               // 2521
								start: start,                                                                                                  // 2522
								end: start + point.pointWidth,                                                                                 // 2523
								innerR: len - pick(point.yBottom, len)                                                                         // 2524
							}                                                                                                               // 2525
						)                                                                                                                // 2526
					};                                                                                                                // 2527
					// Provide correct plotX, plotY for tooltip                                                                       // 2528
					this.toXY(point);                                                                                                 // 2529
					point.tooltipPos = [point.plotX, point.plotY];                                                                    // 2530
					point.ttBelow = point.plotY > center[1];                                                                          // 2531
				}                                                                                                                  // 2532
			}                                                                                                                   // 2533
		});                                                                                                                  // 2534
                                                                                                                       // 2535
                                                                                                                       // 2536
		/**                                                                                                                  // 2537
		 * Align column data labels outside the columns. #1199.                                                              // 2538
		 */                                                                                                                  // 2539
		wrap(colProto, 'alignDataLabel', function (proceed, point, dataLabel, options, alignTo, isNew) {                     // 2540
	                                                                                                                      // 2541
			if (this.chart.polar) {                                                                                             // 2542
				var angle = point.rectPlotX / Math.PI * 180,                                                                       // 2543
					align,                                                                                                            // 2544
					verticalAlign;                                                                                                    // 2545
		                                                                                                                     // 2546
				// Align nicely outside the perimeter of the columns                                                               // 2547
				if (options.align === null) {                                                                                      // 2548
					if (angle > 20 && angle < 160) {                                                                                  // 2549
						align = 'left'; // right hemisphere                                                                              // 2550
					} else if (angle > 200 && angle < 340) {                                                                          // 2551
						align = 'right'; // left hemisphere                                                                              // 2552
					} else {                                                                                                          // 2553
						align = 'center'; // top or bottom                                                                               // 2554
					}                                                                                                                 // 2555
					options.align = align;                                                                                            // 2556
				}                                                                                                                  // 2557
				if (options.verticalAlign === null) {                                                                              // 2558
					if (angle < 45 || angle > 315) {                                                                                  // 2559
						verticalAlign = 'bottom'; // top part                                                                            // 2560
					} else if (angle > 135 && angle < 225) {                                                                          // 2561
						verticalAlign = 'top'; // bottom part                                                                            // 2562
					} else {                                                                                                          // 2563
						verticalAlign = 'middle'; // left or right                                                                       // 2564
					}                                                                                                                 // 2565
					options.verticalAlign = verticalAlign;                                                                            // 2566
				}                                                                                                                  // 2567
		                                                                                                                     // 2568
				seriesProto.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);                                  // 2569
			} else {                                                                                                            // 2570
				proceed.call(this, point, dataLabel, options, alignTo, isNew);                                                     // 2571
			}                                                                                                                   // 2572
	                                                                                                                      // 2573
		});		                                                                                                                // 2574
	}                                                                                                                     // 2575
                                                                                                                       // 2576
	/**                                                                                                                   // 2577
	 * Extend getCoordinates to prepare for polar axis values                                                             // 2578
	 */                                                                                                                   // 2579
	wrap(pointerProto, 'getCoordinates', function (proceed, e) {                                                          // 2580
		var chart = this.chart,                                                                                              // 2581
			ret = {                                                                                                             // 2582
				xAxis: [],                                                                                                         // 2583
				yAxis: []                                                                                                          // 2584
			};                                                                                                                  // 2585
	                                                                                                                      // 2586
		if (chart.polar) {	                                                                                                  // 2587
                                                                                                                       // 2588
			each(chart.axes, function (axis) {                                                                                  // 2589
				var isXAxis = axis.isXAxis,                                                                                        // 2590
					center = axis.center,                                                                                             // 2591
					x = e.chartX - center[0] - chart.plotLeft,                                                                        // 2592
					y = e.chartY - center[1] - chart.plotTop;                                                                         // 2593
			                                                                                                                    // 2594
				ret[isXAxis ? 'xAxis' : 'yAxis'].push({                                                                            // 2595
					axis: axis,                                                                                                       // 2596
					value: axis.translate(                                                                                            // 2597
						isXAxis ?                                                                                                        // 2598
							Math.PI - Math.atan2(x, y) : // angle                                                                           // 2599
							Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), // distance from center                                             // 2600
						true                                                                                                             // 2601
					)                                                                                                                 // 2602
				});                                                                                                                // 2603
			});                                                                                                                 // 2604
		                                                                                                                     // 2605
		} else {                                                                                                             // 2606
			ret = proceed.call(this, e);                                                                                        // 2607
		}                                                                                                                    // 2608
	                                                                                                                      // 2609
		return ret;                                                                                                          // 2610
	});                                                                                                                   // 2611
                                                                                                                       // 2612
}());                                                                                                                  // 2613
                                                                                                                       // 2614
}(Highcharts));                                                                                                        // 2615
                                                                                                                       // 2616
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/maazalik:highcharts/lib/template.highchartsHelper.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("highchartsHelper");                                                                              // 2
Template["highchartsHelper"] = new Template("Template.highchartsHelper", (function() {                                 // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    id: function() {                                                                                                   // 6
      return Spacebars.mustache(view.lookup("chartId"));                                                               // 7
    },                                                                                                                 // 8
    style: function() {                                                                                                // 9
      return [ "height: ", Spacebars.mustache(view.lookup("chartHeight")), "; width: ", Spacebars.mustache(view.lookup("chartWidth")) ];
    }                                                                                                                  // 11
  });                                                                                                                  // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/maazalik:highcharts/lib/highchartsHelper.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.highchartsHelper.onRendered(function() {                                                                      // 1
	var self = this;                                                                                                      // 2
                                                                                                                       // 3
	self.autorun(function() {                                                                                             // 4
		var data = Template.currentData();                                                                                   // 5
		$('#' + data.chartId).highcharts(data.chartObject);                                                                  // 6
	});                                                                                                                   // 7
});                                                                                                                    // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['maazalik:highcharts'] = {};

})();
