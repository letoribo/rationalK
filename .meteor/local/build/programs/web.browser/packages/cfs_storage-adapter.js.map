)]}'
{"version":3,"sources":["cfs:storage-adapter/storageAdapter.client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oD;;AAEA,gF;AACA,E;AACA,kB;AACA,E;AACA,gF;;AAEA,sB;;AAEA,kD;AACA,kB;;AAEA,kB;AACA,mC;AACA,8D;AACA,G;;AAEA,4C;AACA,sD;AACA,mE;AACA,U;AACA,kC;AACA,G;;AAEA,4C;AACA,0C;AACA,c;AACA,K;;AAEA,0C;AACA,6E;AACA,yC;;AAEA,E;;AAEA,iD","file":"/packages/cfs_storage-adapter.js","sourcesContent":["/* global FS, _storageAdapters:true, EventEmitter */\n\n// #############################################################################\n//\n// STORAGE ADAPTER\n//\n// #############################################################################\n\n_storageAdapters = {};\n\nFS.StorageAdapter = function(name, options, api) {\n  var self = this;\n\n  // Check the api\n  if (typeof api === 'undefined') {\n    throw new Error('FS.StorageAdapter please define an api');\n  }\n\n  // store reference for easy lookup by name\n  if (typeof _storageAdapters[name] !== 'undefined') {\n    throw new Error('Storage name already exists: \"' + name + '\"');\n  } else {\n    _storageAdapters[name] = self;\n  }\n\n  // extend self with options and other info\n  FS.Utility.extend(this, options || {}, {\n    name: name\n  });\n\n  // XXX: TODO, add upload feature here...\n  // we default to ddp upload but really let the SA like S3Cloud overwrite to\n  // implement direct client to s3 upload\n\n};\n\nFS.StorageAdapter.prototype = new EventEmitter();\n"]}