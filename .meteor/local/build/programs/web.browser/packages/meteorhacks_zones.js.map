)]}'
{"version":3,"sources":["meteorhacks:zones/client/hijack.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mC;AACA,yC;AACA,S;AACA,C;;AAEA,iD;AACA,wB;AACA,iD;AACA,oD;AACA,uD;;AAEA,2C;;AAEA,E;AACA,sB;AACA,G;AACA,yC;AACA,wB;AACA,oB;AACA,E;;AAEA,G;AACA,yB;AACA,G;AACA,2D;;AAEA,E;AACA,8B;AACA,+C;AACA,G;AACA,4C;AACA,4B;AACA,wB;AACA,E;;AAEA,G;AACA,4D;AACA,yC;AACA,G;AACA,yE;;AAEA,+C;;AAEA,G;AACA,6E;AACA,uD;AACA,2E;AACA,G;AACA,wB;AACA,+E;AACA,0B;AACA,mE;AACA,C;;AAEA,G;AACA,2D;AACA,G;AACA,uC;AACA,8D;;AAEA,G;AACA,4E;AACA,G;AACA,gH;AACA,4B;AACA,8C;AACA,sC;AACA,qD;AACA,iD;AACA,8C;AACA,4E;AACA,O;AACA,K;AACA,K;AACA,G;;AAEA,G;AACA,mC;AACA,G;AACA,2D;;AAEA,G;AACA,qD;AACA,qC;AACA,G;AACA,uD;;AAEA,8E;;AAEA,+B;AACA,+C;AACA,mB;AACA,wC;AACA,e;AACA,C;;AAEA,gC;AACA,0D;AACA,2D;AACA,4B;AACA,yB;AACA,C;;AAEA,mD;AACA,wD;AACA,kC;AACA,wC;AACA,0C;AACA,+B;AACA,2D;AACA,Y;AACA,sB;AACA,U;AACA,wC;AACA,G;AACA,E","file":"/packages/meteorhacks_zones.js","sourcesContent":["// Hijack only if zone is available\nif(!window.Zone || !window.Zone.inited) {\n  return;\n}\n\n// some EnvironmentVariables to optimize tracking\n// see /assests/utils.js\nZone.fromCall = new Meteor.EnvironmentVariable();\nZone.fromObserve = new Meteor.EnvironmentVariable();\nZone.notFromForEach = new Meteor.EnvironmentVariable();\n\nvar ConnectionProto = getConnectionProto();\n\n/*\n * Hijack method calls\n */\nConnectionProto.apply = hijackConnection(\n  ConnectionProto.apply,\n  'Connection.apply'\n);\n\n/**\n * For better stackTraces\n */\nMeteor.call = hijackConnection(Meteor.call, 'Meteor.call');\n\n/*\n * Hijack DDP subscribe method\n * Used when connecting to external DDP servers\n */\nConnectionProto.subscribe = hijackSubscribe(\n  ConnectionProto.subscribe,\n  'Connection.subscribe'\n);\n\n/**\n * Hijack Meteor.subscribe because Meteor.subscribe binds to\n * Connection.subscribe before the hijack\n */\nMeteor.subscribe = hijackSubscribe(Meteor.subscribe, 'Meteor.subscribe');\n\nhijackCursor(LocalCollection.Cursor.prototype);\n\n/**\n * Hijack Template.prototype.events() to add useful owner info to zone object\n * Use UI.Component.events for older versions of Meteor\n * e.g. {type: 'templateEvent', event: 'click .selector', template: 'home'}\n */\nif(Template.prototype) {\n  Template.prototype.events = hijackComponentEvents(Template.prototype.events);\n} else if (UI.Component) {\n  UI.Component.events = hijackComponentEvents(UI.Component.events);\n}\n\n/**\n * Hijack global template helpers using `UI.registerHelper`\n */\nhijackGlobalHelpers(UI._globalHelpers);\nUI.registerHelper = hijackNewGlobalHelpers(UI.registerHelper);\n\n/**\n * Hijack each templates rendered handler to add template name to owner info\n */\nvar CoreTemplates = ['prototype', '__body__', '__dynamic', '__dynamicWithDataContext', '__IronDefaultLayout__'];\nMeteor.startup(function () {\n  _(Template).each(function (template, name) {\n    if(typeof template === 'object') {\n      // hijack template helpers including 'rendered'\n      if(_.indexOf(CoreTemplates, name) === -1) {\n        hijackTemplateHelpers(template, name);\n        template.helpers = hijackNewTemplateHelpers(template.helpers, name);\n      }\n    }\n  });\n});\n\n/**\n * Hijack Session.set to add events\n */\nSession.set = hijackSessionSet(Session.set, 'Session.set');\n\n/**\n * Hijack Deps.autorun to set correct zone owner type\n * Otherwise these will be setTimeout\n */\nDeps.flush = hijackDepsFlush(Deps.flush, 'Deps.flush');\n\n//--------------------------------------------------------------------------\\\\\n\nfunction getConnectionProto() {\n  var con = DDP.connect(getCurrentUrlOrigin());\n  con.disconnect();\n  var proto = con.constructor.prototype;\n  return proto;\n}\n\nfunction getCurrentUrlOrigin() {\n  // Internet Explorer doesn't have window.location.origin\n  return window.location.origin || window.location.protocol\n  + window.location.hostname\n  + window.location.port;\n}\n\n// we've a better error handling support with zones\n// Meteor._debug will prevent it (specially inside deps)\n// So we are killing Meteor._debug\nvar originalMeteorDebug = Meteor._debug;\nMeteor._debug = function(message, stack) {\n  var err = new Error(message);\n  err.stack = (stack instanceof Error)? stack.stack: stack;\n  if(zone) {\n    zone.onError(err);\n  } else {\n    originalMeteorDebug(message, stack);\n  }\n};\n"]}