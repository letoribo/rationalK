)]}'
{"version":3,"sources":["cfs:ui/ui.html","cfs:ui/ui.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yC;AACA,sF;AACA,kB;AACA,yC;AACA,Y;AACA,6C;AACA,iD;AACA,6D;AACA,M;AACA,iB;AACA,uE;AACA,K;AACA,I;;AAEA,0C;AACA,wF;AACA,kB;AACA,iC;AACA,kB;AACA,iB;AACA,uD;AACA,iC;AACA,uD;AACA,iB;AACA,uD;AACA,iB;AACA,oB;AACA,M;AACA,I;;AAEA,8C;AACA,gG;AACA,kB;AACA,oC;AACA,yG;AACA,iB;AACA,0C;AACA,6E;AACA,mB;AACA,iC;AACA,2B;AACA,kD;AACA,+E;AACA,6C;AACA,8E;AACA,qB;AACA,sD;AACA,iF;AACA,4B;AACA,qB;AACA,uC;AACA,4B;AACA,kC;AACA,iF;AACA,0C;AACA,uC;AACA,mB;AACA,4C;AACA,8E;AACA,qB;AACA,yD;AACA,iF;AACA,gC;AACA,yB;AACA,6B;AACA,uG;AACA,W;AACA,8B;AACA,qB;AACA,mD;AACA,6B;AACA,mF;AACA,Y;AACA,oB;AACA,uB;AACA,iF;AACA,mC;AACA,iF;AACA,2B;AACA,mB;AACA,iB;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;ACnFA,yB;AACA,qB;AACA,e;;AAEA,a;;AAEA,uD;AACA,uC;;AAEA,yD;AACA,2D;AACA,mD;AACA,oD;AACA,E;;AAEA,wH;AACA,mC;AACA,iD;;AAEA,mC;AACA,6C;AACA,wC;AACA,mB;AACA,mB;AACA,K;AACA,qB;AACA,iB;AACA,G;AACA,G;;AAEA,yG;AACA,2D;;AAEA,wC;AACA,gE;AACA,kC;AACA,qB;AACA,gB;AACA,Y;AACA,wB;AACA,K;;AAEA,qB;AACA,qC;AACA,kC;AACA,wC;AACA,Q;AACA,Y;AACA,kC;AACA,8C;AACA,Q;AACA,K;;AAEA,8F;AACA,6B;AACA,uC;;AAEA,2E;AACA,wB;AACA,yB;AACA,8C;AACA,wC;AACA,c;AACA,sC;AACA,O;AACA,2B;AACA,gC;AACA,0B;AACA,oC;AACA,8C;AACA,yC;AACA,c;AACA,uC;AACA,O;AACA,2C;AACA,mD;AACA,c;AACA,iD;AACA,O;AACA,mD;AACA,gC;AACA,0C;AACA,kC;AACA,oC;AACA,4B;AACA,K;;AAEA,Y;AACA,6B;AACA,iB;AACA,oC;AACA,iC;AACA,8B;AACA,M;AACA,G;AACA,G;;AAEA,sB;;AAEA,6F;AACA,6E;AACA,0B;AACA,oC;AACA,0C;;AAEA,sC;AACA,gD;AACA,gC;AACA,6B;AACA,kD;AACA,O;AACA,0C;AACA,O;AACA,G;;AAEA,4B;AACA,E","file":"/packages/cfs:ui.js","sourcesContent":["\nTemplate.__checkName(\"_fs_DeleteButton\");\nTemplate[\"_fs_DeleteButton\"] = new Template(\"Template._fs_DeleteButton\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      atts: Spacebars.call(view.lookup(\".\")),\n      fileObj: Spacebars.call(view.lookup(\"..\")),\n      contentBlock: Spacebars.call(view.templateContentBlock)\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"_fs_DeleteButton2\"));\n  });\n}));\n\nTemplate.__checkName(\"_fs_DeleteButton2\");\nTemplate[\"_fs_DeleteButton2\"] = new Template(\"Template._fs_DeleteButton2\", (function() {\n  var view = this;\n  return HTML.BUTTON(HTML.Attrs({\n    type: \"button\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"atts\"));\n  }), Spacebars.With(function() {\n    return Spacebars.call(view.lookup(\"contentBlock\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\".\"));\n  }, function() {\n    return \"Delete\";\n  }));\n}));\n\nTemplate.__checkName(\"_fs_UploadProgressBar\");\nTemplate[\"_fs_UploadProgressBar\"] = new Template(\"Template._fs_UploadProgressBar\", (function() {\n  var view = this;\n  return Spacebars.With(function() {\n    return Spacebars.dataMustache(view.lookup(\"getAttsAndFileObj\"), view.lookup(\".\"), view.lookup(\"..\"));\n  }, function() {\n    return [ \"\\n  \", Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"useBootstrap\"));\n    }, function() {\n      return [ \"\\n  \", HTML.DIV({\n        \"class\": \"progress\"\n      }, \"\\n  \t\", HTML.DIV(HTML.Attrs(function() {\n        return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n      }), \"\\n        \", Blaze.If(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"showPercent\"));\n      }, function() {\n        return [ \"\\n        \", Blaze.View(function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"progress\"));\n        }), \"%\\n        \" ];\n      }, function() {\n        return [ \"\\n\t    \", HTML.SPAN({\n          \"class\": \"sr-only\"\n        }, Blaze.View(function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"progress\"));\n        }), \"% Complete\"), \"\\n        \" ];\n      }), \"\\n    \"), \"\\n  \"), \"\\n  \" ];\n    }, function() {\n      return [ \"\\n  \", Blaze.If(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"useSemantic\"));\n      }, function() {\n        return [ \"\\n  \", HTML.DIV(HTML.Attrs(function() {\n          return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n        }), \"\\n    \", HTML.DIV({\n          \"class\": \"bar\",\n          style: function() {\n            return [ \"width: \", Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"progress\")), \"%\" ];\n          }\n        }), \"\\n  \"), \"\\n  \" ];\n      }, function() {\n        return [ \"\\n  \", HTML.PROGRESS(HTML.Attrs({\n          value: function() {\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"progress\"));\n          },\n          max: \"100\"\n        }, function() {\n          return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n        }), Blaze.View(function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"progress\"));\n        }), \"%\"), \"\\n  \" ];\n      }), \"\\n  \" ];\n    }), \"\\n  \" ];\n  });\n}));\n","/* global Helpers:true */\n/* global Template */\n/* global FS */\n\nHelpers = {};\n\n// We expose the properties of Helpers on `FS` globally\nTemplate.registerHelper('FS', Helpers);\n\n// Usage: {{#with FS.GetFile collectionName id}}{{/with}}\nHelpers.GetFile = function cfsGetFile(collectionName, id) {\n  var collection = FS._collections[collectionName];\n  return collection ? collection.findOne(id) : null;\n};\n\n// Usage: {{> FS.DeleteButton}} or {{#FS.DeleteButton}}Button Text{{/FS.DeleteButton}} (with FS.File as current context)\n// Supported Options: any attribute\nHelpers.DeleteButton = Template._fs_DeleteButton;\n\nTemplate._fs_DeleteButton2.events({\n  'click button': function(event, template) {\n    var fileObj = template.data.fileObj;\n    if (!fileObj) {\n      return false;\n    }\n    fileObj.remove();\n    return false;\n  }\n});\n\n// Usage: {{> FS.UploadProgressBar attribute=value}} (with FS.File as current context or not for overall)\nHelpers.UploadProgressBar = Template._fs_UploadProgressBar;\n\nTemplate._fs_UploadProgressBar.helpers({\n  getAttsAndFileObj: function getAttsAndFileObj(atts, fileObj) {\n    if (atts instanceof FS.File) {\n      fileObj = atts;\n      atts = {};\n    } else {\n      atts = atts || {};\n    }\n\n    var progressFunc;\n    if (fileObj instanceof FS.File) {\n      progressFunc = function () {\n        return fileObj.uploadProgress();\n      };\n    } else {\n      progressFunc = function () {\n        return FS.HTTP.uploadQueue.progress();\n      };\n    }\n\n    // We clone atts so that we can remove bootstrap or semantic props without losing them for\n    // later reactive reruns.\n    atts = FS.Utility.extend({}, atts);\n\n    var useBootstrap = false, useSemantic = false, show_percentage = false;\n    if (atts.semantic) {\n      useSemantic = true;\n      if (typeof atts[\"class\"] === \"string\") {\n        atts[\"class\"] += \" ui progress\";\n      } else {\n        atts[\"class\"] = \"ui progress\";\n      }\n      delete atts.semantic;\n    } else if (atts.bootstrap) {\n      useBootstrap = true;\n      var progress = progressFunc();\n      if (typeof atts[\"class\"] === \"string\") {\n        atts[\"class\"] += \" progress-bar\";\n      } else {\n        atts[\"class\"] = \"progress-bar\";\n      }\n      if (typeof atts.style === \"string\") {\n        atts.style += \" width: \" + progress + \"%;\";\n      } else {\n        atts.style = \"width: \" + progress + \"%;\";\n      }\n      if (atts.showPercent) show_percentage = true;\n      atts.role = \"progressbar\";\n      atts[\"aria-valuenow\"] = ''+progress;\n      atts[\"aria-valuemin\"] = \"0\";\n      atts[\"aria-valuemax\"] = \"100\";\n      delete atts.bootstrap;\n    }\n\n    return {\n      progress: progressFunc,\n      atts: atts,\n      showPercent : show_percentage,\n      useBootstrap: useBootstrap,\n      useSemantic: useSemantic\n    };\n  }\n});\n\nFS.EventHandlers = {};\n\n// Simplifies some of the repetitive code for making an event handler that does a file insert\nFS.EventHandlers.insertFiles = function cfsInsertFiles(collection, options) {\n  options = options || {};\n  var afterCallback = options.after;\n  var metadataCallback = options.metadata;\n\n  function insertFilesHandler(event) {\n    FS.Utility.eachFile(event, function (file) {\n      var f = new FS.File(file);\n      if (metadataCallback) {\n        FS.Utility.extend(f, metadataCallback(f));\n      }\n      collection.insert(f, afterCallback);\n    });\n  }\n\n  return insertFilesHandler;\n};\n"]}