)]}'
{"version":3,"sources":["sacha:spin/.npm/package/node_modules/spin.js/spin.js","sacha:spin/lib/spinner.html","sacha:spin/lib/spinner.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,sC;AACA,iC;AACA,sB;AACA,E;AACA,W;AACA,gB;AACA,0D;AACA,sD;AACA,iD;AACA,6D;AACA,iE;AACA,+C;AACA,8C;AACA,mD;AACA,8C;AACA,iE;AACA,gD;AACA,mD;AACA,wE;AACA,4D;AACA,iE;AACA,gD;AACA,kD;AACA,yD;AACA,oF;AACA,kD;AACA,K;AACA,+C;AACA,gD;AACA,G;AACA,4B;;AAEA,gB;AACA,4D;;AAEA,kB;AACA,qE;;AAEA,sB;AACA,+B;AACA,qB;AACA,c;;AAEA,mE;AACA,+D;AACA,wE;AACA,kE;;AAEA,K;AACA,kE;AACA,2D;AACA,K;AACA,iC;AACA,iD;AACA,S;;AAEA,mC;AACA,a;AACA,G;;AAEA,K;AACA,6C;AACA,K;AACA,kD;AACA,uD;AACA,sC;AACA,K;;AAEA,iB;AACA,G;;AAEA,K;AACA,qE;AACA,uE;AACA,oD;AACA,K;AACA,kD;AACA,sE;AACA,oC;AACA,gE;AACA,mG;AACA,gD;;AAEA,4B;AACA,uB;AACA,+C;AACA,iC;AACA,4C;AACA,uC;AACA,0D;AACA,mC;AACA,mC;;AAEA,0B;AACA,K;;AAEA,e;AACA,G;;AAEA,K;AACA,4E;AACA,K;AACA,8B;AACA,oB;AACA,U;AACA,S;;AAEA,uD;AACA,0C;AACA,2C;AACA,2B;AACA,wC;AACA,K;AACA,G;;AAEA,K;AACA,4C;AACA,K;AACA,2B;AACA,yB;AACA,4C;AACA,K;;AAEA,a;AACA,G;;AAEA,K;AACA,6B;AACA,K;AACA,wB;AACA,gD;AACA,4B;AACA,0B;AACA,iD;AACA,O;AACA,K;AACA,c;AACA,G;;AAEA,K;AACA,2D;AACA,K;AACA,kC;AACA,uE;AACA,G;;AAEA,sB;;AAEA,kB;AACA,wD;AACA,oD;AACA,+C;AACA,2D;AACA,+D;AACA,6C;AACA,4C;AACA,iD;AACA,4C;AACA,+D;AACA,8C;AACA,iD;AACA,sE;AACA,0D;AACA,+D;AACA,8C;AACA,gD;AACA,uD;AACA,kF;AACA,gD;AACA,G;;AAEA,wB;AACA,wB;AACA,0D;AACA,G;;AAEA,iD;AACA,uB;;AAEA,4B;AACA,O;AACA,gF;AACA,+E;AACA,yB;AACA,O;AACA,6B;AACA,iB;;AAEA,qB;AACA,uB;AACA,iE;;AAEA,e;AACA,4B;AACA,gB;AACA,wB;AACA,oB;AACA,kB;AACA,Q;;AAEA,mB;AACA,0D;AACA,O;;AAEA,4C;AACA,+B;;AAEA,8B;AACA,6D;AACA,iB;AACA,yD;AACA,iB;AACA,uB;AACA,6B;AACA,yD;AACA,+B;;AAEA,4B;AACA,a;AACA,6C;AACA,oF;;AAEA,+D;AACA,W;AACA,oE;AACA,Y;AACA,O;AACA,iB;AACA,K;;AAEA,O;AACA,qC;AACA,O;AACA,uB;AACA,sB;AACA,e;AACA,kC;AACA,wD;AACA,2B;AACA,O;AACA,iB;AACA,K;;AAEA,O;AACA,2E;AACA,kC;AACA,O;AACA,6B;AACA,e;AACA,uD;AACA,a;;AAEA,qC;AACA,gC;AACA,8B;AACA,sD;AACA,0C;AACA,2B;AACA,2B;AACA,iC;AACA,mH;AACA,mE;AACA,U;AACA,O;;AAEA,gC;AACA,+B;AACA,8B;AACA,kD;AACA,0D;AACA,4B;AACA,qJ;AACA,U;;AAEA,+E;AACA,+E;AACA,O;AACA,e;AACA,K;;AAEA,O;AACA,iE;AACA,sD;AACA,O;AACA,oC;AACA,wE;AACA,K;;AAEA,I;;;AAGA,uB;;AAEA,8C;AACA,8B;AACA,mG;AACA,K;;AAEA,0E;AACA,4D;;AAEA,gD;AACA,4C;AACA,6B;;AAEA,uB;AACA,mB;AACA,wB;AACA,kC;AACA,sC;AACA,Y;AACA,iC;AACA,S;AACA,O;;AAEA,6D;AACA,2E;AACA,W;;AAEA,oC;AACA,Y;AACA,W;AACA,c;AACA,yE;AACA,gB;AACA,kB;AACA,sD;AACA,0B;AACA,2C;AACA,0C;AACA,8C;AACA,gC;AACA,iB;AACA,e;AACA,4E;AACA,yG;AACA,a;AACA,W;AACA,S;AACA,O;;AAEA,mB;AACA,wC;AACA,2G;AACA,S;;AAEA,2C;AACA,uB;AACA,K;;AAEA,0D;AACA,2B;AACA,kC;AACA,6C;AACA,6E;AACA,8B;AACA,O;AACA,K;AACA,G;;AAEA,wC;AACA,0B;AACA,qD;AACA,uD;AACA,sC;AACA,Q;;AAEA,uE;;AAEA,2D;AACA,sD;AACA,G;;AAEA,gB;;AAEA,I;;;;;;;;;;;;;;;;;;;;ACvXA,gC;AACA,oE;AACA,kB;AACA,2D;AACA,I;;;;;;;;;;;;;;;;;;;ACLA,uC;AACA,gE;;AAEA,sC;AACA,oC;AACA,G;;;AAGA,wC;AACA,sC;AACA,G;;;AAGA,kB;AACA,Y;AACA,8C;AACA,0C;AACA,oC;AACA,kD;AACA,2C;AACA,sC;AACA,wD;AACA,sC;AACA,qC;AACA,uC;AACA,iD;AACA,4D;AACA,mE;AACA,yD;AACA,yD;AACA,0D;AACA,G;AACA,E","file":"/packages/sacha_spin.js","sourcesContent":["/**\n * Copyright (c) 2011-2014 Felix Gnass\n * Licensed under the MIT license\n * http://spin.js.org/\n *\n * Example:\n    var opts = {\n      lines: 12             // The number of lines to draw\n    , length: 7             // The length of each line\n    , width: 5              // The line thickness\n    , radius: 10            // The radius of the inner circle\n    , scale: 1.0            // Scales overall size of the spinner\n    , corners: 1            // Roundness (0..1)\n    , color: '#000'         // #rgb or #rrggbb\n    , opacity: 1/4          // Opacity of the lines\n    , rotate: 0             // Rotation offset\n    , direction: 1          // 1: clockwise, -1: counterclockwise\n    , speed: 1              // Rounds per second\n    , trail: 100            // Afterglow percentage\n    , fps: 20               // Frames per second when using setTimeout()\n    , zIndex: 2e9           // Use a high z-index by default\n    , className: 'spinner'  // CSS class to assign to the element\n    , top: '50%'            // center vertically\n    , left: '50%'           // center horizontally\n    , shadow: false         // Whether to render a shadow\n    , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\n    , position: 'absolute'  // Element positioning\n    }\n    var target = document.getElementById('foo')\n    var spinner = new Spinner(opts).spin(target)\n */\n;(function (root, factory) {\n\n  /* CommonJS */\n  if (typeof exports == 'object') module.exports = factory()\n\n  /* AMD module */\n  else if (typeof define == 'function' && define.amd) define(factory)\n\n  /* Browser global */\n  else root.Spinner = factory()\n}(this, function () {\n  \"use strict\"\n\n  var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */\n    , animations = {} /* Animation rules keyed by their name */\n    , useCssAnimations /* Whether to use CSS animations or setTimeout */\n    , sheet /* A stylesheet to hold the @keyframe or VML rules. */\n\n  /**\n   * Utility function to create elements. If no tag name is given,\n   * a DIV is created. Optionally properties can be passed.\n   */\n  function createEl (tag, prop) {\n    var el = document.createElement(tag || 'div')\n      , n\n\n    for (n in prop) el[n] = prop[n]\n    return el\n  }\n\n  /**\n   * Appends children and returns the parent.\n   */\n  function ins (parent /* child1, child2, ...*/) {\n    for (var i = 1, n = arguments.length; i < n; i++) {\n      parent.appendChild(arguments[i])\n    }\n\n    return parent\n  }\n\n  /**\n   * Creates an opacity keyframe animation rule and returns its name.\n   * Since most mobile Webkits have timing issues with animation-delay,\n   * we create separate rules for each line/segment.\n   */\n  function addAnimation (alpha, trail, i, lines) {\n    var name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-')\n      , start = 0.01 + i/lines * 100\n      , z = Math.max(1 - (1-alpha) / trail * (100-start), alpha)\n      , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()\n      , pre = prefix && '-' + prefix + '-' || ''\n\n    if (!animations[name]) {\n      sheet.insertRule(\n        '@' + pre + 'keyframes ' + name + '{' +\n        '0%{opacity:' + z + '}' +\n        start + '%{opacity:' + alpha + '}' +\n        (start+0.01) + '%{opacity:1}' +\n        (start+trail) % 100 + '%{opacity:' + alpha + '}' +\n        '100%{opacity:' + z + '}' +\n        '}', sheet.cssRules.length)\n\n      animations[name] = 1\n    }\n\n    return name\n  }\n\n  /**\n   * Tries various vendor prefixes and returns the first supported property.\n   */\n  function vendor (el, prop) {\n    var s = el.style\n      , pp\n      , i\n\n    prop = prop.charAt(0).toUpperCase() + prop.slice(1)\n    if (s[prop] !== undefined) return prop\n    for (i = 0; i < prefixes.length; i++) {\n      pp = prefixes[i]+prop\n      if (s[pp] !== undefined) return pp\n    }\n  }\n\n  /**\n   * Sets multiple style properties at once.\n   */\n  function css (el, prop) {\n    for (var n in prop) {\n      el.style[vendor(el, n) || n] = prop[n]\n    }\n\n    return el\n  }\n\n  /**\n   * Fills in default values.\n   */\n  function merge (obj) {\n    for (var i = 1; i < arguments.length; i++) {\n      var def = arguments[i]\n      for (var n in def) {\n        if (obj[n] === undefined) obj[n] = def[n]\n      }\n    }\n    return obj\n  }\n\n  /**\n   * Returns the line color from the given string or array.\n   */\n  function getColor (color, idx) {\n    return typeof color == 'string' ? color : color[idx % color.length]\n  }\n\n  // Built-in defaults\n\n  var defaults = {\n    lines: 12             // The number of lines to draw\n  , length: 7             // The length of each line\n  , width: 5              // The line thickness\n  , radius: 10            // The radius of the inner circle\n  , scale: 1.0            // Scales overall size of the spinner\n  , corners: 1            // Roundness (0..1)\n  , color: '#000'         // #rgb or #rrggbb\n  , opacity: 1/4          // Opacity of the lines\n  , rotate: 0             // Rotation offset\n  , direction: 1          // 1: clockwise, -1: counterclockwise\n  , speed: 1              // Rounds per second\n  , trail: 100            // Afterglow percentage\n  , fps: 20               // Frames per second when using setTimeout()\n  , zIndex: 2e9           // Use a high z-index by default\n  , className: 'spinner'  // CSS class to assign to the element\n  , top: '50%'            // center vertically\n  , left: '50%'           // center horizontally\n  , shadow: false         // Whether to render a shadow\n  , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\n  , position: 'absolute'  // Element positioning\n  }\n\n  /** The constructor */\n  function Spinner (o) {\n    this.opts = merge(o || {}, Spinner.defaults, defaults)\n  }\n\n  // Global defaults that override the built-ins:\n  Spinner.defaults = {}\n\n  merge(Spinner.prototype, {\n    /**\n     * Adds the spinner to the given target element. If this instance is already\n     * spinning, it is automatically removed from its previous target b calling\n     * stop() internally.\n     */\n    spin: function (target) {\n      this.stop()\n\n      var self = this\n        , o = self.opts\n        , el = self.el = createEl(null, {className: o.className})\n\n      css(el, {\n        position: o.position\n      , width: 0\n      , zIndex: o.zIndex\n      , left: o.left\n      , top: o.top\n      })\n\n      if (target) {\n        target.insertBefore(el, target.firstChild || null)\n      }\n\n      el.setAttribute('role', 'progressbar')\n      self.lines(el, self.opts)\n\n      if (!useCssAnimations) {\n        // No CSS animation support, use setTimeout() instead\n        var i = 0\n          , start = (o.lines - 1) * (1 - o.direction) / 2\n          , alpha\n          , fps = o.fps\n          , f = fps / o.speed\n          , ostep = (1 - o.opacity) / (f * o.trail / 100)\n          , astep = f / o.lines\n\n        ;(function anim () {\n          i++\n          for (var j = 0; j < o.lines; j++) {\n            alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)\n\n            self.opacity(el, j * o.direction + start, alpha, o)\n          }\n          self.timeout = self.el && setTimeout(anim, ~~(1000 / fps))\n        })()\n      }\n      return self\n    }\n\n    /**\n     * Stops and removes the Spinner.\n     */\n  , stop: function () {\n      var el = this.el\n      if (el) {\n        clearTimeout(this.timeout)\n        if (el.parentNode) el.parentNode.removeChild(el)\n        this.el = undefined\n      }\n      return this\n    }\n\n    /**\n     * Internal method that draws the individual lines. Will be overwritten\n     * in VML fallback mode below.\n     */\n  , lines: function (el, o) {\n      var i = 0\n        , start = (o.lines - 1) * (1 - o.direction) / 2\n        , seg\n\n      function fill (color, shadow) {\n        return css(createEl(), {\n          position: 'absolute'\n        , width: o.scale * (o.length + o.width) + 'px'\n        , height: o.scale * o.width + 'px'\n        , background: color\n        , boxShadow: shadow\n        , transformOrigin: 'left'\n        , transform: 'rotate(' + ~~(360/o.lines*i + o.rotate) + 'deg) translate(' + o.scale*o.radius + 'px' + ',0)'\n        , borderRadius: (o.corners * o.scale * o.width >> 1) + 'px'\n        })\n      }\n\n      for (; i < o.lines; i++) {\n        seg = css(createEl(), {\n          position: 'absolute'\n        , top: 1 + ~(o.scale * o.width / 2) + 'px'\n        , transform: o.hwaccel ? 'translate3d(0,0,0)' : ''\n        , opacity: o.opacity\n        , animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1 / o.speed + 's linear infinite'\n        })\n\n        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px #000'), {top: '2px'}))\n        ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))\n      }\n      return el\n    }\n\n    /**\n     * Internal method that adjusts the opacity of a single line.\n     * Will be overwritten in VML fallback mode below.\n     */\n  , opacity: function (el, i, val) {\n      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val\n    }\n\n  })\n\n\n  function initVML () {\n\n    /* Utility function to create a VML tag */\n    function vml (tag, attr) {\n      return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr)\n    }\n\n    // No CSS transforms but VML support, add a CSS rule for VML elements:\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')\n\n    Spinner.prototype.lines = function (el, o) {\n      var r = o.scale * (o.length + o.width)\n        , s = o.scale * 2 * r\n\n      function grp () {\n        return css(\n          vml('group', {\n            coordsize: s + ' ' + s\n          , coordorigin: -r + ' ' + -r\n          })\n        , { width: s, height: s }\n        )\n      }\n\n      var margin = -(o.width + o.length) * o.scale * 2 + 'px'\n        , g = css(grp(), {position: 'absolute', top: margin, left: margin})\n        , i\n\n      function seg (i, dx, filter) {\n        ins(\n          g\n        , ins(\n            css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx})\n          , ins(\n              css(\n                vml('roundrect', {arcsize: o.corners})\n              , { width: r\n                , height: o.scale * o.width\n                , left: o.scale * o.radius\n                , top: -o.scale * o.width >> 1\n                , filter: filter\n                }\n              )\n            , vml('fill', {color: getColor(o.color, i), opacity: o.opacity})\n            , vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change\n            )\n          )\n        )\n      }\n\n      if (o.shadow)\n        for (i = 1; i <= o.lines; i++) {\n          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')\n        }\n\n      for (i = 1; i <= o.lines; i++) seg(i)\n      return ins(el, g)\n    }\n\n    Spinner.prototype.opacity = function (el, i, val, o) {\n      var c = el.firstChild\n      o = o.shadow && o.lines || 0\n      if (c && i + o < c.childNodes.length) {\n        c = c.childNodes[i + o]; c = c && c.firstChild; c = c && c.firstChild\n        if (c) c.opacity = val\n      }\n    }\n  }\n\n  if (typeof document !== 'undefined') {\n    sheet = (function () {\n      var el = createEl('style', {type : 'text/css'})\n      ins(document.getElementsByTagName('head')[0], el)\n      return el.sheet || el.styleSheet\n    }())\n\n    var probe = css(createEl('group'), {behavior: 'url(#default#VML)'})\n\n    if (!vendor(probe, 'transform') && probe.adj) initVML()\n    else useCssAnimations = vendor(probe, 'animation')\n  }\n\n  return Spinner\n\n}));\n","\nTemplate.__checkName(\"spinner\");\nTemplate[\"spinner\"] = new Template(\"Template.spinner\", (function() {\n  var view = this;\n  return HTML.Raw('<div class=\"spinner-container\"></div>');\n}));\n","Template.spinner.onRendered(function(){\n  var options = _.extend({}, Meteor.Spinner.options, this.data);\n\n  this.spinner = new Spinner(options);\n  this.spinner.spin(this.firstNode);\n});\n\n\nTemplate.spinner.onDestroyed(function(){\n  this.spinner && this.spinner.stop();\n});\n\n\nMeteor.Spinner = {\n  options: {\n    lines: 13,  // The number of lines to draw\n    length: 8,  // The length of each line\n    width: 3,  // The line thickness\n    radius: 12,  // The radius of the inner circle\n    corners: 1,  // Corner roundness (0..1)\n    rotate: 0,  // The rotation offset\n    direction: 1,  // 1: clockwise, -1: counterclockwise\n    color: '#000',  // #rgb or #rrggbb\n    speed: 1.2,  // Rounds per second\n    trail: 60,  // Afterglow percentage\n    shadow: false,  // Whether to render a shadow\n    hwaccel: false,  // Whether to use hardware acceleration\n    className: 'spinner', // The CSS class to assign to the spinner\n    zIndex: 2e9,  // The z-index (defaults to 2000000000)\n    top: '50%',  // Top position relative to parent in px\n    left: '50%'  // Left position relative to parent in px\n  }\n};\n"]}