//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;

/* Package-scope variables */
var Handsontable;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/olragon:handsontable/lib/jquery.handsontable.full.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * Handsontable 0.12.3                                                                                                 // 2
 * Handsontable is a JavaScript library for editable tables with basic copy-paste compatibility with Excel and Google Docs
 *                                                                                                                     // 4
 * Copyright 2012-2014 Marcin Warpechowski                                                                             // 5
 * Licensed under the MIT license.                                                                                     // 6
 * http://handsontable.com/                                                                                            // 7
 *                                                                                                                     // 8
 * Date: Mon Jan 12 2015 10:24:46 GMT+0100 (CET)                                                                       // 9
 */                                                                                                                    // 10
/*jslint white: true, browser: true, plusplus: true, indent: 4, maxerr: 50 */                                          // 11
                                                                                                                       // 12
//var Handsontable = { //class namespace                                                                               // 13
//  plugins: {}, //plugin namespace                                                                                    // 14
//  helper: {} //helper namespace                                                                                      // 15
//};                                                                                                                   // 16
                                                                                                                       // 17
var Handsontable = function (rootElement, userSettings) {                                                              // 18
  userSettings = userSettings || {};                                                                                   // 19
  var instance = new Handsontable.Core(rootElement, userSettings);                                                     // 20
  instance.init();                                                                                                     // 21
  return instance;                                                                                                     // 22
};                                                                                                                     // 23
Handsontable.plugins = {};                                                                                             // 24
                                                                                                                       // 25
// Meteor support                                                                                                      // 26
if (typeof Package !== 'undefined') {                                                                                  // 27
  window.Handsontable = Handsontable;                                                                                  // 28
}                                                                                                                      // 29
                                                                                                                       // 30
(function (window, Handsontable) {                                                                                     // 31
  "use strict";                                                                                                        // 32
                                                                                                                       // 33
//http://stackoverflow.com/questions/3629183/why-doesnt-indexof-work-on-an-array-ie8                                   // 34
if (!Array.prototype.indexOf) {                                                                                        // 35
  Array.prototype.indexOf = function (elt /*, from*/) {                                                                // 36
    var len = this.length >>> 0;                                                                                       // 37
                                                                                                                       // 38
    var from = Number(arguments[1]) || 0;                                                                              // 39
    from = (from < 0)                                                                                                  // 40
      ? Math.ceil(from)                                                                                                // 41
      : Math.floor(from);                                                                                              // 42
    if (from < 0)                                                                                                      // 43
      from += len;                                                                                                     // 44
                                                                                                                       // 45
    for (; from < len; from++) {                                                                                       // 46
      if (from in this &&                                                                                              // 47
        this[from] === elt)                                                                                            // 48
        return from;                                                                                                   // 49
    }                                                                                                                  // 50
    return -1;                                                                                                         // 51
  };                                                                                                                   // 52
}                                                                                                                      // 53
/**                                                                                                                    // 54
 * Array.filter() shim by Trevor Menagh (https://github.com/trevmex) with some modifications                           // 55
 */                                                                                                                    // 56
                                                                                                                       // 57
if (!Array.prototype.filter) {                                                                                         // 58
  Array.prototype.filter = function (fun, thisp) {                                                                     // 59
    "use strict";                                                                                                      // 60
                                                                                                                       // 61
    if (typeof this === "undefined" || this === null) {                                                                // 62
      throw new TypeError();                                                                                           // 63
    }                                                                                                                  // 64
    if (typeof fun !== "function") {                                                                                   // 65
      throw new TypeError();                                                                                           // 66
    }                                                                                                                  // 67
                                                                                                                       // 68
    thisp = thisp || this;                                                                                             // 69
                                                                                                                       // 70
    if (isNodeList(thisp)) {                                                                                           // 71
      thisp = convertNodeListToArray(thisp);                                                                           // 72
    }                                                                                                                  // 73
                                                                                                                       // 74
    var len = thisp.length,                                                                                            // 75
      res = [],                                                                                                        // 76
      i,                                                                                                               // 77
      val;                                                                                                             // 78
                                                                                                                       // 79
    for (i = 0; i < len; i += 1) {                                                                                     // 80
      if (thisp.hasOwnProperty(i)) {                                                                                   // 81
        val = thisp[i]; // in case fun mutates this                                                                    // 82
        if (fun.call(thisp, val, i, thisp)) {                                                                          // 83
          res.push(val);                                                                                               // 84
        }                                                                                                              // 85
      }                                                                                                                // 86
    }                                                                                                                  // 87
                                                                                                                       // 88
    return res;                                                                                                        // 89
                                                                                                                       // 90
    function isNodeList(object) {                                                                                      // 91
      return /NodeList/i.test(object.item);                                                                            // 92
    }                                                                                                                  // 93
                                                                                                                       // 94
    function convertNodeListToArray(nodeList) {                                                                        // 95
      var array = [];                                                                                                  // 96
                                                                                                                       // 97
      for (var i = 0, len = nodeList.length; i < len; i++){                                                            // 98
        array[i] = nodeList[i]                                                                                         // 99
      }                                                                                                                // 100
                                                                                                                       // 101
      return array;                                                                                                    // 102
    }                                                                                                                  // 103
  };                                                                                                                   // 104
}                                                                                                                      // 105
                                                                                                                       // 106
if (!Array.isArray) {                                                                                                  // 107
  Array.isArray = function(obj) {                                                                                      // 108
    return toString.call(obj) == '[object Array]';                                                                     // 109
  };                                                                                                                   // 110
}                                                                                                                      // 111
                                                                                                                       // 112
// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys                   // 113
// License CC-BY-SA v2.5                                                                                               // 114
if (!Object.keys) {                                                                                                    // 115
  Object.keys = (function() {                                                                                          // 116
    'use strict';                                                                                                      // 117
    var hasOwnProperty = Object.prototype.hasOwnProperty,                                                              // 118
      hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),                                         // 119
      dontEnums = [                                                                                                    // 120
        'toString',                                                                                                    // 121
        'toLocaleString',                                                                                              // 122
        'valueOf',                                                                                                     // 123
        'hasOwnProperty',                                                                                              // 124
        'isPrototypeOf',                                                                                               // 125
        'propertyIsEnumerable',                                                                                        // 126
        'constructor'                                                                                                  // 127
      ],                                                                                                               // 128
      dontEnumsLength = dontEnums.length;                                                                              // 129
                                                                                                                       // 130
    return function(obj) {                                                                                             // 131
      if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {                                    // 132
        throw new TypeError('Object.keys called on non-object');                                                       // 133
      }                                                                                                                // 134
                                                                                                                       // 135
      var result = [], prop, i;                                                                                        // 136
                                                                                                                       // 137
      for (prop in obj) {                                                                                              // 138
        if (hasOwnProperty.call(obj, prop)) {                                                                          // 139
          result.push(prop);                                                                                           // 140
        }                                                                                                              // 141
      }                                                                                                                // 142
                                                                                                                       // 143
      if (hasDontEnumBug) {                                                                                            // 144
        for (i = 0; i < dontEnumsLength; i++) {                                                                        // 145
          if (hasOwnProperty.call(obj, dontEnums[i])) {                                                                // 146
            result.push(dontEnums[i]);                                                                                 // 147
          }                                                                                                            // 148
        }                                                                                                              // 149
      }                                                                                                                // 150
      return result;                                                                                                   // 151
    };                                                                                                                 // 152
  }());                                                                                                                // 153
}                                                                                                                      // 154
                                                                                                                       // 155
/*                                                                                                                     // 156
 * Copyright 2012 The Polymer Authors. All rights reserved.                                                            // 157
 * Use of this source code is governed by a BSD-style                                                                  // 158
 * license that can be found in the LICENSE file.                                                                      // 159
 */                                                                                                                    // 160
                                                                                                                       // 161
if (typeof WeakMap === 'undefined') {                                                                                  // 162
  (function() {                                                                                                        // 163
    var defineProperty = Object.defineProperty;                                                                        // 164
                                                                                                                       // 165
    try {                                                                                                              // 166
      var properDefineProperty = true;                                                                                 // 167
      defineProperty(function(){}, 'foo', {});                                                                         // 168
    } catch (e) {                                                                                                      // 169
      properDefineProperty = false;                                                                                    // 170
    }                                                                                                                  // 171
                                                                                                                       // 172
    /*                                                                                                                 // 173
      IE8 does not support Date.now() but IE8 compatibility mode in IE9 and IE10 does.                                 // 174
      M$ deserves a high five for this one :)                                                                          // 175
     */                                                                                                                // 176
    var counter = +(new Date) % 1e9;                                                                                   // 177
                                                                                                                       // 178
    var WeakMap = function() {                                                                                         // 179
      this.name = '__st' + (Math.random() * 1e9 >>> 0) + (counter++ + '__');                                           // 180
      if(!properDefineProperty){                                                                                       // 181
        this._wmCache = [];                                                                                            // 182
      }                                                                                                                // 183
    };                                                                                                                 // 184
                                                                                                                       // 185
    if(properDefineProperty){                                                                                          // 186
      WeakMap.prototype = {                                                                                            // 187
        set: function(key, value) {                                                                                    // 188
          var entry = key[this.name];                                                                                  // 189
          if (entry && entry[0] === key)                                                                               // 190
            entry[1] = value;                                                                                          // 191
          else                                                                                                         // 192
            defineProperty(key, this.name, {value: [key, value], writable: true});                                     // 193
                                                                                                                       // 194
        },                                                                                                             // 195
        get: function(key) {                                                                                           // 196
          var entry;                                                                                                   // 197
          return (entry = key[this.name]) && entry[0] === key ?                                                        // 198
            entry[1] : undefined;                                                                                      // 199
        },                                                                                                             // 200
        'delete': function(key) {                                                                                      // 201
          this.set(key, undefined);                                                                                    // 202
        }                                                                                                              // 203
      };                                                                                                               // 204
    } else {                                                                                                           // 205
      WeakMap.prototype = {                                                                                            // 206
        set: function(key, value) {                                                                                    // 207
                                                                                                                       // 208
          if(typeof key == 'undefined' || typeof value == 'undefined') return;                                         // 209
                                                                                                                       // 210
          for(var i = 0, len = this._wmCache.length; i < len; i++){                                                    // 211
            if(this._wmCache[i].key == key){                                                                           // 212
              this._wmCache[i].value = value;                                                                          // 213
              return;                                                                                                  // 214
            }                                                                                                          // 215
          }                                                                                                            // 216
                                                                                                                       // 217
          this._wmCache.push({key: key, value: value});                                                                // 218
                                                                                                                       // 219
        },                                                                                                             // 220
        get: function(key) {                                                                                           // 221
                                                                                                                       // 222
          if(typeof key == 'undefined') return;                                                                        // 223
                                                                                                                       // 224
          for(var i = 0, len = this._wmCache.length; i < len; i++){                                                    // 225
            if(this._wmCache[i].key == key){                                                                           // 226
              return  this._wmCache[i].value;                                                                          // 227
            }                                                                                                          // 228
          }                                                                                                            // 229
                                                                                                                       // 230
          return;                                                                                                      // 231
                                                                                                                       // 232
        },                                                                                                             // 233
        'delete': function(key) {                                                                                      // 234
                                                                                                                       // 235
          if(typeof key == 'undefined') return;                                                                        // 236
                                                                                                                       // 237
          for(var i = 0, len = this._wmCache.length; i < len; i++){                                                    // 238
            if(this._wmCache[i].key == key){                                                                           // 239
              Array.prototype.slice.call(this._wmCache, i, 1);                                                         // 240
            }                                                                                                          // 241
          }                                                                                                            // 242
        }                                                                                                              // 243
      };                                                                                                               // 244
    }                                                                                                                  // 245
                                                                                                                       // 246
    window.WeakMap = WeakMap;                                                                                          // 247
  })();                                                                                                                // 248
}                                                                                                                      // 249
                                                                                                                       // 250
Handsontable.activeGuid = null;                                                                                        // 251
                                                                                                                       // 252
/**                                                                                                                    // 253
 * Handsontable constructor                                                                                            // 254
 * @param rootElement The DOM element in which Handsontable DOM will be inserted                                       // 255
 * @param userSettings                                                                                                 // 256
 * @constructor                                                                                                        // 257
 */                                                                                                                    // 258
Handsontable.Core = function (rootElement, userSettings) {                                                             // 259
  var priv                                                                                                             // 260
    , datamap                                                                                                          // 261
    , grid                                                                                                             // 262
    , selection                                                                                                        // 263
    , editorManager                                                                                                    // 264
    , instance = this                                                                                                  // 265
    , GridSettings = function () {}                                                                                    // 266
    , eventManager = Handsontable.eventManager(instance);                                                              // 267
                                                                                                                       // 268
  Handsontable.helper.extend(GridSettings.prototype, DefaultSettings.prototype); //create grid settings as a copy of default settings
  Handsontable.helper.extend(GridSettings.prototype, userSettings); //overwrite defaults with user settings            // 270
  Handsontable.helper.extend(GridSettings.prototype, expandType(userSettings));                                        // 271
                                                                                                                       // 272
  this.rootElement = rootElement;                                                                                      // 273
                                                                                                                       // 274
  this.container = document.createElement('DIV');                                                                      // 275
  this.container.className = 'htContainer';                                                                            // 276
                                                                                                                       // 277
  rootElement.insertBefore(this.container, rootElement.firstChild);                                                    // 278
                                                                                                                       // 279
  this.guid = 'ht_' + Handsontable.helper.randomString(); //this is the namespace for global events                    // 280
                                                                                                                       // 281
  if (!this.rootElement.id || this.rootElement.id.substring(0, 3) === "ht_") {                                         // 282
    this.rootElement.id = this.guid; //if root element does not have an id, assign a random id                         // 283
  }                                                                                                                    // 284
  priv = {                                                                                                             // 285
    cellSettings: [],                                                                                                  // 286
    columnSettings: [],                                                                                                // 287
    columnsSettingConflicts: ['data', 'width'],                                                                        // 288
    settings: new GridSettings(), // current settings instance                                                         // 289
    selRange: null, //exposed by public method `getSelectedRange`                                                      // 290
    isPopulated: null,                                                                                                 // 291
    scrollable: null,                                                                                                  // 292
    firstRun: true                                                                                                     // 293
  };                                                                                                                   // 294
                                                                                                                       // 295
  grid = {                                                                                                             // 296
    /**                                                                                                                // 297
     * Inserts or removes rows and columns                                                                             // 298
     * @param {String} action Possible values: "insert_row", "insert_col", "remove_row", "remove_col"                  // 299
     * @param {Number} index                                                                                           // 300
     * @param {Number} amount                                                                                          // 301
     * @param {String} [source] Optional. Source of hook runner.                                                       // 302
     * @param {Boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.                          // 303
     */                                                                                                                // 304
    alter: function (action, index, amount, source, keepEmptyRows) {                                                   // 305
      var delta;                                                                                                       // 306
                                                                                                                       // 307
      amount = amount || 1;                                                                                            // 308
                                                                                                                       // 309
      switch (action) {                                                                                                // 310
        case "insert_row":                                                                                             // 311
          delta = datamap.createRow(index, amount);                                                                    // 312
                                                                                                                       // 313
          if (delta) {                                                                                                 // 314
            if (selection.isSelected() && priv.selRange.from.row >= index) {                                           // 315
              priv.selRange.from.row = priv.selRange.from.row + delta;                                                 // 316
              selection.transformEnd(delta, 0); //will call render() internally                                        // 317
            }                                                                                                          // 318
            else {                                                                                                     // 319
              selection.refreshBorders(); //it will call render and prepare methods                                    // 320
            }                                                                                                          // 321
          }                                                                                                            // 322
          break;                                                                                                       // 323
                                                                                                                       // 324
        case "insert_col":                                                                                             // 325
          // //column order may have changes, so we need to translate the selection column index -> source array index // 326
          // index = instance.runHooksAndReturn('modifyCol', index);                                                   // 327
            delta = datamap.createCol(index, amount);                                                                  // 328
                                                                                                                       // 329
          if (delta) {                                                                                                 // 330
                                                                                                                       // 331
            if(Array.isArray(instance.getSettings().colHeaders)){                                                      // 332
              var spliceArray = [index, 0];                                                                            // 333
              spliceArray.length += delta; //inserts empty (undefined) elements at the end of an array                 // 334
              Array.prototype.splice.apply(instance.getSettings().colHeaders, spliceArray); //inserts empty (undefined) elements into the colHeader array
            }                                                                                                          // 336
                                                                                                                       // 337
            if (selection.isSelected() && priv.selRange.from.col >= index) {                                           // 338
              priv.selRange.from.col = priv.selRange.from.col + delta;                                                 // 339
              selection.transformEnd(0, delta); //will call render() internally                                        // 340
            }                                                                                                          // 341
            else {                                                                                                     // 342
              selection.refreshBorders(); //it will call render and prepare methods                                    // 343
            }                                                                                                          // 344
          }                                                                                                            // 345
          break;                                                                                                       // 346
                                                                                                                       // 347
        case "remove_row":                                                                                             // 348
          //column order may have changes, so we need to translate the selection column index -> source array index    // 349
          index = instance.runHooksAndReturn('modifyCol', index);                                                      // 350
                                                                                                                       // 351
          datamap.removeRow(index, amount);                                                                            // 352
          priv.cellSettings.splice(index, amount);                                                                     // 353
          grid.adjustRowsAndCols();                                                                                    // 354
          selection.refreshBorders(); //it will call render and prepare methods                                        // 355
          break;                                                                                                       // 356
                                                                                                                       // 357
        case "remove_col":                                                                                             // 358
          datamap.removeCol(index, amount);                                                                            // 359
                                                                                                                       // 360
          for(var row = 0, len = datamap.getAll().length; row < len; row++){                                           // 361
            if(row in priv.cellSettings){  //if row hasn't been rendered it wouldn't have cellSettings                 // 362
              priv.cellSettings[row].splice(index, amount);                                                            // 363
            }                                                                                                          // 364
          }                                                                                                            // 365
                                                                                                                       // 366
          if(Array.isArray(instance.getSettings().colHeaders)){                                                        // 367
            if(typeof index == 'undefined'){                                                                           // 368
              index = -1;                                                                                              // 369
            }                                                                                                          // 370
            instance.getSettings().colHeaders.splice(index, amount);                                                   // 371
          }                                                                                                            // 372
                                                                                                                       // 373
          //priv.columnSettings.splice(index, amount);                                                                 // 374
                                                                                                                       // 375
          grid.adjustRowsAndCols();                                                                                    // 376
          selection.refreshBorders(); //it will call render and prepare methods                                        // 377
          break;                                                                                                       // 378
                                                                                                                       // 379
        default:                                                                                                       // 380
          throw new Error('There is no such action "' + action + '"');                                                 // 381
          break;                                                                                                       // 382
      }                                                                                                                // 383
                                                                                                                       // 384
      if (!keepEmptyRows) {                                                                                            // 385
        grid.adjustRowsAndCols(); //makes sure that we did not add rows that will be removed in next refresh           // 386
      }                                                                                                                // 387
    },                                                                                                                 // 388
                                                                                                                       // 389
    /**                                                                                                                // 390
     * Makes sure there are empty rows at the bottom of the table                                                      // 391
     */                                                                                                                // 392
    adjustRowsAndCols: function () {                                                                                   // 393
      var r, rlen, emptyRows, emptyCols;                                                                               // 394
                                                                                                                       // 395
      //should I add empty rows to data source to meet minRows?                                                        // 396
      rlen = instance.countRows();                                                                                     // 397
      if (rlen < priv.settings.minRows) {                                                                              // 398
        for (r = 0; r < priv.settings.minRows - rlen; r++) {                                                           // 399
          datamap.createRow(instance.countRows(), 1, true);                                                            // 400
        }                                                                                                              // 401
      }                                                                                                                // 402
                                                                                                                       // 403
      emptyRows = instance.countEmptyRows(true);                                                                       // 404
                                                                                                                       // 405
      //should I add empty rows to meet minSpareRows?                                                                  // 406
      if (emptyRows < priv.settings.minSpareRows) {                                                                    // 407
        for (; emptyRows < priv.settings.minSpareRows && instance.countRows() < priv.settings.maxRows; emptyRows++) {  // 408
          datamap.createRow(instance.countRows(), 1, true);                                                            // 409
        }                                                                                                              // 410
      }                                                                                                                // 411
                                                                                                                       // 412
      //count currently empty cols                                                                                     // 413
      emptyCols = instance.countEmptyCols(true);                                                                       // 414
                                                                                                                       // 415
      //should I add empty cols to meet minCols?                                                                       // 416
      if (!priv.settings.columns && instance.countCols() < priv.settings.minCols) {                                    // 417
        for (; instance.countCols() < priv.settings.minCols; emptyCols++) {                                            // 418
          datamap.createCol(instance.countCols(), 1, true);                                                            // 419
        }                                                                                                              // 420
      }                                                                                                                // 421
                                                                                                                       // 422
      //should I add empty cols to meet minSpareCols?                                                                  // 423
      if (!priv.settings.columns && instance.dataType === 'array' && emptyCols < priv.settings.minSpareCols) {         // 424
        for (; emptyCols < priv.settings.minSpareCols && instance.countCols() < priv.settings.maxCols; emptyCols++) {  // 425
          datamap.createCol(instance.countCols(), 1, true);                                                            // 426
        }                                                                                                              // 427
      }                                                                                                                // 428
                                                                                                                       // 429
      // if (priv.settings.enterBeginsEditing) {                                                                       // 430
      //   for (; (((priv.settings.minRows || priv.settings.minSpareRows) && instance.countRows() > priv.settings.minRows) && (priv.settings.minSpareRows && emptyRows > priv.settings.minSpareRows)); emptyRows--) {
      //     datamap.removeRow();                                                                                      // 432
      //   }                                                                                                           // 433
      // }                                                                                                             // 434
                                                                                                                       // 435
      // if (priv.settings.enterBeginsEditing && !priv.settings.columns) {                                             // 436
      //   for (; (((priv.settings.minCols || priv.settings.minSpareCols) && instance.countCols() > priv.settings.minCols) && (priv.settings.minSpareCols && emptyCols > priv.settings.minSpareCols)); emptyCols--) {
      //     datamap.removeCol();                                                                                      // 438
      //   }                                                                                                           // 439
      // }                                                                                                             // 440
                                                                                                                       // 441
      var rowCount = instance.countRows();                                                                             // 442
      var colCount = instance.countCols();                                                                             // 443
                                                                                                                       // 444
      if (rowCount === 0 || colCount === 0) {                                                                          // 445
        selection.deselect();                                                                                          // 446
      }                                                                                                                // 447
                                                                                                                       // 448
      if (selection.isSelected()) {                                                                                    // 449
        var selectionChanged;                                                                                          // 450
        var fromRow = priv.selRange.from.row;                                                                          // 451
        var fromCol = priv.selRange.from.col;                                                                          // 452
        var toRow = priv.selRange.to.row;                                                                              // 453
        var toCol = priv.selRange.to.col;                                                                              // 454
                                                                                                                       // 455
        //if selection is outside, move selection to last row                                                          // 456
        if (fromRow > rowCount - 1) {                                                                                  // 457
          fromRow = rowCount - 1;                                                                                      // 458
          selectionChanged = true;                                                                                     // 459
          if (toRow > fromRow) {                                                                                       // 460
            toRow = fromRow;                                                                                           // 461
          }                                                                                                            // 462
        } else if (toRow > rowCount - 1) {                                                                             // 463
          toRow = rowCount - 1;                                                                                        // 464
          selectionChanged = true;                                                                                     // 465
          if (fromRow > toRow) {                                                                                       // 466
            fromRow = toRow;                                                                                           // 467
          }                                                                                                            // 468
        }                                                                                                              // 469
                                                                                                                       // 470
        //if selection is outside, move selection to last row                                                          // 471
        if (fromCol > colCount - 1) {                                                                                  // 472
          fromCol = colCount - 1;                                                                                      // 473
          selectionChanged = true;                                                                                     // 474
          if (toCol > fromCol) {                                                                                       // 475
            toCol = fromCol;                                                                                           // 476
          }                                                                                                            // 477
        } else if (toCol > colCount - 1) {                                                                             // 478
          toCol = colCount - 1;                                                                                        // 479
          selectionChanged = true;                                                                                     // 480
          if (fromCol > toCol) {                                                                                       // 481
            fromCol = toCol;                                                                                           // 482
          }                                                                                                            // 483
        }                                                                                                              // 484
                                                                                                                       // 485
        if (selectionChanged) {                                                                                        // 486
          instance.selectCell(fromRow, fromCol, toRow, toCol);                                                         // 487
        }                                                                                                              // 488
      }                                                                                                                // 489
    },                                                                                                                 // 490
                                                                                                                       // 491
    /**                                                                                                                // 492
     * Populate cells at position with 2d array                                                                        // 493
     * @param {Object} start Start selection position                                                                  // 494
     * @param {Array} input 2d array                                                                                   // 495
     * @param {Object} [end] End selection position (only for drag-down mode)                                          // 496
     * @param {String} [source="populateFromArray"]                                                                    // 497
     * @param {String} [method="overwrite"]                                                                            // 498
     * @param {String} direction (left|right|up|down)                                                                  // 499
     * @param {Array} deltas array                                                                                     // 500
     * @return {Object|undefined} ending td in pasted area (only if any cell was changed)                              // 501
     */                                                                                                                // 502
    populateFromArray: function (start, input, end, source, method, direction, deltas) {                               // 503
      var r, rlen, c, clen, setData = [], current = {};                                                                // 504
      rlen = input.length;                                                                                             // 505
      if (rlen === 0) {                                                                                                // 506
        return false;                                                                                                  // 507
      }                                                                                                                // 508
                                                                                                                       // 509
      var repeatCol                                                                                                    // 510
        , repeatRow                                                                                                    // 511
        , cmax                                                                                                         // 512
        , rmax;                                                                                                        // 513
                                                                                                                       // 514
      // insert data with specified pasteMode method                                                                   // 515
      switch (method) {                                                                                                // 516
        case 'shift_down' :                                                                                            // 517
          repeatCol = end ? end.col - start.col + 1 : 0;                                                               // 518
          repeatRow = end ? end.row - start.row + 1 : 0;                                                               // 519
          input = Handsontable.helper.translateRowsToColumns(input);                                                   // 520
          for (c = 0, clen = input.length, cmax = Math.max(clen, repeatCol); c < cmax; c++) {                          // 521
            if (c < clen) {                                                                                            // 522
              for (r = 0, rlen = input[c].length; r < repeatRow - rlen; r++) {                                         // 523
                input[c].push(input[c][r % rlen]);                                                                     // 524
              }                                                                                                        // 525
              input[c].unshift(start.col + c, start.row, 0);                                                           // 526
              instance.spliceCol.apply(instance, input[c]);                                                            // 527
            }                                                                                                          // 528
            else {                                                                                                     // 529
              input[c % clen][0] = start.col + c;                                                                      // 530
              instance.spliceCol.apply(instance, input[c % clen]);                                                     // 531
            }                                                                                                          // 532
          }                                                                                                            // 533
          break;                                                                                                       // 534
                                                                                                                       // 535
        case 'shift_right' :                                                                                           // 536
          repeatCol = end ? end.col - start.col + 1 : 0;                                                               // 537
          repeatRow = end ? end.row - start.row + 1 : 0;                                                               // 538
          for (r = 0, rlen = input.length, rmax = Math.max(rlen, repeatRow); r < rmax; r++) {                          // 539
            if (r < rlen) {                                                                                            // 540
              for (c = 0, clen = input[r].length; c < repeatCol - clen; c++) {                                         // 541
                input[r].push(input[r][c % clen]);                                                                     // 542
              }                                                                                                        // 543
              input[r].unshift(start.row + r, start.col, 0);                                                           // 544
              instance.spliceRow.apply(instance, input[r]);                                                            // 545
            }                                                                                                          // 546
            else {                                                                                                     // 547
              input[r % rlen][0] = start.row + r;                                                                      // 548
              instance.spliceRow.apply(instance, input[r % rlen]);                                                     // 549
            }                                                                                                          // 550
          }                                                                                                            // 551
          break;                                                                                                       // 552
                                                                                                                       // 553
        case 'overwrite' :                                                                                             // 554
        default:                                                                                                       // 555
          // overwrite and other not specified options                                                                 // 556
          current.row = start.row;                                                                                     // 557
          current.col = start.col;                                                                                     // 558
                                                                                                                       // 559
          var iterators = {row: 0, col: 0}, // number of packages                                                      // 560
              selected = { // selected range                                                                           // 561
                row: (end && start) ? (end.row - start.row + 1) : 1,                                                   // 562
                col: (end && start) ? (end.col - start.col + 1) : 1                                                    // 563
              };                                                                                                       // 564
                                                                                                                       // 565
          if (['up', 'left'].indexOf(direction) !== -1) {                                                              // 566
            iterators = {                                                                                              // 567
              row: Math.ceil(selected.row / rlen) || 1,                                                                // 568
              col: Math.ceil(selected.col / input[0].length) || 1                                                      // 569
            }                                                                                                          // 570
          } else if (['down', 'right'].indexOf(direction) !== -1) {                                                    // 571
            iterators = {                                                                                              // 572
              row: 1,                                                                                                  // 573
              col: 1                                                                                                   // 574
            };                                                                                                         // 575
          }                                                                                                            // 576
                                                                                                                       // 577
                                                                                                                       // 578
          for (r = 0; r < rlen; r++) {                                                                                 // 579
            if ((end && current.row > end.row) || (!priv.settings.allowInsertRow && current.row > instance.countRows() - 1) || (current.row >= priv.settings.maxRows)) {
              break;                                                                                                   // 581
            }                                                                                                          // 582
            current.col = start.col;                                                                                   // 583
            clen = input[r] ? input[r].length : 0;                                                                     // 584
            for (c = 0; c < clen; c++) {                                                                               // 585
              if ((end && current.col > end.col) || (!priv.settings.allowInsertColumn && current.col > instance.countCols() - 1) || (current.col >= priv.settings.maxCols)) {
                break;                                                                                                 // 587
              }                                                                                                        // 588
                                                                                                                       // 589
              if (!instance.getCellMeta(current.row, current.col).readOnly) {                                          // 590
                var result,                                                                                            // 591
                    value = input[r][c],                                                                               // 592
                    index = {                                                                                          // 593
                      row: r,                                                                                          // 594
                      col: c                                                                                           // 595
                    };                                                                                                 // 596
                                                                                                                       // 597
                if (source === 'autofill') {                                                                           // 598
                  result = instance.runHooksAndReturn('beforeAutofillInsidePopulate', index, direction, input, deltas, iterators, selected);
                                                                                                                       // 600
                  if (result) {                                                                                        // 601
                    iterators = typeof(result.iterators) !== 'undefined' ? result.iterators : iterators;               // 602
                    value = typeof(result.value) !== 'undefined' ? result.value : value;                               // 603
                  }                                                                                                    // 604
                }                                                                                                      // 605
                                                                                                                       // 606
                setData.push([current.row, current.col, value]);                                                       // 607
              }                                                                                                        // 608
                                                                                                                       // 609
              current.col++;                                                                                           // 610
                                                                                                                       // 611
              if (end && c === clen - 1) {                                                                             // 612
                c = -1;                                                                                                // 613
                                                                                                                       // 614
                if (['down', 'right'].indexOf(direction) !== -1) {                                                     // 615
                  iterators.col++;                                                                                     // 616
                } else if (['up', 'left'].indexOf(direction) !== -1) {                                                 // 617
                  if (iterators.col > 1) {                                                                             // 618
                    iterators.col--;                                                                                   // 619
                  }                                                                                                    // 620
                }                                                                                                      // 621
                                                                                                                       // 622
              }                                                                                                        // 623
            }                                                                                                          // 624
                                                                                                                       // 625
            current.row++;                                                                                             // 626
            iterators.col = 1;                                                                                         // 627
                                                                                                                       // 628
            if (end && r === rlen - 1) {                                                                               // 629
              r = -1;                                                                                                  // 630
                                                                                                                       // 631
              if (['down', 'right'].indexOf(direction) !== -1) {                                                       // 632
                iterators.row++;                                                                                       // 633
              } else if (['up', 'left'].indexOf(direction) !== -1) {                                                   // 634
                if (iterators.row > 1) {                                                                               // 635
                  iterators.row--;                                                                                     // 636
                }                                                                                                      // 637
              }                                                                                                        // 638
                                                                                                                       // 639
            }                                                                                                          // 640
          }                                                                                                            // 641
          instance.setDataAtCell(setData, null, null, source || 'populateFromArray');                                  // 642
          break;                                                                                                       // 643
      }                                                                                                                // 644
    }                                                                                                                  // 645
  };                                                                                                                   // 646
                                                                                                                       // 647
  this.selection = selection = { //this public assignment is only temporary                                            // 648
    inProgress: false,                                                                                                 // 649
                                                                                                                       // 650
    selectedHeader: {                                                                                                  // 651
      cols: false,                                                                                                     // 652
      rows: false                                                                                                      // 653
    },                                                                                                                 // 654
                                                                                                                       // 655
    setSelectedHeaders: function (rows, cols) {                                                                        // 656
      instance.selection.selectedHeader.rows = rows;                                                                   // 657
      instance.selection.selectedHeader.cols = cols;                                                                   // 658
    },                                                                                                                 // 659
                                                                                                                       // 660
    /**                                                                                                                // 661
     * Sets inProgress to true. This enables onSelectionEnd and onSelectionEndByProp to function as desired            // 662
     */                                                                                                                // 663
    begin: function () {                                                                                               // 664
      instance.selection.inProgress = true;                                                                            // 665
    },                                                                                                                 // 666
                                                                                                                       // 667
    /**                                                                                                                // 668
     * Sets inProgress to false. Triggers onSelectionEnd and onSelectionEndByProp                                      // 669
     */                                                                                                                // 670
    finish: function () {                                                                                              // 671
      var sel = instance.getSelected();                                                                                // 672
      Handsontable.hooks.run(instance, "afterSelectionEnd", sel[0], sel[1], sel[2], sel[3]);                           // 673
      Handsontable.hooks.run(instance, "afterSelectionEndByProp", sel[0], instance.colToProp(sel[1]), sel[2], instance.colToProp(sel[3]));
      instance.selection.inProgress = false;                                                                           // 675
    },                                                                                                                 // 676
                                                                                                                       // 677
    isInProgress: function () {                                                                                        // 678
      return instance.selection.inProgress;                                                                            // 679
    },                                                                                                                 // 680
                                                                                                                       // 681
    /**                                                                                                                // 682
     * Starts selection range on given td object                                                                       // 683
     * @param {WalkontableCellCoords} coords                                                                           // 684
     */                                                                                                                // 685
    setRangeStart: function (coords, keepEditorOpened) {                                                               // 686
      Handsontable.hooks.run(instance, "beforeSetRangeStart", coords);                                                 // 687
      priv.selRange = new WalkontableCellRange(coords, coords, coords);                                                // 688
      selection.setRangeEnd(coords, null, keepEditorOpened);                                                           // 689
    },                                                                                                                 // 690
                                                                                                                       // 691
    /**                                                                                                                // 692
     * Ends selection range on given td object                                                                         // 693
     * @param {WalkontableCellCoords} coords                                                                           // 694
     * @param {Boolean} [scrollToCell=true] If true, viewport will be scrolled to range end                            // 695
     */                                                                                                                // 696
    setRangeEnd: function (coords, scrollToCell, keepEditorOpened) {                                                   // 697
      //trigger handlers                                                                                               // 698
      Handsontable.hooks.run(instance, "beforeSetRangeEnd", coords);                                                   // 699
                                                                                                                       // 700
      instance.selection.begin();                                                                                      // 701
                                                                                                                       // 702
      priv.selRange.to = new WalkontableCellCoords(coords.row, coords.col);                                            // 703
      if (!priv.settings.multiSelect) {                                                                                // 704
        priv.selRange.from = coords;                                                                                   // 705
      }                                                                                                                // 706
                                                                                                                       // 707
      //set up current selection                                                                                       // 708
      instance.view.wt.selections.current.clear();                                                                     // 709
      instance.view.wt.selections.current.add(priv.selRange.highlight);                                                // 710
                                                                                                                       // 711
      //set up area selection                                                                                          // 712
      instance.view.wt.selections.area.clear();                                                                        // 713
      if (selection.isMultiple()) {                                                                                    // 714
        instance.view.wt.selections.area.add(priv.selRange.from);                                                      // 715
        instance.view.wt.selections.area.add(priv.selRange.to);                                                        // 716
      }                                                                                                                // 717
                                                                                                                       // 718
      //set up highlight                                                                                               // 719
      if (priv.settings.currentRowClassName || priv.settings.currentColClassName) {                                    // 720
        instance.view.wt.selections.highlight.clear();                                                                 // 721
        instance.view.wt.selections.highlight.add(priv.selRange.from);                                                 // 722
        instance.view.wt.selections.highlight.add(priv.selRange.to);                                                   // 723
      }                                                                                                                // 724
                                                                                                                       // 725
      //trigger handlers                                                                                               // 726
      Handsontable.hooks.run(instance, "afterSelection", priv.selRange.from.row, priv.selRange.from.col, priv.selRange.to.row, priv.selRange.to.col);
      Handsontable.hooks.run(instance, "afterSelectionByProp", priv.selRange.from.row, datamap.colToProp(priv.selRange.from.col), priv.selRange.to.row, datamap.colToProp(priv.selRange.to.col));
                                                                                                                       // 729
      if (scrollToCell !== false && instance.view.mainViewIsActive()) {                                                // 730
        instance.view.scrollViewport(coords);                                                                          // 731
      }                                                                                                                // 732
      selection.refreshBorders(null, keepEditorOpened);                                                                // 733
    },                                                                                                                 // 734
                                                                                                                       // 735
    /**                                                                                                                // 736
     * Destroys editor, redraws borders around cells, prepares editor                                                  // 737
     * @param {Boolean} revertOriginal                                                                                 // 738
     * @param {Boolean} keepEditor                                                                                     // 739
     */                                                                                                                // 740
    refreshBorders: function (revertOriginal, keepEditor) {                                                            // 741
      if (!keepEditor) {                                                                                               // 742
        editorManager.destroyEditor(revertOriginal);                                                                   // 743
      }                                                                                                                // 744
      instance.view.render();                                                                                          // 745
      if (selection.isSelected() && !keepEditor) {                                                                     // 746
        editorManager.prepareEditor();                                                                                 // 747
      }                                                                                                                // 748
    },                                                                                                                 // 749
                                                                                                                       // 750
    /**                                                                                                                // 751
     * Returns information if we have a multiselection                                                                 // 752
     * @return {Boolean}                                                                                               // 753
     */                                                                                                                // 754
    isMultiple: function () {                                                                                          // 755
      var isMultiple = !(priv.selRange.to.col === priv.selRange.from.col && priv.selRange.to.row === priv.selRange.from.row)
        , modifier = Handsontable.hooks.execute(instance, 'afterIsMultipleSelection', isMultiple);                     // 757
                                                                                                                       // 758
      if(isMultiple) {                                                                                                 // 759
        return modifier;                                                                                               // 760
      }                                                                                                                // 761
    },                                                                                                                 // 762
                                                                                                                       // 763
    /**                                                                                                                // 764
     * Selects cell relative to current cell (if possible)                                                             // 765
     */                                                                                                                // 766
    transformStart: function (rowDelta, colDelta, force, keepEditorOpened) {                                           // 767
      var delta = new WalkontableCellCoords(rowDelta, colDelta);                                                       // 768
      instance.runHooks('modifyTransformStart', delta);                                                                // 769
                                                                                                                       // 770
      if (priv.selRange.highlight.row + rowDelta > instance.countRows() - 1) {                                         // 771
        if (force && priv.settings.minSpareRows > 0) {                                                                 // 772
          instance.alter("insert_row", instance.countRows());                                                          // 773
        }                                                                                                              // 774
        else if (priv.settings.autoWrapCol) {                                                                          // 775
          delta.row = 1 - instance.countRows();                                                                        // 776
          delta.col = priv.selRange.highlight.col + delta.col == instance.countCols() - 1 ? 1 - instance.countCols() : 1;
        }                                                                                                              // 778
      }                                                                                                                // 779
      else if (priv.settings.autoWrapCol && priv.selRange.highlight.row + delta.row < 0 && priv.selRange.highlight.col + delta.col >= 0) {
        delta.row = instance.countRows() - 1;                                                                          // 781
        delta.col = priv.selRange.highlight.col + delta.col == 0 ? instance.countCols() - 1 : -1;                      // 782
      }                                                                                                                // 783
                                                                                                                       // 784
      if (priv.selRange.highlight.col + delta.col > instance.countCols() - 1) {                                        // 785
        if (force && priv.settings.minSpareCols > 0) {                                                                 // 786
          instance.alter("insert_col", instance.countCols());                                                          // 787
        }                                                                                                              // 788
        else if (priv.settings.autoWrapRow) {                                                                          // 789
          delta.row = priv.selRange.highlight.row + delta.row == instance.countRows() - 1 ? 1 - instance.countRows() : 1;
          delta.col = 1 - instance.countCols();                                                                        // 791
        }                                                                                                              // 792
      }                                                                                                                // 793
      else if (priv.settings.autoWrapRow && priv.selRange.highlight.col + delta.col < 0 && priv.selRange.highlight.row + delta.row >= 0) {
        delta.row = priv.selRange.highlight.row + delta.row == 0 ? instance.countRows() - 1 : -1;                      // 795
        delta.col = instance.countCols() - 1;                                                                          // 796
      }                                                                                                                // 797
                                                                                                                       // 798
      var totalRows = instance.countRows();                                                                            // 799
      var totalCols = instance.countCols();                                                                            // 800
      var coords = new WalkontableCellCoords(priv.selRange.highlight.row + delta.row, priv.selRange.highlight.col + delta.col);
                                                                                                                       // 802
      if (coords.row < 0) {                                                                                            // 803
        coords.row = 0;                                                                                                // 804
      }                                                                                                                // 805
      else if (coords.row > 0 && coords.row >= totalRows) {                                                            // 806
        coords.row = totalRows - 1;                                                                                    // 807
      }                                                                                                                // 808
                                                                                                                       // 809
      if (coords.col < 0) {                                                                                            // 810
        coords.col = 0;                                                                                                // 811
      }                                                                                                                // 812
      else if (coords.col > 0 && coords.col >= totalCols) {                                                            // 813
        coords.col = totalCols - 1;                                                                                    // 814
      }                                                                                                                // 815
                                                                                                                       // 816
      selection.setRangeStart(coords, keepEditorOpened);                                                               // 817
    },                                                                                                                 // 818
                                                                                                                       // 819
    /**                                                                                                                // 820
     * Sets selection end cell relative to current selection end cell (if possible)                                    // 821
     */                                                                                                                // 822
    transformEnd: function (rowDelta, colDelta) {                                                                      // 823
      var delta = new WalkontableCellCoords(rowDelta, colDelta);                                                       // 824
      instance.runHooks('modifyTransformEnd', delta);                                                                  // 825
                                                                                                                       // 826
        var totalRows = instance.countRows();                                                                          // 827
        var totalCols = instance.countCols();                                                                          // 828
        var coords = new WalkontableCellCoords(priv.selRange.to.row + delta.row, priv.selRange.to.col + delta.col);    // 829
                                                                                                                       // 830
        if (coords.row < 0) {                                                                                          // 831
          coords.row = 0;                                                                                              // 832
        }                                                                                                              // 833
        else if (coords.row > 0 && coords.row >= totalRows) {                                                          // 834
          coords.row = totalRows - 1;                                                                                  // 835
        }                                                                                                              // 836
                                                                                                                       // 837
        if (coords.col < 0) {                                                                                          // 838
          coords.col = 0;                                                                                              // 839
        }                                                                                                              // 840
        else if (coords.col > 0 && coords.col >= totalCols) {                                                          // 841
          coords.col = totalCols - 1;                                                                                  // 842
        }                                                                                                              // 843
                                                                                                                       // 844
        selection.setRangeEnd(coords);                                                                                 // 845
    },                                                                                                                 // 846
                                                                                                                       // 847
    /**                                                                                                                // 848
     * Returns true if currently there is a selection on screen, false otherwise                                       // 849
     * @return {Boolean}                                                                                               // 850
     */                                                                                                                // 851
    isSelected: function () {                                                                                          // 852
      return (priv.selRange !== null);                                                                                 // 853
    },                                                                                                                 // 854
                                                                                                                       // 855
    /**                                                                                                                // 856
     * Returns true if coords is within current selection coords                                                       // 857
     * @param {WalkontableCellCoords} coords                                                                           // 858
     * @return {Boolean}                                                                                               // 859
     */                                                                                                                // 860
    inInSelection: function (coords) {                                                                                 // 861
      if (!selection.isSelected()) {                                                                                   // 862
        return false;                                                                                                  // 863
      }                                                                                                                // 864
      return priv.selRange.includes(coords);                                                                           // 865
    },                                                                                                                 // 866
                                                                                                                       // 867
    /**                                                                                                                // 868
     * Deselects all selected cells                                                                                    // 869
     */                                                                                                                // 870
    deselect: function () {                                                                                            // 871
      if (!selection.isSelected()) {                                                                                   // 872
        return;                                                                                                        // 873
      }                                                                                                                // 874
      instance.selection.inProgress = false; //needed by HT inception                                                  // 875
      priv.selRange = null;                                                                                            // 876
      instance.view.wt.selections.current.clear();                                                                     // 877
      instance.view.wt.selections.area.clear();                                                                        // 878
      if (priv.settings.currentRowClassName || priv.settings.currentColClassName) {                                    // 879
        instance.view.wt.selections.highlight.clear();                                                                 // 880
      }                                                                                                                // 881
      editorManager.destroyEditor();                                                                                   // 882
      selection.refreshBorders();                                                                                      // 883
      Handsontable.hooks.run(instance, 'afterDeselect');                                                               // 884
    },                                                                                                                 // 885
                                                                                                                       // 886
    /**                                                                                                                // 887
     * Select all cells                                                                                                // 888
     */                                                                                                                // 889
    selectAll: function () {                                                                                           // 890
      if (!priv.settings.multiSelect) {                                                                                // 891
        return;                                                                                                        // 892
      }                                                                                                                // 893
      selection.setRangeStart(new WalkontableCellCoords(0, 0));                                                        // 894
      selection.setRangeEnd(new WalkontableCellCoords(instance.countRows() - 1, instance.countCols() - 1), false);     // 895
    },                                                                                                                 // 896
                                                                                                                       // 897
    /**                                                                                                                // 898
     * Deletes data from selected cells                                                                                // 899
     */                                                                                                                // 900
    empty: function () {                                                                                               // 901
      if (!selection.isSelected()) {                                                                                   // 902
        return;                                                                                                        // 903
      }                                                                                                                // 904
      var topLeft = priv.selRange.getTopLeftCorner();                                                                  // 905
      var bottomRight = priv.selRange.getBottomRightCorner();                                                          // 906
      var r, c, changes = [];                                                                                          // 907
      for (r = topLeft.row; r <= bottomRight.row; r++) {                                                               // 908
        for (c = topLeft.col; c <= bottomRight.col; c++) {                                                             // 909
          if (!instance.getCellMeta(r, c).readOnly) {                                                                  // 910
            changes.push([r, c, '']);                                                                                  // 911
          }                                                                                                            // 912
        }                                                                                                              // 913
      }                                                                                                                // 914
      instance.setDataAtCell(changes);                                                                                 // 915
    }                                                                                                                  // 916
  };                                                                                                                   // 917
                                                                                                                       // 918
  this.init = function () {                                                                                            // 919
    Handsontable.hooks.run(instance, 'beforeInit');                                                                    // 920
                                                                                                                       // 921
    if(Handsontable.mobileBrowser) {                                                                                   // 922
      Handsontable.Dom.addClass(instance.rootElement, 'mobile');                                                       // 923
    }                                                                                                                  // 924
                                                                                                                       // 925
    this.updateSettings(priv.settings, true);                                                                          // 926
                                                                                                                       // 927
    this.view = new Handsontable.TableView(this);                                                                      // 928
    editorManager = new Handsontable.EditorManager(instance, priv, selection, datamap);                                // 929
                                                                                                                       // 930
    this.forceFullRender = true; //used when data was changed                                                          // 931
    this.view.render();                                                                                                // 932
                                                                                                                       // 933
    if (typeof priv.firstRun === 'object') {                                                                           // 934
      Handsontable.hooks.run(instance, 'afterChange', priv.firstRun[0], priv.firstRun[1]);                             // 935
      priv.firstRun = false;                                                                                           // 936
    }                                                                                                                  // 937
    Handsontable.hooks.run(instance, 'afterInit');                                                                     // 938
  };                                                                                                                   // 939
                                                                                                                       // 940
  function ValidatorsQueue() { //moved this one level up so it can be used in any function here. Probably this should be moved to a separate file
    var resolved = false;                                                                                              // 942
                                                                                                                       // 943
    return {                                                                                                           // 944
      validatorsInQueue: 0,                                                                                            // 945
      addValidatorToQueue: function () {                                                                               // 946
        this.validatorsInQueue++;                                                                                      // 947
        resolved = false;                                                                                              // 948
      },                                                                                                               // 949
      removeValidatorFormQueue: function () {                                                                          // 950
        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1;                      // 951
        this.checkIfQueueIsEmpty();                                                                                    // 952
      },                                                                                                               // 953
      onQueueEmpty: function () {                                                                                      // 954
      },                                                                                                               // 955
      checkIfQueueIsEmpty: function () {                                                                               // 956
        if (this.validatorsInQueue == 0 && resolved == false) {                                                        // 957
          resolved = true;                                                                                             // 958
          this.onQueueEmpty();                                                                                         // 959
        }                                                                                                              // 960
      }                                                                                                                // 961
    };                                                                                                                 // 962
  }                                                                                                                    // 963
                                                                                                                       // 964
  function validateChanges(changes, source, callback) {                                                                // 965
    var waitingForValidator = new ValidatorsQueue();                                                                   // 966
    waitingForValidator.onQueueEmpty = resolve;                                                                        // 967
                                                                                                                       // 968
    for (var i = changes.length - 1; i >= 0; i--) {                                                                    // 969
      if (changes[i] === null) {                                                                                       // 970
        changes.splice(i, 1);                                                                                          // 971
      }                                                                                                                // 972
      else {                                                                                                           // 973
        var row = changes[i][0];                                                                                       // 974
        var col = datamap.propToCol(changes[i][1]);                                                                    // 975
        var logicalCol = instance.runHooksAndReturn('modifyCol', col); //column order may have changes, so we need to translate physical col index (stored in datasource) to logical (displayed to user)
        var cellProperties = instance.getCellMeta(row, logicalCol);                                                    // 977
                                                                                                                       // 978
        if (cellProperties.type === 'numeric' && typeof changes[i][3] === 'string') {                                  // 979
          if (changes[i][3].length > 0 && (/^-?[\d\s]*(\.|\,)?\d*$/.test(changes[i][3]) || cellProperties.format )) {  // 980
            var len = changes[i][3].length;                                                                            // 981
            if (typeof cellProperties.language == 'undefined') {                                                       // 982
              numeral.language('en');                                                                                  // 983
            }                                                                                                          // 984
            else if (changes[i][3].indexOf(".") === len - 3 && changes[i][3].indexOf(",") === -1) { //this input in format XXXX.XX is likely to come from paste. Let's parse it using international rules
              numeral.language('en');                                                                                  // 986
            }                                                                                                          // 987
            else {                                                                                                     // 988
              numeral.language(cellProperties.language);                                                               // 989
            }                                                                                                          // 990
                                                                                                                       // 991
            changes[i][3] = numeral().unformat(changes[i][3] || '0'); //numeral cannot unformat empty string           // 992
          }                                                                                                            // 993
        }                                                                                                              // 994
                                                                                                                       // 995
        if (instance.getCellValidator(cellProperties)) {                                                               // 996
          waitingForValidator.addValidatorToQueue();                                                                   // 997
          instance.validateCell(changes[i][3], cellProperties, (function (i, cellProperties) {                         // 998
            return function (result) {                                                                                 // 999
              if (typeof result !== 'boolean') {                                                                       // 1000
                throw new Error("Validation error: result is not boolean");                                            // 1001
              }                                                                                                        // 1002
              if (result === false && cellProperties.allowInvalid === false) {                                         // 1003
                changes.splice(i, 1);         // cancel the change                                                     // 1004
                cellProperties.valid = true;  // we cancelled the change, so cell value is still valid                 // 1005
                --i;                                                                                                   // 1006
              }                                                                                                        // 1007
              waitingForValidator.removeValidatorFormQueue();                                                          // 1008
            }                                                                                                          // 1009
          })(i, cellProperties)                                                                                        // 1010
            , source);                                                                                                 // 1011
        }                                                                                                              // 1012
      }                                                                                                                // 1013
    }                                                                                                                  // 1014
    waitingForValidator.checkIfQueueIsEmpty();                                                                         // 1015
                                                                                                                       // 1016
    function resolve() {                                                                                               // 1017
      var beforeChangeResult;                                                                                          // 1018
                                                                                                                       // 1019
      if (changes.length) {                                                                                            // 1020
        beforeChangeResult = Handsontable.hooks.execute(instance, "beforeChange", changes, source);                    // 1021
        if (typeof beforeChangeResult === 'function') {                                                                // 1022
          console.warn("Your beforeChange callback returns a function. It's not supported since Handsontable 0.12.1 (and the returned function will not be executed).");
        } else if (beforeChangeResult === false) {                                                                     // 1024
          changes.splice(0, changes.length); //invalidate all changes (remove everything from array)                   // 1025
        }                                                                                                              // 1026
      }                                                                                                                // 1027
        callback(); //called when async validators are resolved and beforeChange was not async                         // 1028
    }                                                                                                                  // 1029
  }                                                                                                                    // 1030
                                                                                                                       // 1031
  /**                                                                                                                  // 1032
   * Internal function to apply changes. Called after validateChanges                                                  // 1033
   * @param {Array} changes Array in form of [row, prop, oldValue, newValue]                                           // 1034
   * @param {String} source String that identifies how this change will be described in changes array (useful in onChange callback)
   */                                                                                                                  // 1036
  function applyChanges(changes, source) {                                                                             // 1037
    var i = changes.length - 1;                                                                                        // 1038
                                                                                                                       // 1039
    if (i < 0) {                                                                                                       // 1040
      return;                                                                                                          // 1041
    }                                                                                                                  // 1042
                                                                                                                       // 1043
    for (; 0 <= i; i--) {                                                                                              // 1044
      if (changes[i] === null) {                                                                                       // 1045
        changes.splice(i, 1);                                                                                          // 1046
        continue;                                                                                                      // 1047
      }                                                                                                                // 1048
                                                                                                                       // 1049
      if(changes[i][2] == null && changes[i][3] == null) {                                                             // 1050
        continue;                                                                                                      // 1051
      }                                                                                                                // 1052
                                                                                                                       // 1053
      if (priv.settings.allowInsertRow) {                                                                              // 1054
        while (changes[i][0] > instance.countRows() - 1) {                                                             // 1055
          datamap.createRow();                                                                                         // 1056
        }                                                                                                              // 1057
      }                                                                                                                // 1058
                                                                                                                       // 1059
      if (instance.dataType === 'array' && priv.settings.allowInsertColumn) {                                          // 1060
        while (datamap.propToCol(changes[i][1]) > instance.countCols() - 1) {                                          // 1061
          datamap.createCol();                                                                                         // 1062
        }                                                                                                              // 1063
      }                                                                                                                // 1064
                                                                                                                       // 1065
      datamap.set(changes[i][0], changes[i][1], changes[i][3]);                                                        // 1066
    }                                                                                                                  // 1067
                                                                                                                       // 1068
    instance.forceFullRender = true; //used when data was changed                                                      // 1069
    grid.adjustRowsAndCols();                                                                                          // 1070
    Handsontable.hooks.run(instance, 'beforeChangeRender', changes, source);                                           // 1071
    selection.refreshBorders(null, true);                                                                              // 1072
    Handsontable.hooks.run(instance, 'afterChange', changes, source || 'edit');                                        // 1073
  }                                                                                                                    // 1074
                                                                                                                       // 1075
  this.validateCell = function (value, cellProperties, callback, source) {                                             // 1076
    var validator = instance.getCellValidator(cellProperties);                                                         // 1077
                                                                                                                       // 1078
    if (Object.prototype.toString.call(validator) === '[object RegExp]') {                                             // 1079
      validator = (function (validator) {                                                                              // 1080
        return function (value, callback) {                                                                            // 1081
          callback(validator.test(value));                                                                             // 1082
        }                                                                                                              // 1083
      })(validator);                                                                                                   // 1084
    }                                                                                                                  // 1085
                                                                                                                       // 1086
    if (typeof validator == 'function') {                                                                              // 1087
                                                                                                                       // 1088
      value = Handsontable.hooks.execute(instance, "beforeValidate", value, cellProperties.row, cellProperties.prop, source);
                                                                                                                       // 1090
      // To provide consistent behaviour, validation should be always asynchronous                                     // 1091
      instance._registerTimeout(setTimeout(function () {                                                               // 1092
        validator.call(cellProperties, value, function (valid) {                                                       // 1093
          cellProperties.valid = valid;                                                                                // 1094
                                                                                                                       // 1095
          valid = Handsontable.hooks.execute(instance, "afterValidate", valid, value, cellProperties.row, cellProperties.prop, source);
                                                                                                                       // 1097
          callback(valid);                                                                                             // 1098
        });                                                                                                            // 1099
                                                                                                                       // 1100
        return value;                                                                                                  // 1101
      }, 0));                                                                                                          // 1102
    } else { //resolve callback even if validator function was not found                                               // 1103
      cellProperties.valid = true;                                                                                     // 1104
      callback(true);                                                                                                  // 1105
    }                                                                                                                  // 1106
                                                                                                                       // 1107
                                                                                                                       // 1108
                                                                                                                       // 1109
  };                                                                                                                   // 1110
                                                                                                                       // 1111
  function setDataInputToArray(row, prop_or_col, value) {                                                              // 1112
    if (typeof row === "object") { //is it an array of changes                                                         // 1113
      return row;                                                                                                      // 1114
    }                                                                                                                  // 1115
    else {                                                                                                             // 1116
      return [                                                                                                         // 1117
        [row, prop_or_col, value]                                                                                      // 1118
      ];                                                                                                               // 1119
    }                                                                                                                  // 1120
  }                                                                                                                    // 1121
                                                                                                                       // 1122
  /**                                                                                                                  // 1123
   * Set data at given cell                                                                                            // 1124
   * @public                                                                                                           // 1125
   * @param {Number|Array} row or array of changes in format [[row, col, value], ...]                                  // 1126
   * @param {Number|String} col or source String                                                                       // 1127
   * @param {String} value                                                                                             // 1128
   * @param {String} source String that identifies how this change will be described in changes array (useful in onChange callback)
   */                                                                                                                  // 1130
  this.setDataAtCell = function (row, col, value, source) {                                                            // 1131
    var input = setDataInputToArray(row, col, value)                                                                   // 1132
      , i                                                                                                              // 1133
      , ilen                                                                                                           // 1134
      , changes = []                                                                                                   // 1135
      , prop;                                                                                                          // 1136
                                                                                                                       // 1137
    for (i = 0, ilen = input.length; i < ilen; i++) {                                                                  // 1138
      if (typeof input[i] !== 'object') {                                                                              // 1139
        throw new Error('Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter');
      }                                                                                                                // 1141
      if (typeof input[i][1] !== 'number') {                                                                           // 1142
        throw new Error('Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`');
      }                                                                                                                // 1144
      prop = datamap.colToProp(input[i][1]);                                                                           // 1145
      changes.push([                                                                                                   // 1146
        input[i][0],                                                                                                   // 1147
        prop,                                                                                                          // 1148
        datamap.get(input[i][0], prop),                                                                                // 1149
        input[i][2]                                                                                                    // 1150
      ]);                                                                                                              // 1151
    }                                                                                                                  // 1152
                                                                                                                       // 1153
    if (!source && typeof row === "object") {                                                                          // 1154
      source = col;                                                                                                    // 1155
    }                                                                                                                  // 1156
                                                                                                                       // 1157
    validateChanges(changes, source, function () {                                                                     // 1158
      applyChanges(changes, source);                                                                                   // 1159
    });                                                                                                                // 1160
  };                                                                                                                   // 1161
                                                                                                                       // 1162
                                                                                                                       // 1163
  /**                                                                                                                  // 1164
   * Set data at given row property                                                                                    // 1165
   * @public                                                                                                           // 1166
   * @param {Number|Array} row or array of changes in format [[row, prop, value], ...]                                 // 1167
   * @param {String} prop or source String                                                                             // 1168
   * @param {String} value                                                                                             // 1169
   * @param {String} source String that identifies how this change will be described in changes array (useful in onChange callback)
   */                                                                                                                  // 1171
  this.setDataAtRowProp = function (row, prop, value, source) {                                                        // 1172
    var input = setDataInputToArray(row, prop, value)                                                                  // 1173
      , i                                                                                                              // 1174
      , ilen                                                                                                           // 1175
      , changes = [];                                                                                                  // 1176
                                                                                                                       // 1177
    for (i = 0, ilen = input.length; i < ilen; i++) {                                                                  // 1178
      changes.push([                                                                                                   // 1179
        input[i][0],                                                                                                   // 1180
        input[i][1],                                                                                                   // 1181
        datamap.get(input[i][0], input[i][1]),                                                                         // 1182
        input[i][2]                                                                                                    // 1183
      ]);                                                                                                              // 1184
    }                                                                                                                  // 1185
                                                                                                                       // 1186
    if (!source && typeof row === "object") {                                                                          // 1187
      source = prop;                                                                                                   // 1188
    }                                                                                                                  // 1189
                                                                                                                       // 1190
    validateChanges(changes, source, function () {                                                                     // 1191
      applyChanges(changes, source);                                                                                   // 1192
    });                                                                                                                // 1193
  };                                                                                                                   // 1194
                                                                                                                       // 1195
  /**                                                                                                                  // 1196
   * Listen to document body keyboard input                                                                            // 1197
   */                                                                                                                  // 1198
  this.listen = function () {                                                                                          // 1199
    Handsontable.activeGuid = instance.guid;                                                                           // 1200
                                                                                                                       // 1201
    if (document.activeElement && document.activeElement !== document.body) {                                          // 1202
      document.activeElement.blur();                                                                                   // 1203
    }                                                                                                                  // 1204
    else if (!document.activeElement) { //IE                                                                           // 1205
      document.body.focus();                                                                                           // 1206
    }                                                                                                                  // 1207
  };                                                                                                                   // 1208
                                                                                                                       // 1209
  /**                                                                                                                  // 1210
   * Stop listening to document body keyboard input                                                                    // 1211
   */                                                                                                                  // 1212
  this.unlisten = function () {                                                                                        // 1213
    Handsontable.activeGuid = null;                                                                                    // 1214
  };                                                                                                                   // 1215
                                                                                                                       // 1216
  /**                                                                                                                  // 1217
   * Returns true if current Handsontable instance is listening on document body keyboard input                        // 1218
   */                                                                                                                  // 1219
  this.isListening = function () {                                                                                     // 1220
    return Handsontable.activeGuid === instance.guid;                                                                  // 1221
  };                                                                                                                   // 1222
                                                                                                                       // 1223
  /**                                                                                                                  // 1224
   * Destroys current editor, renders and selects current cell. If revertOriginal != true, edited data is saved        // 1225
   * @param {Boolean} revertOriginal                                                                                   // 1226
   */                                                                                                                  // 1227
  this.destroyEditor = function (revertOriginal) {                                                                     // 1228
    selection.refreshBorders(revertOriginal);                                                                          // 1229
  };                                                                                                                   // 1230
                                                                                                                       // 1231
  /**                                                                                                                  // 1232
   * Populate cells at position with 2d array                                                                          // 1233
   * @param {Number} row Start row                                                                                     // 1234
   * @param {Number} col Start column                                                                                  // 1235
   * @param {Array} input 2d array                                                                                     // 1236
   * @param {Number=} endRow End row (use when you want to cut input when certain row is reached)                      // 1237
   * @param {Number=} endCol End column (use when you want to cut input when certain column is reached)                // 1238
   * @param {String=} [source="populateFromArray"]                                                                     // 1239
   * @param {String=} [method="overwrite"]                                                                             // 1240
   * @param {String} direction edit (left|right|up|down)                                                               // 1241
   * @param {Array} deltas array                                                                                       // 1242
   * @return {Object|undefined} ending td in pasted area (only if any cell was changed)                                // 1243
   */                                                                                                                  // 1244
  this.populateFromArray = function (row, col, input, endRow, endCol, source, method, direction, deltas) {             // 1245
    if (!(typeof input === 'object' && typeof input[0] === 'object')) {                                                // 1246
      throw new Error("populateFromArray parameter `input` must be an array of arrays"); //API changed in 0.9-beta2, let's check if you use it correctly
    }                                                                                                                  // 1248
    return grid.populateFromArray(new WalkontableCellCoords(row, col), input, typeof endRow === 'number' ? new WalkontableCellCoords(endRow, endCol) : null, source, method, direction, deltas);
  };                                                                                                                   // 1250
                                                                                                                       // 1251
  /**                                                                                                                  // 1252
   * Adds/removes data from the column                                                                                 // 1253
   * @param {Number} col Index of column in which do you want to do splice.                                            // 1254
   * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end
   * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed
   * param {...*} elements Optional. The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array
   */                                                                                                                  // 1258
  this.spliceCol = function (col, index, amount/*, elements... */) {                                                   // 1259
    return datamap.spliceCol.apply(datamap, arguments);                                                                // 1260
  };                                                                                                                   // 1261
                                                                                                                       // 1262
  /**                                                                                                                  // 1263
   * Adds/removes data from the row                                                                                    // 1264
   * @param {Number} row Index of column in which do you want to do splice.                                            // 1265
   * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end
   * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed
   * param {...*} elements Optional. The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array
   */                                                                                                                  // 1269
  this.spliceRow = function (row, index, amount/*, elements... */) {                                                   // 1270
    return datamap.spliceRow.apply(datamap, arguments);                                                                // 1271
  };                                                                                                                   // 1272
                                                                                                                       // 1273
  /**                                                                                                                  // 1274
   * Returns current selection. Returns undefined if there is no selection.                                            // 1275
   * @public                                                                                                           // 1276
   * @return {Array} [`startRow`, `startCol`, `endRow`, `endCol`]                                                      // 1277
   */                                                                                                                  // 1278
  this.getSelected = function () { //https://github.com/handsontable/handsontable/issues/44  //cjl                     // 1279
    if (selection.isSelected()) {                                                                                      // 1280
      return [priv.selRange.from.row, priv.selRange.from.col, priv.selRange.to.row, priv.selRange.to.col];             // 1281
    }                                                                                                                  // 1282
  };                                                                                                                   // 1283
                                                                                                                       // 1284
  /**                                                                                                                  // 1285
   * Returns current selection as a WalkontableCellRange object. Returns undefined if there is no selection.           // 1286
   * @public                                                                                                           // 1287
   * @return {WalkontableCellRange}                                                                                    // 1288
   */                                                                                                                  // 1289
  this.getSelectedRange = function () { //https://github.com/handsontable/handsontable/issues/44  //cjl                // 1290
    if (selection.isSelected()) {                                                                                      // 1291
      return priv.selRange;                                                                                            // 1292
    }                                                                                                                  // 1293
  };                                                                                                                   // 1294
                                                                                                                       // 1295
                                                                                                                       // 1296
  /**                                                                                                                  // 1297
   * Render visible data                                                                                               // 1298
   * @public                                                                                                           // 1299
   */                                                                                                                  // 1300
  this.render = function () {                                                                                          // 1301
    if (instance.view) {                                                                                               // 1302
      instance.forceFullRender = true; //used when data was changed                                                    // 1303
      selection.refreshBorders(null, true);                                                                            // 1304
    }                                                                                                                  // 1305
  };                                                                                                                   // 1306
                                                                                                                       // 1307
  /**                                                                                                                  // 1308
   * Load data from array                                                                                              // 1309
   * @public                                                                                                           // 1310
   * @param {Array} data                                                                                               // 1311
   */                                                                                                                  // 1312
  this.loadData = function (data) {                                                                                    // 1313
    if (typeof data === 'object' && data !== null) {                                                                   // 1314
      if (!(data.push && data.splice)) { //check if data is array. Must use duck-type check so Backbone Collections also pass it
        //when data is not an array, attempt to make a single-row array of it                                          // 1316
        data = [data];                                                                                                 // 1317
      }                                                                                                                // 1318
    }                                                                                                                  // 1319
    else if(data === null) {                                                                                           // 1320
      data = [];                                                                                                       // 1321
      var row;                                                                                                         // 1322
      for (var r = 0, rlen = priv.settings.startRows; r < rlen; r++) {                                                 // 1323
        row = [];                                                                                                      // 1324
        for (var c = 0, clen = priv.settings.startCols; c < clen; c++) {                                               // 1325
          row.push(null);                                                                                              // 1326
        }                                                                                                              // 1327
        data.push(row);                                                                                                // 1328
      }                                                                                                                // 1329
    }                                                                                                                  // 1330
    else {                                                                                                             // 1331
      throw new Error("loadData only accepts array of objects or array of arrays (" + typeof data + " given)");        // 1332
    }                                                                                                                  // 1333
                                                                                                                       // 1334
    priv.isPopulated = false;                                                                                          // 1335
    GridSettings.prototype.data = data;                                                                                // 1336
                                                                                                                       // 1337
    if (Array.isArray(priv.settings.dataSchema) || Array.isArray(data[0])) {                                           // 1338
      instance.dataType = 'array';                                                                                     // 1339
    }                                                                                                                  // 1340
    else if (typeof priv.settings.dataSchema === 'function') {                                                         // 1341
      instance.dataType = 'function';                                                                                  // 1342
    }                                                                                                                  // 1343
    else {                                                                                                             // 1344
      instance.dataType = 'object';                                                                                    // 1345
    }                                                                                                                  // 1346
                                                                                                                       // 1347
    datamap = new Handsontable.DataMap(instance, priv, GridSettings);                                                  // 1348
                                                                                                                       // 1349
    clearCellSettingCache();                                                                                           // 1350
                                                                                                                       // 1351
    grid.adjustRowsAndCols();                                                                                          // 1352
    Handsontable.hooks.run(instance, 'afterLoadData');                                                                 // 1353
                                                                                                                       // 1354
    if (priv.firstRun) {                                                                                               // 1355
      priv.firstRun = [null, 'loadData'];                                                                              // 1356
    }                                                                                                                  // 1357
    else {                                                                                                             // 1358
      Handsontable.hooks.run(instance, 'afterChange', null, 'loadData');                                               // 1359
      instance.render();                                                                                               // 1360
    }                                                                                                                  // 1361
                                                                                                                       // 1362
    priv.isPopulated = true;                                                                                           // 1363
                                                                                                                       // 1364
                                                                                                                       // 1365
                                                                                                                       // 1366
    function clearCellSettingCache() {                                                                                 // 1367
      priv.cellSettings.length = 0;                                                                                    // 1368
    }                                                                                                                  // 1369
  };                                                                                                                   // 1370
                                                                                                                       // 1371
  /**                                                                                                                  // 1372
   * Return the current data object (the same that was passed by `data` configuration option or `loadData` method). Optionally you can provide cell range `r`, `c`, `r2`, `c2` to get only a fragment of grid data
   * @public                                                                                                           // 1374
   * @param {Number} r (Optional) From row                                                                             // 1375
   * @param {Number} c (Optional) From col                                                                             // 1376
   * @param {Number} r2 (Optional) To row                                                                              // 1377
   * @param {Number} c2 (Optional) To col                                                                              // 1378
   * @return {Array|Object}                                                                                            // 1379
   */                                                                                                                  // 1380
  this.getData = function (r, c, r2, c2) {                                                                             // 1381
    if (typeof r === 'undefined') {                                                                                    // 1382
      return datamap.getAll();                                                                                         // 1383
    } else {                                                                                                           // 1384
      return datamap.getRange(new WalkontableCellCoords(r, c), new WalkontableCellCoords(r2, c2), datamap.DESTINATION_RENDERER);
    }                                                                                                                  // 1386
  };                                                                                                                   // 1387
                                                                                                                       // 1388
  this.getCopyableData = function (startRow, startCol, endRow, endCol) {                                               // 1389
    return datamap.getCopyableText(new WalkontableCellCoords(startRow, startCol), new WalkontableCellCoords(endRow, endCol));
  };                                                                                                                   // 1391
                                                                                                                       // 1392
  /**                                                                                                                  // 1393
   * Update settings                                                                                                   // 1394
   * @public                                                                                                           // 1395
   */                                                                                                                  // 1396
  this.updateSettings = function (settings, init) {                                                                    // 1397
    var i, clen;                                                                                                       // 1398
                                                                                                                       // 1399
    if (typeof settings.rows !== "undefined") {                                                                        // 1400
      throw new Error("'rows' setting is no longer supported. do you mean startRows, minRows or maxRows?");            // 1401
    }                                                                                                                  // 1402
    if (typeof settings.cols !== "undefined") {                                                                        // 1403
      throw new Error("'cols' setting is no longer supported. do you mean startCols, minCols or maxCols?");            // 1404
    }                                                                                                                  // 1405
                                                                                                                       // 1406
    for (i in settings) {                                                                                              // 1407
      if (i === 'data') {                                                                                              // 1408
        continue; //loadData will be triggered later                                                                   // 1409
      }                                                                                                                // 1410
      else {                                                                                                           // 1411
        if (Handsontable.hooks.hooks[i] !== void 0 || Handsontable.hooks.legacy[i] !== void 0) {                       // 1412
          if (typeof settings[i] === 'function' || Array.isArray(settings[i])) {                                       // 1413
            instance.addHook(i, settings[i]);                                                                          // 1414
          }                                                                                                            // 1415
        }                                                                                                              // 1416
        else {                                                                                                         // 1417
          // Update settings                                                                                           // 1418
          if (!init && settings.hasOwnProperty(i)) {                                                                   // 1419
            GridSettings.prototype[i] = settings[i];                                                                   // 1420
          }                                                                                                            // 1421
        }                                                                                                              // 1422
      }                                                                                                                // 1423
    }                                                                                                                  // 1424
                                                                                                                       // 1425
    // Load data or create data map                                                                                    // 1426
    if (settings.data === void 0 && priv.settings.data === void 0) {                                                   // 1427
      instance.loadData(null); //data source created just now                                                          // 1428
    }                                                                                                                  // 1429
    else if (settings.data !== void 0) {                                                                               // 1430
      instance.loadData(settings.data); //data source given as option                                                  // 1431
    }                                                                                                                  // 1432
    else if (settings.columns !== void 0) {                                                                            // 1433
      datamap.createMap();                                                                                             // 1434
    }                                                                                                                  // 1435
                                                                                                                       // 1436
    // Init columns constructors configuration                                                                         // 1437
    clen = instance.countCols();                                                                                       // 1438
                                                                                                                       // 1439
    //Clear cellSettings cache                                                                                         // 1440
    priv.cellSettings.length = 0;                                                                                      // 1441
                                                                                                                       // 1442
    if (clen > 0) {                                                                                                    // 1443
      var proto, column;                                                                                               // 1444
                                                                                                                       // 1445
      for (i = 0; i < clen; i++) {                                                                                     // 1446
        priv.columnSettings[i] = Handsontable.helper.columnFactory(GridSettings, priv.columnsSettingConflicts);        // 1447
                                                                                                                       // 1448
        // shortcut for prototype                                                                                      // 1449
        proto = priv.columnSettings[i].prototype;                                                                      // 1450
                                                                                                                       // 1451
        // Use settings provided by user                                                                               // 1452
        if (GridSettings.prototype.columns) {                                                                          // 1453
          column = GridSettings.prototype.columns[i];                                                                  // 1454
          Handsontable.helper.extend(proto, column);                                                                   // 1455
          Handsontable.helper.extend(proto, expandType(column));                                                       // 1456
        }                                                                                                              // 1457
      }                                                                                                                // 1458
    }                                                                                                                  // 1459
                                                                                                                       // 1460
    if (typeof settings.cell !== 'undefined') {                                                                        // 1461
      for(i in settings.cell) {                                                                                        // 1462
        var cell = settings.cell[i];                                                                                   // 1463
        instance.setCellMetaObject(cell.row, cell.col, cell);                                                          // 1464
      }                                                                                                                // 1465
    }                                                                                                                  // 1466
                                                                                                                       // 1467
    Handsontable.hooks.run(instance, 'afterCellMetaReset');                                                            // 1468
                                                                                                                       // 1469
    if (typeof settings.className !== "undefined") {                                                                   // 1470
      if (GridSettings.prototype.className) {                                                                          // 1471
        Handsontable.Dom.removeClass(instance.rootElement,GridSettings.prototype.className);                           // 1472
//        instance.rootElement.removeClass(GridSettings.prototype.className);                                          // 1473
      }                                                                                                                // 1474
      if (settings.className) {                                                                                        // 1475
        Handsontable.Dom.addClass(instance.rootElement,settings.className);                                            // 1476
//        instance.rootElement.addClass(settings.className);                                                           // 1477
      }                                                                                                                // 1478
    }                                                                                                                  // 1479
                                                                                                                       // 1480
    if (typeof settings.height != 'undefined'){                                                                        // 1481
      var height = settings.height;                                                                                    // 1482
                                                                                                                       // 1483
      if (typeof height == 'function'){                                                                                // 1484
        height = height();                                                                                             // 1485
      }                                                                                                                // 1486
                                                                                                                       // 1487
      instance.rootElement.style.height = height + 'px';                                                               // 1488
    }                                                                                                                  // 1489
                                                                                                                       // 1490
    if (typeof settings.width != 'undefined'){                                                                         // 1491
      var width = settings.width;                                                                                      // 1492
                                                                                                                       // 1493
      if (typeof width == 'function'){                                                                                 // 1494
        width = width();                                                                                               // 1495
      }                                                                                                                // 1496
                                                                                                                       // 1497
      instance.rootElement.style.width = width + 'px';                                                                 // 1498
    }                                                                                                                  // 1499
                                                                                                                       // 1500
    if (height){                                                                                                       // 1501
      instance.rootElement.style.overflow = 'auto';                                                                    // 1502
    }                                                                                                                  // 1503
                                                                                                                       // 1504
    if (!init) {                                                                                                       // 1505
      Handsontable.hooks.run(instance, 'afterUpdateSettings');                                                         // 1506
    }                                                                                                                  // 1507
                                                                                                                       // 1508
    grid.adjustRowsAndCols();                                                                                          // 1509
    if (instance.view && !priv.firstRun) {                                                                             // 1510
      instance.forceFullRender = true; //used when data was changed                                                    // 1511
      selection.refreshBorders(null, true);                                                                            // 1512
    }                                                                                                                  // 1513
  };                                                                                                                   // 1514
                                                                                                                       // 1515
  this.getValue = function () {                                                                                        // 1516
    var sel = instance.getSelected();                                                                                  // 1517
    if (GridSettings.prototype.getValue) {                                                                             // 1518
      if (typeof GridSettings.prototype.getValue === 'function') {                                                     // 1519
        return GridSettings.prototype.getValue.call(instance);                                                         // 1520
      }                                                                                                                // 1521
      else if (sel) {                                                                                                  // 1522
        return instance.getData()[sel[0]][GridSettings.prototype.getValue];                                            // 1523
      }                                                                                                                // 1524
    }                                                                                                                  // 1525
    else if (sel) {                                                                                                    // 1526
      return instance.getDataAtCell(sel[0], sel[1]);                                                                   // 1527
    }                                                                                                                  // 1528
  };                                                                                                                   // 1529
                                                                                                                       // 1530
  function expandType(obj) {                                                                                           // 1531
    if (!obj.hasOwnProperty('type')) return; //ignore obj.prototype.type                                               // 1532
                                                                                                                       // 1533
    var type, expandedType = {};                                                                                       // 1534
                                                                                                                       // 1535
    if (typeof obj.type === 'object') {                                                                                // 1536
      type = obj.type;                                                                                                 // 1537
    }                                                                                                                  // 1538
    else if (typeof obj.type === 'string') {                                                                           // 1539
      type = Handsontable.cellTypes[obj.type];                                                                         // 1540
      if (type === void 0) {                                                                                           // 1541
        throw new Error('You declared cell type "' + obj.type + '" as a string that is not mapped to a known object. Cell type must be an object or a string mapped to an object in Handsontable.cellTypes');
      }                                                                                                                // 1543
    }                                                                                                                  // 1544
                                                                                                                       // 1545
                                                                                                                       // 1546
    for (var i in type) {                                                                                              // 1547
      if (type.hasOwnProperty(i) && !obj.hasOwnProperty(i)) {                                                          // 1548
        expandedType[i] = type[i];                                                                                     // 1549
      }                                                                                                                // 1550
    }                                                                                                                  // 1551
                                                                                                                       // 1552
    return expandedType;                                                                                               // 1553
                                                                                                                       // 1554
  }                                                                                                                    // 1555
                                                                                                                       // 1556
  /**                                                                                                                  // 1557
   * Returns current settings object                                                                                   // 1558
   * @return {Object}                                                                                                  // 1559
   */                                                                                                                  // 1560
  this.getSettings = function () {                                                                                     // 1561
    return priv.settings;                                                                                              // 1562
  };                                                                                                                   // 1563
                                                                                                                       // 1564
  /**                                                                                                                  // 1565
   * Clears grid                                                                                                       // 1566
   * @public                                                                                                           // 1567
   */                                                                                                                  // 1568
  this.clear = function () {                                                                                           // 1569
    selection.selectAll();                                                                                             // 1570
    selection.empty();                                                                                                 // 1571
  };                                                                                                                   // 1572
                                                                                                                       // 1573
  /**                                                                                                                  // 1574
   * Inserts or removes rows and columns                                                                               // 1575
   * @param {String} action See grid.alter for possible values                                                         // 1576
   * @param {Number} index                                                                                             // 1577
   * @param {Number} amount                                                                                            // 1578
   * @param {String} [source] Optional. Source of hook runner.                                                         // 1579
   * @param {Boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.                            // 1580
   * @public                                                                                                           // 1581
   */                                                                                                                  // 1582
  this.alter = function (action, index, amount, source, keepEmptyRows) {                                               // 1583
    grid.alter(action, index, amount, source, keepEmptyRows);                                                          // 1584
  };                                                                                                                   // 1585
                                                                                                                       // 1586
  /**                                                                                                                  // 1587
   * Returns <td> element corresponding to params row, col                                                             // 1588
   * @param {Number} row                                                                                               // 1589
   * @param {Number} col                                                                                               // 1590
   * @param {Boolean} topmost                                                                                          // 1591
   * @public                                                                                                           // 1592
   * @return {Element}                                                                                                 // 1593
   */                                                                                                                  // 1594
  this.getCell = function (row, col, topmost) {                                                                        // 1595
    return instance.view.getCellAtCoords(new WalkontableCellCoords(row, col), topmost);                                // 1596
  };                                                                                                                   // 1597
                                                                                                                       // 1598
  /**                                                                                                                  // 1599
   * Returns coordinates for the provided element                                                                      // 1600
   * @param elem                                                                                                       // 1601
   * @returns {WalkontableCellCoords|*}                                                                                // 1602
   */                                                                                                                  // 1603
  this.getCoords = function(elem) {                                                                                    // 1604
    return this.view.wt.wtTable.getCoords.call(this.view.wt.wtTable, elem);                                            // 1605
  };                                                                                                                   // 1606
                                                                                                                       // 1607
  /**                                                                                                                  // 1608
   * Returns property name associated with column number                                                               // 1609
   * @param {Number} col                                                                                               // 1610
   * @public                                                                                                           // 1611
   * @return {String}                                                                                                  // 1612
   */                                                                                                                  // 1613
  this.colToProp = function (col) {                                                                                    // 1614
    return datamap.colToProp(col);                                                                                     // 1615
  };                                                                                                                   // 1616
                                                                                                                       // 1617
  /**                                                                                                                  // 1618
   * Returns column number associated with property name                                                               // 1619
   * @param {String} prop                                                                                              // 1620
   * @public                                                                                                           // 1621
   * @return {Number}                                                                                                  // 1622
   */                                                                                                                  // 1623
  this.propToCol = function (prop) {                                                                                   // 1624
    return datamap.propToCol(prop);                                                                                    // 1625
  };                                                                                                                   // 1626
                                                                                                                       // 1627
  /**                                                                                                                  // 1628
   * Return value at `row`, `col`                                                                                      // 1629
   * @param {Number} row                                                                                               // 1630
   * @param {Number} col                                                                                               // 1631
   * @public                                                                                                           // 1632
   * @return value (mixed data type)                                                                                   // 1633
   */                                                                                                                  // 1634
  this.getDataAtCell = function (row, col) {                                                                           // 1635
    return datamap.get(row, datamap.colToProp(col));                                                                   // 1636
  };                                                                                                                   // 1637
                                                                                                                       // 1638
  /**                                                                                                                  // 1639
   * Return value at `row`, `prop`                                                                                     // 1640
   * @param {Number} row                                                                                               // 1641
   * @param {String} prop                                                                                              // 1642
   * @public                                                                                                           // 1643
   * @return value (mixed data type)                                                                                   // 1644
   */                                                                                                                  // 1645
  this.getDataAtRowProp = function (row, prop) {                                                                       // 1646
    return datamap.get(row, prop);                                                                                     // 1647
  };                                                                                                                   // 1648
                                                                                                                       // 1649
  /**                                                                                                                  // 1650
   * Return value at `col`, where `col` is the visible index of the column                                             // 1651
   * @param {Number} col                                                                                               // 1652
   * @public                                                                                                           // 1653
   * @return {Array} value (mixed data type)                                                                           // 1654
   */                                                                                                                  // 1655
  this.getDataAtCol = function (col) {                                                                                 // 1656
    var out = [];                                                                                                      // 1657
    return out.concat.apply(out, datamap.getRange(new WalkontableCellCoords(0, col), new WalkontableCellCoords(priv.settings.data.length - 1, col), datamap.DESTINATION_RENDERER));
  };                                                                                                                   // 1659
                                                                                                                       // 1660
  /**                                                                                                                  // 1661
   * Return value at `prop`                                                                                            // 1662
   * @param {String} prop                                                                                              // 1663
   * @public                                                                                                           // 1664
   * @return {Array} value (mixed data type)                                                                           // 1665
   */                                                                                                                  // 1666
  this.getDataAtProp = function (prop) {                                                                               // 1667
    var out = [];                                                                                                      // 1668
    return out.concat.apply(out, datamap.getRange(new WalkontableCellCoords(0, datamap.propToCol(prop)), new WalkontableCellCoords(priv.settings.data.length - 1, datamap.propToCol(prop)), datamap.DESTINATION_RENDERER));
  };                                                                                                                   // 1670
                                                                                                                       // 1671
  /**                                                                                                                  // 1672
   * Return original source values at 'col'                                                                            // 1673
   * @param {Number} col                                                                                               // 1674
   * @public                                                                                                           // 1675
   * @returns value (mixed data type)                                                                                  // 1676
   */                                                                                                                  // 1677
  this.getSourceDataAtCol = function (col) {                                                                           // 1678
    var out = [],                                                                                                      // 1679
        data = priv.settings.data;                                                                                     // 1680
                                                                                                                       // 1681
    for (var i = 0; i < data.length; i++) {                                                                            // 1682
      out.push(data[i][col]);                                                                                          // 1683
    }                                                                                                                  // 1684
                                                                                                                       // 1685
    return out;                                                                                                        // 1686
  };                                                                                                                   // 1687
                                                                                                                       // 1688
  /**                                                                                                                  // 1689
   * Return original source values at 'row'                                                                            // 1690
   * @param {Number} row                                                                                               // 1691
   * @public                                                                                                           // 1692
   * @returns value {mixed data type}                                                                                  // 1693
   */                                                                                                                  // 1694
  this.getSourceDataAtRow = function (row) {                                                                           // 1695
    return priv.settings.data[row];                                                                                    // 1696
  };                                                                                                                   // 1697
                                                                                                                       // 1698
  /**                                                                                                                  // 1699
   * Return value at `row`                                                                                             // 1700
   * @param {Number} row                                                                                               // 1701
   * @public                                                                                                           // 1702
   * @return value (mixed data type)                                                                                   // 1703
   */                                                                                                                  // 1704
  this.getDataAtRow = function (row) {                                                                                 // 1705
    var data = datamap.getRange(new WalkontableCellCoords(row, 0), new WalkontableCellCoords(row, this.countCols() - 1), datamap.DESTINATION_RENDERER);
    return data[0];                                                                                                    // 1707
  };                                                                                                                   // 1708
                                                                                                                       // 1709
  /***                                                                                                                 // 1710
   *  Remove "key" property object from cell meta data corresponding to params row,col                                 // 1711
   * @param {Number} row                                                                                               // 1712
   * @param {Number} col                                                                                               // 1713
   * @param {String} key                                                                                               // 1714
   */                                                                                                                  // 1715
  this.removeCellMeta = function(row, col, key) {                                                                      // 1716
    var cellMeta = instance.getCellMeta(row, col);                                                                     // 1717
    if(cellMeta[key] != undefined){                                                                                    // 1718
      delete priv.cellSettings[row][col][key];                                                                         // 1719
    }                                                                                                                  // 1720
  };                                                                                                                   // 1721
                                                                                                                       // 1722
  /**                                                                                                                  // 1723
   * Set cell meta data object to corresponding params row, col                                                        // 1724
   * @param {Number} row                                                                                               // 1725
   * @param {Number} col                                                                                               // 1726
   * @param {Object} prop                                                                                              // 1727
   */                                                                                                                  // 1728
  this.setCellMetaObject = function (row, col, prop) {                                                                 // 1729
    if (typeof prop === 'object') {                                                                                    // 1730
      for (var key in prop) {                                                                                          // 1731
        var value = prop[key];                                                                                         // 1732
        this.setCellMeta(row, col, key, value);                                                                        // 1733
      }                                                                                                                // 1734
    }                                                                                                                  // 1735
  };                                                                                                                   // 1736
                                                                                                                       // 1737
  /**                                                                                                                  // 1738
   * Sets cell meta data object "key" corresponding to params row, col                                                 // 1739
   * @param {Number} row                                                                                               // 1740
   * @param {Number} col                                                                                               // 1741
   * @param {String} key                                                                                               // 1742
   * @param {String} val                                                                                               // 1743
   *                                                                                                                   // 1744
   */                                                                                                                  // 1745
  this.setCellMeta = function (row, col, key, val) {                                                                   // 1746
    if (!priv.cellSettings[row]) {                                                                                     // 1747
      priv.cellSettings[row] = [];                                                                                     // 1748
    }                                                                                                                  // 1749
    if (!priv.cellSettings[row][col]) {                                                                                // 1750
      priv.cellSettings[row][col] = new priv.columnSettings[col]();                                                    // 1751
    }                                                                                                                  // 1752
    priv.cellSettings[row][col][key] = val;                                                                            // 1753
    Handsontable.hooks.run(instance, 'afterSetCellMeta', row, col, key, val);                                          // 1754
  };                                                                                                                   // 1755
                                                                                                                       // 1756
  /**                                                                                                                  // 1757
   * Returns cell meta data object corresponding to params row, col                                                    // 1758
   * @param {Number} row                                                                                               // 1759
   * @param {Number} col                                                                                               // 1760
   * @public                                                                                                           // 1761
   * @return {Object}                                                                                                  // 1762
   */                                                                                                                  // 1763
  this.getCellMeta = function (row, col) {                                                                             // 1764
    var prop = datamap.colToProp(col)                                                                                  // 1765
      , cellProperties;                                                                                                // 1766
                                                                                                                       // 1767
    row = translateRowIndex(row);                                                                                      // 1768
    col = translateColIndex(col);                                                                                      // 1769
                                                                                                                       // 1770
    if (!priv.columnSettings[col]) {                                                                                   // 1771
      priv.columnSettings[col] = Handsontable.helper.columnFactory(GridSettings, priv.columnsSettingConflicts);        // 1772
    }                                                                                                                  // 1773
                                                                                                                       // 1774
    if (!priv.cellSettings[row]) {                                                                                     // 1775
      priv.cellSettings[row] = [];                                                                                     // 1776
    }                                                                                                                  // 1777
    if (!priv.cellSettings[row][col]) {                                                                                // 1778
      priv.cellSettings[row][col] = new priv.columnSettings[col]();                                                    // 1779
    }                                                                                                                  // 1780
                                                                                                                       // 1781
    cellProperties = priv.cellSettings[row][col]; //retrieve cellProperties from cache                                 // 1782
                                                                                                                       // 1783
    cellProperties.row = row;                                                                                          // 1784
    cellProperties.col = col;                                                                                          // 1785
    cellProperties.prop = prop;                                                                                        // 1786
    cellProperties.instance = instance;                                                                                // 1787
                                                                                                                       // 1788
    Handsontable.hooks.run(instance, 'beforeGetCellMeta', row, col, cellProperties);                                   // 1789
    Handsontable.helper.extend(cellProperties, expandType(cellProperties)); //for `type` added in beforeGetCellMeta    // 1790
                                                                                                                       // 1791
    if (cellProperties.cells) {                                                                                        // 1792
      var settings = cellProperties.cells.call(cellProperties, row, col, prop);                                        // 1793
                                                                                                                       // 1794
      if (settings) {                                                                                                  // 1795
        Handsontable.helper.extend(cellProperties, settings);                                                          // 1796
        Handsontable.helper.extend(cellProperties, expandType(settings)); //for `type` added in cells                  // 1797
      }                                                                                                                // 1798
    }                                                                                                                  // 1799
                                                                                                                       // 1800
    Handsontable.hooks.run(instance, 'afterGetCellMeta', row, col, cellProperties);                                    // 1801
                                                                                                                       // 1802
    return cellProperties;                                                                                             // 1803
  };                                                                                                                   // 1804
                                                                                                                       // 1805
  /**                                                                                                                  // 1806
   * If displayed rows order is different than the order of rows stored in memory (i.e. sorting is applied)            // 1807
   * we need to translate logical (stored) row index to physical (displayed) index.                                    // 1808
   * @param row - original row index                                                                                   // 1809
   * @returns {int} translated row index                                                                               // 1810
   */                                                                                                                  // 1811
  function translateRowIndex(row){                                                                                     // 1812
    return Handsontable.hooks.execute(instance, 'modifyRow', row);                                                     // 1813
  }                                                                                                                    // 1814
                                                                                                                       // 1815
  /**                                                                                                                  // 1816
   * If displayed columns order is different than the order of columns stored in memory (i.e. column were moved using manualColumnMove plugin)
   * we need to translate logical (stored) column index to physical (displayed) index.                                 // 1818
   * @param col - original column index                                                                                // 1819
   * @returns {int} - translated column index                                                                          // 1820
   */                                                                                                                  // 1821
  function translateColIndex(col){                                                                                     // 1822
    return Handsontable.hooks.execute(instance, 'modifyCol', col); // warning: this must be done after datamap.colToProp
  }                                                                                                                    // 1824
                                                                                                                       // 1825
  var rendererLookup = Handsontable.helper.cellMethodLookupFactory('renderer');                                        // 1826
  this.getCellRenderer = function (row, col) {                                                                         // 1827
    var renderer = rendererLookup.call(this, row, col);                                                                // 1828
    return Handsontable.renderers.getRenderer(renderer);                                                               // 1829
                                                                                                                       // 1830
  };                                                                                                                   // 1831
                                                                                                                       // 1832
  this.getCellEditor = Handsontable.helper.cellMethodLookupFactory('editor');                                          // 1833
                                                                                                                       // 1834
  this.getCellValidator = Handsontable.helper.cellMethodLookupFactory('validator');                                    // 1835
                                                                                                                       // 1836
                                                                                                                       // 1837
  /**                                                                                                                  // 1838
   * Validates all cells using their validator functions and calls callback when finished. Does not render the view    // 1839
   * @param callback                                                                                                   // 1840
   */                                                                                                                  // 1841
  this.validateCells = function (callback) {                                                                           // 1842
    var waitingForValidator = new ValidatorsQueue();                                                                   // 1843
    waitingForValidator.onQueueEmpty = callback;                                                                       // 1844
                                                                                                                       // 1845
    var i = instance.countRows() - 1;                                                                                  // 1846
    while (i >= 0) {                                                                                                   // 1847
      var j = instance.countCols() - 1;                                                                                // 1848
      while (j >= 0) {                                                                                                 // 1849
        waitingForValidator.addValidatorToQueue();                                                                     // 1850
        instance.validateCell(instance.getDataAtCell(i, j), instance.getCellMeta(i, j), function () {                  // 1851
          waitingForValidator.removeValidatorFormQueue();                                                              // 1852
        }, 'validateCells');                                                                                           // 1853
        j--;                                                                                                           // 1854
      }                                                                                                                // 1855
      i--;                                                                                                             // 1856
    }                                                                                                                  // 1857
    waitingForValidator.checkIfQueueIsEmpty();                                                                         // 1858
  };                                                                                                                   // 1859
                                                                                                                       // 1860
  /**                                                                                                                  // 1861
   * Return array of row headers (if they are enabled). If param `row` given, return header at given row as string     // 1862
   * @param {Number} row (Optional)                                                                                    // 1863
   * @return {Array|String}                                                                                            // 1864
   */                                                                                                                  // 1865
  this.getRowHeader = function (row) {                                                                                 // 1866
    if (row === void 0) {                                                                                              // 1867
      var out = [];                                                                                                    // 1868
      for (var i = 0, ilen = instance.countRows(); i < ilen; i++) {                                                    // 1869
        out.push(instance.getRowHeader(i));                                                                            // 1870
      }                                                                                                                // 1871
      return out;                                                                                                      // 1872
    }                                                                                                                  // 1873
    else if (Array.isArray(priv.settings.rowHeaders) && priv.settings.rowHeaders[row] !== void 0) {                    // 1874
      return priv.settings.rowHeaders[row];                                                                            // 1875
    }                                                                                                                  // 1876
    else if (typeof priv.settings.rowHeaders === 'function') {                                                         // 1877
      return priv.settings.rowHeaders(row);                                                                            // 1878
    }                                                                                                                  // 1879
    else if (priv.settings.rowHeaders && typeof priv.settings.rowHeaders !== 'string' && typeof priv.settings.rowHeaders !== 'number') {
      return row + 1;                                                                                                  // 1881
    }                                                                                                                  // 1882
    else {                                                                                                             // 1883
      return priv.settings.rowHeaders;                                                                                 // 1884
    }                                                                                                                  // 1885
  };                                                                                                                   // 1886
                                                                                                                       // 1887
  /**                                                                                                                  // 1888
   * Returns information of this table is configured to display row headers                                            // 1889
   * @returns {boolean}                                                                                                // 1890
   */                                                                                                                  // 1891
  this.hasRowHeaders = function () {                                                                                   // 1892
    return !!priv.settings.rowHeaders;                                                                                 // 1893
  };                                                                                                                   // 1894
                                                                                                                       // 1895
  /**                                                                                                                  // 1896
   * Returns information of this table is configured to display column headers                                         // 1897
   * @returns {boolean}                                                                                                // 1898
   */                                                                                                                  // 1899
  this.hasColHeaders = function () {                                                                                   // 1900
    if (priv.settings.colHeaders !== void 0 && priv.settings.colHeaders !== null) { //Polymer has empty value = null   // 1901
      return !!priv.settings.colHeaders;                                                                               // 1902
    }                                                                                                                  // 1903
    for (var i = 0, ilen = instance.countCols(); i < ilen; i++) {                                                      // 1904
      if (instance.getColHeader(i)) {                                                                                  // 1905
        return true;                                                                                                   // 1906
      }                                                                                                                // 1907
    }                                                                                                                  // 1908
    return false;                                                                                                      // 1909
  };                                                                                                                   // 1910
                                                                                                                       // 1911
  /**                                                                                                                  // 1912
   * Return array of column headers (if they are enabled). If param `col` given, return header at given column as string
   * @param {Number} col (Optional)                                                                                    // 1914
   * @return {Array|String}                                                                                            // 1915
   */                                                                                                                  // 1916
  this.getColHeader = function (col) {                                                                                 // 1917
    if (col === void 0) {                                                                                              // 1918
      var out = [];                                                                                                    // 1919
      for (var i = 0, ilen = instance.countCols(); i < ilen; i++) {                                                    // 1920
        out.push(instance.getColHeader(i));                                                                            // 1921
      }                                                                                                                // 1922
      return out;                                                                                                      // 1923
    }                                                                                                                  // 1924
    else {                                                                                                             // 1925
      var baseCol = col;                                                                                               // 1926
      col = Handsontable.hooks.execute(instance, 'modifyCol', col);                                                    // 1927
                                                                                                                       // 1928
      if (priv.settings.columns && priv.settings.columns[col] && priv.settings.columns[col].title) {                   // 1929
        return priv.settings.columns[col].title;                                                                       // 1930
      }                                                                                                                // 1931
      else if (Array.isArray(priv.settings.colHeaders) && priv.settings.colHeaders[col] !== void 0) {                  // 1932
        return priv.settings.colHeaders[col];                                                                          // 1933
      }                                                                                                                // 1934
      else if (typeof priv.settings.colHeaders === 'function') {                                                       // 1935
        return priv.settings.colHeaders(col);                                                                          // 1936
      }                                                                                                                // 1937
      else if (priv.settings.colHeaders && typeof priv.settings.colHeaders !== 'string' && typeof priv.settings.colHeaders !== 'number') {
        return Handsontable.helper.spreadsheetColumnLabel(baseCol); //see #1458                                        // 1939
      }                                                                                                                // 1940
      else {                                                                                                           // 1941
        return priv.settings.colHeaders;                                                                               // 1942
      }                                                                                                                // 1943
    }                                                                                                                  // 1944
  };                                                                                                                   // 1945
                                                                                                                       // 1946
  /**                                                                                                                  // 1947
   * Return column width from settings (no guessing). Private use intended                                             // 1948
   * @param {Number} col                                                                                               // 1949
   * @return {Number}                                                                                                  // 1950
   */                                                                                                                  // 1951
  this._getColWidthFromSettings = function (col) {                                                                     // 1952
    var cellProperties = instance.getCellMeta(0, col);                                                                 // 1953
    var width = cellProperties.width;                                                                                  // 1954
    if (width === void 0 || width === priv.settings.width) {                                                           // 1955
      width = cellProperties.colWidths;                                                                                // 1956
    }                                                                                                                  // 1957
    if (width !== void 0 && width !== null) {                                                                          // 1958
      switch (typeof width) {                                                                                          // 1959
        case 'object': //array                                                                                         // 1960
          width = width[col];                                                                                          // 1961
          break;                                                                                                       // 1962
                                                                                                                       // 1963
        case 'function':                                                                                               // 1964
          width = width(col);                                                                                          // 1965
          break;                                                                                                       // 1966
      }                                                                                                                // 1967
      if (typeof width === 'string') {                                                                                 // 1968
        width = parseInt(width, 10);                                                                                   // 1969
      }                                                                                                                // 1970
    }                                                                                                                  // 1971
    return width;                                                                                                      // 1972
  };                                                                                                                   // 1973
                                                                                                                       // 1974
  /**                                                                                                                  // 1975
   * Return column width                                                                                               // 1976
   * @param {Number} col                                                                                               // 1977
   * @return {Number}                                                                                                  // 1978
   */                                                                                                                  // 1979
  this.getColWidth = function (col) {                                                                                  // 1980
    var width = instance._getColWidthFromSettings(col);                                                                // 1981
    if (!width) {                                                                                                      // 1982
      width = 50;                                                                                                      // 1983
    }                                                                                                                  // 1984
    width = Handsontable.hooks.execute(instance, 'modifyColWidth', width, col);                                        // 1985
    return width;                                                                                                      // 1986
  };                                                                                                                   // 1987
                                                                                                                       // 1988
  /**                                                                                                                  // 1989
   * Return row height from settings (no guessing). Private use intended                                               // 1990
   * @param {Number} row                                                                                               // 1991
   * @return {Number}                                                                                                  // 1992
   */                                                                                                                  // 1993
  this._getRowHeightFromSettings= function (row) {                                                                     // 1994
    /* inefficient                                                                                                     // 1995
    var cellProperties = instance.getCellMeta(0, row);                                                                 // 1996
    var height = cellProperties.height;                                                                                // 1997
    if (height === void 0 || height === priv.settings.height) {                                                        // 1998
      height = cellProperties.rowHeights;                                                                              // 1999
    }                                                                                                                  // 2000
    */                                                                                                                 // 2001
    var height = priv.settings.rowHeights; //only uses grid settings                                                   // 2002
    if (height !== void 0 && height !== null) {                                                                        // 2003
      switch (typeof height) {                                                                                         // 2004
        case 'object': //array                                                                                         // 2005
          height = height[row];                                                                                        // 2006
          break;                                                                                                       // 2007
                                                                                                                       // 2008
        case 'function':                                                                                               // 2009
          height = height(row);                                                                                        // 2010
          break;                                                                                                       // 2011
      }                                                                                                                // 2012
      if (typeof height === 'string') {                                                                                // 2013
        height = parseInt(height, 10);                                                                                 // 2014
      }                                                                                                                // 2015
    }                                                                                                                  // 2016
    return height;                                                                                                     // 2017
  };                                                                                                                   // 2018
                                                                                                                       // 2019
  /**                                                                                                                  // 2020
   * Return row height                                                                                                 // 2021
   * @param {Number} row                                                                                               // 2022
   * @return {Number}                                                                                                  // 2023
   */                                                                                                                  // 2024
  this.getRowHeight = function (row) {                                                                                 // 2025
    var height = instance._getRowHeightFromSettings(row);                                                              // 2026
    height = Handsontable.hooks.execute(instance, 'modifyRowHeight', height, row);                                     // 2027
    return height;                                                                                                     // 2028
  };                                                                                                                   // 2029
                                                                                                                       // 2030
  /**                                                                                                                  // 2031
   * Return total number of rows in grid                                                                               // 2032
   * @return {Number}                                                                                                  // 2033
   */                                                                                                                  // 2034
  this.countRows = function () {                                                                                       // 2035
    return priv.settings.data.length;                                                                                  // 2036
  };                                                                                                                   // 2037
                                                                                                                       // 2038
  /**                                                                                                                  // 2039
   * Return total number of columns in grid                                                                            // 2040
   * @return {Number}                                                                                                  // 2041
   */                                                                                                                  // 2042
  this.countCols = function () {                                                                                       // 2043
    if (instance.dataType === 'object' || instance.dataType === 'function') {                                          // 2044
      if (priv.settings.columns && priv.settings.columns.length) {                                                     // 2045
        return priv.settings.columns.length;                                                                           // 2046
      }                                                                                                                // 2047
      else {                                                                                                           // 2048
        return datamap.colToPropCache.length;                                                                          // 2049
      }                                                                                                                // 2050
    }                                                                                                                  // 2051
    else if (instance.dataType === 'array') {                                                                          // 2052
      if (priv.settings.columns && priv.settings.columns.length) {                                                     // 2053
        return priv.settings.columns.length;                                                                           // 2054
      }                                                                                                                // 2055
      else if (priv.settings.data && priv.settings.data[0] && priv.settings.data[0].length) {                          // 2056
        return priv.settings.data[0].length;                                                                           // 2057
      }                                                                                                                // 2058
      else {                                                                                                           // 2059
        return 0;                                                                                                      // 2060
      }                                                                                                                // 2061
    }                                                                                                                  // 2062
  };                                                                                                                   // 2063
                                                                                                                       // 2064
  /**                                                                                                                  // 2065
   * Return index of first rendered row                                                                                // 2066
   * @return {Number}                                                                                                  // 2067
   */                                                                                                                  // 2068
  this.rowOffset = function () {                                                                                       // 2069
    return instance.view.wt.wtTable.getFirstRenderedRow();                                                             // 2070
  };                                                                                                                   // 2071
                                                                                                                       // 2072
  /**                                                                                                                  // 2073
   * Return index of first visible column                                                                              // 2074
   * @return {Number}                                                                                                  // 2075
   */                                                                                                                  // 2076
  this.colOffset = function () {                                                                                       // 2077
    return instance.view.wt.wtTable.getFirstRenderedColumn();                                                          // 2078
  };                                                                                                                   // 2079
                                                                                                                       // 2080
  /**                                                                                                                  // 2081
   * Return number of rendered rows (including rows partially or fully rendered outside viewport). Returns -1 if table is not visible
   * @return {Number}                                                                                                  // 2083
   */                                                                                                                  // 2084
  this.countRenderedRows = function () {                                                                               // 2085
    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedRowsCount() : -1;                              // 2086
  };                                                                                                                   // 2087
                                                                                                                       // 2088
  /**                                                                                                                  // 2089
   * Return number of visible rows (rendered rows that fully fit inside viewport)). Returns -1 if table is not visible // 2090
   * @return {Number}                                                                                                  // 2091
   */                                                                                                                  // 2092
  this.countVisibleRows = function () {                                                                                // 2093
    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleRowsCount() : -1;                               // 2094
  };                                                                                                                   // 2095
                                                                                                                       // 2096
  /**                                                                                                                  // 2097
   * Return number of rendered columns (including columns partially or fully rendered outside viewport). Returns -1 if table is not visible
   * @return {Number}                                                                                                  // 2099
   */                                                                                                                  // 2100
  this.countRenderedCols = function () {                                                                               // 2101
    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedColumnsCount() : -1;                           // 2102
  };                                                                                                                   // 2103
                                                                                                                       // 2104
  /**                                                                                                                  // 2105
   * Return number of visible columns. Returns -1 if table is not visible                                              // 2106
   * @return {Number}                                                                                                  // 2107
   */                                                                                                                  // 2108
  this.countVisibleCols = function () {                                                                                // 2109
    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleColumnsCount() : - 1;                           // 2110
  };                                                                                                                   // 2111
                                                                                                                       // 2112
  /**                                                                                                                  // 2113
   * Return number of empty rows                                                                                       // 2114
   * @return {Boolean} ending If true, will only count empty rows at the end of the data source                        // 2115
   */                                                                                                                  // 2116
  this.countEmptyRows = function (ending) {                                                                            // 2117
    var i = instance.countRows() - 1                                                                                   // 2118
      , empty = 0                                                                                                      // 2119
      , row;                                                                                                           // 2120
    while (i >= 0) {                                                                                                   // 2121
      row = Handsontable.hooks.execute(this, 'modifyRow', i);                                                          // 2122
      if (instance.isEmptyRow(row)) {                                                                                  // 2123
        empty++;                                                                                                       // 2124
      }                                                                                                                // 2125
      else if (ending) {                                                                                               // 2126
        break;                                                                                                         // 2127
      }                                                                                                                // 2128
      i--;                                                                                                             // 2129
    }                                                                                                                  // 2130
    return empty;                                                                                                      // 2131
  };                                                                                                                   // 2132
                                                                                                                       // 2133
  /**                                                                                                                  // 2134
   * Return number of empty columns                                                                                    // 2135
   * @return {Boolean} ending If true, will only count empty columns at the end of the data source row                 // 2136
   */                                                                                                                  // 2137
  this.countEmptyCols = function (ending) {                                                                            // 2138
    if (instance.countRows() < 1) {                                                                                    // 2139
      return 0;                                                                                                        // 2140
    }                                                                                                                  // 2141
                                                                                                                       // 2142
    var i = instance.countCols() - 1                                                                                   // 2143
      , empty = 0;                                                                                                     // 2144
    while (i >= 0) {                                                                                                   // 2145
      if (instance.isEmptyCol(i)) {                                                                                    // 2146
        empty++;                                                                                                       // 2147
      }                                                                                                                // 2148
      else if (ending) {                                                                                               // 2149
        break;                                                                                                         // 2150
      }                                                                                                                // 2151
      i--;                                                                                                             // 2152
    }                                                                                                                  // 2153
    return empty;                                                                                                      // 2154
  };                                                                                                                   // 2155
                                                                                                                       // 2156
  /**                                                                                                                  // 2157
   * Return true if the row at the given index is empty, false otherwise                                               // 2158
   * @param {Number} r Row index                                                                                       // 2159
   * @return {Boolean}                                                                                                 // 2160
   */                                                                                                                  // 2161
  this.isEmptyRow = function (r) {                                                                                     // 2162
    return priv.settings.isEmptyRow.call(instance, r);                                                                 // 2163
  };                                                                                                                   // 2164
                                                                                                                       // 2165
  /**                                                                                                                  // 2166
   * Return true if the column at the given index is empty, false otherwise                                            // 2167
   * @param {Number} c Column index                                                                                    // 2168
   * @return {Boolean}                                                                                                 // 2169
   */                                                                                                                  // 2170
  this.isEmptyCol = function (c) {                                                                                     // 2171
    return priv.settings.isEmptyCol.call(instance, c);                                                                 // 2172
  };                                                                                                                   // 2173
                                                                                                                       // 2174
  /**                                                                                                                  // 2175
   * Selects cell on grid. Optionally selects range to another cell                                                    // 2176
   * @param {Number} row                                                                                               // 2177
   * @param {Number} col                                                                                               // 2178
   * @param {Number} [endRow]                                                                                          // 2179
   * @param {Number} [endCol]                                                                                          // 2180
   * @param {Boolean} [scrollToCell=true] If true, viewport will be scrolled to the selection                          // 2181
   * @public                                                                                                           // 2182
   * @return {Boolean}                                                                                                 // 2183
   */                                                                                                                  // 2184
  this.selectCell = function (row, col, endRow, endCol, scrollToCell) {                                                // 2185
    if (typeof row !== 'number' || row < 0 || row >= instance.countRows()) {                                           // 2186
      return false;                                                                                                    // 2187
    }                                                                                                                  // 2188
    if (typeof col !== 'number' || col < 0 || col >= instance.countCols()) {                                           // 2189
      return false;                                                                                                    // 2190
    }                                                                                                                  // 2191
    if (typeof endRow !== "undefined") {                                                                               // 2192
      if (typeof endRow !== 'number' || endRow < 0 || endRow >= instance.countRows()) {                                // 2193
        return false;                                                                                                  // 2194
      }                                                                                                                // 2195
      if (typeof endCol !== 'number' || endCol < 0 || endCol >= instance.countCols()) {                                // 2196
        return false;                                                                                                  // 2197
      }                                                                                                                // 2198
    }                                                                                                                  // 2199
    var coords = new WalkontableCellCoords(row, col);                                                                  // 2200
    priv.selRange = new WalkontableCellRange(coords, coords, coords);                                                  // 2201
    if (document.activeElement && document.activeElement !== document.documentElement && document.activeElement !== document.body) {
      document.activeElement.blur(); //needed or otherwise prepare won't focus the cell. selectionSpec tests this (should move focus to selected cell)
    }                                                                                                                  // 2204
    instance.listen();                                                                                                 // 2205
    if (typeof endRow === "undefined") {                                                                               // 2206
      selection.setRangeEnd(priv.selRange.from, scrollToCell);                                                         // 2207
    }                                                                                                                  // 2208
    else {                                                                                                             // 2209
      selection.setRangeEnd(new WalkontableCellCoords(endRow, endCol), scrollToCell);                                  // 2210
    }                                                                                                                  // 2211
                                                                                                                       // 2212
    instance.selection.finish();                                                                                       // 2213
    return true;                                                                                                       // 2214
  };                                                                                                                   // 2215
                                                                                                                       // 2216
  this.selectCellByProp = function (row, prop, endRow, endProp, scrollToCell) {                                        // 2217
    arguments[1] = datamap.propToCol(arguments[1]);                                                                    // 2218
    if (typeof arguments[3] !== "undefined") {                                                                         // 2219
      arguments[3] = datamap.propToCol(arguments[3]);                                                                  // 2220
    }                                                                                                                  // 2221
    return instance.selectCell.apply(instance, arguments);                                                             // 2222
  };                                                                                                                   // 2223
                                                                                                                       // 2224
  /**                                                                                                                  // 2225
   * Deselects current sell selection on grid                                                                          // 2226
   * @public                                                                                                           // 2227
   */                                                                                                                  // 2228
  this.deselectCell = function () {                                                                                    // 2229
    selection.deselect();                                                                                              // 2230
  };                                                                                                                   // 2231
                                                                                                                       // 2232
  /**                                                                                                                  // 2233
   * Remove grid from DOM                                                                                              // 2234
   * @public                                                                                                           // 2235
   */                                                                                                                  // 2236
  this.destroy = function () {                                                                                         // 2237
                                                                                                                       // 2238
    instance._clearTimeouts();                                                                                         // 2239
    if (instance.view) { //in case HT is destroyed before initialization has finished                                  // 2240
      instance.view.destroy();                                                                                         // 2241
    }                                                                                                                  // 2242
                                                                                                                       // 2243
                                                                                                                       // 2244
    Handsontable.Dom.empty(instance.rootElement);                                                                      // 2245
    eventManager.clear();                                                                                              // 2246
                                                                                                                       // 2247
    Handsontable.hooks.run(instance, 'afterDestroy');                                                                  // 2248
    Handsontable.hooks.destroy(instance);                                                                              // 2249
                                                                                                                       // 2250
    for (var i in instance) {                                                                                          // 2251
      if (instance.hasOwnProperty(i)) {                                                                                // 2252
        //replace instance methods with post mortem                                                                    // 2253
        if (typeof instance[i] === "function") {                                                                       // 2254
          if (i !== "runHooks" && i !== "runHooksAndReturn") {                                                         // 2255
            instance[i] = postMortem;                                                                                  // 2256
          }                                                                                                            // 2257
        }                                                                                                              // 2258
        //replace instance properties with null (restores memory)                                                      // 2259
        //it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests    // 2260
        else if (i !== "guid") {                                                                                       // 2261
          instance[i] = null;                                                                                          // 2262
        }                                                                                                              // 2263
      }                                                                                                                // 2264
    }                                                                                                                  // 2265
                                                                                                                       // 2266
                                                                                                                       // 2267
    //replace private properties with null (restores memory)                                                           // 2268
    //it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests        // 2269
    priv = null;                                                                                                       // 2270
    datamap = null;                                                                                                    // 2271
    grid = null;                                                                                                       // 2272
    selection = null;                                                                                                  // 2273
    editorManager = null;                                                                                              // 2274
    instance = null;                                                                                                   // 2275
    GridSettings = null;                                                                                               // 2276
  };                                                                                                                   // 2277
                                                                                                                       // 2278
  /**                                                                                                                  // 2279
   * Replacement for all methods after Handsotnable was destroyed                                                      // 2280
   */                                                                                                                  // 2281
  function postMortem() {                                                                                              // 2282
    throw new Error("This method cannot be called because this Handsontable instance has been destroyed");             // 2283
  }                                                                                                                    // 2284
                                                                                                                       // 2285
  /**                                                                                                                  // 2286
   * Returns active editor object                                                                                      // 2287
   * @returns {Object}                                                                                                 // 2288
   */                                                                                                                  // 2289
  this.getActiveEditor = function(){                                                                                   // 2290
    return editorManager.getActiveEditor();                                                                            // 2291
  };                                                                                                                   // 2292
                                                                                                                       // 2293
  /**                                                                                                                  // 2294
   * Return Handsontable instance                                                                                      // 2295
   * @public                                                                                                           // 2296
   * @return {Object}                                                                                                  // 2297
   */                                                                                                                  // 2298
  this.getInstance = function () {                                                                                     // 2299
    return instance;                                                                                                   // 2300
  };                                                                                                                   // 2301
                                                                                                                       // 2302
  this.addHook = function (key, fn) {                                                                                  // 2303
    Handsontable.hooks.add(key, fn, instance);                                                                         // 2304
  };                                                                                                                   // 2305
                                                                                                                       // 2306
  this.addHookOnce = function (key, fn) {                                                                              // 2307
    Handsontable.hooks.once(key, fn, instance);                                                                        // 2308
  };                                                                                                                   // 2309
                                                                                                                       // 2310
  this.removeHook = function (key, fn) {                                                                               // 2311
    Handsontable.hooks.remove(key, fn, instance);                                                                      // 2312
  };                                                                                                                   // 2313
                                                                                                                       // 2314
  this.runHooks = function (key, p1, p2, p3, p4, p5, p6) {                                                             // 2315
    Handsontable.hooks.run(instance, key, p1, p2, p3, p4, p5, p6);                                                     // 2316
  };                                                                                                                   // 2317
                                                                                                                       // 2318
  this.runHooksAndReturn = function (key, p1, p2, p3, p4, p5, p6) {                                                    // 2319
    return Handsontable.hooks.execute(instance, key, p1, p2, p3, p4, p5, p6);                                          // 2320
  };                                                                                                                   // 2321
                                                                                                                       // 2322
  this.timeouts = [];                                                                                                  // 2323
                                                                                                                       // 2324
  /**                                                                                                                  // 2325
   * Sets timeout. Purpose of this method is to clear all known timeouts when `destroy` method is called               // 2326
   * @public                                                                                                           // 2327
   */                                                                                                                  // 2328
  this._registerTimeout = function (handle) {                                                                          // 2329
    this.timeouts.push(handle);                                                                                        // 2330
  };                                                                                                                   // 2331
                                                                                                                       // 2332
  /**                                                                                                                  // 2333
   * Clears all known timeouts                                                                                         // 2334
   * @public                                                                                                           // 2335
   */                                                                                                                  // 2336
  this._clearTimeouts = function () {                                                                                  // 2337
    for(var i = 0, ilen = this.timeouts.length; i<ilen; i++) {                                                         // 2338
      clearTimeout(this.timeouts[i]);                                                                                  // 2339
    }                                                                                                                  // 2340
  };                                                                                                                   // 2341
                                                                                                                       // 2342
  /**                                                                                                                  // 2343
   * Handsontable version                                                                                              // 2344
   */                                                                                                                  // 2345
  this.version = '0.12.3'; //inserted by grunt from package.json                                                       // 2346
};                                                                                                                     // 2347
                                                                                                                       // 2348
var DefaultSettings = function () {};                                                                                  // 2349
                                                                                                                       // 2350
DefaultSettings.prototype = {                                                                                          // 2351
  data: void 0,                                                                                                        // 2352
  dataSchema: void 0,                                                                                                  // 2353
  width: void 0,                                                                                                       // 2354
  height: void 0,                                                                                                      // 2355
  startRows: 5,                                                                                                        // 2356
  startCols: 5,                                                                                                        // 2357
  rowHeaders: null,                                                                                                    // 2358
  colHeaders: null,                                                                                                    // 2359
  colWidths: void 0,                                                                                                   // 2360
  columns: void 0,                                                                                                     // 2361
  cells: void 0,                                                                                                       // 2362
  cell: [],                                                                                                            // 2363
  minRows: 0,                                                                                                          // 2364
  minCols: 0,                                                                                                          // 2365
  maxRows: Infinity,                                                                                                   // 2366
  maxCols: Infinity,                                                                                                   // 2367
  minSpareRows: 0,                                                                                                     // 2368
  minSpareCols: 0,                                                                                                     // 2369
  allowInsertRow:true,                                                                                                 // 2370
  allowInsertColumn: true,                                                                                             // 2371
  allowRemoveRow: true,                                                                                                // 2372
  allowRemoveColumn: true,                                                                                             // 2373
  multiSelect: true,                                                                                                   // 2374
  fillHandle: true,                                                                                                    // 2375
  fixedRowsTop: 0,                                                                                                     // 2376
  fixedColumnsLeft: 0,                                                                                                 // 2377
  outsideClickDeselects: true,                                                                                         // 2378
  enterBeginsEditing: true,                                                                                            // 2379
  enterMoves: {row: 1, col: 0},                                                                                        // 2380
  tabMoves: {row: 0, col: 1},                                                                                          // 2381
  autoWrapRow: false,                                                                                                  // 2382
  autoWrapCol: false,                                                                                                  // 2383
  copyRowsLimit: 1000,                                                                                                 // 2384
  copyColsLimit: 1000,                                                                                                 // 2385
  pasteMode: 'overwrite',                                                                                              // 2386
  currentRowClassName: void 0,                                                                                         // 2387
  currentColClassName: void 0,                                                                                         // 2388
  stretchH: 'none',                                                                                                    // 2389
  isEmptyRow: function (r) {                                                                                           // 2390
    var val;                                                                                                           // 2391
    for (var c = 0, clen = this.countCols(); c < clen; c++) {                                                          // 2392
      val = this.getDataAtCell(r, c);                                                                                  // 2393
      if (val !== '' && val !== null && typeof val !== 'undefined') {                                                  // 2394
        return false;                                                                                                  // 2395
      }                                                                                                                // 2396
    }                                                                                                                  // 2397
    return true;                                                                                                       // 2398
  },                                                                                                                   // 2399
  isEmptyCol: function (c) {                                                                                           // 2400
    var val;                                                                                                           // 2401
    for (var r = 0, rlen = this.countRows(); r < rlen; r++) {                                                          // 2402
      val = this.getDataAtCell(r, c);                                                                                  // 2403
      if (val !== '' && val !== null && typeof val !== 'undefined') {                                                  // 2404
        return false;                                                                                                  // 2405
      }                                                                                                                // 2406
    }                                                                                                                  // 2407
    return true;                                                                                                       // 2408
  },                                                                                                                   // 2409
  observeDOMVisibility: true,                                                                                          // 2410
  allowInvalid: true,                                                                                                  // 2411
  invalidCellClassName: 'htInvalid',                                                                                   // 2412
  placeholder: false,                                                                                                  // 2413
  placeholderCellClassName: 'htPlaceholder',                                                                           // 2414
  readOnlyCellClassName: 'htDimmed',                                                                                   // 2415
  commentedCellClassName: 'htCommentCell',                                                                             // 2416
  fragmentSelection: false,                                                                                            // 2417
  readOnly: false,                                                                                                     // 2418
  type: 'text',                                                                                                        // 2419
  copyable: true,                                                                                                      // 2420
  debug: false, //shows debug overlays in Walkontable                                                                  // 2421
  wordWrap: true,                                                                                                      // 2422
  noWordWrapClassName: 'htNoWrap',                                                                                     // 2423
  contextMenu: void 0,                                                                                                 // 2424
  undo: void 0,                                                                                                        // 2425
  columnSorting: void 0,                                                                                               // 2426
  manualColumnMove: void 0,                                                                                            // 2427
  manualColumnResize: void 0,                                                                                          // 2428
  manualRowMove: void 0,                                                                                               // 2429
  manualRowResize: void 0,                                                                                             // 2430
  viewportRowRenderingOffset: 10, //number of rows to be prerendered before and after the viewport                     // 2431
  viewportColumnRenderingOffset: 10, // number of columns to be prerendered before and after the viewport              // 2432
  groups: void 0                                                                                                       // 2433
};                                                                                                                     // 2434
Handsontable.DefaultSettings = DefaultSettings;                                                                        // 2435
                                                                                                                       // 2436
(function (window) {                                                                                                   // 2437
  'use strict';                                                                                                        // 2438
                                                                                                                       // 2439
  function MultiMap() {                                                                                                // 2440
    var map = {                                                                                                        // 2441
      arrayMap: [],                                                                                                    // 2442
      weakMap: new WeakMap()                                                                                           // 2443
    };                                                                                                                 // 2444
                                                                                                                       // 2445
    return {                                                                                                           // 2446
      'get': function (key) {                                                                                          // 2447
        if (canBeAnArrayMapKey(key)) {                                                                                 // 2448
          return map.arrayMap[key];                                                                                    // 2449
        } else if (canBeAWeakMapKey(key)) {                                                                            // 2450
          return map.weakMap.get(key);                                                                                 // 2451
        }                                                                                                              // 2452
      },                                                                                                               // 2453
                                                                                                                       // 2454
      'set': function (key, value) {                                                                                   // 2455
        if (canBeAnArrayMapKey(key)) {                                                                                 // 2456
          map.arrayMap[key] = value;                                                                                   // 2457
        } else if (canBeAWeakMapKey(key)) {                                                                            // 2458
          map.weakMap.set(key, value);                                                                                 // 2459
        } else {                                                                                                       // 2460
          throw new Error('Invalid key type');                                                                         // 2461
        }                                                                                                              // 2462
                                                                                                                       // 2463
                                                                                                                       // 2464
      },                                                                                                               // 2465
                                                                                                                       // 2466
      'delete': function (key) {                                                                                       // 2467
        if (canBeAnArrayMapKey(key)) {                                                                                 // 2468
          delete map.arrayMap[key];                                                                                    // 2469
        } else if (canBeAWeakMapKey(key)) {                                                                            // 2470
          map.weakMap['delete'](key);  //Delete must be called using square bracket notation, because IE8 does not handle using `delete` with dot notation
        }                                                                                                              // 2472
      }                                                                                                                // 2473
    };                                                                                                                 // 2474
                                                                                                                       // 2475
                                                                                                                       // 2476
                                                                                                                       // 2477
    function canBeAnArrayMapKey(obj){                                                                                  // 2478
      return obj !== null && !isNaNSymbol(obj) && (typeof obj == 'string' || typeof obj == 'number');                  // 2479
    }                                                                                                                  // 2480
                                                                                                                       // 2481
    function canBeAWeakMapKey(obj){                                                                                    // 2482
      return obj !== null && (typeof obj == 'object' || typeof obj == 'function');                                     // 2483
    }                                                                                                                  // 2484
                                                                                                                       // 2485
    function isNaNSymbol(obj){                                                                                         // 2486
      return obj !== obj; // NaN === NaN is always false                                                               // 2487
    }                                                                                                                  // 2488
                                                                                                                       // 2489
  }                                                                                                                    // 2490
                                                                                                                       // 2491
  if (!window.MultiMap){                                                                                               // 2492
    window.MultiMap = MultiMap;                                                                                        // 2493
  }                                                                                                                    // 2494
                                                                                                                       // 2495
})(window);                                                                                                            // 2496
/**                                                                                                                    // 2497
 * DOM helper optimized for maximum performance                                                                        // 2498
 * It is recommended for Handsontable plugins and renderers, because it is much faster than jQuery                     // 2499
 * @type {Object}                                                                                                      // 2500
 */                                                                                                                    // 2501
if(!window.Handsontable) {                                                                                             // 2502
  var Handsontable = {}; //required because Walkontable test suite uses this class directly                            // 2503
}                                                                                                                      // 2504
Handsontable.Dom = {};                                                                                                 // 2505
                                                                                                                       // 2506
                                                                                                                       // 2507
Handsontable.Dom.enableImmediatePropagation = function (event) {                                                       // 2508
  if (event != null && event.isImmediatePropagationEnabled == null) {                                                  // 2509
    event.stopImmediatePropagation = function () {                                                                     // 2510
      this.isImmediatePropagationEnabled = false;                                                                      // 2511
      this.cancelBubble = true;                                                                                        // 2512
    };                                                                                                                 // 2513
    event.isImmediatePropagationEnabled = true;                                                                        // 2514
    event.isImmediatePropagationStopped = function () {                                                                // 2515
      return !this.isImmediatePropagationEnabled;                                                                      // 2516
    };                                                                                                                 // 2517
  }                                                                                                                    // 2518
};                                                                                                                     // 2519
                                                                                                                       // 2520
//goes up the DOM tree (including given element) until it finds an element that matches the nodeName                   // 2521
Handsontable.Dom.closest = function (elem, nodeNames, until) {                                                         // 2522
  while (elem != null && elem !== until) {                                                                             // 2523
    if (elem.nodeType === 1 && nodeNames.indexOf(elem.nodeName) > -1) {                                                // 2524
      return elem;                                                                                                     // 2525
    }                                                                                                                  // 2526
    elem = elem.parentNode;                                                                                            // 2527
  }                                                                                                                    // 2528
  return null;                                                                                                         // 2529
};                                                                                                                     // 2530
                                                                                                                       // 2531
/**                                                                                                                    // 2532
 * Goes up the DOM tree and checks if element is child of another element                                              // 2533
 * @param child Child element                                                                                          // 2534
 * @param {Object|string} parent Parent element OR selector of the parent element. If classname provided, function returns true for the first occurance of element with that class.
 * @returns {boolean}                                                                                                  // 2536
 */                                                                                                                    // 2537
Handsontable.Dom.isChildOf = function (child, parent) {                                                                // 2538
  var node = child.parentNode;                                                                                         // 2539
  var queriedParents = [];                                                                                             // 2540
  if(typeof parent === "string") {                                                                                     // 2541
    queriedParents = Array.prototype.slice.call(document.querySelectorAll(parent), 0);                                 // 2542
  } else {                                                                                                             // 2543
    queriedParents.push(parent);                                                                                       // 2544
  }                                                                                                                    // 2545
                                                                                                                       // 2546
  while (node != null) {                                                                                               // 2547
    if (queriedParents.indexOf(node) > - 1) {                                                                          // 2548
      return true;                                                                                                     // 2549
    }                                                                                                                  // 2550
    node = node.parentNode;                                                                                            // 2551
  }                                                                                                                    // 2552
  return false;                                                                                                        // 2553
};                                                                                                                     // 2554
                                                                                                                       // 2555
/**                                                                                                                    // 2556
 * Counts index of element within its parent                                                                           // 2557
 * WARNING: for performance reasons, assumes there are only element nodes (no text nodes). This is true for Walkotnable
 * Otherwise would need to check for nodeType or use previousElementSibling                                            // 2559
 * @see http://jsperf.com/sibling-index/10                                                                             // 2560
 * @param {Element} elem                                                                                               // 2561
 * @return {Number}                                                                                                    // 2562
 */                                                                                                                    // 2563
Handsontable.Dom.index = function (elem) {                                                                             // 2564
  var i = 0;                                                                                                           // 2565
  if (elem.previousSibling) {                                                                                          // 2566
    while (elem = elem.previousSibling) {                                                                              // 2567
      ++i                                                                                                              // 2568
    }                                                                                                                  // 2569
  }                                                                                                                    // 2570
  return i;                                                                                                            // 2571
};                                                                                                                     // 2572
                                                                                                                       // 2573
if (document.documentElement.classList) {                                                                              // 2574
  // HTML5 classList API                                                                                               // 2575
  Handsontable.Dom.hasClass = function (ele, cls) {                                                                    // 2576
    return ele.classList.contains(cls);                                                                                // 2577
  };                                                                                                                   // 2578
                                                                                                                       // 2579
  Handsontable.Dom.addClass = function (ele, cls) {                                                                    // 2580
    if (cls) {                                                                                                         // 2581
      ele.classList.add(cls);                                                                                          // 2582
    }                                                                                                                  // 2583
  };                                                                                                                   // 2584
                                                                                                                       // 2585
  Handsontable.Dom.removeClass = function (ele, cls) {                                                                 // 2586
    ele.classList.remove(cls);                                                                                         // 2587
  };                                                                                                                   // 2588
}                                                                                                                      // 2589
else {                                                                                                                 // 2590
  //http://snipplr.com/view/3561/addclass-removeclass-hasclass/                                                        // 2591
  Handsontable.Dom.hasClass = function (ele, cls) {                                                                    // 2592
    return ele.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));                                               // 2593
  };                                                                                                                   // 2594
                                                                                                                       // 2595
  Handsontable.Dom.addClass = function (ele, cls) {                                                                    // 2596
    if(ele.className == "") ele.className = cls;                                                                       // 2597
    else if (!this.hasClass(ele, cls)) ele.className += " " + cls;                                                     // 2598
  };                                                                                                                   // 2599
                                                                                                                       // 2600
  Handsontable.Dom.removeClass = function (ele, cls) {                                                                 // 2601
    if (this.hasClass(ele, cls)) { //is this really needed?                                                            // 2602
      var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');                                                               // 2603
      ele.className = ele.className.replace(reg, ' ').trim(); //String.prototype.trim is defined in polyfill.js        // 2604
    }                                                                                                                  // 2605
  };                                                                                                                   // 2606
}                                                                                                                      // 2607
                                                                                                                       // 2608
Handsontable.Dom.removeTextNodes = function (elem, parent) {                                                           // 2609
  if (elem.nodeType === 3) {                                                                                           // 2610
    parent.removeChild(elem); //bye text nodes!                                                                        // 2611
  }                                                                                                                    // 2612
  else if (['TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TR'].indexOf(elem.nodeName) > -1) {                                   // 2613
    var childs = elem.childNodes;                                                                                      // 2614
    for (var i = childs.length - 1; i >= 0; i--) {                                                                     // 2615
      this.removeTextNodes(childs[i], elem);                                                                           // 2616
    }                                                                                                                  // 2617
  }                                                                                                                    // 2618
};                                                                                                                     // 2619
                                                                                                                       // 2620
/**                                                                                                                    // 2621
 * Remove childs function                                                                                              // 2622
 * WARNING - this doesn't unload events and data attached by jQuery                                                    // 2623
 * http://jsperf.com/jquery-html-vs-empty-vs-innerhtml/9                                                               // 2624
 * http://jsperf.com/jquery-html-vs-empty-vs-innerhtml/11 - no siginificant improvement with Chrome remove() method    // 2625
 * @param element                                                                                                      // 2626
 * @returns {void}                                                                                                     // 2627
 */                                                                                                                    // 2628
//                                                                                                                     // 2629
Handsontable.Dom.empty = function (element) {                                                                          // 2630
  var child;                                                                                                           // 2631
  while (child = element.lastChild) {                                                                                  // 2632
    element.removeChild(child);                                                                                        // 2633
  }                                                                                                                    // 2634
};                                                                                                                     // 2635
                                                                                                                       // 2636
Handsontable.Dom.HTML_CHARACTERS = /(<(.*)>|&(.*);)/;                                                                  // 2637
                                                                                                                       // 2638
/**                                                                                                                    // 2639
 * Insert content into element trying avoid innerHTML method.                                                          // 2640
 * @return {void}                                                                                                      // 2641
 */                                                                                                                    // 2642
Handsontable.Dom.fastInnerHTML = function (element, content) {                                                         // 2643
  if (this.HTML_CHARACTERS.test(content)) {                                                                            // 2644
    element.innerHTML = content;                                                                                       // 2645
  }                                                                                                                    // 2646
  else {                                                                                                               // 2647
    this.fastInnerText(element, content);                                                                              // 2648
  }                                                                                                                    // 2649
};                                                                                                                     // 2650
                                                                                                                       // 2651
/**                                                                                                                    // 2652
 * Insert text content into element                                                                                    // 2653
 * @return {void}                                                                                                      // 2654
 */                                                                                                                    // 2655
if (document.createTextNode('test').textContent) { //STANDARDS                                                         // 2656
  Handsontable.Dom.fastInnerText = function (element, content) {                                                       // 2657
    var child = element.firstChild;                                                                                    // 2658
    if (child && child.nodeType === 3 && child.nextSibling === null) {                                                 // 2659
      //fast lane - replace existing text node                                                                         // 2660
      //http://jsperf.com/replace-text-vs-reuse                                                                        // 2661
      child.textContent = content;                                                                                     // 2662
    }                                                                                                                  // 2663
    else {                                                                                                             // 2664
      //slow lane - empty element and insert a text node                                                               // 2665
      this.empty(element);                                                                                             // 2666
      element.appendChild(document.createTextNode(content));                                                           // 2667
    }                                                                                                                  // 2668
  };                                                                                                                   // 2669
}                                                                                                                      // 2670
else { //IE8                                                                                                           // 2671
  Handsontable.Dom.fastInnerText = function (element, content) {                                                       // 2672
    var child = element.firstChild;                                                                                    // 2673
    if (child && child.nodeType === 3 && child.nextSibling === null) {                                                 // 2674
      //fast lane - replace existing text node                                                                         // 2675
      //http://jsperf.com/replace-text-vs-reuse                                                                        // 2676
      child.data = content;                                                                                            // 2677
    }                                                                                                                  // 2678
    else {                                                                                                             // 2679
      //slow lane - empty element and insert a text node                                                               // 2680
      this.empty(element);                                                                                             // 2681
      element.appendChild(document.createTextNode(content));                                                           // 2682
    }                                                                                                                  // 2683
  };                                                                                                                   // 2684
}                                                                                                                      // 2685
                                                                                                                       // 2686
/**                                                                                                                    // 2687
 * Returns true if element is attached to the DOM and visible, false otherwise                                         // 2688
 * @param elem                                                                                                         // 2689
 * @returns {boolean}                                                                                                  // 2690
 */                                                                                                                    // 2691
Handsontable.Dom.isVisible = function (elem) {                                                                         // 2692
  var next = elem;                                                                                                     // 2693
  while (next !== document.documentElement) { //until <html> reached                                                   // 2694
    if (next === null) { //parent detached from DOM                                                                    // 2695
      return false;                                                                                                    // 2696
    }                                                                                                                  // 2697
    else if (next.nodeType === 11) {  //nodeType == 1 -> DOCUMENT_FRAGMENT_NODE                                        // 2698
      if (next.host) { //this is Web Components Shadow DOM                                                             // 2699
        //see: http://w3c.github.io/webcomponents/spec/shadow/#encapsulation                                           // 2700
        //according to spec, should be if (next.ownerDocument !== window.document), but that doesn't work yet          // 2701
        if (next.host.impl) { //Chrome 33.0.1723.0 canary (2013-11-29) Web Platform features disabled                  // 2702
          return Handsontable.Dom.isVisible(next.host.impl);                                                           // 2703
        }                                                                                                              // 2704
        else if (next.host) { //Chrome 33.0.1723.0 canary (2013-11-29) Web Platform features enabled                   // 2705
          return Handsontable.Dom.isVisible(next.host);                                                                // 2706
        }                                                                                                              // 2707
        else {                                                                                                         // 2708
          throw new Error("Lost in Web Components world");                                                             // 2709
        }                                                                                                              // 2710
      }                                                                                                                // 2711
      else {                                                                                                           // 2712
        return false; //this is a node detached from document in IE8                                                   // 2713
      }                                                                                                                // 2714
    }                                                                                                                  // 2715
    else if (next.style.display === 'none') {                                                                          // 2716
      return false;                                                                                                    // 2717
    }                                                                                                                  // 2718
    next = next.parentNode;                                                                                            // 2719
  }                                                                                                                    // 2720
  return true;                                                                                                         // 2721
};                                                                                                                     // 2722
                                                                                                                       // 2723
/**                                                                                                                    // 2724
 * Returns elements top and left offset relative to the document. Function is not compatible with jQuery offset.       // 2725
 *                                                                                                                     // 2726
 * @param {HTMLElement} elem                                                                                           // 2727
 * @return {Object} Returns object with `top` and `left` props                                                         // 2728
 */                                                                                                                    // 2729
Handsontable.Dom.offset = function (elem) {                                                                            // 2730
  var offsetLeft,                                                                                                      // 2731
    offsetTop,                                                                                                         // 2732
    lastElem,                                                                                                          // 2733
    docElem,                                                                                                           // 2734
    box;                                                                                                               // 2735
                                                                                                                       // 2736
  docElem = document.documentElement;                                                                                  // 2737
                                                                                                                       // 2738
  if (this.hasCaptionProblem() && elem.firstChild && elem.firstChild.nodeName === 'CAPTION') {                         // 2739
    // fixes problem with Firefox ignoring <caption> in TABLE offset (see also Handsontable.Dom.outerHeight)           // 2740
    // http://jsperf.com/offset-vs-getboundingclientrect/8                                                             // 2741
    box = elem.getBoundingClientRect();                                                                                // 2742
                                                                                                                       // 2743
    return {                                                                                                           // 2744
      top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),                             // 2745
      left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)                          // 2746
    };                                                                                                                 // 2747
  }                                                                                                                    // 2748
  offsetLeft = elem.offsetLeft;                                                                                        // 2749
  offsetTop = elem.offsetTop;                                                                                          // 2750
  lastElem = elem;                                                                                                     // 2751
                                                                                                                       // 2752
  while (elem = elem.offsetParent) {                                                                                   // 2753
    // from my observation, document.body always has scrollLeft/scrollTop == 0                                         // 2754
    if (elem === document.body) {                                                                                      // 2755
      break;                                                                                                           // 2756
    }                                                                                                                  // 2757
    offsetLeft += elem.offsetLeft;                                                                                     // 2758
    offsetTop += elem.offsetTop;                                                                                       // 2759
    lastElem = elem;                                                                                                   // 2760
  }                                                                                                                    // 2761
                                                                                                                       // 2762
  //slow - http://jsperf.com/offset-vs-getboundingclientrect/6                                                         // 2763
  if (lastElem && lastElem.style.position === 'fixed') {                                                               // 2764
    //if(lastElem !== document.body) { //faster but does gives false positive in Firefox                               // 2765
    offsetLeft += window.pageXOffset || docElem.scrollLeft;                                                            // 2766
    offsetTop += window.pageYOffset || docElem.scrollTop;                                                              // 2767
  }                                                                                                                    // 2768
                                                                                                                       // 2769
  return {                                                                                                             // 2770
    left: offsetLeft,                                                                                                  // 2771
    top: offsetTop                                                                                                     // 2772
  };                                                                                                                   // 2773
};                                                                                                                     // 2774
                                                                                                                       // 2775
Handsontable.Dom.getWindowScrollTop = function () {                                                                    // 2776
  var res = window.scrollY;                                                                                            // 2777
  if (res == void 0) { //IE8-11                                                                                        // 2778
    res = document.documentElement.scrollTop;                                                                          // 2779
  }                                                                                                                    // 2780
  return res;                                                                                                          // 2781
};                                                                                                                     // 2782
                                                                                                                       // 2783
Handsontable.Dom.getWindowScrollLeft = function () {                                                                   // 2784
  var res = window.scrollX;                                                                                            // 2785
  if (res == void 0) { //IE8-11                                                                                        // 2786
    res = document.documentElement.scrollLeft;                                                                         // 2787
  }                                                                                                                    // 2788
  return res;                                                                                                          // 2789
};                                                                                                                     // 2790
                                                                                                                       // 2791
Handsontable.Dom.getScrollTop = function (elem) {                                                                      // 2792
  if (elem === window) {                                                                                               // 2793
    return Handsontable.Dom.getWindowScrollTop(elem);                                                                  // 2794
  }                                                                                                                    // 2795
  else {                                                                                                               // 2796
    return elem.scrollTop;                                                                                             // 2797
  }                                                                                                                    // 2798
};                                                                                                                     // 2799
                                                                                                                       // 2800
Handsontable.Dom.getScrollLeft = function (elem) {                                                                     // 2801
  if (elem === window) {                                                                                               // 2802
    return Handsontable.Dom.getWindowScrollLeft(elem);                                                                 // 2803
  }                                                                                                                    // 2804
  else {                                                                                                               // 2805
    return elem.scrollLeft;                                                                                            // 2806
  }                                                                                                                    // 2807
};                                                                                                                     // 2808
                                                                                                                       // 2809
Handsontable.Dom.getComputedStyle = function (elem) {                                                                  // 2810
  return elem.currentStyle || document.defaultView.getComputedStyle(elem);                                             // 2811
};                                                                                                                     // 2812
                                                                                                                       // 2813
Handsontable.Dom.outerWidth = function (elem) {                                                                        // 2814
  return elem.offsetWidth;                                                                                             // 2815
};                                                                                                                     // 2816
                                                                                                                       // 2817
Handsontable.Dom.outerHeight = function (elem) {                                                                       // 2818
  if (this.hasCaptionProblem() && elem.firstChild && elem.firstChild.nodeName === 'CAPTION') {                         // 2819
    //fixes problem with Firefox ignoring <caption> in TABLE.offsetHeight                                              // 2820
    //jQuery (1.10.1) still has this unsolved                                                                          // 2821
    //may be better to just switch to getBoundingClientRect                                                            // 2822
    //http://bililite.com/blog/2009/03/27/finding-the-size-of-a-table/                                                 // 2823
    //http://lists.w3.org/Archives/Public/www-style/2009Oct/0089.html                                                  // 2824
    //http://bugs.jquery.com/ticket/2196                                                                               // 2825
    //http://lists.w3.org/Archives/Public/www-style/2009Oct/0140.html#start140                                         // 2826
    return elem.offsetHeight + elem.firstChild.offsetHeight;                                                           // 2827
  }                                                                                                                    // 2828
  else {                                                                                                               // 2829
    return elem.offsetHeight;                                                                                          // 2830
  }                                                                                                                    // 2831
};                                                                                                                     // 2832
                                                                                                                       // 2833
Handsontable.Dom.innerHeight = function (elem) {                                                                       // 2834
  return elem.clientHeight || elem.innerHeight;                                                                        // 2835
};                                                                                                                     // 2836
                                                                                                                       // 2837
Handsontable.Dom.innerWidth = function (elem) {                                                                        // 2838
  return elem.clientWidth || elem.innerWidth;                                                                          // 2839
};                                                                                                                     // 2840
                                                                                                                       // 2841
Handsontable.Dom.addEvent = function(element, event, callback) {                                                       // 2842
  if (window.addEventListener) {                                                                                       // 2843
    element.addEventListener(event, callback, false)                                                                   // 2844
  } else {                                                                                                             // 2845
    element.attachEvent('on' + event, callback);                                                                       // 2846
  }                                                                                                                    // 2847
};                                                                                                                     // 2848
                                                                                                                       // 2849
Handsontable.Dom.removeEvent = function(element, event, callback) {                                                    // 2850
  if (window.removeEventListener) {                                                                                    // 2851
    element.removeEventListener(event, callback, false);                                                               // 2852
  } else {                                                                                                             // 2853
    element.detachEvent('on' + event, callback);                                                                       // 2854
  }                                                                                                                    // 2855
};                                                                                                                     // 2856
                                                                                                                       // 2857
                                                                                                                       // 2858
(function () {                                                                                                         // 2859
  var hasCaptionProblem;                                                                                               // 2860
                                                                                                                       // 2861
  function detectCaptionProblem() {                                                                                    // 2862
    var TABLE = document.createElement('TABLE');                                                                       // 2863
    TABLE.style.borderSpacing = 0;                                                                                     // 2864
    TABLE.style.borderWidth = 0;                                                                                       // 2865
    TABLE.style.padding = 0;                                                                                           // 2866
    var TBODY = document.createElement('TBODY');                                                                       // 2867
    TABLE.appendChild(TBODY);                                                                                          // 2868
    TBODY.appendChild(document.createElement('TR'));                                                                   // 2869
    TBODY.firstChild.appendChild(document.createElement('TD'));                                                        // 2870
    TBODY.firstChild.firstChild.innerHTML = '<tr><td>t<br>t</td></tr>';                                                // 2871
                                                                                                                       // 2872
    var CAPTION = document.createElement('CAPTION');                                                                   // 2873
    CAPTION.innerHTML = 'c<br>c<br>c<br>c';                                                                            // 2874
    CAPTION.style.padding = 0;                                                                                         // 2875
    CAPTION.style.margin = 0;                                                                                          // 2876
    TABLE.insertBefore(CAPTION, TBODY);                                                                                // 2877
                                                                                                                       // 2878
    document.body.appendChild(TABLE);                                                                                  // 2879
    hasCaptionProblem = (TABLE.offsetHeight < 2 * TABLE.lastChild.offsetHeight); //boolean                             // 2880
    document.body.removeChild(TABLE);                                                                                  // 2881
  }                                                                                                                    // 2882
                                                                                                                       // 2883
  Handsontable.Dom.hasCaptionProblem = function () {                                                                   // 2884
    if (hasCaptionProblem === void 0) {                                                                                // 2885
      detectCaptionProblem();                                                                                          // 2886
    }                                                                                                                  // 2887
    return hasCaptionProblem;                                                                                          // 2888
  };                                                                                                                   // 2889
                                                                                                                       // 2890
  /**                                                                                                                  // 2891
   * Returns caret position in text input                                                                              // 2892
   * @author http://stackoverflow.com/questions/263743/how-to-get-caret-position-in-textarea                           // 2893
   * @return {Number}                                                                                                  // 2894
   */                                                                                                                  // 2895
  Handsontable.Dom.getCaretPosition = function (el) {                                                                  // 2896
    if (el.selectionStart) {                                                                                           // 2897
      return el.selectionStart;                                                                                        // 2898
    }                                                                                                                  // 2899
    else if (document.selection) { //IE8                                                                               // 2900
      el.focus();                                                                                                      // 2901
      var r = document.selection.createRange();                                                                        // 2902
      if (r == null) {                                                                                                 // 2903
        return 0;                                                                                                      // 2904
      }                                                                                                                // 2905
      var re = el.createTextRange(),                                                                                   // 2906
        rc = re.duplicate();                                                                                           // 2907
      re.moveToBookmark(r.getBookmark());                                                                              // 2908
      rc.setEndPoint('EndToStart', re);                                                                                // 2909
      return rc.text.length;                                                                                           // 2910
    }                                                                                                                  // 2911
    return 0;                                                                                                          // 2912
  };                                                                                                                   // 2913
                                                                                                                       // 2914
  /**                                                                                                                  // 2915
   * Returns end of the selection in text input                                                                        // 2916
   * @return {Number}                                                                                                  // 2917
   */                                                                                                                  // 2918
  Handsontable.Dom.getSelectionEndPosition = function (el) {                                                           // 2919
    if(el.selectionEnd) {                                                                                              // 2920
      return el.selectionEnd;                                                                                          // 2921
    } else if(document.selection) { //IE8                                                                              // 2922
      var r = document.selection.createRange();                                                                        // 2923
      if(r == null) {                                                                                                  // 2924
        return 0;                                                                                                      // 2925
      }                                                                                                                // 2926
      var re = el.createTextRange();                                                                                   // 2927
                                                                                                                       // 2928
      return re.text.indexOf(r.text) + r.text.length;                                                                  // 2929
    }                                                                                                                  // 2930
  };                                                                                                                   // 2931
                                                                                                                       // 2932
  /**                                                                                                                  // 2933
   * Sets caret position in text input                                                                                 // 2934
   * @author http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/             // 2935
   * @param {Element} el                                                                                               // 2936
   * @param {Number} pos                                                                                               // 2937
   * @param {Number} endPos                                                                                            // 2938
   */                                                                                                                  // 2939
  Handsontable.Dom.setCaretPosition = function (el, pos, endPos) {                                                     // 2940
    if (endPos === void 0) {                                                                                           // 2941
      endPos = pos;                                                                                                    // 2942
    }                                                                                                                  // 2943
    if (el.setSelectionRange) {                                                                                        // 2944
      el.focus();                                                                                                      // 2945
      el.setSelectionRange(pos, endPos);                                                                               // 2946
    }                                                                                                                  // 2947
    else if (el.createTextRange) { //IE8                                                                               // 2948
      var range = el.createTextRange();                                                                                // 2949
      range.collapse(true);                                                                                            // 2950
      range.moveEnd('character', endPos);                                                                              // 2951
      range.moveStart('character', pos);                                                                               // 2952
      range.select();                                                                                                  // 2953
    }                                                                                                                  // 2954
  };                                                                                                                   // 2955
                                                                                                                       // 2956
  var cachedScrollbarWidth;                                                                                            // 2957
  //http://stackoverflow.com/questions/986937/how-can-i-get-the-browsers-scrollbar-sizes                               // 2958
  function walkontableCalculateScrollbarWidth() {                                                                      // 2959
    var inner = document.createElement('p');                                                                           // 2960
    inner.style.width = "100%";                                                                                        // 2961
    inner.style.height = "200px";                                                                                      // 2962
                                                                                                                       // 2963
    var outer = document.createElement('div');                                                                         // 2964
    outer.style.position = "absolute";                                                                                 // 2965
    outer.style.top = "0px";                                                                                           // 2966
    outer.style.left = "0px";                                                                                          // 2967
    outer.style.visibility = "hidden";                                                                                 // 2968
    outer.style.width = "200px";                                                                                       // 2969
    outer.style.height = "150px";                                                                                      // 2970
    outer.style.overflow = "hidden";                                                                                   // 2971
    outer.appendChild(inner);                                                                                          // 2972
                                                                                                                       // 2973
    (document.body || document.documentElement).appendChild(outer);                                                    // 2974
    var w1 = inner.offsetWidth;                                                                                        // 2975
    outer.style.overflow = 'scroll';                                                                                   // 2976
    var w2 = inner.offsetWidth;                                                                                        // 2977
    if (w1 == w2) w2 = outer.clientWidth;                                                                              // 2978
                                                                                                                       // 2979
    (document.body || document.documentElement).removeChild(outer);                                                    // 2980
                                                                                                                       // 2981
    return (w1 - w2);                                                                                                  // 2982
  }                                                                                                                    // 2983
                                                                                                                       // 2984
  /**                                                                                                                  // 2985
   * Returns the computed width of the native browser scroll bar                                                       // 2986
   * @return {Number} width                                                                                            // 2987
   */                                                                                                                  // 2988
  Handsontable.Dom.getScrollbarWidth = function () {                                                                   // 2989
    if (cachedScrollbarWidth === void 0) {                                                                             // 2990
      cachedScrollbarWidth = walkontableCalculateScrollbarWidth();                                                     // 2991
    }                                                                                                                  // 2992
    return cachedScrollbarWidth;                                                                                       // 2993
  };                                                                                                                   // 2994
                                                                                                                       // 2995
  var isIE8 = !(document.createTextNode('test').textContent);                                                          // 2996
  Handsontable.Dom.isIE8 = function () {                                                                               // 2997
    return isIE8;                                                                                                      // 2998
  };                                                                                                                   // 2999
                                                                                                                       // 3000
  var isIE9 = !!(document.documentMode);                                                                               // 3001
  Handsontable.Dom.isIE9 = function () {                                                                               // 3002
    return isIE9;                                                                                                      // 3003
  };                                                                                                                   // 3004
                                                                                                                       // 3005
  var isSafari = (/Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor));                      // 3006
  Handsontable.Dom.isSafari = function () {                                                                            // 3007
    return isSafari;                                                                                                   // 3008
  };                                                                                                                   // 3009
                                                                                                                       // 3010
  /**                                                                                                                  // 3011
   * Sets overlay position depending on it's type and used browser                                                     // 3012
   */                                                                                                                  // 3013
  Handsontable.Dom.setOverlayPosition = function (overlayElem, left, top) {                                            // 3014
    if (isIE8 || isIE9) {                                                                                              // 3015
      overlayElem.style.top = top;                                                                                     // 3016
      overlayElem.style.left = left;                                                                                   // 3017
    } else if (isSafari) {                                                                                             // 3018
      overlayElem.style['-webkit-transform'] = 'translate3d(' + left + ',' + top + ',0)';                              // 3019
    } else {                                                                                                           // 3020
      overlayElem.style['transform'] = 'translate3d(' + left + ',' + top + ',0)';                                      // 3021
    }                                                                                                                  // 3022
  };                                                                                                                   // 3023
                                                                                                                       // 3024
  Handsontable.Dom.getCssTransform = function (elem) {                                                                 // 3025
    var transform;                                                                                                     // 3026
                                                                                                                       // 3027
    if(elem.style['transform'] && (transform = elem.style['transform']) != "") {                                       // 3028
      return ['transform', transform];                                                                                 // 3029
    } else if (elem.style['-webkit-transform'] && (transform = elem.style['-webkit-transform']) != "") {               // 3030
      return ['-webkit-transform', transform];                                                                         // 3031
    } else {                                                                                                           // 3032
      return -1;                                                                                                       // 3033
    }                                                                                                                  // 3034
  };                                                                                                                   // 3035
                                                                                                                       // 3036
  Handsontable.Dom.resetCssTransform = function (elem) {                                                               // 3037
    if(elem['transform'] && elem['transform'] != "") {                                                                 // 3038
      elem['transform'] = "";                                                                                          // 3039
    } else if(elem['-webkit-transform'] && elem['-webkit-transform'] != "") {                                          // 3040
      elem['-webkit-transform'] = "";                                                                                  // 3041
    }                                                                                                                  // 3042
  };                                                                                                                   // 3043
                                                                                                                       // 3044
})();                                                                                                                  // 3045
                                                                                                                       // 3046
                                                                                                                       // 3047
if(!window.Handsontable){                                                                                              // 3048
  var Handsontable = {};                                                                                               // 3049
}                                                                                                                      // 3050
                                                                                                                       // 3051
Handsontable.countEventManagerListeners = 0; //used to debug memory leaks                                              // 3052
                                                                                                                       // 3053
Handsontable.eventManager = function (instance) {                                                                      // 3054
  if (!instance) {                                                                                                     // 3055
    throw new Error ('instance not defined');                                                                          // 3056
  }                                                                                                                    // 3057
                                                                                                                       // 3058
  if (!instance.eventListeners) {                                                                                      // 3059
    instance.eventListeners = [];                                                                                      // 3060
  }                                                                                                                    // 3061
                                                                                                                       // 3062
  var addEvent = function (element, event, callback) {                                                                 // 3063
                                                                                                                       // 3064
      var callbackProxy = function (event) {                                                                           // 3065
        if(event.target == void 0 && event.srcElement != void 0) {                                                     // 3066
          if(event.definePoperty) {                                                                                    // 3067
            event.definePoperty('target', {                                                                            // 3068
              value: event.srcElement                                                                                  // 3069
            });                                                                                                        // 3070
          } else {                                                                                                     // 3071
            event.target = event.srcElement;                                                                           // 3072
          }                                                                                                            // 3073
        }                                                                                                              // 3074
                                                                                                                       // 3075
        if(event.preventDefault == void 0) {                                                                           // 3076
          if(event.definePoperty) {                                                                                    // 3077
            event.definePoperty('preventDefault', {                                                                    // 3078
              value: function() {                                                                                      // 3079
                this.returnValue = false;                                                                              // 3080
              }                                                                                                        // 3081
            });                                                                                                        // 3082
          } else {                                                                                                     // 3083
            event.preventDefault = function () {                                                                       // 3084
              this.returnValue = false;                                                                                // 3085
            }                                                                                                          // 3086
          }                                                                                                            // 3087
        }                                                                                                              // 3088
                                                                                                                       // 3089
        callback.call(this, event);                                                                                    // 3090
      };                                                                                                               // 3091
                                                                                                                       // 3092
      instance.eventListeners.push({                                                                                   // 3093
        element: element,                                                                                              // 3094
        event: event,                                                                                                  // 3095
        callback: callback,                                                                                            // 3096
        callbackProxy: callbackProxy                                                                                   // 3097
      });                                                                                                              // 3098
                                                                                                                       // 3099
      if (window.addEventListener) {                                                                                   // 3100
        element.addEventListener(event, callbackProxy, false)                                                          // 3101
      } else {                                                                                                         // 3102
        element.attachEvent('on' + event, callbackProxy);                                                              // 3103
      }                                                                                                                // 3104
                                                                                                                       // 3105
      Handsontable.countEventManagerListeners++;                                                                       // 3106
    },                                                                                                                 // 3107
    removeEvent = function (element, event, callback){                                                                 // 3108
      var len = instance.eventListeners.length;                                                                        // 3109
      while (len--) {                                                                                                  // 3110
        var tmpEv = instance.eventListeners[len];                                                                      // 3111
                                                                                                                       // 3112
        if (tmpEv.event == event && tmpEv.element == element) {                                                        // 3113
          if (callback && callback != tmpEv.callback) {                                                                // 3114
            continue;                                                                                                  // 3115
          }                                                                                                            // 3116
                                                                                                                       // 3117
          instance.eventListeners.splice(len, 1);                                                                      // 3118
          if (tmpEv.element.removeEventListener) {                                                                     // 3119
            tmpEv.element.removeEventListener(tmpEv.event, tmpEv.callbackProxy, false);                                // 3120
          } else {                                                                                                     // 3121
            tmpEv.element.detachEvent('on' + tmpEv.event, tmpEv.callbackProxy);                                        // 3122
          }                                                                                                            // 3123
                                                                                                                       // 3124
          Handsontable.countEventManagerListeners--;                                                                   // 3125
        }                                                                                                              // 3126
      }                                                                                                                // 3127
    },                                                                                                                 // 3128
    clearEvents = function () {                                                                                        // 3129
      var len = instance.eventListeners.length;                                                                        // 3130
      while(len--) {                                                                                                   // 3131
       var event = instance.eventListeners[len];                                                                       // 3132
       removeEvent(event.element, event.event, event.callback);                                                        // 3133
      }                                                                                                                // 3134
    },                                                                                                                 // 3135
    fireEvent = function (element, type) {                                                                             // 3136
      var options = {                                                                                                  // 3137
        bubbles: true,                                                                                                 // 3138
        cancelable: (type !== "mousemove"),                                                                            // 3139
        view: window,                                                                                                  // 3140
        detail: 0,                                                                                                     // 3141
        screenX: 0,                                                                                                    // 3142
        screenY: 0,                                                                                                    // 3143
        clientX: 1,                                                                                                    // 3144
        clientY: 1,                                                                                                    // 3145
        ctrlKey: false,                                                                                                // 3146
        altKey: false,                                                                                                 // 3147
        shiftKey: false,                                                                                               // 3148
        metaKey: false,                                                                                                // 3149
        button: 0,                                                                                                     // 3150
        relatedTarget: undefined                                                                                       // 3151
      };                                                                                                               // 3152
                                                                                                                       // 3153
      var event;                                                                                                       // 3154
      if ( document.createEvent ) {                                                                                    // 3155
        event = document.createEvent("MouseEvents");                                                                   // 3156
        event.initMouseEvent(type, options.bubbles, options.cancelable,                                                // 3157
          options.view, options.detail,                                                                                // 3158
          options.screenX, options.screenY, options.clientX, options.clientY,                                          // 3159
          options.ctrlKey, options.altKey, options.shiftKey, options.metaKey,                                          // 3160
          options.button, options.relatedTarget || document.body.parentNode);                                          // 3161
                                                                                                                       // 3162
      } else {                                                                                                         // 3163
        event = document.createEventObject();                                                                          // 3164
      }                                                                                                                // 3165
                                                                                                                       // 3166
                                                                                                                       // 3167
                                                                                                                       // 3168
      if (element.dispatchEvent) {                                                                                     // 3169
        element.dispatchEvent(event);                                                                                  // 3170
      } else {                                                                                                         // 3171
        element.fireEvent('on' + type, event);                                                                         // 3172
      }                                                                                                                // 3173
    };                                                                                                                 // 3174
                                                                                                                       // 3175
  return {                                                                                                             // 3176
    addEventListener: addEvent,                                                                                        // 3177
    removeEventListener: removeEvent,                                                                                  // 3178
    clear: clearEvents,                                                                                                // 3179
    fireEvent: fireEvent                                                                                               // 3180
  }                                                                                                                    // 3181
};                                                                                                                     // 3182
                                                                                                                       // 3183
/**                                                                                                                    // 3184
 * Handsontable TableView constructor                                                                                  // 3185
 * @param {Object} instance                                                                                            // 3186
 */                                                                                                                    // 3187
Handsontable.TableView = function (instance) {                                                                         // 3188
  var that = this                                                                                                      // 3189
                                                                                                                       // 3190
                                                                                                                       // 3191
  this.eventManager = Handsontable.eventManager(instance);                                                             // 3192
  this.instance = instance;                                                                                            // 3193
  this.settings = instance.getSettings();                                                                              // 3194
                                                                                                                       // 3195
                                                                                                                       // 3196
  var originalStyle = instance.rootElement.getAttribute('style');                                                      // 3197
  if(originalStyle) {                                                                                                  // 3198
    instance.rootElement.setAttribute('data-originalstyle', originalStyle); //needed to retrieve original style in jsFiddle link generator in HT examples. may be removed in future versions
  }                                                                                                                    // 3200
                                                                                                                       // 3201
  Handsontable.Dom.addClass(instance.rootElement,'handsontable');                                                      // 3202
//  instance.rootElement.addClass('handsontable');                                                                     // 3203
                                                                                                                       // 3204
  var table = document.createElement('TABLE');                                                                         // 3205
  table.className = 'htCore';                                                                                          // 3206
  this.THEAD = document.createElement('THEAD');                                                                        // 3207
  table.appendChild(this.THEAD);                                                                                       // 3208
  this.TBODY = document.createElement('TBODY');                                                                        // 3209
  table.appendChild(this.TBODY);                                                                                       // 3210
                                                                                                                       // 3211
  instance.table = table;                                                                                              // 3212
                                                                                                                       // 3213
                                                                                                                       // 3214
  instance.container.insertBefore(table, instance.container.firstChild);                                               // 3215
                                                                                                                       // 3216
  this.eventManager.addEventListener(instance.rootElement,'mousedown', function (event) {                              // 3217
    if (!that.isTextSelectionAllowed(event.target)) {                                                                  // 3218
      clearTextSelection();                                                                                            // 3219
      event.preventDefault();                                                                                          // 3220
      window.focus(); //make sure that window that contains HOT is active. Important when HOT is in iframe.            // 3221
    }                                                                                                                  // 3222
  });                                                                                                                  // 3223
                                                                                                                       // 3224
  this.eventManager.addEventListener(document.documentElement, 'keyup',function (event) {                              // 3225
    if (instance.selection.isInProgress() && !event.shiftKey) {                                                        // 3226
      instance.selection.finish();                                                                                     // 3227
    }                                                                                                                  // 3228
  });                                                                                                                  // 3229
                                                                                                                       // 3230
  var isMouseDown;                                                                                                     // 3231
  this.isMouseDown = function () {                                                                                     // 3232
    return isMouseDown;                                                                                                // 3233
  };                                                                                                                   // 3234
                                                                                                                       // 3235
  this.eventManager.addEventListener(document.documentElement, 'mouseup', function (event) {                           // 3236
    if (instance.selection.isInProgress() && event.which === 1) { //is left mouse button                               // 3237
      instance.selection.finish();                                                                                     // 3238
    }                                                                                                                  // 3239
                                                                                                                       // 3240
    isMouseDown = false;                                                                                               // 3241
                                                                                                                       // 3242
    if (Handsontable.helper.isOutsideInput(document.activeElement)) {                                                  // 3243
      instance.unlisten();                                                                                             // 3244
    }                                                                                                                  // 3245
  });                                                                                                                  // 3246
                                                                                                                       // 3247
  this.eventManager.addEventListener(document.documentElement, 'mousedown',function (event) {                          // 3248
    var next = event.target;                                                                                           // 3249
                                                                                                                       // 3250
    if (isMouseDown) {                                                                                                 // 3251
      return; //it must have been started in a cell                                                                    // 3252
    }                                                                                                                  // 3253
                                                                                                                       // 3254
    if (next !== that.wt.wtTable.spreader) { //immediate click on "spreader" means click on the right side of vertical scrollbar
      while (next !== document.documentElement) {                                                                      // 3256
        if (next === null) {                                                                                           // 3257
          return; //click on something that was a row but now is detached (possibly because your click triggered a rerender)
        }                                                                                                              // 3259
       if (next === instance.rootElement) {                                                                            // 3260
          return; //click inside container                                                                             // 3261
        }                                                                                                              // 3262
        next = next.parentNode;                                                                                        // 3263
      }                                                                                                                // 3264
    }                                                                                                                  // 3265
                                                                                                                       // 3266
    //function did not return until here, we have an outside click!                                                    // 3267
                                                                                                                       // 3268
    if (that.settings.outsideClickDeselects) {                                                                         // 3269
      instance.deselectCell();                                                                                         // 3270
    }                                                                                                                  // 3271
    else {                                                                                                             // 3272
      instance.destroyEditor();                                                                                        // 3273
    }                                                                                                                  // 3274
  });                                                                                                                  // 3275
                                                                                                                       // 3276
                                                                                                                       // 3277
                                                                                                                       // 3278
  this.eventManager.addEventListener(table, 'selectstart', function (event) {                                          // 3279
    if (that.settings.fragmentSelection) {                                                                             // 3280
      return;                                                                                                          // 3281
    }                                                                                                                  // 3282
                                                                                                                       // 3283
    //https://github.com/handsontable/handsontable/issues/160                                                          // 3284
    //selectstart is IE only event. Prevent text from being selected when performing drag down in IE8                  // 3285
    event.preventDefault();                                                                                            // 3286
  });                                                                                                                  // 3287
                                                                                                                       // 3288
  var clearTextSelection = function () {                                                                               // 3289
    //http://stackoverflow.com/questions/3169786/clear-text-selection-with-javascript                                  // 3290
    if (window.getSelection) {                                                                                         // 3291
      if (window.getSelection().empty) {  // Chrome                                                                    // 3292
        window.getSelection().empty();                                                                                 // 3293
      } else if (window.getSelection().removeAllRanges) {  // Firefox                                                  // 3294
        window.getSelection().removeAllRanges();                                                                       // 3295
      }                                                                                                                // 3296
    } else if (document.selection) {  // IE?                                                                           // 3297
      document.selection.empty();                                                                                      // 3298
    }                                                                                                                  // 3299
  };                                                                                                                   // 3300
                                                                                                                       // 3301
  var selections = [                                                                                                   // 3302
    new WalkontableSelection({                                                                                         // 3303
      className: 'current',                                                                                            // 3304
      border: {                                                                                                        // 3305
        width: 2,                                                                                                      // 3306
        color: '#5292F7',                                                                                              // 3307
        //style: 'solid', //not used                                                                                   // 3308
        cornerVisible: function () {                                                                                   // 3309
          return that.settings.fillHandle && !that.isCellEdited() && !instance.selection.isMultiple();                 // 3310
        },                                                                                                             // 3311
        multipleSelectionHandlesVisible: function () {                                                                 // 3312
          return !that.isCellEdited() && !instance.selection.isMultiple();                                             // 3313
        }                                                                                                              // 3314
      }                                                                                                                // 3315
    }),                                                                                                                // 3316
    new WalkontableSelection({                                                                                         // 3317
      className: 'area',                                                                                               // 3318
      border: {                                                                                                        // 3319
        width: 1,                                                                                                      // 3320
        color: '#89AFF9',                                                                                              // 3321
        //style: 'solid', // not used                                                                                  // 3322
        cornerVisible: function () {                                                                                   // 3323
          return that.settings.fillHandle && !that.isCellEdited() && instance.selection.isMultiple()                   // 3324
        },                                                                                                             // 3325
          multipleSelectionHandlesVisible: function () {                                                               // 3326
          return !that.isCellEdited() && instance.selection.isMultiple();                                              // 3327
        }                                                                                                              // 3328
      }                                                                                                                // 3329
    }),                                                                                                                // 3330
    new WalkontableSelection({                                                                                         // 3331
      className: 'highlight',                                                                                          // 3332
      highlightRowClassName: that.settings.currentRowClassName,                                                        // 3333
      highlightColumnClassName: that.settings.currentColClassName                                                      // 3334
    }),                                                                                                                // 3335
    new WalkontableSelection({                                                                                         // 3336
      className: 'fill',                                                                                               // 3337
      border: {                                                                                                        // 3338
        width: 1,                                                                                                      // 3339
        color: 'red'                                                                                                   // 3340
        //style: 'solid' // not used                                                                                   // 3341
      }                                                                                                                // 3342
    })                                                                                                                 // 3343
  ];                                                                                                                   // 3344
  selections.current = selections[0];                                                                                  // 3345
  selections.area = selections[1];                                                                                     // 3346
  selections.highlight = selections[2];                                                                                // 3347
  selections.fill = selections[3];                                                                                     // 3348
                                                                                                                       // 3349
  var walkontableConfig = {                                                                                            // 3350
    debug: function () {                                                                                               // 3351
      return that.settings.debug;                                                                                      // 3352
    },                                                                                                                 // 3353
    table: table,                                                                                                      // 3354
    stretchH: this.settings.stretchH,                                                                                  // 3355
    data: instance.getDataAtCell,                                                                                      // 3356
    totalRows: instance.countRows,                                                                                     // 3357
    totalColumns: instance.countCols,                                                                                  // 3358
    fixedColumnsLeft: function () {                                                                                    // 3359
      return that.settings.fixedColumnsLeft;                                                                           // 3360
    },                                                                                                                 // 3361
    fixedRowsTop: function () {                                                                                        // 3362
      return that.settings.fixedRowsTop;                                                                               // 3363
    },                                                                                                                 // 3364
    renderAllRows: that.settings.renderAllRows,                                                                        // 3365
    rowHeaders: function () {                                                                                          // 3366
      var arr = [];                                                                                                    // 3367
      if(instance.hasRowHeaders()) {                                                                                   // 3368
        arr.push(function (index, TH) {                                                                                // 3369
          that.appendRowHeader(index, TH);                                                                             // 3370
        });                                                                                                            // 3371
      }                                                                                                                // 3372
      Handsontable.hooks.run(instance, 'afterGetRowHeaderRenderers', arr);                                             // 3373
      return arr;                                                                                                      // 3374
    },                                                                                                                 // 3375
    columnHeaders: function () {                                                                                       // 3376
                                                                                                                       // 3377
      var arr = [];                                                                                                    // 3378
      if(instance.hasColHeaders()) {                                                                                   // 3379
        arr.push(function (index, TH) {                                                                                // 3380
          that.appendColHeader(index, TH);                                                                             // 3381
        });                                                                                                            // 3382
      }                                                                                                                // 3383
      Handsontable.hooks.run(instance, 'afterGetColumnHeaderRenderers', arr);                                          // 3384
      return arr;                                                                                                      // 3385
    },                                                                                                                 // 3386
    columnWidth: instance.getColWidth,                                                                                 // 3387
    rowHeight: instance.getRowHeight,                                                                                  // 3388
    cellRenderer: function (row, col, TD) {                                                                            // 3389
                                                                                                                       // 3390
      var prop = that.instance.colToProp(col)                                                                          // 3391
        , cellProperties = that.instance.getCellMeta(row, col)                                                         // 3392
        , renderer = that.instance.getCellRenderer(cellProperties);                                                    // 3393
                                                                                                                       // 3394
      var value = that.instance.getDataAtRowProp(row, prop);                                                           // 3395
                                                                                                                       // 3396
      renderer(that.instance, TD, row, col, prop, value, cellProperties);                                              // 3397
      Handsontable.hooks.run(that.instance, 'afterRenderer', TD, row, col, prop, value, cellProperties);               // 3398
                                                                                                                       // 3399
    },                                                                                                                 // 3400
    selections: selections,                                                                                            // 3401
    hideBorderOnMouseDownOver: function () {                                                                           // 3402
      return that.settings.fragmentSelection;                                                                          // 3403
    },                                                                                                                 // 3404
    onCellMouseDown: function (event, coords, TD, wt) {                                                                // 3405
      instance.listen();                                                                                               // 3406
      that.activeWt = wt;                                                                                              // 3407
                                                                                                                       // 3408
      isMouseDown = true;                                                                                              // 3409
                                                                                                                       // 3410
      Handsontable.hooks.run(instance, 'beforeOnCellMouseDown', event, coords, TD);                                    // 3411
                                                                                                                       // 3412
      Handsontable.Dom.enableImmediatePropagation(event);                                                              // 3413
                                                                                                                       // 3414
      if (!event.isImmediatePropagationStopped()) {                                                                    // 3415
                                                                                                                       // 3416
        if (event.button === 2 && instance.selection.inInSelection(coords)) { //right mouse button                     // 3417
          //do nothing                                                                                                 // 3418
        }                                                                                                              // 3419
        else if (event.shiftKey) {                                                                                     // 3420
          if (coords.row >= 0 && coords.col >= 0) {                                                                    // 3421
            instance.selection.setRangeEnd(coords);                                                                    // 3422
          }                                                                                                            // 3423
        }                                                                                                              // 3424
        else {                                                                                                         // 3425
          if (coords.row < 0 || coords.col < 0) {                                                                      // 3426
            if (coords.row < 0) {                                                                                      // 3427
              instance.selectCell(0, coords.col, instance.countRows() - 1, coords.col);                                // 3428
              instance.selection.setSelectedHeaders(false, true);                                                      // 3429
            }                                                                                                          // 3430
            if (coords.col < 0) {                                                                                      // 3431
              instance.selectCell(coords.row, 0, coords.row, instance.countCols() - 1);                                // 3432
              instance.selection.setSelectedHeaders(true, false);                                                      // 3433
            }                                                                                                          // 3434
          }                                                                                                            // 3435
          else {                                                                                                       // 3436
            instance.selection.setRangeStart(coords);                                                                  // 3437
          }                                                                                                            // 3438
        }                                                                                                              // 3439
                                                                                                                       // 3440
        Handsontable.hooks.run(instance, 'afterOnCellMouseDown', event, coords, TD);                                   // 3441
                                                                                                                       // 3442
        that.activeWt = that.wt;                                                                                       // 3443
      }                                                                                                                // 3444
    },                                                                                                                 // 3445
    /*onCellMouseOut: function (/*event, coords, TD* /) {                                                              // 3446
     if (isMouseDown && that.settings.fragmentSelection === 'single') {                                                // 3447
     clearTextSelection(); //otherwise text selection blinks during multiple cells selection                           // 3448
     }                                                                                                                 // 3449
     },*/                                                                                                              // 3450
    onCellMouseOver: function (event, coords, TD, wt) {                                                                // 3451
      that.activeWt = wt;                                                                                              // 3452
      if (coords.row >= 0 && coords.col >= 0) { //is not a header                                                      // 3453
        if (isMouseDown) {                                                                                             // 3454
          /*if (that.settings.fragmentSelection === 'single') {                                                        // 3455
           clearTextSelection(); //otherwise text selection blinks during multiple cells selection                     // 3456
           }*/                                                                                                         // 3457
          instance.selection.setRangeEnd(coords);                                                                      // 3458
        }                                                                                                              // 3459
      } else {                                                                                                         // 3460
        if (isMouseDown) {                                                                                             // 3461
          // multi select columns                                                                                      // 3462
          if (coords.row < 0) {                                                                                        // 3463
            instance.selection.setRangeEnd(new WalkontableCellCoords(instance.countRows() - 1, coords.col));           // 3464
            instance.selection.setSelectedHeaders(false, true);                                                        // 3465
          }                                                                                                            // 3466
                                                                                                                       // 3467
          // multi select rows                                                                                         // 3468
          if (coords.col < 0) {                                                                                        // 3469
            instance.selection.setRangeEnd(new WalkontableCellCoords(coords.row, instance.countCols() - 1));           // 3470
            instance.selection.setSelectedHeaders(true, false);                                                        // 3471
          }                                                                                                            // 3472
        }                                                                                                              // 3473
      }                                                                                                                // 3474
                                                                                                                       // 3475
      Handsontable.hooks.run(instance, 'afterOnCellMouseOver', event, coords, TD);                                     // 3476
      that.activeWt = that.wt;                                                                                         // 3477
    },                                                                                                                 // 3478
    onCellCornerMouseDown: function (event) {                                                                          // 3479
      event.preventDefault();                                                                                          // 3480
      Handsontable.hooks.run(instance, 'afterOnCellCornerMouseDown', event);                                           // 3481
    },                                                                                                                 // 3482
    beforeDraw: function (force) {                                                                                     // 3483
      that.beforeRender(force);                                                                                        // 3484
    },                                                                                                                 // 3485
    onDraw: function (force) {                                                                                         // 3486
      that.onDraw(force);                                                                                              // 3487
    },                                                                                                                 // 3488
    onScrollVertically: function () {                                                                                  // 3489
      instance.runHooks('afterScrollVertically');                                                                      // 3490
    },                                                                                                                 // 3491
    onScrollHorizontally: function () {                                                                                // 3492
      instance.runHooks('afterScrollHorizontally');                                                                    // 3493
    },                                                                                                                 // 3494
    onBeforeDrawBorders: function (corners, borderClassName) {                                                         // 3495
      instance.runHooks('beforeDrawBorders', corners, borderClassName);                                                // 3496
    },                                                                                                                 // 3497
    onBeforeTouchScroll: function () {                                                                                 // 3498
      instance.runHooks('beforeTouchScroll');                                                                          // 3499
    },                                                                                                                 // 3500
    onAfterMomentumScroll: function () {                                                                               // 3501
      instance.runHooks('afterMomentumScroll');                                                                        // 3502
    },                                                                                                                 // 3503
    viewportRowCalculatorOverride: function (calc) {                                                                   // 3504
      if (that.settings.viewportRowRenderingOffset) {                                                                  // 3505
        calc.startRow = Math.max(calc.startRow - that.settings.viewportRowRenderingOffset, 0);                         // 3506
        calc.endRow = Math.min(calc.endRow + that.settings.viewportRowRenderingOffset, instance.countRows() - 1);      // 3507
      }                                                                                                                // 3508
      instance.runHooks('afterViewportRowCalculatorOverride', calc);                                                   // 3509
    },                                                                                                                 // 3510
    viewportColumnCalculatorOverride: function (calc) {                                                                // 3511
      if (that.settings.viewportColumnRenderingOffset) {                                                               // 3512
        calc.startColumn = Math.max(calc.startColumn - that.settings.viewportColumnRenderingOffset, 0);                // 3513
        calc.endColumn = Math.min(calc.endColumn + that.settings.viewportColumnRenderingOffset, instance.countCols() - 1);
      }                                                                                                                // 3515
      instance.runHooks('afterViewportColumnCalculatorOverride', calc);                                                // 3516
    }                                                                                                                  // 3517
  };                                                                                                                   // 3518
                                                                                                                       // 3519
  Handsontable.hooks.run(instance, 'beforeInitWalkontable', walkontableConfig);                                        // 3520
                                                                                                                       // 3521
  this.wt = new Walkontable(walkontableConfig);                                                                        // 3522
  this.activeWt = this.wt;                                                                                             // 3523
                                                                                                                       // 3524
  this.eventManager.addEventListener(that.wt.wtTable.spreader, 'mousedown', function (event) {                         // 3525
    if (event.target === that.wt.wtTable.spreader && event.which === 3) { //right mouse button exactly on spreader means right clickon the right hand side of vertical scrollbar
      Handsontable.helper.stopPropagation(event);                                                                      // 3527
      //event.stopPropagation();                                                                                       // 3528
    }                                                                                                                  // 3529
  });                                                                                                                  // 3530
                                                                                                                       // 3531
  this.eventManager.addEventListener(that.wt.wtTable.spreader, 'contextmenu', function (event) {                       // 3532
    if (event.target === that.wt.wtTable.spreader && event.which === 3) { //right mouse button exactly on spreader means right clickon the right hand side of vertical scrollbar
      Handsontable.helper.stopPropagation(event);                                                                      // 3534
      //event.stopPropagation();                                                                                       // 3535
    }                                                                                                                  // 3536
  });                                                                                                                  // 3537
                                                                                                                       // 3538
                                                                                                                       // 3539
  this.eventManager.addEventListener(document.documentElement, 'click', function () {                                  // 3540
    if (that.settings.observeDOMVisibility) {                                                                          // 3541
      if (that.wt.drawInterrupted) {                                                                                   // 3542
        that.instance.forceFullRender = true;                                                                          // 3543
        that.render();                                                                                                 // 3544
      }                                                                                                                // 3545
    }                                                                                                                  // 3546
  });                                                                                                                  // 3547
};                                                                                                                     // 3548
                                                                                                                       // 3549
Handsontable.TableView.prototype.isTextSelectionAllowed = function (el) {                                              // 3550
  if (Handsontable.helper.isInput(el)) {                                                                               // 3551
    return (true);                                                                                                     // 3552
  }                                                                                                                    // 3553
  if (this.settings.fragmentSelection && Handsontable.Dom.isChildOf(el, this.TBODY)) {                                 // 3554
    return (true);                                                                                                     // 3555
  }                                                                                                                    // 3556
  return false;                                                                                                        // 3557
};                                                                                                                     // 3558
                                                                                                                       // 3559
Handsontable.TableView.prototype.isCellEdited = function () {                                                          // 3560
  var activeEditor = this.instance.getActiveEditor();                                                                  // 3561
  return activeEditor && activeEditor.isOpened();                                                                      // 3562
};                                                                                                                     // 3563
                                                                                                                       // 3564
Handsontable.TableView.prototype.beforeRender = function (force) {                                                     // 3565
  if (force) { //force = did Walkontable decide to do full render                                                      // 3566
    Handsontable.hooks.run(this.instance, 'beforeRender', this.instance.forceFullRender); //this.instance.forceFullRender = did Handsontable request full render?
  }                                                                                                                    // 3568
};                                                                                                                     // 3569
                                                                                                                       // 3570
Handsontable.TableView.prototype.onDraw = function (force) {                                                           // 3571
  if (force) { //force = did Walkontable decide to do full render                                                      // 3572
    Handsontable.hooks.run(this.instance, 'afterRender', this.instance.forceFullRender); //this.instance.forceFullRender = did Handsontable request full render?
  }                                                                                                                    // 3574
};                                                                                                                     // 3575
                                                                                                                       // 3576
Handsontable.TableView.prototype.render = function () {                                                                // 3577
  this.wt.draw(!this.instance.forceFullRender);                                                                        // 3578
  this.instance.forceFullRender = false;                                                                               // 3579
//  this.instance.rootElement.triggerHandler('render.handsontable');                                                   // 3580
};                                                                                                                     // 3581
                                                                                                                       // 3582
/**                                                                                                                    // 3583
 * Returns td object given coordinates                                                                                 // 3584
 * @param {WalkontableCellCoords} coords                                                                               // 3585
 * @param {Boolean} topmost                                                                                            // 3586
 */                                                                                                                    // 3587
Handsontable.TableView.prototype.getCellAtCoords = function (coords, topmost) {                                        // 3588
  var td = this.wt.getCell(coords, topmost);                                                                           // 3589
  //var td = this.wt.wtTable.getCell(coords);                                                                          // 3590
  if (td < 0) { //there was an exit code (cell is out of bounds)                                                       // 3591
    return null;                                                                                                       // 3592
  }                                                                                                                    // 3593
  else {                                                                                                               // 3594
    return td;                                                                                                         // 3595
  }                                                                                                                    // 3596
};                                                                                                                     // 3597
                                                                                                                       // 3598
/**                                                                                                                    // 3599
 * Scroll viewport to selection                                                                                        // 3600
 * @param {WalkontableCellCoords} coords                                                                               // 3601
 */                                                                                                                    // 3602
Handsontable.TableView.prototype.scrollViewport = function (coords) {                                                  // 3603
  this.wt.scrollViewport(coords);                                                                                      // 3604
};                                                                                                                     // 3605
                                                                                                                       // 3606
/**                                                                                                                    // 3607
 * Append row header to a TH element                                                                                   // 3608
 * @param row                                                                                                          // 3609
 * @param TH                                                                                                           // 3610
 */                                                                                                                    // 3611
Handsontable.TableView.prototype.appendRowHeader = function (row, TH) {                                                // 3612
  var DIV = document.createElement('DIV'),                                                                             // 3613
    SPAN = document.createElement('SPAN');                                                                             // 3614
                                                                                                                       // 3615
  DIV.className = 'relative';                                                                                          // 3616
  SPAN.className = 'rowHeader';                                                                                        // 3617
                                                                                                                       // 3618
  if (row > -1) {                                                                                                      // 3619
    Handsontable.Dom.fastInnerHTML(SPAN, this.instance.getRowHeader(row));                                             // 3620
  } else {                                                                                                             // 3621
    Handsontable.Dom.fastInnerText(SPAN, String.fromCharCode(160)); // workaround for https://github.com/handsontable/handsontable/issues/1946
  }                                                                                                                    // 3623
                                                                                                                       // 3624
  DIV.appendChild(SPAN);                                                                                               // 3625
  Handsontable.Dom.empty(TH);                                                                                          // 3626
                                                                                                                       // 3627
  TH.appendChild(DIV);                                                                                                 // 3628
                                                                                                                       // 3629
  Handsontable.hooks.run(this.instance, 'afterGetRowHeader', row, TH);                                                 // 3630
};                                                                                                                     // 3631
                                                                                                                       // 3632
/**                                                                                                                    // 3633
 * Append column header to a TH element                                                                                // 3634
 * @param col                                                                                                          // 3635
 * @param TH                                                                                                           // 3636
 */                                                                                                                    // 3637
Handsontable.TableView.prototype.appendColHeader = function (col, TH) {                                                // 3638
  var DIV = document.createElement('DIV')                                                                              // 3639
    , SPAN = document.createElement('SPAN');                                                                           // 3640
                                                                                                                       // 3641
  DIV.className = 'relative';                                                                                          // 3642
  SPAN.className = 'colHeader';                                                                                        // 3643
                                                                                                                       // 3644
  if (col > -1) {                                                                                                      // 3645
    Handsontable.Dom.fastInnerHTML(SPAN, this.instance.getColHeader(col));                                             // 3646
  } else {                                                                                                             // 3647
    Handsontable.Dom.fastInnerText(SPAN, String.fromCharCode(160)); // workaround for https://github.com/handsontable/handsontable/issues/1946
  }                                                                                                                    // 3649
  DIV.appendChild(SPAN);                                                                                               // 3650
                                                                                                                       // 3651
  Handsontable.Dom.empty(TH);                                                                                          // 3652
  TH.appendChild(DIV);                                                                                                 // 3653
  Handsontable.hooks.run(this.instance, 'afterGetColHeader', col, TH);                                                 // 3654
};                                                                                                                     // 3655
                                                                                                                       // 3656
/**                                                                                                                    // 3657
 * Given a element's left position relative to the viewport, returns maximum element width until the right edge of the viewport (before scrollbar)
 * @param {Number} leftOffset                                                                                          // 3659
 * @return {Number}                                                                                                    // 3660
 */                                                                                                                    // 3661
Handsontable.TableView.prototype.maximumVisibleElementWidth = function (leftOffset) {                                  // 3662
  var workspaceWidth = this.wt.wtViewport.getWorkspaceWidth();                                                         // 3663
  var maxWidth = workspaceWidth - leftOffset;                                                                          // 3664
  return maxWidth > 0 ? maxWidth : 0;                                                                                  // 3665
};                                                                                                                     // 3666
                                                                                                                       // 3667
/**                                                                                                                    // 3668
 * Given a element's top position relative to the viewport, returns maximum element height until the bottom edge of the viewport (before scrollbar)
 * @param {Number} topOffset                                                                                           // 3670
 * @return {Number}                                                                                                    // 3671
 */                                                                                                                    // 3672
Handsontable.TableView.prototype.maximumVisibleElementHeight = function (topOffset) {                                  // 3673
  var workspaceHeight = this.wt.wtViewport.getWorkspaceHeight();                                                       // 3674
  var maxHeight = workspaceHeight - topOffset;                                                                         // 3675
  return maxHeight > 0 ? maxHeight : 0;                                                                                // 3676
};                                                                                                                     // 3677
                                                                                                                       // 3678
Handsontable.TableView.prototype.mainViewIsActive = function () {                                                      // 3679
  return this.wt === this.activeWt;                                                                                    // 3680
};                                                                                                                     // 3681
                                                                                                                       // 3682
Handsontable.TableView.prototype.destroy = function () {                                                               // 3683
  this.wt.destroy();                                                                                                   // 3684
  this.eventManager.clear();                                                                                           // 3685
};                                                                                                                     // 3686
                                                                                                                       // 3687
/**                                                                                                                    // 3688
 * Utility to register editors and common namespace for keeping reference to all editor classes                        // 3689
 */                                                                                                                    // 3690
(function (Handsontable) {                                                                                             // 3691
  'use strict';                                                                                                        // 3692
                                                                                                                       // 3693
  function RegisteredEditor(editorClass) {                                                                             // 3694
    var clazz, instances;                                                                                              // 3695
                                                                                                                       // 3696
    instances = {};                                                                                                    // 3697
    clazz = editorClass;                                                                                               // 3698
                                                                                                                       // 3699
    this.getInstance = function (hotInstance) {                                                                        // 3700
      if (!(hotInstance.guid in instances)) {                                                                          // 3701
        instances[hotInstance.guid] = new clazz(hotInstance);                                                          // 3702
      }                                                                                                                // 3703
                                                                                                                       // 3704
      return instances[hotInstance.guid];                                                                              // 3705
    }                                                                                                                  // 3706
                                                                                                                       // 3707
  }                                                                                                                    // 3708
                                                                                                                       // 3709
  var registeredEditorNames = {};                                                                                      // 3710
  var registeredEditorClasses = new WeakMap();                                                                         // 3711
                                                                                                                       // 3712
  Handsontable.editors = {                                                                                             // 3713
                                                                                                                       // 3714
    /**                                                                                                                // 3715
     * Registers editor under given name                                                                               // 3716
     * @param {String} editorName                                                                                      // 3717
     * @param {Function} editorClass                                                                                   // 3718
     */                                                                                                                // 3719
    registerEditor: function (editorName, editorClass) {                                                               // 3720
      var editor = new RegisteredEditor(editorClass);                                                                  // 3721
      if (typeof editorName === "string") {                                                                            // 3722
        registeredEditorNames[editorName] = editor;                                                                    // 3723
      }                                                                                                                // 3724
      registeredEditorClasses.set(editorClass, editor);                                                                // 3725
    },                                                                                                                 // 3726
                                                                                                                       // 3727
    /**                                                                                                                // 3728
     * Returns instance (singleton) of editor class                                                                    // 3729
     * @param {String|Function} editorName/editorClass                                                                 // 3730
     * @returns {Function} editorClass                                                                                 // 3731
     */                                                                                                                // 3732
    getEditor: function (editorName, hotInstance) {                                                                    // 3733
      var editor;                                                                                                      // 3734
      if (typeof editorName == 'function') {                                                                           // 3735
        if (!(registeredEditorClasses.get(editorName))) {                                                              // 3736
          this.registerEditor(null, editorName);                                                                       // 3737
        }                                                                                                              // 3738
        editor = registeredEditorClasses.get(editorName);                                                              // 3739
      }                                                                                                                // 3740
      else if (typeof editorName == 'string') {                                                                        // 3741
        editor = registeredEditorNames[editorName];                                                                    // 3742
      }                                                                                                                // 3743
      else {                                                                                                           // 3744
        throw Error('Only strings and functions can be passed as "editor" parameter ');                                // 3745
      }                                                                                                                // 3746
                                                                                                                       // 3747
      if (!editor) {                                                                                                   // 3748
        throw Error('No editor registered under name "' + editorName + '"');                                           // 3749
      }                                                                                                                // 3750
                                                                                                                       // 3751
      return editor.getInstance(hotInstance);                                                                          // 3752
    }                                                                                                                  // 3753
                                                                                                                       // 3754
  };                                                                                                                   // 3755
                                                                                                                       // 3756
                                                                                                                       // 3757
})(Handsontable);                                                                                                      // 3758
                                                                                                                       // 3759
(function(Handsontable){                                                                                               // 3760
  'use strict';                                                                                                        // 3761
                                                                                                                       // 3762
  Handsontable.EditorManager = function(instance, priv, selection){                                                    // 3763
    var that = this;                                                                                                   // 3764
    var keyCodes = Handsontable.helper.keyCode;                                                                        // 3765
    var destroyed = false;                                                                                             // 3766
                                                                                                                       // 3767
    var eventManager = Handsontable.eventManager(instance);                                                            // 3768
                                                                                                                       // 3769
    var activeEditor;                                                                                                  // 3770
                                                                                                                       // 3771
    var init = function () {                                                                                           // 3772
                                                                                                                       // 3773
      function onKeyDown(event) {                                                                                      // 3774
                                                                                                                       // 3775
        if (!instance.isListening()) {                                                                                 // 3776
          return;                                                                                                      // 3777
        }                                                                                                              // 3778
                                                                                                                       // 3779
        Handsontable.hooks.run(instance, 'beforeKeyDown', event);                                                      // 3780
                                                                                                                       // 3781
        if(destroyed) {                                                                                                // 3782
          return;                                                                                                      // 3783
        }                                                                                                              // 3784
                                                                                                                       // 3785
        Handsontable.Dom.enableImmediatePropagation(event);                                                            // 3786
                                                                                                                       // 3787
        if (!event.isImmediatePropagationStopped()) {                                                                  // 3788
                                                                                                                       // 3789
          priv.lastKeyCode = event.keyCode;                                                                            // 3790
          if (selection.isSelected()) {                                                                                // 3791
            var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey; //catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)
                                                                                                                       // 3793
            if (!activeEditor.isWaiting()) {                                                                           // 3794
              if (!Handsontable.helper.isMetaKey(event.keyCode) && !ctrlDown && !that.isEditorOpened()) {              // 3795
                that.openEditor("");                                                                                   // 3796
                return;                                                                                                // 3797
              }                                                                                                        // 3798
            }                                                                                                          // 3799
                                                                                                                       // 3800
            var rangeModifier = event.shiftKey ? selection.setRangeEnd : selection.setRangeStart;                      // 3801
                                                                                                                       // 3802
              switch (event.keyCode) {                                                                                 // 3803
                                                                                                                       // 3804
                case keyCodes.A:                                                                                       // 3805
                  if (ctrlDown) {                                                                                      // 3806
                    selection.selectAll(); //select all cells                                                          // 3807
                                                                                                                       // 3808
                    event.preventDefault();                                                                            // 3809
                    Handsontable.helper.stopPropagation(event);                                                        // 3810
                    //event.stopPropagation();                                                                         // 3811
                  }                                                                                                    // 3812
                  break;                                                                                               // 3813
                                                                                                                       // 3814
                case keyCodes.ARROW_UP:                                                                                // 3815
                                                                                                                       // 3816
                  if (that.isEditorOpened() && !activeEditor.isWaiting()){                                             // 3817
                    that.closeEditorAndSaveChanges(ctrlDown);                                                          // 3818
                  }                                                                                                    // 3819
                                                                                                                       // 3820
                  moveSelectionUp(event.shiftKey);                                                                     // 3821
                                                                                                                       // 3822
                  event.preventDefault();                                                                              // 3823
                  Handsontable.helper.stopPropagation(event);                                                          // 3824
                  //event.stopPropagation(); //required by HandsontableEditor                                          // 3825
                  break;                                                                                               // 3826
                                                                                                                       // 3827
                case keyCodes.ARROW_DOWN:                                                                              // 3828
                  if (that.isEditorOpened() && !activeEditor.isWaiting()){                                             // 3829
                    that.closeEditorAndSaveChanges(ctrlDown);                                                          // 3830
                  }                                                                                                    // 3831
                                                                                                                       // 3832
                  moveSelectionDown(event.shiftKey);                                                                   // 3833
                                                                                                                       // 3834
                  event.preventDefault();                                                                              // 3835
                  Handsontable.helper.stopPropagation(event);                                                          // 3836
                  //event.stopPropagation(); //required by HandsontableEditor                                          // 3837
                  break;                                                                                               // 3838
                                                                                                                       // 3839
                case keyCodes.ARROW_RIGHT:                                                                             // 3840
                  if(that.isEditorOpened()  && !activeEditor.isWaiting()){                                             // 3841
                    that.closeEditorAndSaveChanges(ctrlDown);                                                          // 3842
                  }                                                                                                    // 3843
                                                                                                                       // 3844
                  moveSelectionRight(event.shiftKey);                                                                  // 3845
                                                                                                                       // 3846
                  event.preventDefault();                                                                              // 3847
                  Handsontable.helper.stopPropagation(event);                                                          // 3848
                  //event.stopPropagation(); //required by HandsontableEditor                                          // 3849
                  break;                                                                                               // 3850
                                                                                                                       // 3851
                case keyCodes.ARROW_LEFT:                                                                              // 3852
                  if(that.isEditorOpened() && !activeEditor.isWaiting()){                                              // 3853
                    that.closeEditorAndSaveChanges(ctrlDown);                                                          // 3854
                  }                                                                                                    // 3855
                                                                                                                       // 3856
                  moveSelectionLeft(event.shiftKey);                                                                   // 3857
                                                                                                                       // 3858
                  event.preventDefault();                                                                              // 3859
                  Handsontable.helper.stopPropagation(event);                                                          // 3860
                  //event.stopPropagation(); //required by HandsontableEditor                                          // 3861
                  break;                                                                                               // 3862
                                                                                                                       // 3863
                case keyCodes.TAB:                                                                                     // 3864
                  var tabMoves = typeof priv.settings.tabMoves === 'function' ? priv.settings.tabMoves(event) : priv.settings.tabMoves;
                  if (event.shiftKey) {                                                                                // 3866
                    selection.transformStart(-tabMoves.row, -tabMoves.col); //move selection left                      // 3867
                  }                                                                                                    // 3868
                  else {                                                                                               // 3869
                    selection.transformStart(tabMoves.row, tabMoves.col, true); //move selection right (add a new column if needed)
                  }                                                                                                    // 3871
                  event.preventDefault();                                                                              // 3872
                  Handsontable.helper.stopPropagation(event);                                                          // 3873
                  //event.stopPropagation(); //required by HandsontableEditor                                          // 3874
                  break;                                                                                               // 3875
                                                                                                                       // 3876
                case keyCodes.BACKSPACE:                                                                               // 3877
                case keyCodes.DELETE:                                                                                  // 3878
                  selection.empty(event);                                                                              // 3879
                  that.prepareEditor();                                                                                // 3880
                  event.preventDefault();                                                                              // 3881
                  break;                                                                                               // 3882
                                                                                                                       // 3883
                case keyCodes.F2: /* F2 */                                                                             // 3884
                  that.openEditor();                                                                                   // 3885
                  event.preventDefault(); //prevent Opera from opening Go to Page dialog                               // 3886
                  break;                                                                                               // 3887
                                                                                                                       // 3888
                case keyCodes.ENTER: /* return/enter */                                                                // 3889
                  if(that.isEditorOpened()){                                                                           // 3890
                                                                                                                       // 3891
                    if (activeEditor.state !== Handsontable.EditorState.WAITING){                                      // 3892
                      that.closeEditorAndSaveChanges(ctrlDown);                                                        // 3893
                    }                                                                                                  // 3894
                                                                                                                       // 3895
                    moveSelectionAfterEnter(event.shiftKey);                                                           // 3896
                                                                                                                       // 3897
                  } else {                                                                                             // 3898
                                                                                                                       // 3899
                    if (instance.getSettings().enterBeginsEditing){                                                    // 3900
                      that.openEditor();                                                                               // 3901
                    } else {                                                                                           // 3902
                      moveSelectionAfterEnter(event.shiftKey);                                                         // 3903
                    }                                                                                                  // 3904
                                                                                                                       // 3905
                  }                                                                                                    // 3906
                                                                                                                       // 3907
                  event.preventDefault(); //don't add newline to field                                                 // 3908
                  event.stopImmediatePropagation(); //required by HandsontableEditor                                   // 3909
                  break;                                                                                               // 3910
                                                                                                                       // 3911
                case keyCodes.ESCAPE:                                                                                  // 3912
                  if(that.isEditorOpened()){                                                                           // 3913
                    that.closeEditorAndRestoreOriginalValue(ctrlDown);                                                 // 3914
                  }                                                                                                    // 3915
                  event.preventDefault();                                                                              // 3916
                  break;                                                                                               // 3917
                                                                                                                       // 3918
                case keyCodes.HOME:                                                                                    // 3919
                  if (event.ctrlKey || event.metaKey) {                                                                // 3920
                    rangeModifier(new WalkontableCellCoords(0, priv.selRange.from.col));                               // 3921
                  }                                                                                                    // 3922
                  else {                                                                                               // 3923
                    rangeModifier(new WalkontableCellCoords(priv.selRange.from.row, 0));                               // 3924
                  }                                                                                                    // 3925
                  event.preventDefault(); //don't scroll the window                                                    // 3926
                  Handsontable.helper.stopPropagation(event);                                                          // 3927
                  //event.stopPropagation(); //required by HandsontableEditor                                          // 3928
                  break;                                                                                               // 3929
                                                                                                                       // 3930
                case keyCodes.END:                                                                                     // 3931
                  if (event.ctrlKey || event.metaKey) {                                                                // 3932
                    rangeModifier(new WalkontableCellCoords(instance.countRows() - 1, priv.selRange.from.col));        // 3933
                  }                                                                                                    // 3934
                  else {                                                                                               // 3935
                    rangeModifier(new WalkontableCellCoords(priv.selRange.from.row, instance.countCols() - 1));        // 3936
                  }                                                                                                    // 3937
                  event.preventDefault(); //don't scroll the window                                                    // 3938
                  Handsontable.helper.stopPropagation(event);                                                          // 3939
                  //event.stopPropagation(); //required by HandsontableEditor                                          // 3940
                  break;                                                                                               // 3941
                                                                                                                       // 3942
                case keyCodes.PAGE_UP:                                                                                 // 3943
                  selection.transformStart(-instance.countVisibleRows(), 0);                                           // 3944
                  event.preventDefault(); //don't page up the window                                                   // 3945
                  Handsontable.helper.stopPropagation(event);                                                          // 3946
                  //event.stopPropagation(); //required by HandsontableEditor                                          // 3947
                  break;                                                                                               // 3948
                                                                                                                       // 3949
                case keyCodes.PAGE_DOWN:                                                                               // 3950
                  selection.transformStart(instance.countVisibleRows(), 0);                                            // 3951
                  event.preventDefault(); //don't page down the window                                                 // 3952
                  Handsontable.helper.stopPropagation(event);                                                          // 3953
                  //event.stopPropagation(); //required by HandsontableEditor                                          // 3954
                  break;                                                                                               // 3955
              }                                                                                                        // 3956
                                                                                                                       // 3957
          }                                                                                                            // 3958
        }                                                                                                              // 3959
      }                                                                                                                // 3960
                                                                                                                       // 3961
      instance.addHook('afterDocumentKeyDown', function(originalEvent){                                                // 3962
        onKeyDown(originalEvent);                                                                                      // 3963
      });                                                                                                              // 3964
                                                                                                                       // 3965
      eventManager.addEventListener(document, 'keydown', function (ev){                                                // 3966
        instance.runHooks('afterDocumentKeyDown', ev);                                                                 // 3967
      });                                                                                                              // 3968
                                                                                                                       // 3969
      function onDblClick(event, coords, elem) {                                                                       // 3970
        if(elem.nodeName == "TD") { //may be TD or TH                                                                  // 3971
          that.openEditor();                                                                                           // 3972
        }                                                                                                              // 3973
      }                                                                                                                // 3974
                                                                                                                       // 3975
      instance.view.wt.update('onCellDblClick', onDblClick);                                                           // 3976
                                                                                                                       // 3977
      instance.addHook('afterDestroy', function(){                                                                     // 3978
        destroyed = true;                                                                                              // 3979
      });                                                                                                              // 3980
                                                                                                                       // 3981
      function moveSelectionAfterEnter(shiftKey){                                                                      // 3982
        var enterMoves = typeof priv.settings.enterMoves === 'function' ? priv.settings.enterMoves(event) : priv.settings.enterMoves;
                                                                                                                       // 3984
        if (shiftKey) {                                                                                                // 3985
          selection.transformStart(-enterMoves.row, -enterMoves.col); //move selection up                              // 3986
        }                                                                                                              // 3987
        else {                                                                                                         // 3988
          selection.transformStart(enterMoves.row, enterMoves.col, true); //move selection down (add a new row if needed)
        }                                                                                                              // 3990
      }                                                                                                                // 3991
                                                                                                                       // 3992
      function moveSelectionUp(shiftKey){                                                                              // 3993
        if (shiftKey) {                                                                                                // 3994
          selection.transformEnd(-1, 0);                                                                               // 3995
        }                                                                                                              // 3996
        else {                                                                                                         // 3997
          selection.transformStart(-1, 0);                                                                             // 3998
        }                                                                                                              // 3999
      }                                                                                                                // 4000
                                                                                                                       // 4001
      function moveSelectionDown(shiftKey){                                                                            // 4002
        if (shiftKey) {                                                                                                // 4003
          selection.transformEnd(1, 0); //expanding selection down with shift                                          // 4004
        }                                                                                                              // 4005
        else {                                                                                                         // 4006
          selection.transformStart(1, 0); //move selection down                                                        // 4007
        }                                                                                                              // 4008
      }                                                                                                                // 4009
                                                                                                                       // 4010
      function moveSelectionRight(shiftKey){                                                                           // 4011
        if (shiftKey) {                                                                                                // 4012
          selection.transformEnd(0, 1);                                                                                // 4013
        }                                                                                                              // 4014
        else {                                                                                                         // 4015
          selection.transformStart(0, 1);                                                                              // 4016
        }                                                                                                              // 4017
      }                                                                                                                // 4018
                                                                                                                       // 4019
      function moveSelectionLeft(shiftKey){                                                                            // 4020
        if (shiftKey) {                                                                                                // 4021
          selection.transformEnd(0, -1);                                                                               // 4022
        }                                                                                                              // 4023
        else {                                                                                                         // 4024
          selection.transformStart(0, -1);                                                                             // 4025
        }                                                                                                              // 4026
      }                                                                                                                // 4027
    };                                                                                                                 // 4028
                                                                                                                       // 4029
    /**                                                                                                                // 4030
     * Destroy current editor, if exists                                                                               // 4031
     * @param {Boolean} revertOriginal                                                                                 // 4032
     */                                                                                                                // 4033
    this.destroyEditor = function (revertOriginal) {                                                                   // 4034
      this.closeEditor(revertOriginal);                                                                                // 4035
    };                                                                                                                 // 4036
                                                                                                                       // 4037
    this.getActiveEditor = function () {                                                                               // 4038
      return activeEditor;                                                                                             // 4039
    };                                                                                                                 // 4040
                                                                                                                       // 4041
    /**                                                                                                                // 4042
     * Prepare text input to be displayed at given grid cell                                                           // 4043
     */                                                                                                                // 4044
    this.prepareEditor = function () {                                                                                 // 4045
                                                                                                                       // 4046
      if (activeEditor && activeEditor.isWaiting()){                                                                   // 4047
                                                                                                                       // 4048
        this.closeEditor(false, false, function(dataSaved){                                                            // 4049
          if(dataSaved){                                                                                               // 4050
            that.prepareEditor();                                                                                      // 4051
          }                                                                                                            // 4052
        });                                                                                                            // 4053
                                                                                                                       // 4054
        return;                                                                                                        // 4055
      }                                                                                                                // 4056
                                                                                                                       // 4057
      var row = priv.selRange.highlight.row;                                                                           // 4058
      var col = priv.selRange.highlight.col;                                                                           // 4059
      var prop = instance.colToProp(col);                                                                              // 4060
      var td = instance.getCell(row, col);                                                                             // 4061
      var originalValue = instance.getDataAtCell(row, col);                                                            // 4062
      var cellProperties = instance.getCellMeta(row, col);                                                             // 4063
                                                                                                                       // 4064
      var editorClass = instance.getCellEditor(cellProperties);                                                        // 4065
      activeEditor = Handsontable.editors.getEditor(editorClass, instance);                                            // 4066
                                                                                                                       // 4067
      activeEditor.prepare(row, col, prop, td, originalValue, cellProperties);                                         // 4068
                                                                                                                       // 4069
    };                                                                                                                 // 4070
                                                                                                                       // 4071
    this.isEditorOpened = function () {                                                                                // 4072
      return activeEditor.isOpened();                                                                                  // 4073
    };                                                                                                                 // 4074
                                                                                                                       // 4075
    this.openEditor = function (initialValue) {                                                                        // 4076
      if (!activeEditor.cellProperties.readOnly){                                                                      // 4077
        activeEditor.beginEditing(initialValue);                                                                       // 4078
      }                                                                                                                // 4079
    };                                                                                                                 // 4080
                                                                                                                       // 4081
    this.closeEditor = function (restoreOriginalValue, ctrlDown, callback) {                                           // 4082
                                                                                                                       // 4083
      if (!activeEditor){                                                                                              // 4084
        if(callback) {                                                                                                 // 4085
          callback(false);                                                                                             // 4086
        }                                                                                                              // 4087
      }                                                                                                                // 4088
      else {                                                                                                           // 4089
        activeEditor.finishEditing(restoreOriginalValue, ctrlDown, callback);                                          // 4090
      }                                                                                                                // 4091
    };                                                                                                                 // 4092
                                                                                                                       // 4093
    this.closeEditorAndSaveChanges = function(ctrlDown){                                                               // 4094
      return this.closeEditor(false, ctrlDown);                                                                        // 4095
    };                                                                                                                 // 4096
                                                                                                                       // 4097
    this.closeEditorAndRestoreOriginalValue = function(ctrlDown){                                                      // 4098
      return this.closeEditor(true, ctrlDown);                                                                         // 4099
    };                                                                                                                 // 4100
                                                                                                                       // 4101
    init();                                                                                                            // 4102
  };                                                                                                                   // 4103
                                                                                                                       // 4104
})(Handsontable);                                                                                                      // 4105
                                                                                                                       // 4106
/**                                                                                                                    // 4107
 * Utility to register renderers and common namespace for keeping reference to all renderers classes                   // 4108
 */                                                                                                                    // 4109
(function (Handsontable) {                                                                                             // 4110
  'use strict';                                                                                                        // 4111
                                                                                                                       // 4112
  var registeredRenderers = {};                                                                                        // 4113
                                                                                                                       // 4114
  Handsontable.renderers = {                                                                                           // 4115
                                                                                                                       // 4116
    /**                                                                                                                // 4117
     * Registers renderer under given name                                                                             // 4118
     * @param {String} rendererName                                                                                    // 4119
     * @param {Function} rendererFunction                                                                              // 4120
     */                                                                                                                // 4121
    registerRenderer: function (rendererName, rendererFunction) {                                                      // 4122
      registeredRenderers[rendererName] = rendererFunction                                                             // 4123
    },                                                                                                                 // 4124
                                                                                                                       // 4125
    /**                                                                                                                // 4126
     * @param {String|Function} rendererName/rendererFunction                                                          // 4127
     * @returns {Function} rendererFunction                                                                            // 4128
     */                                                                                                                // 4129
    getRenderer: function (rendererName) {                                                                             // 4130
      if (typeof rendererName == 'function'){                                                                          // 4131
        return rendererName;                                                                                           // 4132
      }                                                                                                                // 4133
                                                                                                                       // 4134
      if (typeof rendererName != 'string'){                                                                            // 4135
        throw Error('Only strings and functions can be passed as "renderer" parameter ');                              // 4136
      }                                                                                                                // 4137
                                                                                                                       // 4138
      if (!(rendererName in registeredRenderers)) {                                                                    // 4139
        throw Error('No editor registered under name "' + rendererName + '"');                                         // 4140
      }                                                                                                                // 4141
                                                                                                                       // 4142
      return registeredRenderers[rendererName];                                                                        // 4143
    }                                                                                                                  // 4144
                                                                                                                       // 4145
  };                                                                                                                   // 4146
                                                                                                                       // 4147
                                                                                                                       // 4148
})(Handsontable);                                                                                                      // 4149
                                                                                                                       // 4150
Handsontable.helper = {};                                                                                              // 4151
                                                                                                                       // 4152
/**                                                                                                                    // 4153
 * Returns true if keyCode represents a printable character                                                            // 4154
 * @param {Number} keyCode                                                                                             // 4155
 * @return {Boolean}                                                                                                   // 4156
 */                                                                                                                    // 4157
Handsontable.helper.isPrintableChar = function (keyCode) {                                                             // 4158
  return ((keyCode == 32) || //space                                                                                   // 4159
    (keyCode >= 48 && keyCode <= 57) || //0-9                                                                          // 4160
    (keyCode >= 96 && keyCode <= 111) || //numpad                                                                      // 4161
    (keyCode >= 186 && keyCode <= 192) || //;=,-./`                                                                    // 4162
    (keyCode >= 219 && keyCode <= 222) || //[]{}\|"'                                                                   // 4163
    keyCode >= 226 || //special chars (229 for Asian chars)                                                            // 4164
    (keyCode >= 65 && keyCode <= 90)); //a-z                                                                           // 4165
};                                                                                                                     // 4166
                                                                                                                       // 4167
Handsontable.helper.isMetaKey = function (keyCode) {                                                                   // 4168
  var keyCodes = Handsontable.helper.keyCode;                                                                          // 4169
  var metaKeys = [                                                                                                     // 4170
    keyCodes.ARROW_DOWN,                                                                                               // 4171
    keyCodes.ARROW_UP,                                                                                                 // 4172
    keyCodes.ARROW_LEFT,                                                                                               // 4173
    keyCodes.ARROW_RIGHT,                                                                                              // 4174
    keyCodes.HOME,                                                                                                     // 4175
    keyCodes.END,                                                                                                      // 4176
    keyCodes.DELETE,                                                                                                   // 4177
    keyCodes.BACKSPACE,                                                                                                // 4178
    keyCodes.F1,                                                                                                       // 4179
    keyCodes.F2,                                                                                                       // 4180
    keyCodes.F3,                                                                                                       // 4181
    keyCodes.F4,                                                                                                       // 4182
    keyCodes.F5,                                                                                                       // 4183
    keyCodes.F6,                                                                                                       // 4184
    keyCodes.F7,                                                                                                       // 4185
    keyCodes.F8,                                                                                                       // 4186
    keyCodes.F9,                                                                                                       // 4187
    keyCodes.F10,                                                                                                      // 4188
    keyCodes.F11,                                                                                                      // 4189
    keyCodes.F12,                                                                                                      // 4190
    keyCodes.TAB,                                                                                                      // 4191
    keyCodes.PAGE_DOWN,                                                                                                // 4192
    keyCodes.PAGE_UP,                                                                                                  // 4193
    keyCodes.ENTER,                                                                                                    // 4194
    keyCodes.ESCAPE,                                                                                                   // 4195
    keyCodes.SHIFT,                                                                                                    // 4196
    keyCodes.CAPS_LOCK,                                                                                                // 4197
    keyCodes.ALT                                                                                                       // 4198
  ];                                                                                                                   // 4199
                                                                                                                       // 4200
  return metaKeys.indexOf(keyCode) != -1;                                                                              // 4201
};                                                                                                                     // 4202
                                                                                                                       // 4203
Handsontable.helper.isCtrlKey = function (keyCode) {                                                                   // 4204
                                                                                                                       // 4205
  var keys = Handsontable.helper.keyCode;                                                                              // 4206
                                                                                                                       // 4207
  return [keys.CONTROL_LEFT, 224, keys.COMMAND_LEFT, keys.COMMAND_RIGHT].indexOf(keyCode) != -1;                       // 4208
};                                                                                                                     // 4209
                                                                                                                       // 4210
/**                                                                                                                    // 4211
 * Converts a value to string                                                                                          // 4212
 * @param value                                                                                                        // 4213
 * @return {String}                                                                                                    // 4214
 */                                                                                                                    // 4215
Handsontable.helper.stringify = function (value) {                                                                     // 4216
  switch (typeof value) {                                                                                              // 4217
    case 'string':                                                                                                     // 4218
    case 'number':                                                                                                     // 4219
      return value + '';                                                                                               // 4220
                                                                                                                       // 4221
    case 'object':                                                                                                     // 4222
      if (value === null) {                                                                                            // 4223
        return '';                                                                                                     // 4224
      }                                                                                                                // 4225
      else {                                                                                                           // 4226
        return value.toString();                                                                                       // 4227
      }                                                                                                                // 4228
                                                                                                                       // 4229
    case 'undefined':                                                                                                  // 4230
      return '';                                                                                                       // 4231
                                                                                                                       // 4232
    default:                                                                                                           // 4233
      return value.toString();                                                                                         // 4234
  }                                                                                                                    // 4235
};                                                                                                                     // 4236
                                                                                                                       // 4237
/**                                                                                                                    // 4238
 * Generates spreadsheet-like column names: A, B, C, ..., Z, AA, AB, etc                                               // 4239
 * @param index                                                                                                        // 4240
 * @returns {String}                                                                                                   // 4241
 */                                                                                                                    // 4242
Handsontable.helper.spreadsheetColumnLabel = function (index) {                                                        // 4243
  var dividend = index + 1;                                                                                            // 4244
  var columnLabel = '';                                                                                                // 4245
  var modulo;                                                                                                          // 4246
  while (dividend > 0) {                                                                                               // 4247
    modulo = (dividend - 1) % 26;                                                                                      // 4248
    columnLabel = String.fromCharCode(65 + modulo) + columnLabel;                                                      // 4249
    dividend = parseInt((dividend - modulo) / 26, 10);                                                                 // 4250
  }                                                                                                                    // 4251
  return columnLabel;                                                                                                  // 4252
};                                                                                                                     // 4253
                                                                                                                       // 4254
/**                                                                                                                    // 4255
 * Creates 2D array of Excel-like values "A1", "A2", ...                                                               // 4256
 * @param rowCount                                                                                                     // 4257
 * @param colCount                                                                                                     // 4258
 * @returns {Array}                                                                                                    // 4259
 */                                                                                                                    // 4260
Handsontable.helper.createSpreadsheetData = function(rowCount, colCount) {                                             // 4261
  rowCount = typeof rowCount === 'number' ? rowCount : 100;                                                            // 4262
  colCount = typeof colCount === 'number' ? colCount : 4;                                                              // 4263
                                                                                                                       // 4264
  var rows = []                                                                                                        // 4265
    , i                                                                                                                // 4266
    , j;                                                                                                               // 4267
                                                                                                                       // 4268
  for (i = 0; i < rowCount; i++) {                                                                                     // 4269
    var row = [];                                                                                                      // 4270
    for (j = 0; j < colCount; j++) {                                                                                   // 4271
      row.push(Handsontable.helper.spreadsheetColumnLabel(j) + (i + 1));                                               // 4272
    }                                                                                                                  // 4273
    rows.push(row);                                                                                                    // 4274
  }                                                                                                                    // 4275
  return rows;                                                                                                         // 4276
}                                                                                                                      // 4277
                                                                                                                       // 4278
Handsontable.helper.createSpreadsheetObjectData = function(rowCount, colCount) {                                       // 4279
  rowCount = typeof rowCount === 'number' ? rowCount : 100;                                                            // 4280
  colCount = typeof colCount === 'number' ? colCount : 4;                                                              // 4281
                                                                                                                       // 4282
  var rows = []                                                                                                        // 4283
    , i                                                                                                                // 4284
    , j;                                                                                                               // 4285
                                                                                                                       // 4286
  for (i = 0; i < rowCount; i++) {                                                                                     // 4287
    var row = {};                                                                                                      // 4288
    for (j = 0; j < colCount; j++) {                                                                                   // 4289
      row['prop' + j] = Handsontable.helper.spreadsheetColumnLabel(j) + (i + 1)                                        // 4290
    }                                                                                                                  // 4291
    rows.push(row);                                                                                                    // 4292
  }                                                                                                                    // 4293
  return rows;                                                                                                         // 4294
}                                                                                                                      // 4295
                                                                                                                       // 4296
/**                                                                                                                    // 4297
 * Checks if value of n is a numeric one                                                                               // 4298
 * http://jsperf.com/isnan-vs-isnumeric/4                                                                              // 4299
 * @param n                                                                                                            // 4300
 * @returns {boolean}                                                                                                  // 4301
 */                                                                                                                    // 4302
Handsontable.helper.isNumeric = function (n) {                                                                         // 4303
    var t = typeof n;                                                                                                  // 4304
    return t == 'number' ? !isNaN(n) && isFinite(n) :                                                                  // 4305
           t == 'string' ? !n.length ? false :                                                                         // 4306
           n.length == 1 ? /\d/.test(n) :                                                                              // 4307
           /^\s*[+-]?\s*(?:(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?)|(?:0x[a-f\d]+))\s*$/i.test(n) :                             // 4308
           t == 'object' ? !!n && typeof n.valueOf() == "number" && !(n instanceof Date) : false;                      // 4309
};                                                                                                                     // 4310
                                                                                                                       // 4311
/**                                                                                                                    // 4312
 * Generates a random hex string. Used as namespace for Handsontable instance events.                                  // 4313
 * @return {String} - 16 character random string: "92b1bfc74ec4"                                                       // 4314
 */                                                                                                                    // 4315
Handsontable.helper.randomString = function () {                                                                       // 4316
  return walkontableRandomString();                                                                                    // 4317
};                                                                                                                     // 4318
                                                                                                                       // 4319
/**                                                                                                                    // 4320
 * Inherit without without calling parent constructor, and setting `Child.prototype.constructor` to `Child` instead of `Parent`.
 * Creates temporary dummy function to call it as constructor.                                                         // 4322
 * Described in ticket: https://github.com/handsontable/handsontable/pull/516                                          // 4323
 * @param  {Object} Child  child class                                                                                 // 4324
 * @param  {Object} Parent parent class                                                                                // 4325
 * @return {Object}        extended Child                                                                              // 4326
 */                                                                                                                    // 4327
Handsontable.helper.inherit = function (Child, Parent) {                                                               // 4328
  Parent.prototype.constructor = Parent;                                                                               // 4329
  Child.prototype = new Parent();                                                                                      // 4330
  Child.prototype.constructor = Child;                                                                                 // 4331
  return Child;                                                                                                        // 4332
};                                                                                                                     // 4333
                                                                                                                       // 4334
/**                                                                                                                    // 4335
 * Perform shallow extend of a target object with extension's own properties                                           // 4336
 * @param {Object} target An object that will receive the new properties                                               // 4337
 * @param {Object} extension An object containing additional properties to merge into the target                       // 4338
 */                                                                                                                    // 4339
Handsontable.helper.extend = function (target, extension) {                                                            // 4340
  for (var i in extension) {                                                                                           // 4341
    if (extension.hasOwnProperty(i)) {                                                                                 // 4342
      target[i] = extension[i];                                                                                        // 4343
    }                                                                                                                  // 4344
  }                                                                                                                    // 4345
};                                                                                                                     // 4346
                                                                                                                       // 4347
/**                                                                                                                    // 4348
 * Perform deep extend of a target object with extension's own properties                                              // 4349
 * @param {Object} target An object that will receive the new properties                                               // 4350
 * @param {Object} extension An object containing additional properties to merge into the target                       // 4351
 */                                                                                                                    // 4352
Handsontable.helper.deepExtend = function (target, extension) {                                                        // 4353
  for (var key in extension) {                                                                                         // 4354
    if (extension.hasOwnProperty(key)) {                                                                               // 4355
      if (extension[key] && typeof extension[key] === 'object') {                                                      // 4356
        if (!target[key]) {                                                                                            // 4357
          if (Array.isArray(extension[key])) {                                                                         // 4358
            target[key] = [];                                                                                          // 4359
          }                                                                                                            // 4360
          else {                                                                                                       // 4361
            target[key] = {};                                                                                          // 4362
          }                                                                                                            // 4363
        }                                                                                                              // 4364
        Handsontable.helper.deepExtend(target[key], extension[key]);                                                   // 4365
      }                                                                                                                // 4366
      else {                                                                                                           // 4367
        target[key] = extension[key];                                                                                  // 4368
      }                                                                                                                // 4369
    }                                                                                                                  // 4370
  }                                                                                                                    // 4371
};                                                                                                                     // 4372
                                                                                                                       // 4373
/**                                                                                                                    // 4374
 * Perform deep clone of an object                                                                                     // 4375
 * WARNING! Only clones JSON properties. Will cause error when `obj` contains a function, Date, etc                    // 4376
 * @param {Object} obj An object that will be cloned                                                                   // 4377
 * @return {Object}                                                                                                    // 4378
 */                                                                                                                    // 4379
Handsontable.helper.deepClone = function (obj) {                                                                       // 4380
  if (typeof obj === "object") {                                                                                       // 4381
    return JSON.parse(JSON.stringify(obj));                                                                            // 4382
  }                                                                                                                    // 4383
  else {                                                                                                               // 4384
    return obj;                                                                                                        // 4385
  }                                                                                                                    // 4386
};                                                                                                                     // 4387
                                                                                                                       // 4388
Handsontable.helper.getPrototypeOf = function (obj) {                                                                  // 4389
  var prototype;                                                                                                       // 4390
                                                                                                                       // 4391
  if(typeof obj.__proto__ == "object"){                                                                                // 4392
    prototype = obj.__proto__;                                                                                         // 4393
  } else {                                                                                                             // 4394
    var oldConstructor,                                                                                                // 4395
        constructor = obj.constructor;                                                                                 // 4396
                                                                                                                       // 4397
    if (typeof obj.constructor == "function") {                                                                        // 4398
      oldConstructor = constructor;                                                                                    // 4399
                                                                                                                       // 4400
      if (delete obj.constructor){                                                                                     // 4401
        constructor = obj.constructor; // get real constructor                                                         // 4402
        obj.constructor = oldConstructor; // restore constructor                                                       // 4403
      }                                                                                                                // 4404
                                                                                                                       // 4405
                                                                                                                       // 4406
    }                                                                                                                  // 4407
                                                                                                                       // 4408
    prototype = constructor ? constructor.prototype : null; // needed for IE                                           // 4409
                                                                                                                       // 4410
  }                                                                                                                    // 4411
                                                                                                                       // 4412
  return prototype;                                                                                                    // 4413
};                                                                                                                     // 4414
                                                                                                                       // 4415
/**                                                                                                                    // 4416
 * Factory for columns constructors.                                                                                   // 4417
 * @param {Object} GridSettings                                                                                        // 4418
 * @param {Array} conflictList                                                                                         // 4419
 * @return {Object} ColumnSettings                                                                                     // 4420
 */                                                                                                                    // 4421
Handsontable.helper.columnFactory = function (GridSettings, conflictList) {                                            // 4422
  function ColumnSettings () {}                                                                                        // 4423
                                                                                                                       // 4424
  Handsontable.helper.inherit(ColumnSettings, GridSettings);                                                           // 4425
                                                                                                                       // 4426
  // Clear conflict settings                                                                                           // 4427
  for (var i = 0, len = conflictList.length; i < len; i++) {                                                           // 4428
    ColumnSettings.prototype[conflictList[i]] = void 0;                                                                // 4429
  }                                                                                                                    // 4430
                                                                                                                       // 4431
  return ColumnSettings;                                                                                               // 4432
};                                                                                                                     // 4433
                                                                                                                       // 4434
Handsontable.helper.translateRowsToColumns = function (input) {                                                        // 4435
  var i                                                                                                                // 4436
    , ilen                                                                                                             // 4437
    , j                                                                                                                // 4438
    , jlen                                                                                                             // 4439
    , output = []                                                                                                      // 4440
    , olen = 0;                                                                                                        // 4441
                                                                                                                       // 4442
  for (i = 0, ilen = input.length; i < ilen; i++) {                                                                    // 4443
    for (j = 0, jlen = input[i].length; j < jlen; j++) {                                                               // 4444
      if (j == olen) {                                                                                                 // 4445
        output.push([]);                                                                                               // 4446
        olen++;                                                                                                        // 4447
      }                                                                                                                // 4448
      output[j].push(input[i][j])                                                                                      // 4449
    }                                                                                                                  // 4450
  }                                                                                                                    // 4451
  return output;                                                                                                       // 4452
};                                                                                                                     // 4453
                                                                                                                       // 4454
Handsontable.helper.to2dArray = function (arr) {                                                                       // 4455
  var i = 0                                                                                                            // 4456
    , ilen = arr.length;                                                                                               // 4457
  while (i < ilen) {                                                                                                   // 4458
    arr[i] = [arr[i]];                                                                                                 // 4459
    i++;                                                                                                               // 4460
  }                                                                                                                    // 4461
};                                                                                                                     // 4462
                                                                                                                       // 4463
Handsontable.helper.extendArray = function (arr, extension) {                                                          // 4464
  var i = 0                                                                                                            // 4465
    , ilen = extension.length;                                                                                         // 4466
  while (i < ilen) {                                                                                                   // 4467
    arr.push(extension[i]);                                                                                            // 4468
    i++;                                                                                                               // 4469
  }                                                                                                                    // 4470
};                                                                                                                     // 4471
                                                                                                                       // 4472
/**                                                                                                                    // 4473
 * Determines if the given DOM element is an input field.                                                              // 4474
 * Notice: By 'input' we mean input, textarea and select nodes                                                         // 4475
 * @param element - DOM element                                                                                        // 4476
 * @returns {boolean}                                                                                                  // 4477
 */                                                                                                                    // 4478
Handsontable.helper.isInput = function (element) {                                                                     // 4479
  var inputs = ['INPUT', 'SELECT', 'TEXTAREA'];                                                                        // 4480
                                                                                                                       // 4481
  return inputs.indexOf(element.nodeName) > -1;                                                                        // 4482
}                                                                                                                      // 4483
                                                                                                                       // 4484
/**                                                                                                                    // 4485
 * Determines if the given DOM element is an input field placed OUTSIDE of HOT.                                        // 4486
 * Notice: By 'input' we mean input, textarea and select nodes                                                         // 4487
 * @param element - DOM element                                                                                        // 4488
 * @returns {boolean}                                                                                                  // 4489
 */                                                                                                                    // 4490
Handsontable.helper.isOutsideInput = function (element) {                                                              // 4491
  return Handsontable.helper.isInput(element) && element.className.indexOf('handsontableInput') == -1;                 // 4492
};                                                                                                                     // 4493
                                                                                                                       // 4494
Handsontable.helper.keyCode = {                                                                                        // 4495
  MOUSE_LEFT: 1,                                                                                                       // 4496
  MOUSE_RIGHT: 3,                                                                                                      // 4497
  MOUSE_MIDDLE: 2,                                                                                                     // 4498
  BACKSPACE: 8,                                                                                                        // 4499
  COMMA: 188,                                                                                                          // 4500
  INSERT: 45,                                                                                                          // 4501
  DELETE: 46,                                                                                                          // 4502
  END: 35,                                                                                                             // 4503
  ENTER: 13,                                                                                                           // 4504
  ESCAPE: 27,                                                                                                          // 4505
  CONTROL_LEFT: 91,                                                                                                    // 4506
  COMMAND_LEFT: 17,                                                                                                    // 4507
  COMMAND_RIGHT: 93,                                                                                                   // 4508
  ALT: 18,                                                                                                             // 4509
  HOME: 36,                                                                                                            // 4510
  PAGE_DOWN: 34,                                                                                                       // 4511
  PAGE_UP: 33,                                                                                                         // 4512
  PERIOD: 190,                                                                                                         // 4513
  SPACE: 32,                                                                                                           // 4514
  SHIFT: 16,                                                                                                           // 4515
  CAPS_LOCK: 20,                                                                                                       // 4516
  TAB: 9,                                                                                                              // 4517
  ARROW_RIGHT: 39,                                                                                                     // 4518
  ARROW_LEFT: 37,                                                                                                      // 4519
  ARROW_UP: 38,                                                                                                        // 4520
  ARROW_DOWN: 40,                                                                                                      // 4521
  F1: 112,                                                                                                             // 4522
  F2: 113,                                                                                                             // 4523
  F3: 114,                                                                                                             // 4524
  F4: 115,                                                                                                             // 4525
  F5: 116,                                                                                                             // 4526
  F6: 117,                                                                                                             // 4527
  F7: 118,                                                                                                             // 4528
  F8: 119,                                                                                                             // 4529
  F9: 120,                                                                                                             // 4530
  F10: 121,                                                                                                            // 4531
  F11: 122,                                                                                                            // 4532
  F12: 123,                                                                                                            // 4533
  A: 65,                                                                                                               // 4534
  X: 88,                                                                                                               // 4535
  C: 67,                                                                                                               // 4536
  V: 86                                                                                                                // 4537
};                                                                                                                     // 4538
                                                                                                                       // 4539
/**                                                                                                                    // 4540
 * Determines whether given object is a plain Object.                                                                  // 4541
 * Note: String and Array are not plain Objects                                                                        // 4542
 * @param {*} obj                                                                                                      // 4543
 * @returns {boolean}                                                                                                  // 4544
 */                                                                                                                    // 4545
Handsontable.helper.isObject = function (obj) {                                                                        // 4546
  return Object.prototype.toString.call(obj) == '[object Object]';                                                     // 4547
};                                                                                                                     // 4548
                                                                                                                       // 4549
Handsontable.helper.pivot = function (arr) {                                                                           // 4550
  var pivotedArr = [];                                                                                                 // 4551
                                                                                                                       // 4552
  if(!arr || arr.length == 0 || !arr[0] || arr[0].length == 0){                                                        // 4553
    return pivotedArr;                                                                                                 // 4554
  }                                                                                                                    // 4555
                                                                                                                       // 4556
  var rowCount = arr.length;                                                                                           // 4557
  var colCount = arr[0].length;                                                                                        // 4558
                                                                                                                       // 4559
  for(var i = 0; i < rowCount; i++){                                                                                   // 4560
    for(var j = 0; j < colCount; j++){                                                                                 // 4561
      if(!pivotedArr[j]){                                                                                              // 4562
        pivotedArr[j] = [];                                                                                            // 4563
      }                                                                                                                // 4564
                                                                                                                       // 4565
      pivotedArr[j][i] = arr[i][j];                                                                                    // 4566
    }                                                                                                                  // 4567
  }                                                                                                                    // 4568
                                                                                                                       // 4569
  return pivotedArr;                                                                                                   // 4570
                                                                                                                       // 4571
};                                                                                                                     // 4572
                                                                                                                       // 4573
Handsontable.helper.proxy = function (fun, context) {                                                                  // 4574
  return function () {                                                                                                 // 4575
    return fun.apply(context, arguments);                                                                              // 4576
  };                                                                                                                   // 4577
};                                                                                                                     // 4578
                                                                                                                       // 4579
/**                                                                                                                    // 4580
 * Factory that produces a function for searching methods (or any properties) which could be defined directly in       // 4581
 * table configuration or implicitly, within cell type definition.                                                     // 4582
 *                                                                                                                     // 4583
 * For example: renderer can be defined explicitly using "renderer" property in column configuration or it can be      // 4584
 * defined implicitly using "type" property.                                                                           // 4585
 *                                                                                                                     // 4586
 * Methods/properties defined explicitly always takes precedence over those defined through "type".                    // 4587
 *                                                                                                                     // 4588
 * If the method/property is not found in an object, searching is continued recursively through prototype chain, until // 4589
 * it reaches the Object.prototype.                                                                                    // 4590
 *                                                                                                                     // 4591
 *                                                                                                                     // 4592
 * @param methodName {String} name of the method/property to search (i.e. 'renderer', 'validator', 'copyable')         // 4593
 * @param allowUndefined {Boolean} [optional] if false, the search is continued if methodName has not been found in cell "type"
 * @returns {Function}                                                                                                 // 4595
 */                                                                                                                    // 4596
Handsontable.helper.cellMethodLookupFactory = function (methodName, allowUndefined) {                                  // 4597
                                                                                                                       // 4598
  allowUndefined = typeof allowUndefined == 'undefined' ? true : allowUndefined;                                       // 4599
                                                                                                                       // 4600
  return function cellMethodLookup (row, col) {                                                                        // 4601
                                                                                                                       // 4602
    return (function getMethodFromProperties(properties) {                                                             // 4603
                                                                                                                       // 4604
      if (!properties){                                                                                                // 4605
                                                                                                                       // 4606
        return;                       //method not found                                                               // 4607
                                                                                                                       // 4608
      }                                                                                                                // 4609
      else if (properties.hasOwnProperty(methodName) && properties[methodName] !== void 0) { //check if it is own and is not empty
                                                                                                                       // 4611
        return properties[methodName];  //method defined directly                                                      // 4612
                                                                                                                       // 4613
      } else if (properties.hasOwnProperty('type') && properties.type) { //check if it is own and is not empty         // 4614
                                                                                                                       // 4615
        var type;                                                                                                      // 4616
                                                                                                                       // 4617
        if(typeof properties.type != 'string' ){                                                                       // 4618
          throw new Error('Cell type must be a string ');                                                              // 4619
        }                                                                                                              // 4620
                                                                                                                       // 4621
        type = translateTypeNameToObject(properties.type);                                                             // 4622
                                                                                                                       // 4623
        if (type.hasOwnProperty(methodName)) {                                                                         // 4624
          return type[methodName]; //method defined in type.                                                           // 4625
        } else if (allowUndefined) {                                                                                   // 4626
          return; //method does not defined in type (eg. validator), returns undefined                                 // 4627
        }                                                                                                              // 4628
                                                                                                                       // 4629
      }                                                                                                                // 4630
                                                                                                                       // 4631
      return getMethodFromProperties(Handsontable.helper.getPrototypeOf(properties));                                  // 4632
                                                                                                                       // 4633
    })(typeof row == 'number' ? this.getCellMeta(row, col) : row);                                                     // 4634
                                                                                                                       // 4635
  };                                                                                                                   // 4636
                                                                                                                       // 4637
  function translateTypeNameToObject(typeName) {                                                                       // 4638
    var type = Handsontable.cellTypes[typeName];                                                                       // 4639
                                                                                                                       // 4640
    if(typeof type == 'undefined'){                                                                                    // 4641
      throw new Error('You declared cell type "' + typeName + '" as a string that is not mapped to a known object. Cell type must be an object or a string mapped to an object in Handsontable.cellTypes');
    }                                                                                                                  // 4643
                                                                                                                       // 4644
    return type;                                                                                                       // 4645
  }                                                                                                                    // 4646
                                                                                                                       // 4647
};                                                                                                                     // 4648
                                                                                                                       // 4649
Handsontable.helper.isMobileBrowser = function (userAgent) {                                                           // 4650
  if(!userAgent) {                                                                                                     // 4651
    userAgent = navigator.userAgent;                                                                                   // 4652
  }                                                                                                                    // 4653
  return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent));                           // 4654
                                                                                                                       // 4655
  // Logic for checking the specific mobile browser                                                                    // 4656
  //                                                                                                                   // 4657
  /* var type = type != void 0 ? type.toLowerCase() : ''                                                               // 4658
    , result;                                                                                                          // 4659
  switch(type) {                                                                                                       // 4660
    case '':                                                                                                           // 4661
      result = (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));           // 4662
      return result;                                                                                                   // 4663
      break;                                                                                                           // 4664
    case 'ipad':                                                                                                       // 4665
      return navigator.userAgent.indexOf('iPad') > -1;                                                                 // 4666
      break;                                                                                                           // 4667
    case 'android':                                                                                                    // 4668
      return navigator.userAgent.indexOf('Android') > -1;                                                              // 4669
      break;                                                                                                           // 4670
    case 'windows':                                                                                                    // 4671
      return navigator.userAgent.indexOf('IEMobile') > -1;                                                             // 4672
      break;                                                                                                           // 4673
    default:                                                                                                           // 4674
      throw new Error('Invalid isMobileBrowser argument');                                                             // 4675
      break;                                                                                                           // 4676
  } */                                                                                                                 // 4677
};                                                                                                                     // 4678
                                                                                                                       // 4679
Handsontable.helper.isTouchSupported = function () {                                                                   // 4680
  return ('ontouchstart' in window);                                                                                   // 4681
};                                                                                                                     // 4682
                                                                                                                       // 4683
Handsontable.helper.stopPropagation = function (event) {                                                               // 4684
  // ie8                                                                                                               // 4685
  //http://msdn.microsoft.com/en-us/library/ie/ff975462(v=vs.85).aspx                                                  // 4686
  if (typeof (event.stopPropagation) === 'function') {                                                                 // 4687
    event.stopPropagation();                                                                                           // 4688
  }                                                                                                                    // 4689
  else {                                                                                                               // 4690
    event.cancelBubble = true;                                                                                         // 4691
  }                                                                                                                    // 4692
};                                                                                                                     // 4693
                                                                                                                       // 4694
Handsontable.helper.pageX = function (event) {                                                                         // 4695
  if (event.pageX) {                                                                                                   // 4696
    return event.pageX;                                                                                                // 4697
  }                                                                                                                    // 4698
                                                                                                                       // 4699
  var scrollLeft = Handsontable.Dom.getWindowScrollLeft();                                                             // 4700
  var cursorX = event.clientX + scrollLeft;                                                                            // 4701
                                                                                                                       // 4702
  return cursorX;                                                                                                      // 4703
};                                                                                                                     // 4704
                                                                                                                       // 4705
Handsontable.helper.pageY = function (event) {                                                                         // 4706
  if (event.pageY) {                                                                                                   // 4707
    return event.pageY;                                                                                                // 4708
  }                                                                                                                    // 4709
                                                                                                                       // 4710
  var scrollTop = Handsontable.Dom.getWindowScrollTop();                                                               // 4711
  var cursorY = event.clientY + scrollTop;                                                                             // 4712
                                                                                                                       // 4713
  return cursorY;                                                                                                      // 4714
};                                                                                                                     // 4715
                                                                                                                       // 4716
(function (Handsontable) {                                                                                             // 4717
  'use strict';                                                                                                        // 4718
                                                                                                                       // 4719
  /**                                                                                                                  // 4720
   * Utility class that gets and saves data from/to the data source using mapping of columns numbers to object property names
   * TODO refactor arguments of methods getRange, getText to be numbers (not objects)                                  // 4722
   * TODO remove priv, GridSettings from object constructor                                                            // 4723
   *                                                                                                                   // 4724
   * @param instance                                                                                                   // 4725
   * @param priv                                                                                                       // 4726
   * @param GridSettings                                                                                               // 4727
   * @constructor                                                                                                      // 4728
   */                                                                                                                  // 4729
  Handsontable.DataMap = function (instance, priv, GridSettings) {                                                     // 4730
    this.instance = instance;                                                                                          // 4731
    this.priv = priv;                                                                                                  // 4732
    this.GridSettings = GridSettings;                                                                                  // 4733
    this.dataSource = this.instance.getSettings().data;                                                                // 4734
                                                                                                                       // 4735
    if (this.dataSource[0]) {                                                                                          // 4736
      this.duckSchema = this.recursiveDuckSchema(this.dataSource[0]);                                                  // 4737
    }                                                                                                                  // 4738
    else {                                                                                                             // 4739
      this.duckSchema = {};                                                                                            // 4740
    }                                                                                                                  // 4741
    this.createMap();                                                                                                  // 4742
  };                                                                                                                   // 4743
                                                                                                                       // 4744
  Handsontable.DataMap.prototype.DESTINATION_RENDERER = 1;                                                             // 4745
  Handsontable.DataMap.prototype.DESTINATION_CLIPBOARD_GENERATOR = 2;                                                  // 4746
                                                                                                                       // 4747
  Handsontable.DataMap.prototype.recursiveDuckSchema = function (obj) {                                                // 4748
    var schema;                                                                                                        // 4749
    if (!Array.isArray(obj)){                                                                                          // 4750
      schema = {};                                                                                                     // 4751
      for (var i in obj) {                                                                                             // 4752
        if (obj.hasOwnProperty(i)) {                                                                                   // 4753
          if (typeof obj[i] === "object" && !Array.isArray(obj[i])) {                                                  // 4754
            schema[i] = this.recursiveDuckSchema(obj[i]);                                                              // 4755
          }                                                                                                            // 4756
          else {                                                                                                       // 4757
            schema[i] = null;                                                                                          // 4758
          }                                                                                                            // 4759
        }                                                                                                              // 4760
      }                                                                                                                // 4761
    }                                                                                                                  // 4762
    else {                                                                                                             // 4763
      schema = [];                                                                                                     // 4764
    }                                                                                                                  // 4765
    return schema;                                                                                                     // 4766
  };                                                                                                                   // 4767
                                                                                                                       // 4768
  Handsontable.DataMap.prototype.recursiveDuckColumns = function (schema, lastCol, parent) {                           // 4769
    var prop, i;                                                                                                       // 4770
    if (typeof lastCol === 'undefined') {                                                                              // 4771
      lastCol = 0;                                                                                                     // 4772
      parent = '';                                                                                                     // 4773
    }                                                                                                                  // 4774
    if (typeof schema === "object" && !Array.isArray(schema)) {                                                        // 4775
      for (i in schema) {                                                                                              // 4776
        if (schema.hasOwnProperty(i)) {                                                                                // 4777
          if (schema[i] === null) {                                                                                    // 4778
            prop = parent + i;                                                                                         // 4779
            this.colToPropCache.push(prop);                                                                            // 4780
            this.propToColCache.set(prop, lastCol);                                                                    // 4781
                                                                                                                       // 4782
            lastCol++;                                                                                                 // 4783
          }                                                                                                            // 4784
          else {                                                                                                       // 4785
            lastCol = this.recursiveDuckColumns(schema[i], lastCol, i + '.');                                          // 4786
          }                                                                                                            // 4787
        }                                                                                                              // 4788
      }                                                                                                                // 4789
    }                                                                                                                  // 4790
    return lastCol;                                                                                                    // 4791
  };                                                                                                                   // 4792
                                                                                                                       // 4793
  Handsontable.DataMap.prototype.createMap = function () {                                                             // 4794
    var i, ilen, schema = this.getSchema();                                                                            // 4795
    if (typeof schema === "undefined") {                                                                               // 4796
      throw new Error("trying to create `columns` definition but you didnt' provide `schema` nor `data`");             // 4797
    }                                                                                                                  // 4798
    this.colToPropCache = [];                                                                                          // 4799
    this.propToColCache = new MultiMap();                                                                              // 4800
    var columns = this.instance.getSettings().columns;                                                                 // 4801
    if (columns) {                                                                                                     // 4802
      for (i = 0, ilen = columns.length; i < ilen; i++) {                                                              // 4803
                                                                                                                       // 4804
        if (typeof columns[i].data != 'undefined'){                                                                    // 4805
          this.colToPropCache[i] = columns[i].data;                                                                    // 4806
          this.propToColCache.set(columns[i].data, i);                                                                 // 4807
        }                                                                                                              // 4808
                                                                                                                       // 4809
      }                                                                                                                // 4810
    }                                                                                                                  // 4811
    else {                                                                                                             // 4812
      this.recursiveDuckColumns(schema);                                                                               // 4813
    }                                                                                                                  // 4814
  };                                                                                                                   // 4815
                                                                                                                       // 4816
  Handsontable.DataMap.prototype.colToProp = function (col) {                                                          // 4817
    col = Handsontable.hooks.execute(this.instance, 'modifyCol', col);                                                 // 4818
    if (this.colToPropCache && typeof this.colToPropCache[col] !== 'undefined') {                                      // 4819
      return this.colToPropCache[col];                                                                                 // 4820
    }                                                                                                                  // 4821
    else {                                                                                                             // 4822
      return col;                                                                                                      // 4823
    }                                                                                                                  // 4824
  };                                                                                                                   // 4825
                                                                                                                       // 4826
  Handsontable.DataMap.prototype.propToCol = function (prop) {                                                         // 4827
    var col;                                                                                                           // 4828
    if (typeof this.propToColCache.get(prop) !== 'undefined') {                                                        // 4829
      col = this.propToColCache.get(prop);                                                                             // 4830
    } else {                                                                                                           // 4831
      col = prop;                                                                                                      // 4832
    }                                                                                                                  // 4833
    col = Handsontable.hooks.execute(this.instance, 'modifyCol', col);                                                 // 4834
    return col;                                                                                                        // 4835
  };                                                                                                                   // 4836
                                                                                                                       // 4837
  Handsontable.DataMap.prototype.getSchema = function () {                                                             // 4838
    var schema = this.instance.getSettings().dataSchema;                                                               // 4839
    if (schema) {                                                                                                      // 4840
      if (typeof schema === 'function') {                                                                              // 4841
        return schema();                                                                                               // 4842
      }                                                                                                                // 4843
      return schema;                                                                                                   // 4844
    }                                                                                                                  // 4845
    return this.duckSchema;                                                                                            // 4846
  };                                                                                                                   // 4847
                                                                                                                       // 4848
  /**                                                                                                                  // 4849
   * Creates row at the bottom of the data array                                                                       // 4850
   * @param {Number} [index] Optional. Index of the row before which the new row will be inserted                      // 4851
   */                                                                                                                  // 4852
  Handsontable.DataMap.prototype.createRow = function (index, amount, createdAutomatically) {                          // 4853
    var row                                                                                                            // 4854
      , colCount = this.instance.countCols()                                                                           // 4855
      , numberOfCreatedRows = 0                                                                                        // 4856
      , currentIndex;                                                                                                  // 4857
                                                                                                                       // 4858
    if (!amount) {                                                                                                     // 4859
      amount = 1;                                                                                                      // 4860
    }                                                                                                                  // 4861
                                                                                                                       // 4862
    if (typeof index !== 'number' || index >= this.instance.countRows()) {                                             // 4863
      index = this.instance.countRows();                                                                               // 4864
    }                                                                                                                  // 4865
                                                                                                                       // 4866
    currentIndex = index;                                                                                              // 4867
    var maxRows = this.instance.getSettings().maxRows;                                                                 // 4868
    while (numberOfCreatedRows < amount && this.instance.countRows() < maxRows) {                                      // 4869
                                                                                                                       // 4870
      if (this.instance.dataType === 'array') {                                                                        // 4871
        row = [];                                                                                                      // 4872
        for (var c = 0; c < colCount; c++) {                                                                           // 4873
          row.push(null);                                                                                              // 4874
        }                                                                                                              // 4875
      }                                                                                                                // 4876
      else if (this.instance.dataType === 'function') {                                                                // 4877
        row = this.instance.getSettings().dataSchema(index);                                                           // 4878
      }                                                                                                                // 4879
      else {                                                                                                           // 4880
        row = {};                                                                                                      // 4881
        Handsontable.helper.deepExtend(row, this.getSchema());                                                         // 4882
      }                                                                                                                // 4883
                                                                                                                       // 4884
      if (index === this.instance.countRows()) {                                                                       // 4885
        this.dataSource.push(row);                                                                                     // 4886
      }                                                                                                                // 4887
      else {                                                                                                           // 4888
        this.dataSource.splice(index, 0, row);                                                                         // 4889
      }                                                                                                                // 4890
                                                                                                                       // 4891
      numberOfCreatedRows++;                                                                                           // 4892
      currentIndex++;                                                                                                  // 4893
    }                                                                                                                  // 4894
                                                                                                                       // 4895
                                                                                                                       // 4896
    Handsontable.hooks.run(this.instance, 'afterCreateRow', index, numberOfCreatedRows, createdAutomatically);         // 4897
    this.instance.forceFullRender = true; //used when data was changed                                                 // 4898
                                                                                                                       // 4899
    return numberOfCreatedRows;                                                                                        // 4900
  };                                                                                                                   // 4901
                                                                                                                       // 4902
  /**                                                                                                                  // 4903
   * Creates col at the right of the data array                                                                        // 4904
   * @param {Number} [index] Optional. Index of the column before which the new column will be inserted                // 4905
   *   * @param {Number} [amount] Optional.                                                                            // 4906
   */                                                                                                                  // 4907
  Handsontable.DataMap.prototype.createCol = function (index, amount, createdAutomatically) {                          // 4908
    if (this.instance.dataType === 'object' || this.instance.getSettings().columns) {                                  // 4909
      throw new Error("Cannot create new column. When data source in an object, " +                                    // 4910
        "you can only have as much columns as defined in first data row, data schema or in the 'columns' setting." +   // 4911
        "If you want to be able to add new columns, you have to use array datasource.");                               // 4912
    }                                                                                                                  // 4913
    var rlen = this.instance.countRows()                                                                               // 4914
      , data = this.dataSource                                                                                         // 4915
      , constructor                                                                                                    // 4916
      , numberOfCreatedCols = 0                                                                                        // 4917
      , currentIndex;                                                                                                  // 4918
                                                                                                                       // 4919
    if (!amount) {                                                                                                     // 4920
      amount = 1;                                                                                                      // 4921
    }                                                                                                                  // 4922
                                                                                                                       // 4923
    currentIndex = index;                                                                                              // 4924
                                                                                                                       // 4925
    var maxCols = this.instance.getSettings().maxCols;                                                                 // 4926
    while (numberOfCreatedCols < amount && this.instance.countCols() < maxCols) {                                      // 4927
      constructor = Handsontable.helper.columnFactory(this.GridSettings, this.priv.columnsSettingConflicts);           // 4928
      if (typeof index !== 'number' || index >= this.instance.countCols()) {                                           // 4929
        for (var r = 0; r < rlen; r++) {                                                                               // 4930
          if (typeof data[r] === 'undefined') {                                                                        // 4931
            data[r] = [];                                                                                              // 4932
          }                                                                                                            // 4933
          data[r].push(null);                                                                                          // 4934
        }                                                                                                              // 4935
        // Add new column constructor                                                                                  // 4936
        this.priv.columnSettings.push(constructor);                                                                    // 4937
      }                                                                                                                // 4938
      else {                                                                                                           // 4939
        for (var r = 0; r < rlen; r++) {                                                                               // 4940
          data[r].splice(currentIndex, 0, null);                                                                       // 4941
        }                                                                                                              // 4942
        // Add new column constructor at given index                                                                   // 4943
        this.priv.columnSettings.splice(currentIndex, 0, constructor);                                                 // 4944
      }                                                                                                                // 4945
                                                                                                                       // 4946
      numberOfCreatedCols++;                                                                                           // 4947
      currentIndex++;                                                                                                  // 4948
    }                                                                                                                  // 4949
                                                                                                                       // 4950
    Handsontable.hooks.run(this.instance, 'afterCreateCol', index, numberOfCreatedCols, createdAutomatically);         // 4951
    this.instance.forceFullRender = true; //used when data was changed                                                 // 4952
                                                                                                                       // 4953
    return numberOfCreatedCols;                                                                                        // 4954
  };                                                                                                                   // 4955
                                                                                                                       // 4956
  /**                                                                                                                  // 4957
   * Removes row from the data array                                                                                   // 4958
   * @param {Number} [index] Optional. Index of the row to be removed. If not provided, the last row will be removed   // 4959
   * @param {Number} [amount] Optional. Amount of the rows to be removed. If not provided, one row will be removed     // 4960
   */                                                                                                                  // 4961
  Handsontable.DataMap.prototype.removeRow = function (index, amount) {                                                // 4962
    if (!amount) {                                                                                                     // 4963
      amount = 1;                                                                                                      // 4964
    }                                                                                                                  // 4965
    if (typeof index !== 'number') {                                                                                   // 4966
      index = -amount;                                                                                                 // 4967
    }                                                                                                                  // 4968
                                                                                                                       // 4969
    index = (this.instance.countRows() + index) % this.instance.countRows();                                           // 4970
                                                                                                                       // 4971
    // We have to map the physical row ids to logical and than perform removing with (possibly) new row id             // 4972
    var logicRows = this.physicalRowsToLogical(index, amount);                                                         // 4973
                                                                                                                       // 4974
    var actionWasNotCancelled = Handsontable.hooks.execute(this.instance, 'beforeRemoveRow', index, amount);           // 4975
                                                                                                                       // 4976
    if (actionWasNotCancelled === false) {                                                                             // 4977
      return;                                                                                                          // 4978
    }                                                                                                                  // 4979
                                                                                                                       // 4980
    var data = this.dataSource;                                                                                        // 4981
    var newData = data.filter(function (row, index) {                                                                  // 4982
      return logicRows.indexOf(index) == -1;                                                                           // 4983
    });                                                                                                                // 4984
                                                                                                                       // 4985
    data.length = 0;                                                                                                   // 4986
    Array.prototype.push.apply(data, newData);                                                                         // 4987
                                                                                                                       // 4988
    Handsontable.hooks.run(this.instance, 'afterRemoveRow', index, amount);                                            // 4989
                                                                                                                       // 4990
    this.instance.forceFullRender = true; //used when data was changed                                                 // 4991
  };                                                                                                                   // 4992
                                                                                                                       // 4993
  /**                                                                                                                  // 4994
   * Removes column from the data array                                                                                // 4995
   * @param {Number} [index] Optional. Index of the column to be removed. If not provided, the last column will be removed
   * @param {Number} [amount] Optional. Amount of the columns to be removed. If not provided, one column will be removed
   */                                                                                                                  // 4998
  Handsontable.DataMap.prototype.removeCol = function (index, amount) {                                                // 4999
    if (this.instance.dataType === 'object' || this.instance.getSettings().columns) {                                  // 5000
      throw new Error("cannot remove column with object data source or columns option specified");                     // 5001
    }                                                                                                                  // 5002
    if (!amount) {                                                                                                     // 5003
      amount = 1;                                                                                                      // 5004
    }                                                                                                                  // 5005
    if (typeof index !== 'number') {                                                                                   // 5006
      index = -amount;                                                                                                 // 5007
    }                                                                                                                  // 5008
                                                                                                                       // 5009
    index = (this.instance.countCols() + index) % this.instance.countCols();                                           // 5010
                                                                                                                       // 5011
    var actionWasNotCancelled = Handsontable.hooks.execute(this.instance, 'beforeRemoveCol', index, amount);           // 5012
                                                                                                                       // 5013
    if (actionWasNotCancelled === false) {                                                                             // 5014
      return;                                                                                                          // 5015
    }                                                                                                                  // 5016
                                                                                                                       // 5017
    var data = this.dataSource;                                                                                        // 5018
    for (var r = 0, rlen = this.instance.countRows(); r < rlen; r++) {                                                 // 5019
      data[r].splice(index, amount);                                                                                   // 5020
    }                                                                                                                  // 5021
    this.priv.columnSettings.splice(index, amount);                                                                    // 5022
                                                                                                                       // 5023
    Handsontable.hooks.run(this.instance, 'afterRemoveCol', index, amount);                                            // 5024
    this.instance.forceFullRender = true; //used when data was changed                                                 // 5025
  };                                                                                                                   // 5026
                                                                                                                       // 5027
  /**                                                                                                                  // 5028
   * Add / removes data from the column                                                                                // 5029
   * @param {Number} col Index of column in which do you want to do splice.                                            // 5030
   * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end
   * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed
   * param {...*} elements Optional. The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array
   */                                                                                                                  // 5034
  Handsontable.DataMap.prototype.spliceCol = function (col, index, amount/*, elements...*/) {                          // 5035
    var elements = 4 <= arguments.length ? [].slice.call(arguments, 3) : [];                                           // 5036
                                                                                                                       // 5037
    var colData = this.instance.getDataAtCol(col);                                                                     // 5038
    var removed = colData.slice(index, index + amount);                                                                // 5039
    var after = colData.slice(index + amount);                                                                         // 5040
                                                                                                                       // 5041
    Handsontable.helper.extendArray(elements, after);                                                                  // 5042
    var i = 0;                                                                                                         // 5043
    while (i < amount) {                                                                                               // 5044
      elements.push(null); //add null in place of removed elements                                                     // 5045
      i++;                                                                                                             // 5046
    }                                                                                                                  // 5047
    Handsontable.helper.to2dArray(elements);                                                                           // 5048
    this.instance.populateFromArray(index, col, elements, null, null, 'spliceCol');                                    // 5049
                                                                                                                       // 5050
    return removed;                                                                                                    // 5051
  };                                                                                                                   // 5052
                                                                                                                       // 5053
  /**                                                                                                                  // 5054
   * Add / removes data from the row                                                                                   // 5055
   * @param {Number} row Index of row in which do you want to do splice.                                               // 5056
   * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end
   * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed
   * param {...*} elements Optional. The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array
   */                                                                                                                  // 5060
  Handsontable.DataMap.prototype.spliceRow = function (row, index, amount/*, elements...*/) {                          // 5061
    var elements = 4 <= arguments.length ? [].slice.call(arguments, 3) : [];                                           // 5062
                                                                                                                       // 5063
    var rowData = this.instance.getSourceDataAtRow(row);                                                               // 5064
    var removed = rowData.slice(index, index + amount);                                                                // 5065
    var after = rowData.slice(index + amount);                                                                         // 5066
                                                                                                                       // 5067
    Handsontable.helper.extendArray(elements, after);                                                                  // 5068
    var i = 0;                                                                                                         // 5069
    while (i < amount) {                                                                                               // 5070
      elements.push(null); //add null in place of removed elements                                                     // 5071
      i++;                                                                                                             // 5072
    }                                                                                                                  // 5073
    this.instance.populateFromArray(row, index, [elements], null, null, 'spliceRow');                                  // 5074
                                                                                                                       // 5075
    return removed;                                                                                                    // 5076
  };                                                                                                                   // 5077
                                                                                                                       // 5078
  /**                                                                                                                  // 5079
   * Returns single value from the data array                                                                          // 5080
   * @param {Number} row                                                                                               // 5081
   * @param {Number} prop                                                                                              // 5082
   */                                                                                                                  // 5083
  Handsontable.DataMap.prototype.get = function (row, prop) {                                                          // 5084
    row = Handsontable.hooks.execute(this.instance, 'modifyRow', row);                                                 // 5085
    if (typeof prop === 'string' && prop.indexOf('.') > -1) {                                                          // 5086
      var sliced = prop.split(".");                                                                                    // 5087
      var out = this.dataSource[row];                                                                                  // 5088
      if (!out) {                                                                                                      // 5089
        return null;                                                                                                   // 5090
      }                                                                                                                // 5091
      for (var i = 0, ilen = sliced.length; i < ilen; i++) {                                                           // 5092
        out = out[sliced[i]];                                                                                          // 5093
        if (typeof out === 'undefined') {                                                                              // 5094
          return null;                                                                                                 // 5095
        }                                                                                                              // 5096
      }                                                                                                                // 5097
      return out;                                                                                                      // 5098
    }                                                                                                                  // 5099
    else if (typeof prop === 'function') {                                                                             // 5100
      /**                                                                                                              // 5101
       *  allows for interacting with complex structures, for example                                                  // 5102
       *  d3/jQuery getter/setter properties:                                                                          // 5103
       *                                                                                                               // 5104
       *    {columns: [{                                                                                               // 5105
         *      data: function(row, value){                                                                            // 5106
         *        if(arguments.length === 1){                                                                          // 5107
         *          return row.property();                                                                             // 5108
         *        }                                                                                                    // 5109
         *        row.property(value);                                                                                 // 5110
         *      }                                                                                                      // 5111
         *    }]}                                                                                                      // 5112
       */                                                                                                              // 5113
      return prop(this.dataSource.slice(                                                                               // 5114
        row,                                                                                                           // 5115
        row + 1                                                                                                        // 5116
      )[0]);                                                                                                           // 5117
    }                                                                                                                  // 5118
    else {                                                                                                             // 5119
      return this.dataSource[row] ? this.dataSource[row][prop] : null;                                                 // 5120
    }                                                                                                                  // 5121
  };                                                                                                                   // 5122
                                                                                                                       // 5123
  var copyableLookup = Handsontable.helper.cellMethodLookupFactory('copyable', false);                                 // 5124
                                                                                                                       // 5125
  /**                                                                                                                  // 5126
   * Returns single value from the data array (intended for clipboard copy to an external application)                 // 5127
   * @param {Number} row                                                                                               // 5128
   * @param {Number} prop                                                                                              // 5129
   * @return {String}                                                                                                  // 5130
   */                                                                                                                  // 5131
  Handsontable.DataMap.prototype.getCopyable = function (row, prop) {                                                  // 5132
    if (copyableLookup.call(this.instance, row, this.propToCol(prop))) {                                               // 5133
      return this.get(row, prop);                                                                                      // 5134
    }                                                                                                                  // 5135
    return '';                                                                                                         // 5136
  };                                                                                                                   // 5137
                                                                                                                       // 5138
  /**                                                                                                                  // 5139
   * Saves single value to the data array                                                                              // 5140
   * @param {Number} row                                                                                               // 5141
   * @param {Number} prop                                                                                              // 5142
   * @param {String} value                                                                                             // 5143
   * @param {String} [source] Optional. Source of hook runner.                                                         // 5144
   */                                                                                                                  // 5145
  Handsontable.DataMap.prototype.set = function (row, prop, value, source) {                                           // 5146
    row = Handsontable.hooks.execute(this.instance, 'modifyRow', row, source || "datamapGet");                         // 5147
    if (typeof prop === 'string' && prop.indexOf('.') > -1) {                                                          // 5148
      var sliced = prop.split(".");                                                                                    // 5149
      var out = this.dataSource[row];                                                                                  // 5150
      for (var i = 0, ilen = sliced.length - 1; i < ilen; i++) {                                                       // 5151
                                                                                                                       // 5152
        if (typeof out[sliced[i]] === 'undefined'){                                                                    // 5153
          out[sliced[i]] = {};                                                                                         // 5154
        }                                                                                                              // 5155
        out = out[sliced[i]];                                                                                          // 5156
      }                                                                                                                // 5157
      out[sliced[i]] = value;                                                                                          // 5158
    }                                                                                                                  // 5159
    else if (typeof prop === 'function') {                                                                             // 5160
      /* see the `function` handler in `get` */                                                                        // 5161
      prop(this.dataSource.slice(                                                                                      // 5162
        row,                                                                                                           // 5163
        row + 1                                                                                                        // 5164
      )[0], value);                                                                                                    // 5165
    }                                                                                                                  // 5166
    else {                                                                                                             // 5167
      this.dataSource[row][prop] = value;                                                                              // 5168
    }                                                                                                                  // 5169
  };                                                                                                                   // 5170
                                                                                                                       // 5171
  /**                                                                                                                  // 5172
   * This ridiculous piece of code maps rows Id that are present in table data to those displayed for user.            // 5173
   * The trick is, the physical row id (stored in settings.data) is not necessary the same                             // 5174
   * as the logical (displayed) row id (e.g. when sorting is applied).                                                 // 5175
   */                                                                                                                  // 5176
  Handsontable.DataMap.prototype.physicalRowsToLogical = function (index, amount) {                                    // 5177
    var totalRows = this.instance.countRows();                                                                         // 5178
    var physicRow = (totalRows + index) % totalRows;                                                                   // 5179
    var logicRows = [];                                                                                                // 5180
    var rowsToRemove = amount;                                                                                         // 5181
    var row;                                                                                                           // 5182
                                                                                                                       // 5183
    while (physicRow < totalRows && rowsToRemove) {                                                                    // 5184
      row = Handsontable.hooks.execute(this.instance, 'modifyRow', physicRow);                                         // 5185
      logicRows.push(row);                                                                                             // 5186
                                                                                                                       // 5187
      rowsToRemove--;                                                                                                  // 5188
      physicRow++;                                                                                                     // 5189
    }                                                                                                                  // 5190
                                                                                                                       // 5191
    return logicRows;                                                                                                  // 5192
  };                                                                                                                   // 5193
                                                                                                                       // 5194
  /**                                                                                                                  // 5195
   * Clears the data array                                                                                             // 5196
   */                                                                                                                  // 5197
  Handsontable.DataMap.prototype.clear = function () {                                                                 // 5198
    for (var r = 0; r < this.instance.countRows(); r++) {                                                              // 5199
      for (var c = 0; c < this.instance.countCols(); c++) {                                                            // 5200
        this.set(r, this.colToProp(c), '');                                                                            // 5201
      }                                                                                                                // 5202
    }                                                                                                                  // 5203
  };                                                                                                                   // 5204
                                                                                                                       // 5205
  /**                                                                                                                  // 5206
   * Returns the data array                                                                                            // 5207
   * @return {Array}                                                                                                   // 5208
   */                                                                                                                  // 5209
  Handsontable.DataMap.prototype.getAll = function () {                                                                // 5210
    return this.dataSource;                                                                                            // 5211
  };                                                                                                                   // 5212
                                                                                                                       // 5213
  /**                                                                                                                  // 5214
   * Returns data range as array                                                                                       // 5215
   * @param {Object} start Start selection position                                                                    // 5216
   * @param {Object} end End selection position                                                                        // 5217
   * @param {Number} destination Destination of datamap.get                                                            // 5218
   * @return {Array}                                                                                                   // 5219
   */                                                                                                                  // 5220
  Handsontable.DataMap.prototype.getRange = function (start, end, destination) {                                       // 5221
    var r, rlen, c, clen, output = [], row;                                                                            // 5222
    var getFn = destination === this.DESTINATION_CLIPBOARD_GENERATOR ? this.getCopyable : this.get;                    // 5223
    rlen = Math.max(start.row, end.row);                                                                               // 5224
    clen = Math.max(start.col, end.col);                                                                               // 5225
    for (r = Math.min(start.row, end.row); r <= rlen; r++) {                                                           // 5226
      row = [];                                                                                                        // 5227
      for (c = Math.min(start.col, end.col); c <= clen; c++) {                                                         // 5228
        row.push(getFn.call(this, r, this.colToProp(c)));                                                              // 5229
      }                                                                                                                // 5230
      output.push(row);                                                                                                // 5231
    }                                                                                                                  // 5232
    return output;                                                                                                     // 5233
  };                                                                                                                   // 5234
                                                                                                                       // 5235
  /**                                                                                                                  // 5236
   * Return data as text (tab separated columns)                                                                       // 5237
   * @param {Object} start (Optional) Start selection position                                                         // 5238
   * @param {Object} end (Optional) End selection position                                                             // 5239
   * @return {String}                                                                                                  // 5240
   */                                                                                                                  // 5241
  Handsontable.DataMap.prototype.getText = function (start, end) {                                                     // 5242
    return SheetClip.stringify(this.getRange(start, end, this.DESTINATION_RENDERER));                                  // 5243
  };                                                                                                                   // 5244
                                                                                                                       // 5245
  /**                                                                                                                  // 5246
   * Return data as copyable text (tab separated columns intended for clipboard copy to an external application)       // 5247
   * @param {Object} start (Optional) Start selection position                                                         // 5248
   * @param {Object} end (Optional) End selection position                                                             // 5249
   * @return {String}                                                                                                  // 5250
   */                                                                                                                  // 5251
  Handsontable.DataMap.prototype.getCopyableText = function (start, end) {                                             // 5252
    return SheetClip.stringify(this.getRange(start, end, this.DESTINATION_CLIPBOARD_GENERATOR));                       // 5253
  };                                                                                                                   // 5254
                                                                                                                       // 5255
})(Handsontable);                                                                                                      // 5256
                                                                                                                       // 5257
(function (Handsontable) {                                                                                             // 5258
  'use strict';                                                                                                        // 5259
                                                                                                                       // 5260
  /*                                                                                                                   // 5261
    Adds appropriate CSS class to table cell, based on cellProperties                                                  // 5262
   */                                                                                                                  // 5263
  Handsontable.renderers.cellDecorator = function (instance, TD, row, col, prop, value, cellProperties) {              // 5264
    if (cellProperties.className) {                                                                                    // 5265
      if(TD.className) {                                                                                               // 5266
        TD.className = TD.className + " " + cellProperties.className;                                                  // 5267
      } else {                                                                                                         // 5268
        TD.className = cellProperties.className;                                                                       // 5269
      }                                                                                                                // 5270
                                                                                                                       // 5271
    }                                                                                                                  // 5272
                                                                                                                       // 5273
    if (cellProperties.readOnly) {                                                                                     // 5274
      Handsontable.Dom.addClass(TD, cellProperties.readOnlyCellClassName);                                             // 5275
    }                                                                                                                  // 5276
                                                                                                                       // 5277
    if (cellProperties.valid === false && cellProperties.invalidCellClassName) {                                       // 5278
      Handsontable.Dom.addClass(TD, cellProperties.invalidCellClassName);                                              // 5279
    }                                                                                                                  // 5280
                                                                                                                       // 5281
    if (cellProperties.wordWrap === false && cellProperties.noWordWrapClassName) {                                     // 5282
      Handsontable.Dom.addClass(TD, cellProperties.noWordWrapClassName);                                               // 5283
    }                                                                                                                  // 5284
                                                                                                                       // 5285
    if (!value && cellProperties.placeholder) {                                                                        // 5286
      Handsontable.Dom.addClass(TD, cellProperties.placeholderCellClassName);                                          // 5287
    }                                                                                                                  // 5288
  }                                                                                                                    // 5289
                                                                                                                       // 5290
})(Handsontable);                                                                                                      // 5291
/**                                                                                                                    // 5292
 * Default text renderer                                                                                               // 5293
 * @param {Object} instance Handsontable instance                                                                      // 5294
 * @param {Element} TD Table cell where to render                                                                      // 5295
 * @param {Number} row                                                                                                 // 5296
 * @param {Number} col                                                                                                 // 5297
 * @param {String|Number} prop Row object property name                                                                // 5298
 * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)                              // 5299
 * @param {Object} cellProperties Cell properites (shared by cell renderer and editor)                                 // 5300
 */                                                                                                                    // 5301
(function (Handsontable) {                                                                                             // 5302
  'use strict';                                                                                                        // 5303
                                                                                                                       // 5304
  var TextRenderer = function (instance, TD, row, col, prop, value, cellProperties) {                                  // 5305
                                                                                                                       // 5306
    Handsontable.renderers.cellDecorator.apply(this, arguments);                                                       // 5307
                                                                                                                       // 5308
    if (!value && cellProperties.placeholder) {                                                                        // 5309
      value = cellProperties.placeholder;                                                                              // 5310
    }                                                                                                                  // 5311
                                                                                                                       // 5312
    var escaped = Handsontable.helper.stringify(value);                                                                // 5313
                                                                                                                       // 5314
    if (cellProperties.rendererTemplate) {                                                                             // 5315
      Handsontable.Dom.empty(TD);                                                                                      // 5316
      var TEMPLATE = document.createElement('TEMPLATE');                                                               // 5317
      TEMPLATE.setAttribute('bind', '{{}}');                                                                           // 5318
      TEMPLATE.innerHTML = cellProperties.rendererTemplate;                                                            // 5319
      HTMLTemplateElement.decorate(TEMPLATE);                                                                          // 5320
      TEMPLATE.model = instance.getSourceDataAtRow(row);                                                               // 5321
      TD.appendChild(TEMPLATE);                                                                                        // 5322
    }                                                                                                                  // 5323
    else {                                                                                                             // 5324
      Handsontable.Dom.fastInnerText(TD, escaped); //this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips
    }                                                                                                                  // 5326
                                                                                                                       // 5327
  };                                                                                                                   // 5328
                                                                                                                       // 5329
  //Handsontable.TextRenderer = TextRenderer; //Left for backward compatibility                                        // 5330
  Handsontable.renderers.TextRenderer = TextRenderer;                                                                  // 5331
  Handsontable.renderers.registerRenderer('text', TextRenderer);                                                       // 5332
                                                                                                                       // 5333
})(Handsontable);                                                                                                      // 5334
                                                                                                                       // 5335
(function (Handsontable) {                                                                                             // 5336
                                                                                                                       // 5337
  var clonableWRAPPER = document.createElement('DIV');                                                                 // 5338
  clonableWRAPPER.className = 'htAutocompleteWrapper';                                                                 // 5339
                                                                                                                       // 5340
  var clonableARROW = document.createElement('DIV');                                                                   // 5341
  clonableARROW.className = 'htAutocompleteArrow';                                                                     // 5342
  clonableARROW.appendChild(document.createTextNode(String.fromCharCode(9660))); // workaround for https://github.com/handsontable/handsontable/issues/1946
//this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips
                                                                                                                       // 5345
  var wrapTdContentWithWrapper = function(TD, WRAPPER){                                                                // 5346
    WRAPPER.innerHTML = TD.innerHTML;                                                                                  // 5347
    Handsontable.Dom.empty(TD);                                                                                        // 5348
    TD.appendChild(WRAPPER);                                                                                           // 5349
  };                                                                                                                   // 5350
                                                                                                                       // 5351
  /**                                                                                                                  // 5352
   * Autocomplete renderer                                                                                             // 5353
   * @param {Object} instance Handsontable instance                                                                    // 5354
   * @param {Element} TD Table cell where to render                                                                    // 5355
   * @param {Number} row                                                                                               // 5356
   * @param {Number} col                                                                                               // 5357
   * @param {String|Number} prop Row object property name                                                              // 5358
   * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)                            // 5359
   * @param {Object} cellProperties Cell properites (shared by cell renderer and editor)                               // 5360
   */                                                                                                                  // 5361
  var AutocompleteRenderer = function (instance, TD, row, col, prop, value, cellProperties) {                          // 5362
                                                                                                                       // 5363
    var WRAPPER = clonableWRAPPER.cloneNode(true); //this is faster than createElement                                 // 5364
    var ARROW = clonableARROW.cloneNode(true); //this is faster than createElement                                     // 5365
                                                                                                                       // 5366
    Handsontable.renderers.TextRenderer(instance, TD, row, col, prop, value, cellProperties);                          // 5367
                                                                                                                       // 5368
    TD.appendChild(ARROW);                                                                                             // 5369
    Handsontable.Dom.addClass(TD, 'htAutocomplete');                                                                   // 5370
                                                                                                                       // 5371
                                                                                                                       // 5372
    if (!TD.firstChild) { //http://jsperf.com/empty-node-if-needed                                                     // 5373
      //otherwise empty fields appear borderless in demo/renderers.html (IE)                                           // 5374
      TD.appendChild(document.createTextNode(String.fromCharCode(160))); // workaround for https://github.com/handsontable/handsontable/issues/1946
      //this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips
    }                                                                                                                  // 5377
                                                                                                                       // 5378
                                                                                                                       // 5379
                                                                                                                       // 5380
    if (!instance.acArrowListener) {                                                                                   // 5381
      var eventManager = Handsontable.eventManager(instance);                                                          // 5382
                                                                                                                       // 5383
      //not very elegant but easy and fast                                                                             // 5384
      instance.acArrowListener = function (event) {                                                                    // 5385
        if (Handsontable.Dom.hasClass(event.target,'htAutocompleteArrow')) {                                           // 5386
          instance.view.wt.getSetting('onCellDblClick', null, new WalkontableCellCoords(row, col), TD);                // 5387
        }                                                                                                              // 5388
      };                                                                                                               // 5389
                                                                                                                       // 5390
      eventManager.addEventListener(instance.rootElement,'mousedown',instance.acArrowListener);                        // 5391
                                                                                                                       // 5392
      //We need to unbind the listener after the table has been destroyed                                              // 5393
      instance.addHookOnce('afterDestroy', function () {                                                               // 5394
        eventManager.clear();                                                                                          // 5395
      });                                                                                                              // 5396
                                                                                                                       // 5397
    }                                                                                                                  // 5398
  };                                                                                                                   // 5399
                                                                                                                       // 5400
  Handsontable.AutocompleteRenderer = AutocompleteRenderer;                                                            // 5401
  Handsontable.renderers.AutocompleteRenderer = AutocompleteRenderer;                                                  // 5402
  Handsontable.renderers.registerRenderer('autocomplete', AutocompleteRenderer);                                       // 5403
})(Handsontable);                                                                                                      // 5404
                                                                                                                       // 5405
/**                                                                                                                    // 5406
 * Checkbox renderer                                                                                                   // 5407
 * @param {Object} instance Handsontable instance                                                                      // 5408
 * @param {Element} TD Table cell where to render                                                                      // 5409
 * @param {Number} row                                                                                                 // 5410
 * @param {Number} col                                                                                                 // 5411
 * @param {String|Number} prop Row object property name                                                                // 5412
 * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)                              // 5413
 * @param {Object} cellProperties Cell properites (shared by cell renderer and editor)                                 // 5414
 */                                                                                                                    // 5415
(function (Handsontable) {                                                                                             // 5416
                                                                                                                       // 5417
  'use strict';                                                                                                        // 5418
                                                                                                                       // 5419
  var clonableINPUT = document.createElement('INPUT');                                                                 // 5420
  clonableINPUT.className = 'htCheckboxRendererInput';                                                                 // 5421
  clonableINPUT.type = 'checkbox';                                                                                     // 5422
  clonableINPUT.setAttribute('autocomplete', 'off');                                                                   // 5423
                                                                                                                       // 5424
  var CheckboxRenderer = function (instance, TD, row, col, prop, value, cellProperties) {                              // 5425
                                                                                                                       // 5426
    var eventManager = Handsontable.eventManager(instance);                                                            // 5427
                                                                                                                       // 5428
    if (typeof cellProperties.checkedTemplate === "undefined") {                                                       // 5429
      cellProperties.checkedTemplate = true;                                                                           // 5430
    }                                                                                                                  // 5431
    if (typeof cellProperties.uncheckedTemplate === "undefined") {                                                     // 5432
      cellProperties.uncheckedTemplate = false;                                                                        // 5433
    }                                                                                                                  // 5434
                                                                                                                       // 5435
    Handsontable.Dom.empty(TD); //TODO identify under what circumstances this line can be removed                      // 5436
                                                                                                                       // 5437
    var INPUT = clonableINPUT.cloneNode(false); //this is faster than createElement                                    // 5438
                                                                                                                       // 5439
    if (value === cellProperties.checkedTemplate || value === Handsontable.helper.stringify(cellProperties.checkedTemplate)) {
      INPUT.checked = true;                                                                                            // 5441
      TD.appendChild(INPUT);                                                                                           // 5442
    }                                                                                                                  // 5443
    else if (value === cellProperties.uncheckedTemplate || value === Handsontable.helper.stringify(cellProperties.uncheckedTemplate)) {
      TD.appendChild(INPUT);                                                                                           // 5445
    }                                                                                                                  // 5446
    else if (value === null) { //default value                                                                         // 5447
      INPUT.className += ' noValue';                                                                                   // 5448
      TD.appendChild(INPUT);                                                                                           // 5449
    }                                                                                                                  // 5450
    else {                                                                                                             // 5451
      Handsontable.Dom.fastInnerText(TD, '#bad value#'); //this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips
    }                                                                                                                  // 5453
                                                                                                                       // 5454
    if (cellProperties.readOnly) {                                                                                     // 5455
      eventManager.addEventListener(INPUT,'click',function (event) {                                                   // 5456
        event.preventDefault();                                                                                        // 5457
      });                                                                                                              // 5458
    }                                                                                                                  // 5459
    else {                                                                                                             // 5460
      eventManager.addEventListener(INPUT,'mousedown',function (event) {                                               // 5461
        Handsontable.helper.stopPropagation(event);                                                                    // 5462
        //event.stopPropagation(); //otherwise can confuse cell mousedown handler                                      // 5463
      });                                                                                                              // 5464
                                                                                                                       // 5465
      eventManager.addEventListener(INPUT,'mouseup',function (event) {                                                 // 5466
        Handsontable.helper.stopPropagation(event);                                                                    // 5467
        //event.stopPropagation(); //otherwise can confuse cell dblclick handler                                       // 5468
      });                                                                                                              // 5469
                                                                                                                       // 5470
      eventManager.addEventListener(INPUT,'change',function () {                                                       // 5471
        if (this.checked) {                                                                                            // 5472
          instance.setDataAtRowProp(row, prop, cellProperties.checkedTemplate);                                        // 5473
        }                                                                                                              // 5474
        else {                                                                                                         // 5475
          instance.setDataAtRowProp(row, prop, cellProperties.uncheckedTemplate);                                      // 5476
        }                                                                                                              // 5477
      });                                                                                                              // 5478
    }                                                                                                                  // 5479
                                                                                                                       // 5480
    if(!instance.CheckboxRenderer || !instance.CheckboxRenderer.beforeKeyDownHookBound){                               // 5481
      instance.CheckboxRenderer = {                                                                                    // 5482
        beforeKeyDownHookBound : true                                                                                  // 5483
      };                                                                                                               // 5484
                                                                                                                       // 5485
      instance.addHook('beforeKeyDown', function(event){                                                               // 5486
                                                                                                                       // 5487
        Handsontable.Dom.enableImmediatePropagation(event);                                                            // 5488
                                                                                                                       // 5489
        if(event.keyCode == Handsontable.helper.keyCode.SPACE || event.keyCode == Handsontable.helper.keyCode.ENTER){  // 5490
                                                                                                                       // 5491
          var cell, checkbox, cellProperties;                                                                          // 5492
                                                                                                                       // 5493
          var selRange = instance.getSelectedRange();                                                                  // 5494
          var topLeft = selRange.getTopLeftCorner();                                                                   // 5495
          var bottomRight = selRange.getBottomRightCorner();                                                           // 5496
                                                                                                                       // 5497
          for(var row = topLeft.row; row <= bottomRight.row; row++ ){                                                  // 5498
            for(var col = topLeft.col; col <= bottomRight.col; col++){                                                 // 5499
              cell = instance.getCell(row, col);                                                                       // 5500
              cellProperties = instance.getCellMeta(row, col);                                                         // 5501
                                                                                                                       // 5502
              checkbox = cell.querySelectorAll('input[type=checkbox]');                                                // 5503
                                                                                                                       // 5504
              if(checkbox.length > 0 && !cellProperties.readOnly){                                                     // 5505
                                                                                                                       // 5506
                if(!event.isImmediatePropagationStopped()){                                                            // 5507
                  event.stopImmediatePropagation();                                                                    // 5508
                  event.preventDefault();                                                                              // 5509
                }                                                                                                      // 5510
                                                                                                                       // 5511
                for(var i = 0, len = checkbox.length; i < len; i++){                                                   // 5512
                  checkbox[i].checked = !checkbox[i].checked;                                                          // 5513
                  eventManager.fireEvent(checkbox[i], 'change');                                                       // 5514
                }                                                                                                      // 5515
                                                                                                                       // 5516
              }                                                                                                        // 5517
                                                                                                                       // 5518
            }                                                                                                          // 5519
          }                                                                                                            // 5520
        }                                                                                                              // 5521
      });                                                                                                              // 5522
    }                                                                                                                  // 5523
                                                                                                                       // 5524
  };                                                                                                                   // 5525
                                                                                                                       // 5526
  Handsontable.CheckboxRenderer = CheckboxRenderer;                                                                    // 5527
  Handsontable.renderers.CheckboxRenderer = CheckboxRenderer;                                                          // 5528
  Handsontable.renderers.registerRenderer('checkbox', CheckboxRenderer);                                               // 5529
                                                                                                                       // 5530
})(Handsontable);                                                                                                      // 5531
                                                                                                                       // 5532
/**                                                                                                                    // 5533
 * Numeric cell renderer                                                                                               // 5534
 * @param {Object} instance Handsontable instance                                                                      // 5535
 * @param {Element} TD Table cell where to render                                                                      // 5536
 * @param {Number} row                                                                                                 // 5537
 * @param {Number} col                                                                                                 // 5538
 * @param {String|Number} prop Row object property name                                                                // 5539
 * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)                              // 5540
 * @param {Object} cellProperties Cell properites (shared by cell renderer and editor)                                 // 5541
 */                                                                                                                    // 5542
(function (Handsontable) {                                                                                             // 5543
                                                                                                                       // 5544
  'use strict';                                                                                                        // 5545
                                                                                                                       // 5546
  var NumericRenderer = function (instance, TD, row, col, prop, value, cellProperties) {                               // 5547
    if (Handsontable.helper.isNumeric(value)) {                                                                        // 5548
      if (typeof cellProperties.language !== 'undefined') {                                                            // 5549
        numeral.language(cellProperties.language)                                                                      // 5550
      }                                                                                                                // 5551
      value = numeral(value).format(cellProperties.format || '0'); //docs: http://numeraljs.com/                       // 5552
      Handsontable.Dom.addClass(TD, 'htNumeric');                                                                      // 5553
    }                                                                                                                  // 5554
    Handsontable.renderers.TextRenderer(instance, TD, row, col, prop, value, cellProperties);                          // 5555
  };                                                                                                                   // 5556
                                                                                                                       // 5557
  Handsontable.NumericRenderer = NumericRenderer; //Left for backward compatibility with versions prior 0.10.0         // 5558
  Handsontable.renderers.NumericRenderer = NumericRenderer;                                                            // 5559
  Handsontable.renderers.registerRenderer('numeric', NumericRenderer);                                                 // 5560
                                                                                                                       // 5561
})(Handsontable);                                                                                                      // 5562
(function(Handosntable){                                                                                               // 5563
                                                                                                                       // 5564
  'use strict';                                                                                                        // 5565
                                                                                                                       // 5566
  var PasswordRenderer = function (instance, TD, row, col, prop, value, cellProperties) {                              // 5567
    Handsontable.renderers.TextRenderer.apply(this, arguments);                                                        // 5568
                                                                                                                       // 5569
    value = TD.innerHTML;                                                                                              // 5570
                                                                                                                       // 5571
    var hash;                                                                                                          // 5572
    var hashLength = cellProperties.hashLength || value.length;                                                        // 5573
    var hashSymbol = cellProperties.hashSymbol || '*';                                                                 // 5574
                                                                                                                       // 5575
    for( hash = ''; hash.split(hashSymbol).length - 1 < hashLength; hash += hashSymbol);                               // 5576
                                                                                                                       // 5577
    Handsontable.Dom.fastInnerHTML(TD, hash);                                                                          // 5578
                                                                                                                       // 5579
  };                                                                                                                   // 5580
                                                                                                                       // 5581
  Handosntable.PasswordRenderer = PasswordRenderer;                                                                    // 5582
  Handosntable.renderers.PasswordRenderer = PasswordRenderer;                                                          // 5583
  Handosntable.renderers.registerRenderer('password', PasswordRenderer);                                               // 5584
                                                                                                                       // 5585
})(Handsontable);                                                                                                      // 5586
(function (Handsontable) {                                                                                             // 5587
                                                                                                                       // 5588
  function HtmlRenderer(instance, TD, row, col, prop, value, cellProperties){                                          // 5589
                                                                                                                       // 5590
    Handsontable.renderers.cellDecorator.apply(this, arguments);                                                       // 5591
                                                                                                                       // 5592
    Handsontable.Dom.fastInnerHTML(TD, value);                                                                         // 5593
  }                                                                                                                    // 5594
                                                                                                                       // 5595
  Handsontable.renderers.registerRenderer('html', HtmlRenderer);                                                       // 5596
  Handsontable.renderers.HtmlRenderer = HtmlRenderer;                                                                  // 5597
                                                                                                                       // 5598
})(Handsontable);                                                                                                      // 5599
                                                                                                                       // 5600
(function (Handsontable) {                                                                                             // 5601
  'use strict';                                                                                                        // 5602
                                                                                                                       // 5603
  Handsontable.EditorState = {                                                                                         // 5604
    VIRGIN: 'STATE_VIRGIN', //before editing                                                                           // 5605
    EDITING: 'STATE_EDITING',                                                                                          // 5606
    WAITING: 'STATE_WAITING', //waiting for async validation                                                           // 5607
    FINISHED: 'STATE_FINISHED'                                                                                         // 5608
  };                                                                                                                   // 5609
                                                                                                                       // 5610
  function BaseEditor(instance) {                                                                                      // 5611
    this.instance = instance;                                                                                          // 5612
    this.state = Handsontable.EditorState.VIRGIN;                                                                      // 5613
                                                                                                                       // 5614
    this._opened = false;                                                                                              // 5615
    this._closeCallback = null;                                                                                        // 5616
                                                                                                                       // 5617
    this.init();                                                                                                       // 5618
  }                                                                                                                    // 5619
                                                                                                                       // 5620
  BaseEditor.prototype._fireCallbacks = function(result) {                                                             // 5621
    if(this._closeCallback){                                                                                           // 5622
      this._closeCallback(result);                                                                                     // 5623
      this._closeCallback = null;                                                                                      // 5624
    }                                                                                                                  // 5625
                                                                                                                       // 5626
  }                                                                                                                    // 5627
                                                                                                                       // 5628
  BaseEditor.prototype.init = function(){};                                                                            // 5629
                                                                                                                       // 5630
  BaseEditor.prototype.getValue = function(){                                                                          // 5631
    throw Error('Editor getValue() method unimplemented');                                                             // 5632
  };                                                                                                                   // 5633
                                                                                                                       // 5634
  BaseEditor.prototype.setValue = function(newValue){                                                                  // 5635
    throw Error('Editor setValue() method unimplemented');                                                             // 5636
  };                                                                                                                   // 5637
                                                                                                                       // 5638
  BaseEditor.prototype.open = function(){                                                                              // 5639
    throw Error('Editor open() method unimplemented');                                                                 // 5640
  };                                                                                                                   // 5641
                                                                                                                       // 5642
  BaseEditor.prototype.close = function(){                                                                             // 5643
    throw Error('Editor close() method unimplemented');                                                                // 5644
  };                                                                                                                   // 5645
                                                                                                                       // 5646
  BaseEditor.prototype.prepare = function(row, col, prop, td, originalValue, cellProperties){                          // 5647
    this.TD = td;                                                                                                      // 5648
    this.row = row;                                                                                                    // 5649
    this.col = col;                                                                                                    // 5650
    this.prop = prop;                                                                                                  // 5651
    this.originalValue = originalValue;                                                                                // 5652
    this.cellProperties = cellProperties;                                                                              // 5653
                                                                                                                       // 5654
    this.state = Handsontable.EditorState.VIRGIN;                                                                      // 5655
  };                                                                                                                   // 5656
                                                                                                                       // 5657
  BaseEditor.prototype.extend = function(){                                                                            // 5658
    var baseClass = this.constructor;                                                                                  // 5659
    function Editor(){                                                                                                 // 5660
      baseClass.apply(this, arguments);                                                                                // 5661
    }                                                                                                                  // 5662
                                                                                                                       // 5663
    function inherit(Child, Parent){                                                                                   // 5664
      function Bridge() {                                                                                              // 5665
      }                                                                                                                // 5666
                                                                                                                       // 5667
      Bridge.prototype = Parent.prototype;                                                                             // 5668
      Child.prototype = new Bridge();                                                                                  // 5669
      Child.prototype.constructor = Child;                                                                             // 5670
      return Child;                                                                                                    // 5671
    }                                                                                                                  // 5672
                                                                                                                       // 5673
    return inherit(Editor, baseClass);                                                                                 // 5674
  };                                                                                                                   // 5675
                                                                                                                       // 5676
  BaseEditor.prototype.saveValue = function (val, ctrlDown) {                                                          // 5677
    if (ctrlDown) { //if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)
      var sel = this.instance.getSelected()                                                                            // 5679
        , tmp;                                                                                                         // 5680
                                                                                                                       // 5681
      if(sel[0] > sel[2]) {                                                                                            // 5682
        tmp = sel[0];                                                                                                  // 5683
        sel[0] = sel[2];                                                                                               // 5684
        sel[2] = tmp;                                                                                                  // 5685
      }                                                                                                                // 5686
      if(sel[1] > sel[3]) {                                                                                            // 5687
        tmp = sel[1];                                                                                                  // 5688
        sel[1] = sel[3];                                                                                               // 5689
        sel[3] = tmp;                                                                                                  // 5690
      }                                                                                                                // 5691
                                                                                                                       // 5692
      this.instance.populateFromArray(sel[0], sel[1], val, sel[2], sel[3], 'edit');                                    // 5693
    }                                                                                                                  // 5694
    else {                                                                                                             // 5695
      this.instance.populateFromArray(this.row, this.col, val, null, null, 'edit');                                    // 5696
    }                                                                                                                  // 5697
  };                                                                                                                   // 5698
                                                                                                                       // 5699
  BaseEditor.prototype.beginEditing = function(initialValue){                                                          // 5700
    if (this.state != Handsontable.EditorState.VIRGIN) {                                                               // 5701
      return;                                                                                                          // 5702
    }                                                                                                                  // 5703
                                                                                                                       // 5704
    this.instance.view.scrollViewport(new WalkontableCellCoords(this.row, this.col));                                  // 5705
    this.instance.view.render();                                                                                       // 5706
                                                                                                                       // 5707
    this.state = Handsontable.EditorState.EDITING;                                                                     // 5708
                                                                                                                       // 5709
    initialValue = typeof initialValue == 'string' ? initialValue : this.originalValue;                                // 5710
                                                                                                                       // 5711
    this.setValue(Handsontable.helper.stringify(initialValue));                                                        // 5712
                                                                                                                       // 5713
    this.open();                                                                                                       // 5714
    this._opened = true;                                                                                               // 5715
    this.focus();                                                                                                      // 5716
                                                                                                                       // 5717
    this.instance.view.render(); //only rerender the selections (FillHandle should disappear when beginediting is triggered)
  };                                                                                                                   // 5719
                                                                                                                       // 5720
  BaseEditor.prototype.finishEditing = function (restoreOriginalValue, ctrlDown, callback) {                           // 5721
                                                                                                                       // 5722
    if (callback) {                                                                                                    // 5723
      var previousCloseCallback = this._closeCallback;                                                                 // 5724
      this._closeCallback = function (result) {                                                                        // 5725
        if(previousCloseCallback){                                                                                     // 5726
          previousCloseCallback(result);                                                                               // 5727
        }                                                                                                              // 5728
                                                                                                                       // 5729
        callback(result);                                                                                              // 5730
      };                                                                                                               // 5731
    }                                                                                                                  // 5732
                                                                                                                       // 5733
    if (this.isWaiting()) {                                                                                            // 5734
      return;                                                                                                          // 5735
    }                                                                                                                  // 5736
                                                                                                                       // 5737
    if (this.state == Handsontable.EditorState.VIRGIN) {                                                               // 5738
      var that = this;                                                                                                 // 5739
      this.instance._registerTimeout(setTimeout(function () {                                                          // 5740
        that._fireCallbacks(true);                                                                                     // 5741
      }, 0));                                                                                                          // 5742
      return;                                                                                                          // 5743
    }                                                                                                                  // 5744
                                                                                                                       // 5745
    if (this.state == Handsontable.EditorState.EDITING) {                                                              // 5746
                                                                                                                       // 5747
      if (restoreOriginalValue) {                                                                                      // 5748
                                                                                                                       // 5749
        this.cancelChanges();                                                                                          // 5750
        this.instance.view.render();                                                                                   // 5751
        return;                                                                                                        // 5752
                                                                                                                       // 5753
      }                                                                                                                // 5754
                                                                                                                       // 5755
                                                                                                                       // 5756
      var val = [                                                                                                      // 5757
        [String.prototype.trim.call(this.getValue())] //String.prototype.trim is defined in Walkontable polyfill.js    // 5758
      ];                                                                                                               // 5759
                                                                                                                       // 5760
      this.state = Handsontable.EditorState.WAITING;                                                                   // 5761
                                                                                                                       // 5762
      this.saveValue(val, ctrlDown);                                                                                   // 5763
                                                                                                                       // 5764
      if(this.instance.getCellValidator(this.cellProperties)){                                                         // 5765
        var that = this;                                                                                               // 5766
        this.instance.addHookOnce('afterValidate', function (result) {                                                 // 5767
          that.state = Handsontable.EditorState.FINISHED;                                                              // 5768
          that.discardEditor(result);                                                                                  // 5769
        });                                                                                                            // 5770
      } else {                                                                                                         // 5771
        this.state = Handsontable.EditorState.FINISHED;                                                                // 5772
        this.discardEditor(true);                                                                                      // 5773
      }                                                                                                                // 5774
                                                                                                                       // 5775
    }                                                                                                                  // 5776
  };                                                                                                                   // 5777
                                                                                                                       // 5778
  BaseEditor.prototype.cancelChanges = function () {                                                                   // 5779
    this.state = Handsontable.EditorState.FINISHED;                                                                    // 5780
    this.discardEditor();                                                                                              // 5781
  };                                                                                                                   // 5782
                                                                                                                       // 5783
  BaseEditor.prototype.discardEditor = function (result) {                                                             // 5784
    if (this.state !== Handsontable.EditorState.FINISHED) {                                                            // 5785
      return;                                                                                                          // 5786
    }                                                                                                                  // 5787
                                                                                                                       // 5788
    if (result === false && this.cellProperties.allowInvalid !== true) { //validator was defined and failed            // 5789
                                                                                                                       // 5790
      this.instance.selectCell(this.row, this.col);                                                                    // 5791
      this.focus();                                                                                                    // 5792
                                                                                                                       // 5793
      this.state = Handsontable.EditorState.EDITING;                                                                   // 5794
                                                                                                                       // 5795
      this._fireCallbacks(false);                                                                                      // 5796
    }                                                                                                                  // 5797
    else {                                                                                                             // 5798
      this.close();                                                                                                    // 5799
      this._opened = false;                                                                                            // 5800
                                                                                                                       // 5801
      this.state = Handsontable.EditorState.VIRGIN;                                                                    // 5802
                                                                                                                       // 5803
      this._fireCallbacks(true);                                                                                       // 5804
    }                                                                                                                  // 5805
                                                                                                                       // 5806
  };                                                                                                                   // 5807
                                                                                                                       // 5808
  BaseEditor.prototype.isOpened = function(){                                                                          // 5809
    return this._opened;                                                                                               // 5810
  };                                                                                                                   // 5811
                                                                                                                       // 5812
  BaseEditor.prototype.isWaiting = function () {                                                                       // 5813
    return this.state === Handsontable.EditorState.WAITING;                                                            // 5814
  };                                                                                                                   // 5815
                                                                                                                       // 5816
  Handsontable.editors.BaseEditor = BaseEditor;                                                                        // 5817
                                                                                                                       // 5818
})(Handsontable);                                                                                                      // 5819
                                                                                                                       // 5820
(function(Handsontable){                                                                                               // 5821
  var TextEditor = Handsontable.editors.BaseEditor.prototype.extend();                                                 // 5822
                                                                                                                       // 5823
  TextEditor.prototype.init = function(){                                                                              // 5824
    var that = this;                                                                                                   // 5825
    this.createElements();                                                                                             // 5826
    this.eventManager = new Handsontable.eventManager(this);                                                           // 5827
    this.bindEvents();                                                                                                 // 5828
    this.autoResize = autoResize();                                                                                    // 5829
                                                                                                                       // 5830
    this.instance.addHook('afterDestroy', function () {                                                                // 5831
      that.destroy();                                                                                                  // 5832
    });                                                                                                                // 5833
  };                                                                                                                   // 5834
                                                                                                                       // 5835
  TextEditor.prototype.getValue = function(){                                                                          // 5836
    return this.TEXTAREA.value                                                                                         // 5837
  };                                                                                                                   // 5838
                                                                                                                       // 5839
  TextEditor.prototype.setValue = function(newValue){                                                                  // 5840
    this.TEXTAREA.value = newValue;                                                                                    // 5841
  };                                                                                                                   // 5842
                                                                                                                       // 5843
  var onBeforeKeyDown =  function onBeforeKeyDown(event){                                                              // 5844
                                                                                                                       // 5845
    var instance = this;                                                                                               // 5846
    var that = instance.getActiveEditor();                                                                             // 5847
                                                                                                                       // 5848
    var keyCodes = Handsontable.helper.keyCode;                                                                        // 5849
    var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey; //catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)
                                                                                                                       // 5851
    Handsontable.Dom.enableImmediatePropagation(event);                                                                // 5852
                                                                                                                       // 5853
    //Process only events that have been fired in the editor                                                           // 5854
    if (event.target !== that.TEXTAREA || event.isImmediatePropagationStopped()){                                      // 5855
      return;                                                                                                          // 5856
    }                                                                                                                  // 5857
                                                                                                                       // 5858
    if (event.keyCode === 17 || event.keyCode === 224 || event.keyCode === 91 || event.keyCode === 93) {               // 5859
      //when CTRL or its equivalent is pressed and cell is edited, don't prepare selectable text in textarea           // 5860
      event.stopImmediatePropagation();                                                                                // 5861
      return;                                                                                                          // 5862
    }                                                                                                                  // 5863
                                                                                                                       // 5864
    switch (event.keyCode) {                                                                                           // 5865
      case keyCodes.ARROW_RIGHT:                                                                                       // 5866
        if (Handsontable.Dom.getCaretPosition(that.TEXTAREA) !== that.TEXTAREA.value.length) {                         // 5867
          event.stopImmediatePropagation();                                                                            // 5868
        }                                                                                                              // 5869
        break;                                                                                                         // 5870
                                                                                                                       // 5871
      case keyCodes.ARROW_LEFT: /* arrow left */                                                                       // 5872
        if (Handsontable.Dom.getCaretPosition(that.TEXTAREA) !== 0) {                                                  // 5873
          event.stopImmediatePropagation();                                                                            // 5874
        }                                                                                                              // 5875
        break;                                                                                                         // 5876
                                                                                                                       // 5877
      case keyCodes.ENTER:                                                                                             // 5878
        var selected = that.instance.getSelected();                                                                    // 5879
        var isMultipleSelection = !(selected[0] === selected[2] && selected[1] === selected[3]);                       // 5880
        if ((ctrlDown && !isMultipleSelection) || event.altKey) { //if ctrl+enter or alt+enter, add new line           // 5881
          if(that.isOpened()){                                                                                         // 5882
            that.setValue(that.getValue() + '\n');                                                                     // 5883
            that.focus();                                                                                              // 5884
          } else {                                                                                                     // 5885
            that.beginEditing(that.originalValue + '\n')                                                               // 5886
          }                                                                                                            // 5887
          event.stopImmediatePropagation();                                                                            // 5888
        }                                                                                                              // 5889
        event.preventDefault(); //don't add newline to field                                                           // 5890
        break;                                                                                                         // 5891
                                                                                                                       // 5892
      case keyCodes.A:                                                                                                 // 5893
      case keyCodes.X:                                                                                                 // 5894
      case keyCodes.C:                                                                                                 // 5895
      case keyCodes.V:                                                                                                 // 5896
        if(ctrlDown){                                                                                                  // 5897
          event.stopImmediatePropagation(); //CTRL+A, CTRL+C, CTRL+V, CTRL+X should only work locally when cell is edited (not in table context)
        }                                                                                                              // 5899
        break;                                                                                                         // 5900
                                                                                                                       // 5901
      case keyCodes.BACKSPACE:                                                                                         // 5902
      case keyCodes.DELETE:                                                                                            // 5903
      case keyCodes.HOME:                                                                                              // 5904
      case keyCodes.END:                                                                                               // 5905
        event.stopImmediatePropagation(); //backspace, delete, home, end should only work locally when cell is edited (not in table context)
        break;                                                                                                         // 5907
    }                                                                                                                  // 5908
                                                                                                                       // 5909
    that.autoResize.resize(String.fromCharCode(event.keyCode));                                                        // 5910
  };                                                                                                                   // 5911
                                                                                                                       // 5912
                                                                                                                       // 5913
                                                                                                                       // 5914
  TextEditor.prototype.open = function(){                                                                              // 5915
    this.refreshDimensions(); //need it instantly, to prevent https://github.com/handsontable/handsontable/issues/348  // 5916
                                                                                                                       // 5917
    this.instance.addHook('beforeKeyDown', onBeforeKeyDown);                                                           // 5918
  };                                                                                                                   // 5919
                                                                                                                       // 5920
  TextEditor.prototype.close = function(){                                                                             // 5921
    this.textareaParentStyle.display = 'none';                                                                         // 5922
                                                                                                                       // 5923
    this.autoResize.unObserve();                                                                                       // 5924
                                                                                                                       // 5925
    if (document.activeElement === this.TEXTAREA) {                                                                    // 5926
      this.instance.listen(); //don't refocus the table if user focused some cell outside of HT on purpose             // 5927
    }                                                                                                                  // 5928
                                                                                                                       // 5929
    this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);                                                        // 5930
  };                                                                                                                   // 5931
                                                                                                                       // 5932
  TextEditor.prototype.focus = function(){                                                                             // 5933
    this.TEXTAREA.focus();                                                                                             // 5934
    Handsontable.Dom.setCaretPosition(this.TEXTAREA, this.TEXTAREA.value.length);                                      // 5935
  };                                                                                                                   // 5936
                                                                                                                       // 5937
  TextEditor.prototype.createElements = function () {                                                                  // 5938
//    this.$body = $(document.body);                                                                                   // 5939
                                                                                                                       // 5940
    this.TEXTAREA = document.createElement('TEXTAREA');                                                                // 5941
                                                                                                                       // 5942
    Handsontable.Dom.addClass(this.TEXTAREA, 'handsontableInput');                                                     // 5943
                                                                                                                       // 5944
    this.textareaStyle = this.TEXTAREA.style;                                                                          // 5945
    this.textareaStyle.width = 0;                                                                                      // 5946
    this.textareaStyle.height = 0;                                                                                     // 5947
                                                                                                                       // 5948
    this.TEXTAREA_PARENT = document.createElement('DIV');                                                              // 5949
    Handsontable.Dom.addClass(this.TEXTAREA_PARENT, 'handsontableInputHolder');                                        // 5950
                                                                                                                       // 5951
    this.textareaParentStyle = this.TEXTAREA_PARENT.style;                                                             // 5952
    this.textareaParentStyle.top = 0;                                                                                  // 5953
    this.textareaParentStyle.left = 0;                                                                                 // 5954
    this.textareaParentStyle.display = 'none';                                                                         // 5955
                                                                                                                       // 5956
    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);                                                                   // 5957
                                                                                                                       // 5958
    this.instance.rootElement.appendChild(this.TEXTAREA_PARENT);                                                       // 5959
                                                                                                                       // 5960
    var that = this;                                                                                                   // 5961
    this.instance._registerTimeout(setTimeout(function () {                                                            // 5962
      that.refreshDimensions();                                                                                        // 5963
    }, 0));                                                                                                            // 5964
  };                                                                                                                   // 5965
                                                                                                                       // 5966
  TextEditor.prototype.checkEditorSection = function () {                                                              // 5967
    if(this.row < this.instance.getSettings().fixedRowsTop) {                                                          // 5968
      if(this.col < this.instance.getSettings().fixedColumnsLeft) {                                                    // 5969
        return 'corner';                                                                                               // 5970
      } else {                                                                                                         // 5971
        return 'top';                                                                                                  // 5972
      }                                                                                                                // 5973
    } else {                                                                                                           // 5974
      if(this.col < this.instance.getSettings().fixedColumnsLeft) {                                                    // 5975
        return 'left';                                                                                                 // 5976
      }                                                                                                                // 5977
    }                                                                                                                  // 5978
  };                                                                                                                   // 5979
                                                                                                                       // 5980
  TextEditor.prototype.getEditedCell = function () {                                                                   // 5981
    var editorSection = this.checkEditorSection()                                                                      // 5982
      , editedCell;                                                                                                    // 5983
                                                                                                                       // 5984
    switch (editorSection) {                                                                                           // 5985
      case 'top':                                                                                                      // 5986
        editedCell = this.instance.view.wt.wtScrollbars.vertical.clone.wtTable.getCell({row: this.row, col: this.col});
        this.textareaParentStyle.zIndex = 101;                                                                         // 5988
        break;                                                                                                         // 5989
      case 'corner':                                                                                                   // 5990
        editedCell = this.instance.view.wt.wtScrollbars.corner.clone.wtTable.getCell({row: this.row, col: this.col});  // 5991
        this.textareaParentStyle.zIndex = 103;                                                                         // 5992
        break;                                                                                                         // 5993
      case 'left':                                                                                                     // 5994
        editedCell = this.instance.view.wt.wtScrollbars.horizontal.clone.wtTable.getCell({row: this.row, col: this.col});
        this.textareaParentStyle.zIndex = 102;                                                                         // 5996
        break;                                                                                                         // 5997
      default :                                                                                                        // 5998
        editedCell = this.instance.getCell(this.row, this.col);                                                        // 5999
        this.textareaParentStyle.zIndex = "";                                                                          // 6000
        break;                                                                                                         // 6001
    }                                                                                                                  // 6002
                                                                                                                       // 6003
    return editedCell != -1 && editedCell != -2 ? editedCell : void 0;                                                 // 6004
  };                                                                                                                   // 6005
                                                                                                                       // 6006
                                                                                                                       // 6007
  TextEditor.prototype.refreshDimensions = function () {                                                               // 6008
    if (this.state !== Handsontable.EditorState.EDITING) {                                                             // 6009
      return;                                                                                                          // 6010
    }                                                                                                                  // 6011
                                                                                                                       // 6012
    ///start prepare textarea position                                                                                 // 6013
//    this.TD = this.instance.getCell(this.row, this.col);                                                             // 6014
    this.TD = this.getEditedCell();                                                                                    // 6015
                                                                                                                       // 6016
    if (!this.TD) {                                                                                                    // 6017
      //TD is outside of the viewport. Otherwise throws exception when scrolling the table while a cell is edited      // 6018
      return;                                                                                                          // 6019
    }                                                                                                                  // 6020
    //var $td = $(this.TD); //because old td may have been scrolled out with scrollViewport                            // 6021
                                                                                                                       // 6022
    var currentOffset = Handsontable.Dom.offset(this.TD);                                                              // 6023
    var containerOffset = Handsontable.Dom.offset(this.instance.rootElement);                                          // 6024
    var editTop = currentOffset.top - containerOffset.top - 1;                                                         // 6025
    var editLeft = currentOffset.left - containerOffset.left - 1;                                                      // 6026
                                                                                                                       // 6027
    var settings = this.instance.getSettings();                                                                        // 6028
    var rowHeadersCount = settings.rowHeaders === false ? 0 : 1;                                                       // 6029
    var colHeadersCount = settings.colHeaders === false ? 0 : 1;                                                       // 6030
    var editorSection = this.checkEditorSection();                                                                     // 6031
    var cssTransformOffset;                                                                                            // 6032
                                                                                                                       // 6033
    // TODO: Refactor this to the new instance.getCell method (from #ply-59), after 0.12.1 is released                 // 6034
    switch(editorSection) {                                                                                            // 6035
      case 'top':                                                                                                      // 6036
        cssTransformOffset = Handsontable.Dom.getCssTransform(this.instance.view.wt.wtScrollbars.vertical.clone.wtTable.holder.parentNode);
        break;                                                                                                         // 6038
      case 'left':                                                                                                     // 6039
        cssTransformOffset = Handsontable.Dom.getCssTransform(this.instance.view.wt.wtScrollbars.horizontal.clone.wtTable.holder.parentNode);
        break;                                                                                                         // 6041
      case 'corner':                                                                                                   // 6042
        cssTransformOffset = Handsontable.Dom.getCssTransform(this.instance.view.wt.wtScrollbars.corner.clone.wtTable.holder.parentNode);
        break;                                                                                                         // 6044
    }                                                                                                                  // 6045
                                                                                                                       // 6046
    if (editTop < 0) {                                                                                                 // 6047
      editTop = 0;                                                                                                     // 6048
    }                                                                                                                  // 6049
    if (editLeft < 0) {                                                                                                // 6050
      editLeft = 0;                                                                                                    // 6051
    }                                                                                                                  // 6052
    if (rowHeadersCount > 0 && parseInt(this.TD.style.borderTopWidth, 10) > 0) {                                       // 6053
      editTop += 1;                                                                                                    // 6054
    }                                                                                                                  // 6055
    if (colHeadersCount > 0 && parseInt(this.TD.style.borderLeftWidth, 10) > 0) {                                      // 6056
      editLeft += 1;                                                                                                   // 6057
    }                                                                                                                  // 6058
                                                                                                                       // 6059
                                                                                                                       // 6060
    if(cssTransformOffset && cssTransformOffset != -1) {                                                               // 6061
      this.textareaParentStyle[cssTransformOffset[0]] = cssTransformOffset[1];                                         // 6062
    } else {                                                                                                           // 6063
      Handsontable.Dom.resetCssTransform(this.textareaParentStyle);                                                    // 6064
    }                                                                                                                  // 6065
                                                                                                                       // 6066
    this.textareaParentStyle.top = editTop + 'px';                                                                     // 6067
    this.textareaParentStyle.left = editLeft + 'px';                                                                   // 6068
                                                                                                                       // 6069
    ///end prepare textarea position                                                                                   // 6070
                                                                                                                       // 6071
                                                                                                                       // 6072
    var cellTopOffset = this.TD.offsetTop - this.instance.view.wt.wtScrollbars.vertical.getScrollPosition(),           // 6073
        cellLeftOffset = this.TD.offsetLeft - this.instance.view.wt.wtScrollbars.horizontal.getScrollPosition();       // 6074
                                                                                                                       // 6075
    var width = Handsontable.Dom.innerWidth(this.TD) - 8  //$td.width()                                                // 6076
      , maxWidth = this.instance.view.maximumVisibleElementWidth(cellLeftOffset) - 10 //10 is TEXTAREAs border and padding
      , height = Handsontable.Dom.outerHeight(this.TD) - 4  //$td.outerHeight() - 4                                    // 6078
      , maxHeight = this.instance.view.maximumVisibleElementHeight(cellTopOffset) - 2; //10 is TEXTAREAs border and padding
                                                                                                                       // 6080
    if (parseInt(this.TD.style.borderTopWidth, 10) > 0) {                                                              // 6081
      height -= 1;                                                                                                     // 6082
    }                                                                                                                  // 6083
    if (parseInt(this.TD.style.borderLeftWidth, 10) > 0) {                                                             // 6084
      if (rowHeadersCount > 0) {                                                                                       // 6085
        width -= 1;                                                                                                    // 6086
      }                                                                                                                // 6087
    }                                                                                                                  // 6088
                                                                                                                       // 6089
    this.TEXTAREA.style.fontSize = Handsontable.Dom.getComputedStyle(this.TD).fontSize;                                // 6090
    this.TEXTAREA.style.fontFamily = Handsontable.Dom.getComputedStyle(this.TD).fontFamily;                            // 6091
                                                                                                                       // 6092
    this.autoResize.init(this.TEXTAREA, {                                                                              // 6093
      minHeight: Math.min(height, maxHeight),                                                                          // 6094
      maxHeight: maxHeight, //TEXTAREA should never be wider than visible part of the viewport (should not cover the scrollbar)
      minWidth: Math.min(width, maxWidth),                                                                             // 6096
      maxWidth: maxWidth //TEXTAREA should never be wider than visible part of the viewport (should not cover the scrollbar)
    }, true);                                                                                                          // 6098
                                                                                                                       // 6099
    this.textareaParentStyle.display = 'block';                                                                        // 6100
  };                                                                                                                   // 6101
                                                                                                                       // 6102
  TextEditor.prototype.bindEvents = function () {                                                                      // 6103
    var editor = this;                                                                                                 // 6104
                                                                                                                       // 6105
    this.eventManager.addEventListener(this.TEXTAREA, 'cut',function (event){                                          // 6106
      Handsontable.helper.stopPropagation(event);                                                                      // 6107
      //event.stopPropagation();                                                                                       // 6108
    });                                                                                                                // 6109
                                                                                                                       // 6110
    this.eventManager.addEventListener(this.TEXTAREA, 'paste', function (event){                                       // 6111
      Handsontable.helper.stopPropagation(event);                                                                      // 6112
      //event.stopPropagation();                                                                                       // 6113
    });                                                                                                                // 6114
                                                                                                                       // 6115
    this.instance.addHook('afterScrollVertically', function () {                                                       // 6116
      editor.refreshDimensions();                                                                                      // 6117
    });                                                                                                                // 6118
                                                                                                                       // 6119
    this.instance.addHook('afterDestroy', function () {                                                                // 6120
      editor.eventManager.clear();                                                                                     // 6121
    });                                                                                                                // 6122
  };                                                                                                                   // 6123
                                                                                                                       // 6124
  TextEditor.prototype.destroy = function () {                                                                         // 6125
    this.eventManager.clear();                                                                                         // 6126
  };                                                                                                                   // 6127
                                                                                                                       // 6128
                                                                                                                       // 6129
  Handsontable.editors.TextEditor = TextEditor;                                                                        // 6130
  Handsontable.editors.registerEditor('text', Handsontable.editors.TextEditor);                                        // 6131
                                                                                                                       // 6132
})(Handsontable);                                                                                                      // 6133
                                                                                                                       // 6134
(function (Handsontable) {                                                                                             // 6135
                                                                                                                       // 6136
  var MobileTextEditor = Handsontable.editors.BaseEditor.prototype.extend();                                           // 6137
                                                                                                                       // 6138
  var domDimensionsCache = {};                                                                                         // 6139
                                                                                                                       // 6140
  var createControls = function () {                                                                                   // 6141
    this.controls = {};                                                                                                // 6142
                                                                                                                       // 6143
    this.controls.leftButton = document.createElement('DIV');                                                          // 6144
    this.controls.leftButton.className = 'leftButton';                                                                 // 6145
    this.controls.rightButton = document.createElement('DIV');                                                         // 6146
    this.controls.rightButton.className = 'rightButton';                                                               // 6147
    this.controls.upButton = document.createElement('DIV');                                                            // 6148
    this.controls.upButton.className = 'upButton';                                                                     // 6149
    this.controls.downButton = document.createElement('DIV');                                                          // 6150
    this.controls.downButton.className = 'downButton';                                                                 // 6151
                                                                                                                       // 6152
    for(var button in this.controls) {                                                                                 // 6153
      this.positionControls.appendChild(this.controls[button]);                                                        // 6154
    }                                                                                                                  // 6155
  };                                                                                                                   // 6156
                                                                                                                       // 6157
  MobileTextEditor.prototype.valueChanged = function () {                                                              // 6158
    return this.initValue != this.getValue();                                                                          // 6159
  };                                                                                                                   // 6160
                                                                                                                       // 6161
  MobileTextEditor.prototype.init = function () {                                                                      // 6162
    var that = this;                                                                                                   // 6163
    this.eventManager = new Handsontable.eventManager(this.instance);                                                  // 6164
                                                                                                                       // 6165
    this.createElements();                                                                                             // 6166
    this.bindEvents();                                                                                                 // 6167
                                                                                                                       // 6168
    this.instance.addHook('afterDestroy', function () {                                                                // 6169
      that.destroy();                                                                                                  // 6170
    });                                                                                                                // 6171
                                                                                                                       // 6172
  };                                                                                                                   // 6173
                                                                                                                       // 6174
  MobileTextEditor.prototype.getValue = function () {                                                                  // 6175
    return this.TEXTAREA.value                                                                                         // 6176
  };                                                                                                                   // 6177
                                                                                                                       // 6178
  MobileTextEditor.prototype.setValue = function (newValue) {                                                          // 6179
    this.initValue = newValue;                                                                                         // 6180
                                                                                                                       // 6181
    this.TEXTAREA.value = newValue;                                                                                    // 6182
  };                                                                                                                   // 6183
                                                                                                                       // 6184
  MobileTextEditor.prototype.createElements = function () {                                                            // 6185
    this.editorContainer = document.createElement('DIV');                                                              // 6186
    this.editorContainer.className = "htMobileEditorContainer";                                                        // 6187
                                                                                                                       // 6188
    this.cellPointer = document.createElement('DIV');                                                                  // 6189
    this.cellPointer.className = "cellPointer";                                                                        // 6190
                                                                                                                       // 6191
    this.moveHandle = document.createElement('DIV');                                                                   // 6192
    this.moveHandle.className = "moveHandle";                                                                          // 6193
                                                                                                                       // 6194
    this.inputPane = document.createElement('DIV');                                                                    // 6195
    this.inputPane.className = "inputs";                                                                               // 6196
                                                                                                                       // 6197
    this.positionControls = document.createElement('DIV');                                                             // 6198
    this.positionControls.className = "positionControls";                                                              // 6199
                                                                                                                       // 6200
    this.TEXTAREA = document.createElement('TEXTAREA');                                                                // 6201
    Handsontable.Dom.addClass(this.TEXTAREA, 'handsontableInput');                                                     // 6202
                                                                                                                       // 6203
    this.inputPane.appendChild(this.TEXTAREA);                                                                         // 6204
                                                                                                                       // 6205
    this.editorContainer.appendChild(this.cellPointer);                                                                // 6206
    this.editorContainer.appendChild(this.moveHandle);                                                                 // 6207
    this.editorContainer.appendChild(this.inputPane);                                                                  // 6208
    this.editorContainer.appendChild(this.positionControls);                                                           // 6209
                                                                                                                       // 6210
    createControls.call(this);                                                                                         // 6211
                                                                                                                       // 6212
    document.body.appendChild(this.editorContainer);                                                                   // 6213
  };                                                                                                                   // 6214
                                                                                                                       // 6215
  MobileTextEditor.prototype.onBeforeKeyDown = function (event) {                                                      // 6216
    var instance = this;                                                                                               // 6217
    var that = instance.getActiveEditor();                                                                             // 6218
                                                                                                                       // 6219
    Handsontable.Dom.enableImmediatePropagation(event);                                                                // 6220
                                                                                                                       // 6221
    if (event.target !== that.TEXTAREA || event.isImmediatePropagationStopped()){                                      // 6222
      return;                                                                                                          // 6223
    }                                                                                                                  // 6224
                                                                                                                       // 6225
    var keyCodes = Handsontable.helper.keyCode;                                                                        // 6226
                                                                                                                       // 6227
    switch(event.keyCode) {                                                                                            // 6228
      case keyCodes.ENTER:                                                                                             // 6229
        that.close();                                                                                                  // 6230
        event.preventDefault(); //don't add newline to field                                                           // 6231
        break;                                                                                                         // 6232
      case keyCodes.BACKSPACE:                                                                                         // 6233
        event.stopImmediatePropagation(); //backspace, delete, home, end should only work locally when cell is edited (not in table context)
        break;                                                                                                         // 6235
    }                                                                                                                  // 6236
  };                                                                                                                   // 6237
                                                                                                                       // 6238
  MobileTextEditor.prototype.open = function () {                                                                      // 6239
    this.instance.addHook('beforeKeyDown', this.onBeforeKeyDown);                                                      // 6240
                                                                                                                       // 6241
    Handsontable.Dom.addClass(this.editorContainer, 'active');                                                         // 6242
    //this.updateEditorDimensions();                                                                                   // 6243
    //this.scrollToView();                                                                                             // 6244
    Handsontable.Dom.removeClass(this.cellPointer, 'hidden');                                                          // 6245
                                                                                                                       // 6246
    this.updateEditorPosition();                                                                                       // 6247
  };                                                                                                                   // 6248
                                                                                                                       // 6249
  MobileTextEditor.prototype.focus = function(){                                                                       // 6250
    this.TEXTAREA.focus();                                                                                             // 6251
    Handsontable.Dom.setCaretPosition(this.TEXTAREA, this.TEXTAREA.value.length);                                      // 6252
  };                                                                                                                   // 6253
                                                                                                                       // 6254
  MobileTextEditor.prototype.close = function () {                                                                     // 6255
    this.TEXTAREA.blur();                                                                                              // 6256
    this.instance.removeHook('beforeKeyDown', this.onBeforeKeyDown);                                                   // 6257
                                                                                                                       // 6258
    Handsontable.Dom.removeClass(this.editorContainer, 'active');                                                      // 6259
  };                                                                                                                   // 6260
                                                                                                                       // 6261
  MobileTextEditor.prototype.scrollToView = function () {                                                              // 6262
    var coords = this.instance.getSelectedRange().highlight;                                                           // 6263
    this.instance.view.scrollViewport(coords);                                                                         // 6264
  };                                                                                                                   // 6265
                                                                                                                       // 6266
  MobileTextEditor.prototype.hideCellPointer = function () {                                                           // 6267
    if(!Handsontable.Dom.hasClass(this.cellPointer, 'hidden')) {                                                       // 6268
      Handsontable.Dom.addClass(this.cellPointer, 'hidden');                                                           // 6269
    }                                                                                                                  // 6270
  };                                                                                                                   // 6271
                                                                                                                       // 6272
  MobileTextEditor.prototype.updateEditorPosition = function (x, y) {                                                  // 6273
    if(x && y) {                                                                                                       // 6274
      x = parseInt(x, 10);                                                                                             // 6275
      y = parseInt(y, 10);                                                                                             // 6276
                                                                                                                       // 6277
      this.editorContainer.style.top = y + "px";                                                                       // 6278
      this.editorContainer.style.left = x + "px";                                                                      // 6279
                                                                                                                       // 6280
    } else {                                                                                                           // 6281
      var selection = this.instance.getSelected()                                                                      // 6282
        , selectedCell = this.instance.getCell(selection[0],selection[1]);                                             // 6283
                                                                                                                       // 6284
      //cache sizes                                                                                                    // 6285
      if(!domDimensionsCache.cellPointer) {                                                                            // 6286
        domDimensionsCache.cellPointer = {                                                                             // 6287
          height: Handsontable.Dom.outerHeight(this.cellPointer),                                                      // 6288
          width: Handsontable.Dom.outerWidth(this.cellPointer)                                                         // 6289
        }                                                                                                              // 6290
      }                                                                                                                // 6291
      if(!domDimensionsCache.editorContainer) {                                                                        // 6292
        domDimensionsCache.editorContainer = {                                                                         // 6293
          width: Handsontable.Dom.outerWidth(this.editorContainer)                                                     // 6294
        }                                                                                                              // 6295
      }                                                                                                                // 6296
                                                                                                                       // 6297
      if(selectedCell != undefined) {                                                                                  // 6298
        var scrollLeft = this.instance.view.wt.wtScrollbars.horizontal.scrollHandler == window ? 0 : Handsontable.Dom.getScrollLeft(this.instance.view.wt.wtScrollbars.horizontal.scrollHandler);
        var scrollTop = this.instance.view.wt.wtScrollbars.vertical.scrollHandler == window ? 0 : Handsontable.Dom.getScrollTop(this.instance.view.wt.wtScrollbars.vertical.scrollHandler);
                                                                                                                       // 6301
        var selectedCellOffset = Handsontable.Dom.offset(selectedCell)                                                 // 6302
          , selectedCellWidth = Handsontable.Dom.outerWidth(selectedCell)                                              // 6303
          , currentScrollPosition = {                                                                                  // 6304
            x: scrollLeft,                                                                                             // 6305
            y: scrollTop                                                                                               // 6306
          };                                                                                                           // 6307
                                                                                                                       // 6308
        this.editorContainer.style.top = parseInt(selectedCellOffset.top + Handsontable.Dom.outerHeight(selectedCell) - currentScrollPosition.y + domDimensionsCache.cellPointer.height, 10) + "px";
        this.editorContainer.style.left = parseInt((window.innerWidth / 2) - (domDimensionsCache.editorContainer.width / 2) ,10) + "px";
                                                                                                                       // 6311
        if(selectedCellOffset.left + selectedCellWidth / 2 > parseInt(this.editorContainer.style.left,10) + domDimensionsCache.editorContainer.width) {
          this.editorContainer.style.left = window.innerWidth - domDimensionsCache.editorContainer.width + "px";       // 6313
        } else if(selectedCellOffset.left + selectedCellWidth / 2 < parseInt(this.editorContainer.style.left,10) + 20) {
          this.editorContainer.style.left = 0 + "px";                                                                  // 6315
        }                                                                                                              // 6316
                                                                                                                       // 6317
        this.cellPointer.style.left = parseInt(selectedCellOffset.left - (domDimensionsCache.cellPointer.width / 2) - Handsontable.Dom.offset(this.editorContainer).left + (selectedCellWidth / 2) - currentScrollPosition.x ,10) + "px";
                                                                                                                       // 6319
      }                                                                                                                // 6320
    }                                                                                                                  // 6321
  };                                                                                                                   // 6322
                                                                                                                       // 6323
                                                                                                                       // 6324
  // For the optional dont-affect-editor-by-zooming feature:                                                           // 6325
                                                                                                                       // 6326
  //MobileTextEditor.prototype.updateEditorDimensions = function () {                                                  // 6327
  //  if(!this.beginningWindowWidth) {                                                                                 // 6328
  //    this.beginningWindowWidth = window.innerWidth;                                                                 // 6329
  //    this.beginningEditorWidth = Handsontable.Dom.outerWidth(this.editorContainer);                                 // 6330
  //    this.scaleRatio = this.beginningEditorWidth / this.beginningWindowWidth;                                       // 6331
  //                                                                                                                   // 6332
  //    this.editorContainer.style.width = this.beginningEditorWidth + "px";                                           // 6333
  //    return;                                                                                                        // 6334
  //  }                                                                                                                // 6335
  //                                                                                                                   // 6336
  //  var currentScaleRatio = this.beginningEditorWidth / window.innerWidth;                                           // 6337
  //  //if(currentScaleRatio > this.scaleRatio + 0.2 || currentScaleRatio < this.scaleRatio - 0.2) {                   // 6338
  //  if(currentScaleRatio != this.scaleRatio) {                                                                       // 6339
  //    this.editorContainer.style["zoom"] = (1 - ((currentScaleRatio * this.scaleRatio) - this.scaleRatio)) * 100 + "%";
  //  }                                                                                                                // 6341
  //                                                                                                                   // 6342
  //};                                                                                                                 // 6343
                                                                                                                       // 6344
  MobileTextEditor.prototype.updateEditorData = function () {                                                          // 6345
    var selected = this.instance.getSelected()                                                                         // 6346
      , selectedValue = this.instance.getDataAtCell(selected[0], selected[1]);                                         // 6347
                                                                                                                       // 6348
    this.row = selected[0];                                                                                            // 6349
    this.col = selected[1];                                                                                            // 6350
    this.setValue(selectedValue);                                                                                      // 6351
    this.updateEditorPosition();                                                                                       // 6352
  };                                                                                                                   // 6353
                                                                                                                       // 6354
  MobileTextEditor.prototype.prepareAndSave = function () {                                                            // 6355
                                                                                                                       // 6356
    if(!this.valueChanged()) {                                                                                         // 6357
      return true;                                                                                                     // 6358
    }                                                                                                                  // 6359
                                                                                                                       // 6360
    var val = [                                                                                                        // 6361
      [String.prototype.trim.call(this.getValue())]                                                                    // 6362
    ];                                                                                                                 // 6363
                                                                                                                       // 6364
    this.saveValue(val);                                                                                               // 6365
  };                                                                                                                   // 6366
                                                                                                                       // 6367
  MobileTextEditor.prototype.bindEvents = function () {                                                                // 6368
    var that = this;                                                                                                   // 6369
                                                                                                                       // 6370
    this.eventManager.addEventListener(this.controls.leftButton, "touchend", function (event) {                        // 6371
      that.prepareAndSave();                                                                                           // 6372
      that.instance.selection.transformStart(0, -1, null, true);                                                       // 6373
      that.updateEditorData();                                                                                         // 6374
      event.preventDefault();                                                                                          // 6375
    });                                                                                                                // 6376
    this.eventManager.addEventListener(this.controls.rightButton, "touchend", function (event) {                       // 6377
      that.prepareAndSave();                                                                                           // 6378
      that.instance.selection.transformStart(0, 1, null, true);                                                        // 6379
      that.updateEditorData();                                                                                         // 6380
      event.preventDefault();                                                                                          // 6381
    });                                                                                                                // 6382
    this.eventManager.addEventListener(this.controls.upButton, "touchend", function (event) {                          // 6383
      that.prepareAndSave();                                                                                           // 6384
      that.instance.selection.transformStart(-1, 0, null, true);                                                       // 6385
      that.updateEditorData();                                                                                         // 6386
      event.preventDefault();                                                                                          // 6387
    });                                                                                                                // 6388
    this.eventManager.addEventListener(this.controls.downButton, "touchend", function (event) {                        // 6389
      that.prepareAndSave();                                                                                           // 6390
      that.instance.selection.transformStart(1, 0, null, true);                                                        // 6391
      that.updateEditorData();                                                                                         // 6392
      event.preventDefault();                                                                                          // 6393
    });                                                                                                                // 6394
                                                                                                                       // 6395
    this.eventManager.addEventListener(this.moveHandle, "touchstart", function (event) {                               // 6396
      if (event.touches.length == 1) {                                                                                 // 6397
        var touch = event.touches[0]                                                                                   // 6398
          , onTouchPosition = {                                                                                        // 6399
          x: that.editorContainer.offsetLeft,                                                                          // 6400
          y: that.editorContainer.offsetTop                                                                            // 6401
        }                                                                                                              // 6402
          , onTouchOffset = {                                                                                          // 6403
          x: touch.pageX - onTouchPosition.x,                                                                          // 6404
          y: touch.pageY - onTouchPosition.y                                                                           // 6405
        };                                                                                                             // 6406
                                                                                                                       // 6407
        that.eventManager.addEventListener(this, "touchmove", function (event) {                                       // 6408
          var touch = event.touches[0];                                                                                // 6409
          that.updateEditorPosition(touch.pageX - onTouchOffset.x, touch.pageY - onTouchOffset.y);                     // 6410
          that.hideCellPointer();                                                                                      // 6411
          event.preventDefault();                                                                                      // 6412
        });                                                                                                            // 6413
                                                                                                                       // 6414
      }                                                                                                                // 6415
    });                                                                                                                // 6416
                                                                                                                       // 6417
    this.eventManager.addEventListener(document.body, "touchend", function (event) {                                   // 6418
      if(!Handsontable.Dom.isChildOf(event.target, that.editorContainer) && !Handsontable.Dom.isChildOf(event.target, that.instance.rootElement)) {
        that.close();                                                                                                  // 6420
      }                                                                                                                // 6421
    });                                                                                                                // 6422
                                                                                                                       // 6423
    this.eventManager.addEventListener(this.instance.view.wt.wtScrollbars.horizontal.scrollHandler, "scroll", function (event) {
      if(that.instance.view.wt.wtScrollbars.horizontal.scrollHandler != window) {                                      // 6425
        that.hideCellPointer();                                                                                        // 6426
      }                                                                                                                // 6427
    });                                                                                                                // 6428
                                                                                                                       // 6429
    this.eventManager.addEventListener(this.instance.view.wt.wtScrollbars.vertical.scrollHandler, "scroll", function (event) {
      if(that.instance.view.wt.wtScrollbars.vertical.scrollHandler != window) {                                        // 6431
        that.hideCellPointer();                                                                                        // 6432
      }                                                                                                                // 6433
    });                                                                                                                // 6434
                                                                                                                       // 6435
  };                                                                                                                   // 6436
                                                                                                                       // 6437
  MobileTextEditor.prototype.destroy = function () {                                                                   // 6438
    this.eventManager.clear();                                                                                         // 6439
                                                                                                                       // 6440
    this.editorContainer.parentNode.removeChild(this.editorContainer);                                                 // 6441
  };                                                                                                                   // 6442
                                                                                                                       // 6443
  Handsontable.editors.MobileTextEditor = MobileTextEditor;                                                            // 6444
  Handsontable.editors.registerEditor('mobile', Handsontable.editors.MobileTextEditor);                                // 6445
                                                                                                                       // 6446
                                                                                                                       // 6447
                                                                                                                       // 6448
})(Handsontable);                                                                                                      // 6449
                                                                                                                       // 6450
(function(Handsontable){                                                                                               // 6451
                                                                                                                       // 6452
  //Blank editor, because all the work is done by renderer                                                             // 6453
  var CheckboxEditor = Handsontable.editors.BaseEditor.prototype.extend();                                             // 6454
                                                                                                                       // 6455
  CheckboxEditor.prototype.beginEditing = function () {                                                                // 6456
    var checkbox = this.TD.querySelector('input[type="checkbox"]');                                                    // 6457
                                                                                                                       // 6458
    if (checkbox) {                                                                                                    // 6459
      checkbox.click();                                                                                                // 6460
    }                                                                                                                  // 6461
                                                                                                                       // 6462
  };                                                                                                                   // 6463
                                                                                                                       // 6464
  CheckboxEditor.prototype.finishEditing = function () {};                                                             // 6465
                                                                                                                       // 6466
  CheckboxEditor.prototype.init = function () {};                                                                      // 6467
  CheckboxEditor.prototype.open = function () {};                                                                      // 6468
  CheckboxEditor.prototype.close = function () {};                                                                     // 6469
  CheckboxEditor.prototype.getValue = function () {};                                                                  // 6470
  CheckboxEditor.prototype.setValue = function () {};                                                                  // 6471
  CheckboxEditor.prototype.focus = function () {};                                                                     // 6472
                                                                                                                       // 6473
  Handsontable.editors.CheckboxEditor = CheckboxEditor;                                                                // 6474
  Handsontable.editors.registerEditor('checkbox', CheckboxEditor);                                                     // 6475
                                                                                                                       // 6476
})(Handsontable);                                                                                                      // 6477
                                                                                                                       // 6478
                                                                                                                       // 6479
(function (Handsontable) {                                                                                             // 6480
  var DateEditor = Handsontable.editors.TextEditor.prototype.extend();                                                 // 6481
                                                                                                                       // 6482
  var $;                                                                                                               // 6483
                                                                                                                       // 6484
  DateEditor.prototype.init = function () {                                                                            // 6485
    if (typeof jQuery != 'undefined') {                                                                                // 6486
      $ = jQuery;                                                                                                      // 6487
    } else {                                                                                                           // 6488
      throw new Error("You need to include jQuery to your project in order to use the jQuery UI Datepicker.");         // 6489
    }                                                                                                                  // 6490
                                                                                                                       // 6491
    if (!$.datepicker) {                                                                                               // 6492
      throw new Error("jQuery UI Datepicker dependency not found. Did you forget to include jquery-ui.custom.js or its substitute?");
    }                                                                                                                  // 6494
                                                                                                                       // 6495
    Handsontable.editors.TextEditor.prototype.init.apply(this, arguments);                                             // 6496
                                                                                                                       // 6497
    this.isCellEdited = false;                                                                                         // 6498
    var that = this;                                                                                                   // 6499
                                                                                                                       // 6500
    this.instance.addHook('afterDestroy', function () {                                                                // 6501
      that.destroyElements();                                                                                          // 6502
    })                                                                                                                 // 6503
                                                                                                                       // 6504
  };                                                                                                                   // 6505
                                                                                                                       // 6506
  DateEditor.prototype.createElements = function () {                                                                  // 6507
    Handsontable.editors.TextEditor.prototype.createElements.apply(this, arguments);                                   // 6508
                                                                                                                       // 6509
    this.datePicker = document.createElement('DIV');                                                                   // 6510
    Handsontable.Dom.addClass(this.datePicker, 'htDatepickerHolder');                                                  // 6511
    this.datePickerStyle = this.datePicker.style;                                                                      // 6512
    this.datePickerStyle.position = 'absolute';                                                                        // 6513
    this.datePickerStyle.top = 0;                                                                                      // 6514
    this.datePickerStyle.left = 0;                                                                                     // 6515
    this.datePickerStyle.zIndex = 99;                                                                                  // 6516
    document.body.appendChild(this.datePicker);                                                                        // 6517
    this.$datePicker = $(this.datePicker);                                                                             // 6518
                                                                                                                       // 6519
    var that = this;                                                                                                   // 6520
    var defaultOptions = {                                                                                             // 6521
      dateFormat: "yy-mm-dd",                                                                                          // 6522
      showButtonPanel: true,                                                                                           // 6523
      changeMonth: true,                                                                                               // 6524
      changeYear: true,                                                                                                // 6525
      onSelect: function (dateStr) {                                                                                   // 6526
        that.setValue(dateStr);                                                                                        // 6527
        that.finishEditing(false);                                                                                     // 6528
      }                                                                                                                // 6529
    };                                                                                                                 // 6530
    this.$datePicker.datepicker(defaultOptions);                                                                       // 6531
                                                                                                                       // 6532
    var eventManager = Handsontable.eventManager(this);                                                                // 6533
                                                                                                                       // 6534
    /**                                                                                                                // 6535
     * Prevent recognizing clicking on jQuery Datepicker as clicking outside of table                                  // 6536
     */                                                                                                                // 6537
    eventManager.addEventListener(this.datePicker, 'mousedown', function (event) {                                     // 6538
      Handsontable.helper.stopPropagation(event);                                                                      // 6539
      //event.stopPropagation();                                                                                       // 6540
    });                                                                                                                // 6541
                                                                                                                       // 6542
    this.hideDatepicker();                                                                                             // 6543
  };                                                                                                                   // 6544
                                                                                                                       // 6545
  DateEditor.prototype.destroyElements = function () {                                                                 // 6546
    this.$datePicker.datepicker('destroy');                                                                            // 6547
    this.$datePicker.remove();                                                                                         // 6548
    //var eventManager = Handsontable.eventManager(this);                                                              // 6549
    //eventManager.removeEventListener(this.datePicker, 'mousedown');                                                  // 6550
  };                                                                                                                   // 6551
                                                                                                                       // 6552
  DateEditor.prototype.open = function () {                                                                            // 6553
    Handsontable.editors.TextEditor.prototype.open.call(this);                                                         // 6554
    this.showDatepicker();                                                                                             // 6555
  };                                                                                                                   // 6556
                                                                                                                       // 6557
  DateEditor.prototype.finishEditing = function (isCancelled, ctrlDown) {                                              // 6558
    this.hideDatepicker();                                                                                             // 6559
    Handsontable.editors.TextEditor.prototype.finishEditing.apply(this, arguments);                                    // 6560
  };                                                                                                                   // 6561
                                                                                                                       // 6562
  DateEditor.prototype.showDatepicker = function () {                                                                  // 6563
    var offset = this.TD.getBoundingClientRect(),                                                                      // 6564
      DatepickerSettings,                                                                                              // 6565
      datepickerSettings;                                                                                              // 6566
                                                                                                                       // 6567
    this.datePickerStyle.top = (window.pageYOffset + offset.top + Handsontable.Dom.outerHeight(this.TD)) + 'px';       // 6568
    this.datePickerStyle.left = (window.pageXOffset + offset.left) + 'px';                                             // 6569
                                                                                                                       // 6570
    DatepickerSettings = function () {};                                                                               // 6571
    DatepickerSettings.prototype = this.cellProperties;                                                                // 6572
    datepickerSettings = new DatepickerSettings();                                                                     // 6573
    datepickerSettings.defaultDate = this.originalValue || void 0;                                                     // 6574
    this.$datePicker.datepicker('option', datepickerSettings);                                                         // 6575
                                                                                                                       // 6576
    if (this.originalValue) {                                                                                          // 6577
      this.$datePicker.datepicker('setDate', this.originalValue);                                                      // 6578
    }                                                                                                                  // 6579
    this.datePickerStyle.display = 'block';                                                                            // 6580
  };                                                                                                                   // 6581
                                                                                                                       // 6582
  DateEditor.prototype.hideDatepicker = function () {                                                                  // 6583
    this.datePickerStyle.display = 'none';                                                                             // 6584
  };                                                                                                                   // 6585
                                                                                                                       // 6586
                                                                                                                       // 6587
  Handsontable.editors.DateEditor = DateEditor;                                                                        // 6588
  Handsontable.editors.registerEditor('date', DateEditor);                                                             // 6589
})(Handsontable);                                                                                                      // 6590
                                                                                                                       // 6591
/**                                                                                                                    // 6592
 * This is inception. Using Handsontable as Handsontable editor                                                        // 6593
 */                                                                                                                    // 6594
(function (Handsontable) {                                                                                             // 6595
  "use strict";                                                                                                        // 6596
                                                                                                                       // 6597
  var HandsontableEditor = Handsontable.editors.TextEditor.prototype.extend();                                         // 6598
                                                                                                                       // 6599
  HandsontableEditor.prototype.createElements = function () {                                                          // 6600
    Handsontable.editors.TextEditor.prototype.createElements.apply(this, arguments);                                   // 6601
                                                                                                                       // 6602
    var DIV = document.createElement('DIV');                                                                           // 6603
    DIV.className = 'handsontableEditor';                                                                              // 6604
    this.TEXTAREA_PARENT.appendChild(DIV);                                                                             // 6605
                                                                                                                       // 6606
    this.htContainer = DIV;                                                                                            // 6607
    this.htEditor = new Handsontable(DIV);                                                                             // 6608
                                                                                                                       // 6609
    this.assignHooks();                                                                                                // 6610
  };                                                                                                                   // 6611
                                                                                                                       // 6612
  HandsontableEditor.prototype.prepare = function (td, row, col, prop, value, cellProperties) {                        // 6613
                                                                                                                       // 6614
    Handsontable.editors.TextEditor.prototype.prepare.apply(this, arguments);                                          // 6615
                                                                                                                       // 6616
    var parent = this;                                                                                                 // 6617
                                                                                                                       // 6618
    var options = {                                                                                                    // 6619
      startRows: 0,                                                                                                    // 6620
      startCols: 0,                                                                                                    // 6621
      minRows: 0,                                                                                                      // 6622
      minCols: 0,                                                                                                      // 6623
      className: 'listbox',                                                                                            // 6624
      copyPaste: false,                                                                                                // 6625
      cells: function () {                                                                                             // 6626
        return {                                                                                                       // 6627
          readOnly: true                                                                                               // 6628
        }                                                                                                              // 6629
      },                                                                                                               // 6630
      fillHandle: false,                                                                                               // 6631
      afterOnCellMouseDown: function () {                                                                              // 6632
        var value = this.getValue();                                                                                   // 6633
        if (value !== void 0) { //if the value is undefined then it means we don't want to set the value               // 6634
          parent.setValue(value);                                                                                      // 6635
        }                                                                                                              // 6636
        parent.instance.destroyEditor();                                                                               // 6637
      }                                                                                                                // 6638
    };                                                                                                                 // 6639
                                                                                                                       // 6640
    if (this.cellProperties.handsontable) {                                                                            // 6641
      Handsontable.helper.extend(options, cellProperties.handsontable);                                                // 6642
    }                                                                                                                  // 6643
    if (this.htEditor) {                                                                                               // 6644
      this.htEditor.destroy();                                                                                         // 6645
    }                                                                                                                  // 6646
                                                                                                                       // 6647
    this.htEditor = new Handsontable(this.htContainer, options);                                                       // 6648
                                                                                                                       // 6649
    //this.$htContainer.handsontable('destroy');                                                                       // 6650
    //this.$htContainer.handsontable(options);                                                                         // 6651
  };                                                                                                                   // 6652
                                                                                                                       // 6653
  var onBeforeKeyDown = function (event) {                                                                             // 6654
                                                                                                                       // 6655
    if (event != null && event.isImmediatePropagationEnabled == null) {                                                // 6656
      event.stopImmediatePropagation = function () {                                                                   // 6657
        this.isImmediatePropagationEnabled = false;                                                                    // 6658
        this.cancelBubble = true;                                                                                      // 6659
      };                                                                                                               // 6660
      event.isImmediatePropagationEnabled = true;                                                                      // 6661
      event.isImmediatePropagationStopped = function () {                                                              // 6662
        return !this.isImmediatePropagationEnabled;                                                                    // 6663
      };                                                                                                               // 6664
    }                                                                                                                  // 6665
                                                                                                                       // 6666
    if (event.isImmediatePropagationStopped()) {                                                                       // 6667
      return;                                                                                                          // 6668
    }                                                                                                                  // 6669
                                                                                                                       // 6670
    var editor = this.getActiveEditor();                                                                               // 6671
                                                                                                                       // 6672
    var innerHOT = editor.htEditor.getInstance(); //Handsontable.tmpHandsontable(editor.htContainer, 'getInstance');   // 6673
                                                                                                                       // 6674
    var rowToSelect;                                                                                                   // 6675
                                                                                                                       // 6676
    if (event.keyCode == Handsontable.helper.keyCode.ARROW_DOWN) {                                                     // 6677
      if (!innerHOT.getSelected()) {                                                                                   // 6678
        rowToSelect = 0;                                                                                               // 6679
      }                                                                                                                // 6680
      else {                                                                                                           // 6681
        var selectedRow = innerHOT.getSelected()[0];                                                                   // 6682
        var lastRow = innerHOT.countRows() - 1;                                                                        // 6683
        rowToSelect = Math.min(lastRow, selectedRow + 1);                                                              // 6684
      }                                                                                                                // 6685
    }                                                                                                                  // 6686
    else if (event.keyCode == Handsontable.helper.keyCode.ARROW_UP) {                                                  // 6687
      if (innerHOT.getSelected()) {                                                                                    // 6688
        var selectedRow = innerHOT.getSelected()[0];                                                                   // 6689
        rowToSelect = selectedRow - 1;                                                                                 // 6690
      }                                                                                                                // 6691
    }                                                                                                                  // 6692
                                                                                                                       // 6693
    if (rowToSelect !== void 0) {                                                                                      // 6694
      if (rowToSelect < 0) {                                                                                           // 6695
        innerHOT.deselectCell();                                                                                       // 6696
      }                                                                                                                // 6697
      else {                                                                                                           // 6698
        innerHOT.selectCell(rowToSelect, 0);                                                                           // 6699
      }                                                                                                                // 6700
                                                                                                                       // 6701
      event.preventDefault();                                                                                          // 6702
      event.stopImmediatePropagation();                                                                                // 6703
                                                                                                                       // 6704
      editor.instance.listen();                                                                                        // 6705
      editor.TEXTAREA.focus();                                                                                         // 6706
    }                                                                                                                  // 6707
  };                                                                                                                   // 6708
                                                                                                                       // 6709
  HandsontableEditor.prototype.open = function () {                                                                    // 6710
                                                                                                                       // 6711
    this.instance.addHook('beforeKeyDown', onBeforeKeyDown);                                                           // 6712
                                                                                                                       // 6713
    Handsontable.editors.TextEditor.prototype.open.apply(this, arguments);                                             // 6714
                                                                                                                       // 6715
    //this.$htContainer.handsontable('render');                                                                        // 6716
                                                                                                                       // 6717
    //Handsontable.tmpHandsontable(this.htContainer, 'render');                                                        // 6718
    this.htEditor.render();                                                                                            // 6719
                                                                                                                       // 6720
    if (this.cellProperties.strict) {                                                                                  // 6721
      this.htEditor.selectCell(0,0);                                                                                   // 6722
      this.TEXTAREA.style.visibility = 'hidden';                                                                       // 6723
    } else {                                                                                                           // 6724
      this.htEditor.deselectCell();                                                                                    // 6725
      this.TEXTAREA.style.visibility = 'visible';                                                                      // 6726
    }                                                                                                                  // 6727
                                                                                                                       // 6728
    Handsontable.Dom.setCaretPosition(this.TEXTAREA, 0, this.TEXTAREA.value.length);                                   // 6729
                                                                                                                       // 6730
  };                                                                                                                   // 6731
                                                                                                                       // 6732
  HandsontableEditor.prototype.close = function () {                                                                   // 6733
                                                                                                                       // 6734
    this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);                                                        // 6735
    this.instance.listen();                                                                                            // 6736
                                                                                                                       // 6737
    Handsontable.editors.TextEditor.prototype.close.apply(this, arguments);                                            // 6738
  };                                                                                                                   // 6739
                                                                                                                       // 6740
  HandsontableEditor.prototype.focus = function () {                                                                   // 6741
                                                                                                                       // 6742
    this.instance.listen();                                                                                            // 6743
                                                                                                                       // 6744
    Handsontable.editors.TextEditor.prototype.focus.apply(this, arguments);                                            // 6745
  };                                                                                                                   // 6746
                                                                                                                       // 6747
  HandsontableEditor.prototype.beginEditing = function (initialValue) {                                                // 6748
    var onBeginEditing = this.instance.getSettings().onBeginEditing;                                                   // 6749
    if (onBeginEditing && onBeginEditing() === false) {                                                                // 6750
      return;                                                                                                          // 6751
    }                                                                                                                  // 6752
                                                                                                                       // 6753
    Handsontable.editors.TextEditor.prototype.beginEditing.apply(this, arguments);                                     // 6754
                                                                                                                       // 6755
  };                                                                                                                   // 6756
                                                                                                                       // 6757
  HandsontableEditor.prototype.finishEditing = function (isCancelled, ctrlDown) {                                      // 6758
    if (this.htEditor.isListening()) { //if focus is still in the HOT editor                                           // 6759
                                                                                                                       // 6760
      //if (Handsontable.tmpHandsontable(this.htContainer,'isListening')) { //if focus is still in the HOT editor      // 6761
    //if (this.$htContainer.handsontable('isListening')) { //if focus is still in the HOT editor                       // 6762
      this.instance.listen(); //return the focus to the parent HOT instance                                            // 6763
    }                                                                                                                  // 6764
                                                                                                                       // 6765
    if(this.htEditor.getSelected()){                                                                                   // 6766
    //if (Handsontable.tmpHandsontable(this.htContainer,'getSelected')) {                                              // 6767
    //if (this.$htContainer.handsontable('getSelected')) {                                                             // 6768
    //  var value = this.$htContainer.handsontable('getInstance').getValue();                                          // 6769
      var value = this.htEditor.getInstance().getValue();                                                              // 6770
      //var value = Handsontable.tmpHandsontable(this.htContainer,'getInstance').getValue();                           // 6771
      if (value !== void 0) { //if the value is undefined then it means we don't want to set the value                 // 6772
        this.setValue(value);                                                                                          // 6773
      }                                                                                                                // 6774
    }                                                                                                                  // 6775
                                                                                                                       // 6776
    return Handsontable.editors.TextEditor.prototype.finishEditing.apply(this, arguments);                             // 6777
  };                                                                                                                   // 6778
                                                                                                                       // 6779
  HandsontableEditor.prototype.assignHooks = function () {                                                             // 6780
  var that = this;                                                                                                     // 6781
    this.instance.addHook('afterDestroy', function () {                                                                // 6782
      if (that.htEditor) {                                                                                             // 6783
        that.htEditor.destroy();                                                                                       // 6784
      }                                                                                                                // 6785
    });                                                                                                                // 6786
                                                                                                                       // 6787
  };                                                                                                                   // 6788
                                                                                                                       // 6789
  Handsontable.editors.HandsontableEditor = HandsontableEditor;                                                        // 6790
  Handsontable.editors.registerEditor('handsontable', HandsontableEditor);                                             // 6791
                                                                                                                       // 6792
                                                                                                                       // 6793
                                                                                                                       // 6794
})(Handsontable);                                                                                                      // 6795
                                                                                                                       // 6796
                                                                                                                       // 6797
                                                                                                                       // 6798
                                                                                                                       // 6799
                                                                                                                       // 6800
                                                                                                                       // 6801
(function (Handsontable) {                                                                                             // 6802
  var AutocompleteEditor = Handsontable.editors.HandsontableEditor.prototype.extend();                                 // 6803
                                                                                                                       // 6804
  AutocompleteEditor.prototype.init = function () {                                                                    // 6805
    Handsontable.editors.HandsontableEditor.prototype.init.apply(this, arguments);                                     // 6806
                                                                                                                       // 6807
    // set choices list initial height, so Walkontable can assign it's scroll handler                                  // 6808
    var choicesListHot = this.htEditor.getInstance();                                                                  // 6809
    choicesListHot.updateSettings({                                                                                    // 6810
      height: 1                                                                                                        // 6811
    });                                                                                                                // 6812
                                                                                                                       // 6813
    this.query = null;                                                                                                 // 6814
    this.choices = [];                                                                                                 // 6815
  };                                                                                                                   // 6816
                                                                                                                       // 6817
  AutocompleteEditor.prototype.createElements = function(){                                                            // 6818
    Handsontable.editors.HandsontableEditor.prototype.createElements.apply(this, arguments);                           // 6819
                                                                                                                       // 6820
    var getSystemSpecificPaddingClass = function () {                                                                  // 6821
      if(window.navigator.platform.indexOf('Mac') != -1) {                                                             // 6822
        return "htMacScroll";                                                                                          // 6823
      } else {                                                                                                         // 6824
        return "";                                                                                                     // 6825
      }                                                                                                                // 6826
    };                                                                                                                 // 6827
                                                                                                                       // 6828
    Handsontable.Dom.addClass(this.htContainer, 'autocompleteEditor');                                                 // 6829
    Handsontable.Dom.addClass(this.htContainer, getSystemSpecificPaddingClass());                                      // 6830
    //this.$htContainer.addClass('autocompleteEditor');                                                                // 6831
    //this.$htContainer.addClass(getSystemSpecificPaddingClass());                                                     // 6832
                                                                                                                       // 6833
  };                                                                                                                   // 6834
                                                                                                                       // 6835
  var skipOne = false;                                                                                                 // 6836
  var onBeforeKeyDown = function (event) {                                                                             // 6837
    skipOne = false;                                                                                                   // 6838
    var editor = this.getActiveEditor();                                                                               // 6839
    var keyCodes = Handsontable.helper.keyCode;                                                                        // 6840
                                                                                                                       // 6841
    if (Handsontable.helper.isPrintableChar(event.keyCode) || event.keyCode === keyCodes.BACKSPACE || event.keyCode === keyCodes.DELETE  || event.keyCode === keyCodes.INSERT) {
      var timeOffset = 0;                                                                                              // 6843
                                                                                                                       // 6844
      // on ctl+c / cmd+c don't update suggestion list                                                                 // 6845
      if(event.keyCode === keyCodes.C && (event.ctrlKey || event.metaKey)) {                                           // 6846
        return;                                                                                                        // 6847
      }                                                                                                                // 6848
                                                                                                                       // 6849
      if(!editor.isOpened()) {                                                                                         // 6850
        timeOffset += 10;                                                                                              // 6851
      }                                                                                                                // 6852
                                                                                                                       // 6853
      editor.instance._registerTimeout(setTimeout(function () {                                                        // 6854
        editor.queryChoices(editor.TEXTAREA.value);                                                                    // 6855
        skipOne = true;                                                                                                // 6856
      }, timeOffset));                                                                                                 // 6857
    }                                                                                                                  // 6858
  };                                                                                                                   // 6859
                                                                                                                       // 6860
  AutocompleteEditor.prototype.prepare = function () {                                                                 // 6861
    this.instance.addHook('beforeKeyDown', onBeforeKeyDown);                                                           // 6862
    Handsontable.editors.HandsontableEditor.prototype.prepare.apply(this, arguments);                                  // 6863
  };                                                                                                                   // 6864
                                                                                                                       // 6865
  AutocompleteEditor.prototype.open = function () {                                                                    // 6866
    Handsontable.editors.HandsontableEditor.prototype.open.apply(this, arguments);                                     // 6867
                                                                                                                       // 6868
    this.TEXTAREA.style.visibility = 'visible';                                                                        // 6869
    this.focus();                                                                                                      // 6870
                                                                                                                       // 6871
                                                                                                                       // 6872
    var choicesListHot = this.htEditor.getInstance();                                                                  // 6873
    var that = this;                                                                                                   // 6874
                                                                                                                       // 6875
    choicesListHot.updateSettings({                                                                                    // 6876
      'colWidths': [Handsontable.Dom.outerWidth(this.TEXTAREA) - 2],                                                   // 6877
      afterRenderer: function (TD, row, col, prop, value) {                                                            // 6878
        var caseSensitive = this.getCellMeta(row, col).filteringCaseSensitive === true;                                // 6879
                                                                                                                       // 6880
        if(value){                                                                                                     // 6881
          var indexOfMatch =  caseSensitive ? value.indexOf(this.query) : value.toLowerCase().indexOf(that.query.toLowerCase());
                                                                                                                       // 6883
          if(indexOfMatch != -1){                                                                                      // 6884
            var match = value.substr(indexOfMatch, that.query.length);                                                 // 6885
            TD.innerHTML = value.replace(match, '<strong>' + match + '</strong>');                                     // 6886
          }                                                                                                            // 6887
        }                                                                                                              // 6888
      }                                                                                                                // 6889
    });                                                                                                                // 6890
                                                                                                                       // 6891
    if(skipOne) {                                                                                                      // 6892
      skipOne = false;                                                                                                 // 6893
    }                                                                                                                  // 6894
    that.instance._registerTimeout(setTimeout(function () {                                                            // 6895
      that.queryChoices(that.TEXTAREA.value);                                                                          // 6896
    }, 0));                                                                                                            // 6897
                                                                                                                       // 6898
  };                                                                                                                   // 6899
                                                                                                                       // 6900
  AutocompleteEditor.prototype.close = function () {                                                                   // 6901
    Handsontable.editors.HandsontableEditor.prototype.close.apply(this, arguments);                                    // 6902
  };                                                                                                                   // 6903
                                                                                                                       // 6904
  AutocompleteEditor.prototype.queryChoices = function(query){                                                         // 6905
    this.query = query;                                                                                                // 6906
                                                                                                                       // 6907
    if (typeof this.cellProperties.source == 'function'){                                                              // 6908
      var that = this;                                                                                                 // 6909
                                                                                                                       // 6910
      this.cellProperties.source(query, function(choices){                                                             // 6911
        that.updateChoicesList(choices);                                                                               // 6912
      });                                                                                                              // 6913
                                                                                                                       // 6914
    } else if (Array.isArray(this.cellProperties.source)) {                                                            // 6915
                                                                                                                       // 6916
      var choices;                                                                                                     // 6917
                                                                                                                       // 6918
      if(!query || this.cellProperties.filter === false){                                                              // 6919
        choices = this.cellProperties.source;                                                                          // 6920
      } else {                                                                                                         // 6921
                                                                                                                       // 6922
        var filteringCaseSensitive = this.cellProperties.filteringCaseSensitive === true;                              // 6923
        var lowerCaseQuery = query.toLowerCase();                                                                      // 6924
                                                                                                                       // 6925
        choices = this.cellProperties.source.filter(function(choice){                                                  // 6926
                                                                                                                       // 6927
          if (filteringCaseSensitive) {                                                                                // 6928
            return choice.indexOf(query) != -1;                                                                        // 6929
          } else {                                                                                                     // 6930
            return choice.toLowerCase().indexOf(lowerCaseQuery) != -1;                                                 // 6931
          }                                                                                                            // 6932
                                                                                                                       // 6933
        });                                                                                                            // 6934
      }                                                                                                                // 6935
                                                                                                                       // 6936
      this.updateChoicesList(choices);                                                                                 // 6937
                                                                                                                       // 6938
    } else {                                                                                                           // 6939
      this.updateChoicesList([]);                                                                                      // 6940
    }                                                                                                                  // 6941
                                                                                                                       // 6942
  };                                                                                                                   // 6943
                                                                                                                       // 6944
  AutocompleteEditor.prototype.updateChoicesList = function (choices) {                                                // 6945
    var pos = Handsontable.Dom.getCaretPosition(this.TEXTAREA),                                                        // 6946
        endPos = Handsontable.Dom.getSelectionEndPosition(this.TEXTAREA);                                              // 6947
                                                                                                                       // 6948
    var orderByRelevance = AutocompleteEditor.sortByRelevance(this.getValue(), choices, this.cellProperties.filteringCaseSensitive);
    var highlightIndex;                                                                                                // 6950
                                                                                                                       // 6951
    if (this.cellProperties.filter != false) {                                                                         // 6952
      var sorted = [];                                                                                                 // 6953
      for(var i = 0, choicesCount = orderByRelevance.length; i < choicesCount; i++) {                                  // 6954
        sorted.push(choices[orderByRelevance[i]]);                                                                     // 6955
      }                                                                                                                // 6956
      highlightIndex = 0;                                                                                              // 6957
      choices = sorted;                                                                                                // 6958
    }                                                                                                                  // 6959
    else {                                                                                                             // 6960
      highlightIndex = orderByRelevance[0];                                                                            // 6961
    }                                                                                                                  // 6962
                                                                                                                       // 6963
    this.choices = choices;                                                                                            // 6964
                                                                                                                       // 6965
    this.htEditor.loadData(Handsontable.helper.pivot([choices]));                                                      // 6966
    this.htEditor.updateSettings({height: this.getDropdownHeight()});                                                  // 6967
    //Handsontable.tmpHandsontable(this.htContainer,'loadData', Handsontable.helper.pivot([choices]));                 // 6968
    //Handsontable.tmpHandsontable(this.htContainer,'updateSettings', {height: this.getDropdownHeight()});             // 6969
                                                                                                                       // 6970
    if (this.cellProperties.strict === true) {                                                                         // 6971
      this.highlightBestMatchingChoice(highlightIndex);                                                                // 6972
    }                                                                                                                  // 6973
                                                                                                                       // 6974
    this.instance.listen();                                                                                            // 6975
    this.TEXTAREA.focus();                                                                                             // 6976
    Handsontable.Dom.setCaretPosition(this.TEXTAREA, pos, (pos != endPos ? endPos : void 0));                          // 6977
  };                                                                                                                   // 6978
                                                                                                                       // 6979
  AutocompleteEditor.prototype.finishEditing = function (restoreOriginalValue) {                                       // 6980
    if (!restoreOriginalValue) {                                                                                       // 6981
      this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);                                                      // 6982
    }                                                                                                                  // 6983
    Handsontable.editors.HandsontableEditor.prototype.finishEditing.apply(this, arguments);                            // 6984
  };                                                                                                                   // 6985
                                                                                                                       // 6986
  AutocompleteEditor.prototype.highlightBestMatchingChoice = function (index) {                                        // 6987
    if (typeof index === "number") {                                                                                   // 6988
       this.htEditor.selectCell(index, 0);                                                                             // 6989
    } else {                                                                                                           // 6990
      this.htEditor.deselectCell();                                                                                    // 6991
    }                                                                                                                  // 6992
  };                                                                                                                   // 6993
                                                                                                                       // 6994
  /**                                                                                                                  // 6995
   * Filters and sorts by relevance                                                                                    // 6996
   * @param value                                                                                                      // 6997
   * @param choices                                                                                                    // 6998
   * @param caseSensitive                                                                                              // 6999
   * @returns {Array} array of indexes in original choices array                                                       // 7000
   */                                                                                                                  // 7001
  AutocompleteEditor.sortByRelevance = function(value, choices, caseSensitive) {                                       // 7002
                                                                                                                       // 7003
    var choicesRelevance = []                                                                                          // 7004
      , currentItem                                                                                                    // 7005
      , valueLength = value.length                                                                                     // 7006
      , valueIndex                                                                                                     // 7007
      , charsLeft                                                                                                      // 7008
      , result = []                                                                                                    // 7009
      , i                                                                                                              // 7010
      , choicesCount;                                                                                                  // 7011
                                                                                                                       // 7012
    if(valueLength === 0) {                                                                                            // 7013
      for(i = 0, choicesCount = choices.length; i < choicesCount; i++) {                                               // 7014
        result.push(i);                                                                                                // 7015
      }                                                                                                                // 7016
      return result;                                                                                                   // 7017
    }                                                                                                                  // 7018
                                                                                                                       // 7019
    for(i = 0, choicesCount = choices.length; i < choicesCount; i++) {                                                 // 7020
      currentItem = choices[i];                                                                                        // 7021
                                                                                                                       // 7022
      if(caseSensitive) {                                                                                              // 7023
        valueIndex = currentItem.indexOf(value);                                                                       // 7024
      } else {                                                                                                         // 7025
        valueIndex = currentItem.toLowerCase().indexOf(value.toLowerCase());                                           // 7026
      }                                                                                                                // 7027
                                                                                                                       // 7028
                                                                                                                       // 7029
      if(valueIndex == -1) { continue; }                                                                               // 7030
      charsLeft =  currentItem.length - valueIndex - valueLength;                                                      // 7031
                                                                                                                       // 7032
      choicesRelevance.push({                                                                                          // 7033
        baseIndex: i,                                                                                                  // 7034
        index: valueIndex,                                                                                             // 7035
        charsLeft: charsLeft,                                                                                          // 7036
        value: currentItem                                                                                             // 7037
      });                                                                                                              // 7038
    }                                                                                                                  // 7039
                                                                                                                       // 7040
    choicesRelevance.sort(function(a, b) {                                                                             // 7041
                                                                                                                       // 7042
      if(b.index === -1) return -1;                                                                                    // 7043
      if(a.index === -1) return 1;                                                                                     // 7044
                                                                                                                       // 7045
      if(a.index < b.index) {                                                                                          // 7046
        return -1;                                                                                                     // 7047
      } else if(b.index < a.index) {                                                                                   // 7048
        return 1;                                                                                                      // 7049
      } else if(a.index === b.index) {                                                                                 // 7050
        if(a.charsLeft < b.charsLeft) {                                                                                // 7051
          return -1;                                                                                                   // 7052
        } else if(a.charsLeft > b.charsLeft) {                                                                         // 7053
          return 1;                                                                                                    // 7054
        } else {                                                                                                       // 7055
          return 0;                                                                                                    // 7056
        }                                                                                                              // 7057
      }                                                                                                                // 7058
    });                                                                                                                // 7059
                                                                                                                       // 7060
    for(i = 0, choicesCount = choicesRelevance.length; i < choicesCount; i++) {                                        // 7061
      result.push(choicesRelevance[i].baseIndex);                                                                      // 7062
    }                                                                                                                  // 7063
                                                                                                                       // 7064
    return result;                                                                                                     // 7065
  };                                                                                                                   // 7066
                                                                                                                       // 7067
  AutocompleteEditor.prototype.getDropdownHeight = function(){                                                         // 7068
    //var firstRowHeight = this.$htContainer.handsontable('getInstance').getRowHeight(0) || 23;                        // 7069
    var firstRowHeight = this.htEditor.getInstance().getRowHeight(0) || 23;                                            // 7070
    //var firstRowHeight = Handsontable.tmpHandsontable(this.htContainer,'getInstance').getRowHeight(0) || 23;         // 7071
    return this.choices.length >= 10 ? 10 * firstRowHeight : this.choices.length * firstRowHeight + 8;                 // 7072
    //return 10 * this.$htContainer.handsontable('getInstance').getRowHeight(0);                                       // 7073
    //sorry, we can't measure row height before it was rendered. Let's use fixed height for now                        // 7074
    return 230;                                                                                                        // 7075
  };                                                                                                                   // 7076
                                                                                                                       // 7077
                                                                                                                       // 7078
  Handsontable.editors.AutocompleteEditor = AutocompleteEditor;                                                        // 7079
  Handsontable.editors.registerEditor('autocomplete', AutocompleteEditor);                                             // 7080
                                                                                                                       // 7081
})(Handsontable);                                                                                                      // 7082
                                                                                                                       // 7083
(function(Handsontable){                                                                                               // 7084
                                                                                                                       // 7085
  var PasswordEditor = Handsontable.editors.TextEditor.prototype.extend();                                             // 7086
                                                                                                                       // 7087
  PasswordEditor.prototype.createElements = function () {                                                              // 7088
    Handsontable.editors.TextEditor.prototype.createElements.apply(this, arguments);                                   // 7089
                                                                                                                       // 7090
    this.TEXTAREA = document.createElement('input');                                                                   // 7091
    this.TEXTAREA.setAttribute('type', 'password');                                                                    // 7092
    this.TEXTAREA.className = 'handsontableInput';                                                                     // 7093
    this.textareaStyle = this.TEXTAREA.style;                                                                          // 7094
    this.textareaStyle.width = 0;                                                                                      // 7095
    this.textareaStyle.height = 0;                                                                                     // 7096
                                                                                                                       // 7097
    Handsontable.Dom.empty(this.TEXTAREA_PARENT);                                                                      // 7098
    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);                                                                   // 7099
                                                                                                                       // 7100
  };                                                                                                                   // 7101
                                                                                                                       // 7102
  Handsontable.editors.PasswordEditor = PasswordEditor;                                                                // 7103
  Handsontable.editors.registerEditor('password', PasswordEditor);                                                     // 7104
                                                                                                                       // 7105
})(Handsontable);                                                                                                      // 7106
                                                                                                                       // 7107
(function (Handsontable) {                                                                                             // 7108
                                                                                                                       // 7109
  var SelectEditor = Handsontable.editors.BaseEditor.prototype.extend();                                               // 7110
                                                                                                                       // 7111
  SelectEditor.prototype.init = function(){                                                                            // 7112
    this.select = document.createElement('SELECT');                                                                    // 7113
    Handsontable.Dom.addClass(this.select, 'htSelectEditor');                                                          // 7114
    this.select.style.display = 'none';                                                                                // 7115
    this.instance.rootElement.appendChild(this.select);                                                                // 7116
  };                                                                                                                   // 7117
                                                                                                                       // 7118
  SelectEditor.prototype.prepare = function(){                                                                         // 7119
    Handsontable.editors.BaseEditor.prototype.prepare.apply(this, arguments);                                          // 7120
                                                                                                                       // 7121
                                                                                                                       // 7122
    var selectOptions = this.cellProperties.selectOptions;                                                             // 7123
    var options;                                                                                                       // 7124
                                                                                                                       // 7125
    if (typeof selectOptions == 'function'){                                                                           // 7126
      options =  this.prepareOptions(selectOptions(this.row, this.col, this.prop))                                     // 7127
    } else {                                                                                                           // 7128
      options =  this.prepareOptions(selectOptions);                                                                   // 7129
    }                                                                                                                  // 7130
                                                                                                                       // 7131
    Handsontable.Dom.empty(this.select);                                                                               // 7132
                                                                                                                       // 7133
    for (var option in options){                                                                                       // 7134
      if (options.hasOwnProperty(option)){                                                                             // 7135
        var optionElement = document.createElement('OPTION');                                                          // 7136
        optionElement.value = option;                                                                                  // 7137
        Handsontable.Dom.fastInnerHTML(optionElement, options[option]);                                                // 7138
        this.select.appendChild(optionElement);                                                                        // 7139
      }                                                                                                                // 7140
    }                                                                                                                  // 7141
  };                                                                                                                   // 7142
                                                                                                                       // 7143
  SelectEditor.prototype.prepareOptions = function(optionsToPrepare){                                                  // 7144
                                                                                                                       // 7145
    var preparedOptions = {};                                                                                          // 7146
                                                                                                                       // 7147
    if (Array.isArray(optionsToPrepare)){                                                                              // 7148
      for(var i = 0, len = optionsToPrepare.length; i < len; i++){                                                     // 7149
        preparedOptions[optionsToPrepare[i]] = optionsToPrepare[i];                                                    // 7150
      }                                                                                                                // 7151
    }                                                                                                                  // 7152
    else if (typeof optionsToPrepare == 'object') {                                                                    // 7153
      preparedOptions = optionsToPrepare;                                                                              // 7154
    }                                                                                                                  // 7155
                                                                                                                       // 7156
    return preparedOptions;                                                                                            // 7157
                                                                                                                       // 7158
  };                                                                                                                   // 7159
                                                                                                                       // 7160
  SelectEditor.prototype.getValue = function () {                                                                      // 7161
    return this.select.value;                                                                                          // 7162
  };                                                                                                                   // 7163
                                                                                                                       // 7164
  SelectEditor.prototype.setValue = function (value) {                                                                 // 7165
    this.select.value = value;                                                                                         // 7166
  };                                                                                                                   // 7167
                                                                                                                       // 7168
  var onBeforeKeyDown = function (event) {                                                                             // 7169
    var instance = this;                                                                                               // 7170
    var editor = instance.getActiveEditor();                                                                           // 7171
                                                                                                                       // 7172
    switch (event.keyCode){                                                                                            // 7173
      case Handsontable.helper.keyCode.ARROW_UP:                                                                       // 7174
                                                                                                                       // 7175
        var previousOption = editor.select.find('option:selected').prev();                                             // 7176
                                                                                                                       // 7177
        if (previousOption.length == 1){                                                                               // 7178
          previousOption.prop('selected', true);                                                                       // 7179
        }                                                                                                              // 7180
                                                                                                                       // 7181
        event.stopImmediatePropagation();                                                                              // 7182
        event.preventDefault();                                                                                        // 7183
        break;                                                                                                         // 7184
                                                                                                                       // 7185
      case Handsontable.helper.keyCode.ARROW_DOWN:                                                                     // 7186
                                                                                                                       // 7187
        var nextOption = editor.select.find('option:selected').next();                                                 // 7188
                                                                                                                       // 7189
        if (nextOption.length == 1){                                                                                   // 7190
          nextOption.prop('selected', true);                                                                           // 7191
        }                                                                                                              // 7192
                                                                                                                       // 7193
        event.stopImmediatePropagation();                                                                              // 7194
        event.preventDefault();                                                                                        // 7195
        break;                                                                                                         // 7196
    }                                                                                                                  // 7197
  };                                                                                                                   // 7198
                                                                                                                       // 7199
  // TODO: Refactor this with the use of new getCell() after 0.12.1                                                    // 7200
  SelectEditor.prototype.checkEditorSection = function () {                                                            // 7201
    if(this.row < this.instance.getSettings().fixedRowsTop) {                                                          // 7202
      if(this.col < this.instance.getSettings().fixedColumnsLeft) {                                                    // 7203
        return 'corner';                                                                                               // 7204
      } else {                                                                                                         // 7205
        return 'top';                                                                                                  // 7206
      }                                                                                                                // 7207
    } else {                                                                                                           // 7208
      if(this.col < this.instance.getSettings().fixedColumnsLeft) {                                                    // 7209
        return 'left';                                                                                                 // 7210
      }                                                                                                                // 7211
    }                                                                                                                  // 7212
  };                                                                                                                   // 7213
                                                                                                                       // 7214
  SelectEditor.prototype.open = function () {                                                                          // 7215
    var width = Handsontable.Dom.outerWidth(this.TD); //important - group layout reads together for better performance // 7216
    var height = Handsontable.Dom.outerHeight(this.TD);                                                                // 7217
    var rootOffset = Handsontable.Dom.offset(this.instance.rootElement);                                               // 7218
    var tdOffset = Handsontable.Dom.offset(this.TD);                                                                   // 7219
    var editorSection = this.checkEditorSection();                                                                     // 7220
    var cssTransformOffset;                                                                                            // 7221
                                                                                                                       // 7222
    switch(editorSection) {                                                                                            // 7223
      case 'top':                                                                                                      // 7224
        cssTransformOffset = Handsontable.Dom.getCssTransform(this.instance.view.wt.wtScrollbars.vertical.clone.wtTable.holder.parentNode);
        break;                                                                                                         // 7226
      case 'left':                                                                                                     // 7227
        cssTransformOffset = Handsontable.Dom.getCssTransform(this.instance.view.wt.wtScrollbars.horizontal.clone.wtTable.holder.parentNode);
        break;                                                                                                         // 7229
      case 'corner':                                                                                                   // 7230
        cssTransformOffset = Handsontable.Dom.getCssTransform(this.instance.view.wt.wtScrollbars.corner.clone.wtTable.holder.parentNode);
        break;                                                                                                         // 7232
    }                                                                                                                  // 7233
                                                                                                                       // 7234
    var selectStyle = this.select.style;                                                                               // 7235
                                                                                                                       // 7236
    if(cssTransformOffset && cssTransformOffset != -1) {                                                               // 7237
      selectStyle[cssTransformOffset[0]] = cssTransformOffset[1];                                                      // 7238
    } else {                                                                                                           // 7239
      Handsontable.Dom.resetCssTransform(this.select);                                                                 // 7240
    }                                                                                                                  // 7241
                                                                                                                       // 7242
    selectStyle.height = height + 'px';                                                                                // 7243
    selectStyle.minWidth = width + 'px';                                                                               // 7244
    selectStyle.top = tdOffset.top - rootOffset.top + 'px';                                                            // 7245
    selectStyle.left = tdOffset.left - rootOffset.left + 'px';                                                         // 7246
    selectStyle.margin = '0px';                                                                                        // 7247
    selectStyle.display = '';                                                                                          // 7248
                                                                                                                       // 7249
    this.instance.addHook('beforeKeyDown', onBeforeKeyDown);                                                           // 7250
  };                                                                                                                   // 7251
                                                                                                                       // 7252
  SelectEditor.prototype.close = function () {                                                                         // 7253
    this.select.style.display = 'none';                                                                                // 7254
    this.instance.removeHook('beforeKeyDown', onBeforeKeyDown);                                                        // 7255
  };                                                                                                                   // 7256
                                                                                                                       // 7257
  SelectEditor.prototype.focus = function () {                                                                         // 7258
    this.select.focus();                                                                                               // 7259
  };                                                                                                                   // 7260
                                                                                                                       // 7261
  Handsontable.editors.SelectEditor = SelectEditor;                                                                    // 7262
  Handsontable.editors.registerEditor('select', SelectEditor);                                                         // 7263
                                                                                                                       // 7264
})(Handsontable);                                                                                                      // 7265
                                                                                                                       // 7266
(function (Handsontable) {                                                                                             // 7267
                                                                                                                       // 7268
  var DropdownEditor = Handsontable.editors.AutocompleteEditor.prototype.extend();                                     // 7269
                                                                                                                       // 7270
  DropdownEditor.prototype.prepare = function () {                                                                     // 7271
    Handsontable.editors.AutocompleteEditor.prototype.prepare.apply(this, arguments);                                  // 7272
                                                                                                                       // 7273
    this.cellProperties.filter = false;                                                                                // 7274
    this.cellProperties.strict = true;                                                                                 // 7275
                                                                                                                       // 7276
  };                                                                                                                   // 7277
                                                                                                                       // 7278
                                                                                                                       // 7279
  Handsontable.editors.DropdownEditor = DropdownEditor;                                                                // 7280
  Handsontable.editors.registerEditor('dropdown', DropdownEditor);                                                     // 7281
                                                                                                                       // 7282
                                                                                                                       // 7283
})(Handsontable);                                                                                                      // 7284
(function (Handsontable) {                                                                                             // 7285
                                                                                                                       // 7286
  'use strict';                                                                                                        // 7287
                                                                                                                       // 7288
  var NumericEditor = Handsontable.editors.TextEditor.prototype.extend();                                              // 7289
                                                                                                                       // 7290
  NumericEditor.prototype.beginEditing = function (initialValue) {                                                     // 7291
                                                                                                                       // 7292
    var BaseEditor = Handsontable.editors.TextEditor.prototype;                                                        // 7293
                                                                                                                       // 7294
    if (typeof (initialValue) === 'undefined' && this.originalValue) {                                                 // 7295
                                                                                                                       // 7296
      var value = '' + this.originalValue;                                                                             // 7297
                                                                                                                       // 7298
      if (typeof this.cellProperties.language !== 'undefined') {                                                       // 7299
        numeral.language(this.cellProperties.language)                                                                 // 7300
      }                                                                                                                // 7301
                                                                                                                       // 7302
      var decimalDelimiter = numeral.languageData().delimiters.decimal;                                                // 7303
      value = value.replace('.', decimalDelimiter);                                                                    // 7304
                                                                                                                       // 7305
      BaseEditor.beginEditing.apply(this, [value]);                                                                    // 7306
    } else {                                                                                                           // 7307
      BaseEditor.beginEditing.apply(this, arguments);                                                                  // 7308
    }                                                                                                                  // 7309
                                                                                                                       // 7310
  };                                                                                                                   // 7311
                                                                                                                       // 7312
  Handsontable.editors.NumericEditor = NumericEditor;                                                                  // 7313
  Handsontable.editors.registerEditor('numeric', NumericEditor);                                                       // 7314
                                                                                                                       // 7315
})(Handsontable);                                                                                                      // 7316
                                                                                                                       // 7317
/**                                                                                                                    // 7318
 * Numeric cell validator                                                                                              // 7319
 * @param {*} value - Value of edited cell                                                                             // 7320
 * @param {*} callback - Callback called with validation result                                                        // 7321
 */                                                                                                                    // 7322
Handsontable.NumericValidator = function (value, callback) {                                                           // 7323
  if (value === null) {                                                                                                // 7324
    value = '';                                                                                                        // 7325
  }                                                                                                                    // 7326
  callback(/^-?\d*(\.|\,)?\d*$/.test(value));                                                                          // 7327
};                                                                                                                     // 7328
/**                                                                                                                    // 7329
 * Function responsible for validation of autocomplete value                                                           // 7330
 * @param {*} value - Value of edited cell                                                                             // 7331
 * @param {*} calback - Callback called with validation result                                                         // 7332
 */                                                                                                                    // 7333
var process = function (value, callback) {                                                                             // 7334
                                                                                                                       // 7335
  var originalVal  = value;                                                                                            // 7336
  var lowercaseVal = typeof originalVal === 'string' ? originalVal.toLowerCase() : null;                               // 7337
                                                                                                                       // 7338
  return function (source) {                                                                                           // 7339
    var found = false;                                                                                                 // 7340
    for (var s = 0, slen = source.length; s < slen; s++) {                                                             // 7341
      if (originalVal === source[s]) {                                                                                 // 7342
        found = true; //perfect match                                                                                  // 7343
        break;                                                                                                         // 7344
      }                                                                                                                // 7345
      else if (lowercaseVal === source[s].toLowerCase()) {                                                             // 7346
        // changes[i][3] = source[s]; //good match, fix the case << TODO?                                              // 7347
        found = true;                                                                                                  // 7348
        break;                                                                                                         // 7349
      }                                                                                                                // 7350
    }                                                                                                                  // 7351
                                                                                                                       // 7352
    callback(found);                                                                                                   // 7353
  }                                                                                                                    // 7354
};                                                                                                                     // 7355
                                                                                                                       // 7356
/**                                                                                                                    // 7357
 * Autocomplete cell validator                                                                                         // 7358
 * @param {*} value - Value of edited cell                                                                             // 7359
 * @param {*} calback - Callback called with validation result                                                         // 7360
 */                                                                                                                    // 7361
Handsontable.AutocompleteValidator = function (value, callback) {                                                      // 7362
  if (this.strict && this.source) {                                                                                    // 7363
    typeof this.source === 'function' ? this.source(value, process(value, callback)) : process(value, callback)(this.source);
  } else {                                                                                                             // 7365
    callback(true);                                                                                                    // 7366
  }                                                                                                                    // 7367
};                                                                                                                     // 7368
                                                                                                                       // 7369
/**                                                                                                                    // 7370
 * Cell type is just a shortcut for setting bunch of cellProperties (used in getCellMeta)                              // 7371
 */                                                                                                                    // 7372
                                                                                                                       // 7373
Handsontable.mobileBrowser = Handsontable.helper.isMobileBrowser();  // check if viewed on a mobile device             // 7374
                                                                                                                       // 7375
Handsontable.AutocompleteCell = {                                                                                      // 7376
  editor: Handsontable.editors.AutocompleteEditor,                                                                     // 7377
  renderer: Handsontable.renderers.AutocompleteRenderer,                                                               // 7378
  validator: Handsontable.AutocompleteValidator                                                                        // 7379
};                                                                                                                     // 7380
                                                                                                                       // 7381
Handsontable.CheckboxCell = {                                                                                          // 7382
  editor: Handsontable.editors.CheckboxEditor,                                                                         // 7383
  renderer: Handsontable.renderers.CheckboxRenderer                                                                    // 7384
};                                                                                                                     // 7385
                                                                                                                       // 7386
Handsontable.TextCell = {                                                                                              // 7387
  editor: Handsontable.mobileBrowser ? Handsontable.editors.MobileTextEditor : Handsontable.editors.TextEditor,        // 7388
  renderer: Handsontable.renderers.TextRenderer                                                                        // 7389
};                                                                                                                     // 7390
                                                                                                                       // 7391
Handsontable.NumericCell = {                                                                                           // 7392
  editor: Handsontable.editors.NumericEditor,                                                                          // 7393
  renderer: Handsontable.renderers.NumericRenderer,                                                                    // 7394
  validator: Handsontable.NumericValidator,                                                                            // 7395
  dataType: 'number'                                                                                                   // 7396
};                                                                                                                     // 7397
                                                                                                                       // 7398
Handsontable.DateCell = {                                                                                              // 7399
  editor: Handsontable.editors.DateEditor,                                                                             // 7400
  renderer: Handsontable.renderers.AutocompleteRenderer //displays small gray arrow on right side of the cell          // 7401
};                                                                                                                     // 7402
                                                                                                                       // 7403
Handsontable.HandsontableCell = {                                                                                      // 7404
  editor: Handsontable.editors.HandsontableEditor,                                                                     // 7405
  renderer: Handsontable.renderers.AutocompleteRenderer //displays small gray arrow on right side of the cell          // 7406
};                                                                                                                     // 7407
                                                                                                                       // 7408
Handsontable.PasswordCell = {                                                                                          // 7409
  editor: Handsontable.editors.PasswordEditor,                                                                         // 7410
  renderer: Handsontable.renderers.PasswordRenderer,                                                                   // 7411
  copyable: false                                                                                                      // 7412
};                                                                                                                     // 7413
                                                                                                                       // 7414
Handsontable.DropdownCell = {                                                                                          // 7415
  editor: Handsontable.editors.DropdownEditor,                                                                         // 7416
  renderer: Handsontable.renderers.AutocompleteRenderer, //displays small gray arrow on right side of the cell         // 7417
  validator: Handsontable.AutocompleteValidator                                                                        // 7418
};                                                                                                                     // 7419
                                                                                                                       // 7420
//here setup the friendly aliases that are used by cellProperties.type                                                 // 7421
Handsontable.cellTypes = {                                                                                             // 7422
  text: Handsontable.TextCell,                                                                                         // 7423
  date: Handsontable.DateCell,                                                                                         // 7424
  numeric: Handsontable.NumericCell,                                                                                   // 7425
  checkbox: Handsontable.CheckboxCell,                                                                                 // 7426
  autocomplete: Handsontable.AutocompleteCell,                                                                         // 7427
  handsontable: Handsontable.HandsontableCell,                                                                         // 7428
  password: Handsontable.PasswordCell,                                                                                 // 7429
  dropdown: Handsontable.DropdownCell                                                                                  // 7430
};                                                                                                                     // 7431
                                                                                                                       // 7432
//here setup the friendly aliases that are used by cellProperties.renderer and cellProperties.editor                   // 7433
Handsontable.cellLookup = {                                                                                            // 7434
  validator: {                                                                                                         // 7435
    numeric: Handsontable.NumericValidator,                                                                            // 7436
    autocomplete: Handsontable.AutocompleteValidator                                                                   // 7437
  }                                                                                                                    // 7438
};                                                                                                                     // 7439
                                                                                                                       // 7440
/**                                                                                                                    // 7441
 * autoResize - resizes a DOM element to the width and height of another DOM element                                   // 7442
 *                                                                                                                     // 7443
 * Copyright 2014, Marcin Warpechowski                                                                                 // 7444
 * Licensed under the MIT license                                                                                      // 7445
 */                                                                                                                    // 7446
var autoResize = function () {                                                                                         // 7447
  var defaults = {                                                                                                     // 7448
      minHeight: 200,                                                                                                  // 7449
      maxHeight: 300,                                                                                                  // 7450
      minWidth: 100,                                                                                                   // 7451
      maxWidth: 300                                                                                                    // 7452
    },                                                                                                                 // 7453
    el,                                                                                                                // 7454
    body = document.body,                                                                                              // 7455
    text = document.createTextNode(''),                                                                                // 7456
    span = document.createElement('SPAN'),                                                                             // 7457
    observe = function (element, event, handler) {                                                                     // 7458
      if (window.attachEvent) {                                                                                        // 7459
        element.attachEvent('on' + event, handler);                                                                    // 7460
      } else {                                                                                                         // 7461
        element.addEventListener(event, handler, false);                                                               // 7462
      }                                                                                                                // 7463
    },                                                                                                                 // 7464
    unObserve = function (element, event, handler) {                                                                   // 7465
      if (window.removeEventListener) {                                                                                // 7466
        element.removeEventListener(event, handler, false);                                                            // 7467
      } else {                                                                                                         // 7468
        element.detachEvent('on' + event, handler);                                                                    // 7469
      }                                                                                                                // 7470
    },                                                                                                                 // 7471
    resize = function (newChar) {                                                                                      // 7472
      if(!newChar) {                                                                                                   // 7473
        newChar = "";                                                                                                  // 7474
      } else if (!/^[a-zA-Z \.,\\\/\|0-9]$/.test(newChar)) {                                                           // 7475
        newChar = ".";                                                                                                 // 7476
      }                                                                                                                // 7477
                                                                                                                       // 7478
      if (text.textContent !== void 0) {                                                                               // 7479
        text.textContent = el.value + newChar;                                                                         // 7480
      }                                                                                                                // 7481
      else {                                                                                                           // 7482
        text.data = el.value + newChar; //IE8                                                                          // 7483
      }                                                                                                                // 7484
      span.style.fontSize = Handsontable.Dom.getComputedStyle(el).fontSize;                                            // 7485
      span.style.fontFamily = Handsontable.Dom.getComputedStyle(el).fontFamily;                                        // 7486
      span.style['white-space'] = "pre";                                                                               // 7487
                                                                                                                       // 7488
      body.appendChild(span);                                                                                          // 7489
      var width = span.clientWidth + 2;                                                                                // 7490
      body.removeChild(span);                                                                                          // 7491
                                                                                                                       // 7492
      el.style.height = defaults.minHeight + 'px';                                                                     // 7493
                                                                                                                       // 7494
      if (defaults.minWidth > width) {                                                                                 // 7495
        el.style.width = defaults.minWidth + 'px';                                                                     // 7496
      } else if (width > defaults.maxWidth) {                                                                          // 7497
        el.style.width = defaults.maxWidth + 'px';                                                                     // 7498
      } else {                                                                                                         // 7499
        el.style.width = width + 'px';                                                                                 // 7500
      }                                                                                                                // 7501
                                                                                                                       // 7502
      var scrollHeight = el.scrollHeight;                                                                              // 7503
      if (defaults.minHeight > scrollHeight) {                                                                         // 7504
        el.style.height = defaults.minHeight + 'px';                                                                   // 7505
      } else if (defaults.maxHeight < scrollHeight) {                                                                  // 7506
        el.style.height = defaults.maxHeight + 'px';                                                                   // 7507
        el.style.overflowY = 'visible';                                                                                // 7508
      } else {                                                                                                         // 7509
        el.style.height = scrollHeight + 'px';                                                                         // 7510
      }                                                                                                                // 7511
                                                                                                                       // 7512
    },                                                                                                                 // 7513
    delayedResize = function () {                                                                                      // 7514
      window.setTimeout(resize, 0);                                                                                    // 7515
    },                                                                                                                 // 7516
    extendDefaults = function (config) {                                                                               // 7517
                                                                                                                       // 7518
      if (config && config.minHeight) {                                                                                // 7519
        if (config.minHeight == 'inherit') {                                                                           // 7520
          defaults.minHeight = el.clientHeight;                                                                        // 7521
        } else {                                                                                                       // 7522
          var minHeight = parseInt(config.minHeight);                                                                  // 7523
          if (!isNaN(minHeight)) {                                                                                     // 7524
            defaults.minHeight = minHeight                                                                             // 7525
          }                                                                                                            // 7526
        }                                                                                                              // 7527
      }                                                                                                                // 7528
                                                                                                                       // 7529
      if (config && config.maxHeight) {                                                                                // 7530
        if (config.maxHeight == 'inherit') {                                                                           // 7531
          defaults.maxHeight = el.clientHeight;                                                                        // 7532
        } else {                                                                                                       // 7533
          var maxHeight = parseInt(config.maxHeight);                                                                  // 7534
          if (!isNaN(maxHeight)) {                                                                                     // 7535
            defaults.maxHeight = maxHeight                                                                             // 7536
          }                                                                                                            // 7537
        }                                                                                                              // 7538
      }                                                                                                                // 7539
                                                                                                                       // 7540
      if (config && config.minWidth) {                                                                                 // 7541
        if (config.minWidth == 'inherit') {                                                                            // 7542
          defaults.minWidth = el.clientWidth;                                                                          // 7543
        } else {                                                                                                       // 7544
          var minWidth = parseInt(config.minWidth);                                                                    // 7545
          if (!isNaN(minWidth)) {                                                                                      // 7546
            defaults.minWidth = minWidth                                                                               // 7547
          }                                                                                                            // 7548
        }                                                                                                              // 7549
      }                                                                                                                // 7550
                                                                                                                       // 7551
      if (config && config.maxWidth) {                                                                                 // 7552
        if (config.maxWidth == 'inherit') {                                                                            // 7553
          defaults.maxWidth = el.clientWidth;                                                                          // 7554
        } else {                                                                                                       // 7555
          var maxWidth = parseInt(config.maxWidth);                                                                    // 7556
          if (!isNaN(maxWidth)) {                                                                                      // 7557
            defaults.maxWidth = maxWidth                                                                               // 7558
          }                                                                                                            // 7559
        }                                                                                                              // 7560
      }                                                                                                                // 7561
                                                                                                                       // 7562
      if(!span.firstChild) {                                                                                           // 7563
        span.className = "autoResize";                                                                                 // 7564
        span.style.display = 'inline-block';                                                                           // 7565
        span.appendChild(text);                                                                                        // 7566
      }                                                                                                                // 7567
    },                                                                                                                 // 7568
    init = function (el_, config, doObserve) {                                                                         // 7569
      el = el_;                                                                                                        // 7570
      extendDefaults(config);                                                                                          // 7571
                                                                                                                       // 7572
      if (el.nodeName == 'TEXTAREA') {                                                                                 // 7573
                                                                                                                       // 7574
        el.style.resize = 'none';                                                                                      // 7575
        el.style.overflowY = '';                                                                                       // 7576
        el.style.height = defaults.minHeight + 'px';                                                                   // 7577
        el.style.minWidth = defaults.minWidth + 'px';                                                                  // 7578
        el.style.maxWidth = defaults.maxWidth + 'px';                                                                  // 7579
        el.style.overflowY = 'hidden';                                                                                 // 7580
      }                                                                                                                // 7581
                                                                                                                       // 7582
      if(doObserve) {                                                                                                  // 7583
        observe(el, 'change', resize);                                                                                 // 7584
        observe(el, 'cut', delayedResize);                                                                             // 7585
        observe(el, 'paste', delayedResize);                                                                           // 7586
        observe(el, 'drop', delayedResize);                                                                            // 7587
        observe(el, 'keydown', delayedResize);                                                                         // 7588
      }                                                                                                                // 7589
                                                                                                                       // 7590
      resize();                                                                                                        // 7591
    };                                                                                                                 // 7592
                                                                                                                       // 7593
  return {                                                                                                             // 7594
    init: function (el_, config, doObserve) {                                                                          // 7595
      init(el_, config, doObserve);                                                                                    // 7596
    },                                                                                                                 // 7597
    unObserve: function () {                                                                                           // 7598
      unObserve(el, 'change', resize);                                                                                 // 7599
      unObserve(el, 'cut', delayedResize);                                                                             // 7600
      unObserve(el, 'paste', delayedResize);                                                                           // 7601
      unObserve(el, 'drop', delayedResize);                                                                            // 7602
      unObserve(el, 'keydown', delayedResize);                                                                         // 7603
    },                                                                                                                 // 7604
    resize: resize                                                                                                     // 7605
  }                                                                                                                    // 7606
                                                                                                                       // 7607
};                                                                                                                     // 7608
                                                                                                                       // 7609
/**                                                                                                                    // 7610
 * SheetClip - Spreadsheet Clipboard Parser                                                                            // 7611
 * version 0.2                                                                                                         // 7612
 *                                                                                                                     // 7613
 * This tiny library transforms JavaScript arrays to strings that are pasteable by LibreOffice, OpenOffice,            // 7614
 * Google Docs and Microsoft Excel.                                                                                    // 7615
 *                                                                                                                     // 7616
 * Copyright 2012, Marcin Warpechowski                                                                                 // 7617
 * Licensed under the MIT license.                                                                                     // 7618
 * http://github.com/warpech/sheetclip/                                                                                // 7619
 */                                                                                                                    // 7620
/*jslint white: true*/                                                                                                 // 7621
(function (global) {                                                                                                   // 7622
  "use strict";                                                                                                        // 7623
                                                                                                                       // 7624
  function countQuotes(str) {                                                                                          // 7625
    return str.split('"').length - 1;                                                                                  // 7626
  }                                                                                                                    // 7627
                                                                                                                       // 7628
  global.SheetClip = {                                                                                                 // 7629
    parse: function (str) {                                                                                            // 7630
      var r, rlen, rows, arr = [], a = 0, c, clen, multiline, last;                                                    // 7631
      rows = str.split('\n');                                                                                          // 7632
      if (rows.length > 1 && rows[rows.length - 1] === '') {                                                           // 7633
        rows.pop();                                                                                                    // 7634
      }                                                                                                                // 7635
      for (r = 0, rlen = rows.length; r < rlen; r += 1) {                                                              // 7636
        rows[r] = rows[r].split('\t');                                                                                 // 7637
        for (c = 0, clen = rows[r].length; c < clen; c += 1) {                                                         // 7638
          if (!arr[a]) {                                                                                               // 7639
            arr[a] = [];                                                                                               // 7640
          }                                                                                                            // 7641
          if (multiline && c === 0) {                                                                                  // 7642
            last = arr[a].length - 1;                                                                                  // 7643
            arr[a][last] = arr[a][last] + '\n' + rows[r][0];                                                           // 7644
            if (multiline && (countQuotes(rows[r][0]) & 1)) { //& 1 is a bitwise way of performing mod 2               // 7645
              multiline = false;                                                                                       // 7646
              arr[a][last] = arr[a][last].substring(0, arr[a][last].length - 1).replace(/""/g, '"');                   // 7647
            }                                                                                                          // 7648
          }                                                                                                            // 7649
          else {                                                                                                       // 7650
            if (c === clen - 1 && rows[r][c].indexOf('"') === 0) {                                                     // 7651
              arr[a].push(rows[r][c].substring(1).replace(/""/g, '"'));                                                // 7652
              multiline = true;                                                                                        // 7653
            }                                                                                                          // 7654
            else {                                                                                                     // 7655
              arr[a].push(rows[r][c].replace(/""/g, '"'));                                                             // 7656
              multiline = false;                                                                                       // 7657
            }                                                                                                          // 7658
          }                                                                                                            // 7659
        }                                                                                                              // 7660
        if (!multiline) {                                                                                              // 7661
          a += 1;                                                                                                      // 7662
        }                                                                                                              // 7663
      }                                                                                                                // 7664
      return arr;                                                                                                      // 7665
    },                                                                                                                 // 7666
                                                                                                                       // 7667
    stringify: function (arr) {                                                                                        // 7668
      var r, rlen, c, clen, str = '', val;                                                                             // 7669
      for (r = 0, rlen = arr.length; r < rlen; r += 1) {                                                               // 7670
        for (c = 0, clen = arr[r].length; c < clen; c += 1) {                                                          // 7671
          if (c > 0) {                                                                                                 // 7672
            str += '\t';                                                                                               // 7673
          }                                                                                                            // 7674
          val = arr[r][c];                                                                                             // 7675
          if (typeof val === 'string') {                                                                               // 7676
            if (val.indexOf('\n') > -1) {                                                                              // 7677
              str += '"' + val.replace(/"/g, '""') + '"';                                                              // 7678
            }                                                                                                          // 7679
            else {                                                                                                     // 7680
              str += val;                                                                                              // 7681
            }                                                                                                          // 7682
          }                                                                                                            // 7683
          else if (val === null || val === void 0) { //void 0 resolves to undefined                                    // 7684
            str += '';                                                                                                 // 7685
          }                                                                                                            // 7686
          else {                                                                                                       // 7687
            str += val;                                                                                                // 7688
          }                                                                                                            // 7689
        }                                                                                                              // 7690
        if (r < rlen - 1) {                                                                                            // 7691
          str += '\n';                                                                                                 // 7692
        }                                                                                                              // 7693
      }                                                                                                                // 7694
      return str;                                                                                                      // 7695
    }                                                                                                                  // 7696
  };                                                                                                                   // 7697
}(window));                                                                                                            // 7698
/**                                                                                                                    // 7699
 * CopyPaste.js                                                                                                        // 7700
 * Creates a textarea that stays hidden on the page and gets focused when user presses CTRL while not having a form input focused
 * In future we may implement a better driver when better APIs are available                                           // 7702
 * @constructor                                                                                                        // 7703
 */                                                                                                                    // 7704
var CopyPaste = (function () {                                                                                         // 7705
  var instance;                                                                                                        // 7706
  return {                                                                                                             // 7707
    getInstance: function () {                                                                                         // 7708
      if (!instance) {                                                                                                 // 7709
        instance = new CopyPasteClass();                                                                               // 7710
      } else if (instance.hasBeenDestroyed()){                                                                         // 7711
        instance.init();                                                                                               // 7712
      }                                                                                                                // 7713
                                                                                                                       // 7714
      instance.refCounter++;                                                                                           // 7715
                                                                                                                       // 7716
      return instance;                                                                                                 // 7717
    }                                                                                                                  // 7718
  };                                                                                                                   // 7719
})();                                                                                                                  // 7720
                                                                                                                       // 7721
function CopyPasteClass() {                                                                                            // 7722
  this.refCounter = 0;                                                                                                 // 7723
  this.init();                                                                                                         // 7724
}                                                                                                                      // 7725
                                                                                                                       // 7726
CopyPasteClass.prototype.init = function () {                                                                          // 7727
  var that = this                                                                                                      // 7728
    , style                                                                                                            // 7729
    , parent;                                                                                                          // 7730
                                                                                                                       // 7731
  this.copyCallbacks = [];                                                                                             // 7732
  this.cutCallbacks = [];                                                                                              // 7733
  this.pasteCallbacks = [];                                                                                            // 7734
  this._eventManager = Handsontable.eventManager(this);                                                                // 7735
                                                                                                                       // 7736
//  this.listenerElement = document.documentElement;                                                                   // 7737
  parent = document.body;                                                                                              // 7738
                                                                                                                       // 7739
  if (document.getElementById('CopyPasteDiv')) {                                                                       // 7740
    this.elDiv = document.getElementById('CopyPasteDiv');                                                              // 7741
    this.elTextarea = this.elDiv.firstChild;                                                                           // 7742
  }                                                                                                                    // 7743
  else {                                                                                                               // 7744
    this.elDiv = document.createElement('DIV');                                                                        // 7745
    this.elDiv.id = 'CopyPasteDiv';                                                                                    // 7746
    style = this.elDiv.style;                                                                                          // 7747
    style.position = 'fixed';                                                                                          // 7748
    style.top = '-10000px';                                                                                            // 7749
    style.left = '-10000px';                                                                                           // 7750
    parent.appendChild(this.elDiv);                                                                                    // 7751
                                                                                                                       // 7752
    this.elTextarea = document.createElement('TEXTAREA');                                                              // 7753
    this.elTextarea.className = 'copyPaste';                                                                           // 7754
    this.elTextarea.onpaste = function (event) {                                                                       // 7755
      if('WebkitAppearance' in document.documentElement.style) { // chrome and safari                                  // 7756
        this.value = event.clipboardData.getData("Text");                                                              // 7757
        return false;                                                                                                  // 7758
      }                                                                                                                // 7759
    };                                                                                                                 // 7760
    style = this.elTextarea.style;                                                                                     // 7761
    style.width = '10000px';                                                                                           // 7762
    style.height = '10000px';                                                                                          // 7763
    style.overflow = 'hidden';                                                                                         // 7764
    this.elDiv.appendChild(this.elTextarea);                                                                           // 7765
                                                                                                                       // 7766
    if (typeof style.opacity !== 'undefined') {                                                                        // 7767
      style.opacity = 0;                                                                                               // 7768
    }                                                                                                                  // 7769
    else {                                                                                                             // 7770
      /*@cc_on @if (@_jscript)                                                                                         // 7771
       if(typeof style.filter === 'string') {                                                                          // 7772
       style.filter = 'alpha(opacity=0)';                                                                              // 7773
       }                                                                                                               // 7774
       @end @*/                                                                                                        // 7775
    }                                                                                                                  // 7776
  }                                                                                                                    // 7777
                                                                                                                       // 7778
  this.keydownListener = function (event) {                                                                            // 7779
    var isCtrlDown = false;                                                                                            // 7780
    if (event.metaKey) { //mac                                                                                         // 7781
      isCtrlDown = true;                                                                                               // 7782
    }                                                                                                                  // 7783
    else if (event.ctrlKey && navigator.userAgent.indexOf('Mac') === -1) { //pc                                        // 7784
      isCtrlDown = true;                                                                                               // 7785
    }                                                                                                                  // 7786
                                                                                                                       // 7787
    if (isCtrlDown) {                                                                                                  // 7788
      if (document.activeElement !== that.elTextarea && (that.getSelectionText() != '' || ['INPUT', 'SELECT', 'TEXTAREA'].indexOf(document.activeElement.nodeName) != -1)) {
        return; //this is needed by fragmentSelection in Handsontable. Ignore copypaste.js behavior if fragment of cell text is selected
      }                                                                                                                // 7791
                                                                                                                       // 7792
      that.selectNodeText(that.elTextarea);                                                                            // 7793
      setTimeout(function () {                                                                                         // 7794
        that.selectNodeText(that.elTextarea);                                                                          // 7795
      }, 0);                                                                                                           // 7796
    }                                                                                                                  // 7797
                                                                                                                       // 7798
    /* 67 = c                                                                                                          // 7799
     * 86 = v                                                                                                          // 7800
     * 88 = x                                                                                                          // 7801
     */                                                                                                                // 7802
    if (isCtrlDown && (event.keyCode === 67 || event.keyCode === 86 || event.keyCode === 88)) {                        // 7803
      // that.selectNodeText(that.elTextarea);                                                                         // 7804
                                                                                                                       // 7805
      if (event.keyCode === 88) { //works in all browsers, incl. Opera < 12.12                                         // 7806
        setTimeout(function () {                                                                                       // 7807
          that.triggerCut(event);                                                                                      // 7808
        }, 0);                                                                                                         // 7809
      }                                                                                                                // 7810
      else if (event.keyCode === 86) {                                                                                 // 7811
        setTimeout(function () {                                                                                       // 7812
          that.triggerPaste(event);                                                                                    // 7813
        }, 0);                                                                                                         // 7814
      }                                                                                                                // 7815
    }                                                                                                                  // 7816
  };                                                                                                                   // 7817
                                                                                                                       // 7818
  this._eventManager.addEventListener(document.documentElement,'keydown',this.keydownListener, false);                 // 7819
                                                                                                                       // 7820
//  this._bindEvent(this.listenerElement, 'keydown', this.keydownListener);                                            // 7821
};                                                                                                                     // 7822
                                                                                                                       // 7823
//http://jsperf.com/textara-selection                                                                                  // 7824
//http://stackoverflow.com/questions/1502385/how-can-i-make-this-code-work-in-ie                                       // 7825
CopyPasteClass.prototype.selectNodeText = function (el) {                                                              // 7826
  if (el) {                                                                                                            // 7827
    el.select();                                                                                                       // 7828
  }                                                                                                                    // 7829
};                                                                                                                     // 7830
                                                                                                                       // 7831
//http://stackoverflow.com/questions/5379120/get-the-highlighted-selected-text                                         // 7832
CopyPasteClass.prototype.getSelectionText = function () {                                                              // 7833
  var text = "";                                                                                                       // 7834
  if (window.getSelection) {                                                                                           // 7835
    text = window.getSelection().toString();                                                                           // 7836
  } else if (document.selection && document.selection.type != "Control") {                                             // 7837
    text = document.selection.createRange().text;                                                                      // 7838
  }                                                                                                                    // 7839
  return text;                                                                                                         // 7840
};                                                                                                                     // 7841
                                                                                                                       // 7842
CopyPasteClass.prototype.copyable = function (str) {                                                                   // 7843
  if (typeof str !== 'string' && str.toString === void 0) {                                                            // 7844
    throw new Error('copyable requires string parameter');                                                             // 7845
  }                                                                                                                    // 7846
  this.elTextarea.value = str;                                                                                         // 7847
};                                                                                                                     // 7848
                                                                                                                       // 7849
/*CopyPasteClass.prototype.onCopy = function (fn) {                                                                    // 7850
  this.copyCallbacks.push(fn);                                                                                         // 7851
};*/                                                                                                                   // 7852
                                                                                                                       // 7853
CopyPasteClass.prototype.onCut = function (fn) {                                                                       // 7854
  this.cutCallbacks.push(fn);                                                                                          // 7855
};                                                                                                                     // 7856
                                                                                                                       // 7857
CopyPasteClass.prototype.onPaste = function (fn) {                                                                     // 7858
  this.pasteCallbacks.push(fn);                                                                                        // 7859
};                                                                                                                     // 7860
                                                                                                                       // 7861
CopyPasteClass.prototype.removeCallback = function (fn) {                                                              // 7862
  var i, ilen;                                                                                                         // 7863
  for (i = 0, ilen = this.copyCallbacks.length; i < ilen; i++) {                                                       // 7864
    if (this.copyCallbacks[i] === fn) {                                                                                // 7865
      this.copyCallbacks.splice(i, 1);                                                                                 // 7866
      return true;                                                                                                     // 7867
    }                                                                                                                  // 7868
  }                                                                                                                    // 7869
  for (i = 0, ilen = this.cutCallbacks.length; i < ilen; i++) {                                                        // 7870
    if (this.cutCallbacks[i] === fn) {                                                                                 // 7871
      this.cutCallbacks.splice(i, 1);                                                                                  // 7872
      return true;                                                                                                     // 7873
    }                                                                                                                  // 7874
  }                                                                                                                    // 7875
  for (i = 0, ilen = this.pasteCallbacks.length; i < ilen; i++) {                                                      // 7876
    if (this.pasteCallbacks[i] === fn) {                                                                               // 7877
      this.pasteCallbacks.splice(i, 1);                                                                                // 7878
      return true;                                                                                                     // 7879
    }                                                                                                                  // 7880
  }                                                                                                                    // 7881
  return false;                                                                                                        // 7882
};                                                                                                                     // 7883
                                                                                                                       // 7884
CopyPasteClass.prototype.triggerCut = function (event) {                                                               // 7885
  var that = this;                                                                                                     // 7886
  if (that.cutCallbacks) {                                                                                             // 7887
    setTimeout(function () {                                                                                           // 7888
      for (var i = 0, ilen = that.cutCallbacks.length; i < ilen; i++) {                                                // 7889
        that.cutCallbacks[i](event);                                                                                   // 7890
      }                                                                                                                // 7891
    }, 50);                                                                                                            // 7892
  }                                                                                                                    // 7893
};                                                                                                                     // 7894
                                                                                                                       // 7895
CopyPasteClass.prototype.triggerPaste = function (event, str) {                                                        // 7896
  var that = this;                                                                                                     // 7897
  if (that.pasteCallbacks) {                                                                                           // 7898
    setTimeout(function () {                                                                                           // 7899
      var val = (str || that.elTextarea.value).replace(/\n$/, ''); //remove trailing newline                           // 7900
      for (var i = 0, ilen = that.pasteCallbacks.length; i < ilen; i++) {                                              // 7901
        that.pasteCallbacks[i](val, event);                                                                            // 7902
      }                                                                                                                // 7903
    }, 50);                                                                                                            // 7904
  }                                                                                                                    // 7905
};                                                                                                                     // 7906
                                                                                                                       // 7907
CopyPasteClass.prototype.destroy = function () {                                                                       // 7908
                                                                                                                       // 7909
  if(!this.hasBeenDestroyed() && --this.refCounter == 0){                                                              // 7910
    if (this.elDiv && this.elDiv.parentNode) {                                                                         // 7911
      this.elDiv.parentNode.removeChild(this.elDiv);                                                                   // 7912
      this.elDiv = null;                                                                                               // 7913
      this.elTextarea = null;                                                                                          // 7914
    }                                                                                                                  // 7915
                                                                                                                       // 7916
    this._eventManager.removeEventListener(document.documentElement, 'keydown', this.keydownListener, false);          // 7917
//    this._unbindEvent(this.listenerElement, 'keydown', this.keydownListener);                                        // 7918
                                                                                                                       // 7919
  }                                                                                                                    // 7920
                                                                                                                       // 7921
};                                                                                                                     // 7922
                                                                                                                       // 7923
CopyPasteClass.prototype.hasBeenDestroyed = function () {                                                              // 7924
  return !this.refCounter;                                                                                             // 7925
};                                                                                                                     // 7926
                                                                                                                       // 7927
                                                                                                                       // 7928
                                                                                                                       // 7929
// json-patch-duplex.js 0.3.6                                                                                          // 7930
// (c) 2013 Joachim Wester                                                                                             // 7931
// MIT license                                                                                                         // 7932
var jsonpatch;                                                                                                         // 7933
(function (jsonpatch) {                                                                                                // 7934
    var objOps = {                                                                                                     // 7935
        add: function (obj, key) {                                                                                     // 7936
            obj[key] = this.value;                                                                                     // 7937
            return true;                                                                                               // 7938
        },                                                                                                             // 7939
        remove: function (obj, key) {                                                                                  // 7940
            delete obj[key];                                                                                           // 7941
            return true;                                                                                               // 7942
        },                                                                                                             // 7943
        replace: function (obj, key) {                                                                                 // 7944
            obj[key] = this.value;                                                                                     // 7945
            return true;                                                                                               // 7946
        },                                                                                                             // 7947
        move: function (obj, key, tree) {                                                                              // 7948
            var temp = { op: "_get", path: this.from };                                                                // 7949
            apply(tree, [temp]);                                                                                       // 7950
            apply(tree, [                                                                                              // 7951
                { op: "remove", path: this.from }                                                                      // 7952
            ]);                                                                                                        // 7953
            apply(tree, [                                                                                              // 7954
                { op: "add", path: this.path, value: temp.value }                                                      // 7955
            ]);                                                                                                        // 7956
            return true;                                                                                               // 7957
        },                                                                                                             // 7958
        copy: function (obj, key, tree) {                                                                              // 7959
            var temp = { op: "_get", path: this.from };                                                                // 7960
            apply(tree, [temp]);                                                                                       // 7961
            apply(tree, [                                                                                              // 7962
                { op: "add", path: this.path, value: temp.value }                                                      // 7963
            ]);                                                                                                        // 7964
            return true;                                                                                               // 7965
        },                                                                                                             // 7966
        test: function (obj, key) {                                                                                    // 7967
            return (JSON.stringify(obj[key]) === JSON.stringify(this.value));                                          // 7968
        },                                                                                                             // 7969
        _get: function (obj, key) {                                                                                    // 7970
            this.value = obj[key];                                                                                     // 7971
        }                                                                                                              // 7972
    };                                                                                                                 // 7973
                                                                                                                       // 7974
    var arrOps = {                                                                                                     // 7975
        add: function (arr, i) {                                                                                       // 7976
            arr.splice(i, 0, this.value);                                                                              // 7977
            return true;                                                                                               // 7978
        },                                                                                                             // 7979
        remove: function (arr, i) {                                                                                    // 7980
            arr.splice(i, 1);                                                                                          // 7981
            return true;                                                                                               // 7982
        },                                                                                                             // 7983
        replace: function (arr, i) {                                                                                   // 7984
            arr[i] = this.value;                                                                                       // 7985
            return true;                                                                                               // 7986
        },                                                                                                             // 7987
        move: objOps.move,                                                                                             // 7988
        copy: objOps.copy,                                                                                             // 7989
        test: objOps.test,                                                                                             // 7990
        _get: objOps._get                                                                                              // 7991
    };                                                                                                                 // 7992
                                                                                                                       // 7993
    var observeOps = {                                                                                                 // 7994
        add: function (patches, path) {                                                                                // 7995
            var patch = {                                                                                              // 7996
                op: "add",                                                                                             // 7997
                path: path + escapePathComponent(this.name),                                                           // 7998
                value: this.object[this.name]                                                                          // 7999
            };                                                                                                         // 8000
            patches.push(patch);                                                                                       // 8001
        },                                                                                                             // 8002
        'delete': function (patches, path) {                                                                           // 8003
            var patch = {                                                                                              // 8004
                op: "remove",                                                                                          // 8005
                path: path + escapePathComponent(this.name)                                                            // 8006
            };                                                                                                         // 8007
            patches.push(patch);                                                                                       // 8008
        },                                                                                                             // 8009
        update: function (patches, path) {                                                                             // 8010
            var patch = {                                                                                              // 8011
                op: "replace",                                                                                         // 8012
                path: path + escapePathComponent(this.name),                                                           // 8013
                value: this.object[this.name]                                                                          // 8014
            };                                                                                                         // 8015
            patches.push(patch);                                                                                       // 8016
        }                                                                                                              // 8017
    };                                                                                                                 // 8018
                                                                                                                       // 8019
    function escapePathComponent(str) {                                                                                // 8020
        if (str.indexOf('/') === -1 && str.indexOf('~') === -1)                                                        // 8021
            return str;                                                                                                // 8022
        return str.replace(/~/g, '~0').replace(/\//g, '~1');                                                           // 8023
    }                                                                                                                  // 8024
                                                                                                                       // 8025
    function _getPathRecursive(root, obj) {                                                                            // 8026
        var found;                                                                                                     // 8027
        for (var key in root) {                                                                                        // 8028
            if (root.hasOwnProperty(key)) {                                                                            // 8029
                if (root[key] === obj) {                                                                               // 8030
                    return escapePathComponent(key) + '/';                                                             // 8031
                } else if (typeof root[key] === 'object') {                                                            // 8032
                    found = _getPathRecursive(root[key], obj);                                                         // 8033
                    if (found != '') {                                                                                 // 8034
                        return escapePathComponent(key) + '/' + found;                                                 // 8035
                    }                                                                                                  // 8036
                }                                                                                                      // 8037
            }                                                                                                          // 8038
        }                                                                                                              // 8039
        return '';                                                                                                     // 8040
    }                                                                                                                  // 8041
                                                                                                                       // 8042
    function getPath(root, obj) {                                                                                      // 8043
        if (root === obj) {                                                                                            // 8044
            return '/';                                                                                                // 8045
        }                                                                                                              // 8046
        var path = _getPathRecursive(root, obj);                                                                       // 8047
        if (path === '') {                                                                                             // 8048
            throw new Error("Object not found in root");                                                               // 8049
        }                                                                                                              // 8050
        return '/' + path;                                                                                             // 8051
    }                                                                                                                  // 8052
                                                                                                                       // 8053
    var beforeDict = [];                                                                                               // 8054
                                                                                                                       // 8055
    jsonpatch.intervals;                                                                                               // 8056
                                                                                                                       // 8057
    var Mirror = (function () {                                                                                        // 8058
        function Mirror(obj) {                                                                                         // 8059
            this.observers = [];                                                                                       // 8060
            this.obj = obj;                                                                                            // 8061
        }                                                                                                              // 8062
        return Mirror;                                                                                                 // 8063
    })();                                                                                                              // 8064
                                                                                                                       // 8065
    var ObserverInfo = (function () {                                                                                  // 8066
        function ObserverInfo(callback, observer) {                                                                    // 8067
            this.callback = callback;                                                                                  // 8068
            this.observer = observer;                                                                                  // 8069
        }                                                                                                              // 8070
        return ObserverInfo;                                                                                           // 8071
    })();                                                                                                              // 8072
                                                                                                                       // 8073
    function getMirror(obj) {                                                                                          // 8074
        for (var i = 0, ilen = beforeDict.length; i < ilen; i++) {                                                     // 8075
            if (beforeDict[i].obj === obj) {                                                                           // 8076
                return beforeDict[i];                                                                                  // 8077
            }                                                                                                          // 8078
        }                                                                                                              // 8079
    }                                                                                                                  // 8080
                                                                                                                       // 8081
    function getObserverFromMirror(mirror, callback) {                                                                 // 8082
        for (var j = 0, jlen = mirror.observers.length; j < jlen; j++) {                                               // 8083
            if (mirror.observers[j].callback === callback) {                                                           // 8084
                return mirror.observers[j].observer;                                                                   // 8085
            }                                                                                                          // 8086
        }                                                                                                              // 8087
    }                                                                                                                  // 8088
                                                                                                                       // 8089
    function removeObserverFromMirror(mirror, observer) {                                                              // 8090
        for (var j = 0, jlen = mirror.observers.length; j < jlen; j++) {                                               // 8091
            if (mirror.observers[j].observer === observer) {                                                           // 8092
                mirror.observers.splice(j, 1);                                                                         // 8093
                return;                                                                                                // 8094
            }                                                                                                          // 8095
        }                                                                                                              // 8096
    }                                                                                                                  // 8097
                                                                                                                       // 8098
    function unobserve(root, observer) {                                                                               // 8099
        generate(observer);                                                                                            // 8100
        if (Object.observe) {                                                                                          // 8101
            _unobserve(observer, root);                                                                                // 8102
        } else {                                                                                                       // 8103
            clearTimeout(observer.next);                                                                               // 8104
        }                                                                                                              // 8105
                                                                                                                       // 8106
        var mirror = getMirror(root);                                                                                  // 8107
        removeObserverFromMirror(mirror, observer);                                                                    // 8108
    }                                                                                                                  // 8109
    jsonpatch.unobserve = unobserve;                                                                                   // 8110
                                                                                                                       // 8111
    function observe(obj, callback) {                                                                                  // 8112
        var patches = [];                                                                                              // 8113
        var root = obj;                                                                                                // 8114
        var observer;                                                                                                  // 8115
        var mirror = getMirror(obj);                                                                                   // 8116
                                                                                                                       // 8117
        if (!mirror) {                                                                                                 // 8118
            mirror = new Mirror(obj);                                                                                  // 8119
            beforeDict.push(mirror);                                                                                   // 8120
        } else {                                                                                                       // 8121
            observer = getObserverFromMirror(mirror, callback);                                                        // 8122
        }                                                                                                              // 8123
                                                                                                                       // 8124
        if (observer) {                                                                                                // 8125
            return observer;                                                                                           // 8126
        }                                                                                                              // 8127
                                                                                                                       // 8128
        if (Object.observe) {                                                                                          // 8129
            observer = function (arr) {                                                                                // 8130
                //This "refresh" is needed to begin observing new object properties                                    // 8131
                _unobserve(observer, obj);                                                                             // 8132
                _observe(observer, obj);                                                                               // 8133
                                                                                                                       // 8134
                var a = 0, alen = arr.length;                                                                          // 8135
                while (a < alen) {                                                                                     // 8136
                    if (!(arr[a].name === 'length' && _isArray(arr[a].object)) && !(arr[a].name === '__Jasmine_been_here_before__')) {
                        var type = arr[a].type;                                                                        // 8138
                                                                                                                       // 8139
                        switch (type) {                                                                                // 8140
                            case 'new':                                                                                // 8141
                                type = 'add';                                                                          // 8142
                                break;                                                                                 // 8143
                                                                                                                       // 8144
                            case 'deleted':                                                                            // 8145
                                type = 'delete';                                                                       // 8146
                                break;                                                                                 // 8147
                                                                                                                       // 8148
                            case 'updated':                                                                            // 8149
                                type = 'update';                                                                       // 8150
                                break;                                                                                 // 8151
                        }                                                                                              // 8152
                                                                                                                       // 8153
                        observeOps[type].call(arr[a], patches, getPath(root, arr[a].object));                          // 8154
                    }                                                                                                  // 8155
                    a++;                                                                                               // 8156
                }                                                                                                      // 8157
                                                                                                                       // 8158
                if (patches) {                                                                                         // 8159
                    if (callback) {                                                                                    // 8160
                        callback(patches);                                                                             // 8161
                    }                                                                                                  // 8162
                }                                                                                                      // 8163
                observer.patches = patches;                                                                            // 8164
                patches = [];                                                                                          // 8165
            };                                                                                                         // 8166
        } else {                                                                                                       // 8167
            observer = {};                                                                                             // 8168
                                                                                                                       // 8169
            mirror.value = JSON.parse(JSON.stringify(obj));                                                            // 8170
                                                                                                                       // 8171
            if (callback) {                                                                                            // 8172
                //callbacks.push(callback); this has no purpose                                                        // 8173
                observer.callback = callback;                                                                          // 8174
                observer.next = null;                                                                                  // 8175
                var intervals = this.intervals || [100, 1000, 10000, 60000];                                           // 8176
                var currentInterval = 0;                                                                               // 8177
                                                                                                                       // 8178
                var dirtyCheck = function () {                                                                         // 8179
                    generate(observer);                                                                                // 8180
                };                                                                                                     // 8181
                var fastCheck = function () {                                                                          // 8182
                    clearTimeout(observer.next);                                                                       // 8183
                    observer.next = setTimeout(function () {                                                           // 8184
                        dirtyCheck();                                                                                  // 8185
                        currentInterval = 0;                                                                           // 8186
                        observer.next = setTimeout(slowCheck, intervals[currentInterval++]);                           // 8187
                    }, 0);                                                                                             // 8188
                };                                                                                                     // 8189
                var slowCheck = function () {                                                                          // 8190
                    dirtyCheck();                                                                                      // 8191
                    if (currentInterval == intervals.length)                                                           // 8192
                        currentInterval = intervals.length - 1;                                                        // 8193
                    observer.next = setTimeout(slowCheck, intervals[currentInterval++]);                               // 8194
                };                                                                                                     // 8195
                if (typeof window !== 'undefined') {                                                                   // 8196
                    if (window.addEventListener) {                                                                     // 8197
                        window.addEventListener('mousedown', fastCheck);                                               // 8198
                        window.addEventListener('mouseup', fastCheck);                                                 // 8199
                        window.addEventListener('keydown', fastCheck);                                                 // 8200
                    } else {                                                                                           // 8201
                        window.attachEvent('onmousedown', fastCheck);                                                  // 8202
                        window.attachEvent('onmouseup', fastCheck);                                                    // 8203
                        window.attachEvent('onkeydown', fastCheck);                                                    // 8204
                    }                                                                                                  // 8205
                }                                                                                                      // 8206
                observer.next = setTimeout(slowCheck, intervals[currentInterval++]);                                   // 8207
            }                                                                                                          // 8208
        }                                                                                                              // 8209
        observer.patches = patches;                                                                                    // 8210
        observer.object = obj;                                                                                         // 8211
                                                                                                                       // 8212
        mirror.observers.push(new ObserverInfo(callback, observer));                                                   // 8213
                                                                                                                       // 8214
        return _observe(observer, obj);                                                                                // 8215
    }                                                                                                                  // 8216
    jsonpatch.observe = observe;                                                                                       // 8217
                                                                                                                       // 8218
    /// Listen to changes on an object tree, accumulate patches                                                        // 8219
    function _observe(observer, obj) {                                                                                 // 8220
        if (Object.observe) {                                                                                          // 8221
            Object.observe(obj, observer);                                                                             // 8222
            for (var key in obj) {                                                                                     // 8223
                if (obj.hasOwnProperty(key)) {                                                                         // 8224
                    var v = obj[key];                                                                                  // 8225
                    if (v && typeof (v) === "object") {                                                                // 8226
                        _observe(observer, v);                                                                         // 8227
                    }                                                                                                  // 8228
                }                                                                                                      // 8229
            }                                                                                                          // 8230
        }                                                                                                              // 8231
        return observer;                                                                                               // 8232
    }                                                                                                                  // 8233
                                                                                                                       // 8234
    function _unobserve(observer, obj) {                                                                               // 8235
        if (Object.observe) {                                                                                          // 8236
            Object.unobserve(obj, observer);                                                                           // 8237
            for (var key in obj) {                                                                                     // 8238
                if (obj.hasOwnProperty(key)) {                                                                         // 8239
                    var v = obj[key];                                                                                  // 8240
                    if (v && typeof (v) === "object") {                                                                // 8241
                        _unobserve(observer, v);                                                                       // 8242
                    }                                                                                                  // 8243
                }                                                                                                      // 8244
            }                                                                                                          // 8245
        }                                                                                                              // 8246
        return observer;                                                                                               // 8247
    }                                                                                                                  // 8248
                                                                                                                       // 8249
    function generate(observer) {                                                                                      // 8250
        if (Object.observe) {                                                                                          // 8251
            Object.deliverChangeRecords(observer);                                                                     // 8252
        } else {                                                                                                       // 8253
            var mirror;                                                                                                // 8254
            for (var i = 0, ilen = beforeDict.length; i < ilen; i++) {                                                 // 8255
                if (beforeDict[i].obj === observer.object) {                                                           // 8256
                    mirror = beforeDict[i];                                                                            // 8257
                    break;                                                                                             // 8258
                }                                                                                                      // 8259
            }                                                                                                          // 8260
            _generate(mirror.value, observer.object, observer.patches, "");                                            // 8261
        }                                                                                                              // 8262
        var temp = observer.patches;                                                                                   // 8263
        if (temp.length > 0) {                                                                                         // 8264
            observer.patches = [];                                                                                     // 8265
            if (observer.callback) {                                                                                   // 8266
                observer.callback(temp);                                                                               // 8267
            }                                                                                                          // 8268
        }                                                                                                              // 8269
        return temp;                                                                                                   // 8270
    }                                                                                                                  // 8271
    jsonpatch.generate = generate;                                                                                     // 8272
                                                                                                                       // 8273
    var _objectKeys;                                                                                                   // 8274
    if (Object.keys) {                                                                                                 // 8275
        _objectKeys = Object.keys;                                                                                     // 8276
    } else {                                                                                                           // 8277
        _objectKeys = function (obj) {                                                                                 // 8278
            var keys = [];                                                                                             // 8279
            for (var o in obj) {                                                                                       // 8280
                if (obj.hasOwnProperty(o)) {                                                                           // 8281
                    keys.push(o);                                                                                      // 8282
                }                                                                                                      // 8283
            }                                                                                                          // 8284
            return keys;                                                                                               // 8285
        };                                                                                                             // 8286
    }                                                                                                                  // 8287
                                                                                                                       // 8288
    // Dirty check if obj is different from mirror, generate patches and update mirror                                 // 8289
    function _generate(mirror, obj, patches, path) {                                                                   // 8290
        var newKeys = _objectKeys(obj);                                                                                // 8291
        var oldKeys = _objectKeys(mirror);                                                                             // 8292
        var changed = false;                                                                                           // 8293
        var deleted = false;                                                                                           // 8294
                                                                                                                       // 8295
        for (var t = oldKeys.length - 1; t >= 0; t--) {                                                                // 8296
            var key = oldKeys[t];                                                                                      // 8297
            var oldVal = mirror[key];                                                                                  // 8298
            if (obj.hasOwnProperty(key)) {                                                                             // 8299
                var newVal = obj[key];                                                                                 // 8300
                if (oldVal instanceof Object) {                                                                        // 8301
                    _generate(oldVal, newVal, patches, path + "/" + escapePathComponent(key));                         // 8302
                } else {                                                                                               // 8303
                    if (oldVal != newVal) {                                                                            // 8304
                        changed = true;                                                                                // 8305
                        patches.push({ op: "replace", path: path + "/" + escapePathComponent(key), value: newVal });   // 8306
                        mirror[key] = newVal;                                                                          // 8307
                    }                                                                                                  // 8308
                }                                                                                                      // 8309
            } else {                                                                                                   // 8310
                patches.push({ op: "remove", path: path + "/" + escapePathComponent(key) });                           // 8311
                delete mirror[key];                                                                                    // 8312
                deleted = true;                                                                                        // 8313
            }                                                                                                          // 8314
        }                                                                                                              // 8315
                                                                                                                       // 8316
        if (!deleted && newKeys.length == oldKeys.length) {                                                            // 8317
            return;                                                                                                    // 8318
        }                                                                                                              // 8319
                                                                                                                       // 8320
        for (var t = 0; t < newKeys.length; t++) {                                                                     // 8321
            var key = newKeys[t];                                                                                      // 8322
            if (!mirror.hasOwnProperty(key)) {                                                                         // 8323
                patches.push({ op: "add", path: path + "/" + escapePathComponent(key), value: obj[key] });             // 8324
                mirror[key] = JSON.parse(JSON.stringify(obj[key]));                                                    // 8325
            }                                                                                                          // 8326
        }                                                                                                              // 8327
    }                                                                                                                  // 8328
                                                                                                                       // 8329
    var _isArray;                                                                                                      // 8330
    if (Array.isArray) {                                                                                               // 8331
        _isArray = Array.isArray;                                                                                      // 8332
    } else {                                                                                                           // 8333
        _isArray = function (obj) {                                                                                    // 8334
            return obj.push && typeof obj.length === 'number';                                                         // 8335
        };                                                                                                             // 8336
    }                                                                                                                  // 8337
                                                                                                                       // 8338
    /// Apply a json-patch operation on an object tree                                                                 // 8339
    function apply(tree, patches) {                                                                                    // 8340
        var result = false, p = 0, plen = patches.length, patch;                                                       // 8341
        while (p < plen) {                                                                                             // 8342
            patch = patches[p];                                                                                        // 8343
                                                                                                                       // 8344
            // Find the object                                                                                         // 8345
            var keys = patch.path.split('/');                                                                          // 8346
            var obj = tree;                                                                                            // 8347
            var t = 1;                                                                                                 // 8348
            var len = keys.length;                                                                                     // 8349
            while (true) {                                                                                             // 8350
                if (_isArray(obj)) {                                                                                   // 8351
                    var index = parseInt(keys[t], 10);                                                                 // 8352
                    t++;                                                                                               // 8353
                    if (t >= len) {                                                                                    // 8354
                        result = arrOps[patch.op].call(patch, obj, index, tree);                                       // 8355
                        break;                                                                                         // 8356
                    }                                                                                                  // 8357
                    obj = obj[index];                                                                                  // 8358
                } else {                                                                                               // 8359
                    var key = keys[t];                                                                                 // 8360
                    if (key.indexOf('~') != -1)                                                                        // 8361
                        key = key.replace(/~1/g, '/').replace(/~0/g, '~');                                             // 8362
                    t++;                                                                                               // 8363
                    if (t >= len) {                                                                                    // 8364
                        result = objOps[patch.op].call(patch, obj, key, tree);                                         // 8365
                        break;                                                                                         // 8366
                    }                                                                                                  // 8367
                    obj = obj[key];                                                                                    // 8368
                }                                                                                                      // 8369
            }                                                                                                          // 8370
            p++;                                                                                                       // 8371
        }                                                                                                              // 8372
        return result;                                                                                                 // 8373
    }                                                                                                                  // 8374
    jsonpatch.apply = apply;                                                                                           // 8375
})(jsonpatch || (jsonpatch = {}));                                                                                     // 8376
                                                                                                                       // 8377
if (typeof exports !== "undefined") {                                                                                  // 8378
    exports.apply = jsonpatch.apply;                                                                                   // 8379
    exports.observe = jsonpatch.observe;                                                                               // 8380
    exports.unobserve = jsonpatch.unobserve;                                                                           // 8381
    exports.generate = jsonpatch.generate;                                                                             // 8382
}                                                                                                                      // 8383
                                                                                                                       // 8384
Handsontable.PluginHookClass = (function () {                                                                          // 8385
                                                                                                                       // 8386
  var Hooks = function () {                                                                                            // 8387
    return {                                                                                                           // 8388
      // Hooks                                                                                                         // 8389
      beforeInitWalkontable: [],                                                                                       // 8390
      beforeInit: [],                                                                                                  // 8391
      beforeRender: [],                                                                                                // 8392
      beforeSetRangeEnd: [],                                                                                           // 8393
      beforeDrawBorders: [],                                                                                           // 8394
      beforeChange: [],                                                                                                // 8395
      beforeChangeRender: [],                                                                                          // 8396
      beforeRemoveCol: [],                                                                                             // 8397
      beforeRemoveRow: [],                                                                                             // 8398
      beforeValidate: [],                                                                                              // 8399
      beforeGetCellMeta: [],                                                                                           // 8400
      beforeAutofill: [],                                                                                              // 8401
      beforeKeyDown: [],                                                                                               // 8402
      beforeOnCellMouseDown: [],                                                                                       // 8403
      beforeTouchScroll: [],                                                                                           // 8404
      afterInit : [],                                                                                                  // 8405
      afterLoadData : [],                                                                                              // 8406
      afterUpdateSettings: [],                                                                                         // 8407
      afterRender : [],                                                                                                // 8408
      afterRenderer : [],                                                                                              // 8409
      afterChange : [],                                                                                                // 8410
      afterValidate: [],                                                                                               // 8411
      afterGetCellMeta: [],                                                                                            // 8412
      afterSetCellMeta: [],                                                                                            // 8413
      afterGetColHeader: [],                                                                                           // 8414
      afterGetRowHeader: [],                                                                                           // 8415
      afterDestroy: [],                                                                                                // 8416
      afterRemoveRow: [],                                                                                              // 8417
      afterCreateRow: [],                                                                                              // 8418
      afterRemoveCol: [],                                                                                              // 8419
      afterCreateCol: [],                                                                                              // 8420
      afterDeselect: [],                                                                                               // 8421
      afterSelection: [],                                                                                              // 8422
      afterSelectionByProp: [],                                                                                        // 8423
      afterSelectionEnd: [],                                                                                           // 8424
      afterSelectionEndByProp: [],                                                                                     // 8425
      afterOnCellMouseDown: [],                                                                                        // 8426
      afterOnCellMouseOver: [],                                                                                        // 8427
      afterOnCellCornerMouseDown: [],                                                                                  // 8428
      afterScrollVertically: [],                                                                                       // 8429
      afterScrollHorizontally: [],                                                                                     // 8430
      afterCellMetaReset: [],                                                                                          // 8431
      afterIsMultipleSelectionCheck: [],                                                                               // 8432
      afterDocumentKeyDown: [],                                                                                        // 8433
      afterMomentumScroll: [],                                                                                         // 8434
                                                                                                                       // 8435
      // Modifiers                                                                                                     // 8436
      modifyColWidth: [],                                                                                              // 8437
      modifyRowHeight: [],                                                                                             // 8438
      modifyRow: [],                                                                                                   // 8439
      modifyCol: []                                                                                                    // 8440
    }                                                                                                                  // 8441
  };                                                                                                                   // 8442
                                                                                                                       // 8443
  var legacy = {                                                                                                       // 8444
    onBeforeChange: "beforeChange",                                                                                    // 8445
    onChange: "afterChange",                                                                                           // 8446
    onCreateRow: "afterCreateRow",                                                                                     // 8447
    onCreateCol: "afterCreateCol",                                                                                     // 8448
    onSelection: "afterSelection",                                                                                     // 8449
    onCopyLimit: "afterCopyLimit",                                                                                     // 8450
    onSelectionEnd: "afterSelectionEnd",                                                                               // 8451
    onSelectionByProp: "afterSelectionByProp",                                                                         // 8452
    onSelectionEndByProp: "afterSelectionEndByProp"                                                                    // 8453
  };                                                                                                                   // 8454
                                                                                                                       // 8455
  function PluginHookClass() {                                                                                         // 8456
                                                                                                                       // 8457
    this.hooks = Hooks();                                                                                              // 8458
    this.globalBucket = {};                                                                                            // 8459
    this.legacy = legacy;                                                                                              // 8460
                                                                                                                       // 8461
  }                                                                                                                    // 8462
                                                                                                                       // 8463
  PluginHookClass.prototype.getBucket = function (instance) {                                                          // 8464
    if(instance) {                                                                                                     // 8465
      if(!instance.pluginHookBucket) {                                                                                 // 8466
        instance.pluginHookBucket = {};                                                                                // 8467
      }                                                                                                                // 8468
      return instance.pluginHookBucket;                                                                                // 8469
    }                                                                                                                  // 8470
    return this.globalBucket;                                                                                          // 8471
  };                                                                                                                   // 8472
                                                                                                                       // 8473
  PluginHookClass.prototype.add = function (key, fn, instance) {                                                       // 8474
    //if fn is array, run this for all the array items                                                                 // 8475
    if (Array.isArray(fn)) {                                                                                           // 8476
      for (var i = 0, len = fn.length; i < len; i++) {                                                                 // 8477
        this.add(key, fn[i]);                                                                                          // 8478
      }                                                                                                                // 8479
    }                                                                                                                  // 8480
    else {                                                                                                             // 8481
      // provide support for old versions of HOT                                                                       // 8482
      if (key in legacy) {                                                                                             // 8483
        key = legacy[key];                                                                                             // 8484
      }                                                                                                                // 8485
                                                                                                                       // 8486
      var bucket = this.getBucket(instance);                                                                           // 8487
                                                                                                                       // 8488
      if (typeof bucket[key] === "undefined") {                                                                        // 8489
        bucket[key] = [];                                                                                              // 8490
      }                                                                                                                // 8491
                                                                                                                       // 8492
      fn.skip = false;                                                                                                 // 8493
                                                                                                                       // 8494
      if (bucket[key].indexOf(fn) == -1) {                                                                             // 8495
        bucket[key].push(fn); //only add a hook if it has not already been added (adding the same hook twice is now silently ignored)
      }                                                                                                                // 8497
    }                                                                                                                  // 8498
    return this;                                                                                                       // 8499
  };                                                                                                                   // 8500
                                                                                                                       // 8501
  PluginHookClass.prototype.once = function(key, fn, instance){                                                        // 8502
                                                                                                                       // 8503
    if(Array.isArray(fn)){                                                                                             // 8504
                                                                                                                       // 8505
      for(var i = 0, len = fn.length; i < len; i++){                                                                   // 8506
        fn[i].runOnce = true;                                                                                          // 8507
        this.add(key, fn[i], instance);                                                                                // 8508
      }                                                                                                                // 8509
                                                                                                                       // 8510
    } else {                                                                                                           // 8511
      fn.runOnce = true;                                                                                               // 8512
      this.add(key, fn, instance);                                                                                     // 8513
                                                                                                                       // 8514
    }                                                                                                                  // 8515
                                                                                                                       // 8516
  };                                                                                                                   // 8517
                                                                                                                       // 8518
  PluginHookClass.prototype.remove = function (key, fn, instance) {                                                    // 8519
    var status = false;                                                                                                // 8520
                                                                                                                       // 8521
    // provide support for old versions of HOT                                                                         // 8522
    if (key in legacy) {                                                                                               // 8523
      key = legacy[key];                                                                                               // 8524
    }                                                                                                                  // 8525
                                                                                                                       // 8526
    var bucket = this.getBucket(instance);                                                                             // 8527
                                                                                                                       // 8528
    if (typeof bucket[key] !== 'undefined') {                                                                          // 8529
                                                                                                                       // 8530
      for (var i = 0, leni = bucket[key].length; i < leni; i++) {                                                      // 8531
                                                                                                                       // 8532
        if (bucket[key][i] == fn) {                                                                                    // 8533
          bucket[key][i].skip = true;                                                                                  // 8534
          status = true;                                                                                               // 8535
          break;                                                                                                       // 8536
        }                                                                                                              // 8537
                                                                                                                       // 8538
      }                                                                                                                // 8539
                                                                                                                       // 8540
    }                                                                                                                  // 8541
                                                                                                                       // 8542
    return status;                                                                                                     // 8543
  };                                                                                                                   // 8544
                                                                                                                       // 8545
  PluginHookClass.prototype.run = function (instance, key, p1, p2, p3, p4, p5, p6) {                                   // 8546
    // provide support for old versions of HOT                                                                         // 8547
    if (key in legacy) {                                                                                               // 8548
      key = legacy[key];                                                                                               // 8549
    }                                                                                                                  // 8550
                                                                                                                       // 8551
    this._runBucket(this.globalBucket, instance, key, p1, p2, p3, p4, p5, p6);                                         // 8552
    this._runBucket(this.getBucket(instance), instance, key, p1, p2, p3, p4, p5, p6);                                  // 8553
  };                                                                                                                   // 8554
                                                                                                                       // 8555
  PluginHookClass.prototype._runBucket = function (bucket, instance, key, p1, p2, p3, p4, p5, p6) {                    // 8556
    var handlers = bucket[key];                                                                                        // 8557
    if (handlers) {                                                                                                    // 8558
      for (var i = 0, leni = handlers.length; i < leni; i++) {                                                         // 8559
        if (!handlers[i].skip) {                                                                                       // 8560
          handlers[i].call(instance, p1, p2, p3, p4, p5, p6);                                                          // 8561
                                                                                                                       // 8562
          if (handlers[i].runOnce) {                                                                                   // 8563
            this.remove(key, handlers[i], bucket === this.globalBucket ? null : instance);                             // 8564
          }                                                                                                            // 8565
        }                                                                                                              // 8566
      }                                                                                                                // 8567
    }                                                                                                                  // 8568
  };                                                                                                                   // 8569
                                                                                                                       // 8570
  PluginHookClass.prototype.destroy = function (instance) {                                                            // 8571
    var bucket = this.getBucket(instance);                                                                             // 8572
    for (var key in bucket) {                                                                                          // 8573
      if (bucket.hasOwnProperty(key)) {                                                                                // 8574
        for (var i = 0, leni = bucket[key].length; i < leni; i++) {                                                    // 8575
          this.remove(key, bucket[key], instance);                                                                     // 8576
        }                                                                                                              // 8577
      }                                                                                                                // 8578
    }                                                                                                                  // 8579
  };                                                                                                                   // 8580
                                                                                                                       // 8581
  PluginHookClass.prototype.execute = function (instance, key, p1, p2, p3, p4, p5, p6) {                               // 8582
    // provide support for old versions of HOT                                                                         // 8583
    if (key in legacy) {                                                                                               // 8584
      key = legacy[key];                                                                                               // 8585
    }                                                                                                                  // 8586
                                                                                                                       // 8587
    p1 = this._executeBucket(this.globalBucket, instance, key, p1, p2, p3, p4, p5, p6);                                // 8588
    p1 = this._executeBucket(this.getBucket(instance), instance, key, p1, p2, p3, p4, p5, p6);                         // 8589
    return p1;                                                                                                         // 8590
  };                                                                                                                   // 8591
                                                                                                                       // 8592
  PluginHookClass.prototype._executeBucket = function (bucket, instance, key, p1, p2, p3, p4, p5, p6) {                // 8593
    var res,                                                                                                           // 8594
      handlers = bucket[key];                                                                                          // 8595
                                                                                                                       // 8596
    //performance considerations - http://jsperf.com/call-vs-apply-for-a-plugin-architecture                           // 8597
    if (handlers) {                                                                                                    // 8598
      for (var i = 0, leni = handlers.length; i < leni; i++) {                                                         // 8599
        if (!handlers[i].skip) {                                                                                       // 8600
          res = handlers[i].call(instance, p1, p2, p3, p4, p5, p6);                                                    // 8601
          if (res !== void 0) {                                                                                        // 8602
            p1 = res;                                                                                                  // 8603
          }                                                                                                            // 8604
                                                                                                                       // 8605
          if (handlers[i].runOnce) {                                                                                   // 8606
            this.remove(key, handlers[i], bucket === this.globalBucket ? null : instance);                             // 8607
          }                                                                                                            // 8608
                                                                                                                       // 8609
          if (res === false) { //if any handler returned false                                                         // 8610
            return false; //event has been cancelled and further execution of handler queue is being aborted           // 8611
          }                                                                                                            // 8612
        }                                                                                                              // 8613
      }                                                                                                                // 8614
    }                                                                                                                  // 8615
                                                                                                                       // 8616
    return p1;                                                                                                         // 8617
  };                                                                                                                   // 8618
                                                                                                                       // 8619
  /**                                                                                                                  // 8620
   * Registers a hook name (adds it to the list of the known hook names). Used by plugins. It is not neccessary to call,
   * register, but if you use it, your plugin hook will be used returned by getRegistered                              // 8622
   * (which itself is used in the demo http://handsontable.com/demo/callbacks.html)                                    // 8623
   * @param key {String}                                                                                               // 8624
   */                                                                                                                  // 8625
  PluginHookClass.prototype.register = function (key) {                                                                // 8626
    if (!this.isRegistered(key)) {                                                                                     // 8627
      this.hooks[key] = [];                                                                                            // 8628
    }                                                                                                                  // 8629
  };                                                                                                                   // 8630
                                                                                                                       // 8631
  /**                                                                                                                  // 8632
   * Deregisters a hook name (removes it from the list of known hook names)                                            // 8633
   * @param key {String}                                                                                               // 8634
   */                                                                                                                  // 8635
  PluginHookClass.prototype.deregister = function (key) {                                                              // 8636
    delete this.hooks[key];                                                                                            // 8637
  };                                                                                                                   // 8638
                                                                                                                       // 8639
  /**                                                                                                                  // 8640
   * Returns boolean information if a hook by such name has been registered                                            // 8641
   * @param key {String}                                                                                               // 8642
   */                                                                                                                  // 8643
  PluginHookClass.prototype.isRegistered = function (key) {                                                            // 8644
    return (typeof this.hooks[key] !== "undefined");                                                                   // 8645
  };                                                                                                                   // 8646
                                                                                                                       // 8647
  /**                                                                                                                  // 8648
   * Returns an array of registered hooks                                                                              // 8649
   * @returns {Array}                                                                                                  // 8650
   */                                                                                                                  // 8651
  PluginHookClass.prototype.getRegistered = function () {                                                              // 8652
    return Object.keys(this.hooks);                                                                                    // 8653
  };                                                                                                                   // 8654
                                                                                                                       // 8655
  return PluginHookClass;                                                                                              // 8656
                                                                                                                       // 8657
})();                                                                                                                  // 8658
                                                                                                                       // 8659
Handsontable.hooks = new Handsontable.PluginHookClass();                                                               // 8660
Handsontable.PluginHooks = Handsontable.hooks; //in future move this line to legacy.js                                 // 8661
                                                                                                                       // 8662
(function (Handsontable) {                                                                                             // 8663
                                                                                                                       // 8664
  function HandsontableAutoColumnSize() {                                                                              // 8665
    var plugin = this                                                                                                  // 8666
      , sampleCount = 5; //number of samples to take of each value length                                              // 8667
                                                                                                                       // 8668
    this.beforeInit = function () {                                                                                    // 8669
      var instance = this;                                                                                             // 8670
      instance.autoColumnWidths = [];                                                                                  // 8671
                                                                                                                       // 8672
      if (instance.getSettings().autoColumnSize !== false) {                                                           // 8673
        if (!instance.autoColumnSizeTmp) {                                                                             // 8674
          instance.autoColumnSizeTmp = {                                                                               // 8675
            table: null,                                                                                               // 8676
            tableStyle: null,                                                                                          // 8677
            theadTh: null,                                                                                             // 8678
            tbody: null,                                                                                               // 8679
            container: null,                                                                                           // 8680
            containerStyle: null,                                                                                      // 8681
            determineBeforeNextRender: true                                                                            // 8682
          };                                                                                                           // 8683
                                                                                                                       // 8684
          instance.addHook('beforeRender', htAutoColumnSize.determineIfChanged);                                       // 8685
          instance.addHook('modifyColWidth', htAutoColumnSize.modifyColWidth);                                         // 8686
          instance.addHook('afterDestroy', htAutoColumnSize.afterDestroy);                                             // 8687
                                                                                                                       // 8688
          instance.determineColumnWidth = plugin.determineColumnWidth;                                                 // 8689
        }                                                                                                              // 8690
      } else {                                                                                                         // 8691
        if (instance.autoColumnSizeTmp) {                                                                              // 8692
          instance.removeHook('beforeRender', htAutoColumnSize.determineIfChanged);                                    // 8693
          instance.removeHook('modifyColWidth', htAutoColumnSize.modifyColWidth);                                      // 8694
          instance.removeHook('afterDestroy', htAutoColumnSize.afterDestroy);                                          // 8695
                                                                                                                       // 8696
          delete instance.determineColumnWidth;                                                                        // 8697
                                                                                                                       // 8698
          plugin.afterDestroy.call(instance);                                                                          // 8699
        }                                                                                                              // 8700
      }                                                                                                                // 8701
    };                                                                                                                 // 8702
                                                                                                                       // 8703
    this.determineIfChanged = function (force) {                                                                       // 8704
      if (force) {                                                                                                     // 8705
        htAutoColumnSize.determineColumnsWidth.apply(this, arguments);                                                 // 8706
      }                                                                                                                // 8707
    };                                                                                                                 // 8708
                                                                                                                       // 8709
    this.determineColumnWidth = function (col) {                                                                       // 8710
      var instance = this                                                                                              // 8711
        , tmp = instance.autoColumnSizeTmp;                                                                            // 8712
                                                                                                                       // 8713
      if (!tmp.container) {                                                                                            // 8714
        createTmpContainer.call(tmp, instance);                                                                        // 8715
      }                                                                                                                // 8716
                                                                                                                       // 8717
      tmp.container.className = instance.rootElement.className + ' htAutoColumnSize';                                  // 8718
      tmp.table.className = instance.table.className;                                                                  // 8719
                                                                                                                       // 8720
      var rows = instance.countRows();                                                                                 // 8721
      var samples = {};                                                                                                // 8722
      var maxLen = 0;                                                                                                  // 8723
      for (var r = 0; r < rows; r++) {                                                                                 // 8724
        var value = Handsontable.helper.stringify(instance.getDataAtCell(r, col));                                     // 8725
        var len = value.length;                                                                                        // 8726
        if (len > maxLen) {                                                                                            // 8727
          maxLen = len;                                                                                                // 8728
        }                                                                                                              // 8729
        if (!samples[len]) {                                                                                           // 8730
          samples[len] = {                                                                                             // 8731
            needed: sampleCount,                                                                                       // 8732
            strings: []                                                                                                // 8733
          };                                                                                                           // 8734
        }                                                                                                              // 8735
        if (samples[len].needed) {                                                                                     // 8736
          samples[len].strings.push({value: value, row: r});                                                           // 8737
          samples[len].needed--;                                                                                       // 8738
        }                                                                                                              // 8739
      }                                                                                                                // 8740
                                                                                                                       // 8741
      var settings = instance.getSettings();                                                                           // 8742
      if (settings.colHeaders) {                                                                                       // 8743
        instance.view.appendColHeader(col, tmp.theadTh); //TH innerHTML                                                // 8744
      }                                                                                                                // 8745
                                                                                                                       // 8746
      Handsontable.Dom.empty(tmp.tbody);                                                                               // 8747
                                                                                                                       // 8748
      for (var i in samples) {                                                                                         // 8749
        if (samples.hasOwnProperty(i)) {                                                                               // 8750
          for (var j = 0, jlen = samples[i].strings.length; j < jlen; j++) {                                           // 8751
            var row = samples[i].strings[j].row;                                                                       // 8752
                                                                                                                       // 8753
            var cellProperties = instance.getCellMeta(row, col);                                                       // 8754
            cellProperties.col = col;                                                                                  // 8755
            cellProperties.row = row;                                                                                  // 8756
                                                                                                                       // 8757
            var renderer = instance.getCellRenderer(cellProperties);                                                   // 8758
                                                                                                                       // 8759
            var tr = document.createElement('tr');                                                                     // 8760
            var td = document.createElement('td');                                                                     // 8761
                                                                                                                       // 8762
            renderer(instance, td, row, col, instance.colToProp(col), samples[i].strings[j].value, cellProperties);    // 8763
            r++;                                                                                                       // 8764
            tr.appendChild(td);                                                                                        // 8765
            tmp.tbody.appendChild(tr);                                                                                 // 8766
          }                                                                                                            // 8767
        }                                                                                                              // 8768
      }                                                                                                                // 8769
                                                                                                                       // 8770
      var parent = instance.rootElement.parentNode;                                                                    // 8771
      parent.appendChild(tmp.container);                                                                               // 8772
      var width = Handsontable.Dom.outerWidth(tmp.table);                                                              // 8773
      parent.removeChild(tmp.container);                                                                               // 8774
                                                                                                                       // 8775
      return width;                                                                                                    // 8776
    };                                                                                                                 // 8777
                                                                                                                       // 8778
    this.determineColumnsWidth = function () {                                                                         // 8779
      var instance = this;                                                                                             // 8780
      var settings = this.getSettings();                                                                               // 8781
      if (settings.autoColumnSize || !settings.colWidths) {                                                            // 8782
        var cols = this.countCols();                                                                                   // 8783
        for (var c = 0; c < cols; c++) {                                                                               // 8784
          if (!instance._getColWidthFromSettings(c)) {                                                                 // 8785
            this.autoColumnWidths[c] = plugin.determineColumnWidth.call(instance, c);                                  // 8786
          }                                                                                                            // 8787
        }                                                                                                              // 8788
      }                                                                                                                // 8789
    };                                                                                                                 // 8790
                                                                                                                       // 8791
    this.modifyColWidth = function (width, col) {                                                                      // 8792
      if (this.autoColumnWidths[col] && this.autoColumnWidths[col] > width) {                                          // 8793
        return this.autoColumnWidths[col];                                                                             // 8794
      }                                                                                                                // 8795
      return width;                                                                                                    // 8796
    };                                                                                                                 // 8797
                                                                                                                       // 8798
    this.afterDestroy = function () {                                                                                  // 8799
      var instance = this;                                                                                             // 8800
      if (instance.autoColumnSizeTmp && instance.autoColumnSizeTmp.container && instance.autoColumnSizeTmp.container.parentNode) {
        instance.autoColumnSizeTmp.container.parentNode.removeChild(instance.autoColumnSizeTmp.container);             // 8802
      }                                                                                                                // 8803
      instance.autoColumnSizeTmp = null;                                                                               // 8804
    };                                                                                                                 // 8805
                                                                                                                       // 8806
    function createTmpContainer(instance) {                                                                            // 8807
      var d = document                                                                                                 // 8808
        , tmp = this;                                                                                                  // 8809
                                                                                                                       // 8810
      tmp.table = d.createElement('table');                                                                            // 8811
      tmp.theadTh = d.createElement('th');                                                                             // 8812
      tmp.table.appendChild(d.createElement('thead')).appendChild(d.createElement('tr')).appendChild(tmp.theadTh);     // 8813
                                                                                                                       // 8814
      tmp.tableStyle = tmp.table.style;                                                                                // 8815
      tmp.tableStyle.tableLayout = 'auto';                                                                             // 8816
      tmp.tableStyle.width = 'auto';                                                                                   // 8817
                                                                                                                       // 8818
      tmp.tbody = d.createElement('tbody');                                                                            // 8819
      tmp.table.appendChild(tmp.tbody);                                                                                // 8820
                                                                                                                       // 8821
      tmp.container = d.createElement('div');                                                                          // 8822
      tmp.container.className = instance.rootElement.className + ' hidden';                                            // 8823
//      tmp.container.className = instance.rootElement[0].className + ' hidden';                                       // 8824
      tmp.containerStyle = tmp.container.style;                                                                        // 8825
                                                                                                                       // 8826
      tmp.container.appendChild(tmp.table);                                                                            // 8827
    }                                                                                                                  // 8828
  }                                                                                                                    // 8829
                                                                                                                       // 8830
  var htAutoColumnSize = new HandsontableAutoColumnSize();                                                             // 8831
                                                                                                                       // 8832
  Handsontable.hooks.add('beforeInit', htAutoColumnSize.beforeInit);                                                   // 8833
  Handsontable.hooks.add('afterUpdateSettings', htAutoColumnSize.beforeInit);                                          // 8834
                                                                                                                       // 8835
})(Handsontable);                                                                                                      // 8836
                                                                                                                       // 8837
/**                                                                                                                    // 8838
 * This plugin sorts the view by a column (but does not sort the data source!)                                         // 8839
 * @constructor                                                                                                        // 8840
 */                                                                                                                    // 8841
function HandsontableColumnSorting() {                                                                                 // 8842
  var plugin = this;                                                                                                   // 8843
                                                                                                                       // 8844
  this.init = function (source) {                                                                                      // 8845
    var instance = this;                                                                                               // 8846
    var sortingSettings = instance.getSettings().columnSorting;                                                        // 8847
    var sortingColumn, sortingOrder;                                                                                   // 8848
                                                                                                                       // 8849
    instance.sortingEnabled = !!(sortingSettings);                                                                     // 8850
                                                                                                                       // 8851
    if (instance.sortingEnabled) {                                                                                     // 8852
      instance.sortIndex = [];                                                                                         // 8853
                                                                                                                       // 8854
      var loadedSortingState = loadSortingState.call(instance);                                                        // 8855
                                                                                                                       // 8856
      if (typeof loadedSortingState != 'undefined') {                                                                  // 8857
        sortingColumn = loadedSortingState.sortColumn;                                                                 // 8858
        sortingOrder = loadedSortingState.sortOrder;                                                                   // 8859
      } else {                                                                                                         // 8860
        sortingColumn = sortingSettings.column;                                                                        // 8861
        sortingOrder = sortingSettings.sortOrder;                                                                      // 8862
      }                                                                                                                // 8863
      plugin.sortByColumn.call(instance, sortingColumn, sortingOrder);                                                 // 8864
                                                                                                                       // 8865
      instance.sort = function(){                                                                                      // 8866
        var args = Array.prototype.slice.call(arguments);                                                              // 8867
                                                                                                                       // 8868
        return plugin.sortByColumn.apply(instance, args)                                                               // 8869
      };                                                                                                               // 8870
                                                                                                                       // 8871
      if (typeof instance.getSettings().observeChanges == 'undefined'){                                                // 8872
        enableObserveChangesPlugin.call(instance);                                                                     // 8873
      }                                                                                                                // 8874
                                                                                                                       // 8875
      if (source == 'afterInit') {                                                                                     // 8876
        bindColumnSortingAfterClick.call(instance);                                                                    // 8877
                                                                                                                       // 8878
        instance.addHook('afterCreateRow', plugin.afterCreateRow);                                                     // 8879
        instance.addHook('afterRemoveRow', plugin.afterRemoveRow);                                                     // 8880
        instance.addHook('afterLoadData', plugin.init);                                                                // 8881
      }                                                                                                                // 8882
    } else {                                                                                                           // 8883
      delete instance.sort;                                                                                            // 8884
                                                                                                                       // 8885
      instance.removeHook('afterCreateRow', plugin.afterCreateRow);                                                    // 8886
      instance.removeHook('afterRemoveRow', plugin.afterRemoveRow);                                                    // 8887
      instance.removeHook('afterLoadData', plugin.init);                                                               // 8888
    }                                                                                                                  // 8889
  };                                                                                                                   // 8890
                                                                                                                       // 8891
  this.setSortingColumn = function (col, order) {                                                                      // 8892
    var instance = this;                                                                                               // 8893
                                                                                                                       // 8894
    if (typeof col == 'undefined') {                                                                                   // 8895
      delete instance.sortColumn;                                                                                      // 8896
      delete instance.sortOrder;                                                                                       // 8897
                                                                                                                       // 8898
      return;                                                                                                          // 8899
    } else if (instance.sortColumn === col && typeof order == 'undefined') {                                           // 8900
      instance.sortOrder = !instance.sortOrder;                                                                        // 8901
    } else {                                                                                                           // 8902
      instance.sortOrder = typeof order != 'undefined' ? order : true;                                                 // 8903
    }                                                                                                                  // 8904
                                                                                                                       // 8905
    instance.sortColumn = col;                                                                                         // 8906
                                                                                                                       // 8907
  };                                                                                                                   // 8908
                                                                                                                       // 8909
  this.sortByColumn = function (col, order) {                                                                          // 8910
    var instance = this;                                                                                               // 8911
                                                                                                                       // 8912
    plugin.setSortingColumn.call(instance, col, order);                                                                // 8913
                                                                                                                       // 8914
    if(typeof instance.sortColumn == 'undefined'){                                                                     // 8915
      return;                                                                                                          // 8916
    }                                                                                                                  // 8917
                                                                                                                       // 8918
    Handsontable.hooks.run(instance, 'beforeColumnSort', instance.sortColumn, instance.sortOrder);                     // 8919
                                                                                                                       // 8920
    plugin.sort.call(instance);                                                                                        // 8921
    instance.render();                                                                                                 // 8922
                                                                                                                       // 8923
    saveSortingState.call(instance);                                                                                   // 8924
                                                                                                                       // 8925
    Handsontable.hooks.run(instance, 'afterColumnSort', instance.sortColumn, instance.sortOrder);                      // 8926
  };                                                                                                                   // 8927
                                                                                                                       // 8928
  var saveSortingState = function () {                                                                                 // 8929
    var instance = this;                                                                                               // 8930
                                                                                                                       // 8931
    var sortingState = {};                                                                                             // 8932
                                                                                                                       // 8933
    if (typeof instance.sortColumn != 'undefined') {                                                                   // 8934
      sortingState.sortColumn = instance.sortColumn;                                                                   // 8935
    }                                                                                                                  // 8936
                                                                                                                       // 8937
    if (typeof instance.sortOrder != 'undefined') {                                                                    // 8938
      sortingState.sortOrder = instance.sortOrder;                                                                     // 8939
    }                                                                                                                  // 8940
                                                                                                                       // 8941
    if (sortingState.hasOwnProperty('sortColumn') || sortingState.hasOwnProperty('sortOrder')) {                       // 8942
      Handsontable.hooks.run(instance, 'persistentStateSave', 'columnSorting', sortingState);                          // 8943
    }                                                                                                                  // 8944
                                                                                                                       // 8945
  };                                                                                                                   // 8946
                                                                                                                       // 8947
  var loadSortingState = function () {                                                                                 // 8948
    var instance = this;                                                                                               // 8949
    var storedState = {};                                                                                              // 8950
    Handsontable.hooks.run(instance, 'persistentStateLoad', 'columnSorting', storedState);                             // 8951
                                                                                                                       // 8952
    return storedState.value;                                                                                          // 8953
  };                                                                                                                   // 8954
                                                                                                                       // 8955
  var bindColumnSortingAfterClick = function () {                                                                      // 8956
    var instance = this;                                                                                               // 8957
                                                                                                                       // 8958
    var eventManager = Handsontable.eventManager(instance);                                                            // 8959
    eventManager.addEventListener(instance.rootElement, 'click', function (e){                                         // 8960
      if(Handsontable.Dom.hasClass(e.target, 'columnSorting')) {                                                       // 8961
        var col = getColumn(e.target);                                                                                 // 8962
        plugin.sortByColumn.call(instance, col);                                                                       // 8963
      }                                                                                                                // 8964
    });                                                                                                                // 8965
                                                                                                                       // 8966
    function countRowHeaders() {                                                                                       // 8967
      var THs = instance.view.TBODY.querySelector('tr').querySelectorAll('th');                                        // 8968
      return THs.length;                                                                                               // 8969
    }                                                                                                                  // 8970
                                                                                                                       // 8971
    function getColumn(target) {                                                                                       // 8972
      var TH = Handsontable.Dom.closest(target, 'TH');                                                                 // 8973
      return Handsontable.Dom.index(TH) - countRowHeaders();                                                           // 8974
    }                                                                                                                  // 8975
  };                                                                                                                   // 8976
                                                                                                                       // 8977
  function enableObserveChangesPlugin () {                                                                             // 8978
    var instance = this;                                                                                               // 8979
    instance._registerTimeout(setTimeout(function(){                                                                   // 8980
      instance.updateSettings({                                                                                        // 8981
        observeChanges: true                                                                                           // 8982
      });                                                                                                              // 8983
    }, 0));                                                                                                            // 8984
  }                                                                                                                    // 8985
                                                                                                                       // 8986
  function defaultSort(sortOrder) {                                                                                    // 8987
    return function (a, b) {                                                                                           // 8988
      if(typeof a[1] == "string") a[1] = a[1].toLowerCase();                                                           // 8989
      if(typeof b[1] == "string") b[1] = b[1].toLowerCase();                                                           // 8990
                                                                                                                       // 8991
      if (a[1] === b[1]) {                                                                                             // 8992
        return 0;                                                                                                      // 8993
      }                                                                                                                // 8994
      if (a[1] === null || a[1] === "") {                                                                              // 8995
        return 1;                                                                                                      // 8996
      }                                                                                                                // 8997
      if (b[1] === null || b[1] === "") {                                                                              // 8998
        return -1;                                                                                                     // 8999
      }                                                                                                                // 9000
      if (a[1] < b[1]) return sortOrder ? -1 : 1;                                                                      // 9001
      if (a[1] > b[1]) return sortOrder ? 1 : -1;                                                                      // 9002
      return 0;                                                                                                        // 9003
    }                                                                                                                  // 9004
  }                                                                                                                    // 9005
                                                                                                                       // 9006
  function dateSort(sortOrder) {                                                                                       // 9007
    return function (a, b) {                                                                                           // 9008
      if (a[1] === b[1]) {                                                                                             // 9009
        return 0;                                                                                                      // 9010
      }                                                                                                                // 9011
      if (a[1] === null) {                                                                                             // 9012
        return 1;                                                                                                      // 9013
      }                                                                                                                // 9014
      if (b[1] === null) {                                                                                             // 9015
        return -1;                                                                                                     // 9016
      }                                                                                                                // 9017
                                                                                                                       // 9018
      var aDate = new Date(a[1]);                                                                                      // 9019
      var bDate = new Date(b[1]);                                                                                      // 9020
                                                                                                                       // 9021
      if (aDate < bDate) return sortOrder ? -1 : 1;                                                                    // 9022
      if (aDate > bDate) return sortOrder ? 1 : -1;                                                                    // 9023
                                                                                                                       // 9024
      return 0;                                                                                                        // 9025
    }                                                                                                                  // 9026
  }                                                                                                                    // 9027
                                                                                                                       // 9028
  this.sort = function () {                                                                                            // 9029
    var instance = this;                                                                                               // 9030
                                                                                                                       // 9031
    if (typeof instance.sortOrder == 'undefined') {                                                                    // 9032
      return;                                                                                                          // 9033
    }                                                                                                                  // 9034
                                                                                                                       // 9035
    instance.sortingEnabled = false; //this is required by translateRow plugin hook                                    // 9036
    instance.sortIndex.length = 0;                                                                                     // 9037
                                                                                                                       // 9038
    var colOffset = this.colOffset();                                                                                  // 9039
    for (var i = 0, ilen = this.countRows() - instance.getSettings()['minSpareRows']; i < ilen; i++) {                 // 9040
      this.sortIndex.push([i, instance.getDataAtCell(i, this.sortColumn + colOffset)]);                                // 9041
    }                                                                                                                  // 9042
                                                                                                                       // 9043
    var colMeta = instance.getCellMeta(0, instance.sortColumn);                                                        // 9044
    var sortFunction;                                                                                                  // 9045
    switch (colMeta.type) {                                                                                            // 9046
      case 'date':                                                                                                     // 9047
        sortFunction = dateSort;                                                                                       // 9048
        break;                                                                                                         // 9049
      default:                                                                                                         // 9050
        sortFunction = defaultSort;                                                                                    // 9051
    }                                                                                                                  // 9052
                                                                                                                       // 9053
    this.sortIndex.sort(sortFunction(instance.sortOrder));                                                             // 9054
                                                                                                                       // 9055
    //Append spareRows                                                                                                 // 9056
    for(var i = this.sortIndex.length; i < instance.countRows(); i++){                                                 // 9057
      this.sortIndex.push([i, instance.getDataAtCell(i, this.sortColumn + colOffset)]);                                // 9058
    }                                                                                                                  // 9059
                                                                                                                       // 9060
    instance.sortingEnabled = true; //this is required by translateRow plugin hook                                     // 9061
  };                                                                                                                   // 9062
                                                                                                                       // 9063
  this.translateRow = function (row) {                                                                                 // 9064
    var instance = this;                                                                                               // 9065
                                                                                                                       // 9066
    if (instance.sortingEnabled && instance.sortIndex && instance.sortIndex.length && instance.sortIndex[row]) {       // 9067
      return instance.sortIndex[row][0];                                                                               // 9068
    }                                                                                                                  // 9069
                                                                                                                       // 9070
    return row;                                                                                                        // 9071
  };                                                                                                                   // 9072
                                                                                                                       // 9073
  this.untranslateRow = function (row) {                                                                               // 9074
    var instance = this;                                                                                               // 9075
    if (instance.sortingEnabled && instance.sortIndex && instance.sortIndex.length) {                                  // 9076
      for (var i = 0; i < instance.sortIndex.length; i++) {                                                            // 9077
        if (instance.sortIndex[i][0] == row) {                                                                         // 9078
          return i;                                                                                                    // 9079
        }                                                                                                              // 9080
      }                                                                                                                // 9081
    }                                                                                                                  // 9082
  };                                                                                                                   // 9083
                                                                                                                       // 9084
  this.getColHeader = function (col, TH) {                                                                             // 9085
    if (this.getSettings().columnSorting && col >= 0) {                                                                // 9086
      Handsontable.Dom.addClass(TH.querySelector('.colHeader'), 'columnSorting');                                      // 9087
    }                                                                                                                  // 9088
  };                                                                                                                   // 9089
                                                                                                                       // 9090
  function isSorted(instance){                                                                                         // 9091
    return typeof instance.sortColumn != 'undefined';                                                                  // 9092
  }                                                                                                                    // 9093
                                                                                                                       // 9094
  this.afterCreateRow = function(index, amount){                                                                       // 9095
    var instance = this;                                                                                               // 9096
                                                                                                                       // 9097
    if(!isSorted(instance)){                                                                                           // 9098
      return;                                                                                                          // 9099
    }                                                                                                                  // 9100
                                                                                                                       // 9101
                                                                                                                       // 9102
    for(var i = 0; i < instance.sortIndex.length; i++){                                                                // 9103
      if (instance.sortIndex[i][0] >= index){                                                                          // 9104
        instance.sortIndex[i][0] += amount;                                                                            // 9105
      }                                                                                                                // 9106
    }                                                                                                                  // 9107
                                                                                                                       // 9108
    for(var i=0; i < amount; i++){                                                                                     // 9109
      instance.sortIndex.splice(index+i, 0, [index+i, instance.getData()[index+i][instance.sortColumn + instance.colOffset()]]);
    }                                                                                                                  // 9111
                                                                                                                       // 9112
                                                                                                                       // 9113
                                                                                                                       // 9114
    saveSortingState.call(instance);                                                                                   // 9115
                                                                                                                       // 9116
  };                                                                                                                   // 9117
                                                                                                                       // 9118
  this.afterRemoveRow = function(index, amount){                                                                       // 9119
    var instance = this;                                                                                               // 9120
                                                                                                                       // 9121
    if(!isSorted(instance)){                                                                                           // 9122
      return;                                                                                                          // 9123
    }                                                                                                                  // 9124
                                                                                                                       // 9125
    var physicalRemovedIndex = plugin.translateRow.call(instance, index);                                              // 9126
                                                                                                                       // 9127
    instance.sortIndex.splice(index, amount);                                                                          // 9128
                                                                                                                       // 9129
    for(var i = 0; i < instance.sortIndex.length; i++){                                                                // 9130
                                                                                                                       // 9131
      if (instance.sortIndex[i][0] > physicalRemovedIndex){                                                            // 9132
        instance.sortIndex[i][0] -= amount;                                                                            // 9133
      }                                                                                                                // 9134
    }                                                                                                                  // 9135
                                                                                                                       // 9136
    saveSortingState.call(instance);                                                                                   // 9137
                                                                                                                       // 9138
  };                                                                                                                   // 9139
                                                                                                                       // 9140
  this.afterChangeSort = function (changes/*, source*/) {                                                              // 9141
    var instance = this;                                                                                               // 9142
    var sortColumnChanged = false;                                                                                     // 9143
    var selection = {};                                                                                                // 9144
    if (!changes) {                                                                                                    // 9145
      return;                                                                                                          // 9146
    }                                                                                                                  // 9147
                                                                                                                       // 9148
    for (var i = 0; i < changes.length; i++) {                                                                         // 9149
      if (changes[i][1] == instance.sortColumn) {                                                                      // 9150
        sortColumnChanged = true;                                                                                      // 9151
        selection.row = plugin.translateRow.call(instance, changes[i][0]);                                             // 9152
        selection.col = changes[i][1];                                                                                 // 9153
        break;                                                                                                         // 9154
      }                                                                                                                // 9155
    }                                                                                                                  // 9156
                                                                                                                       // 9157
    if (sortColumnChanged) {                                                                                           // 9158
      instance._registerTimeout(setTimeout(function () {                                                               // 9159
        plugin.sort.call(instance);                                                                                    // 9160
        instance.render();                                                                                             // 9161
        instance.selectCell(plugin.untranslateRow.call(instance, selection.row), selection.col);                       // 9162
      }, 0));                                                                                                          // 9163
    }                                                                                                                  // 9164
  };                                                                                                                   // 9165
}                                                                                                                      // 9166
var htSortColumn = new HandsontableColumnSorting();                                                                    // 9167
                                                                                                                       // 9168
Handsontable.hooks.add('afterInit', function () {                                                                      // 9169
  htSortColumn.init.call(this, 'afterInit')                                                                            // 9170
});                                                                                                                    // 9171
Handsontable.hooks.add('afterUpdateSettings', function () {                                                            // 9172
  htSortColumn.init.call(this, 'afterUpdateSettings')                                                                  // 9173
});                                                                                                                    // 9174
Handsontable.hooks.add('modifyRow', htSortColumn.translateRow);                                                        // 9175
Handsontable.hooks.add('afterGetColHeader', htSortColumn.getColHeader);                                                // 9176
                                                                                                                       // 9177
Handsontable.hooks.register('beforeColumnSort');                                                                       // 9178
Handsontable.hooks.register('afterColumnSort');                                                                        // 9179
                                                                                                                       // 9180
                                                                                                                       // 9181
(function (Handsontable) {                                                                                             // 9182
  'use strict';                                                                                                        // 9183
                                                                                                                       // 9184
  function prepareVerticalAlignClass(className, alignment) {                                                           // 9185
    if (className.indexOf(alignment) != -1) {                                                                          // 9186
      return className;                                                                                                // 9187
    }                                                                                                                  // 9188
                                                                                                                       // 9189
    className = className                                                                                              // 9190
      .replace('htTop', '')                                                                                            // 9191
      .replace('htMiddle', '')                                                                                         // 9192
      .replace('htBottom', '')                                                                                         // 9193
      .replace('  ', '');                                                                                              // 9194
                                                                                                                       // 9195
    className += " " + alignment;                                                                                      // 9196
    return className;                                                                                                  // 9197
  }                                                                                                                    // 9198
                                                                                                                       // 9199
  function prepareHorizontalAlignClass(className, alignment) {                                                         // 9200
    if (className.indexOf(alignment) != -1) {                                                                          // 9201
      return className;                                                                                                // 9202
    }                                                                                                                  // 9203
                                                                                                                       // 9204
    className = className                                                                                              // 9205
      .replace('htLeft', '')                                                                                           // 9206
      .replace('htCenter', '')                                                                                         // 9207
      .replace('htRight', '')                                                                                          // 9208
      .replace('htJustify', '')                                                                                        // 9209
      .replace('  ', '');                                                                                              // 9210
                                                                                                                       // 9211
    className += " " + alignment;                                                                                      // 9212
    return className;                                                                                                  // 9213
  }                                                                                                                    // 9214
                                                                                                                       // 9215
  function doAlign(row, col, type, alignment) {                                                                        // 9216
    var cellMeta = this.getCellMeta(row, col),                                                                         // 9217
      className = alignment;                                                                                           // 9218
                                                                                                                       // 9219
    if (cellMeta.className) {                                                                                          // 9220
      if (type === 'vertical') {                                                                                       // 9221
        className = prepareVerticalAlignClass(cellMeta.className, alignment);                                          // 9222
      } else {                                                                                                         // 9223
        className = prepareHorizontalAlignClass(cellMeta.className, alignment);                                        // 9224
      }                                                                                                                // 9225
    }                                                                                                                  // 9226
                                                                                                                       // 9227
    this.setCellMeta(row, col, 'className', className);                                                                // 9228
    this.render();                                                                                                     // 9229
  }                                                                                                                    // 9230
                                                                                                                       // 9231
  function align(range, type, alignment) {                                                                             // 9232
    if (range.from.row == range.to.row && range.from.col == range.to.col) {                                            // 9233
      doAlign.call(this, range.from.row, range.from.col, type, alignment);                                             // 9234
    } else {                                                                                                           // 9235
      for (var row = range.from.row; row <= range.to.row; row++) {                                                     // 9236
        for (var col = range.from.col; col <= range.to.col; col++) {                                                   // 9237
          doAlign.call(this, row, col, type, alignment);                                                               // 9238
        }                                                                                                              // 9239
      }                                                                                                                // 9240
    }                                                                                                                  // 9241
  }                                                                                                                    // 9242
                                                                                                                       // 9243
  function ContextMenu(instance, customOptions) {                                                                      // 9244
    this.instance = instance;                                                                                          // 9245
    var contextMenu = this;                                                                                            // 9246
    contextMenu.menus = [];                                                                                            // 9247
    contextMenu.htMenus = {};                                                                                          // 9248
    contextMenu.triggerRows = [];                                                                                      // 9249
                                                                                                                       // 9250
    contextMenu.eventManager = Handsontable.eventManager(contextMenu);                                                 // 9251
                                                                                                                       // 9252
                                                                                                                       // 9253
    this.enabled = true;                                                                                               // 9254
                                                                                                                       // 9255
    this.instance.addHook('afterDestroy', function () {                                                                // 9256
      contextMenu.destroy();                                                                                           // 9257
    });                                                                                                                // 9258
                                                                                                                       // 9259
    this.defaultOptions = {                                                                                            // 9260
      items: [                                                                                                         // 9261
        {                                                                                                              // 9262
          key: 'row_above',                                                                                            // 9263
          name: 'Insert row above',                                                                                    // 9264
          callback: function (key, selection) {                                                                        // 9265
            this.alter("insert_row", selection.start.row);                                                             // 9266
          },                                                                                                           // 9267
          disabled: function () {                                                                                      // 9268
            var selected = this.getSelected(),                                                                         // 9269
              entireColumnSelection = [0, selected[1], this.countRows() - 1, selected[1]],                             // 9270
              columnSelected = entireColumnSelection.join(',') == selected.join(',');                                  // 9271
                                                                                                                       // 9272
            return selected[0] < 0 || this.countRows() >= this.getSettings().maxRows || columnSelected;                // 9273
          }                                                                                                            // 9274
        },                                                                                                             // 9275
        {                                                                                                              // 9276
          key: 'row_below',                                                                                            // 9277
          name: 'Insert row below',                                                                                    // 9278
          callback: function (key, selection) {                                                                        // 9279
            this.alter("insert_row", selection.end.row + 1);                                                           // 9280
          },                                                                                                           // 9281
          disabled: function () {                                                                                      // 9282
            var selected = this.getSelected(),                                                                         // 9283
              entireColumnSelection = [0, selected[1], this.countRows() - 1, selected[1]],                             // 9284
              columnSelected = entireColumnSelection.join(',') == selected.join(',');                                  // 9285
                                                                                                                       // 9286
            return this.getSelected()[0] < 0 || this.countRows() >= this.getSettings().maxRows || columnSelected;      // 9287
          }                                                                                                            // 9288
        },                                                                                                             // 9289
        ContextMenu.SEPARATOR,                                                                                         // 9290
        {                                                                                                              // 9291
          key: 'col_left',                                                                                             // 9292
          name: 'Insert column on the left',                                                                           // 9293
          callback: function (key, selection) {                                                                        // 9294
            this.alter("insert_col", selection.start.col);                                                             // 9295
          },                                                                                                           // 9296
          disabled: function () {                                                                                      // 9297
            var selected = this.getSelected(),                                                                         // 9298
              entireRowSelection = [selected[0], 0, selected[0], this.countCols() - 1],                                // 9299
              rowSelected = entireRowSelection.join(',') == selected.join(',');                                        // 9300
                                                                                                                       // 9301
            return this.getSelected()[1] < 0 || this.countCols() >= this.getSettings().maxCols || rowSelected;         // 9302
          }                                                                                                            // 9303
        },                                                                                                             // 9304
        {                                                                                                              // 9305
          key: 'col_right',                                                                                            // 9306
          name: 'Insert column on the right',                                                                          // 9307
          callback: function (key, selection) {                                                                        // 9308
            this.alter("insert_col", selection.end.col + 1);                                                           // 9309
          },                                                                                                           // 9310
          disabled: function () {                                                                                      // 9311
            var selected = this.getSelected(),                                                                         // 9312
              entireRowSelection = [selected[0], 0, selected[0], this.countCols() - 1],                                // 9313
              rowSelected = entireRowSelection.join(',') == selected.join(',');                                        // 9314
                                                                                                                       // 9315
            return selected[1] < 0 || this.countCols() >= this.getSettings().maxCols || rowSelected;                   // 9316
          }                                                                                                            // 9317
        },                                                                                                             // 9318
        ContextMenu.SEPARATOR,                                                                                         // 9319
        {                                                                                                              // 9320
          key: 'remove_row',                                                                                           // 9321
          name: 'Remove row',                                                                                          // 9322
          callback: function (key, selection) {                                                                        // 9323
            var amount = selection.end.row - selection.start.row + 1;                                                  // 9324
            this.alter("remove_row", selection.start.row, amount);                                                     // 9325
          },                                                                                                           // 9326
          disabled: function () {                                                                                      // 9327
            var selected = this.getSelected(),                                                                         // 9328
              entireColumnSelection = [0, selected[1], this.countRows() - 1, selected[1]],                             // 9329
              columnSelected = entireColumnSelection.join(',') == selected.join(',');                                  // 9330
            return (selected[0] < 0 || columnSelected);                                                                // 9331
          }                                                                                                            // 9332
        },                                                                                                             // 9333
        {                                                                                                              // 9334
          key: 'remove_col',                                                                                           // 9335
          name: 'Remove column',                                                                                       // 9336
          callback: function (key, selection) {                                                                        // 9337
            var amount = selection.end.col - selection.start.col + 1;                                                  // 9338
            this.alter("remove_col", selection.start.col, amount);                                                     // 9339
          },                                                                                                           // 9340
          disabled: function () {                                                                                      // 9341
            var selected = this.getSelected(),                                                                         // 9342
              entireRowSelection = [selected[0], 0, selected[0], this.countCols() - 1],                                // 9343
              rowSelected = entireRowSelection.join(',') == selected.join(',');                                        // 9344
            return (selected[1] < 0 || rowSelected);                                                                   // 9345
          }                                                                                                            // 9346
        },                                                                                                             // 9347
        ContextMenu.SEPARATOR,                                                                                         // 9348
        {                                                                                                              // 9349
          key: 'undo',                                                                                                 // 9350
          name: 'Undo',                                                                                                // 9351
          callback: function () {                                                                                      // 9352
            this.undo();                                                                                               // 9353
          },                                                                                                           // 9354
          disabled: function () {                                                                                      // 9355
            return this.undoRedo && !this.undoRedo.isUndoAvailable();                                                  // 9356
          }                                                                                                            // 9357
        },                                                                                                             // 9358
        {                                                                                                              // 9359
          key: 'redo',                                                                                                 // 9360
          name: 'Redo',                                                                                                // 9361
          callback: function () {                                                                                      // 9362
            this.redo();                                                                                               // 9363
          },                                                                                                           // 9364
          disabled: function () {                                                                                      // 9365
            return this.undoRedo && !this.undoRedo.isRedoAvailable();                                                  // 9366
          }                                                                                                            // 9367
        },                                                                                                             // 9368
        ContextMenu.SEPARATOR,                                                                                         // 9369
        {                                                                                                              // 9370
          key: 'make_read_only',                                                                                       // 9371
          name: function () {                                                                                          // 9372
            var label = "Read only";                                                                                   // 9373
            var atLeastOneReadOnly = contextMenu.checkSelectionReadOnlyConsistency(this);                              // 9374
            if (atLeastOneReadOnly) {                                                                                  // 9375
              label = contextMenu.markSelected(label);                                                                 // 9376
            }                                                                                                          // 9377
            return label;                                                                                              // 9378
          },                                                                                                           // 9379
          callback: function () {                                                                                      // 9380
            var atLeastOneReadOnly = contextMenu.checkSelectionReadOnlyConsistency(this);                              // 9381
                                                                                                                       // 9382
            var that = this;                                                                                           // 9383
            this.getSelectedRange().forAll(function (r, c) {                                                           // 9384
              that.getCellMeta(r, c).readOnly = atLeastOneReadOnly ? false : true;                                     // 9385
            });                                                                                                        // 9386
                                                                                                                       // 9387
            this.render();                                                                                             // 9388
          }                                                                                                            // 9389
        },                                                                                                             // 9390
        ContextMenu.SEPARATOR,                                                                                         // 9391
        {                                                                                                              // 9392
          key: 'alignment',                                                                                            // 9393
          name: 'Alignment',                                                                                           // 9394
          submenu: {                                                                                                   // 9395
            items: [                                                                                                   // 9396
              {                                                                                                        // 9397
                name: function () {                                                                                    // 9398
                  var label = "Left";                                                                                  // 9399
                  var hasClass = contextMenu.checkSelectionAlignment(this, 'htLeft');                                  // 9400
                                                                                                                       // 9401
                  if (hasClass) {                                                                                      // 9402
                    label = contextMenu.markSelected(label);                                                           // 9403
                  }                                                                                                    // 9404
                  return label;                                                                                        // 9405
                },                                                                                                     // 9406
                callback: function () {                                                                                // 9407
                  align.call(this, this.getSelectedRange(), 'horizontal', 'htLeft');                                   // 9408
                },                                                                                                     // 9409
                disabled: false                                                                                        // 9410
              },                                                                                                       // 9411
              {                                                                                                        // 9412
                name: function () {                                                                                    // 9413
                  var label = "Center";                                                                                // 9414
                  var hasClass = contextMenu.checkSelectionAlignment(this, 'htCenter');                                // 9415
                                                                                                                       // 9416
                  if (hasClass) {                                                                                      // 9417
                    label = contextMenu.markSelected(label);                                                           // 9418
                  }                                                                                                    // 9419
                  return label;                                                                                        // 9420
                },                                                                                                     // 9421
                callback: function () {                                                                                // 9422
                  align.call(this, this.getSelectedRange(), 'horizontal', 'htCenter');                                 // 9423
                },                                                                                                     // 9424
                disabled: false                                                                                        // 9425
              },                                                                                                       // 9426
              {                                                                                                        // 9427
                name: function () {                                                                                    // 9428
                  var label = "Right";                                                                                 // 9429
                  var hasClass = contextMenu.checkSelectionAlignment(this, 'htRight');                                 // 9430
                                                                                                                       // 9431
                  if (hasClass) {                                                                                      // 9432
                    label = contextMenu.markSelected(label);                                                           // 9433
                  }                                                                                                    // 9434
                  return label;                                                                                        // 9435
                },                                                                                                     // 9436
                callback: function () {                                                                                // 9437
                  align.call(this, this.getSelectedRange(), 'horizontal', 'htRight');                                  // 9438
                },                                                                                                     // 9439
                disabled: false                                                                                        // 9440
              },                                                                                                       // 9441
              {                                                                                                        // 9442
                name: function () {                                                                                    // 9443
                  var label = "Justify";                                                                               // 9444
                  var hasClass = contextMenu.checkSelectionAlignment(this, 'htJustify');                               // 9445
                                                                                                                       // 9446
                  if (hasClass) {                                                                                      // 9447
                    label = contextMenu.markSelected(label);                                                           // 9448
                  }                                                                                                    // 9449
                  return label;                                                                                        // 9450
                },                                                                                                     // 9451
                callback: function () {                                                                                // 9452
                  align.call(this, this.getSelectedRange(), 'horizontal', 'htJustify');                                // 9453
                },                                                                                                     // 9454
                disabled: false                                                                                        // 9455
              },                                                                                                       // 9456
              ContextMenu.SEPARATOR,                                                                                   // 9457
              {                                                                                                        // 9458
                name: function () {                                                                                    // 9459
                  var label = "Top";                                                                                   // 9460
                  var hasClass = contextMenu.checkSelectionAlignment(this, 'htTop');                                   // 9461
                                                                                                                       // 9462
                  if (hasClass) {                                                                                      // 9463
                    label = contextMenu.markSelected(label);                                                           // 9464
                  }                                                                                                    // 9465
                  return label;                                                                                        // 9466
                },                                                                                                     // 9467
                callback: function () {                                                                                // 9468
                  align.call(this, this.getSelectedRange(), 'vertical', 'htTop');                                      // 9469
                },                                                                                                     // 9470
                disabled: false                                                                                        // 9471
              },                                                                                                       // 9472
              {                                                                                                        // 9473
                name: function () {                                                                                    // 9474
                  var label = "Middle";                                                                                // 9475
                  var hasClass = contextMenu.checkSelectionAlignment(this, 'htMiddle');                                // 9476
                                                                                                                       // 9477
                  if (hasClass) {                                                                                      // 9478
                    label = contextMenu.markSelected(label);                                                           // 9479
                  }                                                                                                    // 9480
                  return label;                                                                                        // 9481
                },                                                                                                     // 9482
                callback: function () {                                                                                // 9483
                  align.call(this, this.getSelectedRange(), 'vertical', 'htMiddle');                                   // 9484
                },                                                                                                     // 9485
                disabled: false                                                                                        // 9486
              },                                                                                                       // 9487
              {                                                                                                        // 9488
                name: function () {                                                                                    // 9489
                  var label = "Bottom";                                                                                // 9490
                  var hasClass = contextMenu.checkSelectionAlignment(this, 'htBottom');                                // 9491
                                                                                                                       // 9492
                  if (hasClass) {                                                                                      // 9493
                    label = contextMenu.markSelected(label);                                                           // 9494
                  }                                                                                                    // 9495
                  return label;                                                                                        // 9496
                },                                                                                                     // 9497
                callback: function () {                                                                                // 9498
                  align.call(this, this.getSelectedRange(), 'vertical', 'htBottom');                                   // 9499
                },                                                                                                     // 9500
                disabled: false                                                                                        // 9501
              }                                                                                                        // 9502
            ]                                                                                                          // 9503
          }                                                                                                            // 9504
        }                                                                                                              // 9505
      ]                                                                                                                // 9506
    };                                                                                                                 // 9507
                                                                                                                       // 9508
    contextMenu.options = {};                                                                                          // 9509
                                                                                                                       // 9510
    Handsontable.helper.extend(contextMenu.options, this.options);                                                     // 9511
                                                                                                                       // 9512
    this.bindMouseEvents();                                                                                            // 9513
                                                                                                                       // 9514
    this.markSelected = function (label) {                                                                             // 9515
      return "<span class='selected'>" + String.fromCharCode(10003) + "</span>" + label; // workaround for https://github.com/handsontable/handsontable/issues/1946
    };                                                                                                                 // 9517
                                                                                                                       // 9518
    this.checkSelectionAlignment = function (hot, className) {                                                         // 9519
      var hasAlignment = false;                                                                                        // 9520
                                                                                                                       // 9521
      hot.getSelectedRange().forAll(function (r, c) {                                                                  // 9522
        var metaClassName = hot.getCellMeta(r, c).className;                                                           // 9523
        if (metaClassName && metaClassName.indexOf(className) != -1) {                                                 // 9524
          hasAlignment = true;                                                                                         // 9525
          return false;                                                                                                // 9526
        }                                                                                                              // 9527
      });                                                                                                              // 9528
                                                                                                                       // 9529
      return hasAlignment;                                                                                             // 9530
    };                                                                                                                 // 9531
                                                                                                                       // 9532
    if(!this.instance.getSettings().allowInsertRow) {                                                                  // 9533
      var rowAboveIndex = findIndexByKey(this.defaultOptions.items, 'row_above');                                      // 9534
      this.defaultOptions.items.splice(rowAboveIndex,1);                                                               // 9535
      var rowBelowIndex = findIndexByKey(this.defaultOptions.items, 'row_above');                                      // 9536
      this.defaultOptions.items.splice(rowBelowIndex,1);                                                               // 9537
      this.defaultOptions.items.splice(rowBelowIndex,1); // FOR SEPARATOR                                              // 9538
                                                                                                                       // 9539
    }                                                                                                                  // 9540
                                                                                                                       // 9541
    if(!this.instance.getSettings().allowInsertColumn) {                                                               // 9542
      var colLeftIndex = findIndexByKey(this.defaultOptions.items, 'col_left');                                        // 9543
      this.defaultOptions.items.splice(colLeftIndex,1);                                                                // 9544
      var colRightIndex = findIndexByKey(this.defaultOptions.items, 'col_right');                                      // 9545
      this.defaultOptions.items.splice(colRightIndex,1);                                                               // 9546
      this.defaultOptions.items.splice(colRightIndex,1); // FOR SEPARATOR                                              // 9547
                                                                                                                       // 9548
    }                                                                                                                  // 9549
                                                                                                                       // 9550
    var removeRow = false;                                                                                             // 9551
    var removeCol = false;                                                                                             // 9552
    var removeRowIndex, removeColumnIndex;                                                                             // 9553
                                                                                                                       // 9554
    if(!this.instance.getSettings().allowRemoveRow) {                                                                  // 9555
      removeRowIndex = findIndexByKey(this.defaultOptions.items, 'remove_row');                                        // 9556
      this.defaultOptions.items.splice(removeRowIndex,1);                                                              // 9557
      removeRow = true;                                                                                                // 9558
    }                                                                                                                  // 9559
                                                                                                                       // 9560
    if(!this.instance.getSettings().allowRemoveColumn) {                                                               // 9561
      removeColumnIndex = findIndexByKey(this.defaultOptions.items, 'remove_col');                                     // 9562
      this.defaultOptions.items.splice(removeColumnIndex,1);                                                           // 9563
      removeCol = true;                                                                                                // 9564
    }                                                                                                                  // 9565
                                                                                                                       // 9566
    if (removeRow && removeCol) {                                                                                      // 9567
      this.defaultOptions.items.splice(removeColumnIndex,1); // SEPARATOR                                              // 9568
    }                                                                                                                  // 9569
                                                                                                                       // 9570
    this.checkSelectionReadOnlyConsistency = function (hot) {                                                          // 9571
      var atLeastOneReadOnly = false;                                                                                  // 9572
                                                                                                                       // 9573
      hot.getSelectedRange().forAll(function (r, c) {                                                                  // 9574
        if (hot.getCellMeta(r, c).readOnly) {                                                                          // 9575
          atLeastOneReadOnly = true;                                                                                   // 9576
          return false; //breaks forAll                                                                                // 9577
        }                                                                                                              // 9578
      });                                                                                                              // 9579
                                                                                                                       // 9580
      return atLeastOneReadOnly;                                                                                       // 9581
    };                                                                                                                 // 9582
                                                                                                                       // 9583
    Handsontable.hooks.run(instance, 'afterContextMenuDefaultOptions', this.defaultOptions);                           // 9584
                                                                                                                       // 9585
  }                                                                                                                    // 9586
                                                                                                                       // 9587
  /***                                                                                                                 // 9588
   * Create DOM instance of contextMenu                                                                                // 9589
   * @param menuName                                                                                                   // 9590
   * @param row                                                                                                        // 9591
   * @return {*}                                                                                                       // 9592
   */                                                                                                                  // 9593
  ContextMenu.prototype.createMenu = function (menuName, row) {                                                        // 9594
    if (menuName) {                                                                                                    // 9595
      menuName = menuName.replace(/ /g, '_'); // replace all spaces in name                                            // 9596
      menuName = 'htContextSubMenu_' + menuName;                                                                       // 9597
    }                                                                                                                  // 9598
                                                                                                                       // 9599
    var menu;                                                                                                          // 9600
    if (menuName) {                                                                                                    // 9601
      menu = document.querySelector('.htContextMenu.' + menuName);                                                     // 9602
    } else {                                                                                                           // 9603
      menu = document.querySelector('.htContextMenu');                                                                 // 9604
    }                                                                                                                  // 9605
                                                                                                                       // 9606
                                                                                                                       // 9607
    if (!menu) {                                                                                                       // 9608
      menu = document.createElement('DIV');                                                                            // 9609
      Handsontable.Dom.addClass(menu, 'htContextMenu');                                                                // 9610
      if (menuName) {                                                                                                  // 9611
        Handsontable.Dom.addClass(menu, menuName);                                                                     // 9612
      }                                                                                                                // 9613
      document.getElementsByTagName('body')[0].appendChild(menu);                                                      // 9614
    }                                                                                                                  // 9615
                                                                                                                       // 9616
    if (this.menus.indexOf(menu) < 0) {                                                                                // 9617
      this.menus.push(menu);                                                                                           // 9618
      row = row || 0;                                                                                                  // 9619
      this.triggerRows.push(row);                                                                                      // 9620
    }                                                                                                                  // 9621
                                                                                                                       // 9622
    return menu;                                                                                                       // 9623
  };                                                                                                                   // 9624
                                                                                                                       // 9625
  ContextMenu.prototype.bindMouseEvents = function () {                                                                // 9626
                                                                                                                       // 9627
    function contextMenuOpenListener(event) {                                                                          // 9628
      var settings = this.instance.getSettings();                                                                      // 9629
                                                                                                                       // 9630
      this.closeAll();                                                                                                 // 9631
                                                                                                                       // 9632
      event.preventDefault();                                                                                          // 9633
      Handsontable.helper.stopPropagation(event);                                                                      // 9634
                                                                                                                       // 9635
      var showRowHeaders = this.instance.getSettings().rowHeaders,                                                     // 9636
        showColHeaders = this.instance.getSettings().colHeaders;                                                       // 9637
                                                                                                                       // 9638
      if (!(showRowHeaders || showColHeaders)) {                                                                       // 9639
        if (event.target.nodeName != 'TD' && !(Handsontable.Dom.hasClass(event.target, 'current') && Handsontable.Dom.hasClass(event.target, 'wtBorder'))) {
          return;                                                                                                      // 9641
        }                                                                                                              // 9642
      }                                                                                                                // 9643
      var menu = this.createMenu();                                                                                    // 9644
      var items = this.getItems(settings.contextMenu);                                                                 // 9645
                                                                                                                       // 9646
      this.show(menu, items);                                                                                          // 9647
                                                                                                                       // 9648
      this.setMenuPosition(event, menu);                                                                               // 9649
                                                                                                                       // 9650
      this.eventManager.addEventListener(document.documentElement, 'mousedown', Handsontable.helper.proxy(ContextMenu.prototype.closeAll, this));
    }                                                                                                                  // 9652
    var eventManager = Handsontable.eventManager(this.instance);                                                       // 9653
                                                                                                                       // 9654
    eventManager.addEventListener(this.instance.rootElement, 'contextmenu', Handsontable.helper.proxy(contextMenuOpenListener, this));
  };                                                                                                                   // 9656
                                                                                                                       // 9657
  ContextMenu.prototype.bindTableEvents = function () {                                                                // 9658
    this._afterScrollCallback = function () {};                                                                        // 9659
    this.instance.addHook('afterScrollVertically', this._afterScrollCallback);                                         // 9660
    this.instance.addHook('afterScrollHorizontally', this._afterScrollCallback);                                       // 9661
  };                                                                                                                   // 9662
                                                                                                                       // 9663
  ContextMenu.prototype.unbindTableEvents = function () {                                                              // 9664
    if (this._afterScrollCallback) {                                                                                   // 9665
      this.instance.removeHook('afterScrollVertically', this._afterScrollCallback);                                    // 9666
      this.instance.removeHook('afterScrollHorizontally', this._afterScrollCallback);                                  // 9667
      this._afterScrollCallback = null;                                                                                // 9668
    }                                                                                                                  // 9669
  };                                                                                                                   // 9670
                                                                                                                       // 9671
  ContextMenu.prototype.performAction = function (event, hot) {                                                        // 9672
    var contextMenu = this;                                                                                            // 9673
                                                                                                                       // 9674
    var selectedItemIndex = hot.getSelected()[0];                                                                      // 9675
    var selectedItem = hot.getData()[selectedItemIndex];                                                               // 9676
                                                                                                                       // 9677
    if (selectedItem.disabled === true || (typeof selectedItem.disabled == 'function' && selectedItem.disabled.call(this.instance) === true)) {
      return;                                                                                                          // 9679
    }                                                                                                                  // 9680
                                                                                                                       // 9681
    if (!selectedItem.hasOwnProperty('submenu')) {                                                                     // 9682
      if (typeof selectedItem.callback != 'function') {                                                                // 9683
        return;                                                                                                        // 9684
      }                                                                                                                // 9685
      var selRange = this.instance.getSelectedRange();                                                                 // 9686
      var normalizedSelection = ContextMenu.utils.normalizeSelection(selRange);                                        // 9687
                                                                                                                       // 9688
      selectedItem.callback.call(this.instance, selectedItem.key, normalizedSelection, event);                         // 9689
      contextMenu.closeAll();                                                                                          // 9690
    }                                                                                                                  // 9691
  };                                                                                                                   // 9692
                                                                                                                       // 9693
  ContextMenu.prototype.unbindMouseEvents = function () {                                                              // 9694
    this.eventManager.clear();                                                                                         // 9695
    var eventManager = Handsontable.eventManager(this.instance);                                                       // 9696
    eventManager.removeEventListener(this.instance.rootElement, 'contextmenu');                                        // 9697
  };                                                                                                                   // 9698
                                                                                                                       // 9699
  ContextMenu.prototype.show = function (menu, items) {                                                                // 9700
    var that = this;                                                                                                   // 9701
                                                                                                                       // 9702
    menu.removeAttribute('style');                                                                                     // 9703
    menu.style.display = 'block';                                                                                      // 9704
                                                                                                                       // 9705
    var settings = {                                                                                                   // 9706
      data: items,                                                                                                     // 9707
      colHeaders: false,                                                                                               // 9708
      colWidths: [200],                                                                                                // 9709
      readOnly: true,                                                                                                  // 9710
      copyPaste: false,                                                                                                // 9711
      columns: [                                                                                                       // 9712
        {                                                                                                              // 9713
          data: 'name',                                                                                                // 9714
          renderer: Handsontable.helper.proxy(this.renderer, this)                                                     // 9715
        }                                                                                                              // 9716
      ],                                                                                                               // 9717
      renderAllRows: true,                                                                                             // 9718
      beforeKeyDown: function (event) {                                                                                // 9719
        that.onBeforeKeyDown(event, htContextMenu);                                                                    // 9720
      },                                                                                                               // 9721
      afterOnCellMouseOver: function (event, coords, TD) {                                                             // 9722
        that.onCellMouseOver(event, coords, TD, htContextMenu);                                                        // 9723
      }                                                                                                                // 9724
    };                                                                                                                 // 9725
                                                                                                                       // 9726
    var htContextMenu = new Handsontable(menu, settings);                                                              // 9727
                                                                                                                       // 9728
                                                                                                                       // 9729
    this.eventManager.removeEventListener(menu, 'mousedown');                                                          // 9730
    this.eventManager.addEventListener(menu,'mousedown', function (event) {                                            // 9731
      that.performAction(event, htContextMenu)                                                                         // 9732
    });                                                                                                                // 9733
                                                                                                                       // 9734
    this.bindTableEvents();                                                                                            // 9735
    htContextMenu.listen();                                                                                            // 9736
                                                                                                                       // 9737
    this.htMenus[htContextMenu.guid] = htContextMenu;                                                                  // 9738
  };                                                                                                                   // 9739
                                                                                                                       // 9740
  ContextMenu.prototype.close = function (menu) {                                                                      // 9741
    this.hide(menu);                                                                                                   // 9742
    this.eventManager.clear();                                                                                         // 9743
    this.unbindTableEvents();                                                                                          // 9744
    this.instance.listen();                                                                                            // 9745
  };                                                                                                                   // 9746
                                                                                                                       // 9747
  ContextMenu.prototype.closeAll = function () {                                                                       // 9748
    while (this.menus.length > 0) {                                                                                    // 9749
      var menu = this.menus.pop();                                                                                     // 9750
      if (menu) {                                                                                                      // 9751
        this.close(menu);                                                                                              // 9752
      }                                                                                                                // 9753
                                                                                                                       // 9754
    }                                                                                                                  // 9755
    this.triggerRows = [];                                                                                             // 9756
  };                                                                                                                   // 9757
                                                                                                                       // 9758
  ContextMenu.prototype.closeLastOpenedSubMenu = function () {                                                         // 9759
    var menu = this.menus.pop();                                                                                       // 9760
    if (menu) {                                                                                                        // 9761
      this.hide(menu);                                                                                                 // 9762
    }                                                                                                                  // 9763
                                                                                                                       // 9764
  };                                                                                                                   // 9765
                                                                                                                       // 9766
  ContextMenu.prototype.hide = function (menu) {                                                                       // 9767
    menu.style.display = 'none';                                                                                       // 9768
    var instance =this.htMenus[menu.id];                                                                               // 9769
                                                                                                                       // 9770
    instance.destroy();                                                                                                // 9771
    delete this.htMenus[menu.id];                                                                                      // 9772
  };                                                                                                                   // 9773
                                                                                                                       // 9774
  ContextMenu.prototype.renderer = function (instance, TD, row, col, prop, value) {                                    // 9775
    var contextMenu = this;                                                                                            // 9776
    var item = instance.getData()[row];                                                                                // 9777
    var wrapper = document.createElement('DIV');                                                                       // 9778
                                                                                                                       // 9779
    if (typeof value === 'function') {                                                                                 // 9780
      value = value.call(this.instance);                                                                               // 9781
    }                                                                                                                  // 9782
                                                                                                                       // 9783
    Handsontable.Dom.empty(TD);                                                                                        // 9784
    TD.appendChild(wrapper);                                                                                           // 9785
                                                                                                                       // 9786
    if (itemIsSeparator(item)) {                                                                                       // 9787
      Handsontable.Dom.addClass(TD, 'htSeparator');                                                                    // 9788
    } else {                                                                                                           // 9789
      Handsontable.Dom.fastInnerHTML(wrapper, value);                                                                  // 9790
    }                                                                                                                  // 9791
                                                                                                                       // 9792
    if (itemIsDisabled(item)) {                                                                                        // 9793
      Handsontable.Dom.addClass(TD, 'htDisabled');                                                                     // 9794
                                                                                                                       // 9795
      this.eventManager.addEventListener(wrapper, 'mouseenter', function () {                                          // 9796
        instance.deselectCell();                                                                                       // 9797
      });                                                                                                              // 9798
                                                                                                                       // 9799
    } else {                                                                                                           // 9800
      if (isSubMenu(item)) {                                                                                           // 9801
        Handsontable.Dom.addClass(TD, 'htSubmenu');                                                                    // 9802
                                                                                                                       // 9803
                                                                                                                       // 9804
        this.eventManager.addEventListener(wrapper, 'mouseenter', function () {                                        // 9805
          instance.selectCell(row, col);                                                                               // 9806
        });                                                                                                            // 9807
                                                                                                                       // 9808
      } else {                                                                                                         // 9809
        Handsontable.Dom.removeClass(TD, 'htSubmenu');                                                                 // 9810
        Handsontable.Dom.removeClass(TD, 'htDisabled');                                                                // 9811
                                                                                                                       // 9812
        this.eventManager.addEventListener(wrapper, 'mouseenter', function () {                                        // 9813
          instance.selectCell(row, col);                                                                               // 9814
        });                                                                                                            // 9815
      }                                                                                                                // 9816
    }                                                                                                                  // 9817
                                                                                                                       // 9818
                                                                                                                       // 9819
    function isSubMenu(item) {                                                                                         // 9820
      return item.hasOwnProperty('submenu');                                                                           // 9821
    }                                                                                                                  // 9822
                                                                                                                       // 9823
    function itemIsSeparator(item) {                                                                                   // 9824
      return new RegExp(ContextMenu.SEPARATOR.name, 'i').test(item.name);                                              // 9825
    }                                                                                                                  // 9826
                                                                                                                       // 9827
    function itemIsDisabled(item) {                                                                                    // 9828
      return item.disabled === true || (typeof item.disabled == 'function' && item.disabled.call(contextMenu.instance) === true);
    }                                                                                                                  // 9830
                                                                                                                       // 9831
                                                                                                                       // 9832
  };                                                                                                                   // 9833
                                                                                                                       // 9834
  ContextMenu.prototype.onCellMouseOver = function (event, coords, TD, hot) {                                          // 9835
    var menusLength = this.menus.length;                                                                               // 9836
                                                                                                                       // 9837
    if (menusLength > 0) {                                                                                             // 9838
      var lastMenu = this.menus[menusLength - 1];                                                                      // 9839
      if (lastMenu.id != hot.guid) {                                                                                   // 9840
        this.closeLastOpenedSubMenu();                                                                                 // 9841
      }                                                                                                                // 9842
    } else {                                                                                                           // 9843
      this.closeLastOpenedSubMenu();                                                                                   // 9844
    }                                                                                                                  // 9845
                                                                                                                       // 9846
    if (TD.className.indexOf('htSubmenu') != -1) {                                                                     // 9847
      var selectedItem = hot.getData()[coords.row];                                                                    // 9848
      var items = this.getItems(selectedItem.submenu);                                                                 // 9849
                                                                                                                       // 9850
      var subMenu = this.createMenu(selectedItem.name, coords.row);                                                    // 9851
      var tdCoords = TD.getBoundingClientRect();                                                                       // 9852
                                                                                                                       // 9853
      this.show(subMenu, items);                                                                                       // 9854
      this.setSubMenuPosition(tdCoords, subMenu);                                                                      // 9855
                                                                                                                       // 9856
    }                                                                                                                  // 9857
  };                                                                                                                   // 9858
                                                                                                                       // 9859
  ContextMenu.prototype.onBeforeKeyDown = function (event, instance) {                                                 // 9860
                                                                                                                       // 9861
    Handsontable.Dom.enableImmediatePropagation(event);                                                                // 9862
    var contextMenu = this;                                                                                            // 9863
                                                                                                                       // 9864
    var selection = instance.getSelected();                                                                            // 9865
                                                                                                                       // 9866
    switch (event.keyCode) {                                                                                           // 9867
                                                                                                                       // 9868
      case Handsontable.helper.keyCode.ESCAPE:                                                                         // 9869
        contextMenu.closeAll();                                                                                        // 9870
        event.preventDefault();                                                                                        // 9871
        event.stopImmediatePropagation();                                                                              // 9872
        break;                                                                                                         // 9873
                                                                                                                       // 9874
      case Handsontable.helper.keyCode.ENTER:                                                                          // 9875
        if (selection) {                                                                                               // 9876
          contextMenu.performAction(event, instance);                                                                  // 9877
        }                                                                                                              // 9878
        break;                                                                                                         // 9879
                                                                                                                       // 9880
      case Handsontable.helper.keyCode.ARROW_DOWN:                                                                     // 9881
                                                                                                                       // 9882
        if (!selection) {                                                                                              // 9883
                                                                                                                       // 9884
          selectFirstCell(instance, contextMenu);                                                                      // 9885
                                                                                                                       // 9886
        } else {                                                                                                       // 9887
                                                                                                                       // 9888
          selectNextCell(selection[0], selection[1], instance, contextMenu);                                           // 9889
                                                                                                                       // 9890
        }                                                                                                              // 9891
                                                                                                                       // 9892
        event.preventDefault();                                                                                        // 9893
        event.stopImmediatePropagation();                                                                              // 9894
                                                                                                                       // 9895
        break;                                                                                                         // 9896
                                                                                                                       // 9897
      case Handsontable.helper.keyCode.ARROW_UP:                                                                       // 9898
        if (!selection) {                                                                                              // 9899
                                                                                                                       // 9900
          selectLastCell(instance, contextMenu);                                                                       // 9901
                                                                                                                       // 9902
        } else {                                                                                                       // 9903
                                                                                                                       // 9904
          selectPrevCell(selection[0], selection[1], instance, contextMenu);                                           // 9905
                                                                                                                       // 9906
        }                                                                                                              // 9907
                                                                                                                       // 9908
        event.preventDefault();                                                                                        // 9909
        event.stopImmediatePropagation();                                                                              // 9910
                                                                                                                       // 9911
        break;                                                                                                         // 9912
      case Handsontable.helper.keyCode.ARROW_RIGHT:                                                                    // 9913
        if (selection) {                                                                                               // 9914
          var row = selection[0];                                                                                      // 9915
          var cell = instance.getCell(selection[0], 0);                                                                // 9916
                                                                                                                       // 9917
          if (ContextMenu.utils.hasSubMenu(cell)) {                                                                    // 9918
            openSubMenu(instance, contextMenu, cell, row);                                                             // 9919
          }                                                                                                            // 9920
        }                                                                                                              // 9921
        event.preventDefault();                                                                                        // 9922
        event.stopImmediatePropagation();                                                                              // 9923
                                                                                                                       // 9924
        break;                                                                                                         // 9925
                                                                                                                       // 9926
      case Handsontable.helper.keyCode.ARROW_LEFT:                                                                     // 9927
        if (selection) {                                                                                               // 9928
                                                                                                                       // 9929
          if (instance.rootElement.className.indexOf('htContextSubMenu_') != -1) {                                     // 9930
            contextMenu.closeLastOpenedSubMenu();                                                                      // 9931
            var index = contextMenu.menus.length;                                                                      // 9932
                                                                                                                       // 9933
            if (index > 0) {                                                                                           // 9934
              var menu = contextMenu.menus[index - 1];                                                                 // 9935
                                                                                                                       // 9936
              var triggerRow = contextMenu.triggerRows.pop();                                                          // 9937
              instance = this.htMenus[menu.id];                                                                        // 9938
              instance.selectCell(triggerRow, 0);                                                                      // 9939
            }                                                                                                          // 9940
          }                                                                                                            // 9941
          event.preventDefault();                                                                                      // 9942
          event.stopImmediatePropagation();                                                                            // 9943
        }                                                                                                              // 9944
        break;                                                                                                         // 9945
    }                                                                                                                  // 9946
                                                                                                                       // 9947
    function selectFirstCell(instance) {                                                                               // 9948
                                                                                                                       // 9949
      var firstCell = instance.getCell(0, 0);                                                                          // 9950
                                                                                                                       // 9951
      if (ContextMenu.utils.isSeparator(firstCell) || ContextMenu.utils.isDisabled(firstCell)) {                       // 9952
        selectNextCell(0, 0, instance);                                                                                // 9953
      } else {                                                                                                         // 9954
        instance.selectCell(0, 0);                                                                                     // 9955
      }                                                                                                                // 9956
                                                                                                                       // 9957
    }                                                                                                                  // 9958
                                                                                                                       // 9959
                                                                                                                       // 9960
    function selectLastCell(instance) {                                                                                // 9961
                                                                                                                       // 9962
      var lastRow = instance.countRows() - 1;                                                                          // 9963
      var lastCell = instance.getCell(lastRow, 0);                                                                     // 9964
                                                                                                                       // 9965
      if (ContextMenu.utils.isSeparator(lastCell) || ContextMenu.utils.isDisabled(lastCell)) {                         // 9966
        selectPrevCell(lastRow, 0, instance);                                                                          // 9967
      } else {                                                                                                         // 9968
        instance.selectCell(lastRow, 0);                                                                               // 9969
      }                                                                                                                // 9970
                                                                                                                       // 9971
    }                                                                                                                  // 9972
                                                                                                                       // 9973
    function selectNextCell(row, col, instance) {                                                                      // 9974
      var nextRow = row + 1;                                                                                           // 9975
      var nextCell = nextRow < instance.countRows() ? instance.getCell(nextRow, col) : null;                           // 9976
                                                                                                                       // 9977
      if (!nextCell) {                                                                                                 // 9978
        return;                                                                                                        // 9979
      }                                                                                                                // 9980
                                                                                                                       // 9981
      if (ContextMenu.utils.isSeparator(nextCell) || ContextMenu.utils.isDisabled(nextCell)) {                         // 9982
        selectNextCell(nextRow, col, instance);                                                                        // 9983
      } else {                                                                                                         // 9984
        instance.selectCell(nextRow, col);                                                                             // 9985
      }                                                                                                                // 9986
    }                                                                                                                  // 9987
                                                                                                                       // 9988
    function selectPrevCell(row, col, instance) {                                                                      // 9989
                                                                                                                       // 9990
      var prevRow = row - 1;                                                                                           // 9991
      var prevCell = prevRow >= 0 ? instance.getCell(prevRow, col) : null;                                             // 9992
                                                                                                                       // 9993
      if (!prevCell) {                                                                                                 // 9994
        return;                                                                                                        // 9995
      }                                                                                                                // 9996
                                                                                                                       // 9997
      if (ContextMenu.utils.isSeparator(prevCell) || ContextMenu.utils.isDisabled(prevCell)) {                         // 9998
        selectPrevCell(prevRow, col, instance);                                                                        // 9999
      } else {                                                                                                         // 10000
        instance.selectCell(prevRow, col);                                                                             // 10001
      }                                                                                                                // 10002
                                                                                                                       // 10003
    }                                                                                                                  // 10004
                                                                                                                       // 10005
    function openSubMenu(instance, contextMenu, cell, row) {                                                           // 10006
      var selectedItem = instance.getData()[row];                                                                      // 10007
      var items = contextMenu.getItems(selectedItem.submenu);                                                          // 10008
      var subMenu = contextMenu.createMenu(selectedItem.name, row);                                                    // 10009
      var coords = cell.getBoundingClientRect();                                                                       // 10010
      var subMenuInstance = contextMenu.show(subMenu, items);                                                          // 10011
                                                                                                                       // 10012
      contextMenu.setSubMenuPosition(coords, subMenu);                                                                 // 10013
      subMenuInstance.selectCell(0, 0);                                                                                // 10014
    }                                                                                                                  // 10015
  };                                                                                                                   // 10016
                                                                                                                       // 10017
  function findByKey(items, key) {                                                                                     // 10018
    for (var i = 0, ilen = items.length; i < ilen; i++) {                                                              // 10019
      if (items[i].key === key) {                                                                                      // 10020
        return items[i];                                                                                               // 10021
      }                                                                                                                // 10022
    }                                                                                                                  // 10023
  }                                                                                                                    // 10024
                                                                                                                       // 10025
  function findIndexByKey(items, key) {                                                                                // 10026
    for (var i = 0, ilen = items.length; i < ilen; i++) {                                                              // 10027
      if (items[i].key === key) {                                                                                      // 10028
        return i;                                                                                                      // 10029
      }                                                                                                                // 10030
    }                                                                                                                  // 10031
  }                                                                                                                    // 10032
                                                                                                                       // 10033
  ContextMenu.prototype.getItems = function (items) {                                                                  // 10034
    var menu, item;                                                                                                    // 10035
                                                                                                                       // 10036
    function ContextMenuItem(rawItem) {                                                                                // 10037
      if (typeof rawItem == 'string') {                                                                                // 10038
        this.name = rawItem;                                                                                           // 10039
      } else {                                                                                                         // 10040
        Handsontable.helper.extend(this, rawItem);                                                                     // 10041
      }                                                                                                                // 10042
    }                                                                                                                  // 10043
                                                                                                                       // 10044
    ContextMenuItem.prototype = items;                                                                                 // 10045
                                                                                                                       // 10046
    if (items && items.items) {                                                                                        // 10047
      items = items.items;                                                                                             // 10048
    }                                                                                                                  // 10049
                                                                                                                       // 10050
    if (items === true) {                                                                                              // 10051
      items = this.defaultOptions.items;                                                                               // 10052
    }                                                                                                                  // 10053
                                                                                                                       // 10054
    if (1 == 1) {                                                                                                      // 10055
      menu = [];                                                                                                       // 10056
      for (var key in items) {                                                                                         // 10057
        if (items.hasOwnProperty(key)) {                                                                               // 10058
          if (typeof items[key] === 'string') {                                                                        // 10059
            item = findByKey(this.defaultOptions.items, items[key]);                                                   // 10060
          }                                                                                                            // 10061
          else {                                                                                                       // 10062
            item = findByKey(this.defaultOptions.items, key);                                                          // 10063
          }                                                                                                            // 10064
          if (!item) {                                                                                                 // 10065
            item = items[key];                                                                                         // 10066
          }                                                                                                            // 10067
          item = new ContextMenuItem(item);                                                                            // 10068
          if (typeof items[key] === 'object') {                                                                        // 10069
            Handsontable.helper.extend(item, items[key]);                                                              // 10070
          }                                                                                                            // 10071
          if (!item.key) {                                                                                             // 10072
            item.key = key;                                                                                            // 10073
          }                                                                                                            // 10074
          menu.push(item);                                                                                             // 10075
        }                                                                                                              // 10076
      }                                                                                                                // 10077
    }                                                                                                                  // 10078
                                                                                                                       // 10079
    return menu;                                                                                                       // 10080
  };                                                                                                                   // 10081
                                                                                                                       // 10082
  ContextMenu.prototype.setSubMenuPosition = function (coords, menu) {                                                 // 10083
    var scrollTop = Handsontable.Dom.getWindowScrollTop();                                                             // 10084
    var scrollLeft = Handsontable.Dom.getWindowScrollLeft();                                                           // 10085
                                                                                                                       // 10086
    var cursor = {                                                                                                     // 10087
      top: scrollTop + coords.top,                                                                                     // 10088
      topRelative: coords.top,                                                                                         // 10089
      left: coords.left,                                                                                               // 10090
      leftRelative: coords.left - scrollLeft,                                                                          // 10091
      scrollTop: scrollTop,                                                                                            // 10092
      scrollLeft: scrollLeft,                                                                                          // 10093
      cellHeight: coords.height,                                                                                       // 10094
      cellWidth: coords.width                                                                                          // 10095
    };                                                                                                                 // 10096
                                                                                                                       // 10097
    if (this.menuFitsBelowCursor(cursor, menu, document.body.clientWidth)) {                                           // 10098
      this.positionMenuBelowCursor(cursor, menu, true);                                                                // 10099
    } else {                                                                                                           // 10100
      if (this.menuFitsAboveCursor(cursor, menu)) {                                                                    // 10101
        this.positionMenuAboveCursor(cursor, menu, true);                                                              // 10102
      } else {                                                                                                         // 10103
        this.positionMenuBelowCursor(cursor, menu, true);                                                              // 10104
      }                                                                                                                // 10105
    }                                                                                                                  // 10106
                                                                                                                       // 10107
    if (this.menuFitsOnRightOfCursor(cursor, menu, document.body.clientWidth)) {                                       // 10108
      this.positionMenuOnRightOfCursor(cursor, menu, true);                                                            // 10109
    } else {                                                                                                           // 10110
      this.positionMenuOnLeftOfCursor(cursor, menu, true);                                                             // 10111
    }                                                                                                                  // 10112
  };                                                                                                                   // 10113
                                                                                                                       // 10114
  ContextMenu.prototype.setMenuPosition = function (event, menu) {                                                     // 10115
    // for ie8                                                                                                         // 10116
    // http://msdn.microsoft.com/en-us/library/ie/ff974655(v=vs.85).aspx                                               // 10117
    var scrollTop = Handsontable.Dom.getWindowScrollTop();                                                             // 10118
    var scrollLeft = Handsontable.Dom.getWindowScrollLeft();                                                           // 10119
    var cursorY = event.pageY || (event.clientY + scrollTop);                                                          // 10120
    var cursorX = event.pageX || (event.clientX + scrollLeft);                                                         // 10121
                                                                                                                       // 10122
    var cursor = {                                                                                                     // 10123
      top: cursorY,                                                                                                    // 10124
      topRelative: cursorY - scrollTop,                                                                                // 10125
      left: cursorX,                                                                                                   // 10126
      leftRelative: cursorX - scrollLeft,                                                                              // 10127
      scrollTop: scrollTop,                                                                                            // 10128
      scrollLeft: scrollLeft,                                                                                          // 10129
      cellHeight: event.target.clientHeight,                                                                           // 10130
      cellWidth: event.target.clientWidth                                                                              // 10131
    };                                                                                                                 // 10132
                                                                                                                       // 10133
    if (this.menuFitsBelowCursor(cursor, menu, document.body.clientHeight)) {                                          // 10134
      this.positionMenuBelowCursor(cursor, menu);                                                                      // 10135
    } else {                                                                                                           // 10136
      if (this.menuFitsAboveCursor(cursor, menu)) {                                                                    // 10137
        this.positionMenuAboveCursor(cursor, menu);                                                                    // 10138
      } else {                                                                                                         // 10139
        this.positionMenuBelowCursor(cursor, menu);                                                                    // 10140
      }                                                                                                                // 10141
    }                                                                                                                  // 10142
                                                                                                                       // 10143
    if (this.menuFitsOnRightOfCursor(cursor, menu, document.body.clientWidth)) {                                       // 10144
      this.positionMenuOnRightOfCursor(cursor, menu);                                                                  // 10145
    } else {                                                                                                           // 10146
      this.positionMenuOnLeftOfCursor(cursor, menu);                                                                   // 10147
    }                                                                                                                  // 10148
                                                                                                                       // 10149
  };                                                                                                                   // 10150
                                                                                                                       // 10151
  ContextMenu.prototype.menuFitsAboveCursor = function (cursor, menu) {                                                // 10152
    return cursor.topRelative >= menu.offsetHeight;                                                                    // 10153
  };                                                                                                                   // 10154
                                                                                                                       // 10155
  ContextMenu.prototype.menuFitsBelowCursor = function (cursor, menu, viewportHeight) {                                // 10156
    return cursor.topRelative + menu.offsetHeight <= viewportHeight;                                                   // 10157
  };                                                                                                                   // 10158
                                                                                                                       // 10159
  ContextMenu.prototype.menuFitsOnRightOfCursor = function (cursor, menu, viewportHeight) {                            // 10160
    return cursor.leftRelative + menu.offsetWidth <= viewportHeight;                                                   // 10161
  };                                                                                                                   // 10162
                                                                                                                       // 10163
  ContextMenu.prototype.positionMenuBelowCursor = function (cursor, menu) {                                            // 10164
                                                                                                                       // 10165
    menu.style.top = cursor.top + 'px';                                                                                // 10166
  };                                                                                                                   // 10167
                                                                                                                       // 10168
  ContextMenu.prototype.positionMenuAboveCursor = function (cursor, menu, subMenu) {                                   // 10169
    if (subMenu) {                                                                                                     // 10170
      menu.style.top = (cursor.top + cursor.cellHeight - menu.offsetHeight) + 'px';                                    // 10171
    } else {                                                                                                           // 10172
      menu.style.top = (cursor.top - menu.offsetHeight) + 'px';                                                        // 10173
    }                                                                                                                  // 10174
  };                                                                                                                   // 10175
                                                                                                                       // 10176
  ContextMenu.prototype.positionMenuOnRightOfCursor = function (cursor, menu, subMenu) {                               // 10177
    if (subMenu) {                                                                                                     // 10178
      menu.style.left = 1 + cursor.left + cursor.cellWidth + 'px';                                                     // 10179
    } else {                                                                                                           // 10180
      menu.style.left = 1 + cursor.left + 'px';                                                                        // 10181
    }                                                                                                                  // 10182
  };                                                                                                                   // 10183
                                                                                                                       // 10184
  ContextMenu.prototype.positionMenuOnLeftOfCursor = function (cursor, menu, subMenu) {                                // 10185
    if (subMenu) {                                                                                                     // 10186
      menu.style.left = (cursor.left - menu.offsetWidth) + 'px';                                                       // 10187
    } else {                                                                                                           // 10188
      menu.style.left = (cursor.left - menu.offsetWidth) + 'px';                                                       // 10189
    }                                                                                                                  // 10190
  };                                                                                                                   // 10191
                                                                                                                       // 10192
  ContextMenu.utils = {};                                                                                              // 10193
                                                                                                                       // 10194
  ContextMenu.utils.normalizeSelection = function (selRange) {                                                         // 10195
    return {                                                                                                           // 10196
      start: selRange.getTopLeftCorner(),                                                                              // 10197
      end: selRange.getBottomRightCorner()                                                                             // 10198
    }                                                                                                                  // 10199
  };                                                                                                                   // 10200
                                                                                                                       // 10201
  ContextMenu.utils.isSeparator = function (cell) {                                                                    // 10202
    return Handsontable.Dom.hasClass(cell, 'htSeparator');                                                             // 10203
  };                                                                                                                   // 10204
                                                                                                                       // 10205
  ContextMenu.utils.hasSubMenu = function (cell) {                                                                     // 10206
    return Handsontable.Dom.hasClass(cell, 'htSubmenu');                                                               // 10207
  };                                                                                                                   // 10208
                                                                                                                       // 10209
  ContextMenu.utils.isDisabled = function (cell) {                                                                     // 10210
    return Handsontable.Dom.hasClass(cell, 'htDisabled');                                                              // 10211
  };                                                                                                                   // 10212
                                                                                                                       // 10213
  ContextMenu.prototype.enable = function () {                                                                         // 10214
    if (!this.enabled) {                                                                                               // 10215
      this.enabled = true;                                                                                             // 10216
      this.bindMouseEvents();                                                                                          // 10217
    }                                                                                                                  // 10218
  };                                                                                                                   // 10219
                                                                                                                       // 10220
  ContextMenu.prototype.disable = function () {                                                                        // 10221
    if (this.enabled) {                                                                                                // 10222
      this.enabled = false;                                                                                            // 10223
      this.closeAll();                                                                                                 // 10224
      this.unbindMouseEvents();                                                                                        // 10225
      this.unbindTableEvents();                                                                                        // 10226
    }                                                                                                                  // 10227
  };                                                                                                                   // 10228
                                                                                                                       // 10229
  ContextMenu.prototype.destroy = function () {                                                                        // 10230
    this.closeAll();                                                                                                   // 10231
    while (this.menus.length > 0) {                                                                                    // 10232
      var menu = this.menus.pop();                                                                                     // 10233
      this.triggerRows.pop();                                                                                          // 10234
      if (menu) {                                                                                                      // 10235
        this.close(menu);                                                                                              // 10236
        if (!this.isMenuEnabledByOtherHotInstance()) {                                                                 // 10237
          this.removeMenu(menu);                                                                                       // 10238
        }                                                                                                              // 10239
      }                                                                                                                // 10240
    }                                                                                                                  // 10241
                                                                                                                       // 10242
    this.unbindMouseEvents();                                                                                          // 10243
    this.unbindTableEvents();                                                                                          // 10244
                                                                                                                       // 10245
  };                                                                                                                   // 10246
                                                                                                                       // 10247
  ContextMenu.prototype.isMenuEnabledByOtherHotInstance = function () {                                                // 10248
    var hotContainers = document.querySelectorAll('.handsontable');                                                    // 10249
    var menuEnabled = false;                                                                                           // 10250
                                                                                                                       // 10251
    for (var i = 0, len = hotContainers.length; i < len; i++) {                                                        // 10252
      var instance = this.htMenus[hotContainers[i].id];                                                                // 10253
      if (instance && instance.getSettings().contextMenu) {                                                            // 10254
        menuEnabled = true;                                                                                            // 10255
        break;                                                                                                         // 10256
      }                                                                                                                // 10257
    }                                                                                                                  // 10258
                                                                                                                       // 10259
    return menuEnabled;                                                                                                // 10260
  };                                                                                                                   // 10261
                                                                                                                       // 10262
  ContextMenu.prototype.removeMenu = function (menu) {                                                                 // 10263
    if (menu.parentNode) {                                                                                             // 10264
      this.menu.parentNode.removeChild(menu);                                                                          // 10265
    }                                                                                                                  // 10266
  };                                                                                                                   // 10267
                                                                                                                       // 10268
  ContextMenu.SEPARATOR = {name: "---------"};                                                                         // 10269
                                                                                                                       // 10270
  function updateHeight() {                                                                                            // 10271
                                                                                                                       // 10272
    if (this.rootElement.className.indexOf('htContextMenu')) {                                                         // 10273
      return;                                                                                                          // 10274
    }                                                                                                                  // 10275
                                                                                                                       // 10276
    var realSeparatorHeight = 0,                                                                                       // 10277
      realEntrySize = 0,                                                                                               // 10278
      dataSize = this.getSettings().data.length;                                                                       // 10279
                                                                                                                       // 10280
    for (var i = 0; i < dataSize; i++) {                                                                               // 10281
      if (this.getSettings().data[i].name == ContextMenu.SEPARATOR.name) {                                             // 10282
        realSeparatorHeight += 2;                                                                                      // 10283
      } else {                                                                                                         // 10284
        realEntrySize += 26;                                                                                           // 10285
      }                                                                                                                // 10286
    }                                                                                                                  // 10287
                                                                                                                       // 10288
    this.view.wt.wtScrollbars.vertical.fixedContainer.style.height = realEntrySize + realSeparatorHeight + "px";       // 10289
  }                                                                                                                    // 10290
                                                                                                                       // 10291
  function init() {                                                                                                    // 10292
    var instance = this;                                                                                               // 10293
    var contextMenuSetting = instance.getSettings().contextMenu;                                                       // 10294
    var customOptions = Handsontable.helper.isObject(contextMenuSetting) ? contextMenuSetting : {};                    // 10295
                                                                                                                       // 10296
    if (contextMenuSetting) {                                                                                          // 10297
      if (!instance.contextMenu) {                                                                                     // 10298
        instance.contextMenu = new ContextMenu(instance, customOptions);                                               // 10299
      }                                                                                                                // 10300
      instance.contextMenu.enable();                                                                                   // 10301
    } else if (instance.contextMenu) {                                                                                 // 10302
      instance.contextMenu.destroy();                                                                                  // 10303
      delete instance.contextMenu;                                                                                     // 10304
    }                                                                                                                  // 10305
  }                                                                                                                    // 10306
                                                                                                                       // 10307
  Handsontable.hooks.add('afterInit', init);                                                                           // 10308
  Handsontable.hooks.add('afterUpdateSettings', init);                                                                 // 10309
  Handsontable.hooks.add('afterInit', updateHeight);                                                                   // 10310
                                                                                                                       // 10311
  Handsontable.PluginHooks.register('afterContextMenuDefaultOptions');                                                 // 10312
                                                                                                                       // 10313
  Handsontable.ContextMenu = ContextMenu;                                                                              // 10314
                                                                                                                       // 10315
})(Handsontable);                                                                                                      // 10316
                                                                                                                       // 10317
function Comments(instance) {                                                                                          // 10318
                                                                                                                       // 10319
  var eventManager = Handsontable.eventManager(instance),                                                              // 10320
    doSaveComment = function (row, col, comment, instance) {                                                           // 10321
      instance.setCellMeta(row, col, 'comment', comment);                                                              // 10322
      instance.render();                                                                                               // 10323
    },                                                                                                                 // 10324
    saveComment = function (range, comment, instance) {                                                                // 10325
     //LIKE IN EXCEL (TOP LEFT CELL)                                                                                   // 10326
      doSaveComment(range.from.row, range.from.col, comment, instance);                                                // 10327
    },                                                                                                                 // 10328
    hideCommentTextArea = function () {                                                                                // 10329
      var commentBox = createCommentBox();                                                                             // 10330
      commentBox.style.display = 'none';                                                                               // 10331
      commentBox.value = '';                                                                                           // 10332
    },                                                                                                                 // 10333
    bindMouseEvent = function (range) {                                                                                // 10334
                                                                                                                       // 10335
      function commentsListener(event) {                                                                               // 10336
        eventManager.removeEventListener(document, 'mouseover');                                                       // 10337
        if (!(event.target.className == 'htCommentTextArea' || event.target.innerHTML.indexOf('Comment') != -1)) {     // 10338
          var value = document.querySelector('.htCommentTextArea').value;                                              // 10339
          if (value.trim().length > 1) {                                                                               // 10340
            saveComment(range, value, instance);                                                                       // 10341
          }                                                                                                            // 10342
          unBindMouseEvent();                                                                                          // 10343
          hideCommentTextArea();                                                                                       // 10344
        }                                                                                                              // 10345
      }                                                                                                                // 10346
                                                                                                                       // 10347
      eventManager.addEventListener(document, 'mousedown',Handsontable.helper.proxy(commentsListener));                // 10348
    },                                                                                                                 // 10349
    unBindMouseEvent = function () {                                                                                   // 10350
      eventManager.removeEventListener(document, 'mousedown');                                                         // 10351
      eventManager.addEventListener(document, 'mousedown', Handsontable.helper.proxy(commentsMouseOverListener));      // 10352
    },                                                                                                                 // 10353
    placeCommentBox = function (range, commentBox) {                                                                   // 10354
      var TD = instance.view.wt.wtTable.getCell(range.from),                                                           // 10355
        offset = Handsontable.Dom.offset(TD),                                                                          // 10356
        lastColWidth = instance.getColWidth(range.from.col);                                                           // 10357
                                                                                                                       // 10358
      commentBox.style.position = 'absolute';                                                                          // 10359
      commentBox.style.left = offset.left + lastColWidth + 'px';                                                       // 10360
      commentBox.style.top = offset.top + 'px';                                                                        // 10361
      commentBox.style.zIndex = 2;                                                                                     // 10362
      bindMouseEvent(range, commentBox);                                                                               // 10363
    },                                                                                                                 // 10364
    createCommentBox = function (value) {                                                                              // 10365
      var comments = document.querySelector('.htComments');                                                            // 10366
                                                                                                                       // 10367
      if (!comments) {                                                                                                 // 10368
        comments = document.createElement('DIV');                                                                      // 10369
                                                                                                                       // 10370
        var textArea = document.createElement('TEXTAREA');                                                             // 10371
        Handsontable.Dom.addClass(textArea, 'htCommentTextArea');                                                      // 10372
        comments.appendChild(textArea);                                                                                // 10373
                                                                                                                       // 10374
        Handsontable.Dom.addClass(comments, 'htComments');                                                             // 10375
        document.getElementsByTagName('body')[0].appendChild(comments);                                                // 10376
      }                                                                                                                // 10377
                                                                                                                       // 10378
      value = value ||'';                                                                                              // 10379
                                                                                                                       // 10380
      document.querySelector('.htCommentTextArea').value = value;                                                      // 10381
                                                                                                                       // 10382
      //var tA = document.getElementsByClassName('htCommentTextArea')[0];                                              // 10383
      //tA.focus();                                                                                                    // 10384
      return comments;                                                                                                 // 10385
    },                                                                                                                 // 10386
    commentsMouseOverListener = function (event) {                                                                     // 10387
        if(event.target.className.indexOf('htCommentCell') != -1) {                                                    // 10388
            unBindMouseEvent();                                                                                        // 10389
            var coords = instance.view.wt.wtTable.getCoords(event.target);                                             // 10390
            var range = {                                                                                              // 10391
                from: new WalkontableCellCoords(coords.row, coords.col)                                                // 10392
            };                                                                                                         // 10393
                                                                                                                       // 10394
            Handsontable.Comments.showComment(range);                                                                  // 10395
        }                                                                                                              // 10396
        else if(event.target.className !='htCommentTextArea'){                                                         // 10397
            hideCommentTextArea();                                                                                     // 10398
        }                                                                                                              // 10399
    };                                                                                                                 // 10400
                                                                                                                       // 10401
  return {                                                                                                             // 10402
    init: function () {                                                                                                // 10403
      eventManager.addEventListener(document, 'mouseover', Handsontable.helper.proxy(commentsMouseOverListener));      // 10404
    },                                                                                                                 // 10405
    showComment: function (range) {                                                                                    // 10406
      var meta = instance.getCellMeta(range.from.row, range.from.col),                                                 // 10407
        value = '';                                                                                                    // 10408
                                                                                                                       // 10409
      if (meta.comment) {                                                                                              // 10410
        value = meta.comment;                                                                                          // 10411
      }                                                                                                                // 10412
      var commentBox = createCommentBox(value);                                                                        // 10413
      commentBox.style.display = 'block';                                                                              // 10414
      placeCommentBox(range, commentBox);                                                                              // 10415
    },                                                                                                                 // 10416
    removeComment: function (row, col) {                                                                               // 10417
      instance.removeCellMeta(row, col, 'comment');                                                                    // 10418
      instance.render();                                                                                               // 10419
    },                                                                                                                 // 10420
    checkSelectionCommentsConsistency : function () {                                                                  // 10421
      var hasComment = false;                                                                                          // 10422
      // IN EXCEL THERE IS COMMENT ONLY FOR TOP LEFT CELL IN SELECTION                                                 // 10423
      var cell = instance.getSelectedRange().from;                                                                     // 10424
                                                                                                                       // 10425
      if(instance.getCellMeta(cell.row,cell.col).comment) {                                                            // 10426
        hasComment = true;                                                                                             // 10427
      }                                                                                                                // 10428
      return hasComment;                                                                                               // 10429
    }                                                                                                                  // 10430
                                                                                                                       // 10431
                                                                                                                       // 10432
  };                                                                                                                   // 10433
}                                                                                                                      // 10434
                                                                                                                       // 10435
                                                                                                                       // 10436
var init = function () {                                                                                               // 10437
    var instance = this;                                                                                               // 10438
    var commentsSetting = instance.getSettings().comments;                                                             // 10439
                                                                                                                       // 10440
    if (commentsSetting) {                                                                                             // 10441
      Handsontable.Comments = new Comments(instance);                                                                  // 10442
        Handsontable.Comments.init();                                                                                  // 10443
    }                                                                                                                  // 10444
  },                                                                                                                   // 10445
  afterRenderer = function (TD, row, col, prop, value, cellProperties) {                                               // 10446
    if(cellProperties.comment) {                                                                                       // 10447
      Handsontable.Dom.addClass(TD, cellProperties.commentedCellClassName);                                            // 10448
    }                                                                                                                  // 10449
  },                                                                                                                   // 10450
  addCommentsActionsToContextMenu = function (defaultOptions) {                                                        // 10451
    var instance = this;                                                                                               // 10452
    if (!instance.getSettings().comments) {                                                                            // 10453
      return;                                                                                                          // 10454
    }                                                                                                                  // 10455
                                                                                                                       // 10456
    defaultOptions.items.push(Handsontable.ContextMenu.SEPARATOR);                                                     // 10457
                                                                                                                       // 10458
    defaultOptions.items.push({                                                                                        // 10459
      key: 'commentsAddEdit',                                                                                          // 10460
      name: function () {                                                                                              // 10461
        var hasComment = Handsontable.Comments.checkSelectionCommentsConsistency();                                    // 10462
        return hasComment ? "Edit Comment" : "Add Comment";                                                            // 10463
                                                                                                                       // 10464
      },                                                                                                               // 10465
      callback: function (key, selection, event) {                                                                     // 10466
          Handsontable.Comments.showComment(this.getSelectedRange());                                                  // 10467
      },                                                                                                               // 10468
      disabled: function () {                                                                                          // 10469
        return false;                                                                                                  // 10470
      }                                                                                                                // 10471
    });                                                                                                                // 10472
                                                                                                                       // 10473
    defaultOptions.items.push({                                                                                        // 10474
      key: 'commentsRemove',                                                                                           // 10475
      name: function () {                                                                                              // 10476
        return "Delete Comment"                                                                                        // 10477
      },                                                                                                               // 10478
      callback: function (key, selection, event) {                                                                     // 10479
        Handsontable.Comments.removeComment(selection.start.row, selection.start.col);                                 // 10480
      },                                                                                                               // 10481
      disabled: function () {                                                                                          // 10482
        var hasComment = Handsontable.Comments.checkSelectionCommentsConsistency();                                    // 10483
        return !hasComment;                                                                                            // 10484
      }                                                                                                                // 10485
    });                                                                                                                // 10486
  };                                                                                                                   // 10487
                                                                                                                       // 10488
Handsontable.hooks.add('beforeInit', init);                                                                            // 10489
Handsontable.hooks.add('afterContextMenuDefaultOptions', addCommentsActionsToContextMenu);                             // 10490
Handsontable.hooks.add('afterRenderer', afterRenderer);                                                                // 10491
                                                                                                                       // 10492
                                                                                                                       // 10493
/**                                                                                                                    // 10494
 * HandsontableManualColumnMove                                                                                        // 10495
 *                                                                                                                     // 10496
 * Has 2 UI components:                                                                                                // 10497
 * - handle - the draggable element that sets the desired position of the column                                       // 10498
 * - guide - the helper guide that shows the desired position as a vertical guide                                      // 10499
 *                                                                                                                     // 10500
 * Warning! Whenever you make a change in this file, make an analogous change in manualRowMove.js                      // 10501
 * @constructor                                                                                                        // 10502
 */                                                                                                                    // 10503
(function (Handsontable) {                                                                                             // 10504
function HandsontableManualColumnMove() {                                                                              // 10505
  var startCol                                                                                                         // 10506
    , endCol                                                                                                           // 10507
    , startX                                                                                                           // 10508
    , startOffset                                                                                                      // 10509
    , currentCol                                                                                                       // 10510
    , instance                                                                                                         // 10511
    , currentTH                                                                                                        // 10512
    , handle = document.createElement('DIV')                                                                           // 10513
    , guide = document.createElement('DIV')                                                                            // 10514
    , eventManager = Handsontable.eventManager(this);                                                                  // 10515
                                                                                                                       // 10516
  handle.className = 'manualColumnMover';                                                                              // 10517
  guide.className = 'manualColumnMoverGuide';                                                                          // 10518
                                                                                                                       // 10519
  var saveManualColumnPositions = function () {                                                                        // 10520
    var instance = this;                                                                                               // 10521
    Handsontable.hooks.run(instance, 'persistentStateSave', 'manualColumnPositions', instance.manualColumnPositions);  // 10522
  };                                                                                                                   // 10523
                                                                                                                       // 10524
  var loadManualColumnPositions = function () {                                                                        // 10525
    var instance = this;                                                                                               // 10526
    var storedState = {};                                                                                              // 10527
    Handsontable.hooks.run(instance, 'persistentStateLoad', 'manualColumnPositions', storedState);                     // 10528
    return storedState.value;                                                                                          // 10529
  };                                                                                                                   // 10530
                                                                                                                       // 10531
  function setupHandlePosition(TH) {                                                                                   // 10532
    instance = this;                                                                                                   // 10533
    currentTH = TH;                                                                                                    // 10534
                                                                                                                       // 10535
    var col = this.view.wt.wtTable.getCoords(TH).col; //getCoords returns WalkontableCellCoords                        // 10536
    if (col >= 0) { //if not row header                                                                                // 10537
      currentCol = col;                                                                                                // 10538
      var box = currentTH.getBoundingClientRect();                                                                     // 10539
      startOffset = box.left;                                                                                          // 10540
      handle.style.top = box.top + 'px';                                                                               // 10541
      handle.style.left = startOffset + 'px';                                                                          // 10542
      instance.rootElement.appendChild(handle);                                                                        // 10543
    }                                                                                                                  // 10544
  }                                                                                                                    // 10545
                                                                                                                       // 10546
  function refreshHandlePosition(TH, delta) {                                                                          // 10547
    var box = TH.getBoundingClientRect();                                                                              // 10548
    var handleWidth = 6;                                                                                               // 10549
    if (delta > 0) {                                                                                                   // 10550
      handle.style.left = (box.left + box.width - handleWidth) + 'px';                                                 // 10551
    }                                                                                                                  // 10552
    else {                                                                                                             // 10553
      handle.style.left = box.left + 'px';                                                                             // 10554
    }                                                                                                                  // 10555
  }                                                                                                                    // 10556
                                                                                                                       // 10557
  function setupGuidePosition() {                                                                                      // 10558
    var instance = this;                                                                                               // 10559
    Handsontable.Dom.addClass(handle, 'active');                                                                       // 10560
    Handsontable.Dom.addClass(guide, 'active');                                                                        // 10561
    var box = currentTH.getBoundingClientRect();                                                                       // 10562
    guide.style.width = box.width + 'px';                                                                              // 10563
    guide.style.height = instance.view.maximumVisibleElementHeight(0) + 'px';                                          // 10564
    guide.style.top = handle.style.top;                                                                                // 10565
    guide.style.left = startOffset + 'px';                                                                             // 10566
    instance.rootElement.appendChild(guide);                                                                           // 10567
  }                                                                                                                    // 10568
                                                                                                                       // 10569
  function refreshGuidePosition(diff) {                                                                                // 10570
    guide.style.left = startOffset + diff + 'px';                                                                      // 10571
  }                                                                                                                    // 10572
                                                                                                                       // 10573
  function hideHandleAndGuide() {                                                                                      // 10574
    Handsontable.Dom.removeClass(handle, 'active');                                                                    // 10575
    Handsontable.Dom.removeClass(guide, 'active');                                                                     // 10576
  }                                                                                                                    // 10577
                                                                                                                       // 10578
  var checkColumnHeader = function (element) {                                                                         // 10579
    if (element.tagName != 'BODY') {                                                                                   // 10580
      if (element.parentNode.tagName == 'THEAD') {                                                                     // 10581
        return true;                                                                                                   // 10582
      } else {                                                                                                         // 10583
        element = element.parentNode;                                                                                  // 10584
        return checkColumnHeader(element);                                                                             // 10585
      }                                                                                                                // 10586
    }                                                                                                                  // 10587
    return false;                                                                                                      // 10588
  };                                                                                                                   // 10589
                                                                                                                       // 10590
  var getTHFromTargetElement = function (element) {                                                                    // 10591
    if (element.tagName != 'TABLE') {                                                                                  // 10592
      if (element.tagName == 'TH') {                                                                                   // 10593
        return element;                                                                                                // 10594
      } else {                                                                                                         // 10595
        return getTHFromTargetElement(element.parentNode);                                                             // 10596
      }                                                                                                                // 10597
    }                                                                                                                  // 10598
    return null;                                                                                                       // 10599
  };                                                                                                                   // 10600
                                                                                                                       // 10601
  var bindEvents = function () {                                                                                       // 10602
                                                                                                                       // 10603
    var instance = this;                                                                                               // 10604
    var pressed;                                                                                                       // 10605
                                                                                                                       // 10606
    eventManager.addEventListener(instance.rootElement,'mouseover',function (e) {                                      // 10607
        if (checkColumnHeader(e.target)){                                                                              // 10608
          var th = getTHFromTargetElement(e.target);                                                                   // 10609
          if (th) {                                                                                                    // 10610
            if (pressed) {                                                                                             // 10611
              var col = instance.view.wt.wtTable.getCoords(th).col;                                                    // 10612
            if(col >= 0) { //not TH above row header                                                                   // 10613
                endCol = col;                                                                                          // 10614
                refreshHandlePosition(e.target, endCol - startCol);                                                    // 10615
            }                                                                                                          // 10616
            }                                                                                                          // 10617
            else {                                                                                                     // 10618
              setupHandlePosition.call(instance, th);                                                                  // 10619
            }                                                                                                          // 10620
          }                                                                                                            // 10621
        }                                                                                                              // 10622
    });                                                                                                                // 10623
                                                                                                                       // 10624
    eventManager.addEventListener(instance.rootElement,'mousedown', function (e) {                                     // 10625
      if (Handsontable.Dom.hasClass(e.target, 'manualColumnMover')){                                                   // 10626
        startX = Handsontable.helper.pageX(e);                                                                         // 10627
        setupGuidePosition.call(instance);                                                                             // 10628
        pressed = instance;                                                                                            // 10629
                                                                                                                       // 10630
        startCol = currentCol;                                                                                         // 10631
        endCol = currentCol;                                                                                           // 10632
      }                                                                                                                // 10633
    });                                                                                                                // 10634
                                                                                                                       // 10635
    eventManager.addEventListener(window,'mousemove',function (e) {                                                    // 10636
      if (pressed) {                                                                                                   // 10637
        refreshGuidePosition(Handsontable.helper.pageX(e) - startX);                                                   // 10638
      }                                                                                                                // 10639
    });                                                                                                                // 10640
                                                                                                                       // 10641
                                                                                                                       // 10642
    eventManager.addEventListener(window,'mouseup',function (e) {                                                      // 10643
      if (pressed) {                                                                                                   // 10644
        hideHandleAndGuide();                                                                                          // 10645
        pressed = false;                                                                                               // 10646
                                                                                                                       // 10647
        createPositionData(instance.manualColumnPositions, instance.countCols());                                      // 10648
        instance.manualColumnPositions.splice(endCol, 0, instance.manualColumnPositions.splice(startCol, 1)[0]);       // 10649
                                                                                                                       // 10650
        instance.forceFullRender = true;                                                                               // 10651
        instance.view.render(); //updates all                                                                          // 10652
                                                                                                                       // 10653
        saveManualColumnPositions.call(instance);                                                                      // 10654
                                                                                                                       // 10655
        Handsontable.hooks.run(instance, 'afterColumnMove', startCol, endCol);                                         // 10656
                                                                                                                       // 10657
        setupHandlePosition.call(instance, currentTH);                                                                 // 10658
      }                                                                                                                // 10659
    });                                                                                                                // 10660
                                                                                                                       // 10661
    instance.addHook('afterDestroy', unbindEvents);                                                                    // 10662
  };                                                                                                                   // 10663
                                                                                                                       // 10664
  var unbindEvents = function(){                                                                                       // 10665
    eventManager.clear();                                                                                              // 10666
  };                                                                                                                   // 10667
                                                                                                                       // 10668
  var createPositionData = function (positionArr, len) {                                                               // 10669
    if (positionArr.length < len) {                                                                                    // 10670
      for (var i = positionArr.length; i < len; i++) {                                                                 // 10671
        positionArr[i] = i;                                                                                            // 10672
      }                                                                                                                // 10673
    }                                                                                                                  // 10674
  };                                                                                                                   // 10675
                                                                                                                       // 10676
  this.beforeInit = function () {                                                                                      // 10677
    this.manualColumnPositions = [];                                                                                   // 10678
  };                                                                                                                   // 10679
                                                                                                                       // 10680
  this.init = function (source) {                                                                                      // 10681
    var instance = this;                                                                                               // 10682
                                                                                                                       // 10683
    var manualColMoveEnabled = !!(this.getSettings().manualColumnMove);                                                // 10684
                                                                                                                       // 10685
    if (manualColMoveEnabled) {                                                                                        // 10686
      var initialManualColumnPositions = this.getSettings().manualColumnMove;                                          // 10687
                                                                                                                       // 10688
      var loadedManualColumnPositions = loadManualColumnPositions.call(instance);                                      // 10689
                                                                                                                       // 10690
      if (typeof loadedManualColumnPositions != 'undefined') {                                                         // 10691
        this.manualColumnPositions = loadedManualColumnPositions;                                                      // 10692
      } else if (Array.isArray(initialManualColumnPositions)) {                                                        // 10693
        this.manualColumnPositions = initialManualColumnPositions;                                                     // 10694
      } else {                                                                                                         // 10695
        this.manualColumnPositions = [];                                                                               // 10696
      }                                                                                                                // 10697
                                                                                                                       // 10698
      if (source == 'afterInit') {                                                                                     // 10699
        bindEvents.call(this);                                                                                         // 10700
        if (this.manualColumnPositions.length > 0) {                                                                   // 10701
          this.forceFullRender = true;                                                                                 // 10702
          this.render();                                                                                               // 10703
        }                                                                                                              // 10704
      }                                                                                                                // 10705
                                                                                                                       // 10706
    } else {                                                                                                           // 10707
      unbindEvents.call(this);                                                                                         // 10708
      this.manualColumnPositions = [];                                                                                 // 10709
    }                                                                                                                  // 10710
  };                                                                                                                   // 10711
                                                                                                                       // 10712
  this.modifyCol = function (col) {                                                                                    // 10713
    //TODO test performance: http://jsperf.com/object-wrapper-vs-primitive/2                                           // 10714
    if (this.getSettings().manualColumnMove) {                                                                         // 10715
      if (typeof this.manualColumnPositions[col] === 'undefined') {                                                    // 10716
        createPositionData(this.manualColumnPositions, col + 1);                                                       // 10717
      }                                                                                                                // 10718
      return this.manualColumnPositions[col];                                                                          // 10719
    }                                                                                                                  // 10720
    return col;                                                                                                        // 10721
  };                                                                                                                   // 10722
                                                                                                                       // 10723
  // need to reconstruct manualcolpositions after removing columns                                                     // 10724
  this.afterRemoveCol = function (index, amount) {                                                                     // 10725
    if (!this.getSettings().manualColumnMove) return;                                                                  // 10726
                                                                                                                       // 10727
    var rmindx,                                                                                                        // 10728
        colpos = this.manualColumnPositions;                                                                           // 10729
                                                                                                                       // 10730
      // We have removed columns, we also need to remove the indicies from manual column array                         // 10731
      rmindx = colpos.splice(index, amount);                                                                           // 10732
                                                                                                                       // 10733
      // We need to remap manualColPositions so it remains constant linear from 0->ncols                               // 10734
      colpos = colpos.map(function (colpos) {                                                                          // 10735
        var i, newpos = colpos;                                                                                        // 10736
                                                                                                                       // 10737
       for (i = 0; i < rmindx.length; i++) {                                                                           // 10738
         if (colpos > rmindx[i]) newpos--;                                                                             // 10739
       }                                                                                                               // 10740
                                                                                                                       // 10741
       return newpos;                                                                                                  // 10742
     });                                                                                                               // 10743
                                                                                                                       // 10744
      this.manualColumnPositions = colpos;                                                                             // 10745
    };                                                                                                                 // 10746
                                                                                                                       // 10747
    // need to reconstruct manualcolpositions after adding columns                                                     // 10748
    this.afterCreateCol = function (index, amount) {                                                                   // 10749
      if (!this.getSettings().manualColumnMove) return;                                                                // 10750
                                                                                                                       // 10751
      var colpos = this.manualColumnPositions;                                                                         // 10752
      if (!colpos.length) return;                                                                                      // 10753
                                                                                                                       // 10754
      var addindx = [];                                                                                                // 10755
      for (var i = 0; i < amount; i++) {                                                                               // 10756
        addindx.push(index + i);                                                                                       // 10757
      }                                                                                                                // 10758
                                                                                                                       // 10759
      if (index >= colpos.length) {                                                                                    // 10760
        colpos.concat(addindx);                                                                                        // 10761
      }                                                                                                                // 10762
      else {                                                                                                           // 10763
        // We need to remap manualColPositions so it remains constant linear from 0->ncols                             // 10764
        colpos = colpos.map(function (colpos) {                                                                        // 10765
          return (colpos >= index) ? (colpos + amount) : colpos;                                                       // 10766
        });                                                                                                            // 10767
                                                                                                                       // 10768
        // We have added columns, we also need to add new indicies to manualcolumn position array                      // 10769
        colpos.splice.apply(colpos, [index, 0].concat(addindx));                                                       // 10770
      }                                                                                                                // 10771
                                                                                                                       // 10772
      this.manualColumnPositions = colpos;                                                                             // 10773
    };                                                                                                                 // 10774
}                                                                                                                      // 10775
var htManualColumnMove = new HandsontableManualColumnMove();                                                           // 10776
                                                                                                                       // 10777
Handsontable.hooks.add('beforeInit', htManualColumnMove.beforeInit);                                                   // 10778
Handsontable.hooks.add('afterInit', function () {                                                                      // 10779
  htManualColumnMove.init.call(this, 'afterInit')                                                                      // 10780
});                                                                                                                    // 10781
                                                                                                                       // 10782
Handsontable.hooks.add('afterUpdateSettings', function () {                                                            // 10783
  htManualColumnMove.init.call(this, 'afterUpdateSettings')                                                            // 10784
});                                                                                                                    // 10785
Handsontable.hooks.add('modifyCol', htManualColumnMove.modifyCol);                                                     // 10786
                                                                                                                       // 10787
Handsontable.hooks.add('afterRemoveCol', htManualColumnMove.afterRemoveCol);                                           // 10788
Handsontable.hooks.add('afterCreateCol', htManualColumnMove.afterCreateCol);                                           // 10789
Handsontable.hooks.register('afterColumnMove');                                                                        // 10790
                                                                                                                       // 10791
})(Handsontable);                                                                                                      // 10792
                                                                                                                       // 10793
                                                                                                                       // 10794
                                                                                                                       // 10795
/**                                                                                                                    // 10796
 * HandsontableManualColumnResize                                                                                      // 10797
 *                                                                                                                     // 10798
 * Has 2 UI components:                                                                                                // 10799
 * - handle - the draggable element that sets the desired width of the column                                          // 10800
 * - guide - the helper guide that shows the desired width as a vertical guide                                         // 10801
 *                                                                                                                     // 10802
 * Warning! Whenever you make a change in this file, make an analogous change in manualRowResize.js                    // 10803
 * @constructor                                                                                                        // 10804
 */                                                                                                                    // 10805
(function (Handsontable) {                                                                                             // 10806
function HandsontableManualColumnResize() {                                                                            // 10807
  var currentTH                                                                                                        // 10808
    , currentCol                                                                                                       // 10809
    , currentWidth                                                                                                     // 10810
    , instance                                                                                                         // 10811
    , newSize                                                                                                          // 10812
    , startX                                                                                                           // 10813
    , startWidth                                                                                                       // 10814
    , startOffset                                                                                                      // 10815
    , handle = document.createElement('DIV')                                                                           // 10816
    , guide = document.createElement('DIV')                                                                            // 10817
    , eventManager = Handsontable.eventManager(this);                                                                  // 10818
                                                                                                                       // 10819
                                                                                                                       // 10820
                                                                                                                       // 10821
  handle.className = 'manualColumnResizer';                                                                            // 10822
  guide.className = 'manualColumnResizerGuide';                                                                        // 10823
                                                                                                                       // 10824
  var saveManualColumnWidths = function () {                                                                           // 10825
    var instance = this;                                                                                               // 10826
    Handsontable.hooks.run(instance, 'persistentStateSave', 'manualColumnWidths', instance.manualColumnWidths);        // 10827
  };                                                                                                                   // 10828
                                                                                                                       // 10829
  var loadManualColumnWidths = function () {                                                                           // 10830
    var instance = this;                                                                                               // 10831
    var storedState = {};                                                                                              // 10832
    Handsontable.hooks.run(instance, 'persistentStateLoad', 'manualColumnWidths', storedState);                        // 10833
    return storedState.value;                                                                                          // 10834
  };                                                                                                                   // 10835
                                                                                                                       // 10836
  function setupHandlePosition(TH) {                                                                                   // 10837
    instance = this;                                                                                                   // 10838
    currentTH = TH;                                                                                                    // 10839
                                                                                                                       // 10840
    var col = this.view.wt.wtTable.getCoords(TH).col; //getCoords returns WalkontableCellCoords                        // 10841
    if (col >= 0) { //if not row header                                                                                // 10842
      currentCol = col;                                                                                                // 10843
      var box = currentTH.getBoundingClientRect();                                                                     // 10844
      startOffset = box.left - 6;                                                                                      // 10845
      startWidth = parseInt(box.width, 10);                                                                            // 10846
      handle.style.top = box.top + 'px';                                                                               // 10847
      handle.style.left = startOffset + startWidth + 'px';                                                             // 10848
      instance.rootElement.appendChild(handle);                                                                        // 10849
    }                                                                                                                  // 10850
  }                                                                                                                    // 10851
                                                                                                                       // 10852
  function refreshHandlePosition() {                                                                                   // 10853
    handle.style.left = startOffset + currentWidth + 'px';                                                             // 10854
  }                                                                                                                    // 10855
                                                                                                                       // 10856
  function setupGuidePosition() {                                                                                      // 10857
    var instance = this;                                                                                               // 10858
    Handsontable.Dom.addClass(handle, 'active');                                                                       // 10859
    Handsontable.Dom.addClass(guide, 'active');                                                                        // 10860
    guide.style.top = handle.style.top;                                                                                // 10861
    guide.style.left = handle.style.left;                                                                              // 10862
    guide.style.height = instance.view.maximumVisibleElementHeight(0) + 'px';                                          // 10863
    instance.rootElement.appendChild(guide);                                                                           // 10864
  }                                                                                                                    // 10865
                                                                                                                       // 10866
  function refreshGuidePosition() {                                                                                    // 10867
    guide.style.left = handle.style.left;                                                                              // 10868
  }                                                                                                                    // 10869
                                                                                                                       // 10870
  function hideHandleAndGuide() {                                                                                      // 10871
    Handsontable.Dom.removeClass(handle, 'active');                                                                    // 10872
    Handsontable.Dom.removeClass(guide, 'active');                                                                     // 10873
  }                                                                                                                    // 10874
                                                                                                                       // 10875
  var checkColumnHeader = function (element) {                                                                         // 10876
    if (element.tagName != 'BODY') {                                                                                   // 10877
      if (element.parentNode.tagName == 'THEAD') {                                                                     // 10878
        return true;                                                                                                   // 10879
      } else {                                                                                                         // 10880
        element = element.parentNode;                                                                                  // 10881
        return checkColumnHeader(element);                                                                             // 10882
      }                                                                                                                // 10883
    }                                                                                                                  // 10884
    return false;                                                                                                      // 10885
  };                                                                                                                   // 10886
                                                                                                                       // 10887
  var getTHFromTargetElement = function (element) {                                                                    // 10888
    if (element.tagName != 'TABLE') {                                                                                  // 10889
      if (element.tagName == 'TH') {                                                                                   // 10890
        return element;                                                                                                // 10891
      } else {                                                                                                         // 10892
        return getTHFromTargetElement(element.parentNode);                                                             // 10893
      }                                                                                                                // 10894
    }                                                                                                                  // 10895
    return null;                                                                                                       // 10896
  };                                                                                                                   // 10897
                                                                                                                       // 10898
  var bindEvents = function () {                                                                                       // 10899
    var instance = this;                                                                                               // 10900
    var pressed;                                                                                                       // 10901
    var dblclick = 0;                                                                                                  // 10902
    var autoresizeTimeout = null;                                                                                      // 10903
                                                                                                                       // 10904
    eventManager.addEventListener(instance.rootElement, 'mouseover',function (e) {                                     // 10905
      if (checkColumnHeader(e.target)) {                                                                               // 10906
        var th = getTHFromTargetElement(e.target);                                                                     // 10907
        if (th) {                                                                                                      // 10908
          if (!pressed) {                                                                                              // 10909
            setupHandlePosition.call(instance, th);                                                                    // 10910
          }                                                                                                            // 10911
        }                                                                                                              // 10912
      }                                                                                                                // 10913
    });                                                                                                                // 10914
                                                                                                                       // 10915
    eventManager.addEventListener(instance.rootElement,'mousedown', function (e) {                                     // 10916
      if (Handsontable.Dom.hasClass(e.target, 'manualColumnResizer')) {                                                // 10917
        setupGuidePosition.call(instance);                                                                             // 10918
        pressed = instance;                                                                                            // 10919
                                                                                                                       // 10920
        if (autoresizeTimeout == null) {                                                                               // 10921
          autoresizeTimeout = setTimeout(function () {                                                                 // 10922
            if (dblclick >= 2) {                                                                                       // 10923
              newSize = instance.determineColumnWidth.call(instance, currentCol);                                      // 10924
              setManualSize(currentCol, newSize);                                                                      // 10925
              instance.forceFullRender = true;                                                                         // 10926
              instance.view.render(); //updates all                                                                    // 10927
              Handsontable.hooks.run(instance, 'afterColumnResize', currentCol, newSize);                              // 10928
            }                                                                                                          // 10929
            dblclick = 0;                                                                                              // 10930
            autoresizeTimeout = null;                                                                                  // 10931
          }, 500);                                                                                                     // 10932
          instance._registerTimeout(autoresizeTimeout);                                                                // 10933
        }                                                                                                              // 10934
        dblclick++;                                                                                                    // 10935
                                                                                                                       // 10936
        startX = Handsontable.helper.pageX(e);                                                                         // 10937
        newSize = startWidth;                                                                                          // 10938
      }                                                                                                                // 10939
    });                                                                                                                // 10940
                                                                                                                       // 10941
    eventManager.addEventListener(window,'mousemove', function (e) {                                                   // 10942
      if (pressed) {                                                                                                   // 10943
        currentWidth = startWidth + (Handsontable.helper.pageX(e) - startX);                                           // 10944
        newSize = setManualSize(currentCol, currentWidth); //save col width                                            // 10945
        refreshHandlePosition();                                                                                       // 10946
        refreshGuidePosition();                                                                                        // 10947
      }                                                                                                                // 10948
    });                                                                                                                // 10949
                                                                                                                       // 10950
    eventManager.addEventListener(window, 'mouseup', function (){                                                      // 10951
      if (pressed) {                                                                                                   // 10952
        hideHandleAndGuide();                                                                                          // 10953
        pressed = false;                                                                                               // 10954
                                                                                                                       // 10955
        if(newSize != startWidth){                                                                                     // 10956
          instance.forceFullRender = true;                                                                             // 10957
          instance.view.render(); //updates all                                                                        // 10958
                                                                                                                       // 10959
          saveManualColumnWidths.call(instance);                                                                       // 10960
                                                                                                                       // 10961
          Handsontable.hooks.run(instance, 'afterColumnResize', currentCol, newSize);                                  // 10962
        }                                                                                                              // 10963
                                                                                                                       // 10964
        setupHandlePosition.call(instance, currentTH);                                                                 // 10965
      }                                                                                                                // 10966
    });                                                                                                                // 10967
                                                                                                                       // 10968
    instance.addHook('afterDestroy', unbindEvents);                                                                    // 10969
  };                                                                                                                   // 10970
                                                                                                                       // 10971
  var unbindEvents = function(){                                                                                       // 10972
    eventManager.clear();                                                                                              // 10973
  };                                                                                                                   // 10974
                                                                                                                       // 10975
  this.beforeInit = function () {                                                                                      // 10976
    this.manualColumnWidths = [];                                                                                      // 10977
  };                                                                                                                   // 10978
                                                                                                                       // 10979
  this.init = function (source) {                                                                                      // 10980
    var instance = this;                                                                                               // 10981
    var manualColumnWidthEnabled = !!(this.getSettings().manualColumnResize);                                          // 10982
                                                                                                                       // 10983
    if (manualColumnWidthEnabled) {                                                                                    // 10984
      var initialColumnWidths = this.getSettings().manualColumnResize;                                                 // 10985
                                                                                                                       // 10986
      var loadedManualColumnWidths = loadManualColumnWidths.call(instance);                                            // 10987
                                                                                                                       // 10988
      if (typeof loadedManualColumnWidths != 'undefined') {                                                            // 10989
        this.manualColumnWidths = loadedManualColumnWidths;                                                            // 10990
      } else if (Array.isArray(initialColumnWidths)) {                                                                 // 10991
        this.manualColumnWidths = initialColumnWidths;                                                                 // 10992
      } else {                                                                                                         // 10993
        this.manualColumnWidths = [];                                                                                  // 10994
      }                                                                                                                // 10995
                                                                                                                       // 10996
      if (source == 'afterInit') {                                                                                     // 10997
        bindEvents.call(this);                                                                                         // 10998
        if (this.manualColumnWidths.length > 0) {                                                                      // 10999
          this.forceFullRender = true;                                                                                 // 11000
          this.render();                                                                                               // 11001
        }                                                                                                              // 11002
      }                                                                                                                // 11003
    }                                                                                                                  // 11004
    else {                                                                                                             // 11005
      unbindEvents.call(this);                                                                                         // 11006
      this.manualColumnWidths = [];                                                                                    // 11007
    }                                                                                                                  // 11008
  };                                                                                                                   // 11009
                                                                                                                       // 11010
                                                                                                                       // 11011
  var setManualSize = function (col, width) {                                                                          // 11012
    width = Math.max(width, 20);                                                                                       // 11013
                                                                                                                       // 11014
    /**                                                                                                                // 11015
     *  We need to run col through modifyCol hook, in case the order of displayed columns is different than the order  // 11016
     *  in data source. For instance, this order can be modified by manualColumnMove plugin.                           // 11017
     */                                                                                                                // 11018
    col = Handsontable.hooks.execute(instance, 'modifyCol', col);                                                      // 11019
                                                                                                                       // 11020
    instance.manualColumnWidths[col] = width;                                                                          // 11021
    return width;                                                                                                      // 11022
  };                                                                                                                   // 11023
                                                                                                                       // 11024
  this.modifyColWidth = function (width, col) {                                                                        // 11025
    col = this.runHooksAndReturn('modifyCol', col);                                                                    // 11026
    if (this.getSettings().manualColumnResize && this.manualColumnWidths[col]) {                                       // 11027
      return this.manualColumnWidths[col];                                                                             // 11028
    }                                                                                                                  // 11029
    return width;                                                                                                      // 11030
  };                                                                                                                   // 11031
}                                                                                                                      // 11032
var htManualColumnResize = new HandsontableManualColumnResize();                                                       // 11033
                                                                                                                       // 11034
Handsontable.hooks.add('beforeInit', htManualColumnResize.beforeInit);                                                 // 11035
Handsontable.hooks.add('afterInit', function () {                                                                      // 11036
  htManualColumnResize.init.call(this, 'afterInit')                                                                    // 11037
});                                                                                                                    // 11038
Handsontable.hooks.add('afterUpdateSettings', function () {                                                            // 11039
  htManualColumnResize.init.call(this, 'afterUpdateSettings')                                                          // 11040
});                                                                                                                    // 11041
Handsontable.hooks.add('modifyColWidth', htManualColumnResize.modifyColWidth);                                         // 11042
                                                                                                                       // 11043
Handsontable.hooks.register('afterColumnResize');                                                                      // 11044
                                                                                                                       // 11045
})(Handsontable);                                                                                                      // 11046
                                                                                                                       // 11047
/**                                                                                                                    // 11048
 * HandsontableManualRowResize                                                                                         // 11049
 *                                                                                                                     // 11050
 * Has 2 UI components:                                                                                                // 11051
 * - handle - the draggable element that sets the desired height of the row                                            // 11052
 * - guide - the helper guide that shows the desired height as a horizontal guide                                      // 11053
 *                                                                                                                     // 11054
 * Warning! Whenever you make a change in this file, make an analogous change in manualRowResize.js                    // 11055
 * @constructor                                                                                                        // 11056
 */                                                                                                                    // 11057
(function (Handsontable) {                                                                                             // 11058
  function HandsontableManualRowResize () {                                                                            // 11059
                                                                                                                       // 11060
    var currentTH                                                                                                      // 11061
      , currentRow                                                                                                     // 11062
      , currentHeight                                                                                                  // 11063
      , instance                                                                                                       // 11064
      , newSize                                                                                                        // 11065
      , startY                                                                                                         // 11066
      , startHeight                                                                                                    // 11067
      , startOffset                                                                                                    // 11068
      , handle = document.createElement('DIV')                                                                         // 11069
      , guide = document.createElement('DIV')                                                                          // 11070
      , eventManager = Handsontable.eventManager(this);                                                                // 11071
                                                                                                                       // 11072
    handle.className = 'manualRowResizer';                                                                             // 11073
    guide.className = 'manualRowResizerGuide';                                                                         // 11074
                                                                                                                       // 11075
    var saveManualRowHeights = function () {                                                                           // 11076
      var instance = this;                                                                                             // 11077
      Handsontable.hooks.run(instance, 'persistentStateSave', 'manualRowHeights', instance.manualRowHeights);          // 11078
    };                                                                                                                 // 11079
                                                                                                                       // 11080
    var loadManualRowHeights = function () {                                                                           // 11081
      var instance = this                                                                                              // 11082
        , storedState = {};                                                                                            // 11083
      Handsontable.hooks.run(instance, 'persistentStateLoad', 'manualRowHeights', storedState);                        // 11084
      return storedState.value;                                                                                        // 11085
    };                                                                                                                 // 11086
                                                                                                                       // 11087
    function setupHandlePosition(TH) {                                                                                 // 11088
      instance = this;                                                                                                 // 11089
      currentTH = TH;                                                                                                  // 11090
                                                                                                                       // 11091
      var row = this.view.wt.wtTable.getCoords(TH).row; //getCoords returns WalkontableCellCoords                      // 11092
      if (row >= 0) { //if not col header                                                                              // 11093
        currentRow = row;                                                                                              // 11094
        var box = currentTH.getBoundingClientRect();                                                                   // 11095
        startOffset = box.top - 6;                                                                                     // 11096
        startHeight = parseInt(box.height, 10);                                                                        // 11097
        handle.style.left = box.left + 'px';                                                                           // 11098
        handle.style.top = startOffset + startHeight + 'px';                                                           // 11099
        instance.rootElement.appendChild(handle);                                                                      // 11100
      }                                                                                                                // 11101
    }                                                                                                                  // 11102
                                                                                                                       // 11103
    function refreshHandlePosition() {                                                                                 // 11104
      handle.style.top = startOffset + currentHeight + 'px';                                                           // 11105
    }                                                                                                                  // 11106
                                                                                                                       // 11107
    function setupGuidePosition() {                                                                                    // 11108
      var instance = this;                                                                                             // 11109
      Handsontable.Dom.addClass(handle, 'active');                                                                     // 11110
      Handsontable.Dom.addClass(guide, 'active');                                                                      // 11111
      guide.style.top = handle.style.top;                                                                              // 11112
      guide.style.left = handle.style.left;                                                                            // 11113
      guide.style.width = instance.view.maximumVisibleElementWidth(0) + 'px';                                          // 11114
      instance.rootElement.appendChild(guide);                                                                         // 11115
    }                                                                                                                  // 11116
                                                                                                                       // 11117
    function refreshGuidePosition() {                                                                                  // 11118
      guide.style.top = handle.style.top;                                                                              // 11119
    }                                                                                                                  // 11120
                                                                                                                       // 11121
    function hideHandleAndGuide() {                                                                                    // 11122
      Handsontable.Dom.removeClass(handle, 'active');                                                                  // 11123
      Handsontable.Dom.removeClass(guide, 'active');                                                                   // 11124
    }                                                                                                                  // 11125
                                                                                                                       // 11126
    var checkRowHeader = function (element) {                                                                          // 11127
      if (element.tagName != 'BODY') {                                                                                 // 11128
        if (element.parentNode.tagName == 'TBODY') {                                                                   // 11129
          return true;                                                                                                 // 11130
        } else {                                                                                                       // 11131
          element = element.parentNode;                                                                                // 11132
          return checkRowHeader(element);                                                                              // 11133
        }                                                                                                              // 11134
      }                                                                                                                // 11135
      return false;                                                                                                    // 11136
    };                                                                                                                 // 11137
                                                                                                                       // 11138
    var getTHFromTargetElement = function (element) {                                                                  // 11139
      if (element.tagName != 'TABLE') {                                                                                // 11140
        if (element.tagName == 'TH') {                                                                                 // 11141
          return element;                                                                                              // 11142
        } else {                                                                                                       // 11143
          return getTHFromTargetElement(element.parentNode);                                                           // 11144
        }                                                                                                              // 11145
      }                                                                                                                // 11146
      return null;                                                                                                     // 11147
    };                                                                                                                 // 11148
                                                                                                                       // 11149
    var bindEvents = function () {                                                                                     // 11150
      var instance = this;                                                                                             // 11151
      var pressed;                                                                                                     // 11152
      var dblclick = 0;                                                                                                // 11153
      var autoresizeTimeout = null;                                                                                    // 11154
                                                                                                                       // 11155
      eventManager.addEventListener(instance.rootElement,'mouseover', function (e){                                    // 11156
        if(checkRowHeader(e.target)) {                                                                                 // 11157
          var th = getTHFromTargetElement(e.target)                                                                    // 11158
          if (th) {                                                                                                    // 11159
            if (!pressed) {                                                                                            // 11160
              setupHandlePosition.call(instance, th);                                                                  // 11161
            }                                                                                                          // 11162
          }                                                                                                            // 11163
        }                                                                                                              // 11164
      });                                                                                                              // 11165
                                                                                                                       // 11166
      eventManager.addEventListener(instance.rootElement,'mousedown', function (e) {                                   // 11167
        if (Handsontable.Dom.hasClass(e.target, 'manualRowResizer')) {                                                 // 11168
          setupGuidePosition.call(instance);                                                                           // 11169
          pressed = instance;                                                                                          // 11170
                                                                                                                       // 11171
          if (autoresizeTimeout == null) {                                                                             // 11172
            autoresizeTimeout = setTimeout(function () {                                                               // 11173
              if (dblclick >= 2) {                                                                                     // 11174
                setManualSize(currentRow, null); //double click sets auto row size                                     // 11175
                instance.forceFullRender = true;                                                                       // 11176
                instance.view.render(); //updates all                                                                  // 11177
                Handsontable.hooks.run(instance, 'afterRowResize', currentRow, newSize);                               // 11178
              }                                                                                                        // 11179
              dblclick = 0;                                                                                            // 11180
              autoresizeTimeout = null;                                                                                // 11181
            }, 500);                                                                                                   // 11182
            instance._registerTimeout(autoresizeTimeout);                                                              // 11183
          }                                                                                                            // 11184
          dblclick++;                                                                                                  // 11185
                                                                                                                       // 11186
          startY = Handsontable.helper.pageY(e);                                                                       // 11187
          newSize = startHeight;                                                                                       // 11188
        }                                                                                                              // 11189
      });                                                                                                              // 11190
                                                                                                                       // 11191
      eventManager.addEventListener(window,'mousemove',function (e) {                                                  // 11192
        if (pressed) {                                                                                                 // 11193
          currentHeight = startHeight + (Handsontable.helper.pageY(e) - startY);                                       // 11194
          newSize = setManualSize(currentRow, currentHeight);                                                          // 11195
          refreshHandlePosition();                                                                                     // 11196
          refreshGuidePosition();                                                                                      // 11197
        }                                                                                                              // 11198
      });                                                                                                              // 11199
                                                                                                                       // 11200
      eventManager.addEventListener(window,'mouseup',function (e) {                                                    // 11201
        if (pressed) {                                                                                                 // 11202
          hideHandleAndGuide();                                                                                        // 11203
          pressed = false;                                                                                             // 11204
                                                                                                                       // 11205
          if(newSize != startHeight){                                                                                  // 11206
            instance.forceFullRender = true;                                                                           // 11207
            instance.view.render(); //updates all                                                                      // 11208
                                                                                                                       // 11209
            saveManualRowHeights.call(instance);                                                                       // 11210
                                                                                                                       // 11211
            Handsontable.hooks.run(instance, 'afterRowResize', currentRow, newSize);                                   // 11212
          }                                                                                                            // 11213
                                                                                                                       // 11214
          setupHandlePosition.call(instance, currentTH);                                                               // 11215
        }                                                                                                              // 11216
      });                                                                                                              // 11217
                                                                                                                       // 11218
      instance.addHook('afterDestroy', unbindEvents);                                                                  // 11219
    };                                                                                                                 // 11220
                                                                                                                       // 11221
    var unbindEvents = function(){                                                                                     // 11222
      eventManager.clear();                                                                                            // 11223
    };                                                                                                                 // 11224
                                                                                                                       // 11225
    this.beforeInit = function () {                                                                                    // 11226
      this.manualRowHeights = [];                                                                                      // 11227
    };                                                                                                                 // 11228
                                                                                                                       // 11229
    this.init = function (source) {                                                                                    // 11230
      var instance = this;                                                                                             // 11231
      var manualColumnHeightEnabled = !!(this.getSettings().manualRowResize);                                          // 11232
                                                                                                                       // 11233
      if (manualColumnHeightEnabled) {                                                                                 // 11234
                                                                                                                       // 11235
        var initialRowHeights = this.getSettings().manualRowResize;                                                    // 11236
                                                                                                                       // 11237
        var loadedManualRowHeights = loadManualRowHeights.call(instance);                                              // 11238
                                                                                                                       // 11239
        if (typeof loadedManualRowHeights != 'undefined') {                                                            // 11240
          this.manualRowHeights = loadedManualRowHeights;                                                              // 11241
        } else if (Array.isArray(initialRowHeights)) {                                                                 // 11242
          this.manualRowHeights = initialRowHeights;                                                                   // 11243
        } else {                                                                                                       // 11244
          this.manualRowHeights = [];                                                                                  // 11245
        }                                                                                                              // 11246
                                                                                                                       // 11247
        if (source === 'afterInit') {                                                                                  // 11248
          bindEvents.call(this);                                                                                       // 11249
          if (this.manualRowHeights.length > 0) {                                                                      // 11250
            this.forceFullRender = true;                                                                               // 11251
            this.render();                                                                                             // 11252
          }                                                                                                            // 11253
        }                                                                                                              // 11254
        else {                                                                                                         // 11255
          this.forceFullRender = true;                                                                                 // 11256
          this.render();                                                                                               // 11257
                                                                                                                       // 11258
        }                                                                                                              // 11259
      }                                                                                                                // 11260
      else {                                                                                                           // 11261
        unbindEvents.call(this);                                                                                       // 11262
        this.manualRowHeights = [];                                                                                    // 11263
      }                                                                                                                // 11264
    };                                                                                                                 // 11265
                                                                                                                       // 11266
    var setManualSize = function (row, height) {                                                                       // 11267
      row = Handsontable.hooks.execute(instance, 'modifyRow', row);                                                    // 11268
                                                                                                                       // 11269
      instance.manualRowHeights[row] = height;                                                                         // 11270
      return height;                                                                                                   // 11271
    };                                                                                                                 // 11272
                                                                                                                       // 11273
    this.modifyRowHeight = function (height, row) {                                                                    // 11274
      if (this.getSettings().manualRowResize) {                                                                        // 11275
        row = this.runHooksAndReturn('modifyRow', row);                                                                // 11276
        if (this.manualRowHeights[row] !== void 0) {                                                                   // 11277
          return this.manualRowHeights[row];                                                                           // 11278
        }                                                                                                              // 11279
      }                                                                                                                // 11280
      return height;                                                                                                   // 11281
    };                                                                                                                 // 11282
  }                                                                                                                    // 11283
                                                                                                                       // 11284
  var htManualRowResize = new HandsontableManualRowResize();                                                           // 11285
                                                                                                                       // 11286
  Handsontable.hooks.add('beforeInit', htManualRowResize.beforeInit);                                                  // 11287
  Handsontable.hooks.add('afterInit', function () {                                                                    // 11288
    htManualRowResize.init.call(this, 'afterInit');                                                                    // 11289
  });                                                                                                                  // 11290
                                                                                                                       // 11291
  Handsontable.hooks.add('afterUpdateSettings', function () {                                                          // 11292
    htManualRowResize.init.call(this, 'afterUpdateSettings')                                                           // 11293
  });                                                                                                                  // 11294
                                                                                                                       // 11295
  Handsontable.hooks.add('modifyRowHeight', htManualRowResize.modifyRowHeight);                                        // 11296
                                                                                                                       // 11297
  Handsontable.hooks.register('afterRowResize');                                                                       // 11298
                                                                                                                       // 11299
})(Handsontable);                                                                                                      // 11300
                                                                                                                       // 11301
(function HandsontableObserveChanges() {                                                                               // 11302
                                                                                                                       // 11303
  Handsontable.hooks.add('afterLoadData', init);                                                                       // 11304
  Handsontable.hooks.add('afterUpdateSettings', init);                                                                 // 11305
                                                                                                                       // 11306
  Handsontable.hooks.register('afterChangesObserved');                                                                 // 11307
                                                                                                                       // 11308
  function init() {                                                                                                    // 11309
    var instance = this;                                                                                               // 11310
    var pluginEnabled = instance.getSettings().observeChanges;                                                         // 11311
                                                                                                                       // 11312
    if (pluginEnabled) {                                                                                               // 11313
      if(instance.observer) {                                                                                          // 11314
        destroy.call(instance); //destroy observer for old data object                                                 // 11315
      }                                                                                                                // 11316
      createObserver.call(instance);                                                                                   // 11317
      bindEvents.call(instance);                                                                                       // 11318
                                                                                                                       // 11319
    } else if (!pluginEnabled){                                                                                        // 11320
      destroy.call(instance);                                                                                          // 11321
    }                                                                                                                  // 11322
  }                                                                                                                    // 11323
                                                                                                                       // 11324
  function createObserver(){                                                                                           // 11325
    var instance = this;                                                                                               // 11326
                                                                                                                       // 11327
    instance.observeChangesActive = true;                                                                              // 11328
                                                                                                                       // 11329
    instance.pauseObservingChanges = function(){                                                                       // 11330
      instance.observeChangesActive = false;                                                                           // 11331
    };                                                                                                                 // 11332
                                                                                                                       // 11333
    instance.resumeObservingChanges = function(){                                                                      // 11334
      instance.observeChangesActive = true;                                                                            // 11335
    };                                                                                                                 // 11336
                                                                                                                       // 11337
    instance.observedData = instance.getData();                                                                        // 11338
    instance.observer = jsonpatch.observe(instance.observedData, function (patches) {                                  // 11339
      if(instance.observeChangesActive){                                                                               // 11340
        runHookForOperation.call(instance, patches);                                                                   // 11341
        instance.render();                                                                                             // 11342
      }                                                                                                                // 11343
                                                                                                                       // 11344
      instance.runHooks('afterChangesObserved');                                                                       // 11345
    });                                                                                                                // 11346
  }                                                                                                                    // 11347
                                                                                                                       // 11348
  function runHookForOperation(rawPatches){                                                                            // 11349
    var instance = this;                                                                                               // 11350
    var patches = cleanPatches(rawPatches);                                                                            // 11351
                                                                                                                       // 11352
    for(var i = 0, len = patches.length; i < len; i++){                                                                // 11353
      var patch = patches[i];                                                                                          // 11354
      var parsedPath = parsePath(patch.path);                                                                          // 11355
                                                                                                                       // 11356
                                                                                                                       // 11357
      switch(patch.op){                                                                                                // 11358
        case 'add':                                                                                                    // 11359
          if(isNaN(parsedPath.col)){                                                                                   // 11360
            instance.runHooks('afterCreateRow', parsedPath.row);                                                       // 11361
          } else {                                                                                                     // 11362
            instance.runHooks('afterCreateCol', parsedPath.col);                                                       // 11363
          }                                                                                                            // 11364
          break;                                                                                                       // 11365
                                                                                                                       // 11366
        case 'remove':                                                                                                 // 11367
          if(isNaN(parsedPath.col)){                                                                                   // 11368
            instance.runHooks('afterRemoveRow', parsedPath.row, 1);                                                    // 11369
          } else {                                                                                                     // 11370
            instance.runHooks('afterRemoveCol', parsedPath.col, 1);                                                    // 11371
          }                                                                                                            // 11372
          break;                                                                                                       // 11373
                                                                                                                       // 11374
        case 'replace':                                                                                                // 11375
          instance.runHooks('afterChange', [parsedPath.row, parsedPath.col, null, patch.value], 'external');           // 11376
          break;                                                                                                       // 11377
      }                                                                                                                // 11378
    }                                                                                                                  // 11379
                                                                                                                       // 11380
    function cleanPatches(rawPatches){                                                                                 // 11381
      var patches;                                                                                                     // 11382
                                                                                                                       // 11383
      patches = removeLengthRelatedPatches(rawPatches);                                                                // 11384
      patches = removeMultipleAddOrRemoveColPatches(patches);                                                          // 11385
                                                                                                                       // 11386
      return patches;                                                                                                  // 11387
    }                                                                                                                  // 11388
                                                                                                                       // 11389
    /**                                                                                                                // 11390
     * Removing or adding column will produce one patch for each table row.                                            // 11391
     * This function leaves only one patch for each column add/remove operation                                        // 11392
     */                                                                                                                // 11393
    function removeMultipleAddOrRemoveColPatches(rawPatches){                                                          // 11394
      var newOrRemovedColumns = [];                                                                                    // 11395
                                                                                                                       // 11396
      return rawPatches.filter(function(patch){                                                                        // 11397
        var parsedPath = parsePath(patch.path);                                                                        // 11398
                                                                                                                       // 11399
        if(['add', 'remove'].indexOf(patch.op) != -1 && !isNaN(parsedPath.col)){                                       // 11400
          if(newOrRemovedColumns.indexOf(parsedPath.col) != -1){                                                       // 11401
            return false;                                                                                              // 11402
          } else {                                                                                                     // 11403
            newOrRemovedColumns.push(parsedPath.col);                                                                  // 11404
          }                                                                                                            // 11405
        }                                                                                                              // 11406
                                                                                                                       // 11407
        return true;                                                                                                   // 11408
      });                                                                                                              // 11409
                                                                                                                       // 11410
    }                                                                                                                  // 11411
                                                                                                                       // 11412
    /**                                                                                                                // 11413
     * If observeChanges uses native Object.observe method, then it produces patches for length property.              // 11414
     * This function removes them.                                                                                     // 11415
     */                                                                                                                // 11416
    function removeLengthRelatedPatches(rawPatches){                                                                   // 11417
      return rawPatches.filter(function(patch){                                                                        // 11418
        return !/[/]length/ig.test(patch.path);                                                                        // 11419
      })                                                                                                               // 11420
    }                                                                                                                  // 11421
                                                                                                                       // 11422
    function parsePath(path){                                                                                          // 11423
      var match = path.match(/^\/(\d+)\/?(.*)?$/);                                                                     // 11424
      return {                                                                                                         // 11425
        row: parseInt(match[1], 10),                                                                                   // 11426
        col: /^\d*$/.test(match[2]) ? parseInt(match[2], 10) : match[2]                                                // 11427
      }                                                                                                                // 11428
    }                                                                                                                  // 11429
  }                                                                                                                    // 11430
                                                                                                                       // 11431
  function destroy(){                                                                                                  // 11432
    var instance = this;                                                                                               // 11433
                                                                                                                       // 11434
    if (instance.observer){                                                                                            // 11435
      destroyObserver.call(instance);                                                                                  // 11436
      unbindEvents.call(instance);                                                                                     // 11437
    }                                                                                                                  // 11438
  }                                                                                                                    // 11439
                                                                                                                       // 11440
  function destroyObserver(){                                                                                          // 11441
    var instance = this;                                                                                               // 11442
                                                                                                                       // 11443
    jsonpatch.unobserve(instance.observedData, instance.observer);                                                     // 11444
    delete instance.observeChangesActive;                                                                              // 11445
    delete instance.pauseObservingChanges;                                                                             // 11446
    delete instance.resumeObservingChanges;                                                                            // 11447
  }                                                                                                                    // 11448
                                                                                                                       // 11449
  function bindEvents(){                                                                                               // 11450
    var instance = this;                                                                                               // 11451
    instance.addHook('afterDestroy', destroy);                                                                         // 11452
                                                                                                                       // 11453
    instance.addHook('afterCreateRow', afterTableAlter);                                                               // 11454
    instance.addHook('afterRemoveRow', afterTableAlter);                                                               // 11455
                                                                                                                       // 11456
    instance.addHook('afterCreateCol', afterTableAlter);                                                               // 11457
    instance.addHook('afterRemoveCol', afterTableAlter);                                                               // 11458
                                                                                                                       // 11459
    instance.addHook('afterChange', function(changes, source){                                                         // 11460
      if(source != 'loadData'){                                                                                        // 11461
        afterTableAlter.call(this);                                                                                    // 11462
      }                                                                                                                // 11463
    });                                                                                                                // 11464
  }                                                                                                                    // 11465
                                                                                                                       // 11466
  function unbindEvents(){                                                                                             // 11467
    var instance = this;                                                                                               // 11468
    instance.removeHook('afterDestroy', destroy);                                                                      // 11469
                                                                                                                       // 11470
    instance.removeHook('afterCreateRow', afterTableAlter);                                                            // 11471
    instance.removeHook('afterRemoveRow', afterTableAlter);                                                            // 11472
                                                                                                                       // 11473
    instance.removeHook('afterCreateCol', afterTableAlter);                                                            // 11474
    instance.removeHook('afterRemoveCol', afterTableAlter);                                                            // 11475
                                                                                                                       // 11476
    instance.removeHook('afterChange', afterTableAlter);                                                               // 11477
  }                                                                                                                    // 11478
                                                                                                                       // 11479
  function afterTableAlter(){                                                                                          // 11480
    var instance = this;                                                                                               // 11481
                                                                                                                       // 11482
    instance.pauseObservingChanges();                                                                                  // 11483
                                                                                                                       // 11484
    instance.addHookOnce('afterChangesObserved', function(){                                                           // 11485
      instance.resumeObservingChanges();                                                                               // 11486
    });                                                                                                                // 11487
                                                                                                                       // 11488
  }                                                                                                                    // 11489
})();                                                                                                                  // 11490
                                                                                                                       // 11491
                                                                                                                       // 11492
/*                                                                                                                     // 11493
 *                                                                                                                     // 11494
 * Plugin enables saving table state                                                                                   // 11495
 *                                                                                                                     // 11496
 * */                                                                                                                  // 11497
                                                                                                                       // 11498
                                                                                                                       // 11499
function Storage(prefix) {                                                                                             // 11500
                                                                                                                       // 11501
  var savedKeys;                                                                                                       // 11502
                                                                                                                       // 11503
  var saveSavedKeys = function () {                                                                                    // 11504
    window.localStorage[prefix + '__' + 'persistentStateKeys'] = JSON.stringify(savedKeys);                            // 11505
  };                                                                                                                   // 11506
                                                                                                                       // 11507
  var loadSavedKeys = function () {                                                                                    // 11508
    var keysJSON = window.localStorage[prefix + '__' + 'persistentStateKeys'];                                         // 11509
    var keys = typeof keysJSON == 'string' ? JSON.parse(keysJSON) : void 0;                                            // 11510
    savedKeys = keys ? keys : [];                                                                                      // 11511
  };                                                                                                                   // 11512
                                                                                                                       // 11513
  var clearSavedKeys = function () {                                                                                   // 11514
    savedKeys = [];                                                                                                    // 11515
    saveSavedKeys();                                                                                                   // 11516
  };                                                                                                                   // 11517
                                                                                                                       // 11518
  loadSavedKeys();                                                                                                     // 11519
                                                                                                                       // 11520
  this.saveValue = function (key, value) {                                                                             // 11521
    window.localStorage[prefix + '_' + key] = JSON.stringify(value);                                                   // 11522
    if (savedKeys.indexOf(key) == -1) {                                                                                // 11523
      savedKeys.push(key);                                                                                             // 11524
      saveSavedKeys();                                                                                                 // 11525
    }                                                                                                                  // 11526
                                                                                                                       // 11527
  };                                                                                                                   // 11528
                                                                                                                       // 11529
  this.loadValue = function (key, defaultValue) {                                                                      // 11530
                                                                                                                       // 11531
    key = typeof key != 'undefined' ? key : defaultValue;                                                              // 11532
                                                                                                                       // 11533
    var value = window.localStorage[prefix + '_' + key];                                                               // 11534
                                                                                                                       // 11535
    return typeof value == "undefined" ? void 0 : JSON.parse(value);                                                   // 11536
                                                                                                                       // 11537
  };                                                                                                                   // 11538
                                                                                                                       // 11539
  this.reset = function (key) {                                                                                        // 11540
    window.localStorage.removeItem(prefix + '_' + key);                                                                // 11541
  };                                                                                                                   // 11542
                                                                                                                       // 11543
  this.resetAll = function () {                                                                                        // 11544
    for (var index = 0; index < savedKeys.length; index++) {                                                           // 11545
      window.localStorage.removeItem(prefix + '_' + savedKeys[index]);                                                 // 11546
    }                                                                                                                  // 11547
                                                                                                                       // 11548
    clearSavedKeys();                                                                                                  // 11549
  };                                                                                                                   // 11550
                                                                                                                       // 11551
}                                                                                                                      // 11552
                                                                                                                       // 11553
                                                                                                                       // 11554
(function (StorageClass) {                                                                                             // 11555
  function HandsontablePersistentState() {                                                                             // 11556
    var plugin = this;                                                                                                 // 11557
                                                                                                                       // 11558
                                                                                                                       // 11559
    this.init = function () {                                                                                          // 11560
      var instance = this,                                                                                             // 11561
        pluginSettings = instance.getSettings()['persistentState'];                                                    // 11562
                                                                                                                       // 11563
      plugin.enabled = !!(pluginSettings);                                                                             // 11564
                                                                                                                       // 11565
      if (!plugin.enabled) {                                                                                           // 11566
        removeHooks.call(instance);                                                                                    // 11567
        return;                                                                                                        // 11568
      }                                                                                                                // 11569
                                                                                                                       // 11570
      if (!instance.storage) {                                                                                         // 11571
        instance.storage = new StorageClass(instance.rootElement.id);                                                  // 11572
      }                                                                                                                // 11573
                                                                                                                       // 11574
      instance.resetState = plugin.resetValue;                                                                         // 11575
                                                                                                                       // 11576
      addHooks.call(instance);                                                                                         // 11577
                                                                                                                       // 11578
    };                                                                                                                 // 11579
                                                                                                                       // 11580
    this.saveValue = function (key, value) {                                                                           // 11581
      var instance = this;                                                                                             // 11582
                                                                                                                       // 11583
      instance.storage.saveValue(key, value);                                                                          // 11584
    };                                                                                                                 // 11585
                                                                                                                       // 11586
    this.loadValue = function (key, saveTo) {                                                                          // 11587
      var instance = this;                                                                                             // 11588
                                                                                                                       // 11589
      saveTo.value = instance.storage.loadValue(key);                                                                  // 11590
    };                                                                                                                 // 11591
                                                                                                                       // 11592
    this.resetValue = function (key) {                                                                                 // 11593
      var instance = this;                                                                                             // 11594
                                                                                                                       // 11595
      if (typeof  key != 'undefined') {                                                                                // 11596
        instance.storage.reset(key);                                                                                   // 11597
      } else {                                                                                                         // 11598
        instance.storage.resetAll();                                                                                   // 11599
      }                                                                                                                // 11600
                                                                                                                       // 11601
    };                                                                                                                 // 11602
                                                                                                                       // 11603
    var hooks = {                                                                                                      // 11604
      'persistentStateSave': plugin.saveValue,                                                                         // 11605
      'persistentStateLoad': plugin.loadValue,                                                                         // 11606
      'persistentStateReset': plugin.resetValue                                                                        // 11607
    };                                                                                                                 // 11608
                                                                                                                       // 11609
    for (var hookName in hooks) {                                                                                      // 11610
      if (hooks.hasOwnProperty(hookName)) {                                                                            // 11611
        Handsontable.hooks.register(hookName);                                                                         // 11612
      }                                                                                                                // 11613
    }                                                                                                                  // 11614
                                                                                                                       // 11615
    function addHooks() {                                                                                              // 11616
      var instance = this;                                                                                             // 11617
                                                                                                                       // 11618
      for (var hookName in hooks) {                                                                                    // 11619
        if (hooks.hasOwnProperty(hookName)) {                                                                          // 11620
          instance.addHook(hookName, hooks[hookName]);                                                                 // 11621
        }                                                                                                              // 11622
      }                                                                                                                // 11623
    }                                                                                                                  // 11624
                                                                                                                       // 11625
    function removeHooks() {                                                                                           // 11626
      var instance = this;                                                                                             // 11627
                                                                                                                       // 11628
      for (var hookName in hooks) {                                                                                    // 11629
        if (hooks.hasOwnProperty(hookName)) {                                                                          // 11630
          instance.removeHook(hookName, hooks[hookName]);                                                              // 11631
        }                                                                                                              // 11632
      }                                                                                                                // 11633
    }                                                                                                                  // 11634
  }                                                                                                                    // 11635
                                                                                                                       // 11636
  var htPersistentState = new HandsontablePersistentState();                                                           // 11637
  Handsontable.hooks.add('beforeInit', htPersistentState.init);                                                        // 11638
  Handsontable.hooks.add('afterUpdateSettings', htPersistentState.init);                                               // 11639
})(Storage);                                                                                                           // 11640
                                                                                                                       // 11641
/**                                                                                                                    // 11642
 * Handsontable UndoRedo class                                                                                         // 11643
 */                                                                                                                    // 11644
(function(Handsontable){                                                                                               // 11645
  Handsontable.UndoRedo = function (instance) {                                                                        // 11646
    var plugin = this;                                                                                                 // 11647
    this.instance = instance;                                                                                          // 11648
    this.doneActions = [];                                                                                             // 11649
    this.undoneActions = [];                                                                                           // 11650
    this.ignoreNewActions = false;                                                                                     // 11651
    instance.addHook("afterChange", function (changes, origin) {                                                       // 11652
      if(changes){                                                                                                     // 11653
        var action = new Handsontable.UndoRedo.ChangeAction(changes);                                                  // 11654
        plugin.done(action);                                                                                           // 11655
      }                                                                                                                // 11656
    });                                                                                                                // 11657
                                                                                                                       // 11658
    instance.addHook("afterCreateRow", function (index, amount, createdAutomatically) {                                // 11659
                                                                                                                       // 11660
      if (createdAutomatically) {                                                                                      // 11661
        return;                                                                                                        // 11662
      }                                                                                                                // 11663
                                                                                                                       // 11664
      var action = new Handsontable.UndoRedo.CreateRowAction(index, amount);                                           // 11665
      plugin.done(action);                                                                                             // 11666
    });                                                                                                                // 11667
                                                                                                                       // 11668
    instance.addHook("beforeRemoveRow", function (index, amount) {                                                     // 11669
      var originalData = plugin.instance.getData();                                                                    // 11670
      index = ( originalData.length + index ) % originalData.length;                                                   // 11671
      var removedData = originalData.slice(index, index + amount);                                                     // 11672
      var action = new Handsontable.UndoRedo.RemoveRowAction(index, removedData);                                      // 11673
      plugin.done(action);                                                                                             // 11674
    });                                                                                                                // 11675
                                                                                                                       // 11676
    instance.addHook("afterCreateCol", function (index, amount, createdAutomatically) {                                // 11677
                                                                                                                       // 11678
      if (createdAutomatically) {                                                                                      // 11679
        return;                                                                                                        // 11680
      }                                                                                                                // 11681
                                                                                                                       // 11682
      var action = new Handsontable.UndoRedo.CreateColumnAction(index, amount);                                        // 11683
      plugin.done(action);                                                                                             // 11684
    });                                                                                                                // 11685
                                                                                                                       // 11686
    instance.addHook("beforeRemoveCol", function (index, amount) {                                                     // 11687
      var originalData = plugin.instance.getData();                                                                    // 11688
      index = ( plugin.instance.countCols() + index ) % plugin.instance.countCols();                                   // 11689
      var removedData = [];                                                                                            // 11690
                                                                                                                       // 11691
      for (var i = 0, len = originalData.length; i < len; i++) {                                                       // 11692
        removedData[i] = originalData[i].slice(index, index + amount);                                                 // 11693
      }                                                                                                                // 11694
                                                                                                                       // 11695
      var headers;                                                                                                     // 11696
      if(Array.isArray(instance.getSettings().colHeaders)){                                                            // 11697
        headers = instance.getSettings().colHeaders.slice(index, index + removedData.length);                          // 11698
      }                                                                                                                // 11699
                                                                                                                       // 11700
      var action = new Handsontable.UndoRedo.RemoveColumnAction(index, removedData, headers);                          // 11701
      plugin.done(action);                                                                                             // 11702
    });                                                                                                                // 11703
  };                                                                                                                   // 11704
                                                                                                                       // 11705
  Handsontable.UndoRedo.prototype.done = function (action) {                                                           // 11706
    if (!this.ignoreNewActions) {                                                                                      // 11707
      this.doneActions.push(action);                                                                                   // 11708
      this.undoneActions.length = 0;                                                                                   // 11709
    }                                                                                                                  // 11710
  };                                                                                                                   // 11711
                                                                                                                       // 11712
  /**                                                                                                                  // 11713
   * Undo operation from current revision                                                                              // 11714
   */                                                                                                                  // 11715
  Handsontable.UndoRedo.prototype.undo = function () {                                                                 // 11716
    if (this.isUndoAvailable()) {                                                                                      // 11717
      var action = this.doneActions.pop();                                                                             // 11718
                                                                                                                       // 11719
      this.ignoreNewActions = true;                                                                                    // 11720
      var that = this;                                                                                                 // 11721
      action.undo(this.instance, function () {                                                                         // 11722
        that.ignoreNewActions = false;                                                                                 // 11723
        that.undoneActions.push(action);                                                                               // 11724
      });                                                                                                              // 11725
                                                                                                                       // 11726
                                                                                                                       // 11727
                                                                                                                       // 11728
    }                                                                                                                  // 11729
  };                                                                                                                   // 11730
                                                                                                                       // 11731
  /**                                                                                                                  // 11732
   * Redo operation from current revision                                                                              // 11733
   */                                                                                                                  // 11734
  Handsontable.UndoRedo.prototype.redo = function () {                                                                 // 11735
    if (this.isRedoAvailable()) {                                                                                      // 11736
      var action = this.undoneActions.pop();                                                                           // 11737
                                                                                                                       // 11738
      this.ignoreNewActions = true;                                                                                    // 11739
      var that = this;                                                                                                 // 11740
      action.redo(this.instance, function () {                                                                         // 11741
        that.ignoreNewActions = false;                                                                                 // 11742
        that.doneActions.push(action);                                                                                 // 11743
      });                                                                                                              // 11744
                                                                                                                       // 11745
                                                                                                                       // 11746
                                                                                                                       // 11747
    }                                                                                                                  // 11748
  };                                                                                                                   // 11749
                                                                                                                       // 11750
  /**                                                                                                                  // 11751
   * Returns true if undo point is available                                                                           // 11752
   * @return {Boolean}                                                                                                 // 11753
   */                                                                                                                  // 11754
  Handsontable.UndoRedo.prototype.isUndoAvailable = function () {                                                      // 11755
    return this.doneActions.length > 0;                                                                                // 11756
  };                                                                                                                   // 11757
                                                                                                                       // 11758
  /**                                                                                                                  // 11759
   * Returns true if redo point is available                                                                           // 11760
   * @return {Boolean}                                                                                                 // 11761
   */                                                                                                                  // 11762
  Handsontable.UndoRedo.prototype.isRedoAvailable = function () {                                                      // 11763
    return this.undoneActions.length > 0;                                                                              // 11764
  };                                                                                                                   // 11765
                                                                                                                       // 11766
  /**                                                                                                                  // 11767
   * Clears undo history                                                                                               // 11768
   */                                                                                                                  // 11769
  Handsontable.UndoRedo.prototype.clear = function () {                                                                // 11770
    this.doneActions.length = 0;                                                                                       // 11771
    this.undoneActions.length = 0;                                                                                     // 11772
  };                                                                                                                   // 11773
                                                                                                                       // 11774
  Handsontable.UndoRedo.Action = function () {                                                                         // 11775
  };                                                                                                                   // 11776
  Handsontable.UndoRedo.Action.prototype.undo = function () {                                                          // 11777
  };                                                                                                                   // 11778
  Handsontable.UndoRedo.Action.prototype.redo = function () {                                                          // 11779
  };                                                                                                                   // 11780
                                                                                                                       // 11781
  Handsontable.UndoRedo.ChangeAction = function (changes) {                                                            // 11782
    this.changes = changes;                                                                                            // 11783
  };                                                                                                                   // 11784
  Handsontable.helper.inherit(Handsontable.UndoRedo.ChangeAction, Handsontable.UndoRedo.Action);                       // 11785
  Handsontable.UndoRedo.ChangeAction.prototype.undo = function (instance, undoneCallback) {                            // 11786
    var data = Handsontable.helper.deepClone(this.changes),                                                            // 11787
        emptyRowsAtTheEnd = instance.countEmptyRows(true),                                                             // 11788
        emptyColsAtTheEnd = instance.countEmptyCols(true);                                                             // 11789
                                                                                                                       // 11790
    for (var i = 0, len = data.length; i < len; i++) {                                                                 // 11791
      data[i].splice(3, 1);                                                                                            // 11792
    }                                                                                                                  // 11793
                                                                                                                       // 11794
    instance.addHookOnce('afterChange', undoneCallback);                                                               // 11795
                                                                                                                       // 11796
    instance.setDataAtRowProp(data, null, null, 'undo');                                                               // 11797
                                                                                                                       // 11798
    for (var i = 0, len = data.length; i < len; i++) {                                                                 // 11799
     if(instance.getSettings().minSpareRows &&                                                                         // 11800
      data[i][0] + 1 + instance.getSettings().minSpareRows === instance.countRows()                                    // 11801
      && emptyRowsAtTheEnd == instance.getSettings().minSpareRows) {                                                   // 11802
        instance.alter('remove_row', parseInt(data[i][0]+1,10), instance.getSettings().minSpareRows);                  // 11803
                                                                                                                       // 11804
        instance.undoRedo.doneActions.pop();                                                                           // 11805
                                                                                                                       // 11806
      }                                                                                                                // 11807
                                                                                                                       // 11808
      if (instance.getSettings().minSpareCols &&                                                                       // 11809
      data[i][1] + 1 + instance.getSettings().minSpareCols === instance.countCols()                                    // 11810
      && emptyColsAtTheEnd == instance.getSettings().minSpareCols) {                                                   // 11811
        instance.alter('remove_col', parseInt(data[i][1]+1,10), instance.getSettings().minSpareCols);                  // 11812
                                                                                                                       // 11813
        instance.undoRedo.doneActions.pop();                                                                           // 11814
      }                                                                                                                // 11815
    }                                                                                                                  // 11816
                                                                                                                       // 11817
  };                                                                                                                   // 11818
  Handsontable.UndoRedo.ChangeAction.prototype.redo = function (instance, onFinishCallback) {                          // 11819
    var data = Handsontable.helper.deepClone(this.changes);                                                            // 11820
                                                                                                                       // 11821
    for (var i = 0, len = data.length; i < len; i++) {                                                                 // 11822
      data[i].splice(2, 1);                                                                                            // 11823
    }                                                                                                                  // 11824
                                                                                                                       // 11825
    instance.addHookOnce('afterChange', onFinishCallback);                                                             // 11826
                                                                                                                       // 11827
    instance.setDataAtRowProp(data, null, null, 'redo');                                                               // 11828
                                                                                                                       // 11829
  };                                                                                                                   // 11830
                                                                                                                       // 11831
  Handsontable.UndoRedo.CreateRowAction = function (index, amount) {                                                   // 11832
    this.index = index;                                                                                                // 11833
    this.amount = amount;                                                                                              // 11834
  };                                                                                                                   // 11835
  Handsontable.helper.inherit(Handsontable.UndoRedo.CreateRowAction, Handsontable.UndoRedo.Action);                    // 11836
  Handsontable.UndoRedo.CreateRowAction.prototype.undo = function (instance, undoneCallback) {                         // 11837
    instance.addHookOnce('afterRemoveRow', undoneCallback);                                                            // 11838
    instance.alter('remove_row', this.index, this.amount);                                                             // 11839
  };                                                                                                                   // 11840
  Handsontable.UndoRedo.CreateRowAction.prototype.redo = function (instance, redoneCallback) {                         // 11841
    instance.addHookOnce('afterCreateRow', redoneCallback);                                                            // 11842
    instance.alter('insert_row', this.index + 1, this.amount);                                                         // 11843
  };                                                                                                                   // 11844
                                                                                                                       // 11845
  Handsontable.UndoRedo.RemoveRowAction = function (index, data) {                                                     // 11846
    this.index = index;                                                                                                // 11847
    this.data = data;                                                                                                  // 11848
  };                                                                                                                   // 11849
  Handsontable.helper.inherit(Handsontable.UndoRedo.RemoveRowAction, Handsontable.UndoRedo.Action);                    // 11850
  Handsontable.UndoRedo.RemoveRowAction.prototype.undo = function (instance, undoneCallback) {                         // 11851
    var spliceArgs = [this.index, 0];                                                                                  // 11852
    Array.prototype.push.apply(spliceArgs, this.data);                                                                 // 11853
                                                                                                                       // 11854
    Array.prototype.splice.apply(instance.getData(), spliceArgs);                                                      // 11855
                                                                                                                       // 11856
    instance.addHookOnce('afterRender', undoneCallback);                                                               // 11857
    instance.render();                                                                                                 // 11858
  };                                                                                                                   // 11859
  Handsontable.UndoRedo.RemoveRowAction.prototype.redo = function (instance, redoneCallback) {                         // 11860
    instance.addHookOnce('afterRemoveRow', redoneCallback);                                                            // 11861
    instance.alter('remove_row', this.index, this.data.length);                                                        // 11862
  };                                                                                                                   // 11863
                                                                                                                       // 11864
  Handsontable.UndoRedo.CreateColumnAction = function (index, amount) {                                                // 11865
    this.index = index;                                                                                                // 11866
    this.amount = amount;                                                                                              // 11867
  };                                                                                                                   // 11868
  Handsontable.helper.inherit(Handsontable.UndoRedo.CreateColumnAction, Handsontable.UndoRedo.Action);                 // 11869
  Handsontable.UndoRedo.CreateColumnAction.prototype.undo = function (instance, undoneCallback) {                      // 11870
    instance.addHookOnce('afterRemoveCol', undoneCallback);                                                            // 11871
    instance.alter('remove_col', this.index, this.amount);                                                             // 11872
  };                                                                                                                   // 11873
  Handsontable.UndoRedo.CreateColumnAction.prototype.redo = function (instance, redoneCallback) {                      // 11874
    instance.addHookOnce('afterCreateCol', redoneCallback);                                                            // 11875
    instance.alter('insert_col', this.index + 1, this.amount);                                                         // 11876
  };                                                                                                                   // 11877
                                                                                                                       // 11878
  Handsontable.UndoRedo.RemoveColumnAction = function (index, data, headers) {                                         // 11879
    this.index = index;                                                                                                // 11880
    this.data = data;                                                                                                  // 11881
    this.amount = this.data[0].length;                                                                                 // 11882
    this.headers = headers;                                                                                            // 11883
  };                                                                                                                   // 11884
  Handsontable.helper.inherit(Handsontable.UndoRedo.RemoveColumnAction, Handsontable.UndoRedo.Action);                 // 11885
  Handsontable.UndoRedo.RemoveColumnAction.prototype.undo = function (instance, undoneCallback) {                      // 11886
    var row, spliceArgs;                                                                                               // 11887
    for (var i = 0, len = instance.getData().length; i < len; i++) {                                                   // 11888
      row = instance.getSourceDataAtRow(i);                                                                            // 11889
                                                                                                                       // 11890
      spliceArgs = [this.index, 0];                                                                                    // 11891
      Array.prototype.push.apply(spliceArgs, this.data[i]);                                                            // 11892
                                                                                                                       // 11893
      Array.prototype.splice.apply(row, spliceArgs);                                                                   // 11894
                                                                                                                       // 11895
    }                                                                                                                  // 11896
                                                                                                                       // 11897
    if(typeof this.headers != 'undefined'){                                                                            // 11898
      spliceArgs = [this.index, 0];                                                                                    // 11899
      Array.prototype.push.apply(spliceArgs, this.headers);                                                            // 11900
      Array.prototype.splice.apply(instance.getSettings().colHeaders, spliceArgs);                                     // 11901
    }                                                                                                                  // 11902
                                                                                                                       // 11903
    instance.addHookOnce('afterRender', undoneCallback);                                                               // 11904
    instance.render();                                                                                                 // 11905
  };                                                                                                                   // 11906
  Handsontable.UndoRedo.RemoveColumnAction.prototype.redo = function (instance, redoneCallback) {                      // 11907
    instance.addHookOnce('afterRemoveCol', redoneCallback);                                                            // 11908
    instance.alter('remove_col', this.index, this.amount);                                                             // 11909
  };                                                                                                                   // 11910
})(Handsontable);                                                                                                      // 11911
                                                                                                                       // 11912
(function(Handsontable){                                                                                               // 11913
                                                                                                                       // 11914
  function init(){                                                                                                     // 11915
    var instance = this;                                                                                               // 11916
    var pluginEnabled = typeof instance.getSettings().undo == 'undefined' || instance.getSettings().undo;              // 11917
                                                                                                                       // 11918
    if(pluginEnabled){                                                                                                 // 11919
      if(!instance.undoRedo){                                                                                          // 11920
        instance.undoRedo = new Handsontable.UndoRedo(instance);                                                       // 11921
                                                                                                                       // 11922
        exposeUndoRedoMethods(instance);                                                                               // 11923
                                                                                                                       // 11924
        instance.addHook('beforeKeyDown', onBeforeKeyDown);                                                            // 11925
        instance.addHook('afterChange', onAfterChange);                                                                // 11926
      }                                                                                                                // 11927
    } else {                                                                                                           // 11928
      if(instance.undoRedo){                                                                                           // 11929
        delete instance.undoRedo;                                                                                      // 11930
                                                                                                                       // 11931
        removeExposedUndoRedoMethods(instance);                                                                        // 11932
                                                                                                                       // 11933
        instance.removeHook('beforeKeyDown', onBeforeKeyDown);                                                         // 11934
        instance.removeHook('afterChange', onAfterChange);                                                             // 11935
      }                                                                                                                // 11936
    }                                                                                                                  // 11937
  }                                                                                                                    // 11938
                                                                                                                       // 11939
  function onBeforeKeyDown(event){                                                                                     // 11940
    var instance = this;                                                                                               // 11941
                                                                                                                       // 11942
    var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;                                                  // 11943
                                                                                                                       // 11944
    if(ctrlDown){                                                                                                      // 11945
      if (event.keyCode === 89 || (event.shiftKey && event.keyCode === 90)) { //CTRL + Y or CTRL + SHIFT + Z           // 11946
        instance.undoRedo.redo();                                                                                      // 11947
        event.stopImmediatePropagation();                                                                              // 11948
      }                                                                                                                // 11949
      else if (event.keyCode === 90) { //CTRL + Z                                                                      // 11950
        instance.undoRedo.undo();                                                                                      // 11951
        event.stopImmediatePropagation();                                                                              // 11952
      }                                                                                                                // 11953
    }                                                                                                                  // 11954
  }                                                                                                                    // 11955
                                                                                                                       // 11956
  function onAfterChange(changes, source){                                                                             // 11957
    var instance = this;                                                                                               // 11958
    if (source == 'loadData'){                                                                                         // 11959
      return instance.undoRedo.clear();                                                                                // 11960
    }                                                                                                                  // 11961
  }                                                                                                                    // 11962
                                                                                                                       // 11963
  function exposeUndoRedoMethods(instance){                                                                            // 11964
    instance.undo = function(){                                                                                        // 11965
      return instance.undoRedo.undo();                                                                                 // 11966
    };                                                                                                                 // 11967
                                                                                                                       // 11968
    instance.redo = function(){                                                                                        // 11969
      return instance.undoRedo.redo();                                                                                 // 11970
    };                                                                                                                 // 11971
                                                                                                                       // 11972
    instance.isUndoAvailable = function(){                                                                             // 11973
      return instance.undoRedo.isUndoAvailable();                                                                      // 11974
    };                                                                                                                 // 11975
                                                                                                                       // 11976
    instance.isRedoAvailable = function(){                                                                             // 11977
      return instance.undoRedo.isRedoAvailable();                                                                      // 11978
    };                                                                                                                 // 11979
                                                                                                                       // 11980
    instance.clearUndo = function(){                                                                                   // 11981
      return instance.undoRedo.clear();                                                                                // 11982
    };                                                                                                                 // 11983
  }                                                                                                                    // 11984
                                                                                                                       // 11985
  function removeExposedUndoRedoMethods(instance){                                                                     // 11986
    delete instance.undo;                                                                                              // 11987
    delete instance.redo;                                                                                              // 11988
    delete instance.isUndoAvailable;                                                                                   // 11989
    delete instance.isRedoAvailable;                                                                                   // 11990
    delete instance.clearUndo;                                                                                         // 11991
  }                                                                                                                    // 11992
                                                                                                                       // 11993
  Handsontable.hooks.add('afterInit', init);                                                                           // 11994
  Handsontable.hooks.add('afterUpdateSettings', init);                                                                 // 11995
                                                                                                                       // 11996
})(Handsontable);                                                                                                      // 11997
                                                                                                                       // 11998
/**                                                                                                                    // 11999
 * Plugin used to scroll Handsontable by selecting a cell and dragging outside of visible viewport                     // 12000
 * @constructor                                                                                                        // 12001
 */                                                                                                                    // 12002
function DragToScroll() {                                                                                              // 12003
  this.boundaries = null;                                                                                              // 12004
  this.callback = null;                                                                                                // 12005
}                                                                                                                      // 12006
                                                                                                                       // 12007
/**                                                                                                                    // 12008
 * @param boundaries {Object} compatible with getBoundingClientRect                                                    // 12009
 */                                                                                                                    // 12010
DragToScroll.prototype.setBoundaries = function (boundaries) {                                                         // 12011
  this.boundaries = boundaries;                                                                                        // 12012
};                                                                                                                     // 12013
                                                                                                                       // 12014
/**                                                                                                                    // 12015
 * @param callback {Function}                                                                                          // 12016
 */                                                                                                                    // 12017
DragToScroll.prototype.setCallback = function (callback) {                                                             // 12018
  this.callback = callback;                                                                                            // 12019
};                                                                                                                     // 12020
                                                                                                                       // 12021
/**                                                                                                                    // 12022
 * Check if mouse position (x, y) is outside of the viewport                                                           // 12023
 * @param x                                                                                                            // 12024
 * @param y                                                                                                            // 12025
 */                                                                                                                    // 12026
DragToScroll.prototype.check = function (x, y) {                                                                       // 12027
  var diffX = 0;                                                                                                       // 12028
  var diffY = 0;                                                                                                       // 12029
                                                                                                                       // 12030
  if (y < this.boundaries.top) {                                                                                       // 12031
    //y is less than top                                                                                               // 12032
    diffY = y - this.boundaries.top;                                                                                   // 12033
  }                                                                                                                    // 12034
  else if (y > this.boundaries.bottom) {                                                                               // 12035
    //y is more than bottom                                                                                            // 12036
    diffY = y - this.boundaries.bottom;                                                                                // 12037
  }                                                                                                                    // 12038
                                                                                                                       // 12039
  if (x < this.boundaries.left) {                                                                                      // 12040
    //x is less than left                                                                                              // 12041
    diffX = x - this.boundaries.left;                                                                                  // 12042
  }                                                                                                                    // 12043
  else if (x > this.boundaries.right) {                                                                                // 12044
    //x is more than right                                                                                             // 12045
    diffX = x - this.boundaries.right;                                                                                 // 12046
  }                                                                                                                    // 12047
                                                                                                                       // 12048
  this.callback(diffX, diffY);                                                                                         // 12049
};                                                                                                                     // 12050
                                                                                                                       // 12051
var dragToScroll;                                                                                                      // 12052
var instance;                                                                                                          // 12053
                                                                                                                       // 12054
if (typeof Handsontable !== 'undefined') {                                                                             // 12055
  var setupListening = function (instance) {                                                                           // 12056
    instance.dragToScrollListening = false;                                                                            // 12057
    var scrollHandler = instance.view.wt.wtScrollbars.vertical.scrollHandler; //native scroll                          // 12058
    dragToScroll = new DragToScroll();                                                                                 // 12059
    if (scrollHandler === window) {                                                                                    // 12060
      //not much we can do currently                                                                                   // 12061
      return;                                                                                                          // 12062
    }                                                                                                                  // 12063
    else {                                                                                                             // 12064
      dragToScroll.setBoundaries(scrollHandler.getBoundingClientRect());                                               // 12065
    }                                                                                                                  // 12066
                                                                                                                       // 12067
    dragToScroll.setCallback(function (scrollX, scrollY) {                                                             // 12068
      if (scrollX < 0) {                                                                                               // 12069
          scrollHandler.scrollLeft -= 50;                                                                              // 12070
      }                                                                                                                // 12071
      else if (scrollX > 0) {                                                                                          // 12072
          scrollHandler.scrollLeft += 50;                                                                              // 12073
      }                                                                                                                // 12074
                                                                                                                       // 12075
      if (scrollY < 0) {                                                                                               // 12076
          scrollHandler.scrollTop -= 20;                                                                               // 12077
      }                                                                                                                // 12078
      else if (scrollY > 0) {                                                                                          // 12079
          scrollHandler.scrollTop += 20;                                                                               // 12080
      }                                                                                                                // 12081
    });                                                                                                                // 12082
                                                                                                                       // 12083
    instance.dragToScrollListening = true;                                                                             // 12084
  };                                                                                                                   // 12085
                                                                                                                       // 12086
  Handsontable.hooks.add('afterInit', function () {                                                                    // 12087
    var instance = this;                                                                                               // 12088
    var eventManager = Handsontable.eventManager(this);                                                                // 12089
                                                                                                                       // 12090
    eventManager.addEventListener(document,'mouseup', function () {                                                    // 12091
      instance.dragToScrollListening = false;                                                                          // 12092
    });                                                                                                                // 12093
                                                                                                                       // 12094
    eventManager.addEventListener(document,'mousemove', function () {                                                  // 12095
      if (instance.dragToScrollListening) {                                                                            // 12096
        dragToScroll.check(event.clientX, event.clientY);                                                              // 12097
      }                                                                                                                // 12098
    });                                                                                                                // 12099
  });                                                                                                                  // 12100
                                                                                                                       // 12101
  Handsontable.hooks.add('afterDestroy', function () {                                                                 // 12102
    var eventManager = Handsontable.eventManager(this);                                                                // 12103
    eventManager.clear();                                                                                              // 12104
  });                                                                                                                  // 12105
                                                                                                                       // 12106
  Handsontable.hooks.add('afterOnCellMouseDown', function () {                                                         // 12107
    setupListening(this);                                                                                              // 12108
  });                                                                                                                  // 12109
                                                                                                                       // 12110
  Handsontable.hooks.add('afterOnCellCornerMouseDown', function () {                                                   // 12111
    setupListening(this);                                                                                              // 12112
  });                                                                                                                  // 12113
                                                                                                                       // 12114
  Handsontable.plugins.DragToScroll = DragToScroll;                                                                    // 12115
}                                                                                                                      // 12116
                                                                                                                       // 12117
(function (Handsontable, CopyPaste, SheetClip) {                                                                       // 12118
                                                                                                                       // 12119
  function CopyPastePlugin(instance) {                                                                                 // 12120
    this.copyPasteInstance = CopyPaste.getInstance();                                                                  // 12121
                                                                                                                       // 12122
    this.copyPasteInstance.onCut(onCut);                                                                               // 12123
    this.copyPasteInstance.onPaste(onPaste);                                                                           // 12124
    var plugin = this;                                                                                                 // 12125
                                                                                                                       // 12126
    instance.addHook('beforeKeyDown', onBeforeKeyDown);                                                                // 12127
                                                                                                                       // 12128
    function onCut() {                                                                                                 // 12129
      if (!instance.isListening()) {                                                                                   // 12130
        return;                                                                                                        // 12131
      }                                                                                                                // 12132
                                                                                                                       // 12133
      instance.selection.empty();                                                                                      // 12134
    }                                                                                                                  // 12135
                                                                                                                       // 12136
    function onPaste(str) {                                                                                            // 12137
      if (!instance.isListening() || !instance.selection.isSelected()) {                                               // 12138
        return;                                                                                                        // 12139
      }                                                                                                                // 12140
                                                                                                                       // 12141
      var input = str.replace(/^[\r\n]*/g, '').replace(/[\r\n]*$/g, '') //remove newline from the start and the end of the input
        , inputArray = SheetClip.parse(input)                                                                          // 12143
        , selected = instance.getSelected()                                                                            // 12144
        , coordsFrom = new WalkontableCellCoords(selected[0], selected[1])                                             // 12145
        , coordsTo = new WalkontableCellCoords(selected[2], selected[3])                                               // 12146
        , cellRange = new WalkontableCellRange(coordsFrom, coordsFrom, coordsTo)                                       // 12147
        , topLeftCorner = cellRange.getTopLeftCorner()                                                                 // 12148
        , bottomRightCorner = cellRange.getBottomRightCorner()                                                         // 12149
        , areaStart = topLeftCorner                                                                                    // 12150
        , areaEnd = new WalkontableCellCoords(                                                                         // 12151
          Math.max(bottomRightCorner.row, inputArray.length - 1 + topLeftCorner.row),                                  // 12152
          Math.max(bottomRightCorner.col, inputArray[0].length - 1 + topLeftCorner.col)                                // 12153
        );                                                                                                             // 12154
                                                                                                                       // 12155
      instance.addHookOnce('afterChange', function (changes, source) {                                                 // 12156
        if (changes && changes.length) {                                                                               // 12157
          this.selectCell(areaStart.row, areaStart.col, areaEnd.row, areaEnd.col);                                     // 12158
        }                                                                                                              // 12159
      });                                                                                                              // 12160
                                                                                                                       // 12161
      instance.populateFromArray(areaStart.row, areaStart.col, inputArray, areaEnd.row, areaEnd.col, 'paste', instance.getSettings().pasteMode);
    };                                                                                                                 // 12163
                                                                                                                       // 12164
    function onBeforeKeyDown (event) {                                                                                 // 12165
      if (instance.getSelected()) {                                                                                    // 12166
        if (Handsontable.helper.isCtrlKey(event.keyCode)) {                                                            // 12167
          //when CTRL is pressed, prepare selectable text in textarea                                                  // 12168
          //http://stackoverflow.com/questions/3902635/how-does-one-capture-a-macs-command-key-via-javascript          // 12169
          plugin.setCopyableText();                                                                                    // 12170
          event.stopImmediatePropagation();                                                                            // 12171
          return;                                                                                                      // 12172
        }                                                                                                              // 12173
                                                                                                                       // 12174
        var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey; //catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)
                                                                                                                       // 12176
        if (event.keyCode == Handsontable.helper.keyCode.A && ctrlDown) {                                              // 12177
          instance._registerTimeout(setTimeout(Handsontable.helper.proxy(plugin.setCopyableText, plugin), 0));         // 12178
        }                                                                                                              // 12179
      }                                                                                                                // 12180
    }                                                                                                                  // 12181
                                                                                                                       // 12182
    this.destroy = function () {                                                                                       // 12183
      this.copyPasteInstance.removeCallback(onCut);                                                                    // 12184
      this.copyPasteInstance.removeCallback(onPaste);                                                                  // 12185
      this.copyPasteInstance.destroy();                                                                                // 12186
      instance.removeHook('beforeKeyDown', onBeforeKeyDown);                                                           // 12187
    };                                                                                                                 // 12188
                                                                                                                       // 12189
    instance.addHook('afterDestroy', Handsontable.helper.proxy(this.destroy, this));                                   // 12190
                                                                                                                       // 12191
    this.triggerPaste = Handsontable.helper.proxy(this.copyPasteInstance.triggerPaste, this.copyPasteInstance);        // 12192
    this.triggerCut = Handsontable.helper.proxy(this.copyPasteInstance.triggerCut, this.copyPasteInstance);            // 12193
                                                                                                                       // 12194
    /**                                                                                                                // 12195
     * Prepares copyable text in the invisible textarea                                                                // 12196
     */                                                                                                                // 12197
    this.setCopyableText = function () {                                                                               // 12198
                                                                                                                       // 12199
      var settings = instance.getSettings();                                                                           // 12200
      var copyRowsLimit = settings.copyRowsLimit;                                                                      // 12201
      var copyColsLimit = settings.copyColsLimit;                                                                      // 12202
                                                                                                                       // 12203
      var selRange = instance.getSelectedRange();                                                                      // 12204
      var topLeft = selRange.getTopLeftCorner();                                                                       // 12205
      var bottomRight = selRange.getBottomRightCorner();                                                               // 12206
      var startRow = topLeft.row;                                                                                      // 12207
      var startCol = topLeft.col;                                                                                      // 12208
      var endRow = bottomRight.row;                                                                                    // 12209
      var endCol = bottomRight.col;                                                                                    // 12210
      var finalEndRow = Math.min(endRow, startRow + copyRowsLimit - 1);                                                // 12211
      var finalEndCol = Math.min(endCol, startCol + copyColsLimit - 1);                                                // 12212
                                                                                                                       // 12213
      instance.copyPaste.copyPasteInstance.copyable(instance.getCopyableData(startRow, startCol, finalEndRow, finalEndCol));
                                                                                                                       // 12215
      if (endRow !== finalEndRow || endCol !== finalEndCol) {                                                          // 12216
        Handsontable.hooks.run(instance, "afterCopyLimit", endRow - startRow + 1, endCol - startCol + 1, copyRowsLimit, copyColsLimit);
      }                                                                                                                // 12218
    };                                                                                                                 // 12219
                                                                                                                       // 12220
  }                                                                                                                    // 12221
                                                                                                                       // 12222
                                                                                                                       // 12223
                                                                                                                       // 12224
  function init() {                                                                                                    // 12225
    var instance  = this;                                                                                              // 12226
    var pluginEnabled = instance.getSettings().copyPaste !== false;                                                    // 12227
                                                                                                                       // 12228
    if(pluginEnabled && !instance.copyPaste){                                                                          // 12229
                                                                                                                       // 12230
      instance.copyPaste = new CopyPastePlugin(instance);                                                              // 12231
                                                                                                                       // 12232
    } else if (!pluginEnabled && instance.copyPaste) {                                                                 // 12233
                                                                                                                       // 12234
      instance.copyPaste.destroy();                                                                                    // 12235
      delete instance.copyPaste;                                                                                       // 12236
                                                                                                                       // 12237
    }                                                                                                                  // 12238
                                                                                                                       // 12239
  }                                                                                                                    // 12240
                                                                                                                       // 12241
  Handsontable.hooks.add('afterInit', init);                                                                           // 12242
  Handsontable.hooks.add('afterUpdateSettings', init);                                                                 // 12243
                                                                                                                       // 12244
  Handsontable.hooks.register('afterCopyLimit');                                                                       // 12245
})(Handsontable, CopyPaste, SheetClip);                                                                                // 12246
(function (Handsontable) {                                                                                             // 12247
                                                                                                                       // 12248
  'use strict';                                                                                                        // 12249
                                                                                                                       // 12250
  Handsontable.Search = function Search(instance) {                                                                    // 12251
    this.query = function (queryStr, callback, queryMethod) {                                                          // 12252
      var rowCount = instance.countRows();                                                                             // 12253
      var colCount = instance.countCols();                                                                             // 12254
      var queryResult = [];                                                                                            // 12255
                                                                                                                       // 12256
      if (!callback) {                                                                                                 // 12257
        callback = Handsontable.Search.global.getDefaultCallback();                                                    // 12258
      }                                                                                                                // 12259
                                                                                                                       // 12260
      if (!queryMethod) {                                                                                              // 12261
        queryMethod = Handsontable.Search.global.getDefaultQueryMethod();                                              // 12262
      }                                                                                                                // 12263
                                                                                                                       // 12264
      for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {                                                        // 12265
        for (var colIndex = 0; colIndex < colCount; colIndex++) {                                                      // 12266
          var cellData = instance.getDataAtCell(rowIndex, colIndex);                                                   // 12267
          var cellProperties = instance.getCellMeta(rowIndex, colIndex);                                               // 12268
          var cellCallback = cellProperties.search.callback || callback;                                               // 12269
          var cellQueryMethod = cellProperties.search.queryMethod || queryMethod;                                      // 12270
          var testResult = cellQueryMethod(queryStr, cellData);                                                        // 12271
                                                                                                                       // 12272
          if (testResult) {                                                                                            // 12273
            var singleResult = {                                                                                       // 12274
              row: rowIndex,                                                                                           // 12275
              col: colIndex,                                                                                           // 12276
              data: cellData                                                                                           // 12277
            };                                                                                                         // 12278
                                                                                                                       // 12279
            queryResult.push(singleResult);                                                                            // 12280
          }                                                                                                            // 12281
                                                                                                                       // 12282
          if (cellCallback) {                                                                                          // 12283
            cellCallback(instance, rowIndex, colIndex, cellData, testResult);                                          // 12284
          }                                                                                                            // 12285
        }                                                                                                              // 12286
      }                                                                                                                // 12287
                                                                                                                       // 12288
      return queryResult;                                                                                              // 12289
                                                                                                                       // 12290
    };                                                                                                                 // 12291
                                                                                                                       // 12292
  };                                                                                                                   // 12293
                                                                                                                       // 12294
  Handsontable.Search.DEFAULT_CALLBACK = function (instance, row, col, data, testResult) {                             // 12295
    instance.getCellMeta(row, col).isSearchResult = testResult;                                                        // 12296
  };                                                                                                                   // 12297
                                                                                                                       // 12298
  Handsontable.Search.DEFAULT_QUERY_METHOD = function (query, value) {                                                 // 12299
                                                                                                                       // 12300
    if (typeof query == 'undefined' || query == null || !query.toLowerCase || query.length == 0){                      // 12301
      return false;                                                                                                    // 12302
    }                                                                                                                  // 12303
                                                                                                                       // 12304
    if(typeof value == 'undefined' || value == null) {                                                                 // 12305
      return false;                                                                                                    // 12306
    }                                                                                                                  // 12307
                                                                                                                       // 12308
    return value.toString().toLowerCase().indexOf(query.toLowerCase()) != -1;                                          // 12309
  };                                                                                                                   // 12310
                                                                                                                       // 12311
  Handsontable.Search.DEFAULT_SEARCH_RESULT_CLASS = 'htSearchResult';                                                  // 12312
                                                                                                                       // 12313
  Handsontable.Search.global = (function () {                                                                          // 12314
                                                                                                                       // 12315
    var defaultCallback = Handsontable.Search.DEFAULT_CALLBACK;                                                        // 12316
    var defaultQueryMethod = Handsontable.Search.DEFAULT_QUERY_METHOD;                                                 // 12317
    var defaultSearchResultClass = Handsontable.Search.DEFAULT_SEARCH_RESULT_CLASS;                                    // 12318
                                                                                                                       // 12319
    return {                                                                                                           // 12320
      getDefaultCallback: function () {                                                                                // 12321
        return defaultCallback;                                                                                        // 12322
      },                                                                                                               // 12323
                                                                                                                       // 12324
      setDefaultCallback: function (newDefaultCallback) {                                                              // 12325
        defaultCallback = newDefaultCallback;                                                                          // 12326
      },                                                                                                               // 12327
                                                                                                                       // 12328
      getDefaultQueryMethod: function () {                                                                             // 12329
        return defaultQueryMethod;                                                                                     // 12330
      },                                                                                                               // 12331
                                                                                                                       // 12332
      setDefaultQueryMethod: function (newDefaultQueryMethod) {                                                        // 12333
        defaultQueryMethod = newDefaultQueryMethod;                                                                    // 12334
      },                                                                                                               // 12335
                                                                                                                       // 12336
      getDefaultSearchResultClass: function () {                                                                       // 12337
        return defaultSearchResultClass;                                                                               // 12338
      },                                                                                                               // 12339
                                                                                                                       // 12340
      setDefaultSearchResultClass: function (newSearchResultClass) {                                                   // 12341
        defaultSearchResultClass = newSearchResultClass;                                                               // 12342
      }                                                                                                                // 12343
    }                                                                                                                  // 12344
                                                                                                                       // 12345
  })();                                                                                                                // 12346
                                                                                                                       // 12347
                                                                                                                       // 12348
                                                                                                                       // 12349
  Handsontable.SearchCellDecorator = function (instance, TD, row, col, prop, value, cellProperties) {                  // 12350
                                                                                                                       // 12351
    var searchResultClass = (typeof cellProperties.search == 'object' && cellProperties.search.searchResultClass) || Handsontable.Search.global.getDefaultSearchResultClass();
                                                                                                                       // 12353
    if(cellProperties.isSearchResult){                                                                                 // 12354
      Handsontable.Dom.addClass(TD, searchResultClass);                                                                // 12355
    } else {                                                                                                           // 12356
      Handsontable.Dom.removeClass(TD, searchResultClass);                                                             // 12357
    }                                                                                                                  // 12358
  };                                                                                                                   // 12359
                                                                                                                       // 12360
                                                                                                                       // 12361
                                                                                                                       // 12362
  var originalDecorator = Handsontable.renderers.cellDecorator;                                                        // 12363
                                                                                                                       // 12364
  Handsontable.renderers.cellDecorator = function (instance, TD, row, col, prop, value, cellProperties) {              // 12365
    originalDecorator.apply(this, arguments);                                                                          // 12366
    Handsontable.SearchCellDecorator.apply(this, arguments);                                                           // 12367
  };                                                                                                                   // 12368
                                                                                                                       // 12369
  function init() {                                                                                                    // 12370
    var instance = this;                                                                                               // 12371
                                                                                                                       // 12372
    var pluginEnabled = !!instance.getSettings().search;                                                               // 12373
                                                                                                                       // 12374
    if (pluginEnabled) {                                                                                               // 12375
      instance.search = new Handsontable.Search(instance);                                                             // 12376
    } else {                                                                                                           // 12377
      delete instance.search;                                                                                          // 12378
    }                                                                                                                  // 12379
                                                                                                                       // 12380
  }                                                                                                                    // 12381
                                                                                                                       // 12382
  Handsontable.hooks.add('afterInit', init);                                                                           // 12383
  Handsontable.hooks.add('afterUpdateSettings', init);                                                                 // 12384
                                                                                                                       // 12385
                                                                                                                       // 12386
})(Handsontable);                                                                                                      // 12387
function CellInfoCollection() {                                                                                        // 12388
                                                                                                                       // 12389
  var collection = [];                                                                                                 // 12390
                                                                                                                       // 12391
  collection.getInfo = function (row, col) {                                                                           // 12392
    for (var i = 0, ilen = this.length; i < ilen; i++) {                                                               // 12393
      if (this[i].row <= row && this[i].row + this[i].rowspan - 1 >= row && this[i].col <= col && this[i].col + this[i].colspan - 1 >= col) {
        return this[i];                                                                                                // 12395
      }                                                                                                                // 12396
    }                                                                                                                  // 12397
  };                                                                                                                   // 12398
                                                                                                                       // 12399
  collection.setInfo = function (info) {                                                                               // 12400
    for (var i = 0, ilen = this.length; i < ilen; i++) {                                                               // 12401
      if (this[i].row === info.row && this[i].col === info.col) {                                                      // 12402
        this[i] = info;                                                                                                // 12403
        return;                                                                                                        // 12404
      }                                                                                                                // 12405
    }                                                                                                                  // 12406
    this.push(info);                                                                                                   // 12407
  };                                                                                                                   // 12408
                                                                                                                       // 12409
  collection.removeInfo = function (row, col) {                                                                        // 12410
    for (var i = 0, ilen = this.length; i < ilen; i++) {                                                               // 12411
      if (this[i].row === row && this[i].col === col) {                                                                // 12412
        this.splice(i, 1);                                                                                             // 12413
        break;                                                                                                         // 12414
      }                                                                                                                // 12415
    }                                                                                                                  // 12416
  };                                                                                                                   // 12417
                                                                                                                       // 12418
  return collection;                                                                                                   // 12419
                                                                                                                       // 12420
}                                                                                                                      // 12421
                                                                                                                       // 12422
                                                                                                                       // 12423
/**                                                                                                                    // 12424
 * Plugin used to merge cells in Handsontable                                                                          // 12425
 * @constructor                                                                                                        // 12426
 */                                                                                                                    // 12427
function MergeCells(mergeCellsSetting) {                                                                               // 12428
  this.mergedCellInfoCollection = new CellInfoCollection();                                                            // 12429
                                                                                                                       // 12430
  if (Array.isArray(mergeCellsSetting)) {                                                                              // 12431
    for (var i = 0, ilen = mergeCellsSetting.length; i < ilen; i++) {                                                  // 12432
      this.mergedCellInfoCollection.setInfo(mergeCellsSetting[i]);                                                     // 12433
    }                                                                                                                  // 12434
  }                                                                                                                    // 12435
}                                                                                                                      // 12436
                                                                                                                       // 12437
/**                                                                                                                    // 12438
 * @param cellRange (WalkontableCellRange)                                                                             // 12439
 */                                                                                                                    // 12440
MergeCells.prototype.canMergeRange = function (cellRange) {                                                            // 12441
  //is more than one cell selected                                                                                     // 12442
  return !cellRange.isSingle();                                                                                        // 12443
};                                                                                                                     // 12444
                                                                                                                       // 12445
MergeCells.prototype.mergeRange = function (cellRange) {                                                               // 12446
  if (!this.canMergeRange(cellRange)) {                                                                                // 12447
    return;                                                                                                            // 12448
  }                                                                                                                    // 12449
                                                                                                                       // 12450
  //normalize top left corner                                                                                          // 12451
  var topLeft = cellRange.getTopLeftCorner();                                                                          // 12452
  var bottomRight = cellRange.getBottomRightCorner();                                                                  // 12453
                                                                                                                       // 12454
  var mergeParent = {};                                                                                                // 12455
  mergeParent.row = topLeft.row;                                                                                       // 12456
  mergeParent.col = topLeft.col;                                                                                       // 12457
  mergeParent.rowspan = bottomRight.row - topLeft.row + 1; //TD has rowspan == 1 by default. rowspan == 2 means spread over 2 cells
  mergeParent.colspan = bottomRight.col - topLeft.col + 1;                                                             // 12459
  this.mergedCellInfoCollection.setInfo(mergeParent);                                                                  // 12460
};                                                                                                                     // 12461
                                                                                                                       // 12462
MergeCells.prototype.mergeOrUnmergeSelection = function (cellRange) {                                                  // 12463
  var info = this.mergedCellInfoCollection.getInfo(cellRange.from.row, cellRange.from.col);                            // 12464
  if (info) {                                                                                                          // 12465
    //unmerge                                                                                                          // 12466
    this.unmergeSelection(cellRange.from);                                                                             // 12467
  }                                                                                                                    // 12468
  else {                                                                                                               // 12469
    //merge                                                                                                            // 12470
    this.mergeSelection(cellRange);                                                                                    // 12471
  }                                                                                                                    // 12472
};                                                                                                                     // 12473
                                                                                                                       // 12474
MergeCells.prototype.mergeSelection = function (cellRange) {                                                           // 12475
  this.mergeRange(cellRange);                                                                                          // 12476
};                                                                                                                     // 12477
                                                                                                                       // 12478
MergeCells.prototype.unmergeSelection = function (cellRange) {                                                         // 12479
  var info = this.mergedCellInfoCollection.getInfo(cellRange.row, cellRange.col);                                      // 12480
  this.mergedCellInfoCollection.removeInfo(info.row, info.col);                                                        // 12481
};                                                                                                                     // 12482
                                                                                                                       // 12483
MergeCells.prototype.applySpanProperties = function (TD, row, col) {                                                   // 12484
  var info = this.mergedCellInfoCollection.getInfo(row, col);                                                          // 12485
                                                                                                                       // 12486
  if (info) {                                                                                                          // 12487
    if (info.row === row && info.col === col) {                                                                        // 12488
      TD.setAttribute('rowspan', info.rowspan);                                                                        // 12489
      TD.setAttribute('colspan', info.colspan);                                                                        // 12490
    }                                                                                                                  // 12491
    else {                                                                                                             // 12492
      TD.removeAttribute('rowspan');                                                                                   // 12493
      TD.removeAttribute('colspan');                                                                                   // 12494
                                                                                                                       // 12495
      TD.style.display = "none";                                                                                       // 12496
    }                                                                                                                  // 12497
  }                                                                                                                    // 12498
  else {                                                                                                               // 12499
    TD.removeAttribute('rowspan');                                                                                     // 12500
    TD.removeAttribute('colspan');                                                                                     // 12501
  }                                                                                                                    // 12502
};                                                                                                                     // 12503
                                                                                                                       // 12504
MergeCells.prototype.modifyTransform = function (hook, currentSelectedRange, delta) {                                  // 12505
  var sameRowspan = function (merged, coords) {                                                                        // 12506
      if (coords.row >= merged.row && coords.row <= (merged.row + merged.rowspan - 1)) {                               // 12507
        return true;                                                                                                   // 12508
      }                                                                                                                // 12509
      return false;                                                                                                    // 12510
    }                                                                                                                  // 12511
    , sameColspan = function (merged, coords) {                                                                        // 12512
      if (coords.col >= merged.col && coords.col <= (merged.col + merged.colspan - 1)) {                               // 12513
        return true;                                                                                                   // 12514
      }                                                                                                                // 12515
      return false;                                                                                                    // 12516
    }                                                                                                                  // 12517
    , getNextPosition = function (newDelta) {                                                                          // 12518
      return new WalkontableCellCoords(currentSelectedRange.to.row + newDelta.row, currentSelectedRange.to.col + newDelta.col);
    };                                                                                                                 // 12520
                                                                                                                       // 12521
  var newDelta = {                                                                                                     // 12522
    row: delta.row,                                                                                                    // 12523
    col: delta.col                                                                                                     // 12524
  };                                                                                                                   // 12525
                                                                                                                       // 12526
                                                                                                                       // 12527
  if (hook == 'modifyTransformStart') {                                                                                // 12528
                                                                                                                       // 12529
    if (!this.lastDesiredCoords) {                                                                                     // 12530
      this.lastDesiredCoords = new WalkontableCellCoords(null, null);                                                  // 12531
    }                                                                                                                  // 12532
    var currentPosition = new WalkontableCellCoords(currentSelectedRange.highlight.row, currentSelectedRange.highlight.col)
      , mergedParent = this.mergedCellInfoCollection.getInfo(currentPosition.row, currentPosition.col)// if current position's parent is a merged range, returns it
      , currentRangeContainsMerge; // if current range contains a merged range                                         // 12535
                                                                                                                       // 12536
    for (var i = 0, mergesLength = this.mergedCellInfoCollection.length; i < mergesLength; i++) {                      // 12537
      var range = this.mergedCellInfoCollection[i];                                                                    // 12538
      range = new WalkontableCellCoords(range.row + range.rowspan - 1, range.col + range.colspan - 1);                 // 12539
      if (currentSelectedRange.includes(range)) {                                                                      // 12540
        currentRangeContainsMerge = true;                                                                              // 12541
        break;                                                                                                         // 12542
      }                                                                                                                // 12543
    }                                                                                                                  // 12544
                                                                                                                       // 12545
    if (mergedParent) { // only merge selected                                                                         // 12546
      var mergeTopLeft = new WalkontableCellCoords(mergedParent.row, mergedParent.col)                                 // 12547
        , mergeBottomRight = new WalkontableCellCoords(mergedParent.row + mergedParent.rowspan - 1, mergedParent.col + mergedParent.colspan - 1)
        , mergeRange = new WalkontableCellRange(mergeTopLeft, mergeTopLeft, mergeBottomRight);                         // 12549
                                                                                                                       // 12550
      if (!mergeRange.includes(this.lastDesiredCoords)) {                                                              // 12551
        this.lastDesiredCoords = new WalkontableCellCoords(null, null); // reset outdated version of lastDesiredCoords // 12552
      }                                                                                                                // 12553
                                                                                                                       // 12554
      newDelta.row = this.lastDesiredCoords.row ? this.lastDesiredCoords.row - currentPosition.row : newDelta.row;     // 12555
      newDelta.col = this.lastDesiredCoords.col ? this.lastDesiredCoords.col - currentPosition.col : newDelta.col;     // 12556
                                                                                                                       // 12557
      if (delta.row > 0) { // moving down                                                                              // 12558
        newDelta.row = mergedParent.row + mergedParent.rowspan - 1 - currentPosition.row + delta.row;                  // 12559
      } else if (delta.row < 0) { //moving up                                                                          // 12560
        newDelta.row = currentPosition.row - mergedParent.row + delta.row;                                             // 12561
      }                                                                                                                // 12562
      if (delta.col > 0) { // moving right                                                                             // 12563
        newDelta.col = mergedParent.col + mergedParent.colspan - 1 - currentPosition.col + delta.col;                  // 12564
      } else if (delta.col < 0) { // moving left                                                                       // 12565
        newDelta.col = currentPosition.col - mergedParent.col + delta.col;                                             // 12566
      }                                                                                                                // 12567
    }                                                                                                                  // 12568
                                                                                                                       // 12569
    var nextPosition = new WalkontableCellCoords(currentSelectedRange.highlight.row + newDelta.row, currentSelectedRange.highlight.col + newDelta.col)
      , nextParentIsMerged = this.mergedCellInfoCollection.getInfo(nextPosition.row, nextPosition.col);                // 12571
                                                                                                                       // 12572
    if (nextParentIsMerged) { // skipping the invisible cells in the merge range                                       // 12573
      this.lastDesiredCoords = nextPosition;                                                                           // 12574
      newDelta = {                                                                                                     // 12575
        row: nextParentIsMerged.row - currentPosition.row,                                                             // 12576
        col: nextParentIsMerged.col - currentPosition.col                                                              // 12577
      }                                                                                                                // 12578
    }                                                                                                                  // 12579
  } else if (hook == 'modifyTransformEnd') {                                                                           // 12580
    for (var i = 0, mergesLength = this.mergedCellInfoCollection.length; i < mergesLength; i++) {                      // 12581
      var currentMerge = this.mergedCellInfoCollection[i]                                                              // 12582
        , mergeTopLeft = new WalkontableCellCoords(currentMerge.row, currentMerge.col)                                 // 12583
        , mergeBottomRight = new WalkontableCellCoords(currentMerge.row + currentMerge.rowspan - 1, currentMerge.col + currentMerge.colspan - 1)
        , mergedRange = new WalkontableCellRange(mergeTopLeft, mergeTopLeft, mergeBottomRight)                         // 12585
        , sharedBorders = currentSelectedRange.getBordersSharedWith(mergedRange);                                      // 12586
                                                                                                                       // 12587
      if (mergedRange.isEqual(currentSelectedRange)) { // only the merged range is selected                            // 12588
        currentSelectedRange.setDirection("NW-SE");                                                                    // 12589
      }                                                                                                                // 12590
      else if (sharedBorders.length > 0) {                                                                             // 12591
        var mergeHighlighted = (currentSelectedRange.highlight.isEqual(mergedRange.from));                             // 12592
                                                                                                                       // 12593
        if (sharedBorders.indexOf('top') > -1) { // if range shares a border with the merged section, change range direction accordingly
          if (currentSelectedRange.to.isSouthEastOf(mergedRange.from) && mergeHighlighted) {                           // 12595
            currentSelectedRange.setDirection("NW-SE");                                                                // 12596
          } else if (currentSelectedRange.to.isSouthWestOf(mergedRange.from) && mergeHighlighted) {                    // 12597
            currentSelectedRange.setDirection("NE-SW");                                                                // 12598
          }                                                                                                            // 12599
        } else if (sharedBorders.indexOf('bottom') > -1) {                                                             // 12600
          if (currentSelectedRange.to.isNorthEastOf(mergedRange.from) && mergeHighlighted) {                           // 12601
            currentSelectedRange.setDirection("SW-NE");                                                                // 12602
          } else if (currentSelectedRange.to.isNorthWestOf(mergedRange.from) && mergeHighlighted) {                    // 12603
            currentSelectedRange.setDirection("SE-NW");                                                                // 12604
          }                                                                                                            // 12605
        }                                                                                                              // 12606
      }                                                                                                                // 12607
                                                                                                                       // 12608
      var nextPosition = getNextPosition(newDelta)                                                                     // 12609
        , withinRowspan = sameRowspan(currentMerge, nextPosition)                                                      // 12610
        , withinColspan = sameColspan(currentMerge, nextPosition);                                                     // 12611
                                                                                                                       // 12612
      if (currentSelectedRange.includesRange(mergedRange) && (mergedRange.includes(nextPosition) || withinRowspan || withinColspan)) { // if next step overlaps a merged range, jump past it
        if (withinRowspan) {                                                                                           // 12614
          if (newDelta.row < 0) {                                                                                      // 12615
            newDelta.row -= currentMerge.rowspan - 1;                                                                  // 12616
          } else if (newDelta.row > 0) {                                                                               // 12617
            newDelta.row += currentMerge.rowspan - 1;                                                                  // 12618
          }                                                                                                            // 12619
        }                                                                                                              // 12620
        if (withinColspan) {                                                                                           // 12621
          if (newDelta.col < 0) {                                                                                      // 12622
            newDelta.col -= currentMerge.colspan - 1;                                                                  // 12623
          } else if (newDelta.col > 0) {                                                                               // 12624
            newDelta.col += currentMerge.colspan - 1;                                                                  // 12625
          }                                                                                                            // 12626
        }                                                                                                              // 12627
      }                                                                                                                // 12628
    }                                                                                                                  // 12629
  }                                                                                                                    // 12630
                                                                                                                       // 12631
  if (newDelta.row != 0) delta.row = newDelta.row;                                                                     // 12632
  if (newDelta.col != 0) delta.col = newDelta.col;                                                                     // 12633
};                                                                                                                     // 12634
                                                                                                                       // 12635
if (typeof Handsontable == 'undefined') {                                                                              // 12636
  throw new Error('Handsontable is not defined');                                                                      // 12637
}                                                                                                                      // 12638
                                                                                                                       // 12639
var beforeInit = function () {                                                                                         // 12640
  var instance = this;                                                                                                 // 12641
  var mergeCellsSetting = instance.getSettings().mergeCells;                                                           // 12642
                                                                                                                       // 12643
  if (mergeCellsSetting) {                                                                                             // 12644
    if (!instance.mergeCells) {                                                                                        // 12645
      instance.mergeCells = new MergeCells(mergeCellsSetting);                                                         // 12646
    }                                                                                                                  // 12647
  }                                                                                                                    // 12648
};                                                                                                                     // 12649
                                                                                                                       // 12650
var afterInit = function () {                                                                                          // 12651
  var instance = this;                                                                                                 // 12652
  if (instance.mergeCells) {                                                                                           // 12653
    /**                                                                                                                // 12654
     * Monkey patch WalkontableTable.prototype.getCell to return TD for merged cell parent if asked for TD of a cell that is
     * invisible due to the merge. This is not the cleanest solution but there is a test case for it (merged cells scroll) so feel free to refactor it!
     */                                                                                                                // 12657
    instance.view.wt.wtTable.getCell = function (coords) {                                                             // 12658
      if (instance.getSettings().mergeCells) {                                                                         // 12659
        var mergeParent = instance.mergeCells.mergedCellInfoCollection.getInfo(coords.row, coords.col);                // 12660
        if (mergeParent) {                                                                                             // 12661
          coords = mergeParent;                                                                                        // 12662
        }                                                                                                              // 12663
      }                                                                                                                // 12664
      return WalkontableTable.prototype.getCell.call(this, coords);                                                    // 12665
    };                                                                                                                 // 12666
  }                                                                                                                    // 12667
};                                                                                                                     // 12668
                                                                                                                       // 12669
var onBeforeKeyDown = function (event) {                                                                               // 12670
  if (!this.mergeCells) {                                                                                              // 12671
    return;                                                                                                            // 12672
  }                                                                                                                    // 12673
                                                                                                                       // 12674
  var ctrlDown = (event.ctrlKey || event.metaKey) && !event.altKey;                                                    // 12675
                                                                                                                       // 12676
  if (ctrlDown) {                                                                                                      // 12677
    if (event.keyCode === 77) { //CTRL + M                                                                             // 12678
      this.mergeCells.mergeOrUnmergeSelection(this.getSelectedRange());                                                // 12679
      this.render();                                                                                                   // 12680
      event.stopImmediatePropagation();                                                                                // 12681
    }                                                                                                                  // 12682
  }                                                                                                                    // 12683
};                                                                                                                     // 12684
                                                                                                                       // 12685
var addMergeActionsToContextMenu = function (defaultOptions) {                                                         // 12686
  if (!this.getSettings().mergeCells) {                                                                                // 12687
    return;                                                                                                            // 12688
  }                                                                                                                    // 12689
                                                                                                                       // 12690
  defaultOptions.items.push(Handsontable.ContextMenu.SEPARATOR);                                                       // 12691
                                                                                                                       // 12692
  defaultOptions.items.push({                                                                                          // 12693
    key: 'mergeCells',                                                                                                 // 12694
    name: function () {                                                                                                // 12695
      var sel = this.getSelected();                                                                                    // 12696
      var info = this.mergeCells.mergedCellInfoCollection.getInfo(sel[0], sel[1]);                                     // 12697
      if (info) {                                                                                                      // 12698
        return 'Unmerge cells';                                                                                        // 12699
      }                                                                                                                // 12700
      else {                                                                                                           // 12701
        return 'Merge cells';                                                                                          // 12702
      }                                                                                                                // 12703
    },                                                                                                                 // 12704
    callback: function () {                                                                                            // 12705
      this.mergeCells.mergeOrUnmergeSelection(this.getSelectedRange());                                                // 12706
      this.render();                                                                                                   // 12707
    },                                                                                                                 // 12708
    disabled: function () {                                                                                            // 12709
      return false;                                                                                                    // 12710
    }                                                                                                                  // 12711
  });                                                                                                                  // 12712
};                                                                                                                     // 12713
                                                                                                                       // 12714
var afterRenderer = function (TD, row, col, prop, value, cellProperties) {                                             // 12715
  if (this.mergeCells) {                                                                                               // 12716
    this.mergeCells.applySpanProperties(TD, row, col);                                                                 // 12717
  }                                                                                                                    // 12718
};                                                                                                                     // 12719
                                                                                                                       // 12720
var modifyTransformFactory = function (hook) {                                                                         // 12721
  return function (delta) {                                                                                            // 12722
    var mergeCellsSetting = this.getSettings().mergeCells;                                                             // 12723
    if (mergeCellsSetting) {                                                                                           // 12724
      var currentSelectedRange = this.getSelectedRange();                                                              // 12725
      this.mergeCells.modifyTransform(hook, currentSelectedRange, delta);                                              // 12726
                                                                                                                       // 12727
      if (hook === "modifyTransformEnd") {                                                                             // 12728
        //sanitize "from" (core.js will sanitize to)                                                                   // 12729
        var totalRows = this.countRows();                                                                              // 12730
        var totalCols = this.countCols();                                                                              // 12731
        if (currentSelectedRange.from.row < 0) {                                                                       // 12732
          currentSelectedRange.from.row = 0;                                                                           // 12733
        }                                                                                                              // 12734
        else if (currentSelectedRange.from.row > 0 && currentSelectedRange.from.row >= totalRows) {                    // 12735
          currentSelectedRange.from.row = currentSelectedRange.from - 1;                                               // 12736
        }                                                                                                              // 12737
                                                                                                                       // 12738
        if (currentSelectedRange.from.col < 0) {                                                                       // 12739
          currentSelectedRange.from.col = 0;                                                                           // 12740
        }                                                                                                              // 12741
        else if (currentSelectedRange.from.col > 0 && currentSelectedRange.from.col >= totalCols) {                    // 12742
          currentSelectedRange.from.col = totalCols - 1;                                                               // 12743
        }                                                                                                              // 12744
      }                                                                                                                // 12745
    }                                                                                                                  // 12746
  }                                                                                                                    // 12747
};                                                                                                                     // 12748
                                                                                                                       // 12749
/**                                                                                                                    // 12750
 * While selecting cells with keyboard or mouse, make sure that rectangular area is expanded to the extent of the merged cell
 * @param coords                                                                                                       // 12752
 */                                                                                                                    // 12753
var beforeSetRangeEnd = function (coords) {                                                                            // 12754
                                                                                                                       // 12755
  this.lastDesiredCoords = null; //unset lastDesiredCoords when selection is changed with mouse                        // 12756
  var mergeCellsSetting = this.getSettings().mergeCells;                                                               // 12757
  if (mergeCellsSetting) {                                                                                             // 12758
    var selRange = this.getSelectedRange();                                                                            // 12759
    selRange.highlight = new WalkontableCellCoords(selRange.highlight.row, selRange.highlight.col); //clone in case we will modify its reference
    selRange.to = coords;                                                                                              // 12761
                                                                                                                       // 12762
    var rangeExpanded = false;                                                                                         // 12763
    do {                                                                                                               // 12764
      rangeExpanded = false;                                                                                           // 12765
                                                                                                                       // 12766
      for (var i = 0, ilen = this.mergeCells.mergedCellInfoCollection.length; i < ilen; i++) {                         // 12767
        var cellInfo = this.mergeCells.mergedCellInfoCollection[i];                                                    // 12768
        var mergedCellTopLeft = new WalkontableCellCoords(cellInfo.row, cellInfo.col);                                 // 12769
        var mergedCellBottomRight = new WalkontableCellCoords(cellInfo.row + cellInfo.rowspan - 1, cellInfo.col + cellInfo.colspan - 1);
                                                                                                                       // 12771
        var mergedCellRange = new WalkontableCellRange(mergedCellTopLeft, mergedCellTopLeft, mergedCellBottomRight);   // 12772
        if (selRange.expandByRange(mergedCellRange)) {                                                                 // 12773
          coords.row = selRange.to.row;                                                                                // 12774
          coords.col = selRange.to.col;                                                                                // 12775
                                                                                                                       // 12776
          rangeExpanded = true;                                                                                        // 12777
        }                                                                                                              // 12778
      }                                                                                                                // 12779
    } while (rangeExpanded);                                                                                           // 12780
                                                                                                                       // 12781
  }                                                                                                                    // 12782
};                                                                                                                     // 12783
                                                                                                                       // 12784
/**                                                                                                                    // 12785
 * Returns correct coordinates for merged start / end cells in selection for area borders                              // 12786
 * @param corners                                                                                                      // 12787
 * @param className                                                                                                    // 12788
 */                                                                                                                    // 12789
var beforeDrawAreaBorders = function (corners, className) {                                                            // 12790
  if (className && className == 'area') {                                                                              // 12791
    var mergeCellsSetting = this.getSettings().mergeCells;                                                             // 12792
    if (mergeCellsSetting) {                                                                                           // 12793
      var selRange = this.getSelectedRange();                                                                          // 12794
      var startRange = new WalkontableCellRange(selRange.from, selRange.from, selRange.from);                          // 12795
      var stopRange = new WalkontableCellRange(selRange.to, selRange.to, selRange.to);                                 // 12796
                                                                                                                       // 12797
      for (var i = 0, ilen = this.mergeCells.mergedCellInfoCollection.length; i < ilen; i++) {                         // 12798
        var cellInfo = this.mergeCells.mergedCellInfoCollection[i];                                                    // 12799
        var mergedCellTopLeft = new WalkontableCellCoords(cellInfo.row, cellInfo.col);                                 // 12800
        var mergedCellBottomRight = new WalkontableCellCoords(cellInfo.row + cellInfo.rowspan - 1, cellInfo.col + cellInfo.colspan - 1);
        var mergedCellRange = new WalkontableCellRange(mergedCellTopLeft, mergedCellTopLeft, mergedCellBottomRight);   // 12802
                                                                                                                       // 12803
        if (startRange.expandByRange(mergedCellRange)) {                                                               // 12804
          corners[0] = startRange.from.row;                                                                            // 12805
          corners[1] = startRange.from.col;                                                                            // 12806
        }                                                                                                              // 12807
                                                                                                                       // 12808
        if (stopRange.expandByRange(mergedCellRange)) {                                                                // 12809
          corners[2] = stopRange.from.row;                                                                             // 12810
          corners[3] = stopRange.from.col;                                                                             // 12811
        }                                                                                                              // 12812
      }                                                                                                                // 12813
    }                                                                                                                  // 12814
  }                                                                                                                    // 12815
};                                                                                                                     // 12816
                                                                                                                       // 12817
var afterGetCellMeta = function (row, col, cellProperties) {                                                           // 12818
  var mergeCellsSetting = this.getSettings().mergeCells;                                                               // 12819
  if (mergeCellsSetting) {                                                                                             // 12820
    var mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(row, col);                                      // 12821
    if (mergeParent && (mergeParent.row != row || mergeParent.col != col)) {                                           // 12822
      cellProperties.copyable = false;                                                                                 // 12823
    }                                                                                                                  // 12824
  }                                                                                                                    // 12825
};                                                                                                                     // 12826
                                                                                                                       // 12827
var afterViewportRowCalculatorOverride = function (calc) {                                                             // 12828
  var mergeCellsSetting = this.getSettings().mergeCells;                                                               // 12829
  if (mergeCellsSetting) {                                                                                             // 12830
    var colCount = this.countCols();                                                                                   // 12831
    var mergeParent;                                                                                                   // 12832
    for (var c = 0; c < colCount; c++) {                                                                               // 12833
      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(calc.startRow, c);                                // 12834
      if (mergeParent) {                                                                                               // 12835
        if (mergeParent.row < calc.startRow) {                                                                         // 12836
          calc.startRow = mergeParent.row;                                                                             // 12837
          return afterViewportRowCalculatorOverride.call(this, calc); //recursively search upwards                     // 12838
        }                                                                                                              // 12839
      }                                                                                                                // 12840
      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(calc.endRow, c);                                  // 12841
      if (mergeParent) {                                                                                               // 12842
        var mergeEnd = mergeParent.row + mergeParent.rowspan - 1;                                                      // 12843
        if (mergeEnd > calc.endRow) {                                                                                  // 12844
          calc.endRow = mergeEnd;                                                                                      // 12845
          return afterViewportRowCalculatorOverride.call(this, calc); //recursively search upwards                     // 12846
        }                                                                                                              // 12847
      }                                                                                                                // 12848
    }                                                                                                                  // 12849
  }                                                                                                                    // 12850
};                                                                                                                     // 12851
                                                                                                                       // 12852
var afterViewportColumnCalculatorOverride = function (calc) {                                                          // 12853
  var mergeCellsSetting = this.getSettings().mergeCells;                                                               // 12854
  if (mergeCellsSetting) {                                                                                             // 12855
    var rowCount = this.countRows();                                                                                   // 12856
    var mergeParent;                                                                                                   // 12857
    for (var r = 0; r < rowCount; r++) {                                                                               // 12858
      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(r, calc.startColumn);                             // 12859
                                                                                                                       // 12860
      if (mergeParent) {                                                                                               // 12861
        if (mergeParent.col < calc.startColumn) {                                                                      // 12862
          calc.startColumn = mergeParent.col;                                                                          // 12863
          return afterViewportColumnCalculatorOverride.call(this, calc); //recursively search upwards                  // 12864
        }                                                                                                              // 12865
      }                                                                                                                // 12866
      mergeParent = this.mergeCells.mergedCellInfoCollection.getInfo(r, calc.endColumn);                               // 12867
      if (mergeParent) {                                                                                               // 12868
        var mergeEnd = mergeParent.col + mergeParent.colspan - 1;                                                      // 12869
        if (mergeEnd > calc.endColumn) {                                                                               // 12870
          calc.endColumn = mergeEnd;                                                                                   // 12871
          return afterViewportColumnCalculatorOverride.call(this, calc); //recursively search upwards                  // 12872
        }                                                                                                              // 12873
      }                                                                                                                // 12874
    }                                                                                                                  // 12875
  }                                                                                                                    // 12876
};                                                                                                                     // 12877
                                                                                                                       // 12878
var isMultipleSelection = function (isMultiple) {                                                                      // 12879
  if (isMultiple && this.mergeCells) {                                                                                 // 12880
    var mergedCells = this.mergeCells.mergedCellInfoCollection                                                         // 12881
      , selectionRange = this.getSelectedRange();                                                                      // 12882
                                                                                                                       // 12883
    for (var group in mergedCells) {                                                                                   // 12884
      if (selectionRange.highlight.row == mergedCells[group].row && selectionRange.highlight.col == mergedCells[group].col
        && selectionRange.to.row == mergedCells[group].row + mergedCells[group].rowspan - 1                            // 12886
        && selectionRange.to.col == mergedCells[group].col + mergedCells[group].colspan - 1) {                         // 12887
        return false;                                                                                                  // 12888
      }                                                                                                                // 12889
    }                                                                                                                  // 12890
  }                                                                                                                    // 12891
  return isMultiple;                                                                                                   // 12892
};                                                                                                                     // 12893
                                                                                                                       // 12894
Handsontable.hooks.add('beforeInit', beforeInit);                                                                      // 12895
Handsontable.hooks.add('afterInit', afterInit);                                                                        // 12896
Handsontable.hooks.add('beforeKeyDown', onBeforeKeyDown);                                                              // 12897
Handsontable.hooks.add('modifyTransformStart', modifyTransformFactory('modifyTransformStart'));                        // 12898
Handsontable.hooks.add('modifyTransformEnd', modifyTransformFactory('modifyTransformEnd'));                            // 12899
Handsontable.hooks.add('beforeSetRangeEnd', beforeSetRangeEnd);                                                        // 12900
Handsontable.hooks.add('beforeDrawBorders', beforeDrawAreaBorders);                                                    // 12901
Handsontable.hooks.add('afterIsMultipleSelection', isMultipleSelection);                                               // 12902
Handsontable.hooks.add('afterRenderer', afterRenderer);                                                                // 12903
Handsontable.hooks.add('afterContextMenuDefaultOptions', addMergeActionsToContextMenu);                                // 12904
Handsontable.hooks.add('afterGetCellMeta', afterGetCellMeta);                                                          // 12905
Handsontable.hooks.add('afterViewportRowCalculatorOverride', afterViewportRowCalculatorOverride);                      // 12906
Handsontable.hooks.add('afterViewportColumnCalculatorOverride', afterViewportColumnCalculatorOverride);                // 12907
                                                                                                                       // 12908
Handsontable.MergeCells = MergeCells;                                                                                  // 12909
                                                                                                                       // 12910
                                                                                                                       // 12911
(function () {                                                                                                         // 12912
                                                                                                                       // 12913
  function CustomBorders () {                                                                                          // 12914
                                                                                                                       // 12915
  }                                                                                                                    // 12916
                                                                                                                       // 12917
//  /***                                                                                                               // 12918
//   * Array for all custom border objects (for redraw)                                                                // 12919
//   * @type {{}}                                                                                                      // 12920
//   */                                                                                                                // 12921
//  var bordersArray = {},                                                                                             // 12922
        /***                                                                                                           // 12923
     * Current instance (table where borders should be placed)                                                         // 12924
     */                                                                                                                // 12925
  var instance;                                                                                                        // 12926
                                                                                                                       // 12927
                                                                                                                       // 12928
  /***                                                                                                                 // 12929
   * Check if plugin should be enabled                                                                                 // 12930
   */                                                                                                                  // 12931
  var checkEnable = function (customBorders) {                                                                         // 12932
    if(typeof customBorders === "boolean"){                                                                            // 12933
      if (customBorders == true){                                                                                      // 12934
        return true;                                                                                                   // 12935
      }                                                                                                                // 12936
    }                                                                                                                  // 12937
                                                                                                                       // 12938
    if(typeof customBorders === "object"){                                                                             // 12939
      if(customBorders.length > 0) {                                                                                   // 12940
        return true;                                                                                                   // 12941
      }                                                                                                                // 12942
    }                                                                                                                  // 12943
    return false;                                                                                                      // 12944
  };                                                                                                                   // 12945
                                                                                                                       // 12946
                                                                                                                       // 12947
  /***                                                                                                                 // 12948
   * Initialize plugin                                                                                                 // 12949
    */                                                                                                                 // 12950
  var init = function () {                                                                                             // 12951
                                                                                                                       // 12952
    if(checkEnable(this.getSettings().customBorders)){                                                                 // 12953
      if(!this.customBorders){                                                                                         // 12954
        instance = this;                                                                                               // 12955
        this.customBorders = new CustomBorders();                                                                      // 12956
      }                                                                                                                // 12957
    }                                                                                                                  // 12958
  };                                                                                                                   // 12959
                                                                                                                       // 12960
  /***                                                                                                                 // 12961
   * get index of border setting                                                                                       // 12962
   * @param className                                                                                                  // 12963
   * @returns {number}                                                                                                 // 12964
   */                                                                                                                  // 12965
  var getSettingIndex = function (className) {                                                                         // 12966
    for (var i = 0; i < instance.view.wt.selections.length; i++){                                                      // 12967
      if (instance.view.wt.selections[i].settings.className == className){                                             // 12968
        return i;                                                                                                      // 12969
      }                                                                                                                // 12970
    }                                                                                                                  // 12971
    return -1;                                                                                                         // 12972
  };                                                                                                                   // 12973
                                                                                                                       // 12974
  /***                                                                                                                 // 12975
   * Insert WalkontableSelection instance into Walkontable.settings                                                    // 12976
   * @param border                                                                                                     // 12977
   */                                                                                                                  // 12978
  var insertBorderIntoSettings = function (border) {                                                                   // 12979
    var coordinates = {                                                                                                // 12980
      row: border.row,                                                                                                 // 12981
      col: border.col                                                                                                  // 12982
    };                                                                                                                 // 12983
    var selection = new WalkontableSelection(border, new WalkontableCellRange(coordinates, coordinates, coordinates)); // 12984
    var index = getSettingIndex(border.className);                                                                     // 12985
                                                                                                                       // 12986
    if(index >=0) {                                                                                                    // 12987
      instance.view.wt.selections[index] = selection;                                                                  // 12988
    } else {                                                                                                           // 12989
      instance.view.wt.selections.push(selection);                                                                     // 12990
    }                                                                                                                  // 12991
  };                                                                                                                   // 12992
                                                                                                                       // 12993
  /***                                                                                                                 // 12994
   * Prepare borders from setting (single cell)                                                                        // 12995
   *                                                                                                                   // 12996
   * @param row                                                                                                        // 12997
   * @param col                                                                                                        // 12998
   * @param borderObj                                                                                                  // 12999
   */                                                                                                                  // 13000
  var prepareBorderFromCustomAdded = function (row, col, borderObj){                                                   // 13001
    var border = createEmptyBorders(row, col);                                                                         // 13002
    border = extendDefaultBorder(border, borderObj);                                                                   // 13003
    this.setCellMeta(row, col, 'borders', border);                                                                     // 13004
                                                                                                                       // 13005
    insertBorderIntoSettings(border);                                                                                  // 13006
  };                                                                                                                   // 13007
                                                                                                                       // 13008
  /***                                                                                                                 // 13009
   * Prepare borders from setting (object)                                                                             // 13010
   * @param rowObj                                                                                                     // 13011
   */                                                                                                                  // 13012
  var prepareBorderFromCustomAddedRange = function (rowObj) {                                                          // 13013
    var range = rowObj.range;                                                                                          // 13014
                                                                                                                       // 13015
    for (var row = range.from.row; row <= range.to.row; row ++) {                                                      // 13016
      for (var col = range.from.col; col<= range.to.col; col++){                                                       // 13017
                                                                                                                       // 13018
        var border = createEmptyBorders(row, col);                                                                     // 13019
        var add = 0;                                                                                                   // 13020
                                                                                                                       // 13021
        if(row == range.from.row) {                                                                                    // 13022
          add++;                                                                                                       // 13023
          if(rowObj.hasOwnProperty('top')){                                                                            // 13024
            border.top = rowObj.top;                                                                                   // 13025
          }                                                                                                            // 13026
        }                                                                                                              // 13027
                                                                                                                       // 13028
        if(row == range.to.row){                                                                                       // 13029
          add++;                                                                                                       // 13030
          if(rowObj.hasOwnProperty('bottom')){                                                                         // 13031
            border.bottom = rowObj.bottom;                                                                             // 13032
          }                                                                                                            // 13033
        }                                                                                                              // 13034
                                                                                                                       // 13035
        if(col == range.from.col) {                                                                                    // 13036
          add++;                                                                                                       // 13037
          if(rowObj.hasOwnProperty('left')){                                                                           // 13038
            border.left = rowObj.left;                                                                                 // 13039
          }                                                                                                            // 13040
        }                                                                                                              // 13041
                                                                                                                       // 13042
                                                                                                                       // 13043
        if (col == range.to.col) {                                                                                     // 13044
          add++;                                                                                                       // 13045
          if(rowObj.hasOwnProperty('right')){                                                                          // 13046
            border.right = rowObj.right;                                                                               // 13047
          }                                                                                                            // 13048
        }                                                                                                              // 13049
                                                                                                                       // 13050
                                                                                                                       // 13051
        if(add>0){                                                                                                     // 13052
          this.setCellMeta(row, col, 'borders', border);                                                               // 13053
          insertBorderIntoSettings(border);                                                                            // 13054
        }                                                                                                              // 13055
      }                                                                                                                // 13056
    }                                                                                                                  // 13057
  };                                                                                                                   // 13058
                                                                                                                       // 13059
  /***                                                                                                                 // 13060
   * Create separated class name for borders for each cell                                                             // 13061
   * @param row                                                                                                        // 13062
   * @param col                                                                                                        // 13063
   * @returns {string}                                                                                                 // 13064
   */                                                                                                                  // 13065
  var createClassName = function (row, col) {                                                                          // 13066
    return "border_row" + row + "col" + col;                                                                           // 13067
  };                                                                                                                   // 13068
                                                                                                                       // 13069
                                                                                                                       // 13070
  /***                                                                                                                 // 13071
   * Create default single border for each position (top/right/bottom/left)                                            // 13072
   * @returns {{width: number, color: string}}                                                                         // 13073
   */                                                                                                                  // 13074
  var createDefaultCustomBorder = function () {                                                                        // 13075
    return {                                                                                                           // 13076
      width: 1,                                                                                                        // 13077
      color: '#000'                                                                                                    // 13078
    };                                                                                                                 // 13079
  };                                                                                                                   // 13080
                                                                                                                       // 13081
                                                                                                                       // 13082
  /***                                                                                                                 // 13083
   * Create default object for empty border                                                                            // 13084
   * @returns {{hide: boolean}}                                                                                        // 13085
   */                                                                                                                  // 13086
  var createSingleEmptyBorder = function () {                                                                          // 13087
    return {                                                                                                           // 13088
      hide: true                                                                                                       // 13089
    }                                                                                                                  // 13090
  };                                                                                                                   // 13091
                                                                                                                       // 13092
                                                                                                                       // 13093
  /***                                                                                                                 // 13094
   * Create default Handsontable border object                                                                         // 13095
   * @returns {{width: number, color: string, cornerVisible: boolean}}                                                 // 13096
   */                                                                                                                  // 13097
  var createDefaultHtBorder = function () {                                                                            // 13098
    return {                                                                                                           // 13099
      width: 1,                                                                                                        // 13100
      color: '#000',                                                                                                   // 13101
      cornerVisible: false                                                                                             // 13102
    }                                                                                                                  // 13103
  };                                                                                                                   // 13104
                                                                                                                       // 13105
  /***                                                                                                                 // 13106
   * Prepare empty border for each cell with all custom borders hidden                                                 // 13107
   *                                                                                                                   // 13108
   * @param row                                                                                                        // 13109
   * @param col                                                                                                        // 13110
   * @returns {{className: *, border: *, row: *, col: *, top: {hide: boolean}, right: {hide: boolean}, bottom: {hide: boolean}, left: {hide: boolean}}}
   */                                                                                                                  // 13112
  var createEmptyBorders = function (row, col){                                                                        // 13113
    return {                                                                                                           // 13114
      className: createClassName(row, col),                                                                            // 13115
      border: createDefaultHtBorder(),                                                                                 // 13116
      row: row,                                                                                                        // 13117
      col: col,                                                                                                        // 13118
      top: createSingleEmptyBorder(),                                                                                  // 13119
      right: createSingleEmptyBorder(),                                                                                // 13120
      bottom: createSingleEmptyBorder(),                                                                               // 13121
      left: createSingleEmptyBorder()                                                                                  // 13122
    }                                                                                                                  // 13123
  };                                                                                                                   // 13124
                                                                                                                       // 13125
                                                                                                                       // 13126
  var extendDefaultBorder = function (defaultBorder, customBorder){                                                    // 13127
                                                                                                                       // 13128
    if(customBorder.hasOwnProperty('border')){                                                                         // 13129
      defaultBorder.border = customBorder.border;                                                                      // 13130
    }                                                                                                                  // 13131
                                                                                                                       // 13132
    if(customBorder.hasOwnProperty('top')){                                                                            // 13133
      defaultBorder.top = customBorder.top;                                                                            // 13134
    }                                                                                                                  // 13135
                                                                                                                       // 13136
    if(customBorder.hasOwnProperty('right')){                                                                          // 13137
      defaultBorder.right = customBorder.right;                                                                        // 13138
    }                                                                                                                  // 13139
                                                                                                                       // 13140
    if(customBorder.hasOwnProperty('bottom')){                                                                         // 13141
      defaultBorder.bottom = customBorder.bottom;                                                                      // 13142
    }                                                                                                                  // 13143
                                                                                                                       // 13144
    if(customBorder.hasOwnProperty('left')){                                                                           // 13145
      defaultBorder.left = customBorder.left;                                                                          // 13146
    }                                                                                                                  // 13147
    return defaultBorder;                                                                                              // 13148
  };                                                                                                                   // 13149
                                                                                                                       // 13150
  /***                                                                                                                 // 13151
   * Remove borders divs from DOM                                                                                      // 13152
   *                                                                                                                   // 13153
   * @param borderClassName                                                                                            // 13154
   */                                                                                                                  // 13155
  var removeBordersFromDom = function (borderClassName) {                                                              // 13156
    var borders = document.querySelectorAll("." + borderClassName);                                                    // 13157
                                                                                                                       // 13158
    for(var i = 0; i< borders.length; i++) {                                                                           // 13159
      if (borders[i]) {                                                                                                // 13160
        if(borders[i].nodeName != 'TD') {                                                                              // 13161
          var parent = borders[i].parentNode;                                                                          // 13162
          if(parent.parentNode) {                                                                                      // 13163
            parent.parentNode.removeChild(parent);                                                                     // 13164
          }                                                                                                            // 13165
        }                                                                                                              // 13166
      }                                                                                                                // 13167
    }                                                                                                                  // 13168
  };                                                                                                                   // 13169
                                                                                                                       // 13170
                                                                                                                       // 13171
  /***                                                                                                                 // 13172
   * Remove border (triggered from context menu)                                                                       // 13173
   *                                                                                                                   // 13174
   * @param row                                                                                                        // 13175
   * @param col                                                                                                        // 13176
   */                                                                                                                  // 13177
  var removeAllBorders = function(row,col) {                                                                           // 13178
    var borderClassName = createClassName(row,col);                                                                    // 13179
    removeBordersFromDom(borderClassName);                                                                             // 13180
    this.removeCellMeta(row, col, 'borders');                                                                          // 13181
  };                                                                                                                   // 13182
                                                                                                                       // 13183
  /***                                                                                                                 // 13184
   * Set borders for each cell re. to border position                                                                  // 13185
   *                                                                                                                   // 13186
   * @param row                                                                                                        // 13187
   * @param col                                                                                                        // 13188
   * @param place                                                                                                      // 13189
   * @param remove                                                                                                     // 13190
   */                                                                                                                  // 13191
  var setBorder = function (row, col,place, remove){                                                                   // 13192
                                                                                                                       // 13193
    var bordersMeta = this.getCellMeta(row, col).borders;                                                              // 13194
    if (!bordersMeta || bordersMeta.border == undefined){                                                              // 13195
      bordersMeta = createEmptyBorders(row, col);                                                                      // 13196
    }                                                                                                                  // 13197
                                                                                                                       // 13198
    if (remove) {                                                                                                      // 13199
      bordersMeta[place] = createSingleEmptyBorder();                                                                  // 13200
    } else {                                                                                                           // 13201
      bordersMeta[place] = createDefaultCustomBorder();                                                                // 13202
    }                                                                                                                  // 13203
                                                                                                                       // 13204
    this.setCellMeta(row, col, 'borders', bordersMeta);                                                                // 13205
                                                                                                                       // 13206
    var borderClassName = createClassName(row,col);                                                                    // 13207
    removeBordersFromDom(borderClassName);                                                                             // 13208
    insertBorderIntoSettings(bordersMeta);                                                                             // 13209
                                                                                                                       // 13210
    this.render();                                                                                                     // 13211
  };                                                                                                                   // 13212
                                                                                                                       // 13213
                                                                                                                       // 13214
  /***                                                                                                                 // 13215
   * Prepare borders based on cell and border position                                                                 // 13216
   *                                                                                                                   // 13217
   * @param range                                                                                                      // 13218
   * @param place                                                                                                      // 13219
   * @param remove                                                                                                     // 13220
   */                                                                                                                  // 13221
  var prepareBorder = function (range, place, remove) {                                                                // 13222
                                                                                                                       // 13223
    if (range.from.row == range.to.row && range.from.col == range.to.col){                                             // 13224
      if(place == "noBorders"){                                                                                        // 13225
        removeAllBorders.call(this, range.from.row, range.from.col);                                                   // 13226
      } else {                                                                                                         // 13227
        setBorder.call(this, range.from.row, range.from.col, place, remove);                                           // 13228
      }                                                                                                                // 13229
    } else {                                                                                                           // 13230
      switch (place) {                                                                                                 // 13231
        case "noBorders":                                                                                              // 13232
          for(var column = range.from.col; column <= range.to.col; column++){                                          // 13233
            for(var row = range.from.row; row <= range.to.row; row++) {                                                // 13234
              removeAllBorders.call(this, row, column);                                                                // 13235
            }                                                                                                          // 13236
          }                                                                                                            // 13237
          break;                                                                                                       // 13238
        case "top":                                                                                                    // 13239
          for(var topCol = range.from.col; topCol <= range.to.col; topCol++){                                          // 13240
            setBorder.call(this, range.from.row, topCol, place, remove);                                               // 13241
          }                                                                                                            // 13242
          break;                                                                                                       // 13243
        case "right":                                                                                                  // 13244
          for(var rowRight = range.from.row; rowRight <=range.to.row; rowRight++){                                     // 13245
            setBorder.call(this,rowRight, range.to.col, place);                                                        // 13246
          }                                                                                                            // 13247
          break;                                                                                                       // 13248
        case "bottom":                                                                                                 // 13249
          for(var bottomCol = range.from.col; bottomCol <= range.to.col; bottomCol++){                                 // 13250
            setBorder.call(this, range.to.row, bottomCol, place);                                                      // 13251
          }                                                                                                            // 13252
          break;                                                                                                       // 13253
        case "left":                                                                                                   // 13254
          for(var rowLeft = range.from.row; rowLeft <=range.to.row; rowLeft++){                                        // 13255
            setBorder.call(this,rowLeft, range.from.col, place);                                                       // 13256
          }                                                                                                            // 13257
          break;                                                                                                       // 13258
      }                                                                                                                // 13259
    }                                                                                                                  // 13260
  };                                                                                                                   // 13261
                                                                                                                       // 13262
  /***                                                                                                                 // 13263
   * Check if selection has border by className                                                                        // 13264
   *                                                                                                                   // 13265
   * @param hot                                                                                                        // 13266
   * @param direction                                                                                                  // 13267
   */                                                                                                                  // 13268
  var checkSelectionBorders = function (hot, direction) {                                                              // 13269
    var atLeastOneHasBorder = false;                                                                                   // 13270
                                                                                                                       // 13271
    hot.getSelectedRange().forAll(function(r, c) {                                                                     // 13272
      var metaBorders = hot.getCellMeta(r,c).borders;                                                                  // 13273
                                                                                                                       // 13274
      if (metaBorders) {                                                                                               // 13275
        if(direction) {                                                                                                // 13276
          if (!metaBorders[direction].hasOwnProperty('hide')){                                                         // 13277
            atLeastOneHasBorder = true;                                                                                // 13278
            return false; //breaks forAll                                                                              // 13279
          }                                                                                                            // 13280
        } else {                                                                                                       // 13281
          atLeastOneHasBorder = true;                                                                                  // 13282
          return false; //breaks forAll                                                                                // 13283
        }                                                                                                              // 13284
      }                                                                                                                // 13285
    });                                                                                                                // 13286
    return atLeastOneHasBorder;                                                                                        // 13287
  };                                                                                                                   // 13288
                                                                                                                       // 13289
                                                                                                                       // 13290
  /***                                                                                                                 // 13291
   * Mark label in contextMenu as selected                                                                             // 13292
   *                                                                                                                   // 13293
   * @param label                                                                                                      // 13294
   * @returns {string}                                                                                                 // 13295
   */                                                                                                                  // 13296
  var markSelected = function (label) {                                                                                // 13297
    return "<span class='selected'>" + String.fromCharCode(10003) + "</span>" + label; // workaround for https://github.com/handsontable/handsontable/issues/1946
  };                                                                                                                   // 13299
                                                                                                                       // 13300
  /***                                                                                                                 // 13301
   * Add border options to context menu                                                                                // 13302
   *                                                                                                                   // 13303
   * @param defaultOptions                                                                                             // 13304
   */                                                                                                                  // 13305
  var addBordersOptionsToContextMenu = function (defaultOptions) {                                                     // 13306
    if(!this.getSettings().customBorders){                                                                             // 13307
      return;                                                                                                          // 13308
    }                                                                                                                  // 13309
                                                                                                                       // 13310
    defaultOptions.items.push(Handsontable.ContextMenu.SEPARATOR);                                                     // 13311
                                                                                                                       // 13312
    defaultOptions.items.push({                                                                                        // 13313
      key: 'borders',                                                                                                  // 13314
      name: 'Borders',                                                                                                 // 13315
      submenu: {                                                                                                       // 13316
        items: {                                                                                                       // 13317
          top: {                                                                                                       // 13318
            name: function () {                                                                                        // 13319
              var label = "Top";                                                                                       // 13320
              var hasBorder = checkSelectionBorders(this, 'top');                                                      // 13321
              if(hasBorder) {                                                                                          // 13322
                label = markSelected(label);                                                                           // 13323
              }                                                                                                        // 13324
                                                                                                                       // 13325
              return label;                                                                                            // 13326
            },                                                                                                         // 13327
            callback: function () {                                                                                    // 13328
              var hasBorder = checkSelectionBorders(this, 'top');                                                      // 13329
              prepareBorder.call(this, this.getSelectedRange(), 'top', hasBorder);                                     // 13330
            },                                                                                                         // 13331
            disabled: false                                                                                            // 13332
          },                                                                                                           // 13333
          right: {                                                                                                     // 13334
            name: function () {                                                                                        // 13335
              var label = 'Right';                                                                                     // 13336
              var hasBorder = checkSelectionBorders(this, 'right');                                                    // 13337
              if(hasBorder) {                                                                                          // 13338
                label = markSelected(label);                                                                           // 13339
              }                                                                                                        // 13340
              return label;                                                                                            // 13341
            },                                                                                                         // 13342
            callback: function () {                                                                                    // 13343
              var hasBorder = checkSelectionBorders(this, 'right');                                                    // 13344
              prepareBorder.call(this, this.getSelectedRange(), 'right', hasBorder);                                   // 13345
            },                                                                                                         // 13346
            disabled: false                                                                                            // 13347
          },                                                                                                           // 13348
          bottom: {                                                                                                    // 13349
            name: function () {                                                                                        // 13350
              var label = 'Bottom';                                                                                    // 13351
              var hasBorder = checkSelectionBorders(this, 'bottom');                                                   // 13352
              if(hasBorder) {                                                                                          // 13353
                label = markSelected(label);                                                                           // 13354
              }                                                                                                        // 13355
              return label;                                                                                            // 13356
            },                                                                                                         // 13357
            callback: function () {                                                                                    // 13358
              var hasBorder = checkSelectionBorders(this, 'bottom');                                                   // 13359
              prepareBorder.call(this, this.getSelectedRange(), 'bottom', hasBorder);                                  // 13360
            },                                                                                                         // 13361
            disabled: false                                                                                            // 13362
          },                                                                                                           // 13363
          left: {                                                                                                      // 13364
            name: function () {                                                                                        // 13365
              var label = 'Left';                                                                                      // 13366
              var hasBorder = checkSelectionBorders(this, 'left');                                                     // 13367
              if(hasBorder) {                                                                                          // 13368
                label = markSelected(label);                                                                           // 13369
              }                                                                                                        // 13370
                                                                                                                       // 13371
              return label                                                                                             // 13372
            },                                                                                                         // 13373
            callback: function () {                                                                                    // 13374
              var hasBorder = checkSelectionBorders(this, 'left');                                                     // 13375
              prepareBorder.call(this, this.getSelectedRange(), 'left', hasBorder);                                    // 13376
            },                                                                                                         // 13377
            disabled: false                                                                                            // 13378
          },                                                                                                           // 13379
          remove: {                                                                                                    // 13380
            name: 'Remove border(s)',                                                                                  // 13381
            callback: function () {                                                                                    // 13382
              prepareBorder.call(this, this.getSelectedRange(), 'noBorders');                                          // 13383
            },                                                                                                         // 13384
            disabled: function () {                                                                                    // 13385
              return !checkSelectionBorders(this);                                                                     // 13386
            }                                                                                                          // 13387
          }                                                                                                            // 13388
        }                                                                                                              // 13389
      }                                                                                                                // 13390
    });                                                                                                                // 13391
  };                                                                                                                   // 13392
                                                                                                                       // 13393
  Handsontable.hooks.add('beforeInit', init);                                                                          // 13394
  Handsontable.hooks.add('afterContextMenuDefaultOptions', addBordersOptionsToContextMenu);                            // 13395
                                                                                                                       // 13396
                                                                                                                       // 13397
  Handsontable.hooks.add('afterInit', function () {                                                                    // 13398
    var customBorders = this.getSettings().customBorders;                                                              // 13399
                                                                                                                       // 13400
    if (customBorders){                                                                                                // 13401
                                                                                                                       // 13402
      for(var i = 0; i< customBorders.length; i++) {                                                                   // 13403
        if(customBorders[i].range){                                                                                    // 13404
          prepareBorderFromCustomAddedRange.call(this,customBorders[i]);                                               // 13405
        } else {                                                                                                       // 13406
          prepareBorderFromCustomAdded.call(this,customBorders[i].row, customBorders[i].col, customBorders[i]);        // 13407
        }                                                                                                              // 13408
      }                                                                                                                // 13409
                                                                                                                       // 13410
      this.render();                                                                                                   // 13411
      this.view.wt.draw(true);                                                                                         // 13412
    }                                                                                                                  // 13413
                                                                                                                       // 13414
  });                                                                                                                  // 13415
                                                                                                                       // 13416
  Handsontable.CustomBorders = CustomBorders;                                                                          // 13417
                                                                                                                       // 13418
}());                                                                                                                  // 13419
                                                                                                                       // 13420
/**                                                                                                                    // 13421
 * HandsontableManualRowMove                                                                                           // 13422
 *                                                                                                                     // 13423
 * Has 2 UI components:                                                                                                // 13424
 * - handle - the draggable element that sets the desired position of the row                                          // 13425
 * - guide - the helper guide that shows the desired position as a horizontal guide                                    // 13426
 *                                                                                                                     // 13427
 * Warning! Whenever you make a change in this file, make an analogous change in manualRowMove.js                      // 13428
 * @constructor                                                                                                        // 13429
 */                                                                                                                    // 13430
(function (Handsontable) {                                                                                             // 13431
  function HandsontableManualRowMove() {                                                                               // 13432
                                                                                                                       // 13433
    var startRow,                                                                                                      // 13434
        endRow,                                                                                                        // 13435
        startY,                                                                                                        // 13436
        startOffset,                                                                                                   // 13437
        currentRow,                                                                                                    // 13438
        currentTH,                                                                                                     // 13439
        handle = document.createElement('DIV'),                                                                        // 13440
        guide = document.createElement('DIV'),                                                                         // 13441
        eventManager = Handsontable.eventManager(this);                                                                // 13442
                                                                                                                       // 13443
    handle.className = 'manualRowMover';                                                                               // 13444
    guide.className = 'manualRowMoverGuide';                                                                           // 13445
                                                                                                                       // 13446
    var saveManualRowPositions = function () {                                                                         // 13447
      var instance = this;                                                                                             // 13448
      Handsontable.hooks.run(instance, 'persistentStateSave', 'manualRowPositions', instance.manualRowPositions);      // 13449
    };                                                                                                                 // 13450
                                                                                                                       // 13451
    var loadManualRowPositions = function () {                                                                         // 13452
      var instance = this,                                                                                             // 13453
          storedState = {};                                                                                            // 13454
      Handsontable.hooks.run(instance, 'persistentStateLoad', 'manualRowPositions', storedState);                      // 13455
      return storedState.value;                                                                                        // 13456
    };                                                                                                                 // 13457
                                                                                                                       // 13458
    function setupHandlePosition(TH) {                                                                                 // 13459
      instance = this;                                                                                                 // 13460
      currentTH = TH;                                                                                                  // 13461
                                                                                                                       // 13462
      var row = this.view.wt.wtTable.getCoords(TH).row; //getCoords returns WalkontableCellCoords                      // 13463
      if (row >= 0) { //if not row header                                                                              // 13464
        currentRow = row;                                                                                              // 13465
        var box = currentTH.getBoundingClientRect();                                                                   // 13466
        startOffset = box.top;                                                                                         // 13467
        handle.style.top = startOffset + 'px';                                                                         // 13468
        handle.style.left = box.left + 'px';                                                                           // 13469
        instance.rootElement.appendChild(handle);                                                                      // 13470
      }                                                                                                                // 13471
    }                                                                                                                  // 13472
                                                                                                                       // 13473
    function refreshHandlePosition(TH, delta) {                                                                        // 13474
      var box = TH.getBoundingClientRect();                                                                            // 13475
      var handleHeight = 6;                                                                                            // 13476
      if (delta > 0) {                                                                                                 // 13477
        handle.style.top = (box.top + box.height - handleHeight) + 'px';                                               // 13478
      }                                                                                                                // 13479
      else {                                                                                                           // 13480
        handle.style.top = box.top + 'px';                                                                             // 13481
      }                                                                                                                // 13482
    }                                                                                                                  // 13483
                                                                                                                       // 13484
    function setupGuidePosition() {                                                                                    // 13485
      var instance = this;                                                                                             // 13486
      Handsontable.Dom.addClass(handle, 'active');                                                                     // 13487
      Handsontable.Dom.addClass(guide, 'active');                                                                      // 13488
      var box = currentTH.getBoundingClientRect();                                                                     // 13489
      guide.style.width = instance.view.maximumVisibleElementWidth(0) + 'px';                                          // 13490
      guide.style.height = box.height + 'px';                                                                          // 13491
      guide.style.top = startOffset + 'px';                                                                            // 13492
      guide.style.left = handle.style.left;                                                                            // 13493
      instance.rootElement.appendChild(guide);                                                                         // 13494
    }                                                                                                                  // 13495
                                                                                                                       // 13496
    function refreshGuidePosition(diff) {                                                                              // 13497
      guide.style.top = startOffset + diff + 'px';                                                                     // 13498
    }                                                                                                                  // 13499
                                                                                                                       // 13500
    function hideHandleAndGuide() {                                                                                    // 13501
      Handsontable.Dom.removeClass(handle, 'active');                                                                  // 13502
      Handsontable.Dom.removeClass(guide, 'active');                                                                   // 13503
    }                                                                                                                  // 13504
                                                                                                                       // 13505
    var checkRowHeader = function (element) {                                                                          // 13506
      if (element.tagName != 'BODY') {                                                                                 // 13507
        if (element.parentNode.tagName == 'TBODY') {                                                                   // 13508
          return true;                                                                                                 // 13509
        } else {                                                                                                       // 13510
          element = element.parentNode;                                                                                // 13511
          return checkRowHeader(element);                                                                              // 13512
        }                                                                                                              // 13513
      }                                                                                                                // 13514
      return false;                                                                                                    // 13515
    };                                                                                                                 // 13516
                                                                                                                       // 13517
    var getTHFromTargetElement = function (element) {                                                                  // 13518
      if (element.tagName != 'TABLE') {                                                                                // 13519
        if (element.tagName == 'TH') {                                                                                 // 13520
          return element;                                                                                              // 13521
        } else {                                                                                                       // 13522
          return getTHFromTargetElement(element.parentNode);                                                           // 13523
        }                                                                                                              // 13524
      }                                                                                                                // 13525
      return null;                                                                                                     // 13526
    };                                                                                                                 // 13527
                                                                                                                       // 13528
    var bindEvents = function () {                                                                                     // 13529
      var instance = this;                                                                                             // 13530
      var pressed;                                                                                                     // 13531
                                                                                                                       // 13532
                                                                                                                       // 13533
      eventManager.addEventListener(instance.rootElement,'mouseover', function (e){                                    // 13534
        if(checkRowHeader(e.target)){                                                                                  // 13535
          var th = getTHFromTargetElement(e.target)                                                                    // 13536
          if (th) {                                                                                                    // 13537
            if (pressed) {                                                                                             // 13538
              endRow = instance.view.wt.wtTable.getCoords(th).row;                                                     // 13539
              refreshHandlePosition(th, endRow - startRow);                                                            // 13540
            }                                                                                                          // 13541
            else {                                                                                                     // 13542
              setupHandlePosition.call(instance, th);                                                                  // 13543
            }                                                                                                          // 13544
          }                                                                                                            // 13545
        }                                                                                                              // 13546
      });                                                                                                              // 13547
                                                                                                                       // 13548
      eventManager.addEventListener(instance.rootElement,'mousedown', function (e) {                                   // 13549
        if (Handsontable.Dom.hasClass(e.target, 'manualRowMover')) {                                                   // 13550
          startY = Handsontable.helper.pageY(e);                                                                       // 13551
          setupGuidePosition.call(instance);                                                                           // 13552
          pressed = instance;                                                                                          // 13553
                                                                                                                       // 13554
          startRow = currentRow;                                                                                       // 13555
          endRow = currentRow;                                                                                         // 13556
        }                                                                                                              // 13557
      });                                                                                                              // 13558
                                                                                                                       // 13559
      eventManager.addEventListener(window,'mousemove',function (e) {                                                  // 13560
        if (pressed) {                                                                                                 // 13561
          refreshGuidePosition(Handsontable.helper.pageY(e) - startY);                                                 // 13562
        }                                                                                                              // 13563
      });                                                                                                              // 13564
                                                                                                                       // 13565
      eventManager.addEventListener(window,'mouseup',function (e) {                                                    // 13566
        if (pressed) {                                                                                                 // 13567
          hideHandleAndGuide();                                                                                        // 13568
          pressed = false;                                                                                             // 13569
                                                                                                                       // 13570
          createPositionData(instance.manualRowPositions, instance.countRows());                                       // 13571
          instance.manualRowPositions.splice(endRow, 0, instance.manualRowPositions.splice(startRow, 1)[0]);           // 13572
                                                                                                                       // 13573
          instance.forceFullRender = true;                                                                             // 13574
          instance.view.render(); //updates all                                                                        // 13575
                                                                                                                       // 13576
          saveManualRowPositions.call(instance);                                                                       // 13577
                                                                                                                       // 13578
          Handsontable.hooks.run(instance, 'afterRowMove', startRow, endRow);                                          // 13579
                                                                                                                       // 13580
          setupHandlePosition.call(instance, currentTH);                                                               // 13581
        }                                                                                                              // 13582
      });                                                                                                              // 13583
                                                                                                                       // 13584
      instance.addHook('afterDestroy', unbindEvents);                                                                  // 13585
    };                                                                                                                 // 13586
                                                                                                                       // 13587
    var unbindEvents = function () {                                                                                   // 13588
      eventManager.clear();                                                                                            // 13589
    };                                                                                                                 // 13590
                                                                                                                       // 13591
    var createPositionData = function (positionArr, len) {                                                             // 13592
      if (positionArr.length < len) {                                                                                  // 13593
        for (var i = positionArr.length; i < len; i++) {                                                               // 13594
          positionArr[i] = i;                                                                                          // 13595
        }                                                                                                              // 13596
      }                                                                                                                // 13597
    };                                                                                                                 // 13598
                                                                                                                       // 13599
    this.beforeInit = function () {                                                                                    // 13600
      this.manualRowPositions = [];                                                                                    // 13601
    };                                                                                                                 // 13602
                                                                                                                       // 13603
    this.init = function (source) {                                                                                    // 13604
      var instance = this;                                                                                             // 13605
                                                                                                                       // 13606
      var manualRowMoveEnabled = !!(instance.getSettings().manualRowMove);                                             // 13607
                                                                                                                       // 13608
      if (manualRowMoveEnabled) {                                                                                      // 13609
        var initialManualRowPositions = instance.getSettings().manualRowMove;                                          // 13610
                                                                                                                       // 13611
        var loadedManualRowPostions = loadManualRowPositions.call(instance);                                           // 13612
                                                                                                                       // 13613
        if (typeof loadedManualRowPostions != 'undefined') {                                                           // 13614
          this.manualRowPositions = loadedManualRowPostions;                                                           // 13615
        } else if(Array.isArray(initialManualRowPositions)) {                                                          // 13616
          this.manualRowPositions = initialManualRowPositions;                                                         // 13617
        } else {                                                                                                       // 13618
          this.manualRowPositions = [];                                                                                // 13619
        }                                                                                                              // 13620
                                                                                                                       // 13621
        if (source === 'afterInit') {                                                                                  // 13622
          bindEvents.call(this);                                                                                       // 13623
          if (this.manualRowPositions.length > 0) {                                                                    // 13624
            instance.forceFullRender = true;                                                                           // 13625
            instance.render();                                                                                         // 13626
          }                                                                                                            // 13627
        }                                                                                                              // 13628
      } else {                                                                                                         // 13629
        unbindEvents.call(this);                                                                                       // 13630
        instance.manualRowPositions = [];                                                                              // 13631
      }                                                                                                                // 13632
                                                                                                                       // 13633
    };                                                                                                                 // 13634
                                                                                                                       // 13635
    this.modifyRow = function (row) {                                                                                  // 13636
      var instance = this;                                                                                             // 13637
      if (instance.getSettings().manualRowMove) {                                                                      // 13638
        if (typeof instance.manualRowPositions[row] === 'undefined') {                                                 // 13639
          createPositionData(this.manualRowPositions, row + 1);                                                        // 13640
        }                                                                                                              // 13641
        return instance.manualRowPositions[row];                                                                       // 13642
      }                                                                                                                // 13643
                                                                                                                       // 13644
      return row;                                                                                                      // 13645
    };                                                                                                                 // 13646
  }                                                                                                                    // 13647
                                                                                                                       // 13648
  var htManualRowMove = new HandsontableManualRowMove();                                                               // 13649
                                                                                                                       // 13650
  Handsontable.hooks.add('beforeInit', htManualRowMove.beforeInit);                                                    // 13651
  Handsontable.hooks.add('afterInit',  function () {                                                                   // 13652
    htManualRowMove.init.call(this, 'afterInit');                                                                      // 13653
  });                                                                                                                  // 13654
                                                                                                                       // 13655
  Handsontable.hooks.add('afterUpdateSettings', function () {                                                          // 13656
    htManualRowMove.init.call(this, 'afterUpdateSettings');                                                            // 13657
  });                                                                                                                  // 13658
                                                                                                                       // 13659
  Handsontable.hooks.add('modifyRow', htManualRowMove.modifyRow);                                                      // 13660
  Handsontable.hooks.register('afterRowMove');                                                                         // 13661
                                                                                                                       // 13662
})(Handsontable);                                                                                                      // 13663
                                                                                                                       // 13664
/**                                                                                                                    // 13665
 * This plugin provides "drag-down" and "copy-down" functionalities, both operated                                     // 13666
 * using the small square in the right bottom of the cell selection.                                                   // 13667
 *                                                                                                                     // 13668
 * "Drag-down" expands the value of the selected cells to the neighbouring                                             // 13669
 * cells when you drag the small square in the corner.                                                                 // 13670
 *                                                                                                                     // 13671
 * "Copy-down" copies the value of the selection to all empty cells                                                    // 13672
 * below when you double click the small square.                                                                       // 13673
 */                                                                                                                    // 13674
(function (Handsontable) {                                                                                             // 13675
  'use strict';                                                                                                        // 13676
                                                                                                                       // 13677
  function Autofill(instance) {                                                                                        // 13678
    this.instance = instance;                                                                                          // 13679
    this.addingStarted = false;                                                                                        // 13680
                                                                                                                       // 13681
    var  wtOnCellCornerMouseDown,                                                                                      // 13682
      wtOnCellMouseOver,                                                                                               // 13683
      mouseDownOnCellCorner = false,                                                                                   // 13684
      plugin = this,                                                                                                   // 13685
      eventManager = Handsontable.eventManager(instance);                                                              // 13686
                                                                                                                       // 13687
                                                                                                                       // 13688
    var mouseUpCallback = function (event) {                                                                           // 13689
      if (!instance.autofill) {                                                                                        // 13690
        return true;                                                                                                   // 13691
      }                                                                                                                // 13692
                                                                                                                       // 13693
      if (instance.autofill.handle && instance.autofill.handle.isDragged) {                                            // 13694
        if (instance.autofill.handle.isDragged > 1) {                                                                  // 13695
          instance.autofill.apply();                                                                                   // 13696
        }                                                                                                              // 13697
        instance.autofill.handle.isDragged = 0;                                                                        // 13698
        mouseDownOnCellCorner = false;                                                                                 // 13699
      }                                                                                                                // 13700
    };                                                                                                                 // 13701
                                                                                                                       // 13702
    eventManager.addEventListener(document, 'mouseup', function (event) {                                              // 13703
      mouseUpCallback(event);                                                                                          // 13704
    });                                                                                                                // 13705
                                                                                                                       // 13706
    eventManager.addEventListener(document,'mousemove', function (event){                                              // 13707
      if (!plugin.instance.autofill) {                                                                                 // 13708
        return 0;                                                                                                      // 13709
      }                                                                                                                // 13710
                                                                                                                       // 13711
      var tableBottom = Handsontable.Dom.offset(plugin.instance.table).top - (window.pageYOffset || document.documentElement.scrollTop) + Handsontable.Dom.outerHeight(plugin.instance.table)
        , tableRight = Handsontable.Dom.offset(plugin.instance.table).left - (window.pageXOffset || document.documentElement.scrollLeft) + Handsontable.Dom.outerWidth(plugin.instance.table);
                                                                                                                       // 13714
                                                                                                                       // 13715
      if (plugin.addingStarted === false && plugin.instance.autofill.handle.isDragged > 0 && event.clientY > tableBottom && event.clientX <= tableRight) { // dragged outside bottom
        this.mouseDragOutside = true;                                                                                  // 13717
        plugin.addingStarted = true;                                                                                   // 13718
      } else {                                                                                                         // 13719
        this.mouseDragOutside = false;                                                                                 // 13720
      }                                                                                                                // 13721
                                                                                                                       // 13722
      if (this.mouseDragOutside) {                                                                                     // 13723
        setTimeout(function () {                                                                                       // 13724
          plugin.addingStarted = false;                                                                                // 13725
          plugin.instance.alter('insert_row');                                                                         // 13726
        }, 200);                                                                                                       // 13727
      }                                                                                                                // 13728
    });                                                                                                                // 13729
                                                                                                                       // 13730
    /*                                                                                                                 // 13731
     * Appeding autofill-specific methods to walkontable event settings                                                // 13732
     */                                                                                                                // 13733
    wtOnCellCornerMouseDown = this.instance.view.wt.wtSettings.settings.onCellCornerMouseDown;                         // 13734
    this.instance.view.wt.wtSettings.settings.onCellCornerMouseDown = function (event) {                               // 13735
      instance.autofill.handle.isDragged = 1;                                                                          // 13736
      mouseDownOnCellCorner = true;                                                                                    // 13737
                                                                                                                       // 13738
      wtOnCellCornerMouseDown(event);                                                                                  // 13739
    };                                                                                                                 // 13740
                                                                                                                       // 13741
    wtOnCellMouseOver = this.instance.view.wt.wtSettings.settings.onCellMouseOver;                                     // 13742
    this.instance.view.wt.wtSettings.settings.onCellMouseOver = function (event, coords, TD, wt) {                     // 13743
                                                                                                                       // 13744
      if (instance.autofill && (mouseDownOnCellCorner && !instance.view.isMouseDown() && instance.autofill.handle && instance.autofill.handle.isDragged)) {
        instance.autofill.handle.isDragged++;                                                                          // 13746
        instance.autofill.showBorder(coords);                                                                          // 13747
        instance.autofill.checkIfNewRowNeeded();                                                                       // 13748
      }                                                                                                                // 13749
                                                                                                                       // 13750
      wtOnCellMouseOver(event, coords, TD, wt);                                                                        // 13751
    };                                                                                                                 // 13752
                                                                                                                       // 13753
    this.instance.view.wt.wtSettings.settings.onCellCornerDblClick = function () {                                     // 13754
      instance.autofill.selectAdjacent();                                                                              // 13755
    };                                                                                                                 // 13756
                                                                                                                       // 13757
  }                                                                                                                    // 13758
                                                                                                                       // 13759
  /**                                                                                                                  // 13760
   * Create fill handle and fill border objects                                                                        // 13761
   */                                                                                                                  // 13762
  Autofill.prototype.init = function () {                                                                              // 13763
    this.handle = {};                                                                                                  // 13764
  },                                                                                                                   // 13765
                                                                                                                       // 13766
  /**                                                                                                                  // 13767
   * Hide fill handle and fill border permanently                                                                      // 13768
   */                                                                                                                  // 13769
    Autofill.prototype.disable = function () {                                                                         // 13770
      this.handle.disabled = true;                                                                                     // 13771
    },                                                                                                                 // 13772
                                                                                                                       // 13773
  /**                                                                                                                  // 13774
   * Selects cells down to the last row in the left column, then fills down to that cell                               // 13775
   */                                                                                                                  // 13776
    Autofill.prototype.selectAdjacent = function () {                                                                  // 13777
      var select, data, r, maxR, c;                                                                                    // 13778
                                                                                                                       // 13779
      if (this.instance.selection.isMultiple()) {                                                                      // 13780
        select = this.instance.view.wt.selections.area.getCorners();                                                   // 13781
      }                                                                                                                // 13782
      else {                                                                                                           // 13783
        select = this.instance.view.wt.selections.current.getCorners();                                                // 13784
      }                                                                                                                // 13785
                                                                                                                       // 13786
      data = this.instance.getData();                                                                                  // 13787
      rows : for (r = select[2] + 1; r < this.instance.countRows(); r++) {                                             // 13788
        for (c = select[1]; c <= select[3]; c++) {                                                                     // 13789
          if (data[r][c]) {                                                                                            // 13790
            break rows;                                                                                                // 13791
          }                                                                                                            // 13792
        }                                                                                                              // 13793
        if (!!data[r][select[1] - 1] || !!data[r][select[3] + 1]) {                                                    // 13794
          maxR = r;                                                                                                    // 13795
        }                                                                                                              // 13796
      }                                                                                                                // 13797
      if (maxR) {                                                                                                      // 13798
        this.instance.view.wt.selections.fill.clear();                                                                 // 13799
        this.instance.view.wt.selections.fill.add(new WalkontableCellCoords(select[0], select[1]));                    // 13800
        this.instance.view.wt.selections.fill.add(new WalkontableCellCoords(maxR, select[3]));                         // 13801
        this.apply();                                                                                                  // 13802
      }                                                                                                                // 13803
    },                                                                                                                 // 13804
                                                                                                                       // 13805
  /**                                                                                                                  // 13806
   * Apply fill values to the area in fill border, omitting the selection border                                       // 13807
   */                                                                                                                  // 13808
    Autofill.prototype.apply = function () {                                                                           // 13809
      var drag, select, start, end, _data;                                                                             // 13810
                                                                                                                       // 13811
      this.handle.isDragged = 0;                                                                                       // 13812
                                                                                                                       // 13813
      drag = this.instance.view.wt.selections.fill.getCorners();                                                       // 13814
      if (!drag) {                                                                                                     // 13815
        return;                                                                                                        // 13816
      }                                                                                                                // 13817
                                                                                                                       // 13818
      var getDeltas = function (start, end, data, direction) {                                                         // 13819
        var rlength = data.length, // rows                                                                             // 13820
            clength = data ? data[0].length : 0; // cols                                                               // 13821
                                                                                                                       // 13822
        var deltas = [];                                                                                               // 13823
                                                                                                                       // 13824
        var diffRow = end.row - start.row,                                                                             // 13825
            diffCol = end.col - start.col;                                                                             // 13826
                                                                                                                       // 13827
        var startValue, endValue, delta;                                                                               // 13828
                                                                                                                       // 13829
        var arr = [];                                                                                                  // 13830
                                                                                                                       // 13831
        if (['down', 'up'].indexOf(direction) !== -1) {                                                                // 13832
          for (var col = 0; col <= diffCol; col++) {                                                                   // 13833
                                                                                                                       // 13834
            startValue = parseInt(data[0][col], 10);                                                                   // 13835
            endValue = parseInt(data[rlength-1][col], 10);                                                             // 13836
            delta = (direction === 'down' ? (endValue - startValue) : (startValue - endValue))  / (rlength - 1) || 0;  // 13837
                                                                                                                       // 13838
            arr.push(delta);                                                                                           // 13839
          }                                                                                                            // 13840
                                                                                                                       // 13841
          deltas.push(arr);                                                                                            // 13842
        }                                                                                                              // 13843
                                                                                                                       // 13844
        if (['right', 'left'].indexOf(direction) !== -1) {                                                             // 13845
          for (var row = 0; row <= diffRow; row++) {                                                                   // 13846
                                                                                                                       // 13847
            startValue = parseInt(data[row][0], 10);                                                                   // 13848
            endValue = parseInt(data[row][clength-1], 10);                                                             // 13849
            delta = (direction === 'right' ? (endValue - startValue) : (startValue - endValue)) / (clength - 1) || 0;  // 13850
                                                                                                                       // 13851
            arr = [];                                                                                                  // 13852
            arr.push(delta);                                                                                           // 13853
                                                                                                                       // 13854
            deltas.push(arr);                                                                                          // 13855
          }                                                                                                            // 13856
        }                                                                                                              // 13857
                                                                                                                       // 13858
        return deltas;                                                                                                 // 13859
      };                                                                                                               // 13860
                                                                                                                       // 13861
      this.instance.view.wt.selections.fill.clear();                                                                   // 13862
                                                                                                                       // 13863
      if (this.instance.selection.isMultiple()) {                                                                      // 13864
        select = this.instance.view.wt.selections.area.getCorners();                                                   // 13865
      }                                                                                                                // 13866
      else {                                                                                                           // 13867
        select = this.instance.view.wt.selections.current.getCorners();                                                // 13868
      }                                                                                                                // 13869
                                                                                                                       // 13870
      var direction;                                                                                                   // 13871
                                                                                                                       // 13872
      if (drag[0] === select[0] && drag[1] < select[1]) {                                                              // 13873
        direction = 'left';                                                                                            // 13874
                                                                                                                       // 13875
        start = new WalkontableCellCoords(                                                                             // 13876
          drag[0],                                                                                                     // 13877
          drag[1]                                                                                                      // 13878
        );                                                                                                             // 13879
        end = new WalkontableCellCoords(                                                                               // 13880
          drag[2],                                                                                                     // 13881
            select[1] - 1                                                                                              // 13882
        );                                                                                                             // 13883
      }                                                                                                                // 13884
      else if (drag[0] === select[0] && drag[3] > select[3]) {                                                         // 13885
        direction = 'right';                                                                                           // 13886
                                                                                                                       // 13887
        start = new WalkontableCellCoords(                                                                             // 13888
          drag[0],                                                                                                     // 13889
          select[3] + 1                                                                                                // 13890
        );                                                                                                             // 13891
        end = new WalkontableCellCoords(                                                                               // 13892
          drag[2],                                                                                                     // 13893
          drag[3]                                                                                                      // 13894
        );                                                                                                             // 13895
      }                                                                                                                // 13896
      else if (drag[0] < select[0] && drag[1] === select[1]) {                                                         // 13897
        direction = 'up';                                                                                              // 13898
                                                                                                                       // 13899
        start = new WalkontableCellCoords(                                                                             // 13900
          drag[0],                                                                                                     // 13901
          drag[1]                                                                                                      // 13902
        );                                                                                                             // 13903
        end = new WalkontableCellCoords(                                                                               // 13904
          select[0] - 1,                                                                                               // 13905
          drag[3]                                                                                                      // 13906
        );                                                                                                             // 13907
      }                                                                                                                // 13908
      else if (drag[2] > select[2] && drag[1] === select[1]) {                                                         // 13909
        direction = 'down';                                                                                            // 13910
                                                                                                                       // 13911
        start = new WalkontableCellCoords(                                                                             // 13912
          select[2] + 1,                                                                                               // 13913
          drag[1]                                                                                                      // 13914
        );                                                                                                             // 13915
        end = new WalkontableCellCoords(                                                                               // 13916
          drag[2],                                                                                                     // 13917
          drag[3]                                                                                                      // 13918
        );                                                                                                             // 13919
      }                                                                                                                // 13920
                                                                                                                       // 13921
      if (start && start.row > -1 && start.col > -1) {                                                                 // 13922
        var selRange = {from: this.instance.getSelectedRange().from, to: this.instance.getSelectedRange().to};         // 13923
                                                                                                                       // 13924
        _data = this.instance.getData(selRange.from.row, selRange.from.col, selRange.to.row, selRange.to.col);         // 13925
                                                                                                                       // 13926
        var deltas = getDeltas(start, end, _data, direction);                                                          // 13927
                                                                                                                       // 13928
        Handsontable.hooks.run(this.instance, 'beforeAutofill', start, end, _data);                                    // 13929
                                                                                                                       // 13930
        this.instance.populateFromArray(start.row, start.col, _data, end.row, end.col, 'autofill', null, direction, deltas);
                                                                                                                       // 13932
        this.instance.selection.setRangeStart(new WalkontableCellCoords(drag[0], drag[1]));                            // 13933
        this.instance.selection.setRangeEnd(new WalkontableCellCoords(drag[2], drag[3]));                              // 13934
      } else {                                                                                                         // 13935
       //reset to avoid some range bug                                                                                 // 13936
       this.instance.selection.refreshBorders();                                                                       // 13937
     }                                                                                                                 // 13938
    },                                                                                                                 // 13939
                                                                                                                       // 13940
  /**                                                                                                                  // 13941
   * Show fill border                                                                                                  // 13942
   * @param {WalkontableCellCoords} coords                                                                             // 13943
   */                                                                                                                  // 13944
    Autofill.prototype.showBorder = function (coords) {                                                                // 13945
      var topLeft = this.instance.getSelectedRange().getTopLeftCorner();                                               // 13946
      var bottomRight = this.instance.getSelectedRange().getBottomRightCorner();                                       // 13947
      if (this.instance.getSettings().fillHandle !== 'horizontal' && (bottomRight.row < coords.row || topLeft.row > coords.row)) {
        coords = new WalkontableCellCoords(coords.row, bottomRight.col);                                               // 13949
      }                                                                                                                // 13950
      else if (this.instance.getSettings().fillHandle !== 'vertical') {                                                // 13951
        coords = new WalkontableCellCoords(bottomRight.row, coords.col);                                               // 13952
      }                                                                                                                // 13953
      else {                                                                                                           // 13954
        return; //wrong direction                                                                                      // 13955
      }                                                                                                                // 13956
                                                                                                                       // 13957
      this.instance.view.wt.selections.fill.clear();                                                                   // 13958
      this.instance.view.wt.selections.fill.add(this.instance.getSelectedRange().from);                                // 13959
      this.instance.view.wt.selections.fill.add(this.instance.getSelectedRange().to);                                  // 13960
      this.instance.view.wt.selections.fill.add(coords);                                                               // 13961
      this.instance.view.render();                                                                                     // 13962
    };                                                                                                                 // 13963
                                                                                                                       // 13964
  Autofill.prototype.checkIfNewRowNeeded = function () {                                                               // 13965
    var fillCorners,                                                                                                   // 13966
      selection,                                                                                                       // 13967
      tableRows = this.instance.countRows(),                                                                           // 13968
      that = this;                                                                                                     // 13969
                                                                                                                       // 13970
    if (this.instance.view.wt.selections.fill.cellRange && this.addingStarted === false) {                             // 13971
      selection = this.instance.getSelected();                                                                         // 13972
      fillCorners = this.instance.view.wt.selections.fill.getCorners();                                                // 13973
                                                                                                                       // 13974
      if (selection[2] < tableRows - 1 && fillCorners[2] === tableRows - 1) {                                          // 13975
        this.addingStarted = true;                                                                                     // 13976
                                                                                                                       // 13977
        this.instance._registerTimeout(setTimeout(function () {                                                        // 13978
          that.instance.alter('insert_row');                                                                           // 13979
          that.addingStarted = false;                                                                                  // 13980
        }, 200));                                                                                                      // 13981
      }                                                                                                                // 13982
    }                                                                                                                  // 13983
                                                                                                                       // 13984
  };                                                                                                                   // 13985
                                                                                                                       // 13986
                                                                                                                       // 13987
  Handsontable.hooks.add('afterInit', function () {                                                                    // 13988
    var autofill = new Autofill(this);                                                                                 // 13989
                                                                                                                       // 13990
    if (typeof this.getSettings().fillHandle !== "undefined") {                                                        // 13991
      if (autofill.handle && this.getSettings().fillHandle === false) {                                                // 13992
        autofill.disable();                                                                                            // 13993
      }                                                                                                                // 13994
      else if (!autofill.handle && this.getSettings().fillHandle !== false) {                                          // 13995
        this.autofill = autofill;                                                                                      // 13996
        this.autofill.init();                                                                                          // 13997
      }                                                                                                                // 13998
    }                                                                                                                  // 13999
                                                                                                                       // 14000
  });                                                                                                                  // 14001
                                                                                                                       // 14002
  Handsontable.Autofill = Autofill;                                                                                    // 14003
                                                                                                                       // 14004
})(Handsontable);                                                                                                      // 14005
                                                                                                                       // 14006
var Grouping = function (instance) {                                                                                   // 14007
  /**                                                                                                                  // 14008
   * array of items                                                                                                    // 14009
   * @type {Array}                                                                                                     // 14010
   */                                                                                                                  // 14011
  var groups = [];                                                                                                     // 14012
                                                                                                                       // 14013
  /**                                                                                                                  // 14014
   * group definition                                                                                                  // 14015
   * @type {{id: String, level: Number, rows: Array, cols: Array, hidden: Number}}                                     // 14016
   */                                                                                                                  // 14017
  var item = {                                                                                                         // 14018
    id: '',                                                                                                            // 14019
    level: 0,                                                                                                          // 14020
    hidden: 0,                                                                                                         // 14021
    rows: [],                                                                                                          // 14022
    cols: []                                                                                                           // 14023
  };                                                                                                                   // 14024
                                                                                                                       // 14025
  /**                                                                                                                  // 14026
   * total rows and cols merged in groups                                                                              // 14027
   * @type {{rows: number, cols: number}}                                                                              // 14028
   */                                                                                                                  // 14029
  var counters = {                                                                                                     // 14030
    rows: 0,                                                                                                           // 14031
    cols: 0                                                                                                            // 14032
  };                                                                                                                   // 14033
                                                                                                                       // 14034
  /**                                                                                                                  // 14035
   * Number of group levels in each dimension                                                                          // 14036
   * @type {{rows: number, cols: number}}                                                                              // 14037
   */                                                                                                                  // 14038
  var levels = {                                                                                                       // 14039
    rows: 0,                                                                                                           // 14040
    cols: 0                                                                                                            // 14041
  };                                                                                                                   // 14042
                                                                                                                       // 14043
  /**                                                                                                                  // 14044
   * List of hidden rows                                                                                               // 14045
   * @type {Array}                                                                                                     // 14046
   */                                                                                                                  // 14047
  var hiddenRows = [];                                                                                                 // 14048
                                                                                                                       // 14049
  /**                                                                                                                  // 14050
   * List of hidden columns                                                                                            // 14051
   * @type {Array}                                                                                                     // 14052
   */                                                                                                                  // 14053
  var hiddenCols = [];                                                                                                 // 14054
                                                                                                                       // 14055
  /**                                                                                                                  // 14056
   * Classes used                                                                                                      // 14057
   */                                                                                                                  // 14058
  var classes = {                                                                                                      // 14059
    'groupIndicatorContainer': 'htGroupIndicatorContainer',                                                            // 14060
    'groupIndicator': function (direction) {                                                                           // 14061
      return 'ht' + direction + 'Group';                                                                               // 14062
    },                                                                                                                 // 14063
    'groupStart': 'htGroupStart',                                                                                      // 14064
    'collapseButton': 'htCollapseButton',                                                                              // 14065
    'expandButton': 'htExpandButton',                                                                                  // 14066
    'collapseGroupId': function (id) {                                                                                 // 14067
      return 'htCollapse-' + id;                                                                                       // 14068
    },                                                                                                                 // 14069
    'collapseFromLevel': function (direction, level) {                                                                 // 14070
      return 'htCollapse' + direction + 'FromLevel-' + level;                                                          // 14071
    },                                                                                                                 // 14072
    'clickable': 'clickable',                                                                                          // 14073
    'levelTrigger': 'htGroupLevelTrigger'                                                                              // 14074
  };                                                                                                                   // 14075
                                                                                                                       // 14076
  /**                                                                                                                  // 14077
   * compare object properties                                                                                         // 14078
   * @param {String} property                                                                                          // 14079
   * @param {String} orderDirection                                                                                    // 14080
   * @returns {Function}                                                                                               // 14081
   */                                                                                                                  // 14082
  var compare = function (property, orderDirection) {                                                                  // 14083
    return function (item1, item2) {                                                                                   // 14084
      return typeof (orderDirection) === 'undefined' || orderDirection === 'asc' ? item1[property] - item2[property] : item2[property] - item1[property];
    }                                                                                                                  // 14086
  };                                                                                                                   // 14087
                                                                                                                       // 14088
  /**                                                                                                                  // 14089
   * Create range array between from and to                                                                            // 14090
   * @param {Number} from                                                                                              // 14091
   * @param {Number} to                                                                                                // 14092
   * @returns {Array}                                                                                                  // 14093
   */                                                                                                                  // 14094
  var range = function (from, to) {                                                                                    // 14095
    var arr = [];                                                                                                      // 14096
    while (from <= to) {                                                                                               // 14097
      arr.push(from++);                                                                                                // 14098
    }                                                                                                                  // 14099
                                                                                                                       // 14100
    return arr;                                                                                                        // 14101
  };                                                                                                                   // 14102
                                                                                                                       // 14103
  /**                                                                                                                  // 14104
   * * Get groups for range                                                                                            // 14105
   * @param from                                                                                                       // 14106
   * @param to                                                                                                         // 14107
   * @returns {{total: {rows: number, cols: number}, groups: Array}}                                                   // 14108
   */                                                                                                                  // 14109
  var getRangeGroups = function (dataType, from, to) {                                                                 // 14110
    var cells = [],                                                                                                    // 14111
      cell = {                                                                                                         // 14112
        row: null,                                                                                                     // 14113
        col: null                                                                                                      // 14114
      };                                                                                                               // 14115
                                                                                                                       // 14116
    if (dataType == "cols") {                                                                                          // 14117
      // get all rows for selected columns                                                                             // 14118
      while (from <= to) {                                                                                             // 14119
        cell = {                                                                                                       // 14120
          row: -1,                                                                                                     // 14121
          col: from++                                                                                                  // 14122
        };                                                                                                             // 14123
        cells.push(cell);                                                                                              // 14124
      }                                                                                                                // 14125
                                                                                                                       // 14126
    } else {                                                                                                           // 14127
      // get all columns for selected rows                                                                             // 14128
      while (from <= to) {                                                                                             // 14129
        cell = {                                                                                                       // 14130
          row: from++,                                                                                                 // 14131
          col: -1                                                                                                      // 14132
        };                                                                                                             // 14133
        cells.push(cell);                                                                                              // 14134
      }                                                                                                                // 14135
    }                                                                                                                  // 14136
                                                                                                                       // 14137
    var cellsGroups = getCellsGroups(cells),                                                                           // 14138
      totalRows = 0,                                                                                                   // 14139
      totalCols = 0;                                                                                                   // 14140
                                                                                                                       // 14141
    // for selected cells, calculate total groups divided into rows and columns                                        // 14142
    for (var i = 0; i < cellsGroups.length; i++) {                                                                     // 14143
      totalRows += cellsGroups[i].filter(function (item) {                                                             // 14144
        return item['rows']                                                                                            // 14145
      }).length;                                                                                                       // 14146
                                                                                                                       // 14147
      totalCols += cellsGroups[i].filter(function (item) {                                                             // 14148
        return item['cols']                                                                                            // 14149
      }).length;                                                                                                       // 14150
    }                                                                                                                  // 14151
                                                                                                                       // 14152
    return {                                                                                                           // 14153
      total: {                                                                                                         // 14154
        rows: totalRows,                                                                                               // 14155
        cols: totalCols                                                                                                // 14156
      },                                                                                                               // 14157
      groups: cellsGroups                                                                                              // 14158
    };                                                                                                                 // 14159
  };                                                                                                                   // 14160
                                                                                                                       // 14161
  /**                                                                                                                  // 14162
   * Get all groups for cells                                                                                          // 14163
   * @param {Array} cells [{row:0, col:0}, {row:0, col:1}, {row:1, col:2}]                                             // 14164
   * @returns {Array}                                                                                                  // 14165
   */                                                                                                                  // 14166
  var getCellsGroups = function (cells) {                                                                              // 14167
    var _groups = [];                                                                                                  // 14168
                                                                                                                       // 14169
    for (var i = 0; i < cells.length; i++) {                                                                           // 14170
      _groups.push(getCellGroups(cells[i]));                                                                           // 14171
    }                                                                                                                  // 14172
                                                                                                                       // 14173
    return _groups;                                                                                                    // 14174
  };                                                                                                                   // 14175
                                                                                                                       // 14176
  /**                                                                                                                  // 14177
   * Get all groups for cell                                                                                           // 14178
   * @param {Object} coords {row:1, col:2}                                                                             // 14179
   * @param {Number} groupLevel Optional                                                                               // 14180
   * @param {String} groupType Optional                                                                                // 14181
   * @returns {Array}                                                                                                  // 14182
   */                                                                                                                  // 14183
  var getCellGroups = function (coords, groupLevel, groupType) {                                                       // 14184
    var row = coords.row,                                                                                              // 14185
      col = coords.col;                                                                                                // 14186
                                                                                                                       // 14187
    // for row = -1 and col = -1, get all columns and rows                                                             // 14188
    var tmpRow = (row === -1 ? 0 : row),                                                                               // 14189
      tmpCol = (col === -1 ? 0 : col);                                                                                 // 14190
                                                                                                                       // 14191
    var _groups = [];                                                                                                  // 14192
                                                                                                                       // 14193
    for (var i = 0; i < groups.length; i++) {                                                                          // 14194
      var group = groups[i],                                                                                           // 14195
        id = group['id'],                                                                                              // 14196
        level = group['level'],                                                                                        // 14197
        rows = group['rows'] || [],                                                                                    // 14198
        cols = group['cols'] || [];                                                                                    // 14199
                                                                                                                       // 14200
      if (_groups.indexOf(id) === -1) {                                                                                // 14201
        if (rows.indexOf(tmpRow) !== -1 || cols.indexOf(tmpCol) !== -1) {                                              // 14202
          _groups.push(group);                                                                                         // 14203
        }                                                                                                              // 14204
      }                                                                                                                // 14205
    }                                                                                                                  // 14206
                                                                                                                       // 14207
    // add col groups                                                                                                  // 14208
    if (col === -1) {                                                                                                  // 14209
      _groups = _groups.concat(getColGroups());                                                                        // 14210
    } else if (row === -1) {                                                                                           // 14211
      // add row groups                                                                                                // 14212
      _groups = _groups.concat(getRowGroups());                                                                        // 14213
    }                                                                                                                  // 14214
                                                                                                                       // 14215
    if (groupLevel) {                                                                                                  // 14216
      _groups = _groups.filter(function (item) {                                                                       // 14217
        return item['level'] === groupLevel;                                                                           // 14218
      });                                                                                                              // 14219
    }                                                                                                                  // 14220
                                                                                                                       // 14221
    if (groupType) {                                                                                                   // 14222
      if (groupType === 'cols') {                                                                                      // 14223
        _groups = _groups.filter(function (item) {                                                                     // 14224
          return item['cols'];                                                                                         // 14225
        });                                                                                                            // 14226
      } else if (groupType === 'rows') {                                                                               // 14227
        _groups = _groups.filter(function (item) {                                                                     // 14228
          return item['rows'];                                                                                         // 14229
        });                                                                                                            // 14230
      }                                                                                                                // 14231
    }                                                                                                                  // 14232
                                                                                                                       // 14233
    // remove duplicates                                                                                               // 14234
    var tmp = [];                                                                                                      // 14235
    return _groups.filter(function (item) {                                                                            // 14236
      if (tmp.indexOf(item.id) === -1) {                                                                               // 14237
        tmp.push(item.id);                                                                                             // 14238
        return item;                                                                                                   // 14239
      }                                                                                                                // 14240
    });                                                                                                                // 14241
  };                                                                                                                   // 14242
                                                                                                                       // 14243
  /**                                                                                                                  // 14244
   * get group by id                                                                                                   // 14245
   * @param id                                                                                                         // 14246
   * @returns {Object} group                                                                                           // 14247
   */                                                                                                                  // 14248
  var getGroupById = function (id) {                                                                                   // 14249
    for (var i = 0, groupsLength = groups.length; i < groupsLength; i++) {                                             // 14250
      if (groups[i].id == id) return groups[i];                                                                        // 14251
    }                                                                                                                  // 14252
    return false;                                                                                                      // 14253
  };                                                                                                                   // 14254
                                                                                                                       // 14255
  /**                                                                                                                  // 14256
   * get group by row and level                                                                                        // 14257
   * @param row                                                                                                        // 14258
   * @param level                                                                                                      // 14259
   * @returns {Object} group                                                                                           // 14260
   */                                                                                                                  // 14261
  var getGroupByRowAndLevel = function (row, level) {                                                                  // 14262
    for (var i = 0, groupsLength = groups.length; i < groupsLength; i++) {                                             // 14263
      if (groups[i].level == level && groups[i].rows && groups[i].rows.indexOf(row) > -1) return groups[i];            // 14264
    }                                                                                                                  // 14265
    return false;                                                                                                      // 14266
  };                                                                                                                   // 14267
                                                                                                                       // 14268
  /**                                                                                                                  // 14269
   * get group by row and level                                                                                        // 14270
   * @param row                                                                                                        // 14271
   * @param level                                                                                                      // 14272
   * @returns {Object} group                                                                                           // 14273
   */                                                                                                                  // 14274
  var getGroupByColAndLevel = function (col, level) {                                                                  // 14275
    for (var i = 0, groupsLength = groups.length; i < groupsLength; i++) {                                             // 14276
      if (groups[i].level == level && groups[i].cols && groups[i].cols.indexOf(col) > -1) return groups[i];            // 14277
    }                                                                                                                  // 14278
    return false;                                                                                                      // 14279
  };                                                                                                                   // 14280
                                                                                                                       // 14281
  /**                                                                                                                  // 14282
   * get total column groups                                                                                           // 14283
   * @returns {*|Array}                                                                                                // 14284
   */                                                                                                                  // 14285
  var getColGroups = function () {                                                                                     // 14286
    var result = [];                                                                                                   // 14287
    for (var i = 0, groupsLength = groups.length; i < groupsLength; i++) {                                             // 14288
      if (Array.isArray(groups[i]['cols'])) result.push(groups[i]);                                                    // 14289
    }                                                                                                                  // 14290
    return result;                                                                                                     // 14291
  };                                                                                                                   // 14292
                                                                                                                       // 14293
  /**                                                                                                                  // 14294
   * get total col groups by level                                                                                     // 14295
   * @param {Number} level                                                                                             // 14296
   * @returns {*|Array}                                                                                                // 14297
   */                                                                                                                  // 14298
  var getColGroupsByLevel = function (level) {                                                                         // 14299
    var result = [];                                                                                                   // 14300
    for (var i = 0, groupsLength = groups.length; i < groupsLength; i++) {                                             // 14301
      if (groups[i]['cols'] && groups[i]['level'] === level) result.push(groups[i]);                                   // 14302
    }                                                                                                                  // 14303
    return result;                                                                                                     // 14304
  };                                                                                                                   // 14305
                                                                                                                       // 14306
  /**                                                                                                                  // 14307
   * get total row groups                                                                                              // 14308
   * @returns {*|Array}                                                                                                // 14309
   */                                                                                                                  // 14310
  var getRowGroups = function () {                                                                                     // 14311
    var result = [];                                                                                                   // 14312
    for (var i = 0, groupsLength = groups.length; i < groupsLength; i++) {                                             // 14313
      if (Array.isArray(groups[i]['rows'])) result.push(groups[i]);                                                    // 14314
    }                                                                                                                  // 14315
    return result;                                                                                                     // 14316
  };                                                                                                                   // 14317
                                                                                                                       // 14318
  /**                                                                                                                  // 14319
   * get total row groups by level                                                                                     // 14320
   * @param {Number} level                                                                                             // 14321
   * @returns {*|Array}                                                                                                // 14322
   */                                                                                                                  // 14323
  var getRowGroupsByLevel = function (level) {                                                                         // 14324
    var result = [];                                                                                                   // 14325
    for (var i = 0, groupsLength = groups.length; i < groupsLength; i++) {                                             // 14326
      if (groups[i]['rows'] && groups[i]['level'] === level) result.push(groups[i]);                                   // 14327
    }                                                                                                                  // 14328
    return result;                                                                                                     // 14329
  };                                                                                                                   // 14330
                                                                                                                       // 14331
  /**                                                                                                                  // 14332
   * get last inserted range level in columns                                                                          // 14333
   * @param {Array} rangeGroups                                                                                        // 14334
   * @returns {number}                                                                                                 // 14335
   */                                                                                                                  // 14336
  var getLastLevelColsInRange = function (rangeGroups) {                                                               // 14337
    var level = 0;                                                                                                     // 14338
                                                                                                                       // 14339
    if (rangeGroups.length) {                                                                                          // 14340
      rangeGroups.forEach(function (items) {                                                                           // 14341
        items = items.filter(function (item) {                                                                         // 14342
          return item['cols'];                                                                                         // 14343
        });                                                                                                            // 14344
                                                                                                                       // 14345
        if (items.length) {                                                                                            // 14346
          var sortedGroup = items.sort(compare('level', 'desc')),                                                      // 14347
            lastLevel = sortedGroup[0].level;                                                                          // 14348
                                                                                                                       // 14349
          if (level < lastLevel) {                                                                                     // 14350
            level = lastLevel;                                                                                         // 14351
          }                                                                                                            // 14352
        }                                                                                                              // 14353
      });                                                                                                              // 14354
    }                                                                                                                  // 14355
                                                                                                                       // 14356
    return level;                                                                                                      // 14357
  };                                                                                                                   // 14358
                                                                                                                       // 14359
  /**                                                                                                                  // 14360
   * get last inserted range level in rows                                                                             // 14361
   * @param {Array} rangeGroups                                                                                        // 14362
   * @returns {number}                                                                                                 // 14363
   */                                                                                                                  // 14364
  var getLastLevelRowsInRange = function (rangeGroups) {                                                               // 14365
    var level = 0;                                                                                                     // 14366
                                                                                                                       // 14367
    if (rangeGroups.length) {                                                                                          // 14368
      rangeGroups.forEach(function (items) {                                                                           // 14369
        items = items.filter(function (item) {                                                                         // 14370
          return item['rows'];                                                                                         // 14371
        });                                                                                                            // 14372
                                                                                                                       // 14373
        if (items.length) {                                                                                            // 14374
          var sortedGroup = items.sort(compare('level', 'desc')),                                                      // 14375
            lastLevel = sortedGroup[0].level;                                                                          // 14376
                                                                                                                       // 14377
          if (level < lastLevel) {                                                                                     // 14378
            level = lastLevel;                                                                                         // 14379
          }                                                                                                            // 14380
        }                                                                                                              // 14381
      });                                                                                                              // 14382
    }                                                                                                                  // 14383
                                                                                                                       // 14384
    return level;                                                                                                      // 14385
  };                                                                                                                   // 14386
                                                                                                                       // 14387
  /**                                                                                                                  // 14388
   * create group for cols                                                                                             // 14389
   * @param {Number} from                                                                                              // 14390
   * @param {Number} to                                                                                                // 14391
   */                                                                                                                  // 14392
  var groupCols = function (from, to) {                                                                                // 14393
    var rangeGroups = getRangeGroups("cols", from, to),                                                                // 14394
      lastLevel = getLastLevelColsInRange(rangeGroups.groups);                                                         // 14395
                                                                                                                       // 14396
    if (lastLevel === levels.cols) {                                                                                   // 14397
      levels.cols++;                                                                                                   // 14398
    } else if (lastLevel > levels.cols) {                                                                              // 14399
      levels.cols = lastLevel + 1;                                                                                     // 14400
    }                                                                                                                  // 14401
                                                                                                                       // 14402
    if (!counters.cols) {                                                                                              // 14403
      counters.cols = getColGroups().length;                                                                           // 14404
    }                                                                                                                  // 14405
                                                                                                                       // 14406
    counters.cols++;                                                                                                   // 14407
    groups.push({                                                                                                      // 14408
      id: 'c' + counters.cols,                                                                                         // 14409
      level: lastLevel + 1,                                                                                            // 14410
      cols: range(from, to),                                                                                           // 14411
      hidden: 0                                                                                                        // 14412
    });                                                                                                                // 14413
  };                                                                                                                   // 14414
                                                                                                                       // 14415
  /**                                                                                                                  // 14416
   * create group for rows                                                                                             // 14417
   * @param {Number} from                                                                                              // 14418
   * @param {Number} to                                                                                                // 14419
   */                                                                                                                  // 14420
  var groupRows = function (from, to) {                                                                                // 14421
    var rangeGroups = getRangeGroups("rows", from, to),                                                                // 14422
      lastLevel = getLastLevelRowsInRange(rangeGroups.groups);                                                         // 14423
                                                                                                                       // 14424
    levels.rows = Math.max(levels.rows, lastLevel + 1);                                                                // 14425
                                                                                                                       // 14426
                                                                                                                       // 14427
    if (!counters.rows) {                                                                                              // 14428
      counters.rows = getRowGroups().length;                                                                           // 14429
    }                                                                                                                  // 14430
                                                                                                                       // 14431
    counters.rows++;                                                                                                   // 14432
    groups.push({                                                                                                      // 14433
      id: 'r' + counters.rows,                                                                                         // 14434
      level: lastLevel + 1,                                                                                            // 14435
      rows: range(from, to),                                                                                           // 14436
      hidden: 0                                                                                                        // 14437
    });                                                                                                                // 14438
  };                                                                                                                   // 14439
                                                                                                                       // 14440
  /**                                                                                                                  // 14441
   * show or hide groups                                                                                               // 14442
   * @param showHide                                                                                                   // 14443
   * @param groups                                                                                                     // 14444
   */                                                                                                                  // 14445
  var showHideGroups = function (hidden, groups) {                                                                     // 14446
    var level;                                                                                                         // 14447
    for (var i = 0, groupsLength = groups.length; i < groupsLength; i++) {                                             // 14448
      groups[i].hidden = hidden;                                                                                       // 14449
      level = groups[i].level;                                                                                         // 14450
                                                                                                                       // 14451
      if (!hiddenRows[level]) hiddenRows[level] = [];                                                                  // 14452
      if (!hiddenCols[level]) hiddenCols[level] = [];                                                                  // 14453
                                                                                                                       // 14454
      if (groups[i].rows) {                                                                                            // 14455
        for (var j = 0, rowsLength = groups[i].rows.length; j < rowsLength; j++) {                                     // 14456
          if (hidden > 0) {                                                                                            // 14457
            hiddenRows[level][groups[i].rows[j]] = true;                                                               // 14458
          } else {                                                                                                     // 14459
            hiddenRows[level][groups[i].rows[j]] = void 0;                                                             // 14460
          }                                                                                                            // 14461
        }                                                                                                              // 14462
      } else if (groups[i].cols) {                                                                                     // 14463
        for (var j = 0, colsLength = groups[i].cols.length; j < colsLength; j++) {                                     // 14464
          if (hidden > 0) {                                                                                            // 14465
            hiddenCols[level][groups[i].cols[j]] = true;                                                               // 14466
          } else {                                                                                                     // 14467
            hiddenCols[level][groups[i].cols[j]] = void 0;                                                             // 14468
          }                                                                                                            // 14469
        }                                                                                                              // 14470
      }                                                                                                                // 14471
    }                                                                                                                  // 14472
  };                                                                                                                   // 14473
                                                                                                                       // 14474
  /**                                                                                                                  // 14475
   * Check if the next cell of the dimension (row / column) contains a group at the same level                         // 14476
   * @param dimension                                                                                                  // 14477
   * @param currentPosition                                                                                            // 14478
   * @param level                                                                                                      // 14479
   * @param currentGroupId                                                                                             // 14480
   * @returns {boolean}                                                                                                // 14481
   */                                                                                                                  // 14482
  var nextIndexSharesLevel = function (dimension, currentPosition, level, currentGroupId) {                            // 14483
    var nextCellGroupId                                                                                                // 14484
      , levelsByOrder;                                                                                                 // 14485
                                                                                                                       // 14486
    switch (dimension) {                                                                                               // 14487
      case 'rows':                                                                                                     // 14488
        nextCellGroupId = getGroupByRowAndLevel(currentPosition + 1, level).id;                                        // 14489
        levelsByOrder = Handsontable.Grouping.getGroupLevelsByRows();                                                  // 14490
        break;                                                                                                         // 14491
      case 'cols':                                                                                                     // 14492
        nextCellGroupId = getGroupByColAndLevel(currentPosition + 1, level).id;                                        // 14493
        levelsByOrder = Handsontable.Grouping.getGroupLevelsByCols();                                                  // 14494
        break;                                                                                                         // 14495
    }                                                                                                                  // 14496
                                                                                                                       // 14497
    return !!(levelsByOrder[currentPosition + 1] && levelsByOrder[currentPosition + 1].indexOf(level) > -1 && currentGroupId == nextCellGroupId);
                                                                                                                       // 14499
  };                                                                                                                   // 14500
                                                                                                                       // 14501
  /**                                                                                                                  // 14502
   * Check if the previous cell of the dimension (row / column) contains a group at the same level                     // 14503
   * @param dimension                                                                                                  // 14504
   * @param currentPosition                                                                                            // 14505
   * @param level                                                                                                      // 14506
   * @param currentGroupId                                                                                             // 14507
   * @returns {boolean}                                                                                                // 14508
   */                                                                                                                  // 14509
  var previousIndexSharesLevel = function (dimension, currentPosition, level, currentGroupId) {                        // 14510
    var previousCellGroupId                                                                                            // 14511
      , levelsByOrder;                                                                                                 // 14512
                                                                                                                       // 14513
    switch (dimension) {                                                                                               // 14514
      case 'rows':                                                                                                     // 14515
        previousCellGroupId = getGroupByRowAndLevel(currentPosition - 1, level).id;                                    // 14516
        levelsByOrder = Handsontable.Grouping.getGroupLevelsByRows();                                                  // 14517
        break;                                                                                                         // 14518
      case 'cols':                                                                                                     // 14519
        previousCellGroupId = getGroupByColAndLevel(currentPosition - 1, level).id;                                    // 14520
        levelsByOrder = Handsontable.Grouping.getGroupLevelsByCols();                                                  // 14521
        break;                                                                                                         // 14522
    }                                                                                                                  // 14523
                                                                                                                       // 14524
    return !!(levelsByOrder[currentPosition - 1] && levelsByOrder[currentPosition - 1].indexOf(level) > -1 && currentGroupId == previousCellGroupId);
                                                                                                                       // 14526
  };                                                                                                                   // 14527
                                                                                                                       // 14528
  /**                                                                                                                  // 14529
   * Check if the provided index is at the end of the group indicator line                                             // 14530
   * @param dimension                                                                                                  // 14531
   * @param index                                                                                                      // 14532
   * @param level                                                                                                      // 14533
   * @param currentGroupId                                                                                             // 14534
   * @returns {boolean}                                                                                                // 14535
   */                                                                                                                  // 14536
  var isLastIndexOfTheLine = function (dimension, index, level, currentGroupId) {                                      // 14537
    if (index === 0) return false;                                                                                     // 14538
    var levelsByOrder                                                                                                  // 14539
      , entriesLength                                                                                                  // 14540
      , previousSharesLevel = previousIndexSharesLevel(dimension, index, level, currentGroupId)                        // 14541
      , nextSharesLevel = nextIndexSharesLevel(dimension, index, level, currentGroupId)                                // 14542
      , nextIsHidden = false;                                                                                          // 14543
                                                                                                                       // 14544
    switch (dimension) {                                                                                               // 14545
      case 'rows':                                                                                                     // 14546
        levelsByOrder = Handsontable.Grouping.getGroupLevelsByRows();                                                  // 14547
        entriesLength = instance.countRows();                                                                          // 14548
        for (var i = 0; i <= levels.rows; i++) {                                                                       // 14549
          if (hiddenRows[i] && hiddenRows[i][index + 1]) {                                                             // 14550
            nextIsHidden = true;                                                                                       // 14551
            break;                                                                                                     // 14552
          }                                                                                                            // 14553
        }                                                                                                              // 14554
        break;                                                                                                         // 14555
      case 'cols':                                                                                                     // 14556
        levelsByOrder = Handsontable.Grouping.getGroupLevelsByCols();                                                  // 14557
        entriesLength = instance.countCols();                                                                          // 14558
        for (var i = 0; i <= levels.cols; i++) {                                                                       // 14559
          if (hiddenCols[i] && hiddenCols[i][index + 1]) {                                                             // 14560
            nextIsHidden = true;                                                                                       // 14561
            break;                                                                                                     // 14562
          }                                                                                                            // 14563
        }                                                                                                              // 14564
        break;                                                                                                         // 14565
    }                                                                                                                  // 14566
                                                                                                                       // 14567
    if (previousSharesLevel) {                                                                                         // 14568
      if (index == entriesLength - 1) {                                                                                // 14569
        return true;                                                                                                   // 14570
      } else if (!nextSharesLevel || (nextSharesLevel && nextIsHidden)) {                                              // 14571
        return true;                                                                                                   // 14572
      } else if (!levelsByOrder[index + 1]) {                                                                          // 14573
        return true;                                                                                                   // 14574
      }                                                                                                                // 14575
    }                                                                                                                  // 14576
    return false;                                                                                                      // 14577
  };                                                                                                                   // 14578
                                                                                                                       // 14579
  /**                                                                                                                  // 14580
   * Check if all rows/cols are hidden                                                                                 // 14581
   * @param dataType                                                                                                   // 14582
   */                                                                                                                  // 14583
  var isLastHidden = function (dataType) {                                                                             // 14584
    var levelAmount;                                                                                                   // 14585
                                                                                                                       // 14586
    switch (dataType) {                                                                                                // 14587
      case 'rows':                                                                                                     // 14588
        levelAmount = levels.rows;                                                                                     // 14589
        for (var j = 0; j <= levelAmount; j++) {                                                                       // 14590
          if (hiddenRows[j] && hiddenRows[j][instance.countRows() - 1]) {                                              // 14591
            return true;                                                                                               // 14592
          }                                                                                                            // 14593
        }                                                                                                              // 14594
                                                                                                                       // 14595
        break;                                                                                                         // 14596
      case 'cols':                                                                                                     // 14597
        levelAmount = levels.cols;                                                                                     // 14598
        for (var j = 0; j <= levelAmount; j++) {                                                                       // 14599
          if (hiddenCols[j] && hiddenCols[j][instance.countCols() - 1]) {                                              // 14600
            return true;                                                                                               // 14601
          }                                                                                                            // 14602
        }                                                                                                              // 14603
        break;                                                                                                         // 14604
    }                                                                                                                  // 14605
                                                                                                                       // 14606
    return false;                                                                                                      // 14607
  };                                                                                                                   // 14608
                                                                                                                       // 14609
  /**                                                                                                                  // 14610
   * Check if the provided index is at the beginning of the group indicator line                                       // 14611
   * @param dimension                                                                                                  // 14612
   * @param index                                                                                                      // 14613
   * @param level                                                                                                      // 14614
   * @param currentGroupId                                                                                             // 14615
   * @returns {boolean}                                                                                                // 14616
   */                                                                                                                  // 14617
  var isFirstIndexOfTheLine = function (dimension, index, level, currentGroupId) {                                     // 14618
    var levelsByOrder                                                                                                  // 14619
      , entriesLength                                                                                                  // 14620
      , currentGroup = getGroupById(currentGroupId)                                                                    // 14621
      , previousAreHidden = false                                                                                      // 14622
      , arePreviousHidden = function (dimension) {                                                                     // 14623
        var hidden = false                                                                                             // 14624
          , hiddenArr = dimension == 'rows' ? hiddenRows : hiddenCols;                                                 // 14625
        for (var i = 0; i <= levels[dimension]; i++) {                                                                 // 14626
          tempInd = index;                                                                                             // 14627
          while (currentGroup[dimension].indexOf(tempInd) > -1) {                                                      // 14628
            hidden = !!(hiddenArr[i] && hiddenArr[i][tempInd]);                                                        // 14629
            tempInd--;                                                                                                 // 14630
          }                                                                                                            // 14631
          if (hidden) break;                                                                                           // 14632
        }                                                                                                              // 14633
        return hidden;                                                                                                 // 14634
      }                                                                                                                // 14635
      , previousSharesLevel = previousIndexSharesLevel(dimension, index, level, currentGroupId)                        // 14636
      , nextSharesLevel = nextIndexSharesLevel(dimension, index, level, currentGroupId)                                // 14637
      , tempInd;                                                                                                       // 14638
                                                                                                                       // 14639
    switch (dimension) {                                                                                               // 14640
      case 'rows':                                                                                                     // 14641
        levelsByOrder = Handsontable.Grouping.getGroupLevelsByRows();                                                  // 14642
        entriesLength = instance.countRows();                                                                          // 14643
        previousAreHidden = arePreviousHidden(dimension);                                                              // 14644
        break;                                                                                                         // 14645
      case 'cols':                                                                                                     // 14646
        levelsByOrder = Handsontable.Grouping.getGroupLevelsByCols();                                                  // 14647
        entriesLength = instance.countCols();                                                                          // 14648
        previousAreHidden = arePreviousHidden(dimension);                                                              // 14649
        break;                                                                                                         // 14650
    }                                                                                                                  // 14651
                                                                                                                       // 14652
    if (index == entriesLength - 1) return false;                                                                      // 14653
    else if (index == 0) {                                                                                             // 14654
      if (nextSharesLevel) {                                                                                           // 14655
        return true;                                                                                                   // 14656
      }                                                                                                                // 14657
    } else if (!previousSharesLevel || (previousSharesLevel && previousAreHidden)) {                                   // 14658
      if (nextSharesLevel) {                                                                                           // 14659
        return true;                                                                                                   // 14660
      }                                                                                                                // 14661
    } else if (!levelsByOrder[index - 1]) {                                                                            // 14662
      if (nextSharesLevel) {                                                                                           // 14663
        return true;                                                                                                   // 14664
      }                                                                                                                // 14665
    }                                                                                                                  // 14666
    return false;                                                                                                      // 14667
  };                                                                                                                   // 14668
                                                                                                                       // 14669
  /**                                                                                                                  // 14670
   * Add group expander button                                                                                         // 14671
   * @param dimension                                                                                                  // 14672
   * @param index                                                                                                      // 14673
   * @param level                                                                                                      // 14674
   * @param id                                                                                                         // 14675
   * @param elem                                                                                                       // 14676
   * @returns {*}                                                                                                      // 14677
   */                                                                                                                  // 14678
  var addGroupExpander = function (dataType, index, level, id, elem) {                                                 // 14679
    var previousIndexGroupId;                                                                                          // 14680
                                                                                                                       // 14681
    switch (dataType) {                                                                                                // 14682
      case 'rows':                                                                                                     // 14683
        previousIndexGroupId = getGroupByRowAndLevel(index - 1, level).id;                                             // 14684
        break;                                                                                                         // 14685
      case 'cols':                                                                                                     // 14686
        previousIndexGroupId = getGroupByColAndLevel(index - 1, level).id;                                             // 14687
        break;                                                                                                         // 14688
    }                                                                                                                  // 14689
                                                                                                                       // 14690
    if (!previousIndexGroupId) return null;                                                                            // 14691
                                                                                                                       // 14692
    if (index > 0) {                                                                                                   // 14693
      if (previousIndexSharesLevel(dataType, index - 1, level, previousIndexGroupId) && previousIndexGroupId != id) {  // 14694
                                                                                                                       // 14695
        var expanderButton = document.createElement('DIV');                                                            // 14696
        Handsontable.Dom.addClass(expanderButton, classes.expandButton);                                               // 14697
        expanderButton.id = 'htExpand-' + previousIndexGroupId;                                                        // 14698
        expanderButton.appendChild(document.createTextNode('+'));                                                      // 14699
        expanderButton.setAttribute('data-level', level);                                                              // 14700
        expanderButton.setAttribute('data-type', dataType);                                                            // 14701
        expanderButton.setAttribute('data-hidden', "1");                                                               // 14702
                                                                                                                       // 14703
        elem.appendChild(expanderButton);                                                                              // 14704
                                                                                                                       // 14705
        return expanderButton;                                                                                         // 14706
      }                                                                                                                // 14707
    }                                                                                                                  // 14708
    return null;                                                                                                       // 14709
  };                                                                                                                   // 14710
                                                                                                                       // 14711
  /**                                                                                                                  // 14712
   * Check if provided cell is collapsed (either by rows or cols)                                                      // 14713
   * @param currentPosition                                                                                            // 14714
   * @returns {boolean}                                                                                                // 14715
   */                                                                                                                  // 14716
  var isCollapsed = function (currentPosition) {                                                                       // 14717
    var rowGroups = getRowGroups()                                                                                     // 14718
      , colGroups = getColGroups();                                                                                    // 14719
                                                                                                                       // 14720
    for (var i = 0, rowGroupsCount = rowGroups.length; i < rowGroupsCount; i++) {                                      // 14721
      if (rowGroups[i].rows.indexOf(currentPosition.row) > -1 && rowGroups[i].hidden) {                                // 14722
        return true;                                                                                                   // 14723
      }                                                                                                                // 14724
    }                                                                                                                  // 14725
                                                                                                                       // 14726
    if (currentPosition.col === null) { // if col is set to null, check only rows                                      // 14727
      return false;                                                                                                    // 14728
    }                                                                                                                  // 14729
                                                                                                                       // 14730
    for (var i = 0, colGroupsCount = colGroups.length; i < colGroupsCount; i++) {                                      // 14731
      if (colGroups[i].cols.indexOf(currentPosition.col) > -1 && colGroups[i].hidden) {                                // 14732
        return true;                                                                                                   // 14733
      }                                                                                                                // 14734
    }                                                                                                                  // 14735
                                                                                                                       // 14736
    return false;                                                                                                      // 14737
  };                                                                                                                   // 14738
                                                                                                                       // 14739
  return {                                                                                                             // 14740
                                                                                                                       // 14741
    /**                                                                                                                // 14742
     * all groups for ht instance                                                                                      // 14743
     */                                                                                                                // 14744
    getGroups: function () {                                                                                           // 14745
      return groups;                                                                                                   // 14746
    },                                                                                                                 // 14747
    /**                                                                                                                // 14748
     * All levels for rows and cols respectively                                                                       // 14749
     */                                                                                                                // 14750
    getLevels: function () {                                                                                           // 14751
      return levels;                                                                                                   // 14752
    },                                                                                                                 // 14753
    /**                                                                                                                // 14754
     * Current instance                                                                                                // 14755
     */                                                                                                                // 14756
    instance: instance,                                                                                                // 14757
    /**                                                                                                                // 14758
     * Initial setting for minSpareRows                                                                                // 14759
     */                                                                                                                // 14760
    baseSpareRows: instance.getSettings().minSpareRows,                                                                // 14761
    /**                                                                                                                // 14762
     * Initial setting for minSpareCols                                                                                // 14763
     */                                                                                                                // 14764
    baseSpareCols: instance.getSettings().minSpareCols,                                                                // 14765
                                                                                                                       // 14766
    getRowGroups: getRowGroups,                                                                                        // 14767
    getColGroups: getColGroups,                                                                                        // 14768
    /**                                                                                                                // 14769
     * init group                                                                                                      // 14770
     * @param {Object} settings, could be an array of objects [{cols: [0,1,2]}, {cols: [3,4,5]}, {rows: [0,1]}]        // 14771
     */                                                                                                                // 14772
    init: function () {                                                                                                // 14773
      var groupsSetting = instance.getSettings().groups;                                                               // 14774
      if (groupsSetting) {                                                                                             // 14775
        if (Array.isArray(groupsSetting)) {                                                                            // 14776
          Handsontable.Grouping.initGroups(groupsSetting);                                                             // 14777
        }                                                                                                              // 14778
      }                                                                                                                // 14779
    },                                                                                                                 // 14780
                                                                                                                       // 14781
    /**                                                                                                                // 14782
     * init groups from configuration on startup                                                                       // 14783
     */                                                                                                                // 14784
    initGroups: function (initialGroups) {                                                                             // 14785
      var that = this;                                                                                                 // 14786
                                                                                                                       // 14787
      groups = [];                                                                                                     // 14788
                                                                                                                       // 14789
      initialGroups.forEach(function (item) {                                                                          // 14790
        var _group = [],                                                                                               // 14791
          isRow = false,                                                                                               // 14792
          isCol = false;                                                                                               // 14793
                                                                                                                       // 14794
        if (Array.isArray(item.rows)) {                                                                                // 14795
          _group = item.rows;                                                                                          // 14796
          isRow = true;                                                                                                // 14797
        } else if (Array.isArray(item.cols)) {                                                                         // 14798
          _group = item.cols;                                                                                          // 14799
          isCol = true;                                                                                                // 14800
        }                                                                                                              // 14801
                                                                                                                       // 14802
        var from = _group[0],                                                                                          // 14803
          to = _group[_group.length - 1];                                                                              // 14804
                                                                                                                       // 14805
        if (isRow) {                                                                                                   // 14806
          groupRows(from, to);                                                                                         // 14807
        } else if (isCol) {                                                                                            // 14808
          groupCols(from, to);                                                                                         // 14809
        }                                                                                                              // 14810
      });                                                                                                              // 14811
//      this.render();                                                                                                 // 14812
    },                                                                                                                 // 14813
                                                                                                                       // 14814
    /**                                                                                                                // 14815
     * Remove all existing groups                                                                                      // 14816
     */                                                                                                                // 14817
    resetGroups: function () {                                                                                         // 14818
      groups = [];                                                                                                     // 14819
      counters = {                                                                                                     // 14820
        rows: 0,                                                                                                       // 14821
        cols: 0                                                                                                        // 14822
      };                                                                                                               // 14823
      levels = {                                                                                                       // 14824
        rows: 0,                                                                                                       // 14825
        cols: 0                                                                                                        // 14826
      };                                                                                                               // 14827
                                                                                                                       // 14828
      var allOccurrences;                                                                                              // 14829
      for (var i in classes) {                                                                                         // 14830
        if (typeof classes[i] != 'function') {                                                                         // 14831
          allOccurrences = document.querySelectorAll('.' + classes[i]);                                                // 14832
          for (var j = 0, occurrencesLength = allOccurrences.length; j < occurrencesLength; j++) {                     // 14833
            Handsontable.Dom.removeClass(allOccurrences[j], classes[i]);                                               // 14834
          }                                                                                                            // 14835
        }                                                                                                              // 14836
      }                                                                                                                // 14837
                                                                                                                       // 14838
      var otherClasses = ['htGroupColClosest', 'htGroupCol'];                                                          // 14839
      for (var i = 0, otherClassesLength = otherClasses.length; i < otherClassesLength; i++) {                         // 14840
        allOccurrences = document.querySelectorAll('.' + otherClasses[i]);                                             // 14841
        for (var j = 0, occurrencesLength = allOccurrences.length; j < occurrencesLength; j++) {                       // 14842
          Handsontable.Dom.removeClass(allOccurrences[j], otherClasses[i]);                                            // 14843
        }                                                                                                              // 14844
      }                                                                                                                // 14845
    },                                                                                                                 // 14846
    /**                                                                                                                // 14847
     * Update groups from the instance settings                                                                        // 14848
     */                                                                                                                // 14849
    updateGroups: function () {                                                                                        // 14850
      var groupSettings = this.getSettings().groups;                                                                   // 14851
                                                                                                                       // 14852
      Handsontable.Grouping.resetGroups();                                                                             // 14853
      Handsontable.Grouping.initGroups(groupSettings);                                                                 // 14854
    },                                                                                                                 // 14855
    afterGetRowHeader: function (row, TH) {                                                                            // 14856
      var currentRowHidden = false;                                                                                    // 14857
      for (var i = 0, levels = hiddenRows.length; i < levels; i++) {                                                   // 14858
        if (hiddenRows[i] && hiddenRows[i][row] === true) {                                                            // 14859
          currentRowHidden = true;                                                                                     // 14860
        }                                                                                                              // 14861
      }                                                                                                                // 14862
                                                                                                                       // 14863
      if (currentRowHidden) {                                                                                          // 14864
        Handsontable.Dom.addClass(TH.parentNode, 'hidden');                                                            // 14865
      } else if (!currentRowHidden && Handsontable.Dom.hasClass(TH.parentNode, 'hidden')) {                            // 14866
        Handsontable.Dom.removeClass(TH.parentNode, 'hidden');                                                         // 14867
      }                                                                                                                // 14868
                                                                                                                       // 14869
    },                                                                                                                 // 14870
    afterGetColHeader: function (col, TH) {                                                                            // 14871
      var rowHeaders = this.view.wt.wtSettings.getSetting('rowHeaders').length                                         // 14872
        , thisColgroup = instance.rootElement.querySelectorAll('colgroup col:nth-child(' + parseInt(col + rowHeaders + 1, 10) + ')');
                                                                                                                       // 14874
      if (thisColgroup.length === 0) {                                                                                 // 14875
        return;                                                                                                        // 14876
      }                                                                                                                // 14877
                                                                                                                       // 14878
      var currentColHidden = false;                                                                                    // 14879
      for (var i = 0, levels = hiddenCols.length; i < levels; i++) {                                                   // 14880
        if (hiddenCols[i] && hiddenCols[i][col] === true) {                                                            // 14881
          currentColHidden = true;                                                                                     // 14882
        }                                                                                                              // 14883
      }                                                                                                                // 14884
                                                                                                                       // 14885
      if (currentColHidden) {                                                                                          // 14886
        for (var i = 0, colsAmount = thisColgroup.length; i < colsAmount; i++) {                                       // 14887
          Handsontable.Dom.addClass(thisColgroup[i], 'hidden');                                                        // 14888
        }                                                                                                              // 14889
      } else if (!currentColHidden && Handsontable.Dom.hasClass(thisColgroup[0], 'hidden')) {                          // 14890
        for (var i = 0, colsAmount = thisColgroup.length; i < colsAmount; i++) {                                       // 14891
          Handsontable.Dom.removeClass(thisColgroup[i], 'hidden');                                                     // 14892
        }                                                                                                              // 14893
      }                                                                                                                // 14894
    },                                                                                                                 // 14895
    /**                                                                                                                // 14896
     * Create a renderer for additional row/col headers, acting as group indicators                                    // 14897
     * @param walkontableConfig                                                                                        // 14898
     * @param direction                                                                                                // 14899
     */                                                                                                                // 14900
    groupIndicatorsFactory: function (renderersArr, direction) {                                                       // 14901
      var groupsLevelsList                                                                                             // 14902
        , getCurrentLevel                                                                                              // 14903
        , getCurrentGroupId                                                                                            // 14904
        , dataType                                                                                                     // 14905
        , getGroupByIndexAndLevel                                                                                      // 14906
        , headersType                                                                                                  // 14907
        , currentHeaderModifier                                                                                        // 14908
        , createLevelTriggers;                                                                                         // 14909
                                                                                                                       // 14910
      switch (direction) {                                                                                             // 14911
        case 'horizontal':                                                                                             // 14912
          groupsLevelsList = Handsontable.Grouping.getGroupLevelsByCols();                                             // 14913
          getCurrentLevel = function (elem) {                                                                          // 14914
            return Array.prototype.indexOf.call(elem.parentNode.parentNode.childNodes, elem.parentNode) + 1;           // 14915
          };                                                                                                           // 14916
          getCurrentGroupId = function (col, level) {                                                                  // 14917
            return getGroupByColAndLevel(col, level).id;                                                               // 14918
          };                                                                                                           // 14919
          dataType = 'cols';                                                                                           // 14920
          getGroupByIndexAndLevel = function (col, level) {                                                            // 14921
            return getGroupByColAndLevel(col - 1, level);                                                              // 14922
          };                                                                                                           // 14923
          headersType = "columnHeaders";                                                                               // 14924
          currentHeaderModifier = function (headerRenderers) {                                                         // 14925
            if (headerRenderers.length === 1) {                                                                        // 14926
              var oldFn = headerRenderers[0];                                                                          // 14927
                                                                                                                       // 14928
              headerRenderers[0] = function (index, elem, level) {                                                     // 14929
                                                                                                                       // 14930
                if (index < -1)                                                                                        // 14931
                  makeGroupIndicatorsForLevel()(index, elem, level);                                                   // 14932
                else {                                                                                                 // 14933
                  Handsontable.Dom.removeClass(elem, classes.groupIndicatorContainer);                                 // 14934
                  oldFn(index, elem, level);                                                                           // 14935
                }                                                                                                      // 14936
              }                                                                                                        // 14937
            }                                                                                                          // 14938
            return function () {                                                                                       // 14939
              return headerRenderers;                                                                                  // 14940
            };                                                                                                         // 14941
          };                                                                                                           // 14942
          createLevelTriggers = true;                                                                                  // 14943
          break;                                                                                                       // 14944
        case 'vertical':                                                                                               // 14945
          groupsLevelsList = Handsontable.Grouping.getGroupLevelsByRows();                                             // 14946
          getCurrentLevel = function (elem) {                                                                          // 14947
            return Handsontable.Dom.index(elem) + 1;                                                                   // 14948
          };                                                                                                           // 14949
          getCurrentGroupId = function (row, level) {                                                                  // 14950
            return getGroupByRowAndLevel(row, level).id;                                                               // 14951
          };                                                                                                           // 14952
          dataType = 'rows';                                                                                           // 14953
          getGroupByIndexAndLevel = function (row, level) {                                                            // 14954
            return getGroupByRowAndLevel(row - 1, level);                                                              // 14955
          };                                                                                                           // 14956
          headersType = "rowHeaders";                                                                                  // 14957
          currentHeaderModifier = function (headerRenderers) {                                                         // 14958
            return headerRenderers;                                                                                    // 14959
          };                                                                                                           // 14960
          break;                                                                                                       // 14961
      }                                                                                                                // 14962
                                                                                                                       // 14963
      var createButton = function (parent) {                                                                           // 14964
        var button = document.createElement('div');                                                                    // 14965
                                                                                                                       // 14966
        parent.appendChild(button);                                                                                    // 14967
                                                                                                                       // 14968
        return {                                                                                                       // 14969
          button: button,                                                                                              // 14970
          addClass: function (className) {                                                                             // 14971
            Handsontable.Dom.addClass(button, className);                                                              // 14972
          }                                                                                                            // 14973
        };                                                                                                             // 14974
      };                                                                                                               // 14975
                                                                                                                       // 14976
      var makeGroupIndicatorsForLevel = function () {                                                                  // 14977
        var directionClassname = direction.charAt(0).toUpperCase() + direction.slice(1); // capitalize the first letter
                                                                                                                       // 14979
        return function (index, elem, level) { // header rendering function                                            // 14980
                                                                                                                       // 14981
          level++;                                                                                                     // 14982
          var child                                                                                                    // 14983
            , collapseButton;                                                                                          // 14984
                                                                                                                       // 14985
          while (child = elem.lastChild) {                                                                             // 14986
            elem.removeChild(child);                                                                                   // 14987
          }                                                                                                            // 14988
                                                                                                                       // 14989
          Handsontable.Dom.addClass(elem, classes.groupIndicatorContainer);                                            // 14990
                                                                                                                       // 14991
          var currentGroupId = getCurrentGroupId(index, level);                                                        // 14992
                                                                                                                       // 14993
          if (index > -1 && (groupsLevelsList[index] && groupsLevelsList[index].indexOf(level) > -1)) {                // 14994
                                                                                                                       // 14995
            collapseButton = createButton(elem);                                                                       // 14996
            collapseButton.addClass(classes.groupIndicator(directionClassname));                                       // 14997
                                                                                                                       // 14998
            if (isFirstIndexOfTheLine(dataType, index, level, currentGroupId)) { // add a little thingy and the top of the group indicator
              collapseButton.addClass(classes.groupStart);                                                             // 15000
            }                                                                                                          // 15001
                                                                                                                       // 15002
            if (isLastIndexOfTheLine(dataType, index, level, currentGroupId)) { // add [+]/[-] button at the end of the line
              collapseButton.button.appendChild(document.createTextNode('-'));                                         // 15004
              collapseButton.addClass(classes.collapseButton);                                                         // 15005
              collapseButton.button.id = classes.collapseGroupId(currentGroupId);                                      // 15006
              collapseButton.button.setAttribute('data-level', level);                                                 // 15007
              collapseButton.button.setAttribute('data-type', dataType);                                               // 15008
            }                                                                                                          // 15009
                                                                                                                       // 15010
          }                                                                                                            // 15011
                                                                                                                       // 15012
          if (createLevelTriggers) {                                                                                   // 15013
            var rowInd = Handsontable.Dom.index(elem.parentNode);                                                      // 15014
            if (index === -1 || (index < -1 && rowInd === Handsontable.Grouping.getLevels().cols + 1) || (rowInd == 0 && Handsontable.Grouping.getLevels().cols == 0)) {
              collapseButton = createButton(elem);                                                                     // 15016
              collapseButton.addClass(classes.levelTrigger);                                                           // 15017
                                                                                                                       // 15018
              if (index === -1) {                                                                                      // 15019
                collapseButton.button.id = classes.collapseFromLevel("Cols", level);                                   // 15020
                collapseButton.button.appendChild(document.createTextNode(level));                                     // 15021
              } else if (index < -1 && rowInd === Handsontable.Grouping.getLevels().cols + 1 || (rowInd == 0 && Handsontable.Grouping.getLevels().cols == 0)) {
                var colInd = Handsontable.Dom.index(elem) + 1;                                                         // 15023
                collapseButton.button.id = classes.collapseFromLevel("Rows", colInd);                                  // 15024
                collapseButton.button.appendChild(document.createTextNode(colInd));                                    // 15025
              }                                                                                                        // 15026
            }                                                                                                          // 15027
          }                                                                                                            // 15028
                                                                                                                       // 15029
          // add group expending button                                                                                // 15030
          var expanderButton = addGroupExpander(dataType, index, level, currentGroupId, elem);                         // 15031
          if (index > 0) {                                                                                             // 15032
            var previousGroupObj = getGroupByIndexAndLevel(index - 1, level);                                          // 15033
                                                                                                                       // 15034
            if (expanderButton && previousGroupObj.hidden) {                                                           // 15035
              Handsontable.Dom.addClass(expanderButton, classes.clickable);                                            // 15036
            }                                                                                                          // 15037
          }                                                                                                            // 15038
                                                                                                                       // 15039
          updateHeaderWidths();                                                                                        // 15040
                                                                                                                       // 15041
        };                                                                                                             // 15042
      };                                                                                                               // 15043
                                                                                                                       // 15044
                                                                                                                       // 15045
      renderersArr = currentHeaderModifier(renderersArr);                                                              // 15046
                                                                                                                       // 15047
                                                                                                                       // 15048
      if (counters[dataType] > 0) {                                                                                    // 15049
        for (var i = 0; i < levels[dataType] + 1; i++) { // for each level of col groups add a header renderer         // 15050
          if (!Array.isArray(renderersArr)) {                                                                          // 15051
            renderersArr = typeof renderersArr === 'function' ? renderersArr() : new Array(renderersArr);              // 15052
          }                                                                                                            // 15053
          renderersArr.unshift(makeGroupIndicatorsForLevel());                                                         // 15054
        }                                                                                                              // 15055
      }                                                                                                                // 15056
    },                                                                                                                 // 15057
    /**                                                                                                                // 15058
     * Get group levels array arranged by rows                                                                         // 15059
     * @returns {Array}                                                                                                // 15060
     */                                                                                                                // 15061
    getGroupLevelsByRows: function () {                                                                                // 15062
      var rowGroups = getRowGroups()                                                                                   // 15063
        , result = [];                                                                                                 // 15064
                                                                                                                       // 15065
      for (var i = 0, groupsLength = rowGroups.length; i < groupsLength; i++) {                                        // 15066
        if (rowGroups[i].rows) {                                                                                       // 15067
          for (var j = 0, groupRowsLength = rowGroups[i].rows.length; j < groupRowsLength; j++) {                      // 15068
            if (!result[rowGroups[i].rows[j]]) result[rowGroups[i].rows[j]] = [];                                      // 15069
            result[rowGroups[i].rows[j]].push(rowGroups[i].level);                                                     // 15070
          }                                                                                                            // 15071
        }                                                                                                              // 15072
      }                                                                                                                // 15073
      return result;                                                                                                   // 15074
    },                                                                                                                 // 15075
    /**                                                                                                                // 15076
     * Get group levels array arranged by cols                                                                         // 15077
     * @returns {Array}                                                                                                // 15078
     */                                                                                                                // 15079
    getGroupLevelsByCols: function () {                                                                                // 15080
      var colGroups = getColGroups()                                                                                   // 15081
        , result = [];                                                                                                 // 15082
                                                                                                                       // 15083
      for (var i = 0, groupsLength = colGroups.length; i < groupsLength; i++) {                                        // 15084
        if (colGroups[i].cols) {                                                                                       // 15085
          for (var j = 0, groupColsLength = colGroups[i].cols.length; j < groupColsLength; j++) {                      // 15086
            if (!result[colGroups[i].cols[j]]) result[colGroups[i].cols[j]] = [];                                      // 15087
            result[colGroups[i].cols[j]].push(colGroups[i].level);                                                     // 15088
          }                                                                                                            // 15089
        }                                                                                                              // 15090
      }                                                                                                                // 15091
      return result;                                                                                                   // 15092
    },                                                                                                                 // 15093
    /**                                                                                                                // 15094
     * Toggle the group visibility ( + / - event handler)                                                              // 15095
     * @param event                                                                                                    // 15096
     * @param coords                                                                                                   // 15097
     * @param TD                                                                                                       // 15098
     */                                                                                                                // 15099
    toggleGroupVisibility: function (event, coords, TD) {                                                              // 15100
      if (Handsontable.Dom.hasClass(event.target, classes.expandButton)                                                // 15101
        || Handsontable.Dom.hasClass(event.target, classes.collapseButton)                                             // 15102
        || Handsontable.Dom.hasClass(event.target, classes.levelTrigger)) {                                            // 15103
        var element = event.target                                                                                     // 15104
          , elemIdSplit = element.id.split('-');                                                                       // 15105
                                                                                                                       // 15106
        var groups = []                                                                                                // 15107
          , id                                                                                                         // 15108
          , level                                                                                                      // 15109
          , type                                                                                                       // 15110
          , hidden;                                                                                                    // 15111
                                                                                                                       // 15112
        var prepareGroupData = function (componentElement) {                                                           // 15113
          if (componentElement) element = componentElement;                                                            // 15114
                                                                                                                       // 15115
          elemIdSplit = element.id.split('-');                                                                         // 15116
                                                                                                                       // 15117
          id = elemIdSplit[1];                                                                                         // 15118
          level = parseInt(element.getAttribute('data-level'), 10);                                                    // 15119
          type = element.getAttribute('data-type');                                                                    // 15120
          hidden = parseInt(element.getAttribute('data-hidden'));                                                      // 15121
                                                                                                                       // 15122
          if (isNaN(hidden)) {                                                                                         // 15123
            hidden = 1;                                                                                                // 15124
          } else {                                                                                                     // 15125
            hidden = (hidden ? 0 : 1);                                                                                 // 15126
          }                                                                                                            // 15127
                                                                                                                       // 15128
          element.setAttribute('data-hidden', hidden.toString());                                                      // 15129
                                                                                                                       // 15130
                                                                                                                       // 15131
          groups.push(getGroupById(id));                                                                               // 15132
        };                                                                                                             // 15133
                                                                                                                       // 15134
        if (element.className.indexOf(classes.levelTrigger) > -1) { // show levels below, hide all above               // 15135
          var groupsInLevel                                                                                            // 15136
            , groupsToExpand = []                                                                                      // 15137
            , groupsToCollapse = []                                                                                    // 15138
            , levelType = element.id.indexOf("Rows") > -1 ? "rows" : "cols";                                           // 15139
                                                                                                                       // 15140
          for (var i = 1, levelsCount = levels[levelType]; i <= levelsCount; i++) {                                    // 15141
            groupsInLevel = levelType == "rows" ? getRowGroupsByLevel(i) : getColGroupsByLevel(i);                     // 15142
                                                                                                                       // 15143
            if (i >= parseInt(elemIdSplit[1], 10)) {                                                                   // 15144
              for (var j = 0, groupCount = groupsInLevel.length; j < groupCount; j++) {                                // 15145
                groupsToCollapse.push(groupsInLevel[j]);                                                               // 15146
              }                                                                                                        // 15147
            } else {                                                                                                   // 15148
              for (var j = 0, groupCount = groupsInLevel.length; j < groupCount; j++) {                                // 15149
                groupsToExpand.push(groupsInLevel[j]);                                                                 // 15150
              }                                                                                                        // 15151
            }                                                                                                          // 15152
          }                                                                                                            // 15153
                                                                                                                       // 15154
          showHideGroups(true, groupsToCollapse);                                                                      // 15155
          showHideGroups(false, groupsToExpand);                                                                       // 15156
                                                                                                                       // 15157
        } else {                                                                                                       // 15158
          prepareGroupData();                                                                                          // 15159
          showHideGroups(hidden, groups);                                                                              // 15160
        }                                                                                                              // 15161
                                                                                                                       // 15162
                                                                                                                       // 15163
        // add the expander button to a dummy spare row/col, if no longer needed -> remove it                          // 15164
        type = type || levelType;                                                                                      // 15165
        var lastHidden = isLastHidden(type)                                                                            // 15166
          , typeUppercase = type.charAt(0).toUpperCase() + type.slice(1)                                               // 15167
          , spareElements = Handsontable.Grouping['baseSpare' + typeUppercase];                                        // 15168
                                                                                                                       // 15169
        if (lastHidden) {                                                                                              // 15170
          if (spareElements == 0) {                                                                                    // 15171
            instance.alter('insert_' + type.slice(0, -1), instance['count' + typeUppercase]());                        // 15172
            Handsontable.Grouping["dummy" + type.slice(0, -1)] = true;                                                 // 15173
          }                                                                                                            // 15174
        } else {                                                                                                       // 15175
          if (spareElements == 0) {                                                                                    // 15176
            if (Handsontable.Grouping["dummy" + type.slice(0, -1)]) {                                                  // 15177
              instance.alter('remove_' + type.slice(0, -1), instance['count' + typeUppercase]() - 1);                  // 15178
              Handsontable.Grouping["dummy" + type.slice(0, -1)] = false;                                              // 15179
            }                                                                                                          // 15180
          }                                                                                                            // 15181
        }                                                                                                              // 15182
                                                                                                                       // 15183
        instance.render();                                                                                             // 15184
                                                                                                                       // 15185
        event.stopImmediatePropagation();                                                                              // 15186
      }                                                                                                                // 15187
    },                                                                                                                 // 15188
    /**                                                                                                                // 15189
     * Modify the delta when changing cells using keyobard                                                             // 15190
     * @param position                                                                                                 // 15191
     * @returns {Function}                                                                                             // 15192
     */                                                                                                                // 15193
    modifySelectionFactory: function (position) {                                                                      // 15194
      var instance = this.instance;                                                                                    // 15195
      var currentlySelected                                                                                            // 15196
        , nextPosition = new WalkontableCellCoords(0, 0)                                                               // 15197
        , nextVisible = function (direction, currentPosition) { // updates delta to skip to the next visible cell      // 15198
          var updateDelta = 0;                                                                                         // 15199
                                                                                                                       // 15200
          switch (direction) {                                                                                         // 15201
            case 'down':                                                                                               // 15202
              while (isCollapsed(currentPosition)) {                                                                   // 15203
                updateDelta++;                                                                                         // 15204
                currentPosition.row += 1;                                                                              // 15205
              }                                                                                                        // 15206
              break;                                                                                                   // 15207
            case 'up':                                                                                                 // 15208
              while (isCollapsed(currentPosition)) {                                                                   // 15209
                updateDelta--;                                                                                         // 15210
                currentPosition.row -= 1;                                                                              // 15211
              }                                                                                                        // 15212
              break;                                                                                                   // 15213
            case 'right':                                                                                              // 15214
              while (isCollapsed(currentPosition)) {                                                                   // 15215
                updateDelta++;                                                                                         // 15216
                currentPosition.col += 1;                                                                              // 15217
              }                                                                                                        // 15218
              break;                                                                                                   // 15219
            case 'left':                                                                                               // 15220
              while (isCollapsed(currentPosition)) {                                                                   // 15221
                updateDelta--;                                                                                         // 15222
                currentPosition.col -= 1;                                                                              // 15223
              }                                                                                                        // 15224
              break;                                                                                                   // 15225
          }                                                                                                            // 15226
                                                                                                                       // 15227
          return updateDelta;                                                                                          // 15228
        }                                                                                                              // 15229
        , updateDelta = function (delta, nextPosition) {                                                               // 15230
          if (delta.row > 0) { // moving down                                                                          // 15231
            if (isCollapsed(nextPosition)) {                                                                           // 15232
              delta.row += nextVisible('down', nextPosition);                                                          // 15233
            }                                                                                                          // 15234
          } else if (delta.row < 0) { // moving up                                                                     // 15235
            if (isCollapsed(nextPosition)) {                                                                           // 15236
              delta.row += nextVisible('up', nextPosition);                                                            // 15237
            }                                                                                                          // 15238
          }                                                                                                            // 15239
                                                                                                                       // 15240
          if (delta.col > 0) { // moving right                                                                         // 15241
            if (isCollapsed(nextPosition)) {                                                                           // 15242
              delta.col += nextVisible('right', nextPosition);                                                         // 15243
            }                                                                                                          // 15244
          } else if (delta.col < 0) { // moving left                                                                   // 15245
            if (isCollapsed(nextPosition)) {                                                                           // 15246
              delta.col += nextVisible('left', nextPosition);                                                          // 15247
            }                                                                                                          // 15248
          }                                                                                                            // 15249
        };                                                                                                             // 15250
                                                                                                                       // 15251
      switch (position) {                                                                                              // 15252
        case 'start':                                                                                                  // 15253
          return function (delta) {                                                                                    // 15254
            currentlySelected = instance.getSelected();                                                                // 15255
            nextPosition.row = currentlySelected[0] + delta.row;                                                       // 15256
            nextPosition.col = currentlySelected[1] + delta.col;                                                       // 15257
                                                                                                                       // 15258
            updateDelta(delta, nextPosition);                                                                          // 15259
          };                                                                                                           // 15260
          break;                                                                                                       // 15261
        case 'end':                                                                                                    // 15262
          return function (delta) {                                                                                    // 15263
            currentlySelected = instance.getSelected();                                                                // 15264
            nextPosition.row = currentlySelected[2] + delta.row;                                                       // 15265
            nextPosition.col = currentlySelected[3] + delta.col;                                                       // 15266
                                                                                                                       // 15267
            updateDelta(delta, nextPosition);                                                                          // 15268
          };                                                                                                           // 15269
          break;                                                                                                       // 15270
      }                                                                                                                // 15271
    },                                                                                                                 // 15272
    modifyRowHeight: function (height, row) {                                                                          // 15273
      if (instance.view.wt.wtTable.rowFilter && isCollapsed({row: row, col: null})) {                                  // 15274
        return 0;                                                                                                      // 15275
      }                                                                                                                // 15276
    },                                                                                                                 // 15277
    validateGroups: function () {                                                                                      // 15278
                                                                                                                       // 15279
      var areRangesOverlapping = function (a, b) {                                                                     // 15280
        if ((a[0] < b[0] && a[1] < b[1] && b[0] <= a[1])                                                               // 15281
          || (a[0] > b[0] && b[1] < a[1] && a[0] <= b[1])) {                                                           // 15282
          return true;                                                                                                 // 15283
        }                                                                                                              // 15284
      };                                                                                                               // 15285
                                                                                                                       // 15286
      var configGroups = instance.getSettings().groups                                                                 // 15287
        , cols = []                                                                                                    // 15288
        , rows = [];                                                                                                   // 15289
                                                                                                                       // 15290
      for (var i = 0, groupsLength = configGroups.length; i < groupsLength; i++) {                                     // 15291
        if (configGroups[i].rows) {                                                                                    // 15292
                                                                                                                       // 15293
          if(configGroups[i].rows.length === 1) { // single-entry group                                                // 15294
            throw new Error("Grouping error:  Group {" + configGroups[i].rows[0] + "} is invalid. Cannot define single-entry groups.");
            return false;                                                                                              // 15296
          } else if(configGroups[i].rows.length === 0) {                                                               // 15297
            throw new Error("Grouping error:  Cannot define empty groups.");                                           // 15298
            return false;                                                                                              // 15299
          }                                                                                                            // 15300
                                                                                                                       // 15301
          rows.push(configGroups[i].rows);                                                                             // 15302
                                                                                                                       // 15303
          for (var j = 0, rowsLength = rows.length; j < rowsLength; j++) {                                             // 15304
            if (areRangesOverlapping(configGroups[i].rows, rows[j])) {                                                 // 15305
                                                                                                                       // 15306
              throw new Error("Grouping error:  ranges {" + configGroups[i].rows[0] + ", " + configGroups[i].rows[1] + "} and {" + rows[j][0] + ", " + rows[j][1] + "} are overlapping.");
              return false;                                                                                            // 15308
            }                                                                                                          // 15309
          }                                                                                                            // 15310
        } else if (configGroups[i].cols) {                                                                             // 15311
                                                                                                                       // 15312
          if(configGroups[i].cols.length === 1) { // single-entry group                                                // 15313
            throw new Error("Grouping error:  Group {" + configGroups[i].cols[0] + "} is invalid. Cannot define single-entry groups.");
            return false;                                                                                              // 15315
          } else if(configGroups[i].cols.length === 0) {                                                               // 15316
            throw new Error("Grouping error:  Cannot define empty groups.");                                           // 15317
            return false;                                                                                              // 15318
          }                                                                                                            // 15319
                                                                                                                       // 15320
          cols.push(configGroups[i].cols);                                                                             // 15321
                                                                                                                       // 15322
          for (var j = 0, colsLength = cols.length; j < colsLength; j++) {                                             // 15323
            if (areRangesOverlapping(configGroups[i].cols, cols[j])) {                                                 // 15324
                                                                                                                       // 15325
              throw new Error("Grouping error:  ranges {" + configGroups[i].cols[0] + ", " + configGroups[i].cols[1] + "} and {" + cols[j][0] + ", " + cols[j][1] + "} are overlapping.");
              return false;                                                                                            // 15327
            }                                                                                                          // 15328
          }                                                                                                            // 15329
        }                                                                                                              // 15330
      }                                                                                                                // 15331
                                                                                                                       // 15332
      return true;                                                                                                     // 15333
    },                                                                                                                 // 15334
    afterGetRowHeaderRenderers: function (arr) {                                                                       // 15335
      Handsontable.Grouping.groupIndicatorsFactory(arr, 'vertical');                                                   // 15336
    },                                                                                                                 // 15337
    afterGetColumnHeaderRenderers: function (arr) {                                                                    // 15338
      Handsontable.Grouping.groupIndicatorsFactory(arr, 'horizontal');                                                 // 15339
    },                                                                                                                 // 15340
    hookProxy: function (fn, arg) {                                                                                    // 15341
      return function () {                                                                                             // 15342
        if (instance.getSettings().groups) {                                                                           // 15343
          return arg ? Handsontable.Grouping[fn](arg).apply(this, arguments) : Handsontable.Grouping[fn].apply(this, arguments);
        } else {                                                                                                       // 15345
          return void 0;                                                                                               // 15346
        }                                                                                                              // 15347
      };                                                                                                               // 15348
    }                                                                                                                  // 15349
  }                                                                                                                    // 15350
};                                                                                                                     // 15351
                                                                                                                       // 15352
/**                                                                                                                    // 15353
 * create new instance                                                                                                 // 15354
 */                                                                                                                    // 15355
var init = function () {                                                                                               // 15356
  var instance = this,                                                                                                 // 15357
    groupingSetting = !!(instance.getSettings().groups);                                                               // 15358
                                                                                                                       // 15359
                                                                                                                       // 15360
  if (groupingSetting) {                                                                                               // 15361
    var headerUpdates = {};                                                                                            // 15362
                                                                                                                       // 15363
    Handsontable.Grouping = new Grouping(instance);                                                                    // 15364
                                                                                                                       // 15365
    if (!instance.getSettings().rowHeaders) { // force using rowHeaders  --  needs to be changed later                 // 15366
      headerUpdates.rowHeaders = true;                                                                                 // 15367
    }                                                                                                                  // 15368
    if (!instance.getSettings().colHeaders) { // force using colHeaders  --  needs to be changed later                 // 15369
      headerUpdates.colHeaders = true;                                                                                 // 15370
    }                                                                                                                  // 15371
    if (headerUpdates.colHeaders || headerUpdates.rowHeaders) {                                                        // 15372
      instance.updateSettings(headerUpdates);                                                                          // 15373
    }                                                                                                                  // 15374
                                                                                                                       // 15375
    var groupConfigValid = Handsontable.Grouping.validateGroups();                                                     // 15376
    if (!groupConfigValid) {                                                                                           // 15377
      return;                                                                                                          // 15378
    }                                                                                                                  // 15379
                                                                                                                       // 15380
    instance.addHook('beforeInit', Handsontable.Grouping.hookProxy('init'));                                           // 15381
    instance.addHook('afterUpdateSettings', Handsontable.Grouping.hookProxy('updateGroups'));                          // 15382
    instance.addHook('afterGetColumnHeaderRenderers', Handsontable.Grouping.hookProxy('afterGetColumnHeaderRenderers'));
    instance.addHook('afterGetRowHeaderRenderers', Handsontable.Grouping.hookProxy('afterGetRowHeaderRenderers'));     // 15384
    instance.addHook('afterGetRowHeader', Handsontable.Grouping.hookProxy('afterGetRowHeader'));                       // 15385
    instance.addHook('afterGetColHeader', Handsontable.Grouping.hookProxy('afterGetColHeader'));                       // 15386
    instance.addHook('beforeOnCellMouseDown', Handsontable.Grouping.hookProxy('toggleGroupVisibility'));               // 15387
    instance.addHook('modifyTransformStart', Handsontable.Grouping.hookProxy('modifySelectionFactory', 'start'));      // 15388
    instance.addHook('modifyTransformEnd', Handsontable.Grouping.hookProxy('modifySelectionFactory', 'end'));          // 15389
    instance.addHook('modifyRowHeight', Handsontable.Grouping.hookProxy('modifyRowHeight'));                           // 15390
  }                                                                                                                    // 15391
};                                                                                                                     // 15392
                                                                                                                       // 15393
/**                                                                                                                    // 15394
 * Update headers widths for the group indicators                                                                      // 15395
 */                                                                                                                    // 15396
// TODO: this needs cleaning up                                                                                        // 15397
var updateHeaderWidths = function () {                                                                                 // 15398
  var colgroups = document.querySelectorAll('colgroup');                                                               // 15399
  for (var i = 0, colgroupsLength = colgroups.length; i < colgroupsLength; i++) {                                      // 15400
    var rowHeaders = colgroups[i].querySelectorAll('col.rowHeader');                                                   // 15401
    if (rowHeaders.length == 0) {                                                                                      // 15402
      return;                                                                                                          // 15403
    }                                                                                                                  // 15404
    for (var j = 0, rowHeadersLength = rowHeaders.length + 1; j < rowHeadersLength; j++) {                             // 15405
      if (rowHeadersLength == 2) {                                                                                     // 15406
        return;                                                                                                        // 15407
      }                                                                                                                // 15408
      if (j < Handsontable.Grouping.getLevels().rows + 1) {                                                            // 15409
        if (j == Handsontable.Grouping.getLevels().rows) {                                                             // 15410
          Handsontable.Dom.addClass(rowHeaders[j], 'htGroupColClosest');                                               // 15411
        } else {                                                                                                       // 15412
          Handsontable.Dom.addClass(rowHeaders[j], 'htGroupCol');                                                      // 15413
        }                                                                                                              // 15414
      }                                                                                                                // 15415
    }                                                                                                                  // 15416
  }                                                                                                                    // 15417
};                                                                                                                     // 15418
                                                                                                                       // 15419
Handsontable.hooks.add('beforeInit', init);                                                                            // 15420
                                                                                                                       // 15421
Handsontable.hooks.add('afterUpdateSettings', function () {                                                            // 15422
                                                                                                                       // 15423
  if (this.getSettings().groups && !Handsontable.Grouping) {                                                           // 15424
    init.call(this, arguments);                                                                                        // 15425
  } else if (!this.getSettings().groups && Handsontable.Grouping) {                                                    // 15426
    Handsontable.Grouping.resetGroups();                                                                               // 15427
    Handsontable.Grouping = void 0;                                                                                    // 15428
  }                                                                                                                    // 15429
});                                                                                                                    // 15430
                                                                                                                       // 15431
Handsontable.plugins.Grouping = Grouping;                                                                              // 15432
                                                                                                                       // 15433
(function (Handsontable) {                                                                                             // 15434
  /**                                                                                                                  // 15435
   * Plugin used to allow user to copy and paste from the context menu                                                 // 15436
   * Currently uses ZeroClipboard due to browser limitations                                                           // 15437
   * @constructor                                                                                                      // 15438
   */                                                                                                                  // 15439
  function ContextMenuCopyPaste() {                                                                                    // 15440
    this.zeroClipboardInstance = null;                                                                                 // 15441
    this.instance = null;                                                                                              // 15442
  }                                                                                                                    // 15443
                                                                                                                       // 15444
  /**                                                                                                                  // 15445
   * Configure ZeroClipboard                                                                                           // 15446
   */                                                                                                                  // 15447
  ContextMenuCopyPaste.prototype.prepareZeroClipboard = function () {                                                  // 15448
    if(this.swfPath) {                                                                                                 // 15449
      ZeroClipboard.config({                                                                                           // 15450
        swfPath: this.swfPath                                                                                          // 15451
      });                                                                                                              // 15452
    }                                                                                                                  // 15453
  };                                                                                                                   // 15454
                                                                                                                       // 15455
  /**                                                                                                                  // 15456
   * Copy action                                                                                                       // 15457
   * @returns {CopyPasteClass.elTextarea.value|*}                                                                      // 15458
   */                                                                                                                  // 15459
  ContextMenuCopyPaste.prototype.copy = function () {                                                                  // 15460
    this.instance.copyPaste.setCopyableText();                                                                         // 15461
    return this.instance.copyPaste.copyPasteInstance.elTextarea.value;                                                 // 15462
  };                                                                                                                   // 15463
                                                                                                                       // 15464
  /**                                                                                                                  // 15465
   * Adds copy/paste items to context menu                                                                             // 15466
   */                                                                                                                  // 15467
  ContextMenuCopyPaste.prototype.addToContextMenu = function (defaultOptions) {                                        // 15468
    if (!this.getSettings().contextMenuCopyPaste) {                                                                    // 15469
      return;                                                                                                          // 15470
    }                                                                                                                  // 15471
                                                                                                                       // 15472
    defaultOptions.items.unshift(                                                                                      // 15473
      {                                                                                                                // 15474
        key: 'copy',                                                                                                   // 15475
        name: 'Copy'                                                                                                   // 15476
      },                                                                                                               // 15477
      {                                                                                                                // 15478
        key: 'paste',                                                                                                  // 15479
        name: 'Paste',                                                                                                 // 15480
        callback: function () {                                                                                        // 15481
          this.copyPaste.triggerPaste();                                                                               // 15482
        }                                                                                                              // 15483
      },                                                                                                               // 15484
      Handsontable.ContextMenu.SEPARATOR                                                                               // 15485
    );                                                                                                                 // 15486
  };                                                                                                                   // 15487
                                                                                                                       // 15488
  /**                                                                                                                  // 15489
   * Setup ZeroClipboard swf clip position and event handlers                                                          // 15490
   * @param cmInstance Current context menu instance                                                                   // 15491
   */                                                                                                                  // 15492
  ContextMenuCopyPaste.prototype.setupZeroClipboard = function (cmInstance) {                                          // 15493
    var plugin = this;                                                                                                 // 15494
    this.cmInstance = cmInstance;                                                                                      // 15495
                                                                                                                       // 15496
    if (!Handsontable.Dom.hasClass(this.cmInstance.rootElement, 'htContextMenu')) {                                    // 15497
      return;                                                                                                          // 15498
    }                                                                                                                  // 15499
                                                                                                                       // 15500
    var data = cmInstance.getData();                                                                                   // 15501
    for (var i = 0, ilen = data.length; i < ilen; i++) { //find position of 'copy' option                              // 15502
      if (data[i].key === 'copy') {                                                                                    // 15503
        this.zeroClipboardInstance = new ZeroClipboard(cmInstance.getCell(i, 0));                                      // 15504
                                                                                                                       // 15505
        this.zeroClipboardInstance.off();                                                                              // 15506
        this.zeroClipboardInstance.on("copy", function (event) {                                                       // 15507
          var clipboard = event.clipboardData;                                                                         // 15508
          clipboard.setData("text/plain", plugin.copy());                                                              // 15509
          plugin.instance.getSettings().outsideClickDeselects = plugin.outsideClickDeselectsCache;                     // 15510
        });                                                                                                            // 15511
                                                                                                                       // 15512
        cmCopyPaste.bindEvents();                                                                                      // 15513
        break;                                                                                                         // 15514
      }                                                                                                                // 15515
    }                                                                                                                  // 15516
  };                                                                                                                   // 15517
                                                                                                                       // 15518
  /**                                                                                                                  // 15519
   * Bind all the standard events                                                                                      // 15520
   */                                                                                                                  // 15521
  ContextMenuCopyPaste.prototype.bindEvents = function () {                                                            // 15522
    var plugin = this;                                                                                                 // 15523
                                                                                                                       // 15524
    // Workaround for 'current' and 'zeroclipboard-is-hover' classes being stuck when moving the cursor over the context menu
    if (plugin.cmInstance) {                                                                                           // 15526
                                                                                                                       // 15527
      var eventManager = new Handsontable.eventManager(this.instance);                                                 // 15528
                                                                                                                       // 15529
      var removeCurrenClass = function (event) {                                                                       // 15530
        var hadClass = plugin.cmInstance.rootElement.querySelector('td.current');                                      // 15531
        if (hadClass) {                                                                                                // 15532
          Handsontable.Dom.removeClass(hadClass, 'current');                                                           // 15533
        }                                                                                                              // 15534
        plugin.outsideClickDeselectsCache = plugin.instance.getSettings().outsideClickDeselects;                       // 15535
        plugin.instance.getSettings().outsideClickDeselects = false;                                                   // 15536
      };                                                                                                               // 15537
                                                                                                                       // 15538
      var removeZeroClipboardClass = function (event) {                                                                // 15539
        var hadClass = plugin.cmInstance.rootElement.querySelector('td.zeroclipboard-is-hover');                       // 15540
        if (hadClass) {                                                                                                // 15541
          Handsontable.Dom.removeClass(hadClass, 'zeroclipboard-is-hover');                                            // 15542
        }                                                                                                              // 15543
        plugin.instance.getSettings().outsideClickDeselects = plugin.outsideClickDeselectsCache;                       // 15544
      };                                                                                                               // 15545
                                                                                                                       // 15546
      eventManager.removeEventListener(document,'mouseenter', function () {                                            // 15547
        removeCurrenClass();                                                                                           // 15548
      });                                                                                                              // 15549
      eventManager.addEventListener(document, 'mouseenter', function (e) {                                             // 15550
        removeCurrenClass();                                                                                           // 15551
      });                                                                                                              // 15552
                                                                                                                       // 15553
      eventManager.removeEventListener(document,'mouseleave', function () {                                            // 15554
        removeZeroClipboardClass();                                                                                    // 15555
      });                                                                                                              // 15556
      eventManager.addEventListener(document, 'mouseleave', function (e) {                                             // 15557
        removeZeroClipboardClass();                                                                                    // 15558
      });                                                                                                              // 15559
                                                                                                                       // 15560
                                                                                                                       // 15561
    }                                                                                                                  // 15562
  };                                                                                                                   // 15563
                                                                                                                       // 15564
  /**                                                                                                                  // 15565
   * Initialize plugin                                                                                                 // 15566
   * @returns {boolean} Returns false if ZeroClipboard is not properly included                                        // 15567
   */                                                                                                                  // 15568
  ContextMenuCopyPaste.prototype.init = function () {                                                                  // 15569
    if (!this.getSettings().contextMenuCopyPaste) {                                                                    // 15570
      return;                                                                                                          // 15571
    } else if (typeof this.getSettings().contextMenuCopyPaste == "object") {                                           // 15572
      cmCopyPaste.swfPath = this.getSettings().contextMenuCopyPaste.swfPath;                                           // 15573
    }                                                                                                                  // 15574
                                                                                                                       // 15575
    if (typeof ZeroClipboard === 'undefined') {                                                                        // 15576
      throw new Error("To be able to use the Copy/Paste feature from the context menu, you need to manualy include ZeroClipboard.js file to your website.");
                                                                                                                       // 15578
      return false;                                                                                                    // 15579
    }                                                                                                                  // 15580
                                                                                                                       // 15581
    try {                                                                                                              // 15582
      var flashTest = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');                                              // 15583
    } catch(exception) {                                                                                               // 15584
      if(!('undefined' != typeof navigator.mimeTypes['application/x-shockwave-flash'])) {                              // 15585
        throw new Error("To be able to use the Copy/Paste feature from the context menu, your browser needs to have Flash Plugin installed.");
                                                                                                                       // 15587
        return false;                                                                                                  // 15588
      }                                                                                                                // 15589
    }                                                                                                                  // 15590
                                                                                                                       // 15591
    cmCopyPaste.instance = this;                                                                                       // 15592
    cmCopyPaste.prepareZeroClipboard();                                                                                // 15593
  };                                                                                                                   // 15594
                                                                                                                       // 15595
  var cmCopyPaste = new ContextMenuCopyPaste();                                                                        // 15596
                                                                                                                       // 15597
  Handsontable.hooks.add('afterRender', function () {                                                                  // 15598
    cmCopyPaste.setupZeroClipboard(this);                                                                              // 15599
  });                                                                                                                  // 15600
                                                                                                                       // 15601
  Handsontable.hooks.add('afterInit', cmCopyPaste.init);                                                               // 15602
  Handsontable.hooks.add('afterContextMenuDefaultOptions', cmCopyPaste.addToContextMenu);                              // 15603
  Handsontable.ContextMenuCopyPaste = ContextMenuCopyPaste;                                                            // 15604
                                                                                                                       // 15605
})(Handsontable);                                                                                                      // 15606
                                                                                                                       // 15607
(function (Handsontable) {                                                                                             // 15608
  'use strict';                                                                                                        // 15609
                                                                                                                       // 15610
  function MultipleSelectionHandles(instance) {                                                                        // 15611
    this.instance = instance;                                                                                          // 15612
    this.dragged = [];                                                                                                 // 15613
                                                                                                                       // 15614
    this.eventManager = Handsontable.eventManager(instance);                                                           // 15615
                                                                                                                       // 15616
    this.bindTouchEvents();                                                                                            // 15617
  }                                                                                                                    // 15618
                                                                                                                       // 15619
  MultipleSelectionHandles.prototype.getCurrentRangeCoords = function (selectedRange, currentTouch, touchStartDirection, currentDirection, draggedHandle) {
    var topLeftCorner = selectedRange.getTopLeftCorner()                                                               // 15621
      , bottomRightCorner = selectedRange.getBottomRightCorner()                                                       // 15622
      , bottomLeftCorner = selectedRange.getBottomLeftCorner()                                                         // 15623
      , topRightCorner = selectedRange.getTopRightCorner();                                                            // 15624
                                                                                                                       // 15625
    var newCoords = {                                                                                                  // 15626
      start: null,                                                                                                     // 15627
      end: null                                                                                                        // 15628
    };                                                                                                                 // 15629
                                                                                                                       // 15630
    switch (touchStartDirection) {                                                                                     // 15631
      case "NE-SW":                                                                                                    // 15632
        switch (currentDirection) {                                                                                    // 15633
          case "NE-SW":                                                                                                // 15634
          case "NW-SE":                                                                                                // 15635
            if (draggedHandle == "topLeft") {                                                                          // 15636
              newCoords = {                                                                                            // 15637
                start: new WalkontableCellCoords(currentTouch.row, selectedRange.highlight.col),                       // 15638
                end: new WalkontableCellCoords(bottomLeftCorner.row, currentTouch.col)                                 // 15639
              };                                                                                                       // 15640
            } else {                                                                                                   // 15641
              newCoords = {                                                                                            // 15642
                start: new WalkontableCellCoords(selectedRange.highlight.row, currentTouch.col),                       // 15643
                end: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col)                                    // 15644
              };                                                                                                       // 15645
            }                                                                                                          // 15646
            break;                                                                                                     // 15647
          case "SE-NW":                                                                                                // 15648
            if (draggedHandle == "bottomRight") {                                                                      // 15649
              newCoords = {                                                                                            // 15650
                start: new WalkontableCellCoords(bottomRightCorner.row, currentTouch.col),                             // 15651
                end: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col)                                    // 15652
              };                                                                                                       // 15653
            }                                                                                                          // 15654
            break;                                                                                                     // 15655
          //case "SW-NE":                                                                                              // 15656
          //  break;                                                                                                   // 15657
        }                                                                                                              // 15658
        break;                                                                                                         // 15659
      case "NW-SE":                                                                                                    // 15660
        switch (currentDirection) {                                                                                    // 15661
          case "NE-SW":                                                                                                // 15662
            if (draggedHandle == "topLeft") {                                                                          // 15663
              newCoords = {                                                                                            // 15664
                start: currentTouch,                                                                                   // 15665
                end: bottomLeftCorner                                                                                  // 15666
              };                                                                                                       // 15667
            } else {                                                                                                   // 15668
              newCoords.end  = currentTouch;                                                                           // 15669
            }                                                                                                          // 15670
            break;                                                                                                     // 15671
          case "NW-SE":                                                                                                // 15672
            if (draggedHandle == "topLeft") {                                                                          // 15673
              newCoords = {                                                                                            // 15674
                start: currentTouch,                                                                                   // 15675
                end: bottomRightCorner                                                                                 // 15676
              };                                                                                                       // 15677
            } else {                                                                                                   // 15678
              newCoords.end  = currentTouch;                                                                           // 15679
            }                                                                                                          // 15680
            break;                                                                                                     // 15681
          case "SE-NW":                                                                                                // 15682
            if (draggedHandle == "topLeft") {                                                                          // 15683
              newCoords = {                                                                                            // 15684
                start: currentTouch,                                                                                   // 15685
                end: topLeftCorner                                                                                     // 15686
              };                                                                                                       // 15687
            } else {                                                                                                   // 15688
              newCoords.end  = currentTouch;                                                                           // 15689
            }                                                                                                          // 15690
            break;                                                                                                     // 15691
          case "SW-NE":                                                                                                // 15692
            if (draggedHandle == "topLeft") {                                                                          // 15693
              newCoords = {                                                                                            // 15694
                start: currentTouch,                                                                                   // 15695
                end: topRightCorner                                                                                    // 15696
              };                                                                                                       // 15697
            } else {                                                                                                   // 15698
              newCoords.end  = currentTouch;                                                                           // 15699
            }                                                                                                          // 15700
            break;                                                                                                     // 15701
        }                                                                                                              // 15702
        break;                                                                                                         // 15703
      case "SW-NE":                                                                                                    // 15704
        switch (currentDirection) {                                                                                    // 15705
          case "NW-SE":                                                                                                // 15706
            if (draggedHandle == "bottomRight") {                                                                      // 15707
              newCoords = {                                                                                            // 15708
                start: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col),                                 // 15709
                end: new WalkontableCellCoords(bottomLeftCorner.row, currentTouch.col)                                 // 15710
              };                                                                                                       // 15711
            } else {                                                                                                   // 15712
              newCoords = {                                                                                            // 15713
                start: new WalkontableCellCoords(topLeftCorner.row, currentTouch.col),                                 // 15714
                end: new WalkontableCellCoords(currentTouch.row, bottomRightCorner.col)                                // 15715
              };                                                                                                       // 15716
            }                                                                                                          // 15717
            break;                                                                                                     // 15718
          //case "NE-SW":                                                                                              // 15719
          //                                                                                                           // 15720
          //  break;                                                                                                   // 15721
          case "SW-NE":                                                                                                // 15722
            if (draggedHandle == "topLeft") {                                                                          // 15723
              newCoords = {                                                                                            // 15724
                start: new WalkontableCellCoords(selectedRange.highlight.row, currentTouch.col),                       // 15725
                end: new WalkontableCellCoords(currentTouch.row, bottomRightCorner.col)                                // 15726
              };                                                                                                       // 15727
            } else {                                                                                                   // 15728
              newCoords = {                                                                                            // 15729
                start: new WalkontableCellCoords(currentTouch.row, topLeftCorner.col),                                 // 15730
                end: new WalkontableCellCoords(topLeftCorner.row, currentTouch.col)                                    // 15731
              };                                                                                                       // 15732
            }                                                                                                          // 15733
            break;                                                                                                     // 15734
          case "SE-NW":                                                                                                // 15735
            if (draggedHandle == "bottomRight") {                                                                      // 15736
              newCoords = {                                                                                            // 15737
                start: new WalkontableCellCoords(currentTouch.row, topRightCorner.col),                                // 15738
                end: new WalkontableCellCoords(topLeftCorner.row, currentTouch.col)                                    // 15739
              };                                                                                                       // 15740
            } else if (draggedHandle == "topLeft") {                                                                   // 15741
              newCoords = {                                                                                            // 15742
                start: bottomLeftCorner,                                                                               // 15743
                end: currentTouch                                                                                      // 15744
              };                                                                                                       // 15745
            }                                                                                                          // 15746
            break;                                                                                                     // 15747
        }                                                                                                              // 15748
        break;                                                                                                         // 15749
      case "SE-NW":                                                                                                    // 15750
        switch (currentDirection) {                                                                                    // 15751
          case "NW-SE":                                                                                                // 15752
          case "NE-SW":                                                                                                // 15753
          case "SW-NE":                                                                                                // 15754
            if (draggedHandle == "topLeft") {                                                                          // 15755
              newCoords.end = currentTouch;                                                                            // 15756
            }                                                                                                          // 15757
            break;                                                                                                     // 15758
          case "SE-NW":                                                                                                // 15759
            if (draggedHandle == "topLeft") {                                                                          // 15760
              newCoords.end = currentTouch;                                                                            // 15761
            } else {                                                                                                   // 15762
              newCoords = {                                                                                            // 15763
                start: currentTouch,                                                                                   // 15764
                end: topLeftCorner                                                                                     // 15765
              };                                                                                                       // 15766
            }                                                                                                          // 15767
            break;                                                                                                     // 15768
        }                                                                                                              // 15769
        break;                                                                                                         // 15770
    }                                                                                                                  // 15771
                                                                                                                       // 15772
    return newCoords;                                                                                                  // 15773
  };                                                                                                                   // 15774
                                                                                                                       // 15775
  MultipleSelectionHandles.prototype.bindTouchEvents = function () {                                                   // 15776
    var that = this;                                                                                                   // 15777
    var removeFromDragged = function (query) {                                                                         // 15778
                                                                                                                       // 15779
      if (this.dragged.length == 1) {                                                                                  // 15780
        this.dragged = [];                                                                                             // 15781
        return true;                                                                                                   // 15782
      }                                                                                                                // 15783
                                                                                                                       // 15784
      var entryPosition = this.dragged.indexOf(query);                                                                 // 15785
                                                                                                                       // 15786
      if (entryPosition == -1) {                                                                                       // 15787
        return false;                                                                                                  // 15788
      } else if (entryPosition == 0) {                                                                                 // 15789
        this.dragged = this.dragged.slice(0, 1);                                                                       // 15790
      } else if (entryPosition == 1) {                                                                                 // 15791
        this.dragged = this.dragged.slice(-1);                                                                         // 15792
      }                                                                                                                // 15793
    };                                                                                                                 // 15794
                                                                                                                       // 15795
    this.eventManager.addEventListener(this.instance.rootElement,'touchstart', function (event) {                      // 15796
      if(Handsontable.Dom.hasClass(event.target, "topLeftSelectionHandle-HitArea")) {                                  // 15797
        that.dragged.push("topLeft");                                                                                  // 15798
        var selectedRange = that.instance.getSelectedRange();                                                          // 15799
        that.touchStartRange = {                                                                                       // 15800
          width: selectedRange.getWidth(),                                                                             // 15801
          height: selectedRange.getHeight(),                                                                           // 15802
          direction: selectedRange.getDirection()                                                                      // 15803
        };                                                                                                             // 15804
        event.preventDefault();                                                                                        // 15805
                                                                                                                       // 15806
        return false;                                                                                                  // 15807
      } else if (Handsontable.Dom.hasClass(event.target, "bottomRightSelectionHandle-HitArea")) {                      // 15808
        that.dragged.push("bottomRight");                                                                              // 15809
        var selectedRange = that.instance.getSelectedRange();                                                          // 15810
        that.touchStartRange = {                                                                                       // 15811
          width: selectedRange.getWidth(),                                                                             // 15812
          height: selectedRange.getHeight(),                                                                           // 15813
          direction: selectedRange.getDirection()                                                                      // 15814
        };                                                                                                             // 15815
        event.preventDefault();                                                                                        // 15816
                                                                                                                       // 15817
        return false;                                                                                                  // 15818
      }                                                                                                                // 15819
    });                                                                                                                // 15820
                                                                                                                       // 15821
    this.eventManager.addEventListener(this.instance.rootElement,'touchend', function (event) {                        // 15822
      if(Handsontable.Dom.hasClass(event.target, "topLeftSelectionHandle-HitArea")) {                                  // 15823
        removeFromDragged.call(that, "topLeft");                                                                       // 15824
        that.touchStartRange = void 0;                                                                                 // 15825
        event.preventDefault();                                                                                        // 15826
                                                                                                                       // 15827
        return false;                                                                                                  // 15828
      } else if (Handsontable.Dom.hasClass(event.target, "bottomRightSelectionHandle-HitArea")) {                      // 15829
        removeFromDragged.call(that, "bottomRight");                                                                   // 15830
        that.touchStartRange = void 0;                                                                                 // 15831
        event.preventDefault();                                                                                        // 15832
                                                                                                                       // 15833
        return false;                                                                                                  // 15834
      }                                                                                                                // 15835
    });                                                                                                                // 15836
                                                                                                                       // 15837
    this.eventManager.addEventListener(this.instance.rootElement,'touchmove', function (event) {                       // 15838
      var scrollTop = Handsontable.Dom.getWindowScrollTop()                                                            // 15839
        , scrollLeft = Handsontable.Dom.getWindowScrollLeft();                                                         // 15840
                                                                                                                       // 15841
      if (that.dragged.length > 0) {                                                                                   // 15842
        var endTarget = document.elementFromPoint(                                                                     // 15843
          event.touches[0].screenX - scrollLeft,                                                                       // 15844
          event.touches[0].screenY - scrollTop                                                                         // 15845
        );                                                                                                             // 15846
                                                                                                                       // 15847
        if(!endTarget) {                                                                                               // 15848
          return;                                                                                                      // 15849
        }                                                                                                              // 15850
                                                                                                                       // 15851
        if (endTarget.nodeName == "TD" || endTarget.nodeName == "TH") {                                                // 15852
          var targetCoords = that.instance.getCoords(endTarget);                                                       // 15853
                                                                                                                       // 15854
          if(targetCoords.col == -1) {                                                                                 // 15855
            targetCoords.col = 0;                                                                                      // 15856
          }                                                                                                            // 15857
                                                                                                                       // 15858
          var selectedRange = that.instance.getSelectedRange()                                                         // 15859
            , rangeWidth = selectedRange.getWidth()                                                                    // 15860
            , rangeHeight = selectedRange.getHeight()                                                                  // 15861
            , rangeDirection = selectedRange.getDirection();                                                           // 15862
                                                                                                                       // 15863
          if (rangeWidth == 1 && rangeHeight == 1) {                                                                   // 15864
            that.instance.selection.setRangeEnd(targetCoords);                                                         // 15865
          }                                                                                                            // 15866
                                                                                                                       // 15867
          var newRangeCoords = that.getCurrentRangeCoords(selectedRange, targetCoords, that.touchStartRange.direction, rangeDirection, that.dragged[0]);
                                                                                                                       // 15869
          if(newRangeCoords.start != null) {                                                                           // 15870
            that.instance.selection.setRangeStart(newRangeCoords.start);                                               // 15871
          }                                                                                                            // 15872
          that.instance.selection.setRangeEnd(newRangeCoords.end);                                                     // 15873
                                                                                                                       // 15874
        }                                                                                                              // 15875
                                                                                                                       // 15876
        event.preventDefault();                                                                                        // 15877
      }                                                                                                                // 15878
    });                                                                                                                // 15879
                                                                                                                       // 15880
  };                                                                                                                   // 15881
                                                                                                                       // 15882
  MultipleSelectionHandles.prototype.isDragged = function () {                                                         // 15883
    if (this.dragged.length == 0) {                                                                                    // 15884
      return false;                                                                                                    // 15885
    } else {                                                                                                           // 15886
      return true;                                                                                                     // 15887
    }                                                                                                                  // 15888
  };                                                                                                                   // 15889
                                                                                                                       // 15890
  var init = function () {                                                                                             // 15891
    var instance = this;                                                                                               // 15892
                                                                                                                       // 15893
    Handsontable.plugins.multipleSelectionHandles = new MultipleSelectionHandles(instance);                            // 15894
  };                                                                                                                   // 15895
                                                                                                                       // 15896
  Handsontable.hooks.add('afterInit', init);                                                                           // 15897
                                                                                                                       // 15898
})(Handsontable);                                                                                                      // 15899
                                                                                                                       // 15900
var TouchScroll = (function(instance) {                                                                                // 15901
                                                                                                                       // 15902
  function TouchScroll(instance) {}                                                                                    // 15903
                                                                                                                       // 15904
  TouchScroll.prototype.init = function(instance) {                                                                    // 15905
    this.instance = instance;                                                                                          // 15906
    this.bindEvents();                                                                                                 // 15907
                                                                                                                       // 15908
    this.scrollbars = [                                                                                                // 15909
      this.instance.view.wt.wtScrollbars.vertical,                                                                     // 15910
      this.instance.view.wt.wtScrollbars.horizontal,                                                                   // 15911
      this.instance.view.wt.wtScrollbars.corner                                                                        // 15912
    ]                                                                                                                  // 15913
                                                                                                                       // 15914
    this.clones = [                                                                                                    // 15915
      this.instance.view.wt.wtScrollbars.vertical.clone.wtTable.holder.parentNode,                                     // 15916
      this.instance.view.wt.wtScrollbars.horizontal.clone.wtTable.holder.parentNode,                                   // 15917
      this.instance.view.wt.wtScrollbars.corner.clone.wtTable.holder.parentNode                                        // 15918
    ]                                                                                                                  // 15919
  };                                                                                                                   // 15920
                                                                                                                       // 15921
  TouchScroll.prototype.bindEvents = function () {                                                                     // 15922
  var that = this;                                                                                                     // 15923
                                                                                                                       // 15924
    this.instance.addHook('beforeTouchScroll', function () {                                                           // 15925
      Handsontable.freezeOverlays = true;                                                                              // 15926
                                                                                                                       // 15927
      for(var i = 0, cloneCount = that.clones.length; i < cloneCount ; i++) {                                          // 15928
        Handsontable.Dom.addClass(that.clones[i], 'hide-tween');                                                       // 15929
      }                                                                                                                // 15930
    });                                                                                                                // 15931
                                                                                                                       // 15932
    this.instance.addHook('afterMomentumScroll', function () {                                                         // 15933
      Handsontable.freezeOverlays = false;                                                                             // 15934
                                                                                                                       // 15935
      for(var i = 0, cloneCount = that.clones.length; i < cloneCount ; i++) {                                          // 15936
        Handsontable.Dom.removeClass(that.clones[i], 'hide-tween');                                                    // 15937
      }                                                                                                                // 15938
                                                                                                                       // 15939
      for(var i = 0, cloneCount = that.clones.length; i < cloneCount ; i++) {                                          // 15940
        Handsontable.Dom.addClass(that.clones[i], 'show-tween');                                                       // 15941
      }                                                                                                                // 15942
                                                                                                                       // 15943
      setTimeout(function () {                                                                                         // 15944
        for(var i = 0, cloneCount = that.clones.length; i < cloneCount ; i++) {                                        // 15945
          Handsontable.Dom.removeClass(that.clones[i], 'show-tween');                                                  // 15946
        }                                                                                                              // 15947
      },400);                                                                                                          // 15948
                                                                                                                       // 15949
      for(var i = 0, cloneCount = that.scrollbars.length; i < cloneCount ; i++) {                                      // 15950
        that.scrollbars[i].refresh();                                                                                  // 15951
        that.scrollbars[i].resetFixedPosition();                                                                       // 15952
      }                                                                                                                // 15953
                                                                                                                       // 15954
    });                                                                                                                // 15955
                                                                                                                       // 15956
  };                                                                                                                   // 15957
                                                                                                                       // 15958
  return TouchScroll;                                                                                                  // 15959
}());                                                                                                                  // 15960
                                                                                                                       // 15961
var touchScrollHandler = new TouchScroll();                                                                            // 15962
                                                                                                                       // 15963
Handsontable.hooks.add('afterInit', function() {                                                                       // 15964
  touchScrollHandler.init.call(touchScrollHandler, this);                                                              // 15965
});                                                                                                                    // 15966
                                                                                                                       // 15967
/**                                                                                                                    // 15968
 * Creates an overlay over the original Walkontable instance. The overlay renders the clone of the original Walkontable
 * and (optionally) implements behavior needed for native horizontal and vertical scrolling                            // 15970
 */                                                                                                                    // 15971
function WalkontableOverlay() {}                                                                                       // 15972
                                                                                                                       // 15973
/*                                                                                                                     // 15974
 Possible optimizations:                                                                                               // 15975
 [x] don't rerender if scroll delta is smaller than the fragment outside of the viewport                               // 15976
 [ ] move .style.top change before .draw()                                                                             // 15977
 [ ] put .draw() in requestAnimationFrame                                                                              // 15978
 [ ] don't rerender rows that remain visible after the scroll                                                          // 15979
 */                                                                                                                    // 15980
                                                                                                                       // 15981
WalkontableOverlay.prototype.init = function () {                                                                      // 15982
  this.TABLE = this.instance.wtTable.TABLE;                                                                            // 15983
  this.fixed = this.instance.wtTable.hider;                                                                            // 15984
  this.fixedContainer = this.instance.wtTable.holder;                                                                  // 15985
  this.scrollHandler = this.getScrollableElement(this.TABLE);                                                          // 15986
};                                                                                                                     // 15987
                                                                                                                       // 15988
WalkontableOverlay.prototype.makeClone = function (direction) {                                                        // 15989
  var clone = document.createElement('DIV');                                                                           // 15990
  clone.className = 'ht_clone_' + direction + ' handsontable';                                                         // 15991
  clone.style.position = 'absolute';                                                                                   // 15992
  clone.style.top = 0;                                                                                                 // 15993
  clone.style.left = 0;                                                                                                // 15994
  clone.style.overflow = 'hidden';                                                                                     // 15995
                                                                                                                       // 15996
  var table2 = document.createElement('TABLE');                                                                        // 15997
  table2.className = this.instance.wtTable.TABLE.className;                                                            // 15998
  clone.appendChild(table2);                                                                                           // 15999
                                                                                                                       // 16000
  this.instance.wtTable.holder.parentNode.appendChild(clone);                                                          // 16001
                                                                                                                       // 16002
  return new Walkontable({                                                                                             // 16003
    cloneSource: this.instance,                                                                                        // 16004
    cloneOverlay: this,                                                                                                // 16005
    table: table2                                                                                                      // 16006
  });                                                                                                                  // 16007
};                                                                                                                     // 16008
                                                                                                                       // 16009
WalkontableOverlay.prototype.getScrollableElement = function (TABLE) {                                                 // 16010
  var el = TABLE.parentNode;                                                                                           // 16011
  while (el && el.style) {                                                                                             // 16012
    if (el.style.overflow !== 'visible' && el.style.overflow !== '') {                                                 // 16013
      return el;                                                                                                       // 16014
    }                                                                                                                  // 16015
    if (this instanceof WalkontableHorizontalScrollbarNative && el.style.overflowX !== 'visible' && el.style.overflowX !== '') {
      return el;                                                                                                       // 16017
    }                                                                                                                  // 16018
    el = el.parentNode;                                                                                                // 16019
  }                                                                                                                    // 16020
  return window;                                                                                                       // 16021
};                                                                                                                     // 16022
                                                                                                                       // 16023
WalkontableOverlay.prototype.refresh = function (fastDraw) {                                                           // 16024
  this.clone && this.clone.draw(fastDraw);                                                                             // 16025
};                                                                                                                     // 16026
                                                                                                                       // 16027
WalkontableOverlay.prototype.destroy = function () {                                                                   // 16028
  var eventManager = Handsontable.eventManager(this.clone);                                                            // 16029
  eventManager.clear();                                                                                                // 16030
};                                                                                                                     // 16031
                                                                                                                       // 16032
function WalkontableBorder(instance, settings) {                                                                       // 16033
  var style;                                                                                                           // 16034
  var createMultipleSelectorHandles = function () {                                                                    // 16035
    this.selectionHandles = {                                                                                          // 16036
      topLeft: document.createElement('DIV'),                                                                          // 16037
      topLeftHitArea: document.createElement('DIV'),                                                                   // 16038
      bottomRight: document.createElement('DIV'),                                                                      // 16039
      bottomRightHitArea: document.createElement('DIV')                                                                // 16040
    };                                                                                                                 // 16041
    var width = 10                                                                                                     // 16042
      , hitAreaWidth = 40;                                                                                             // 16043
                                                                                                                       // 16044
    this.selectionHandles.topLeft.className = 'topLeftSelectionHandle';                                                // 16045
    this.selectionHandles.topLeftHitArea.className = 'topLeftSelectionHandle-HitArea';                                 // 16046
    this.selectionHandles.bottomRight.className = 'bottomRightSelectionHandle';                                        // 16047
    this.selectionHandles.bottomRightHitArea.className = 'bottomRightSelectionHandle-HitArea';                         // 16048
                                                                                                                       // 16049
    this.selectionHandles.styles = {                                                                                   // 16050
      topLeft: this.selectionHandles.topLeft.style,                                                                    // 16051
      topLeftHitArea: this.selectionHandles.topLeftHitArea.style,                                                      // 16052
      bottomRight: this.selectionHandles.bottomRight.style,                                                            // 16053
      bottomRightHitArea: this.selectionHandles.bottomRightHitArea.style                                               // 16054
    };                                                                                                                 // 16055
                                                                                                                       // 16056
    var hitAreaStyle = {                                                                                               // 16057
      'position': 'absolute',                                                                                          // 16058
      'height': hitAreaWidth + 'px',                                                                                   // 16059
      'width': hitAreaWidth + 'px',                                                                                    // 16060
      'border-radius': parseInt(hitAreaWidth/1.5,10) + 'px'                                                            // 16061
    };                                                                                                                 // 16062
                                                                                                                       // 16063
    for (var prop in hitAreaStyle) {                                                                                   // 16064
      this.selectionHandles.styles.bottomRightHitArea[prop] = hitAreaStyle[prop];                                      // 16065
      this.selectionHandles.styles.topLeftHitArea[prop] = hitAreaStyle[prop];                                          // 16066
    }                                                                                                                  // 16067
                                                                                                                       // 16068
    var handleStyle = {                                                                                                // 16069
      'position': 'absolute',                                                                                          // 16070
      'height': width + 'px',                                                                                          // 16071
      'width': width + 'px',                                                                                           // 16072
      'border-radius': parseInt(width/1.5,10) + 'px',                                                                  // 16073
      'background': '#F5F5FF',                                                                                         // 16074
      'border': '1px solid #4285c8'                                                                                    // 16075
    };                                                                                                                 // 16076
                                                                                                                       // 16077
    for (var prop in handleStyle) {                                                                                    // 16078
      this.selectionHandles.styles.bottomRight[prop] = handleStyle[prop];                                              // 16079
      this.selectionHandles.styles.topLeft[prop] = handleStyle[prop];                                                  // 16080
    }                                                                                                                  // 16081
                                                                                                                       // 16082
    this.main.appendChild(this.selectionHandles.topLeft);                                                              // 16083
    this.main.appendChild(this.selectionHandles.bottomRight);                                                          // 16084
    this.main.appendChild(this.selectionHandles.topLeftHitArea);                                                       // 16085
    this.main.appendChild(this.selectionHandles.bottomRightHitArea);                                                   // 16086
  };                                                                                                                   // 16087
                                                                                                                       // 16088
  if(!settings){                                                                                                       // 16089
    return;                                                                                                            // 16090
  }                                                                                                                    // 16091
                                                                                                                       // 16092
  var eventManager = Handsontable.eventManager(instance);                                                              // 16093
                                                                                                                       // 16094
  //reference to instance                                                                                              // 16095
  this.instance = instance;                                                                                            // 16096
  this.settings = settings;                                                                                            // 16097
                                                                                                                       // 16098
  this.main = document.createElement("div");                                                                           // 16099
  style = this.main.style;                                                                                             // 16100
  style.position = 'absolute';                                                                                         // 16101
  style.top = 0;                                                                                                       // 16102
  style.left = 0;                                                                                                      // 16103
                                                                                                                       // 16104
  var borderDivs = ['top','left','bottom','right','corner'];                                                           // 16105
                                                                                                                       // 16106
  for (var i = 0; i < 5; i++) {                                                                                        // 16107
    var position = borderDivs[i];                                                                                      // 16108
                                                                                                                       // 16109
    var DIV = document.createElement('DIV');                                                                           // 16110
    DIV.className = 'wtBorder ' + (this.settings.className || ''); // + borderDivs[i];                                 // 16111
    if(this.settings[position] && this.settings[position].hide){                                                       // 16112
      DIV.className += " hidden";                                                                                      // 16113
    }                                                                                                                  // 16114
                                                                                                                       // 16115
    style = DIV.style;                                                                                                 // 16116
    style.backgroundColor = (this.settings[position] && this.settings[position].color) ? this.settings[position].color : settings.border.color;
    style.height = (this.settings[position] && this.settings[position].width) ? this.settings[position].width + 'px' : settings.border.width + 'px';
    style.width = (this.settings[position] && this.settings[position].width) ? this.settings[position].width + 'px' : settings.border.width + 'px';
                                                                                                                       // 16120
    this.main.appendChild(DIV);                                                                                        // 16121
  }                                                                                                                    // 16122
                                                                                                                       // 16123
  this.top = this.main.childNodes[0];                                                                                  // 16124
  this.left = this.main.childNodes[1];                                                                                 // 16125
  this.bottom = this.main.childNodes[2];                                                                               // 16126
  this.right = this.main.childNodes[3];                                                                                // 16127
                                                                                                                       // 16128
  this.topStyle = this.top.style;                                                                                      // 16129
  this.leftStyle = this.left.style;                                                                                    // 16130
  this.bottomStyle = this.bottom.style;                                                                                // 16131
  this.rightStyle = this.right.style;                                                                                  // 16132
                                                                                                                       // 16133
  this.corner = this.main.childNodes[4];                                                                               // 16134
  this.corner.className += ' corner';                                                                                  // 16135
  this.cornerStyle = this.corner.style;                                                                                // 16136
  this.cornerStyle.width = '5px';                                                                                      // 16137
  this.cornerStyle.height = '5px';                                                                                     // 16138
  this.cornerStyle.border = '2px solid #FFF';                                                                          // 16139
                                                                                                                       // 16140
  if(Handsontable.mobileBrowser) {                                                                                     // 16141
    createMultipleSelectorHandles.call(this);                                                                          // 16142
  }                                                                                                                    // 16143
                                                                                                                       // 16144
  this.disappear();                                                                                                    // 16145
  if (!instance.wtTable.bordersHolder) {                                                                               // 16146
    instance.wtTable.bordersHolder = document.createElement('div');                                                    // 16147
    instance.wtTable.bordersHolder.className = 'htBorders';                                                            // 16148
    instance.wtTable.hider.appendChild(instance.wtTable.bordersHolder);                                                // 16149
                                                                                                                       // 16150
  }                                                                                                                    // 16151
  instance.wtTable.bordersHolder.insertBefore(this.main, instance.wtTable.bordersHolder.firstChild);                   // 16152
                                                                                                                       // 16153
  var down = false;                                                                                                    // 16154
                                                                                                                       // 16155
                                                                                                                       // 16156
                                                                                                                       // 16157
  eventManager.addEventListener(document.body, 'mousedown', function () {                                              // 16158
    down = true;                                                                                                       // 16159
  });                                                                                                                  // 16160
                                                                                                                       // 16161
                                                                                                                       // 16162
  eventManager.addEventListener(document.body, 'mouseup', function () {                                                // 16163
    down = false                                                                                                       // 16164
  });                                                                                                                  // 16165
                                                                                                                       // 16166
  for (var c = 0, len = this.main.childNodes.length; c < len; c++) {                                                   // 16167
                                                                                                                       // 16168
    eventManager.addEventListener(this.main.childNodes[c], 'mouseenter', function (event) {                            // 16169
      if (!down || !instance.getSetting('hideBorderOnMouseDownOver')) {                                                // 16170
        return;                                                                                                        // 16171
      }                                                                                                                // 16172
      event.preventDefault();                                                                                          // 16173
      event.stopImmediatePropagation();                                                                                // 16174
                                                                                                                       // 16175
      var bounds = this.getBoundingClientRect();                                                                       // 16176
                                                                                                                       // 16177
      this.style.display = 'none';                                                                                     // 16178
                                                                                                                       // 16179
      var isOutside = function (event) {                                                                               // 16180
        if (event.clientY < Math.floor(bounds.top)) {                                                                  // 16181
          return true;                                                                                                 // 16182
        }                                                                                                              // 16183
        if (event.clientY > Math.ceil(bounds.top + bounds.height)) {                                                   // 16184
          return true;                                                                                                 // 16185
        }                                                                                                              // 16186
        if (event.clientX < Math.floor(bounds.left)) {                                                                 // 16187
          return true;                                                                                                 // 16188
        }                                                                                                              // 16189
        if (event.clientX > Math.ceil(bounds.left + bounds.width)) {                                                   // 16190
          return true;                                                                                                 // 16191
        }                                                                                                              // 16192
      };                                                                                                               // 16193
                                                                                                                       // 16194
      var handler = function (event) {                                                                                 // 16195
        if (isOutside(event)) {                                                                                        // 16196
          eventManager.removeEventListener(document.body, 'mousemove', handler);                                       // 16197
          this.style.display = 'block';                                                                                // 16198
        }                                                                                                              // 16199
      };                                                                                                               // 16200
      eventManager.addEventListener(document.body, 'mousemove', handler);;                                             // 16201
    });                                                                                                                // 16202
  }                                                                                                                    // 16203
}                                                                                                                      // 16204
                                                                                                                       // 16205
/**                                                                                                                    // 16206
 * Show border around one or many cells                                                                                // 16207
 * @param {Array} corners                                                                                              // 16208
 */                                                                                                                    // 16209
WalkontableBorder.prototype.appear = function (corners) {                                                              // 16210
  var isMultiple, fromTD, toTD, fromOffset, toOffset, containerOffset, top, minTop, left, minLeft, height, width;      // 16211
  if (this.disabled) {                                                                                                 // 16212
    return;                                                                                                            // 16213
  }                                                                                                                    // 16214
                                                                                                                       // 16215
  var instance = this.instance;                                                                                        // 16216
                                                                                                                       // 16217
  var fromRow                                                                                                          // 16218
    , fromColumn                                                                                                       // 16219
    , toRow                                                                                                            // 16220
    , toColumn                                                                                                         // 16221
    , i                                                                                                                // 16222
    , ilen                                                                                                             // 16223
    , s;                                                                                                               // 16224
                                                                                                                       // 16225
  var isPartRange = function () {                                                                                      // 16226
    if(this.instance.selections.area.cellRange) {                                                                      // 16227
                                                                                                                       // 16228
      if(toRow != this.instance.selections.area.cellRange.to.row                                                       // 16229
        || toColumn != this.instance.selections.area.cellRange.to.col) {                                               // 16230
        return true;                                                                                                   // 16231
      }                                                                                                                // 16232
    }                                                                                                                  // 16233
                                                                                                                       // 16234
    return false;                                                                                                      // 16235
  };                                                                                                                   // 16236
                                                                                                                       // 16237
  var updateMultipleSelectionHandlesPosition = function (top, left, width, height) {                                   // 16238
    var handleWidth = parseInt(this.selectionHandles.styles.topLeft.width, 10)                                         // 16239
      , hitAreaWidth = parseInt(this.selectionHandles.styles.topLeftHitArea.width, 10);                                // 16240
                                                                                                                       // 16241
    this.selectionHandles.styles.topLeft.top = parseInt(top - handleWidth,10) + "px";                                  // 16242
    this.selectionHandles.styles.topLeft.left = parseInt(left - handleWidth,10) + "px";                                // 16243
                                                                                                                       // 16244
    this.selectionHandles.styles.topLeftHitArea.top = parseInt(top - (hitAreaWidth/4)*3,10) + "px";                    // 16245
    this.selectionHandles.styles.topLeftHitArea.left = parseInt(left - (hitAreaWidth/4)*3,10) + "px";                  // 16246
                                                                                                                       // 16247
    this.selectionHandles.styles.bottomRight.top = parseInt(top + height,10) + "px";                                   // 16248
    this.selectionHandles.styles.bottomRight.left = parseInt(left + width,10) + "px";                                  // 16249
                                                                                                                       // 16250
    this.selectionHandles.styles.bottomRightHitArea.top = parseInt(top + height - hitAreaWidth/4,10) + "px";           // 16251
    this.selectionHandles.styles.bottomRightHitArea.left = parseInt(left + width - hitAreaWidth/4,10) + "px";          // 16252
                                                                                                                       // 16253
    if(this.settings.border.multipleSelectionHandlesVisible && this.settings.border.multipleSelectionHandlesVisible()) {
      this.selectionHandles.styles.topLeft.display = "block";                                                          // 16255
      this.selectionHandles.styles.topLeftHitArea.display = "block";                                                   // 16256
      if(!isPartRange.call(this)) {                                                                                    // 16257
        this.selectionHandles.styles.bottomRight.display = "block";                                                    // 16258
        this.selectionHandles.styles.bottomRightHitArea.display = "block";                                             // 16259
      } else {                                                                                                         // 16260
        this.selectionHandles.styles.bottomRight.display = "none";                                                     // 16261
        this.selectionHandles.styles.bottomRightHitArea.display = "none";                                              // 16262
      }                                                                                                                // 16263
    } else {                                                                                                           // 16264
      this.selectionHandles.styles.topLeft.display = "none";                                                           // 16265
      this.selectionHandles.styles.bottomRight.display = "none";                                                       // 16266
      this.selectionHandles.styles.topLeftHitArea.display = "none";                                                    // 16267
      this.selectionHandles.styles.bottomRightHitArea.display = "none";                                                // 16268
    }                                                                                                                  // 16269
                                                                                                                       // 16270
    if(fromRow == this.instance.wtSettings.getSetting('fixedRowsTop') || fromColumn == this.instance.wtSettings.getSetting('fixedColumnsLeft')) {
      this.selectionHandles.styles.topLeft.zIndex = "9999";                                                            // 16272
      this.selectionHandles.styles.topLeftHitArea.zIndex = "9999";                                                     // 16273
    } else {                                                                                                           // 16274
      this.selectionHandles.styles.topLeft.zIndex = "";                                                                // 16275
      this.selectionHandles.styles.topLeftHitArea.zIndex = "";                                                         // 16276
    }                                                                                                                  // 16277
                                                                                                                       // 16278
  };                                                                                                                   // 16279
                                                                                                                       // 16280
  if (instance.cloneOverlay instanceof WalkontableVerticalScrollbarNative || instance.cloneOverlay instanceof WalkontableCornerScrollbarNative) {
    ilen = instance.getSetting('fixedRowsTop');                                                                        // 16282
  }                                                                                                                    // 16283
  else {                                                                                                               // 16284
    ilen = instance.wtTable.getRenderedRowsCount();                                                                    // 16285
  }                                                                                                                    // 16286
                                                                                                                       // 16287
  for (i = 0; i < ilen; i++) {                                                                                         // 16288
    s = instance.wtTable.rowFilter.renderedToSource(i);                                                                // 16289
    if (s >= corners[0] && s <= corners[2]) {                                                                          // 16290
      fromRow = s;                                                                                                     // 16291
      break;                                                                                                           // 16292
    }                                                                                                                  // 16293
  }                                                                                                                    // 16294
                                                                                                                       // 16295
  for (i = ilen - 1; i >= 0; i--) {                                                                                    // 16296
    s = instance.wtTable.rowFilter.renderedToSource(i);                                                                // 16297
    if (s >= corners[0] && s <= corners[2]) {                                                                          // 16298
      toRow = s;                                                                                                       // 16299
      break;                                                                                                           // 16300
    }                                                                                                                  // 16301
  }                                                                                                                    // 16302
                                                                                                                       // 16303
  ilen = instance.wtTable.getRenderedColumnsCount();                                                                   // 16304
                                                                                                                       // 16305
  for (i = 0; i < ilen; i++) {                                                                                         // 16306
    s = instance.wtTable.columnFilter.renderedToSource(i);                                                             // 16307
    if (s >= corners[1] && s <= corners[3]) {                                                                          // 16308
      fromColumn = s;                                                                                                  // 16309
      break;                                                                                                           // 16310
    }                                                                                                                  // 16311
  }                                                                                                                    // 16312
                                                                                                                       // 16313
  for (i = ilen - 1; i >= 0; i--) {                                                                                    // 16314
    s = instance.wtTable.columnFilter.renderedToSource(i);                                                             // 16315
    if (s >= corners[1] && s <= corners[3]) {                                                                          // 16316
      toColumn = s;                                                                                                    // 16317
      break;                                                                                                           // 16318
    }                                                                                                                  // 16319
  }                                                                                                                    // 16320
                                                                                                                       // 16321
  if (fromRow !== void 0 && fromColumn !== void 0) {                                                                   // 16322
    isMultiple = (fromRow !== toRow || fromColumn !== toColumn);                                                       // 16323
    fromTD = instance.wtTable.getCell(new WalkontableCellCoords(fromRow, fromColumn));                                 // 16324
    toTD = isMultiple ? instance.wtTable.getCell(new WalkontableCellCoords(toRow, toColumn)) : fromTD;                 // 16325
    fromOffset = Handsontable.Dom.offset(fromTD);                                                                      // 16326
    toOffset = isMultiple ? Handsontable.Dom.offset(toTD) : fromOffset;                                                // 16327
    containerOffset = Handsontable.Dom.offset(instance.wtTable.TABLE);                                                 // 16328
                                                                                                                       // 16329
    minTop = fromOffset.top;                                                                                           // 16330
    height = toOffset.top + Handsontable.Dom.outerHeight(toTD) - minTop;                                               // 16331
    minLeft = fromOffset.left;                                                                                         // 16332
    width = toOffset.left + Handsontable.Dom.outerWidth(toTD) - minLeft;                                               // 16333
                                                                                                                       // 16334
    top = minTop - containerOffset.top - 1;                                                                            // 16335
    left = minLeft - containerOffset.left - 1;                                                                         // 16336
                                                                                                                       // 16337
    var style = Handsontable.Dom.getComputedStyle(fromTD);                                                             // 16338
    if (parseInt(style['borderTopWidth'], 10) > 0) {                                                                   // 16339
      top += 1;                                                                                                        // 16340
      height = height > 0 ? height - 1 : 0;                                                                            // 16341
    }                                                                                                                  // 16342
    if (parseInt(style['borderLeftWidth'], 10) > 0) {                                                                  // 16343
      left += 1;                                                                                                       // 16344
      width = width > 0 ? width - 1 : 0;                                                                               // 16345
    }                                                                                                                  // 16346
  }                                                                                                                    // 16347
  else {                                                                                                               // 16348
    this.disappear();                                                                                                  // 16349
    return;                                                                                                            // 16350
  }                                                                                                                    // 16351
                                                                                                                       // 16352
  this.topStyle.top = top + 'px';                                                                                      // 16353
  this.topStyle.left = left + 'px';                                                                                    // 16354
  this.topStyle.width = width + 'px';                                                                                  // 16355
  this.topStyle.display = 'block';                                                                                     // 16356
                                                                                                                       // 16357
  this.leftStyle.top = top + 'px';                                                                                     // 16358
  this.leftStyle.left = left + 'px';                                                                                   // 16359
  this.leftStyle.height = height + 'px';                                                                               // 16360
  this.leftStyle.display = 'block';                                                                                    // 16361
                                                                                                                       // 16362
  var delta = Math.floor(this.settings.border.width / 2);                                                              // 16363
                                                                                                                       // 16364
  this.bottomStyle.top = top + height - delta + 'px';                                                                  // 16365
  this.bottomStyle.left = left + 'px';                                                                                 // 16366
  this.bottomStyle.width = width + 'px';                                                                               // 16367
  this.bottomStyle.display = 'block';                                                                                  // 16368
                                                                                                                       // 16369
  this.rightStyle.top = top + 'px';                                                                                    // 16370
  this.rightStyle.left = left + width - delta + 'px';                                                                  // 16371
  this.rightStyle.height = height + 1 + 'px';                                                                          // 16372
  this.rightStyle.display = 'block';                                                                                   // 16373
                                                                                                                       // 16374
  if (Handsontable.mobileBrowser || (!this.hasSetting(this.settings.border.cornerVisible) || isPartRange.call(this))) {
    this.cornerStyle.display = 'none';                                                                                 // 16376
  }                                                                                                                    // 16377
  else {                                                                                                               // 16378
    this.cornerStyle.top = top + height - 4 + 'px';                                                                    // 16379
    this.cornerStyle.left = left + width - 4 + 'px';                                                                   // 16380
    this.cornerStyle.display = 'block';                                                                                // 16381
  }                                                                                                                    // 16382
                                                                                                                       // 16383
  if(Handsontable.mobileBrowser) {                                                                                     // 16384
    updateMultipleSelectionHandlesPosition.call(this,top, left, width, height);                                        // 16385
  }                                                                                                                    // 16386
};                                                                                                                     // 16387
                                                                                                                       // 16388
/**                                                                                                                    // 16389
 * Hide border                                                                                                         // 16390
 */                                                                                                                    // 16391
WalkontableBorder.prototype.disappear = function () {                                                                  // 16392
  this.topStyle.display = 'none';                                                                                      // 16393
  this.leftStyle.display = 'none';                                                                                     // 16394
  this.bottomStyle.display = 'none';                                                                                   // 16395
  this.rightStyle.display = 'none';                                                                                    // 16396
  this.cornerStyle.display = 'none';                                                                                   // 16397
                                                                                                                       // 16398
  if(Handsontable.mobileBrowser) {                                                                                     // 16399
    this.selectionHandles.styles.topLeft.display = 'none';                                                             // 16400
    this.selectionHandles.styles.bottomRight.display = 'none';                                                         // 16401
  }                                                                                                                    // 16402
                                                                                                                       // 16403
                                                                                                                       // 16404
};                                                                                                                     // 16405
                                                                                                                       // 16406
WalkontableBorder.prototype.hasSetting = function (setting) {                                                          // 16407
  if (typeof setting === 'function') {                                                                                 // 16408
    return setting();                                                                                                  // 16409
  }                                                                                                                    // 16410
  return !!setting;                                                                                                    // 16411
};                                                                                                                     // 16412
                                                                                                                       // 16413
/**                                                                                                                    // 16414
 * WalkontableCellCoords holds cell coordinates (row, column) and few metiod to validate them and retrieve as an array or an object
 * TODO: change interface to WalkontableCellCoords(row, col) everywhere, remove those unnecessary setter and getter functions
 */                                                                                                                    // 16417
                                                                                                                       // 16418
function WalkontableCellCoords(row, col) {                                                                             // 16419
  if (typeof row !== 'undefined' && typeof col !== 'undefined') {                                                      // 16420
    this.row = row;                                                                                                    // 16421
    this.col = col;                                                                                                    // 16422
  }                                                                                                                    // 16423
  else {                                                                                                               // 16424
    this.row = null;                                                                                                   // 16425
    this.col = null;                                                                                                   // 16426
  }                                                                                                                    // 16427
}                                                                                                                      // 16428
                                                                                                                       // 16429
/**                                                                                                                    // 16430
 * Returns boolean information if given set of coordinates is valid in context of a given Walkontable instance         // 16431
 * @param instance                                                                                                     // 16432
 * @returns {boolean}                                                                                                  // 16433
 */                                                                                                                    // 16434
WalkontableCellCoords.prototype.isValid = function (instance) {                                                        // 16435
  //is it a valid cell index (0 or higher)                                                                             // 16436
  if (this.row < 0 || this.col < 0) {                                                                                  // 16437
    return false;                                                                                                      // 16438
  }                                                                                                                    // 16439
                                                                                                                       // 16440
  //is selection within total rows and columns                                                                         // 16441
  if (this.row >= instance.getSetting('totalRows') || this.col >= instance.getSetting('totalColumns')) {               // 16442
    return false;                                                                                                      // 16443
  }                                                                                                                    // 16444
                                                                                                                       // 16445
  return true;                                                                                                         // 16446
};                                                                                                                     // 16447
                                                                                                                       // 16448
/**                                                                                                                    // 16449
 * Returns boolean information if this cell coords are the same as cell coords given as a parameter                    // 16450
 * @param {WalkontableCellCoords} cellCoords                                                                           // 16451
 * @returns {boolean}                                                                                                  // 16452
 */                                                                                                                    // 16453
WalkontableCellCoords.prototype.isEqual = function (cellCoords) {                                                      // 16454
  if (cellCoords === this) {                                                                                           // 16455
    return true;                                                                                                       // 16456
  }                                                                                                                    // 16457
  return (this.row === cellCoords.row && this.col === cellCoords.col);                                                 // 16458
};                                                                                                                     // 16459
                                                                                                                       // 16460
WalkontableCellCoords.prototype.isSouthEastOf = function (testedCoords) {                                              // 16461
  return this.row >= testedCoords.row && this.col >= testedCoords.col;                                                 // 16462
};                                                                                                                     // 16463
                                                                                                                       // 16464
WalkontableCellCoords.prototype.isNorthWestOf = function (testedCoords) {                                              // 16465
  return this.row <= testedCoords.row && this.col <= testedCoords.col;                                                 // 16466
};                                                                                                                     // 16467
                                                                                                                       // 16468
WalkontableCellCoords.prototype.isSouthWestOf = function (testedCoords) {                                              // 16469
  return this.row >= testedCoords.row && this.col <= testedCoords.col;                                                 // 16470
};                                                                                                                     // 16471
                                                                                                                       // 16472
WalkontableCellCoords.prototype.isNorthEastOf = function (testedCoords) {                                              // 16473
  return this.row <= testedCoords.row && this.col >= testedCoords.col;                                                 // 16474
};                                                                                                                     // 16475
                                                                                                                       // 16476
window.WalkontableCellCoords = WalkontableCellCoords; //export                                                         // 16477
                                                                                                                       // 16478
/**                                                                                                                    // 16479
 * A cell range is a set of exactly two WalkontableCellCoords (that can be the same or different)                      // 16480
 */                                                                                                                    // 16481
                                                                                                                       // 16482
function WalkontableCellRange(highlight, from, to) {                                                                   // 16483
  this.highlight = highlight; //this property is used to draw bold border around a cell where selection was started and to edit the cell when you press Enter
  this.from = from; //this property is usually the same as highlight, but in Excel there is distinction - one can change highlight within a selection
  this.to = to;                                                                                                        // 16486
}                                                                                                                      // 16487
                                                                                                                       // 16488
WalkontableCellRange.prototype.isValid = function (instance) {                                                         // 16489
  return (this.from.isValid(instance) && this.to.isValid(instance));                                                   // 16490
};                                                                                                                     // 16491
                                                                                                                       // 16492
WalkontableCellRange.prototype.isSingle = function () {                                                                // 16493
  return (this.from.row === this.to.row && this.from.col === this.to.col);                                             // 16494
};                                                                                                                     // 16495
                                                                                                                       // 16496
/**                                                                                                                    // 16497
 * Returns selected range height (in number of rows)                                                                   // 16498
 * @returns {number}                                                                                                   // 16499
 */                                                                                                                    // 16500
WalkontableCellRange.prototype.getHeight = function () {                                                               // 16501
  return Math.max(this.from.row, this.to.row) - Math.min(this.from.row, this.to.row) + 1;                              // 16502
};                                                                                                                     // 16503
                                                                                                                       // 16504
/**                                                                                                                    // 16505
 * Returns selected range width (in number of columns)                                                                 // 16506
 * @returns {number}                                                                                                   // 16507
 */                                                                                                                    // 16508
WalkontableCellRange.prototype.getWidth = function () {                                                                // 16509
  return Math.max(this.from.col, this.to.col) - Math.min(this.from.col, this.to.col) + 1;                              // 16510
};                                                                                                                     // 16511
                                                                                                                       // 16512
/**                                                                                                                    // 16513
 * Returns boolean information if given cell coords is within `from` and `to` cell coords of this range                // 16514
 * @param {WalkontableCellCoords} cellCoords                                                                           // 16515
 * @returns {boolean}                                                                                                  // 16516
 */                                                                                                                    // 16517
WalkontableCellRange.prototype.includes = function (cellCoords) {                                                      // 16518
  var topLeft = this.getTopLeftCorner();                                                                               // 16519
  var bottomRight = this.getBottomRightCorner();                                                                       // 16520
                                                                                                                       // 16521
  if (cellCoords.row < 0) {                                                                                            // 16522
    cellCoords.row = 0;                                                                                                // 16523
  }                                                                                                                    // 16524
                                                                                                                       // 16525
  if (cellCoords.col < 0) {                                                                                            // 16526
    cellCoords.col = 0;                                                                                                // 16527
  }                                                                                                                    // 16528
                                                                                                                       // 16529
  return (topLeft.row <= cellCoords.row && bottomRight.row >= cellCoords.row && topLeft.col <= cellCoords.col && bottomRight.col >= cellCoords.col);
};                                                                                                                     // 16531
                                                                                                                       // 16532
WalkontableCellRange.prototype.includesRange = function (testedRange) {                                                // 16533
  return this.includes(testedRange.getTopLeftCorner()) && this.includes(testedRange.getBottomRightCorner());           // 16534
};                                                                                                                     // 16535
                                                                                                                       // 16536
WalkontableCellRange.prototype.isEqual = function (testedRange) {                                                      // 16537
  return (Math.min(this.from.row, this.to.row) == Math.min(testedRange.from.row, testedRange.to.row))                  // 16538
    && (Math.max(this.from.row, this.to.row) == Math.max(testedRange.from.row, testedRange.to.row))                    // 16539
    && (Math.min(this.from.col, this.to.col) == Math.min(testedRange.from.col, testedRange.to.col))                    // 16540
    && (Math.max(this.from.col, this.to.col) == Math.max(testedRange.from.col, testedRange.to.col));                   // 16541
};                                                                                                                     // 16542
                                                                                                                       // 16543
/**                                                                                                                    // 16544
 * Returns true if tested range overlaps with the range.                                                               // 16545
 * Range A is considered to to be overlapping with range B if intersection of A and B or B and A is not empty.         // 16546
 * @param testedRange                                                                                                  // 16547
 * @returns {boolean}                                                                                                  // 16548
 */                                                                                                                    // 16549
WalkontableCellRange.prototype.overlaps = function (testedRange) {                                                     // 16550
  return testedRange.isSouthEastOf(this.getTopLeftCorner()) && testedRange.isNorthWestOf(this.getBottomRightCorner()); // 16551
};                                                                                                                     // 16552
                                                                                                                       // 16553
WalkontableCellRange.prototype.isSouthEastOf = function (testedCoords) {                                               // 16554
  return this.getTopLeftCorner().isSouthEastOf(testedCoords) || this.getBottomRightCorner().isSouthEastOf(testedCoords);
};                                                                                                                     // 16556
                                                                                                                       // 16557
WalkontableCellRange.prototype.isNorthWestOf = function (testedCoords) {                                               // 16558
  return this.getTopLeftCorner().isNorthWestOf(testedCoords) || this.getBottomRightCorner().isNorthWestOf(testedCoords);
};                                                                                                                     // 16560
                                                                                                                       // 16561
/**                                                                                                                    // 16562
 * Adds a cell to a range (only if exceeds corners of the range). Returns information if range was expanded            // 16563
 * @param {WalkontableCellCoords} cellCoords                                                                           // 16564
 * @returns {boolean}                                                                                                  // 16565
 */                                                                                                                    // 16566
WalkontableCellRange.prototype.expand = function (cellCoords) {                                                        // 16567
  var topLeft = this.getTopLeftCorner();                                                                               // 16568
  var bottomRight = this.getBottomRightCorner();                                                                       // 16569
  if (cellCoords.row < topLeft.row || cellCoords.col < topLeft.col || cellCoords.row > bottomRight.row || cellCoords.col > bottomRight.col) {
    this.from = new WalkontableCellCoords(Math.min(topLeft.row, cellCoords.row), Math.min(topLeft.col, cellCoords.col));
    this.to = new WalkontableCellCoords(Math.max(bottomRight.row, cellCoords.row), Math.max(bottomRight.col, cellCoords.col));
    return true;                                                                                                       // 16573
  }                                                                                                                    // 16574
  return false;                                                                                                        // 16575
};                                                                                                                     // 16576
                                                                                                                       // 16577
WalkontableCellRange.prototype.expandByRange = function (expandingRange) {                                             // 16578
  if (this.includesRange(expandingRange) || !this.overlaps(expandingRange)) {                                          // 16579
    return false;                                                                                                      // 16580
  }                                                                                                                    // 16581
                                                                                                                       // 16582
  var topLeft = this.getTopLeftCorner()                                                                                // 16583
    , bottomRight = this.getBottomRightCorner()                                                                        // 16584
    , topRight = this.getTopRightCorner()                                                                              // 16585
    , bottomLeft = this.getBottomLeftCorner();                                                                         // 16586
                                                                                                                       // 16587
  var expandingTopLeft = expandingRange.getTopLeftCorner();                                                            // 16588
  var expandingBottomRight = expandingRange.getBottomRightCorner();                                                    // 16589
                                                                                                                       // 16590
  var resultTopRow = Math.min(topLeft.row, expandingTopLeft.row);                                                      // 16591
  var resultTopCol = Math.min(topLeft.col, expandingTopLeft.col);                                                      // 16592
  var resultBottomRow = Math.max(bottomRight.row, expandingBottomRight.row);                                           // 16593
  var resultBottomCol = Math.max(bottomRight.col, expandingBottomRight.col);                                           // 16594
                                                                                                                       // 16595
  var finalFrom = new WalkontableCellCoords(resultTopRow, resultTopCol)                                                // 16596
    , finalTo = new WalkontableCellCoords(resultBottomRow, resultBottomCol);                                           // 16597
  var isCorner = new WalkontableCellRange(finalFrom, finalFrom, finalTo).isCorner(this.from, expandingRange)           // 16598
    , onlyMerge = expandingRange.isEqual(new WalkontableCellRange(finalFrom, finalFrom, finalTo));                     // 16599
                                                                                                                       // 16600
  if (isCorner && !onlyMerge) {                                                                                        // 16601
    if (this.from.col > finalFrom.col) {                                                                               // 16602
      finalFrom.col = resultBottomCol;                                                                                 // 16603
      finalTo.col = resultTopCol;                                                                                      // 16604
    }                                                                                                                  // 16605
    if (this.from.row > finalFrom.row) {                                                                               // 16606
      finalFrom.row = resultBottomRow;                                                                                 // 16607
      finalTo.row = resultTopRow;                                                                                      // 16608
    }                                                                                                                  // 16609
  }                                                                                                                    // 16610
                                                                                                                       // 16611
  this.from = finalFrom;                                                                                               // 16612
  this.to = finalTo;                                                                                                   // 16613
                                                                                                                       // 16614
  return true;                                                                                                         // 16615
};                                                                                                                     // 16616
                                                                                                                       // 16617
WalkontableCellRange.prototype.getDirection = function () {                                                            // 16618
  if (this.from.isNorthWestOf(this.to)) {        // NorthWest - SouthEast                                              // 16619
    return "NW-SE";                                                                                                    // 16620
  } else if (this.from.isNorthEastOf(this.to)) { // NorthEast - SouthWest                                              // 16621
    return "NE-SW";                                                                                                    // 16622
  } else if (this.from.isSouthEastOf(this.to)) { // SouthEast - NorthWest                                              // 16623
    return "SE-NW";                                                                                                    // 16624
  } else if (this.from.isSouthWestOf(this.to)) { // SouthWest - NorthEast                                              // 16625
    return "SW-NE";                                                                                                    // 16626
  }                                                                                                                    // 16627
};                                                                                                                     // 16628
                                                                                                                       // 16629
WalkontableCellRange.prototype.setDirection = function (direction) {                                                   // 16630
  switch (direction) {                                                                                                 // 16631
    case "NW-SE" :                                                                                                     // 16632
      this.from = this.getTopLeftCorner();                                                                             // 16633
      this.to = this.getBottomRightCorner();                                                                           // 16634
      break;                                                                                                           // 16635
    case "NE-SW" :                                                                                                     // 16636
      this.from = this.getTopRightCorner();                                                                            // 16637
      this.to = this.getBottomLeftCorner();                                                                            // 16638
      break;                                                                                                           // 16639
    case "SE-NW" :                                                                                                     // 16640
      this.from = this.getBottomRightCorner();                                                                         // 16641
      this.to = this.getTopLeftCorner();                                                                               // 16642
      break;                                                                                                           // 16643
    case "SW-NE" :                                                                                                     // 16644
      this.from = this.getBottomLeftCorner();                                                                          // 16645
      this.to = this.getTopRightCorner();                                                                              // 16646
      break;                                                                                                           // 16647
  }                                                                                                                    // 16648
};                                                                                                                     // 16649
                                                                                                                       // 16650
WalkontableCellRange.prototype.getTopLeftCorner = function () {                                                        // 16651
  return new WalkontableCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));        // 16652
};                                                                                                                     // 16653
                                                                                                                       // 16654
WalkontableCellRange.prototype.getBottomRightCorner = function () {                                                    // 16655
  return new WalkontableCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));        // 16656
};                                                                                                                     // 16657
                                                                                                                       // 16658
WalkontableCellRange.prototype.getTopRightCorner = function () {                                                       // 16659
  return new WalkontableCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));        // 16660
};                                                                                                                     // 16661
                                                                                                                       // 16662
WalkontableCellRange.prototype.getBottomLeftCorner = function () {                                                     // 16663
  return new WalkontableCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));        // 16664
};                                                                                                                     // 16665
                                                                                                                       // 16666
WalkontableCellRange.prototype.isCorner = function (coords, expandedRange) {                                           // 16667
  if (expandedRange) {                                                                                                 // 16668
    if (expandedRange.includes(coords)) {                                                                              // 16669
      if (this.getTopLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.from.col))   // 16670
        || this.getTopRightCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.to.col))   // 16671
        || this.getBottomLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.from.col)) // 16672
        || this.getBottomRightCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.to.col))) {
        return true;                                                                                                   // 16674
      }                                                                                                                // 16675
    }                                                                                                                  // 16676
  }                                                                                                                    // 16677
  return coords.isEqual(this.getTopLeftCorner()) || coords.isEqual(this.getTopRightCorner()) || coords.isEqual(this.getBottomLeftCorner()) || coords.isEqual(this.getBottomRightCorner());
};                                                                                                                     // 16679
                                                                                                                       // 16680
WalkontableCellRange.prototype.getOppositeCorner = function (coords, expandedRange) {                                  // 16681
  if (!(coords instanceof WalkontableCellCoords)) return false;                                                        // 16682
                                                                                                                       // 16683
  if (expandedRange) {                                                                                                 // 16684
    if (expandedRange.includes(coords)) {                                                                              // 16685
      if (this.getTopLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.from.col))) return this.getBottomRightCorner();
      if (this.getTopRightCorner().isEqual(new WalkontableCellCoords(expandedRange.from.row, expandedRange.to.col))) return this.getBottomLeftCorner();
      if (this.getBottomLeftCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.from.col))) return this.getTopRightCorner();
      if (this.getBottomRightCorner().isEqual(new WalkontableCellCoords(expandedRange.to.row, expandedRange.to.col))) return this.getTopLeftCorner();
    }                                                                                                                  // 16690
  }                                                                                                                    // 16691
                                                                                                                       // 16692
  if (coords.isEqual(this.getBottomRightCorner())) {                                                                   // 16693
    return this.getTopLeftCorner();                                                                                    // 16694
  } else if (coords.isEqual(this.getTopLeftCorner())) {                                                                // 16695
    return this.getBottomRightCorner();                                                                                // 16696
  } else if (coords.isEqual(this.getTopRightCorner())) {                                                               // 16697
    return this.getBottomLeftCorner();                                                                                 // 16698
  } else if (coords.isEqual(this.getBottomLeftCorner())) {                                                             // 16699
    return  this.getTopRightCorner();                                                                                  // 16700
  }                                                                                                                    // 16701
};                                                                                                                     // 16702
                                                                                                                       // 16703
WalkontableCellRange.prototype.getBordersSharedWith = function (range) {                                               // 16704
  if (!this.includesRange(range)) {                                                                                    // 16705
    return [];                                                                                                         // 16706
  }                                                                                                                    // 16707
                                                                                                                       // 16708
  var thisBorders = {                                                                                                  // 16709
      top: Math.min(this.from.row, this.to.row),                                                                       // 16710
      bottom: Math.max(this.from.row, this.to.row),                                                                    // 16711
      left: Math.min(this.from.col, this.to.col),                                                                      // 16712
      right: Math.max(this.from.col, this.to.col)                                                                      // 16713
    }                                                                                                                  // 16714
    , rangeBorders = {                                                                                                 // 16715
      top: Math.min(range.from.row, range.to.row),                                                                     // 16716
      bottom: Math.max(range.from.row, range.to.row),                                                                  // 16717
      left: Math.min(range.from.col, range.to.col),                                                                    // 16718
      right: Math.max(range.from.col, range.to.col)                                                                    // 16719
    }                                                                                                                  // 16720
    , result = [];                                                                                                     // 16721
                                                                                                                       // 16722
  if (thisBorders.top == rangeBorders.top) {                                                                           // 16723
    result.push('top');                                                                                                // 16724
  }                                                                                                                    // 16725
  if (thisBorders.right == rangeBorders.right) {                                                                       // 16726
    result.push('right');                                                                                              // 16727
  }                                                                                                                    // 16728
  if (thisBorders.bottom == rangeBorders.bottom) {                                                                     // 16729
    result.push('bottom');                                                                                             // 16730
  }                                                                                                                    // 16731
  if (thisBorders.left == rangeBorders.left) {                                                                         // 16732
    result.push('left');                                                                                               // 16733
  }                                                                                                                    // 16734
                                                                                                                       // 16735
  return result;                                                                                                       // 16736
};                                                                                                                     // 16737
                                                                                                                       // 16738
WalkontableCellRange.prototype.getInner = function () {                                                                // 16739
  var topLeft = this.getTopLeftCorner();                                                                               // 16740
  var bottomRight = this.getBottomRightCorner();                                                                       // 16741
  var out = [];                                                                                                        // 16742
  for (var r = topLeft.row; r <= bottomRight.row; r++) {                                                               // 16743
    for (var c = topLeft.col; c <= bottomRight.col; c++) {                                                             // 16744
      if (!(this.from.row === r && this.from.col === c) && !(this.to.row === r && this.to.col === c)) {                // 16745
        out.push(new WalkontableCellCoords(r, c));                                                                     // 16746
      }                                                                                                                // 16747
    }                                                                                                                  // 16748
  }                                                                                                                    // 16749
  return out;                                                                                                          // 16750
};                                                                                                                     // 16751
                                                                                                                       // 16752
WalkontableCellRange.prototype.getAll = function () {                                                                  // 16753
  var topLeft = this.getTopLeftCorner();                                                                               // 16754
  var bottomRight = this.getBottomRightCorner();                                                                       // 16755
  var out = [];                                                                                                        // 16756
  for (var r = topLeft.row; r <= bottomRight.row; r++) {                                                               // 16757
    for (var c = topLeft.col; c <= bottomRight.col; c++) {                                                             // 16758
      if (topLeft.row === r && topLeft.col === c) {                                                                    // 16759
        out.push(topLeft);                                                                                             // 16760
      }                                                                                                                // 16761
      else if (bottomRight.row === r && bottomRight.col === c) {                                                       // 16762
        out.push(bottomRight);                                                                                         // 16763
      }                                                                                                                // 16764
      else {                                                                                                           // 16765
        out.push(new WalkontableCellCoords(r, c));                                                                     // 16766
      }                                                                                                                // 16767
    }                                                                                                                  // 16768
  }                                                                                                                    // 16769
  return out;                                                                                                          // 16770
};                                                                                                                     // 16771
                                                                                                                       // 16772
/**                                                                                                                    // 16773
 * Runs a callback function against all cells in the range. You can break the iteration by returning false in the callback function
 * @param callback {Function}                                                                                          // 16775
 */                                                                                                                    // 16776
WalkontableCellRange.prototype.forAll = function (callback) {                                                          // 16777
  var topLeft = this.getTopLeftCorner();                                                                               // 16778
  var bottomRight = this.getBottomRightCorner();                                                                       // 16779
  for (var r = topLeft.row; r <= bottomRight.row; r++) {                                                               // 16780
    for (var c = topLeft.col; c <= bottomRight.col; c++) {                                                             // 16781
      var breakIteration = callback(r, c);                                                                             // 16782
      if (breakIteration === false) {                                                                                  // 16783
        return;                                                                                                        // 16784
      }                                                                                                                // 16785
    }                                                                                                                  // 16786
  }                                                                                                                    // 16787
};                                                                                                                     // 16788
                                                                                                                       // 16789
window.WalkontableCellRange = WalkontableCellRange; //export                                                           // 16790
                                                                                                                       // 16791
/**                                                                                                                    // 16792
 * WalkontableColumnFilter                                                                                             // 16793
 * @constructor                                                                                                        // 16794
 */                                                                                                                    // 16795
function WalkontableColumnFilter(offset,total, countTH) {                                                              // 16796
  this.offset = offset;                                                                                                // 16797
  this.total = total;                                                                                                  // 16798
  this.countTH = countTH;                                                                                              // 16799
}                                                                                                                      // 16800
                                                                                                                       // 16801
WalkontableColumnFilter.prototype.offsetted = function (n) {                                                           // 16802
  return n + this.offset;                                                                                              // 16803
};                                                                                                                     // 16804
                                                                                                                       // 16805
WalkontableColumnFilter.prototype.unOffsetted = function (n) {                                                         // 16806
  return n - this.offset;                                                                                              // 16807
};                                                                                                                     // 16808
                                                                                                                       // 16809
WalkontableColumnFilter.prototype.renderedToSource = function (n) {                                                    // 16810
  return this.offsetted(n);                                                                                            // 16811
};                                                                                                                     // 16812
                                                                                                                       // 16813
WalkontableColumnFilter.prototype.sourceToRendered = function (n) {                                                    // 16814
  return this.unOffsetted(n);                                                                                          // 16815
};                                                                                                                     // 16816
                                                                                                                       // 16817
WalkontableColumnFilter.prototype.offsettedTH = function (n) {                                                         // 16818
  return n - this.countTH;                                                                                             // 16819
};                                                                                                                     // 16820
                                                                                                                       // 16821
WalkontableColumnFilter.prototype.unOffsettedTH = function (n) {                                                       // 16822
  return n + this.countTH;                                                                                             // 16823
};                                                                                                                     // 16824
                                                                                                                       // 16825
WalkontableColumnFilter.prototype.visibleRowHeadedColumnToSourceColumn = function (n) {                                // 16826
  return this.renderedToSource(this.offsettedTH(n));                                                                   // 16827
};                                                                                                                     // 16828
                                                                                                                       // 16829
WalkontableColumnFilter.prototype.sourceColumnToVisibleRowHeadedColumn = function (n) {                                // 16830
  return this.unOffsettedTH(this.sourceToRendered(n));                                                                 // 16831
};                                                                                                                     // 16832
                                                                                                                       // 16833
/**                                                                                                                    // 16834
 * WalkontableColumnStrategy                                                                                           // 16835
 * @param containerSizeFn                                                                                              // 16836
 * @param sizeAtIndex                                                                                                  // 16837
 * @param strategy - all, last, none                                                                                   // 16838
 * @constructor                                                                                                        // 16839
 */                                                                                                                    // 16840
function WalkontableColumnStrategy(instance, containerSizeFn, sizeAtIndex, strategy) {                                 // 16841
  var size                                                                                                             // 16842
    , i = 0;                                                                                                           // 16843
                                                                                                                       // 16844
  this.instance = instance;                                                                                            // 16845
  this.containerSizeFn = containerSizeFn;                                                                              // 16846
  this.cellSizesSum = 0;                                                                                               // 16847
  this.cellSizes = [];                                                                                                 // 16848
  this.cellStretch = [];                                                                                               // 16849
  this.cellCount = 0;                                                                                                  // 16850
  this.visibleCellCount = 0;                                                                                           // 16851
  this.remainingSize = 0;                                                                                              // 16852
  this.strategy = strategy;                                                                                            // 16853
                                                                                                                       // 16854
  //step 1 - determine cells that fit containerSize and cache their widths                                             // 16855
  while (true) {                                                                                                       // 16856
    size = sizeAtIndex(i);                                                                                             // 16857
    if (size === void 0) {                                                                                             // 16858
      break; //total columns exceeded                                                                                  // 16859
    }                                                                                                                  // 16860
    if (this.cellSizesSum < this.getContainerSize()) {                                                                 // 16861
      this.visibleCellCount++;                                                                                         // 16862
    }                                                                                                                  // 16863
    this.cellSizes.push(size);                                                                                         // 16864
    this.cellSizesSum += size;                                                                                         // 16865
    this.cellCount++;                                                                                                  // 16866
                                                                                                                       // 16867
    i++;                                                                                                               // 16868
  }                                                                                                                    // 16869
                                                                                                                       // 16870
  var containerSize = this.getContainerSize();                                                                         // 16871
  this.remainingSize = this.cellSizesSum - containerSize;                                                              // 16872
  //negative value means the last cell is fully visible and there is some space left for stretching                    // 16873
  //positive value means the last cell is not fully visible                                                            // 16874
}                                                                                                                      // 16875
                                                                                                                       // 16876
WalkontableColumnStrategy.prototype.getContainerSize = function () {                                                   // 16877
  return typeof this.containerSizeFn === 'function' ? this.containerSizeFn() : this.containerSizeFn;                   // 16878
};                                                                                                                     // 16879
                                                                                                                       // 16880
WalkontableColumnStrategy.prototype.getSize = function (index) {                                                       // 16881
  return this.cellSizes[index] + (this.cellStretch[index] || 0);                                                       // 16882
};                                                                                                                     // 16883
                                                                                                                       // 16884
WalkontableColumnStrategy.prototype.stretch = function () {                                                            // 16885
  //step 2 - apply stretching strategy                                                                                 // 16886
  var containerSize = this.getContainerSize()                                                                          // 16887
    , i = 0;                                                                                                           // 16888
                                                                                                                       // 16889
  this.remainingSize = this.cellSizesSum - containerSize;                                                              // 16890
                                                                                                                       // 16891
  this.cellStretch.length = 0; //clear previous stretch                                                                // 16892
                                                                                                                       // 16893
  if (this.strategy === 'all') {                                                                                       // 16894
    if (this.remainingSize < 0) {                                                                                      // 16895
      var ratio = containerSize / this.cellSizesSum;                                                                   // 16896
      var newSize;                                                                                                     // 16897
                                                                                                                       // 16898
      while (i < this.cellCount - 1) { //"i < this.cellCount - 1" is needed because last cellSize is adjusted after the loop
        newSize = Math.floor(ratio * this.cellSizes[i]);                                                               // 16900
        this.remainingSize += newSize - this.cellSizes[i];                                                             // 16901
        this.cellStretch[i] = newSize - this.cellSizes[i];                                                             // 16902
        i++;                                                                                                           // 16903
      }                                                                                                                // 16904
      this.cellStretch[this.cellCount - 1] = -this.remainingSize;                                                      // 16905
      this.remainingSize = 0;                                                                                          // 16906
    }                                                                                                                  // 16907
  }                                                                                                                    // 16908
  else if (this.strategy === 'last') {                                                                                 // 16909
    if (this.remainingSize < 0 && containerSize !== Infinity) { //Infinity is with native scroll when the table is wider than the viewport (TODO: test)
      this.cellStretch[this.cellCount - 1] = -this.remainingSize;                                                      // 16911
      this.remainingSize = 0;                                                                                          // 16912
    }                                                                                                                  // 16913
  }                                                                                                                    // 16914
};                                                                                                                     // 16915
                                                                                                                       // 16916
WalkontableColumnStrategy.prototype.countVisible = function () {                                                       // 16917
  return this.visibleCellCount;                                                                                        // 16918
};                                                                                                                     // 16919
                                                                                                                       // 16920
WalkontableColumnStrategy.prototype.isLastIncomplete = function () {                                                   // 16921
                                                                                                                       // 16922
  var firstRow = this.instance.wtTable.getFirstVisibleRow();                                                           // 16923
  var lastCol = this.instance.wtTable.getLastVisibleColumn();                                                          // 16924
  var cell = this.instance.wtTable.getCell(new WalkontableCellCoords(firstRow, lastCol));                              // 16925
  var cellOffset = Handsontable.Dom.offset(cell);                                                                      // 16926
  var cellWidth = Handsontable.Dom.outerWidth(cell);                                                                   // 16927
  var cellEnd = cellOffset.left + cellWidth;                                                                           // 16928
                                                                                                                       // 16929
  var viewportOffsetLeft = this.instance.wtScrollbars.vertical.getScrollPosition();                                    // 16930
  var viewportWitdh = this.instance.wtViewport.getViewportWidth();                                                     // 16931
  var viewportEnd = viewportOffsetLeft + viewportWitdh;                                                                // 16932
                                                                                                                       // 16933
                                                                                                                       // 16934
  return viewportEnd >= cellEnd;                                                                                       // 16935
};                                                                                                                     // 16936
                                                                                                                       // 16937
function Walkontable(settings) {                                                                                       // 16938
  var originalHeaders = [];                                                                                            // 16939
                                                                                                                       // 16940
  this.guid = 'wt_' + walkontableRandomString(); //this is the namespace for global events                             // 16941
                                                                                                                       // 16942
  //bootstrap from settings                                                                                            // 16943
  if (settings.cloneSource) {                                                                                          // 16944
    this.cloneSource = settings.cloneSource;                                                                           // 16945
    this.cloneOverlay = settings.cloneOverlay;                                                                         // 16946
    this.wtSettings = settings.cloneSource.wtSettings;                                                                 // 16947
    this.wtTable = new WalkontableTable(this, settings.table);                                                         // 16948
    this.wtScroll = new WalkontableScroll(this);                                                                       // 16949
    this.wtViewport = settings.cloneSource.wtViewport;                                                                 // 16950
    this.wtEvent = new WalkontableEvent(this);                                                                         // 16951
    this.selections = this.cloneSource.selections;                                                                     // 16952
  }                                                                                                                    // 16953
  else {                                                                                                               // 16954
    this.wtSettings = new WalkontableSettings(this, settings);                                                         // 16955
    this.wtTable = new WalkontableTable(this, settings.table);                                                         // 16956
    this.wtScroll = new WalkontableScroll(this);                                                                       // 16957
    this.wtViewport = new WalkontableViewport(this);                                                                   // 16958
    this.wtEvent = new WalkontableEvent(this);                                                                         // 16959
    this.selections = this.getSetting('selections');                                                                   // 16960
                                                                                                                       // 16961
    this.wtScrollbars = new WalkontableScrollbars(this);                                                               // 16962
  }                                                                                                                    // 16963
                                                                                                                       // 16964
  //find original headers                                                                                              // 16965
  if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {                    // 16966
    for (var c = 0, clen = this.wtTable.THEAD.childNodes[0].childNodes.length; c < clen; c++) {                        // 16967
      originalHeaders.push(this.wtTable.THEAD.childNodes[0].childNodes[c].innerHTML);                                  // 16968
    }                                                                                                                  // 16969
    if (!this.getSetting('columnHeaders').length) {                                                                    // 16970
      this.update('columnHeaders', [function (column, TH) {                                                            // 16971
        Handsontable.Dom.fastInnerText(TH, originalHeaders[column]);                                                   // 16972
      }]);                                                                                                             // 16973
    }                                                                                                                  // 16974
  }                                                                                                                    // 16975
                                                                                                                       // 16976
                                                                                                                       // 16977
                                                                                                                       // 16978
  this.drawn = false;                                                                                                  // 16979
  this.drawInterrupted = false;                                                                                        // 16980
}                                                                                                                      // 16981
                                                                                                                       // 16982
/**                                                                                                                    // 16983
 * Force rerender of Walkontable                                                                                       // 16984
 * @param fastDraw {Boolean} When TRUE, try to refresh only the positions of borders without rerendering the data. It will only work if WalkontableTable.draw() does not force rendering anyway
 * @returns {Walkontable}                                                                                              // 16986
 */                                                                                                                    // 16987
Walkontable.prototype.draw = function (fastDraw) {                                                                     // 16988
  this.drawInterrupted = false;                                                                                        // 16989
  if (!fastDraw && !Handsontable.Dom.isVisible(this.wtTable.TABLE)) {                                                  // 16990
    this.drawInterrupted = true; //draw interrupted because TABLE is not visible                                       // 16991
    return;                                                                                                            // 16992
  }                                                                                                                    // 16993
                                                                                                                       // 16994
  this.wtTable.draw(fastDraw);                                                                                         // 16995
                                                                                                                       // 16996
  return this;                                                                                                         // 16997
};                                                                                                                     // 16998
                                                                                                                       // 16999
/**                                                                                                                    // 17000
 * Returns the TD at coords. If topmost is set to true, returns TD from the topmost overlay layer,                     // 17001
 * if not set or set to false, returns TD from the master table.                                                       // 17002
 * @param {WalkontableCellCoords} coords                                                                               // 17003
 * @param {Boolean} topmost                                                                                            // 17004
 * @returns {Object}                                                                                                   // 17005
 */                                                                                                                    // 17006
Walkontable.prototype.getCell = function (coords, topmost) {                                                           // 17007
  if(!topmost) {                                                                                                       // 17008
    return this.wtTable.getCell(coords);                                                                               // 17009
  } else {                                                                                                             // 17010
    var fixedRows = this.wtSettings.getSetting('fixedRowsTop')                                                         // 17011
      , fixedColumns = this.wtSettings.getSetting('fixedColumnsLeft');                                                 // 17012
                                                                                                                       // 17013
    if(coords.row < fixedRows && coords.col < fixedColumns) {                                                          // 17014
      return this.wtScrollbars.corner.clone.wtTable.getCell(coords);                                                   // 17015
    } else if(coords.row < fixedRows) {                                                                                // 17016
      return this.wtScrollbars.vertical.clone.wtTable.getCell(coords);                                                 // 17017
    } else if (coords.col < fixedColumns) {                                                                            // 17018
      return this.wtScrollbars.horizontal.clone.wtTable.getCell(coords);                                               // 17019
    } else {                                                                                                           // 17020
      return this.wtTable.getCell(coords);                                                                             // 17021
    }                                                                                                                  // 17022
  }                                                                                                                    // 17023
};                                                                                                                     // 17024
                                                                                                                       // 17025
Walkontable.prototype.update = function (settings, value) {                                                            // 17026
  return this.wtSettings.update(settings, value);                                                                      // 17027
};                                                                                                                     // 17028
                                                                                                                       // 17029
/**                                                                                                                    // 17030
 * Scroll the viewport to a row at the given index in the data source                                                  // 17031
 * @param row                                                                                                          // 17032
 * @returns {Walkontable}                                                                                              // 17033
 */                                                                                                                    // 17034
Walkontable.prototype.scrollVertical = function (row) {                                                                // 17035
  this.wtScrollbars.vertical.scrollTo(row);                                                                            // 17036
  this.getSetting('onScrollVertically');                                                                               // 17037
  return this;                                                                                                         // 17038
};                                                                                                                     // 17039
                                                                                                                       // 17040
/**                                                                                                                    // 17041
 * Scroll the viewport to a column at the given index in the data source                                               // 17042
 * @param row                                                                                                          // 17043
 * @returns {Walkontable}                                                                                              // 17044
 */                                                                                                                    // 17045
Walkontable.prototype.scrollHorizontal = function (column) {                                                           // 17046
  this.wtScrollbars.horizontal.scrollTo(column);                                                                       // 17047
  this.getSetting('onScrollHorizontally');                                                                             // 17048
  return this;                                                                                                         // 17049
};                                                                                                                     // 17050
                                                                                                                       // 17051
/**                                                                                                                    // 17052
 * Scrolls the viewport to a cell (rerenders if needed)                                                                // 17053
 * @param {WalkontableCellCoords} coords                                                                               // 17054
 * @returns {Walkontable}                                                                                              // 17055
 */                                                                                                                    // 17056
                                                                                                                       // 17057
Walkontable.prototype.scrollViewport = function (coords) {                                                             // 17058
  this.wtScroll.scrollViewport(coords);                                                                                // 17059
  return this;                                                                                                         // 17060
};                                                                                                                     // 17061
                                                                                                                       // 17062
Walkontable.prototype.getViewport = function () {                                                                      // 17063
  return [                                                                                                             // 17064
    this.wtTable.getFirstVisibleRow(),                                                                                 // 17065
    this.wtTable.getFirstVisibleColumn(),                                                                              // 17066
    this.wtTable.getLastVisibleRow(),                                                                                  // 17067
    this.wtTable.getLastVisibleColumn()                                                                                // 17068
  ];                                                                                                                   // 17069
};                                                                                                                     // 17070
                                                                                                                       // 17071
Walkontable.prototype.getSetting = function (key, param1, param2, param3, param4) {                                    // 17072
  return this.wtSettings.getSetting(key, param1, param2, param3, param4); //this is faster than .apply - https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips
};                                                                                                                     // 17074
                                                                                                                       // 17075
Walkontable.prototype.hasSetting = function (key) {                                                                    // 17076
  return this.wtSettings.has(key);                                                                                     // 17077
};                                                                                                                     // 17078
                                                                                                                       // 17079
Walkontable.prototype.destroy = function () {                                                                          // 17080
  this.wtScrollbars.destroy();                                                                                         // 17081
  this.wtEvent && this.wtEvent.destroy();                                                                              // 17082
};                                                                                                                     // 17083
                                                                                                                       // 17084
/**                                                                                                                    // 17085
 * A overlay that renders ALL available rows & columns positioned on top of the original Walkontable instance and all other overlays.
 * Used for debugging purposes to see if the other overlays (that render only part of the rows & columns) are positioned correctly
 * @param instance                                                                                                     // 17088
 * @constructor                                                                                                        // 17089
 */                                                                                                                    // 17090
function WalkontableDebugOverlay(instance) {                                                                           // 17091
  this.instance = instance;                                                                                            // 17092
  this.init();                                                                                                         // 17093
  this.clone = this.makeClone('debug');                                                                                // 17094
  this.clone.wtTable.holder.style.opacity = 0.4;                                                                       // 17095
  this.clone.wtTable.holder.style.textShadow = '0 0 2px #ff0000';                                                      // 17096
  this.lastTimeout = null;                                                                                             // 17097
                                                                                                                       // 17098
  Handsontable.Dom.addClass(this.clone.wtTable.holder.parentNode, 'wtDebugVisible');                                   // 17099
                                                                                                                       // 17100
  /*var that = this;                                                                                                   // 17101
  var lastX = 0;                                                                                                       // 17102
  var lastY = 0;                                                                                                       // 17103
  var overlayContainer = that.clone.wtTable.holder.parentNode;                                                         // 17104
                                                                                                                       // 17105
  var eventManager = Handsontable.eventManager(instance);                                                              // 17106
                                                                                                                       // 17107
  eventManager.addEventListener(document.body, 'mousemove', function (event) {                                         // 17108
    if (!that.instance.wtTable.holder.parentNode) {                                                                    // 17109
      return; //removed from DOM                                                                                       // 17110
    }                                                                                                                  // 17111
    if ((event.clientX - lastX > -5 && event.clientX - lastX < 5) && (event.clientY - lastY > -5 && event.clientY - lastY < 5)) {
      return; //ignore minor mouse movement                                                                            // 17113
    }                                                                                                                  // 17114
    lastX = event.clientX;                                                                                             // 17115
    lastY = event.clientY;                                                                                             // 17116
    Handsontable.Dom.addClass(overlayContainer, 'wtDebugHidden');                                                      // 17117
    Handsontable.Dom.removeClass(overlayContainer, 'wtDebugVisible');                                                  // 17118
    clearTimeout(this.lastTimeout);                                                                                    // 17119
    this.lastTimeout = setTimeout(function () {                                                                        // 17120
      Handsontable.Dom.removeClass(overlayContainer, 'wtDebugHidden');                                                 // 17121
      Handsontable.Dom.addClass(overlayContainer, 'wtDebugVisible');                                                   // 17122
    }, 1000);                                                                                                          // 17123
  });*/                                                                                                                // 17124
}                                                                                                                      // 17125
                                                                                                                       // 17126
WalkontableDebugOverlay.prototype = new WalkontableOverlay();                                                          // 17127
                                                                                                                       // 17128
WalkontableDebugOverlay.prototype.destroy = function () {                                                              // 17129
  WalkontableOverlay.prototype.destroy.call(this);                                                                     // 17130
  clearTimeout(this.lastTimeout);                                                                                      // 17131
};                                                                                                                     // 17132
                                                                                                                       // 17133
function WalkontableEvent(instance) {                                                                                  // 17134
  var that = this;                                                                                                     // 17135
                                                                                                                       // 17136
  var eventManager = Handsontable.eventManager(instance);                                                              // 17137
                                                                                                                       // 17138
  //reference to instance                                                                                              // 17139
  this.instance = instance;                                                                                            // 17140
                                                                                                                       // 17141
  var dblClickOrigin = [null, null];                                                                                   // 17142
  this.dblClickTimeout = [null, null];                                                                                 // 17143
                                                                                                                       // 17144
  var onMouseDown = function (event) {                                                                                 // 17145
    var cell = that.parentCell(event.target);                                                                          // 17146
    if (Handsontable.Dom.hasClass(event.target, 'corner')) {                                                           // 17147
      that.instance.getSetting('onCellCornerMouseDown', event, event.target);                                          // 17148
    }                                                                                                                  // 17149
    else if (cell.TD) {                                                                                                // 17150
      if (that.instance.hasSetting('onCellMouseDown')) {                                                               // 17151
        that.instance.getSetting('onCellMouseDown', event, cell.coords, cell.TD, that.instance);                       // 17152
      }                                                                                                                // 17153
    }                                                                                                                  // 17154
                                                                                                                       // 17155
    if (event.button !== 2) { //if not right mouse button                                                              // 17156
      if (cell.TD) {                                                                                                   // 17157
        dblClickOrigin[0] = cell.TD;                                                                                   // 17158
        clearTimeout(that.dblClickTimeout[0]);                                                                         // 17159
        that.dblClickTimeout[0] = setTimeout(function () {                                                             // 17160
          dblClickOrigin[0] = null;                                                                                    // 17161
        }, 1000);                                                                                                      // 17162
      }                                                                                                                // 17163
    }                                                                                                                  // 17164
  };                                                                                                                   // 17165
                                                                                                                       // 17166
  var onTouchMove = function (event) {                                                                                 // 17167
    that.instance.touchMoving = true;                                                                                  // 17168
  };                                                                                                                   // 17169
                                                                                                                       // 17170
  var longTouchTimeout;                                                                                                // 17171
                                                                                                                       // 17172
  ///**                                                                                                                // 17173
  // * Update touch event target - if user taps on resize handle 'hit area', update the target to the cell itself      // 17174
  // * @param event                                                                                                    // 17175
  // */                                                                                                                // 17176
  /*                                                                                                                   // 17177
  var adjustTapTarget = function (event) {                                                                             // 17178
    var currentSelection                                                                                               // 17179
      , properTarget;                                                                                                  // 17180
                                                                                                                       // 17181
    if(Handsontable.Dom.hasClass(event.target,'SelectionHandle')) {                                                    // 17182
      if(that.instance.selections[0].cellRange) {                                                                      // 17183
        currentSelection = that.instance.selections[0].cellRange.highlight;                                            // 17184
                                                                                                                       // 17185
        properTarget = that.instance.getCell(currentSelection, true);                                                  // 17186
      }                                                                                                                // 17187
    }                                                                                                                  // 17188
                                                                                                                       // 17189
    if(properTarget) {                                                                                                 // 17190
      Object.defineProperty(event,'target',{                                                                           // 17191
        value: properTarget                                                                                            // 17192
      });                                                                                                              // 17193
    }                                                                                                                  // 17194
                                                                                                                       // 17195
    return event;                                                                                                      // 17196
  };*/                                                                                                                 // 17197
                                                                                                                       // 17198
  var onTouchStart = function (event) {                                                                                // 17199
    var container = this;                                                                                              // 17200
                                                                                                                       // 17201
    eventManager.addEventListener(this, 'touchmove', onTouchMove);                                                     // 17202
                                                                                                                       // 17203
    //this.addEventListener("touchmove", onTouchMove, false);                                                          // 17204
                                                                                                                       // 17205
    // touch-and-hold event                                                                                            // 17206
    //longTouchTimeout = setTimeout(function () {                                                                      // 17207
    //  if(!that.instance.touchMoving) {                                                                               // 17208
    //    that.instance.longTouch = true;                                                                              // 17209
    //                                                                                                                 // 17210
    //    var targetCoords = Handsontable.Dom.offset(event.target);                                                    // 17211
    //    var contextMenuEvent = new MouseEvent('contextmenu', {                                                       // 17212
    //      clientX: targetCoords.left + event.target.offsetWidth,                                                     // 17213
    //      clientY: targetCoords.top + event.target.offsetHeight,                                                     // 17214
    //      button: 2                                                                                                  // 17215
    //    });                                                                                                          // 17216
    //                                                                                                                 // 17217
    //    that.instance.wtTable.holder.parentNode.parentNode.dispatchEvent(contextMenuEvent);                          // 17218
    //  }                                                                                                              // 17219
    //},200);                                                                                                          // 17220
                                                                                                                       // 17221
      // Prevent cell selection when scrolling with touch event - not the best solution performance-wise               // 17222
      that.checkIfTouchMove = setTimeout(function () {                                                                 // 17223
        if (that.instance.touchMoving == true) {                                                                       // 17224
          that.instance.touchMoving = void 0;                                                                          // 17225
                                                                                                                       // 17226
          eventManager.removeEventListener("touchmove", onTouchMove, false);                                           // 17227
                                                                                                                       // 17228
          return;                                                                                                      // 17229
        } else {                                                                                                       // 17230
          //event = adjustTapTarget(event);                                                                            // 17231
                                                                                                                       // 17232
          onMouseDown(event);                                                                                          // 17233
        }                                                                                                              // 17234
      }, 30);                                                                                                          // 17235
                                                                                                                       // 17236
    //eventManager.removeEventListener(that.instance.wtTable.holder, "mousedown", onMouseDown);                        // 17237
  };                                                                                                                   // 17238
                                                                                                                       // 17239
  var lastMouseOver;                                                                                                   // 17240
  var onMouseOver = function (event) {                                                                                 // 17241
    if (that.instance.hasSetting('onCellMouseOver')) {                                                                 // 17242
      var TABLE = that.instance.wtTable.TABLE;                                                                         // 17243
      var TD = Handsontable.Dom.closest(event.target, ['TD', 'TH'], TABLE);                                            // 17244
      if (TD && TD !== lastMouseOver && Handsontable.Dom.isChildOf(TD, TABLE)) {                                       // 17245
        lastMouseOver = TD;                                                                                            // 17246
        that.instance.getSetting('onCellMouseOver', event, that.instance.wtTable.getCoords(TD), TD, that.instance);    // 17247
      }                                                                                                                // 17248
    }                                                                                                                  // 17249
  };                                                                                                                   // 17250
                                                                                                                       // 17251
  /*  var lastMouseOut;                                                                                                // 17252
   var onMouseOut = function (event) {                                                                                 // 17253
   if (that.instance.hasSetting('onCellMouseOut')) {                                                                   // 17254
   var TABLE = that.instance.wtTable.TABLE;                                                                            // 17255
   var TD = Handsontable.Dom.closest(event.target, ['TD', 'TH'], TABLE);                                               // 17256
   if (TD && TD !== lastMouseOut && Handsontable.Dom.isChildOf(TD, TABLE)) {                                           // 17257
   lastMouseOut = TD;                                                                                                  // 17258
   if (TD.nodeName === 'TD') {                                                                                         // 17259
   that.instance.getSetting('onCellMouseOut', event, that.instance.wtTable.getCoords(TD), TD);                         // 17260
   }                                                                                                                   // 17261
   }                                                                                                                   // 17262
   }                                                                                                                   // 17263
   };*/                                                                                                                // 17264
                                                                                                                       // 17265
  var onMouseUp = function (event) {                                                                                   // 17266
    if (event.button !== 2) { //if not right mouse button                                                              // 17267
      var cell = that.parentCell(event.target);                                                                        // 17268
                                                                                                                       // 17269
      if (cell.TD === dblClickOrigin[0] && cell.TD === dblClickOrigin[1]) {                                            // 17270
        if (Handsontable.Dom.hasClass(event.target, 'corner')) {                                                       // 17271
          that.instance.getSetting('onCellCornerDblClick', event, cell.coords, cell.TD, that.instance);                // 17272
        }                                                                                                              // 17273
        else {                                                                                                         // 17274
          that.instance.getSetting('onCellDblClick', event, cell.coords, cell.TD, that.instance);                      // 17275
        }                                                                                                              // 17276
                                                                                                                       // 17277
        dblClickOrigin[0] = null;                                                                                      // 17278
        dblClickOrigin[1] = null;                                                                                      // 17279
      }                                                                                                                // 17280
      else if (cell.TD === dblClickOrigin[0]) {                                                                        // 17281
        dblClickOrigin[1] = cell.TD;                                                                                   // 17282
        clearTimeout(that.dblClickTimeout[1]);                                                                         // 17283
        that.dblClickTimeout[1] = setTimeout(function () {                                                             // 17284
          dblClickOrigin[1] = null;                                                                                    // 17285
        }, 500);                                                                                                       // 17286
      }                                                                                                                // 17287
    }                                                                                                                  // 17288
  };                                                                                                                   // 17289
                                                                                                                       // 17290
                                                                                                                       // 17291
  var onTouchEnd = function (event) {                                                                                  // 17292
    clearTimeout(longTouchTimeout);                                                                                    // 17293
    //that.instance.longTouch == void 0;                                                                               // 17294
                                                                                                                       // 17295
    event.preventDefault();                                                                                            // 17296
                                                                                                                       // 17297
    onMouseUp(event);                                                                                                  // 17298
                                                                                                                       // 17299
    //eventManager.removeEventListener(that.instance.wtTable.holder, "mouseup", onMouseUp);                            // 17300
  };                                                                                                                   // 17301
                                                                                                                       // 17302
  eventManager.addEventListener(this.instance.wtTable.holder, 'mousedown', onMouseDown);                               // 17303
                                                                                                                       // 17304
  eventManager.addEventListener(this.instance.wtTable.TABLE, 'mouseover', onMouseOver);                                // 17305
                                                                                                                       // 17306
  eventManager.addEventListener(this.instance.wtTable.holder, 'mouseup', onMouseUp);                                   // 17307
                                                                                                                       // 17308
                                                                                                                       // 17309
  if(this.instance.wtTable.holder.parentNode.parentNode && Handsontable.mobileBrowser) { // check if full HOT instance, or detached WOT AND run on mobile device
    var classSelector = "." + this.instance.wtTable.holder.parentNode.className.split(" ").join(".");                  // 17311
                                                                                                                       // 17312
    eventManager.addEventListener(this.instance.wtTable.holder.parentNode.parentNode, 'touchstart', function (event) { // 17313
      that.instance.touchApplied = true;                                                                               // 17314
      if (Handsontable.Dom.isChildOf(event.target, classSelector)) {                                                   // 17315
        onTouchStart.call(event.target, event);                                                                        // 17316
      }                                                                                                                // 17317
    });                                                                                                                // 17318
    eventManager.addEventListener(this.instance.wtTable.holder.parentNode.parentNode, 'touchend', function (event) {   // 17319
      that.instance.touchApplied = false;                                                                              // 17320
      if (Handsontable.Dom.isChildOf(event.target, classSelector)) {                                                   // 17321
        onTouchEnd.call(event.target, event);                                                                          // 17322
      }                                                                                                                // 17323
    });                                                                                                                // 17324
                                                                                                                       // 17325
    if(!that.instance.momentumScrolling) {                                                                             // 17326
      that.instance.momentumScrolling = {};                                                                            // 17327
    }                                                                                                                  // 17328
    eventManager.addEventListener(this.instance.wtTable.holder.parentNode.parentNode, 'scroll', function (event) {     // 17329
      clearTimeout(that.instance.momentumScrolling._timeout);                                                          // 17330
                                                                                                                       // 17331
      if(!that.instance.momentumScrolling.ongoing) {                                                                   // 17332
        that.instance.getSetting('onBeforeTouchScroll');                                                               // 17333
      }                                                                                                                // 17334
      that.instance.momentumScrolling.ongoing = true;                                                                  // 17335
                                                                                                                       // 17336
      that.instance.momentumScrolling._timeout = setTimeout(function () {                                              // 17337
        if(!that.instance.touchApplied) {                                                                              // 17338
          that.instance.momentumScrolling.ongoing = false;                                                             // 17339
                                                                                                                       // 17340
          that.instance.getSetting('onAfterMomentumScroll');                                                           // 17341
        }                                                                                                              // 17342
      },200);                                                                                                          // 17343
    });                                                                                                                // 17344
  }                                                                                                                    // 17345
                                                                                                                       // 17346
  eventManager.addEventListener(window, 'resize', function () {                                                        // 17347
    that.instance.draw();                                                                                              // 17348
  });                                                                                                                  // 17349
                                                                                                                       // 17350
  this.destroy = function () {                                                                                         // 17351
    clearTimeout(this.dblClickTimeout[0]);                                                                             // 17352
    clearTimeout(this.dblClickTimeout[1]);                                                                             // 17353
                                                                                                                       // 17354
    eventManager.clear();                                                                                              // 17355
  };                                                                                                                   // 17356
}                                                                                                                      // 17357
                                                                                                                       // 17358
WalkontableEvent.prototype.parentCell = function (elem) {                                                              // 17359
  var cell = {};                                                                                                       // 17360
  var TABLE = this.instance.wtTable.TABLE;                                                                             // 17361
  var TD = Handsontable.Dom.closest(elem, ['TD', 'TH'], TABLE);                                                        // 17362
                                                                                                                       // 17363
  if (TD && Handsontable.Dom.isChildOf(TD, TABLE)) {                                                                   // 17364
    cell.coords = this.instance.wtTable.getCoords(TD);                                                                 // 17365
    cell.TD = TD;                                                                                                      // 17366
  } else if (Handsontable.Dom.hasClass(elem, 'wtBorder') && Handsontable.Dom.hasClass(elem, 'current')) {              // 17367
    cell.coords = this.instance.selections.current.cellRange.highlight; //selections.current is current selected cell  // 17368
    cell.TD = this.instance.wtTable.getCell(cell.coords);                                                              // 17369
  } else if (Handsontable.Dom.hasClass(elem, 'wtBorder') && Handsontable.Dom.hasClass(elem, 'area')) {                 // 17370
    if (this.instance.selections.area.cellRange) {                                                                     // 17371
      cell.coords = this.instance.selections.area.cellRange.to; //selections.area is area selected cells               // 17372
      cell.TD = this.instance.wtTable.getCell(cell.coords);                                                            // 17373
    }                                                                                                                  // 17374
  }                                                                                                                    // 17375
                                                                                                                       // 17376
  return cell;                                                                                                         // 17377
};                                                                                                                     // 17378
                                                                                                                       // 17379
                                                                                                                       // 17380
                                                                                                                       // 17381
function walkontableRangesIntersect() {                                                                                // 17382
  var from = arguments[0];                                                                                             // 17383
  var to = arguments[1];                                                                                               // 17384
  for (var i = 1, ilen = arguments.length / 2; i < ilen; i++) {                                                        // 17385
    if (from <= arguments[2 * i + 1] && to >= arguments[2 * i]) {                                                      // 17386
      return true;                                                                                                     // 17387
    }                                                                                                                  // 17388
  }                                                                                                                    // 17389
  return false;                                                                                                        // 17390
}                                                                                                                      // 17391
                                                                                                                       // 17392
/**                                                                                                                    // 17393
 * Generates a random hex string. Used as namespace for Walkontable instance events.                                   // 17394
 * @return {String} - 16 character random string: "92b1bfc74ec4"                                                       // 17395
 */                                                                                                                    // 17396
function walkontableRandomString() {                                                                                   // 17397
  function s4() {                                                                                                      // 17398
    return Math.floor((1 + Math.random()) * 0x10000)                                                                   // 17399
      .toString(16)                                                                                                    // 17400
      .substring(1);                                                                                                   // 17401
  }                                                                                                                    // 17402
                                                                                                                       // 17403
  return s4() + s4() + s4() + s4();                                                                                    // 17404
}                                                                                                                      // 17405
/**                                                                                                                    // 17406
 * http://notes.jetienne.com/2011/05/18/cancelRequestAnimFrame-for-paul-irish-requestAnimFrame.html                    // 17407
 */                                                                                                                    // 17408
window.requestAnimFrame = (function () {                                                                               // 17409
  return  window.requestAnimationFrame ||                                                                              // 17410
    window.webkitRequestAnimationFrame ||                                                                              // 17411
    window.mozRequestAnimationFrame ||                                                                                 // 17412
    window.oRequestAnimationFrame ||                                                                                   // 17413
    window.msRequestAnimationFrame ||                                                                                  // 17414
    function (/* function */ callback, /* DOMElement */ element) {                                                     // 17415
      return window.setTimeout(callback, 1000 / 60);                                                                   // 17416
    };                                                                                                                 // 17417
})();                                                                                                                  // 17418
                                                                                                                       // 17419
window.cancelRequestAnimFrame = (function () {                                                                         // 17420
  return window.cancelAnimationFrame ||                                                                                // 17421
    window.webkitCancelRequestAnimationFrame ||                                                                        // 17422
    window.mozCancelRequestAnimationFrame ||                                                                           // 17423
    window.oCancelRequestAnimationFrame ||                                                                             // 17424
    window.msCancelRequestAnimationFrame ||                                                                            // 17425
    clearTimeout                                                                                                       // 17426
})();                                                                                                                  // 17427
                                                                                                                       // 17428
//http://snipplr.com/view/13523/                                                                                       // 17429
//modified for speed                                                                                                   // 17430
//http://jsperf.com/getcomputedstyle-vs-style-vs-css/8                                                                 // 17431
if (!window.getComputedStyle) {                                                                                        // 17432
  (function () {                                                                                                       // 17433
    var elem;                                                                                                          // 17434
                                                                                                                       // 17435
    var styleObj = {                                                                                                   // 17436
      getPropertyValue: function getPropertyValue(prop) {                                                              // 17437
        if (prop == 'float') prop = 'styleFloat';                                                                      // 17438
        return elem.currentStyle[prop.toUpperCase()] || null;                                                          // 17439
      }                                                                                                                // 17440
    };                                                                                                                 // 17441
                                                                                                                       // 17442
    window.getComputedStyle = function (el) {                                                                          // 17443
      elem = el;                                                                                                       // 17444
      return styleObj;                                                                                                 // 17445
    }                                                                                                                  // 17446
  })();                                                                                                                // 17447
}                                                                                                                      // 17448
                                                                                                                       // 17449
/**                                                                                                                    // 17450
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim                        // 17451
 */                                                                                                                    // 17452
if (!String.prototype.trim) {                                                                                          // 17453
  var trimRegex = /^\s+|\s+$/g;                                                                                        // 17454
  String.prototype.trim = function () {                                                                                // 17455
    return this.replace(trimRegex, '');                                                                                // 17456
  };                                                                                                                   // 17457
}                                                                                                                      // 17458
/**                                                                                                                    // 17459
 * WalkontableRowFilter                                                                                                // 17460
 * @constructor                                                                                                        // 17461
 */                                                                                                                    // 17462
function WalkontableRowFilter(offset, total, countTH) {                                                                // 17463
  this.offset = offset;                                                                                                // 17464
  this.total = total;                                                                                                  // 17465
  this.countTH = countTH;                                                                                              // 17466
}                                                                                                                      // 17467
                                                                                                                       // 17468
WalkontableRowFilter.prototype.offsetted = function (n) {                                                              // 17469
  return n + this.offset;                                                                                              // 17470
};                                                                                                                     // 17471
                                                                                                                       // 17472
WalkontableRowFilter.prototype.unOffsetted = function (n) {                                                            // 17473
  return n - this.offset;                                                                                              // 17474
};                                                                                                                     // 17475
                                                                                                                       // 17476
WalkontableRowFilter.prototype.renderedToSource = function (n) {                                                       // 17477
  return this.offsetted(n);                                                                                            // 17478
};                                                                                                                     // 17479
                                                                                                                       // 17480
WalkontableRowFilter.prototype.sourceToRendered = function (n) {                                                       // 17481
  return this.unOffsetted(n);                                                                                          // 17482
};                                                                                                                     // 17483
                                                                                                                       // 17484
WalkontableRowFilter.prototype.offsettedTH = function (n) {                                                            // 17485
  return n - this.countTH;                                                                                             // 17486
};                                                                                                                     // 17487
                                                                                                                       // 17488
WalkontableRowFilter.prototype.visibleColHeadedRowToSourceRow = function (n) {                                         // 17489
  return this.renderedToSource(this.offsettedTH(n));                                                                   // 17490
};                                                                                                                     // 17491
                                                                                                                       // 17492
WalkontableRowFilter.prototype.sourceRowToVisibleColHeadedRow = function (n) {                                         // 17493
  return this.unOffsettedTH(this.sourceToRendered(n));                                                                 // 17494
};                                                                                                                     // 17495
                                                                                                                       // 17496
function WalkontableScroll(instance) {                                                                                 // 17497
  this.instance = instance;                                                                                            // 17498
}                                                                                                                      // 17499
                                                                                                                       // 17500
/**                                                                                                                    // 17501
 * Scrolls viewport to a cell by minimum number of cells                                                               // 17502
 * @param {WalkontableCellCoords} coords                                                                               // 17503
 */                                                                                                                    // 17504
WalkontableScroll.prototype.scrollViewport = function (coords) {                                                       // 17505
  if (!this.instance.drawn) {                                                                                          // 17506
    return;                                                                                                            // 17507
  }                                                                                                                    // 17508
                                                                                                                       // 17509
  var totalRows = this.instance.getSetting('totalRows')                                                                // 17510
    , totalColumns = this.instance.getSetting('totalColumns');                                                         // 17511
                                                                                                                       // 17512
  if (coords.row < 0 || coords.row > totalRows - 1) {                                                                  // 17513
    throw new Error('row ' + coords.row + ' does not exist');                                                          // 17514
  }                                                                                                                    // 17515
                                                                                                                       // 17516
  if (coords.col < 0 || coords.col > totalColumns - 1) {                                                               // 17517
    throw new Error('column ' + coords.col + ' does not exist');                                                       // 17518
  }                                                                                                                    // 17519
                                                                                                                       // 17520
    if (coords.row > this.instance.wtTable.getLastVisibleRow()) {                                                      // 17521
      this.instance.wtScrollbars.vertical.scrollTo(coords.row, true);                                                  // 17522
    } else if (coords.row >= this.instance.getSetting('fixedRowsTop') && coords.row < this.instance.wtTable.getFirstVisibleRow()){
      this.instance.wtScrollbars.vertical.scrollTo(coords.row);                                                        // 17524
    }                                                                                                                  // 17525
                                                                                                                       // 17526
    if (coords.col >= this.instance.wtTable.getLastVisibleColumn()) {                                                  // 17527
      this.instance.wtScrollbars.horizontal.scrollTo(coords.col, true);                                                // 17528
    } else if (coords.col >= this.instance.getSetting('fixedColumnsLeft') && coords.col < this.instance.wtTable.getFirstVisibleColumn()){
      this.instance.wtScrollbars.horizontal.scrollTo(coords.col);                                                      // 17530
    }                                                                                                                  // 17531
                                                                                                                       // 17532
  //}                                                                                                                  // 17533
};                                                                                                                     // 17534
                                                                                                                       // 17535
function WalkontableCornerScrollbarNative(instance) {                                                                  // 17536
  this.instance = instance;                                                                                            // 17537
  this.type = 'corner';                                                                                                // 17538
  this.init();                                                                                                         // 17539
  this.clone = this.makeClone('corner');                                                                               // 17540
}                                                                                                                      // 17541
                                                                                                                       // 17542
WalkontableCornerScrollbarNative.prototype = new WalkontableOverlay();                                                 // 17543
                                                                                                                       // 17544
WalkontableCornerScrollbarNative.prototype.resetFixedPosition = function () {                                          // 17545
  if (!this.instance.wtTable.holder.parentNode) {                                                                      // 17546
    return; //removed from DOM                                                                                         // 17547
  }                                                                                                                    // 17548
  var elem = this.clone.wtTable.holder.parentNode;                                                                     // 17549
                                                                                                                       // 17550
  if (this.scrollHandler === window) {                                                                                 // 17551
    var box = this.instance.wtTable.holder.getBoundingClientRect();                                                    // 17552
    var top = Math.ceil(box.top);                                                                                      // 17553
    var left = Math.ceil(box.left);                                                                                    // 17554
    var finalLeft                                                                                                      // 17555
      , finalTop;                                                                                                      // 17556
    var bottom = Math.ceil(box.bottom);                                                                                // 17557
    var right = Math.ceil(box.right);                                                                                  // 17558
                                                                                                                       // 17559
    if (left < 0 && (right - elem.offsetWidth) > 0) {                                                                  // 17560
      finalLeft = -left + 'px';                                                                                        // 17561
    } else {                                                                                                           // 17562
      finalLeft = '0';                                                                                                 // 17563
    }                                                                                                                  // 17564
                                                                                                                       // 17565
    if (top < 0 && (bottom - elem.offsetHeight) > 0) {                                                                 // 17566
      finalTop = -top + "px";                                                                                          // 17567
    } else {                                                                                                           // 17568
      finalTop = "0";                                                                                                  // 17569
    }                                                                                                                  // 17570
  }                                                                                                                    // 17571
  else if(!Handsontable.freezeOverlays) {                                                                              // 17572
    finalLeft = this.instance.wtScrollbars.horizontal.getScrollPosition() + "px";                                      // 17573
    finalTop = this.instance.wtScrollbars.vertical.getScrollPosition() + "px";                                         // 17574
  }                                                                                                                    // 17575
                                                                                                                       // 17576
  Handsontable.Dom.setOverlayPosition(elem, finalLeft, finalTop);                                                      // 17577
                                                                                                                       // 17578
  elem.style.width = Handsontable.Dom.outerWidth(this.clone.wtTable.TABLE) + 4 + 'px';                                 // 17579
  elem.style.height = Handsontable.Dom.outerHeight(this.clone.wtTable.TABLE) + 4 + 'px';                               // 17580
};                                                                                                                     // 17581
                                                                                                                       // 17582
function WalkontableHorizontalScrollbarNative(instance) {                                                              // 17583
  this.instance = instance;                                                                                            // 17584
  this.type = 'horizontal';                                                                                            // 17585
  this.offset = 0;                                                                                                     // 17586
  this.init();                                                                                                         // 17587
  this.clone = this.makeClone('left');                                                                                 // 17588
}                                                                                                                      // 17589
                                                                                                                       // 17590
WalkontableHorizontalScrollbarNative.prototype = new WalkontableOverlay();                                             // 17591
                                                                                                                       // 17592
//resetFixedPosition (in future merge it with this.refresh?)                                                           // 17593
WalkontableHorizontalScrollbarNative.prototype.resetFixedPosition = function () {                                      // 17594
  if (!this.instance.wtTable.holder.parentNode) {                                                                      // 17595
    return; //removed from DOM                                                                                         // 17596
  }                                                                                                                    // 17597
  var elem = this.clone.wtTable.holder.parentNode;                                                                     // 17598
                                                                                                                       // 17599
  if (this.scrollHandler === window) {                                                                                 // 17600
                                                                                                                       // 17601
    var box = this.instance.wtTable.holder.getBoundingClientRect();                                                    // 17602
    var left = Math.ceil(box.left);                                                                                    // 17603
    var finalLeft                                                                                                      // 17604
      , finalTop;                                                                                                      // 17605
    var right = Math.ceil(box.right);                                                                                  // 17606
                                                                                                                       // 17607
    if (left < 0 && (right - elem.offsetWidth) > 0) {                                                                  // 17608
      finalLeft = -left + 'px';                                                                                        // 17609
    } else {                                                                                                           // 17610
      finalLeft = '0';                                                                                                 // 17611
    }                                                                                                                  // 17612
                                                                                                                       // 17613
    finalTop = this.instance.wtTable.hider.style.top;                                                                  // 17614
  }                                                                                                                    // 17615
  else if(!Handsontable.freezeOverlays) {                                                                              // 17616
    finalLeft = this.getScrollPosition() + "px";                                                                       // 17617
    finalTop = this.instance.wtTable.hider.style.top;                                                                  // 17618
  }                                                                                                                    // 17619
                                                                                                                       // 17620
  Handsontable.Dom.setOverlayPosition(elem, finalLeft, finalTop);                                                      // 17621
                                                                                                                       // 17622
  elem.style.height = Handsontable.Dom.outerHeight(this.clone.wtTable.TABLE) + 'px';                                   // 17623
  elem.style.width = Handsontable.Dom.outerWidth(this.clone.wtTable.TABLE) + 4 + 'px';// + 4 + 'px';                   // 17624
};                                                                                                                     // 17625
                                                                                                                       // 17626
WalkontableHorizontalScrollbarNative.prototype.refresh = function (fastDraw) {                                         // 17627
  this.applyToDOM();                                                                                                   // 17628
  WalkontableOverlay.prototype.refresh.call(this, fastDraw);                                                           // 17629
};                                                                                                                     // 17630
                                                                                                                       // 17631
WalkontableHorizontalScrollbarNative.prototype.getScrollPosition = function () {                                       // 17632
  return Handsontable.Dom.getScrollLeft(this.scrollHandler);                                                           // 17633
};                                                                                                                     // 17634
                                                                                                                       // 17635
WalkontableHorizontalScrollbarNative.prototype.setScrollPosition = function (pos) {                                    // 17636
  if (this.scrollHandler === window) {                                                                                 // 17637
    window.scrollTo(pos, Handsontable.Dom.getWindowScrollTop());                                                       // 17638
  } else {                                                                                                             // 17639
    this.scrollHandler.scrollLeft = pos;                                                                               // 17640
  }                                                                                                                    // 17641
};                                                                                                                     // 17642
                                                                                                                       // 17643
WalkontableHorizontalScrollbarNative.prototype.onScroll = function () {                                                // 17644
  this.instance.getSetting('onScrollHorizontally');                                                                    // 17645
};                                                                                                                     // 17646
                                                                                                                       // 17647
WalkontableHorizontalScrollbarNative.prototype.sumCellSizes = function (from, length) {                                // 17648
  var sum = 0;                                                                                                         // 17649
  while(from < length) {                                                                                               // 17650
    sum += this.instance.wtTable.getStretchedColumnWidth(from) || this.instance.wtSettings.defaultColumnWidth;         // 17651
    from++;                                                                                                            // 17652
  }                                                                                                                    // 17653
  return sum;                                                                                                          // 17654
};                                                                                                                     // 17655
                                                                                                                       // 17656
//applyToDOM (in future merge it with this.refresh?)                                                                   // 17657
WalkontableHorizontalScrollbarNative.prototype.applyToDOM = function () {                                              // 17658
  var total = this.instance.getSetting('totalColumns');                                                                // 17659
  var headerSize = this.instance.wtViewport.getRowHeaderWidth();                                                       // 17660
                                                                                                                       // 17661
  this.fixedContainer.style.width = headerSize + this.sumCellSizes(0, total) + 'px';// + 4 + 'px';                     // 17662
                                                                                                                       // 17663
  if (typeof this.instance.wtViewport.columnsRenderCalculator.startPosition === 'number'){                             // 17664
    this.fixed.style.left = this.instance.wtViewport.columnsRenderCalculator.startPosition + 'px';                     // 17665
  }                                                                                                                    // 17666
  else if (total === 0) {                                                                                              // 17667
    this.fixed.style.left = '0';                                                                                       // 17668
  } else {                                                                                                             // 17669
    throw  new Error('Incorrect value of the columnsRenderCalculator');                                                // 17670
  }                                                                                                                    // 17671
  this.fixed.style.right = '';                                                                                         // 17672
};                                                                                                                     // 17673
                                                                                                                       // 17674
/**                                                                                                                    // 17675
 * Scrolls horizontally to a column at the left edge of the viewport                                                   // 17676
 * @param sourceCol {Number}                                                                                           // 17677
 * @param beyondRendered {Boolean} if TRUE, scrolls according to the bottom edge (top edge is by default)              // 17678
 */                                                                                                                    // 17679
WalkontableHorizontalScrollbarNative.prototype.scrollTo = function (sourceCol, beyondRendered) {                       // 17680
  var newX = this.getTableParentOffset();                                                                              // 17681
                                                                                                                       // 17682
  if (beyondRendered) {                                                                                                // 17683
    newX += this.sumCellSizes(0, sourceCol + 1);                                                                       // 17684
    newX -= this.instance.wtViewport.getViewportWidth()                                                                // 17685
  }                                                                                                                    // 17686
  else {                                                                                                               // 17687
    var fixedColumnsLeft = this.instance.getSetting('fixedColumnsLeft');                                               // 17688
    newX += this.sumCellSizes(fixedColumnsLeft, sourceCol);                                                            // 17689
  }                                                                                                                    // 17690
                                                                                                                       // 17691
  this.setScrollPosition(newX);                                                                                        // 17692
};                                                                                                                     // 17693
                                                                                                                       // 17694
WalkontableHorizontalScrollbarNative.prototype.getTableParentOffset = function () {                                    // 17695
  if (this.scrollHandler === window) {                                                                                 // 17696
    return this.instance.wtTable.holderOffset.left;                                                                    // 17697
  }                                                                                                                    // 17698
  else {                                                                                                               // 17699
    return 0;                                                                                                          // 17700
  }                                                                                                                    // 17701
};                                                                                                                     // 17702
                                                                                                                       // 17703
function WalkontableVerticalScrollbarNative(instance) {                                                                // 17704
  this.instance = instance;                                                                                            // 17705
  this.type = 'vertical';                                                                                              // 17706
  this.init();                                                                                                         // 17707
  this.clone = this.makeClone('top');                                                                                  // 17708
}                                                                                                                      // 17709
                                                                                                                       // 17710
WalkontableVerticalScrollbarNative.prototype = new WalkontableOverlay();                                               // 17711
                                                                                                                       // 17712
//resetFixedPosition (in future merge it with this.refresh?)                                                           // 17713
WalkontableVerticalScrollbarNative.prototype.resetFixedPosition = function () {                                        // 17714
  if (!this.instance.wtTable.holder.parentNode) {                                                                      // 17715
    return; //removed from DOM                                                                                         // 17716
  }                                                                                                                    // 17717
  var elem = this.clone.wtTable.holder.parentNode;                                                                     // 17718
                                                                                                                       // 17719
  if (this.scrollHandler === window) {                                                                                 // 17720
    var box = this.instance.wtTable.holder.getBoundingClientRect();                                                    // 17721
    var top = Math.ceil(box.top);                                                                                      // 17722
    var finalLeft                                                                                                      // 17723
      , finalTop;                                                                                                      // 17724
    var bottom = Math.ceil(box.bottom);                                                                                // 17725
                                                                                                                       // 17726
    finalLeft = this.instance.wtTable.hider.style.left;                                                                // 17727
                                                                                                                       // 17728
    if (top < 0 && (bottom - elem.offsetHeight) > 0) {                                                                 // 17729
      finalTop = -top + "px";                                                                                          // 17730
    } else {                                                                                                           // 17731
      finalTop = "0";                                                                                                  // 17732
    }                                                                                                                  // 17733
  }                                                                                                                    // 17734
  else if(!Handsontable.freezeOverlays) {                                                                              // 17735
    finalTop = this.getScrollPosition() + "px";                                                                        // 17736
    finalLeft = this.instance.wtTable.hider.style.left;                                                                // 17737
  }                                                                                                                    // 17738
                                                                                                                       // 17739
  Handsontable.Dom.setOverlayPosition(elem, finalLeft, finalTop);                                                      // 17740
                                                                                                                       // 17741
  if (this.instance.wtScrollbars.horizontal.scrollHandler === window) {                                                // 17742
    elem.style.width = this.instance.wtViewport.getWorkspaceActualWidth() + 'px';                                      // 17743
  }                                                                                                                    // 17744
  else {                                                                                                               // 17745
    elem.style.width = Handsontable.Dom.outerWidth(this.clone.wtTable.TABLE) + 'px';                                   // 17746
  }                                                                                                                    // 17747
                                                                                                                       // 17748
  elem.style.height = Handsontable.Dom.outerHeight(this.clone.wtTable.TABLE) + 4 + 'px';// + 4 + 'px';                 // 17749
};                                                                                                                     // 17750
                                                                                                                       // 17751
WalkontableVerticalScrollbarNative.prototype.getScrollPosition = function () {                                         // 17752
  return Handsontable.Dom.getScrollTop(this.scrollHandler);                                                            // 17753
};                                                                                                                     // 17754
                                                                                                                       // 17755
WalkontableVerticalScrollbarNative.prototype.setScrollPosition = function (pos) {                                      // 17756
  if (this.scrollHandler === window){                                                                                  // 17757
    window.scrollTo(Handsontable.Dom.getWindowScrollLeft(), pos);                                                      // 17758
  } else {                                                                                                             // 17759
    this.scrollHandler.scrollTop = pos;                                                                                // 17760
  }                                                                                                                    // 17761
};                                                                                                                     // 17762
                                                                                                                       // 17763
WalkontableVerticalScrollbarNative.prototype.onScroll = function () {                                                  // 17764
  this.instance.getSetting('onScrollVertically');                                                                      // 17765
};                                                                                                                     // 17766
                                                                                                                       // 17767
WalkontableVerticalScrollbarNative.prototype.sumCellSizes = function (from, length) {                                  // 17768
  var sum = 0;                                                                                                         // 17769
  while (from < length) {                                                                                              // 17770
    sum += this.instance.wtTable.getRowHeight(from) || this.instance.wtSettings.settings.defaultRowHeight; //TODO optimize getSetting, because this is MUCH faster then getSetting
    from++;                                                                                                            // 17772
  }                                                                                                                    // 17773
  return sum;                                                                                                          // 17774
};                                                                                                                     // 17775
                                                                                                                       // 17776
WalkontableVerticalScrollbarNative.prototype.refresh = function (fastDraw) {                                           // 17777
  this.applyToDOM();                                                                                                   // 17778
  WalkontableOverlay.prototype.refresh.call(this, fastDraw);                                                           // 17779
};                                                                                                                     // 17780
                                                                                                                       // 17781
//applyToDOM (in future merge it with this.refresh?)                                                                   // 17782
WalkontableVerticalScrollbarNative.prototype.applyToDOM = function () {                                                // 17783
  var total = this.instance.getSetting('totalRows');                                                                   // 17784
  var headerSize = this.instance.wtViewport.getColumnHeaderHeight();                                                   // 17785
  this.fixedContainer.style.height = headerSize + this.sumCellSizes(0, total) +  'px';// + 4 + 'px'; //+4 is needed, otherwise vertical scroll appears in Chrome (window scroll mode) - maybe because of fill handle in last row or because of box shadow
  if (typeof this.instance.wtViewport.rowsRenderCalculator.startPosition === 'number') {                               // 17787
    this.fixed.style.top = this.instance.wtViewport.rowsRenderCalculator.startPosition + 'px';                         // 17788
  }                                                                                                                    // 17789
  else if (total === 0) {                                                                                              // 17790
    this.fixed.style.top = '0'; //can happen if there are 0 rows                                                       // 17791
  }                                                                                                                    // 17792
  else {                                                                                                               // 17793
    throw new Error("Incorrect value of the rowsRenderCalculator");                                                    // 17794
  }                                                                                                                    // 17795
  this.fixed.style.bottom = '';                                                                                        // 17796
};                                                                                                                     // 17797
                                                                                                                       // 17798
/**                                                                                                                    // 17799
 * Scrolls vertically to a row                                                                                         // 17800
 * @param sourceRow {Number}                                                                                           // 17801
 * @param bottomEdge {Boolean} if TRUE, scrolls according to the bottom edge (top edge is by default)                  // 17802
 */                                                                                                                    // 17803
WalkontableVerticalScrollbarNative.prototype.scrollTo = function (sourceRow, bottomEdge) {                             // 17804
  var newY = this.getTableParentOffset();                                                                              // 17805
  if (bottomEdge) {                                                                                                    // 17806
    newY += this.sumCellSizes(0, sourceRow + 1);                                                                       // 17807
    newY -= this.instance.wtViewport.getViewportHeight();                                                              // 17808
  }                                                                                                                    // 17809
  else {                                                                                                               // 17810
    var fixedRowsTop = this.instance.getSetting('fixedRowsTop');                                                       // 17811
    newY += this.sumCellSizes(fixedRowsTop, sourceRow);                                                                // 17812
  }                                                                                                                    // 17813
                                                                                                                       // 17814
  this.setScrollPosition(newY);                                                                                        // 17815
};                                                                                                                     // 17816
                                                                                                                       // 17817
WalkontableVerticalScrollbarNative.prototype.getTableParentOffset = function () {                                      // 17818
  if (this.scrollHandler === window) {                                                                                 // 17819
    return this.instance.wtTable.holderOffset.top;                                                                     // 17820
  }                                                                                                                    // 17821
  else {                                                                                                               // 17822
    return 0;                                                                                                          // 17823
  }                                                                                                                    // 17824
};                                                                                                                     // 17825
                                                                                                                       // 17826
function WalkontableScrollbars(instance) {                                                                             // 17827
  this.instance = instance;                                                                                            // 17828
  instance.update('scrollbarWidth', Handsontable.Dom.getScrollbarWidth());                                             // 17829
  instance.update('scrollbarHeight', Handsontable.Dom.getScrollbarWidth());                                            // 17830
  this.vertical = new WalkontableVerticalScrollbarNative(instance);                                                    // 17831
  this.horizontal = new WalkontableHorizontalScrollbarNative(instance);                                                // 17832
  this.corner = new WalkontableCornerScrollbarNative(instance);                                                        // 17833
  if (instance.getSetting('debug')) {                                                                                  // 17834
    this.debug = new WalkontableDebugOverlay(instance);                                                                // 17835
  }                                                                                                                    // 17836
  this.registerListeners();                                                                                            // 17837
}                                                                                                                      // 17838
                                                                                                                       // 17839
WalkontableScrollbars.prototype.registerListeners = function () {                                                      // 17840
  var that = this;                                                                                                     // 17841
                                                                                                                       // 17842
  this.refreshAll = function refreshAll() {                                                                            // 17843
    if(!that.instance.drawn) {                                                                                         // 17844
      return;                                                                                                          // 17845
    }                                                                                                                  // 17846
                                                                                                                       // 17847
    if (!that.instance.wtTable.holder.parentNode) {                                                                    // 17848
      //Walkontable was detached from DOM, but this handler was not removed                                            // 17849
      that.destroy();                                                                                                  // 17850
      return;                                                                                                          // 17851
    }                                                                                                                  // 17852
                                                                                                                       // 17853
    that.instance.draw(true);                                                                                          // 17854
    that.vertical.onScroll();                                                                                          // 17855
    that.horizontal.onScroll();                                                                                        // 17856
  };                                                                                                                   // 17857
                                                                                                                       // 17858
  var eventManager = Handsontable.eventManager(that.instance);                                                         // 17859
                                                                                                                       // 17860
  eventManager.addEventListener(this.vertical.scrollHandler, 'scroll', this.refreshAll);                               // 17861
  if (this.vertical.scrollHandler !== this.horizontal.scrollHandler) {                                                 // 17862
    eventManager.addEventListener(this.horizontal.scrollHandler, 'scroll', this.refreshAll);                           // 17863
  }                                                                                                                    // 17864
                                                                                                                       // 17865
  if (this.vertical.scrollHandler !== window && this.horizontal.scrollHandler !== window) {                            // 17866
    eventManager.addEventListener(window,'scroll', this.refreshAll);                                                   // 17867
  }                                                                                                                    // 17868
};                                                                                                                     // 17869
                                                                                                                       // 17870
WalkontableScrollbars.prototype.destroy = function () {                                                                // 17871
  var eventManager = Handsontable.eventManager(this.instance);                                                         // 17872
                                                                                                                       // 17873
  if (this.vertical) {                                                                                                 // 17874
    this.vertical.destroy();                                                                                           // 17875
    eventManager.removeEventListener(this.vertical.scrollHandler,'scroll', this.refreshAll);                           // 17876
  }                                                                                                                    // 17877
  if (this.horizontal) {                                                                                               // 17878
    this.horizontal.destroy();                                                                                         // 17879
    eventManager.removeEventListener(this.horizontal.scrollHandler,'scroll', this.refreshAll);                         // 17880
  }                                                                                                                    // 17881
  eventManager.removeEventListener(window,'scroll', this.refreshAll);                                                  // 17882
  this.corner && this.corner.destroy();                                                                                // 17883
  this.debug && this.debug.destroy();                                                                                  // 17884
};                                                                                                                     // 17885
                                                                                                                       // 17886
WalkontableScrollbars.prototype.refresh = function (fastDraw) {                                                        // 17887
  this.horizontal && this.horizontal.refresh(fastDraw);                                                                // 17888
  this.vertical && this.vertical.refresh(fastDraw);                                                                    // 17889
  this.corner && this.corner.refresh(fastDraw);                                                                        // 17890
  this.debug && this.debug.refresh(fastDraw);                                                                          // 17891
};                                                                                                                     // 17892
                                                                                                                       // 17893
WalkontableScrollbars.prototype.applyToDOM = function () {                                                             // 17894
  this.horizontal && this.horizontal.applyToDOM();                                                                     // 17895
  this.vertical && this.vertical.applyToDOM();                                                                         // 17896
};                                                                                                                     // 17897
                                                                                                                       // 17898
function WalkontableSelection(settings, cellRange) {                                                                   // 17899
  this.settings = settings;                                                                                            // 17900
  this.cellRange = cellRange || null;                                                                                  // 17901
  this.instanceBorders = {};                                                                                           // 17902
}                                                                                                                      // 17903
                                                                                                                       // 17904
/**                                                                                                                    // 17905
 * Each Walkontable clone requires it's own border for every selection. This method creates and returns selection borders per instance
 * @param {Walkontable} instance                                                                                       // 17907
 * @returns {WalkontableBorder}                                                                                        // 17908
 */                                                                                                                    // 17909
WalkontableSelection.prototype.getBorder = function (instance) {                                                       // 17910
  if (this.instanceBorders[instance.guid]) {                                                                           // 17911
    return this.instanceBorders[instance.guid];                                                                        // 17912
  }                                                                                                                    // 17913
  //where is this returned?                                                                                            // 17914
  this.instanceBorders[instance.guid] = new WalkontableBorder(instance, this.settings);                                // 17915
};                                                                                                                     // 17916
                                                                                                                       // 17917
/**                                                                                                                    // 17918
 * Returns boolean information if selection is empty                                                                   // 17919
 * @returns {boolean}                                                                                                  // 17920
 */                                                                                                                    // 17921
WalkontableSelection.prototype.isEmpty = function () {                                                                 // 17922
  return this.cellRange === null;                                                                                      // 17923
};                                                                                                                     // 17924
                                                                                                                       // 17925
/**                                                                                                                    // 17926
 * Adds a cell coords to the selection                                                                                 // 17927
 * @param {WalkontableCellCoords} coords                                                                               // 17928
 */                                                                                                                    // 17929
WalkontableSelection.prototype.add = function (coords) {                                                               // 17930
  if (this.isEmpty()) {                                                                                                // 17931
    this.cellRange = new WalkontableCellRange(coords, coords, coords);                                                 // 17932
  }                                                                                                                    // 17933
  else {                                                                                                               // 17934
    this.cellRange.expand(coords);                                                                                     // 17935
  }                                                                                                                    // 17936
};                                                                                                                     // 17937
                                                                                                                       // 17938
/**                                                                                                                    // 17939
 * If selection range from or to property equals oldCoords, replace it with newCoords. Return boolean information about success
 * @param {WalkontableCellCoords} oldCoords                                                                            // 17941
 * @param {WalkontableCellCoords} newCoords                                                                            // 17942
 * @return {boolean}                                                                                                   // 17943
 */                                                                                                                    // 17944
WalkontableSelection.prototype.replace = function (oldCoords, newCoords) {                                             // 17945
  if (!this.isEmpty()) {                                                                                               // 17946
    if (this.cellRange.from.isEqual(oldCoords)) {                                                                      // 17947
      this.cellRange.from = newCoords;                                                                                 // 17948
                                                                                                                       // 17949
      return true;                                                                                                     // 17950
    }                                                                                                                  // 17951
    if (this.cellRange.to.isEqual(oldCoords)) {                                                                        // 17952
      this.cellRange.to = newCoords;                                                                                   // 17953
                                                                                                                       // 17954
      return true;                                                                                                     // 17955
    }                                                                                                                  // 17956
  }                                                                                                                    // 17957
                                                                                                                       // 17958
  return false;                                                                                                        // 17959
};                                                                                                                     // 17960
                                                                                                                       // 17961
WalkontableSelection.prototype.clear = function () {                                                                   // 17962
  this.cellRange = null;                                                                                               // 17963
};                                                                                                                     // 17964
                                                                                                                       // 17965
/**                                                                                                                    // 17966
 * Returns the top left (TL) and bottom right (BR) selection coordinates                                               // 17967
 * @returns {Object}                                                                                                   // 17968
 */                                                                                                                    // 17969
WalkontableSelection.prototype.getCorners = function () {                                                              // 17970
  var                                                                                                                  // 17971
    topLeft = this.cellRange.getTopLeftCorner(),                                                                       // 17972
    bottomRight = this.cellRange.getBottomRightCorner();                                                               // 17973
                                                                                                                       // 17974
  return [topLeft.row, topLeft.col, bottomRight.row, bottomRight.col];                                                 // 17975
};                                                                                                                     // 17976
                                                                                                                       // 17977
WalkontableSelection.prototype.addClassAtCoords = function (instance, sourceRow, sourceColumn, cls) {                  // 17978
  var TD = instance.wtTable.getCell(new WalkontableCellCoords(sourceRow, sourceColumn));                               // 17979
                                                                                                                       // 17980
  if (typeof TD === 'object') {                                                                                        // 17981
    Handsontable.Dom.addClass(TD, cls);                                                                                // 17982
  }                                                                                                                    // 17983
};                                                                                                                     // 17984
                                                                                                                       // 17985
WalkontableSelection.prototype.draw = function (instance) {                                                            // 17986
  var                                                                                                                  // 17987
    _this = this,                                                                                                      // 17988
    renderedRows = instance.wtTable.getRenderedRowsCount(),                                                            // 17989
    renderedColumns = instance.wtTable.getRenderedColumnsCount(),                                                      // 17990
    corners, sourceRow, sourceCol, border, TH;                                                                         // 17991
                                                                                                                       // 17992
  if (this.isEmpty()) {                                                                                                // 17993
    if (this.settings.border) {                                                                                        // 17994
      border = this.getBorder(instance);                                                                               // 17995
                                                                                                                       // 17996
      if (border) {                                                                                                    // 17997
        border.disappear();                                                                                            // 17998
      }                                                                                                                // 17999
    }                                                                                                                  // 18000
                                                                                                                       // 18001
    return;                                                                                                            // 18002
  }                                                                                                                    // 18003
                                                                                                                       // 18004
  corners = this.getCorners();                                                                                         // 18005
                                                                                                                       // 18006
  for (var column = 0; column < renderedColumns; column++) {                                                           // 18007
    sourceCol = instance.wtTable.columnFilter.renderedToSource(column);                                                // 18008
                                                                                                                       // 18009
    if (sourceCol >= corners[1] && sourceCol <= corners[3]) {                                                          // 18010
      TH = instance.wtTable.getColumnHeader(sourceCol);                                                                // 18011
                                                                                                                       // 18012
      if (TH && _this.settings.highlightColumnClassName) {                                                             // 18013
        Handsontable.Dom.addClass(TH, _this.settings.highlightColumnClassName);                                        // 18014
      }                                                                                                                // 18015
    }                                                                                                                  // 18016
  }                                                                                                                    // 18017
                                                                                                                       // 18018
  for (var row = 0; row < renderedRows; row++) {                                                                       // 18019
    sourceRow = instance.wtTable.rowFilter.renderedToSource(row);                                                      // 18020
                                                                                                                       // 18021
    if (sourceRow >= corners[0] && sourceRow <= corners[2]) {                                                          // 18022
      TH = instance.wtTable.getRowHeader(sourceRow);                                                                   // 18023
                                                                                                                       // 18024
      if (TH && _this.settings.highlightRowClassName) {                                                                // 18025
        Handsontable.Dom.addClass(TH, _this.settings.highlightRowClassName);                                           // 18026
      }                                                                                                                // 18027
    }                                                                                                                  // 18028
                                                                                                                       // 18029
    for (var column = 0; column < renderedColumns; column++) {                                                         // 18030
      sourceCol = instance.wtTable.columnFilter.renderedToSource(column);                                              // 18031
                                                                                                                       // 18032
      if (sourceRow >= corners[0] && sourceRow <= corners[2] && sourceCol >= corners[1] && sourceCol <= corners[3]) {  // 18033
        // selected cell                                                                                               // 18034
        if (_this.settings.className) {                                                                                // 18035
          _this.addClassAtCoords(instance, sourceRow, sourceCol, _this.settings.className);                            // 18036
        }                                                                                                              // 18037
      }                                                                                                                // 18038
      else if (sourceRow >= corners[0] && sourceRow <= corners[2]) {                                                   // 18039
        // selection is in this row                                                                                    // 18040
        if (_this.settings.highlightRowClassName) {                                                                    // 18041
          _this.addClassAtCoords(instance, sourceRow, sourceCol, _this.settings.highlightRowClassName);                // 18042
        }                                                                                                              // 18043
      }                                                                                                                // 18044
      else if (sourceCol >= corners[1] && sourceCol <= corners[3]) {                                                   // 18045
        // selection is in this column                                                                                 // 18046
        if (_this.settings.highlightColumnClassName) {                                                                 // 18047
          _this.addClassAtCoords(instance, sourceRow, sourceCol, _this.settings.highlightColumnClassName);             // 18048
        }                                                                                                              // 18049
      }                                                                                                                // 18050
    }                                                                                                                  // 18051
  }                                                                                                                    // 18052
                                                                                                                       // 18053
  instance.getSetting('onBeforeDrawBorders', corners, this.settings.className);                                        // 18054
                                                                                                                       // 18055
  if (this.settings.border) {                                                                                          // 18056
    border = this.getBorder(instance);                                                                                 // 18057
                                                                                                                       // 18058
    if (border) {                                                                                                      // 18059
      // warning! border.appear modifies corners!                                                                      // 18060
      border.appear(corners);                                                                                          // 18061
    }                                                                                                                  // 18062
  }                                                                                                                    // 18063
};                                                                                                                     // 18064
                                                                                                                       // 18065
function WalkontableSettings(instance, settings) {                                                                     // 18066
  var that = this;                                                                                                     // 18067
  this.instance = instance;                                                                                            // 18068
                                                                                                                       // 18069
  //default settings. void 0 means it is required, null means it can be empty                                          // 18070
  this.defaults = {                                                                                                    // 18071
    table: void 0,                                                                                                     // 18072
    debug: false, //shows WalkontableDebugOverlay                                                                      // 18073
                                                                                                                       // 18074
    //presentation mode                                                                                                // 18075
    stretchH: 'none', //values: all, last, none                                                                        // 18076
    currentRowClassName: null,                                                                                         // 18077
    currentColumnClassName: null,                                                                                      // 18078
                                                                                                                       // 18079
    //data source                                                                                                      // 18080
    data: void 0,                                                                                                      // 18081
    fixedColumnsLeft: 0,                                                                                               // 18082
    fixedRowsTop: 0,                                                                                                   // 18083
    rowHeaders: function () {                                                                                          // 18084
      return []                                                                                                        // 18085
    }, //this must be array of functions: [function (row, TH) {}]                                                      // 18086
    columnHeaders: function () {                                                                                       // 18087
      return []                                                                                                        // 18088
    }, //this must be array of functions: [function (column, TH) {}]                                                   // 18089
    totalRows: void 0,                                                                                                 // 18090
    totalColumns: void 0,                                                                                              // 18091
    cellRenderer: function (row, column, TD) {                                                                         // 18092
      var cellData = that.getSetting('data', row, column);                                                             // 18093
      Handsontable.Dom.fastInnerText(TD, cellData === void 0 || cellData === null ? '' : cellData);                    // 18094
    },                                                                                                                 // 18095
    //columnWidth: 50,                                                                                                 // 18096
    columnWidth: function (col) {                                                                                      // 18097
      return; //return undefined means use default size for the rendered cell content                                  // 18098
    },                                                                                                                 // 18099
    rowHeight: function (row) {                                                                                        // 18100
      return; //return undefined means use default size for the rendered cell content                                  // 18101
    },                                                                                                                 // 18102
    defaultRowHeight: 23,                                                                                              // 18103
    defaultColumnWidth: 50,                                                                                            // 18104
    selections: null,                                                                                                  // 18105
    hideBorderOnMouseDownOver: false,                                                                                  // 18106
    viewportRowCalculatorOverride: null,                                                                               // 18107
    viewportColumnCalculatorOverride: null,                                                                            // 18108
                                                                                                                       // 18109
    //callbacks                                                                                                        // 18110
    onCellMouseDown: null,                                                                                             // 18111
    onCellMouseOver: null,                                                                                             // 18112
//    onCellMouseOut: null,                                                                                            // 18113
    onCellDblClick: null,                                                                                              // 18114
    onCellCornerMouseDown: null,                                                                                       // 18115
    onCellCornerDblClick: null,                                                                                        // 18116
    beforeDraw: null,                                                                                                  // 18117
    onDraw: null,                                                                                                      // 18118
    onBeforeDrawBorders: null,                                                                                         // 18119
    onScrollVertically: null,                                                                                          // 18120
    onScrollHorizontally: null,                                                                                        // 18121
    onBeforeTouchScroll: null,                                                                                         // 18122
    onAfterMomentumScroll: null,                                                                                       // 18123
                                                                                                                       // 18124
    //constants                                                                                                        // 18125
    scrollbarWidth: 10,                                                                                                // 18126
    scrollbarHeight: 10,                                                                                               // 18127
                                                                                                                       // 18128
    renderAllRows: false,                                                                                              // 18129
    groups: false                                                                                                      // 18130
  };                                                                                                                   // 18131
                                                                                                                       // 18132
  //reference to settings                                                                                              // 18133
  this.settings = {};                                                                                                  // 18134
  for (var i in this.defaults) {                                                                                       // 18135
    if (this.defaults.hasOwnProperty(i)) {                                                                             // 18136
      if (settings[i] !== void 0) {                                                                                    // 18137
        this.settings[i] = settings[i];                                                                                // 18138
      }                                                                                                                // 18139
      else if (this.defaults[i] === void 0) {                                                                          // 18140
        throw new Error('A required setting "' + i + '" was not provided');                                            // 18141
      }                                                                                                                // 18142
      else {                                                                                                           // 18143
        this.settings[i] = this.defaults[i];                                                                           // 18144
      }                                                                                                                // 18145
    }                                                                                                                  // 18146
  }                                                                                                                    // 18147
}                                                                                                                      // 18148
                                                                                                                       // 18149
/**                                                                                                                    // 18150
 * generic methods                                                                                                     // 18151
 */                                                                                                                    // 18152
                                                                                                                       // 18153
WalkontableSettings.prototype.update = function (settings, value) {                                                    // 18154
  if (value === void 0) { //settings is object                                                                         // 18155
    for (var i in settings) {                                                                                          // 18156
      if (settings.hasOwnProperty(i)) {                                                                                // 18157
        this.settings[i] = settings[i];                                                                                // 18158
      }                                                                                                                // 18159
    }                                                                                                                  // 18160
  }                                                                                                                    // 18161
  else { //if value is defined then settings is the key                                                                // 18162
    this.settings[settings] = value;                                                                                   // 18163
  }                                                                                                                    // 18164
  return this.instance;                                                                                                // 18165
};                                                                                                                     // 18166
                                                                                                                       // 18167
WalkontableSettings.prototype.getSetting = function (key, param1, param2, param3, param4) {                            // 18168
  if (typeof this.settings[key] === 'function') {                                                                      // 18169
    return this.settings[key](param1, param2, param3, param4); //this is faster than .apply - https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips
  }                                                                                                                    // 18171
  else if (param1 !== void 0 && Array.isArray(this.settings[key])) { //perhaps this can be removed, it is only used in tests
    return this.settings[key][param1];                                                                                 // 18173
  }                                                                                                                    // 18174
  else {                                                                                                               // 18175
    return this.settings[key];                                                                                         // 18176
  }                                                                                                                    // 18177
};                                                                                                                     // 18178
                                                                                                                       // 18179
WalkontableSettings.prototype.has = function (key) {                                                                   // 18180
  return !!this.settings[key]                                                                                          // 18181
};                                                                                                                     // 18182
                                                                                                                       // 18183
function WalkontableTable(instance, table) {                                                                           // 18184
  //reference to instance                                                                                              // 18185
  this.instance = instance;                                                                                            // 18186
  this.TABLE = table;                                                                                                  // 18187
  Handsontable.Dom.removeTextNodes(this.TABLE);                                                                        // 18188
                                                                                                                       // 18189
  //wtSpreader                                                                                                         // 18190
  var parent = this.TABLE.parentNode;                                                                                  // 18191
  if (!parent || parent.nodeType !== 1 || !Handsontable.Dom.hasClass(parent, 'wtHolder')) {                            // 18192
    var spreader = document.createElement('DIV');                                                                      // 18193
    spreader.className = 'wtSpreader';                                                                                 // 18194
    if (parent) {                                                                                                      // 18195
      parent.insertBefore(spreader, this.TABLE); //if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it
    }                                                                                                                  // 18197
    spreader.appendChild(this.TABLE);                                                                                  // 18198
  }                                                                                                                    // 18199
  this.spreader = this.TABLE.parentNode;                                                                               // 18200
                                                                                                                       // 18201
  //wtHider                                                                                                            // 18202
  parent = this.spreader.parentNode;                                                                                   // 18203
  if (!parent || parent.nodeType !== 1 || !Handsontable.Dom.hasClass(parent, 'wtHolder')) {                            // 18204
    var hider = document.createElement('DIV');                                                                         // 18205
    hider.className = 'wtHider';                                                                                       // 18206
    if (parent) {                                                                                                      // 18207
      parent.insertBefore(hider, this.spreader); //if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it
    }                                                                                                                  // 18209
    hider.appendChild(this.spreader);                                                                                  // 18210
  }                                                                                                                    // 18211
  this.hider = this.spreader.parentNode;                                                                               // 18212
  this.hiderStyle = this.hider.style;                                                                                  // 18213
  this.hiderStyle.position = 'relative';                                                                               // 18214
                                                                                                                       // 18215
  //wtHolder                                                                                                           // 18216
  parent = this.hider.parentNode;                                                                                      // 18217
  if (!parent || parent.nodeType !== 1 || !Handsontable.Dom.hasClass(parent, 'wtHolder')) {                            // 18218
    var holder = document.createElement('DIV');                                                                        // 18219
    holder.style.position = 'relative';                                                                                // 18220
    holder.className = 'wtHolder';                                                                                     // 18221
                                                                                                                       // 18222
    if(!instance.cloneSource) {                                                                                        // 18223
      holder.className += ' ht_master';                                                                                // 18224
    }                                                                                                                  // 18225
                                                                                                                       // 18226
    if (parent) {                                                                                                      // 18227
      parent.insertBefore(holder, this.hider); //if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it
    }                                                                                                                  // 18229
    holder.appendChild(this.hider);                                                                                    // 18230
  }                                                                                                                    // 18231
  this.holder = this.hider.parentNode;                                                                                 // 18232
                                                                                                                       // 18233
  if (!this.isWorkingOnClone()) {                                                                                      // 18234
    this.holder.parentNode.style.position = "relative";                                                                // 18235
  }                                                                                                                    // 18236
                                                                                                                       // 18237
  //bootstrap from settings                                                                                            // 18238
  this.TBODY = this.TABLE.getElementsByTagName('TBODY')[0];                                                            // 18239
  if (!this.TBODY) {                                                                                                   // 18240
    this.TBODY = document.createElement('TBODY');                                                                      // 18241
    this.TABLE.appendChild(this.TBODY);                                                                                // 18242
  }                                                                                                                    // 18243
  this.THEAD = this.TABLE.getElementsByTagName('THEAD')[0];                                                            // 18244
  if (!this.THEAD) {                                                                                                   // 18245
    this.THEAD = document.createElement('THEAD');                                                                      // 18246
    this.TABLE.insertBefore(this.THEAD, this.TBODY);                                                                   // 18247
  }                                                                                                                    // 18248
  this.COLGROUP = this.TABLE.getElementsByTagName('COLGROUP')[0];                                                      // 18249
  if (!this.COLGROUP) {                                                                                                // 18250
    this.COLGROUP = document.createElement('COLGROUP');                                                                // 18251
    this.TABLE.insertBefore(this.COLGROUP, this.THEAD);                                                                // 18252
  }                                                                                                                    // 18253
                                                                                                                       // 18254
  if (this.instance.getSetting('columnHeaders').length) {                                                              // 18255
    if (!this.THEAD.childNodes.length) {                                                                               // 18256
      var TR = document.createElement('TR');                                                                           // 18257
      this.THEAD.appendChild(TR);                                                                                      // 18258
    }                                                                                                                  // 18259
  }                                                                                                                    // 18260
                                                                                                                       // 18261
  this.colgroupChildrenLength = this.COLGROUP.childNodes.length;                                                       // 18262
  this.theadChildrenLength = this.THEAD.firstChild ? this.THEAD.firstChild.childNodes.length : 0;                      // 18263
  this.tbodyChildrenLength = this.TBODY.childNodes.length;                                                             // 18264
                                                                                                                       // 18265
  this.rowFilter = null;                                                                                               // 18266
  this.columnFilter = null;                                                                                            // 18267
}                                                                                                                      // 18268
                                                                                                                       // 18269
WalkontableTable.prototype.isWorkingOnClone = function () {                                                            // 18270
  return !!this.instance.cloneSource;                                                                                  // 18271
};                                                                                                                     // 18272
                                                                                                                       // 18273
/**                                                                                                                    // 18274
 * Redraws the table                                                                                                   // 18275
 * @param fastDraw {Boolean} If TRUE, will try to avoid full redraw and only update the border positions. If FALSE or UNDEFINED, will perform a full redraw
 * @returns {WalkontableTable}                                                                                         // 18277
 */                                                                                                                    // 18278
WalkontableTable.prototype.draw = function (fastDraw) {                                                                // 18279
  if (!this.isWorkingOnClone()) {                                                                                      // 18280
    this.holderOffset = Handsontable.Dom.offset(this.holder);                                                          // 18281
    fastDraw = this.instance.wtViewport.createRenderCalculators(fastDraw);                                             // 18282
  }                                                                                                                    // 18283
                                                                                                                       // 18284
  if (!fastDraw) {                                                                                                     // 18285
    if (this.isWorkingOnClone()) {                                                                                     // 18286
      this.tableOffset = this.instance.cloneSource.wtTable.tableOffset;                                                // 18287
    }                                                                                                                  // 18288
    else {                                                                                                             // 18289
      this.tableOffset = Handsontable.Dom.offset(this.TABLE);                                                          // 18290
    }                                                                                                                  // 18291
    var startRow;                                                                                                      // 18292
    if (this.instance.cloneOverlay instanceof WalkontableDebugOverlay                                                  // 18293
      || this.instance.cloneOverlay instanceof WalkontableVerticalScrollbarNative                                      // 18294
      || this.instance.cloneOverlay instanceof WalkontableCornerScrollbarNative) {                                     // 18295
      startRow = 0;                                                                                                    // 18296
    }                                                                                                                  // 18297
    else {                                                                                                             // 18298
      startRow = this.instance.wtViewport.rowsRenderCalculator.startRow;                                               // 18299
    }                                                                                                                  // 18300
                                                                                                                       // 18301
                                                                                                                       // 18302
    var startColumn;                                                                                                   // 18303
    if (this.instance.cloneOverlay instanceof WalkontableDebugOverlay                                                  // 18304
    || this.instance.cloneOverlay instanceof  WalkontableHorizontalScrollbarNative                                     // 18305
    || this.instance.cloneOverlay instanceof WalkontableCornerScrollbarNative) {                                       // 18306
      startColumn = 0;                                                                                                 // 18307
    } else {                                                                                                           // 18308
      startColumn = this.instance.wtViewport.columnsRenderCalculator.startColumn;                                      // 18309
    }                                                                                                                  // 18310
                                                                                                                       // 18311
    this.rowFilter = new WalkontableRowFilter(                                                                         // 18312
      startRow,                                                                                                        // 18313
      this.instance.getSetting('totalRows'),                                                                           // 18314
      this.instance.getSetting('columnHeaders').length                                                                 // 18315
    );                                                                                                                 // 18316
    this.columnFilter = new WalkontableColumnFilter(                                                                   // 18317
      startColumn,                                                                                                     // 18318
      this.instance.getSetting('totalColumns'),                                                                        // 18319
      this.instance.getSetting('rowHeaders').length                                                                    // 18320
    );                                                                                                                 // 18321
    this._doDraw(); //creates calculator after draw                                                                    // 18322
  }                                                                                                                    // 18323
  else {                                                                                                               // 18324
    if (!this.isWorkingOnClone()) {                                                                                    // 18325
      this.instance.wtViewport.createVisibleCalculators(); //in case we only scrolled without redraw, update visible rows information in oldRowsCalculator
    }                                                                                                                  // 18327
    this.instance.wtScrollbars && this.instance.wtScrollbars.refresh(true);                                            // 18328
  }                                                                                                                    // 18329
                                                                                                                       // 18330
  this.refreshSelections(fastDraw);                                                                                    // 18331
                                                                                                                       // 18332
  if (!this.isWorkingOnClone()) {                                                                                      // 18333
    this.instance.wtScrollbars.vertical.resetFixedPosition();                                                          // 18334
    this.instance.wtScrollbars.horizontal.resetFixedPosition();                                                        // 18335
    this.instance.wtScrollbars.corner.resetFixedPosition();                                                            // 18336
  }                                                                                                                    // 18337
                                                                                                                       // 18338
  this.instance.drawn = true;                                                                                          // 18339
  return this;                                                                                                         // 18340
};                                                                                                                     // 18341
                                                                                                                       // 18342
WalkontableTable.prototype._doDraw = function () {                                                                     // 18343
  var wtRenderer = new WalkontableTableRenderer(this);                                                                 // 18344
  wtRenderer.render();                                                                                                 // 18345
};                                                                                                                     // 18346
                                                                                                                       // 18347
WalkontableTable.prototype.removeClassFromCells = function (className) {                                               // 18348
  var nodes = this.TABLE.querySelectorAll('.' + className);                                                            // 18349
  for (var i = 0, ilen = nodes.length; i < ilen; i++) {                                                                // 18350
    Handsontable.Dom.removeClass(nodes[i], className);                                                                 // 18351
  }                                                                                                                    // 18352
};                                                                                                                     // 18353
                                                                                                                       // 18354
WalkontableTable.prototype.refreshSelections = function (fastDraw) {                                                   // 18355
  var i, len;                                                                                                          // 18356
                                                                                                                       // 18357
  if (!this.instance.selections) {                                                                                     // 18358
    return;                                                                                                            // 18359
  }                                                                                                                    // 18360
  len = this.instance.selections.length;                                                                               // 18361
                                                                                                                       // 18362
  if (fastDraw) {                                                                                                      // 18363
    for (i = 0; i < len; i++) {                                                                                        // 18364
      // there was no rerender, so we need to remove classNames by ourselves                                           // 18365
      if (this.instance.selections[i].settings.className) {                                                            // 18366
        this.removeClassFromCells(this.instance.selections[i].settings.className);                                     // 18367
      }                                                                                                                // 18368
      if (this.instance.selections[i].settings.highlightRowClassName) {                                                // 18369
        this.removeClassFromCells(this.instance.selections[i].settings.highlightRowClassName);                         // 18370
      }                                                                                                                // 18371
      if (this.instance.selections[i].settings.highlightColumnClassName) {                                             // 18372
        this.removeClassFromCells(this.instance.selections[i].settings.highlightColumnClassName);                      // 18373
      }                                                                                                                // 18374
    }                                                                                                                  // 18375
  }                                                                                                                    // 18376
  for (i = 0; i < len; i++) {                                                                                          // 18377
    this.instance.selections[i].draw(this.instance, fastDraw);                                                         // 18378
  }                                                                                                                    // 18379
};                                                                                                                     // 18380
                                                                                                                       // 18381
/**                                                                                                                    // 18382
 * getCell                                                                                                             // 18383
 * @param {WalkontableCellCoords} coords                                                                               // 18384
 * @return {Object} HTMLElement on success or {Number} one of the exit codes on error:                                 // 18385
 *  -1 row before viewport                                                                                             // 18386
 *  -2 row after viewport                                                                                              // 18387
 *                                                                                                                     // 18388
 */                                                                                                                    // 18389
WalkontableTable.prototype.getCell = function (coords) {                                                               // 18390
  if (this.isRowBeforeRenderedRows(coords.row)) {                                                                      // 18391
    return -1; //row before rendered rows                                                                              // 18392
  }                                                                                                                    // 18393
  else if (this.isRowAfterRenderedRows(coords.row)) {                                                                  // 18394
    return -2; //row after rendered rows                                                                               // 18395
  }                                                                                                                    // 18396
                                                                                                                       // 18397
    var TR = this.TBODY.childNodes[this.rowFilter.sourceToRendered(coords.row)];                                       // 18398
                                                                                                                       // 18399
    if (TR) {                                                                                                          // 18400
      return TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(coords.col)];                        // 18401
    }                                                                                                                  // 18402
};                                                                                                                     // 18403
                                                                                                                       // 18404
/**                                                                                                                    // 18405
 * getColumnHeader                                                                                                     // 18406
 * @param col                                                                                                          // 18407
 * @return {Object} HTMLElement on success or undefined on error                                                       // 18408
 *                                                                                                                     // 18409
 */                                                                                                                    // 18410
WalkontableTable.prototype.getColumnHeader = function(col) {                                                           // 18411
  var THEAD = this.THEAD.childNodes[0];                                                                                // 18412
  if (THEAD) {                                                                                                         // 18413
    return THEAD.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(col)];                              // 18414
  }                                                                                                                    // 18415
};                                                                                                                     // 18416
                                                                                                                       // 18417
/**                                                                                                                    // 18418
 * getRowHeader                                                                                                        // 18419
 * @param row                                                                                                          // 18420
 * @return {Object} HTMLElement on success or {Number} one of the exit codes on error:                                 // 18421
 *  null table doesn't have row headers                                                                                // 18422
 *                                                                                                                     // 18423
 */                                                                                                                    // 18424
WalkontableTable.prototype.getRowHeader = function(row) {                                                              // 18425
  if(this.columnFilter.sourceColumnToVisibleRowHeadedColumn(0) == 0) {                                                 // 18426
    return null;                                                                                                       // 18427
  }                                                                                                                    // 18428
                                                                                                                       // 18429
  var TR = this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];                                                // 18430
                                                                                                                       // 18431
  if (TR) {                                                                                                            // 18432
    return TR.childNodes[0];                                                                                           // 18433
  }                                                                                                                    // 18434
};                                                                                                                     // 18435
                                                                                                                       // 18436
/**                                                                                                                    // 18437
 * Returns cell coords object for a given TD                                                                           // 18438
 * @param TD                                                                                                           // 18439
 * @returns {WalkontableCellCoords}                                                                                    // 18440
 */                                                                                                                    // 18441
WalkontableTable.prototype.getCoords = function (TD) {                                                                 // 18442
  var TR = TD.parentNode;                                                                                              // 18443
  var row = Handsontable.Dom.index(TR);                                                                                // 18444
  if (TR.parentNode === this.THEAD) {                                                                                  // 18445
    row = this.rowFilter.visibleColHeadedRowToSourceRow(row);                                                          // 18446
  }                                                                                                                    // 18447
  else {                                                                                                               // 18448
    row = this.rowFilter.renderedToSource(row);                                                                        // 18449
  }                                                                                                                    // 18450
                                                                                                                       // 18451
  return new WalkontableCellCoords(                                                                                    // 18452
    row,                                                                                                               // 18453
    this.columnFilter.visibleRowHeadedColumnToSourceColumn(TD.cellIndex)                                               // 18454
  );                                                                                                                   // 18455
};                                                                                                                     // 18456
                                                                                                                       // 18457
WalkontableTable.prototype.getTrForRow = function (row) {                                                              // 18458
  return this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];                                                  // 18459
};                                                                                                                     // 18460
                                                                                                                       // 18461
WalkontableTable.prototype.getFirstRenderedRow = function () {                                                         // 18462
  return this.instance.wtViewport.rowsRenderCalculator.startRow;                                                       // 18463
};                                                                                                                     // 18464
                                                                                                                       // 18465
WalkontableTable.prototype.getFirstVisibleRow = function () {                                                          // 18466
  return this.instance.wtViewport.rowsVisibleCalculator.startRow;                                                      // 18467
};                                                                                                                     // 18468
                                                                                                                       // 18469
WalkontableTable.prototype.getFirstRenderedColumn = function () {                                                      // 18470
  return this.instance.wtViewport.columnsRenderCalculator.startColumn;                                                 // 18471
};                                                                                                                     // 18472
                                                                                                                       // 18473
//returns -1 if no column is visible                                                                                   // 18474
WalkontableTable.prototype.getFirstVisibleColumn = function () {                                                       // 18475
  return this.instance.wtViewport.columnsVisibleCalculator.startColumn;                                                // 18476
};                                                                                                                     // 18477
                                                                                                                       // 18478
//returns -1 if no row is visible                                                                                      // 18479
WalkontableTable.prototype.getLastRenderedRow = function () {                                                          // 18480
  return this.instance.wtViewport.rowsRenderCalculator.endRow;                                                         // 18481
};                                                                                                                     // 18482
                                                                                                                       // 18483
WalkontableTable.prototype.getLastVisibleRow = function () {                                                           // 18484
  return this.instance.wtViewport.rowsVisibleCalculator.endRow;                                                        // 18485
};                                                                                                                     // 18486
                                                                                                                       // 18487
WalkontableTable.prototype.getLastRenderedColumn = function () {                                                       // 18488
  return this.instance.wtViewport.columnsRenderCalculator.endColumn;                                                   // 18489
};                                                                                                                     // 18490
                                                                                                                       // 18491
//returns -1 if no column is visible                                                                                   // 18492
WalkontableTable.prototype.getLastVisibleColumn = function () {                                                        // 18493
  return this.instance.wtViewport.columnsVisibleCalculator.endColumn;                                                  // 18494
};                                                                                                                     // 18495
                                                                                                                       // 18496
WalkontableTable.prototype.isRowBeforeRenderedRows = function (r) {                                                    // 18497
  return (this.rowFilter.sourceToRendered(r) < 0 && r >= 0);                                                           // 18498
};                                                                                                                     // 18499
                                                                                                                       // 18500
WalkontableTable.prototype.isRowAfterViewport = function (r) {                                                         // 18501
  return (r > this.getLastVisibleRow());                                                                               // 18502
};                                                                                                                     // 18503
                                                                                                                       // 18504
WalkontableTable.prototype.isRowAfterRenderedRows = function (r) {                                                     // 18505
  return (r > this.getLastRenderedRow());                                                                              // 18506
};                                                                                                                     // 18507
                                                                                                                       // 18508
WalkontableTable.prototype.isColumnBeforeViewport = function (c) {                                                     // 18509
  return (this.columnFilter.sourceToRendered(c) < 0 && c >= 0);                                                        // 18510
};                                                                                                                     // 18511
                                                                                                                       // 18512
WalkontableTable.prototype.isColumnAfterViewport = function (c) {                                                      // 18513
  return (c > this.getLastVisibleColumn());                                                                            // 18514
};                                                                                                                     // 18515
                                                                                                                       // 18516
WalkontableTable.prototype.isLastRowFullyVisible = function () {                                                       // 18517
  return (this.getLastVisibleRow() === this.getLastRenderedRow());                                                     // 18518
};                                                                                                                     // 18519
                                                                                                                       // 18520
WalkontableTable.prototype.isLastColumnFullyVisible = function () {                                                    // 18521
  return (this.getLastVisibleColumn() === this.getLastRenderedColumn);                                                 // 18522
};                                                                                                                     // 18523
                                                                                                                       // 18524
WalkontableTable.prototype.getRenderedColumnsCount = function () {                                                     // 18525
  if (this.instance.cloneOverlay instanceof WalkontableDebugOverlay) {                                                 // 18526
    return this.instance.getSetting('totalColumns');                                                                   // 18527
  }                                                                                                                    // 18528
  else if (this.instance.cloneOverlay instanceof WalkontableHorizontalScrollbarNative || this.instance.cloneOverlay instanceof WalkontableCornerScrollbarNative) {
    return this.instance.getSetting('fixedColumnsLeft');                                                               // 18530
  }                                                                                                                    // 18531
  else {                                                                                                               // 18532
    return this.instance.wtViewport.columnsRenderCalculator.count;                                                     // 18533
  }                                                                                                                    // 18534
};                                                                                                                     // 18535
                                                                                                                       // 18536
WalkontableTable.prototype.getRenderedRowsCount = function () {                                                        // 18537
  if (this.instance.cloneOverlay instanceof WalkontableDebugOverlay) {                                                 // 18538
    return this.instance.getSetting('totalRows');                                                                      // 18539
  }                                                                                                                    // 18540
  else if (this.instance.cloneOverlay instanceof WalkontableVerticalScrollbarNative || this.instance.cloneOverlay instanceof WalkontableCornerScrollbarNative) {
    return this.instance.getSetting('fixedRowsTop');                                                                   // 18542
  }                                                                                                                    // 18543
  return this.instance.wtViewport.rowsRenderCalculator.count;                                                          // 18544
};                                                                                                                     // 18545
                                                                                                                       // 18546
WalkontableTable.prototype.getVisibleRowsCount = function () {                                                         // 18547
  return this.instance.wtViewport.rowsVisibleCalculator.count;                                                         // 18548
};                                                                                                                     // 18549
                                                                                                                       // 18550
WalkontableTable.prototype.allRowsInViewport = function () {                                                           // 18551
  return this.instance.getSetting('totalRows') == this.getVisibleRowsCount();                                          // 18552
};                                                                                                                     // 18553
                                                                                                                       // 18554
/**                                                                                                                    // 18555
 * Checks if any of the row's cells content exceeds its initial height, and if so, returns the oversized height        // 18556
 * @param {Number} sourceRow                                                                                           // 18557
 * @return {Number}                                                                                                    // 18558
 */                                                                                                                    // 18559
WalkontableTable.prototype.getRowHeight = function (sourceRow) {                                                       // 18560
  var height = this.instance.wtSettings.settings.rowHeight(sourceRow);                                                 // 18561
  var oversizedHeight = this.instance.wtViewport.oversizedRows[sourceRow];                                             // 18562
  if (oversizedHeight !== void 0) {                                                                                    // 18563
    height = height ? Math.max(height, oversizedHeight) : oversizedHeight;                                             // 18564
  }                                                                                                                    // 18565
  return height;                                                                                                       // 18566
};                                                                                                                     // 18567
                                                                                                                       // 18568
                                                                                                                       // 18569
WalkontableTable.prototype.getVisibleColumnsCount = function () {                                                      // 18570
  return this.instance.wtViewport.columnsVisibleCalculator.count;                                                      // 18571
};                                                                                                                     // 18572
                                                                                                                       // 18573
                                                                                                                       // 18574
WalkontableTable.prototype.allColumnsInViewport = function () {                                                        // 18575
  return this.instance.getSetting('totalColumns') == this.getVisibleColumnsCount();                                    // 18576
};                                                                                                                     // 18577
                                                                                                                       // 18578
                                                                                                                       // 18579
                                                                                                                       // 18580
WalkontableTable.prototype.getColumnWidth = function (sourceColumn) {                                                  // 18581
  var width = this.instance.wtSettings.settings.columnWidth;                                                           // 18582
  if(typeof width === 'function') {                                                                                    // 18583
    width = width(sourceColumn);                                                                                       // 18584
  } else if(typeof width === 'object') {                                                                               // 18585
    width = width[sourceColumn];                                                                                       // 18586
  }                                                                                                                    // 18587
                                                                                                                       // 18588
  var oversizedWidth = this.instance.wtViewport.oversizedCols[sourceColumn];                                           // 18589
  if (oversizedWidth !== void 0) {                                                                                     // 18590
    width = width ? Math.max(width, oversizedWidth) : oversizedWidth;                                                  // 18591
  }                                                                                                                    // 18592
  return width;                                                                                                        // 18593
};                                                                                                                     // 18594
                                                                                                                       // 18595
WalkontableTable.prototype.getStretchedColumnWidth = function (sourceColumn) {                                         // 18596
  var allColumns = this.instance.getSetting('totalColumns');                                                           // 18597
  var width = this.getColumnWidth(sourceColumn) || this.instance.wtSettings.settings.defaultColumnWidth;               // 18598
                                                                                                                       // 18599
  if(this.instance.wtViewport.columnsRenderCalculator) {                                                               // 18600
    if (this.instance.wtViewport.columnsRenderCalculator.stretchAllRatio != 0) {                                       // 18601
      width = width * this.instance.wtViewport.columnsRenderCalculator.stretchAllRatio;                                // 18602
    } else if (this.instance.wtViewport.columnsRenderCalculator.stretchLastWidth != 0) {                               // 18603
      if (sourceColumn == allColumns - 1) {                                                                            // 18604
        width = this.instance.wtViewport.columnsRenderCalculator.stretchLastWidth;                                     // 18605
      }                                                                                                                // 18606
    }                                                                                                                  // 18607
  }                                                                                                                    // 18608
  return width;                                                                                                        // 18609
};                                                                                                                     // 18610
                                                                                                                       // 18611
                                                                                                                       // 18612
function WalkontableTableRenderer(wtTable) {                                                                           // 18613
  this.wtTable = wtTable;                                                                                              // 18614
  this.instance = wtTable.instance;                                                                                    // 18615
  this.rowFilter = wtTable.rowFilter;                                                                                  // 18616
  this.columnFilter = wtTable.columnFilter;                                                                            // 18617
                                                                                                                       // 18618
  this.TABLE = wtTable.TABLE;                                                                                          // 18619
  this.THEAD = wtTable.THEAD;                                                                                          // 18620
  this.TBODY = wtTable.TBODY;                                                                                          // 18621
  this.COLGROUP = wtTable.COLGROUP;                                                                                    // 18622
                                                                                                                       // 18623
  this.utils = WalkontableTableRenderer.utils;                                                                         // 18624
                                                                                                                       // 18625
}                                                                                                                      // 18626
                                                                                                                       // 18627
WalkontableTableRenderer.prototype.render = function () {                                                              // 18628
  if (!this.wtTable.isWorkingOnClone()) {                                                                              // 18629
    this.instance.getSetting('beforeDraw', true);                                                                      // 18630
  }                                                                                                                    // 18631
                                                                                                                       // 18632
  this.rowHeaders = this.instance.getSetting('rowHeaders');                                                            // 18633
  this.rowHeaderCount = this.rowHeaders.length;                                                                        // 18634
  this.fixedRowsTop = this.instance.getSetting('fixedRowsTop');                                                        // 18635
  this.columnHeaders = this.instance.getSetting('columnHeaders');                                                      // 18636
  this.columnHeaderCount = this.columnHeaders.length;                                                                  // 18637
                                                                                                                       // 18638
  var visibleColIndex                                                                                                  // 18639
    , totalRows = this.instance.getSetting('totalRows')                                                                // 18640
    , totalColumns = this.instance.getSetting('totalColumns')                                                          // 18641
    , displayTds                                                                                                       // 18642
    , adjusted = false                                                                                                 // 18643
    , workspaceWidth                                                                                                   // 18644
    , cloneLimit = this.wtTable.getRenderedRowsCount();                                                                // 18645
                                                                                                                       // 18646
  if (totalColumns > 0) {                                                                                              // 18647
    this.adjustAvailableNodes();                                                                                       // 18648
    adjusted = true;                                                                                                   // 18649
                                                                                                                       // 18650
    this.renderColGroups();                                                                                            // 18651
                                                                                                                       // 18652
    this.renderColumnHeaders();                                                                                        // 18653
                                                                                                                       // 18654
    displayTds = this.wtTable.getRenderedColumnsCount();                                                               // 18655
                                                                                                                       // 18656
    //Render table rows                                                                                                // 18657
    this.renderRows(totalRows, cloneLimit, displayTds);                                                                // 18658
                                                                                                                       // 18659
    if (!this.wtTable.isWorkingOnClone()) {                                                                            // 18660
      workspaceWidth = this.instance.wtViewport.getWorkspaceWidth();                                                   // 18661
      this.instance.wtViewport.containerWidth = null;                                                                  // 18662
    }                                                                                                                  // 18663
                                                                                                                       // 18664
    this.adjustColumnWidths(displayTds);                                                                               // 18665
  }                                                                                                                    // 18666
                                                                                                                       // 18667
  if (!adjusted) {                                                                                                     // 18668
    this.adjustAvailableNodes();                                                                                       // 18669
  }                                                                                                                    // 18670
                                                                                                                       // 18671
  this.removeRedundantRows(cloneLimit);                                                                                // 18672
                                                                                                                       // 18673
  if (!this.wtTable.isWorkingOnClone()) {                                                                              // 18674
    this.markOversizedRows();                                                                                          // 18675
                                                                                                                       // 18676
    this.instance.wtViewport.createVisibleCalculators();                                                               // 18677
                                                                                                                       // 18678
    this.instance.wtScrollbars.applyToDOM();                                                                           // 18679
                                                                                                                       // 18680
    if (workspaceWidth !== this.instance.wtViewport.getWorkspaceWidth()) {                                             // 18681
      //workspace width changed though to shown/hidden vertical scrollbar. Let's reapply stretching                    // 18682
      this.instance.wtViewport.containerWidth = null;                                                                  // 18683
                                                                                                                       // 18684
      var firstRendered = this.wtTable.getFirstRenderedColumn();                                                       // 18685
      var lastRendered = this.wtTable.getLastRenderedColumn();                                                         // 18686
                                                                                                                       // 18687
      for (var i = firstRendered ; i < lastRendered; i++) {                                                            // 18688
        var width = this.wtTable.getStretchedColumnWidth(i);                                                           // 18689
        var renderedIndex = this.columnFilter.sourceToRendered(i);                                                     // 18690
        this.COLGROUP.childNodes[renderedIndex + this.rowHeaderCount].style.width = width + 'px';                      // 18691
      }                                                                                                                // 18692
    }                                                                                                                  // 18693
                                                                                                                       // 18694
    this.instance.wtScrollbars.refresh(false);                                                                         // 18695
                                                                                                                       // 18696
    this.instance.getSetting('onDraw', true);                                                                          // 18697
  }                                                                                                                    // 18698
                                                                                                                       // 18699
};                                                                                                                     // 18700
                                                                                                                       // 18701
WalkontableTableRenderer.prototype.removeRedundantRows = function (renderedRowsCount) {                                // 18702
  while (this.wtTable.tbodyChildrenLength > renderedRowsCount) {                                                       // 18703
    this.TBODY.removeChild(this.TBODY.lastChild);                                                                      // 18704
    this.wtTable.tbodyChildrenLength--;                                                                                // 18705
  }                                                                                                                    // 18706
};                                                                                                                     // 18707
                                                                                                                       // 18708
WalkontableTableRenderer.prototype.renderRows = function (totalRows, cloneLimit, displayTds) {                         // 18709
  var lastTD, TR;                                                                                                      // 18710
  var visibleRowIndex = 0;                                                                                             // 18711
  var sourceRowIndex = this.rowFilter.renderedToSource(visibleRowIndex);                                               // 18712
  var isWorkingOnClone = this.wtTable.isWorkingOnClone();                                                              // 18713
                                                                                                                       // 18714
  while (sourceRowIndex < totalRows && sourceRowIndex >= 0) {                                                          // 18715
    if (visibleRowIndex > 1000) {                                                                                      // 18716
      throw new Error('Security brake: Too much TRs. Please define height for your table, which will enforce scrollbars.');
    }                                                                                                                  // 18718
                                                                                                                       // 18719
    if (cloneLimit !== void 0 && visibleRowIndex === cloneLimit) {                                                     // 18720
      break; //we have as much rows as needed for this clone                                                           // 18721
    }                                                                                                                  // 18722
                                                                                                                       // 18723
    TR = this.getOrCreateTrForRow(visibleRowIndex, TR);                                                                // 18724
                                                                                                                       // 18725
    //Render row headers                                                                                               // 18726
    this.renderRowHeaders(sourceRowIndex, TR);                                                                         // 18727
                                                                                                                       // 18728
    this.adjustColumns(TR, displayTds + this.rowHeaderCount);                                                          // 18729
                                                                                                                       // 18730
    lastTD = this.renderCells(sourceRowIndex, TR, displayTds);                                                         // 18731
                                                                                                                       // 18732
    //after last column is rendered, check if last cell is fully displayed                                             // 18733
    if (!isWorkingOnClone) {                                                                                           // 18734
      this.resetOversizedRow(sourceRowIndex);                                                                          // 18735
    }                                                                                                                  // 18736
                                                                                                                       // 18737
                                                                                                                       // 18738
    if (TR.firstChild) {                                                                                               // 18739
      var height = this.instance.wtTable.getRowHeight(sourceRowIndex); //if I have 2 fixed columns with one-line content and the 3rd column has a multiline content, this is the way to make sure that the overlay will has same row height
      if (height) {                                                                                                    // 18741
        TR.firstChild.style.height = height + 'px';                                                                    // 18742
      }                                                                                                                // 18743
      else {                                                                                                           // 18744
        TR.firstChild.style.height = '';                                                                               // 18745
      }                                                                                                                // 18746
    }                                                                                                                  // 18747
                                                                                                                       // 18748
    visibleRowIndex++;                                                                                                 // 18749
                                                                                                                       // 18750
    sourceRowIndex = this.rowFilter.renderedToSource(visibleRowIndex);                                                 // 18751
  }                                                                                                                    // 18752
};                                                                                                                     // 18753
                                                                                                                       // 18754
WalkontableTableRenderer.prototype.resetOversizedRow = function (sourceRow) {                                          // 18755
  if (this.instance.wtViewport.oversizedRows && this.instance.wtViewport.oversizedRows[sourceRow]) {                   // 18756
    this.instance.wtViewport.oversizedRows[sourceRow] = void 0;  //void 0 is faster than delete, see http://jsperf.com/delete-vs-undefined-vs-null/16
  }                                                                                                                    // 18758
};                                                                                                                     // 18759
                                                                                                                       // 18760
WalkontableTableRenderer.prototype.markOversizedRows = function () {                                                   // 18761
  var previousRowHeight                                                                                                // 18762
    , trInnerHeight                                                                                                    // 18763
    , sourceRowIndex                                                                                                   // 18764
    , currentTr;                                                                                                       // 18765
                                                                                                                       // 18766
  var rowCount = this.instance.wtTable.TBODY.childNodes.length;                                                        // 18767
  while (rowCount) {                                                                                                   // 18768
    rowCount--;                                                                                                        // 18769
    sourceRowIndex = this.instance.wtTable.rowFilter.renderedToSource(rowCount);                                       // 18770
    previousRowHeight = this.instance.wtTable.getRowHeight(sourceRowIndex);                                            // 18771
    currentTr = this.instance.wtTable.getTrForRow(sourceRowIndex);                                                     // 18772
                                                                                                                       // 18773
    trInnerHeight = Handsontable.Dom.innerHeight(currentTr) - 1;                                                       // 18774
                                                                                                                       // 18775
    if ((!previousRowHeight && this.instance.wtSettings.settings.defaultRowHeight < trInnerHeight || previousRowHeight < trInnerHeight)) {
      this.instance.wtViewport.oversizedRows[sourceRowIndex] = trInnerHeight;                                          // 18777
    }                                                                                                                  // 18778
  }                                                                                                                    // 18779
                                                                                                                       // 18780
};                                                                                                                     // 18781
                                                                                                                       // 18782
WalkontableTableRenderer.prototype.renderCells = function (sourceRowIndex, TR, displayTds) {                           // 18783
  var TD, sourceColIndex;                                                                                              // 18784
                                                                                                                       // 18785
  for (var visibleColIndex = 0; visibleColIndex < displayTds; visibleColIndex++) {                                     // 18786
    sourceColIndex = this.columnFilter.renderedToSource(visibleColIndex);                                              // 18787
    if (visibleColIndex === 0) {                                                                                       // 18788
      TD = TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(sourceColIndex)];                      // 18789
    }                                                                                                                  // 18790
    else {                                                                                                             // 18791
      TD = TD.nextSibling; //http://jsperf.com/nextsibling-vs-indexed-childnodes                                       // 18792
    }                                                                                                                  // 18793
                                                                                                                       // 18794
    //If the number of headers has been reduced, we need to replace excess TH with TD                                  // 18795
    if (TD.nodeName == 'TH') {                                                                                         // 18796
      TD = this.utils.replaceThWithTd(TD, TR);                                                                         // 18797
    }                                                                                                                  // 18798
                                                                                                                       // 18799
    if (!Handsontable.Dom.hasClass(TD, 'hide')) {                                                                      // 18800
      TD.className = '';                                                                                               // 18801
    }                                                                                                                  // 18802
                                                                                                                       // 18803
    TD.removeAttribute('style');                                                                                       // 18804
                                                                                                                       // 18805
    this.instance.wtSettings.settings.cellRenderer(sourceRowIndex, sourceColIndex, TD);                                // 18806
                                                                                                                       // 18807
  }                                                                                                                    // 18808
                                                                                                                       // 18809
  return TD;                                                                                                           // 18810
};                                                                                                                     // 18811
                                                                                                                       // 18812
WalkontableTableRenderer.prototype.adjustColumnWidths = function (displayTds) {                                        // 18813
  var width;                                                                                                           // 18814
  this.instance.wtViewport.columnsRenderCalculator.refreshStretching(this.instance.wtViewport.getViewportWidth());     // 18815
                                                                                                                       // 18816
  for (var renderedColIndex = 0; renderedColIndex < displayTds; renderedColIndex++) {                                  // 18817
    width = this.wtTable.getStretchedColumnWidth(this.columnFilter.renderedToSource(renderedColIndex));                // 18818
      this.COLGROUP.childNodes[renderedColIndex + this.rowHeaderCount].style.width = width + 'px';                     // 18819
  }                                                                                                                    // 18820
};                                                                                                                     // 18821
                                                                                                                       // 18822
WalkontableTableRenderer.prototype.appendToTbody = function (TR) {                                                     // 18823
  this.TBODY.appendChild(TR);                                                                                          // 18824
  this.wtTable.tbodyChildrenLength++;                                                                                  // 18825
};                                                                                                                     // 18826
                                                                                                                       // 18827
WalkontableTableRenderer.prototype.getOrCreateTrForRow = function (rowIndex, currentTr) {                              // 18828
  var TR;                                                                                                              // 18829
                                                                                                                       // 18830
  if (rowIndex >= this.wtTable.tbodyChildrenLength) {                                                                  // 18831
    TR = this.createRow();                                                                                             // 18832
    this.appendToTbody(TR);                                                                                            // 18833
  } else if (rowIndex === 0) {                                                                                         // 18834
    TR = this.TBODY.firstChild;                                                                                        // 18835
  } else {                                                                                                             // 18836
    TR = currentTr.nextSibling; //http://jsperf.com/nextsibling-vs-indexed-childnodes                                  // 18837
  }                                                                                                                    // 18838
                                                                                                                       // 18839
  return TR;                                                                                                           // 18840
};                                                                                                                     // 18841
                                                                                                                       // 18842
WalkontableTableRenderer.prototype.createRow = function () {                                                           // 18843
  var TR = document.createElement('TR');                                                                               // 18844
  for (var visibleColIndex = 0; visibleColIndex < this.rowHeaderCount; visibleColIndex++) {                            // 18845
    TR.appendChild(document.createElement('TH'));                                                                      // 18846
  }                                                                                                                    // 18847
                                                                                                                       // 18848
  return TR;                                                                                                           // 18849
};                                                                                                                     // 18850
                                                                                                                       // 18851
WalkontableTableRenderer.prototype.renderRowHeader = function(row, col, TH){                                           // 18852
  TH.className = '';                                                                                                   // 18853
  TH.removeAttribute('style');                                                                                         // 18854
  this.rowHeaders[col](row, TH, col);                                                                                  // 18855
};                                                                                                                     // 18856
                                                                                                                       // 18857
WalkontableTableRenderer.prototype.renderRowHeaders = function (row, TR) {                                             // 18858
  for (var TH = TR.firstChild, visibleColIndex = 0; visibleColIndex < this.rowHeaderCount; visibleColIndex++) {        // 18859
                                                                                                                       // 18860
    //If the number of row headers increased we need to create TH or replace an existing TD node with TH               // 18861
    if (!TH) {                                                                                                         // 18862
      TH = document.createElement('TH');                                                                               // 18863
      TR.appendChild(TH);                                                                                              // 18864
    } else if (TH.nodeName == 'TD') {                                                                                  // 18865
      TH = this.utils.replaceTdWithTh(TH, TR);                                                                         // 18866
    }                                                                                                                  // 18867
                                                                                                                       // 18868
    this.renderRowHeader(row, visibleColIndex, TH);                                                                    // 18869
    TH = TH.nextSibling; //http://jsperf.com/nextsibling-vs-indexed-childnodes                                         // 18870
  }                                                                                                                    // 18871
};                                                                                                                     // 18872
                                                                                                                       // 18873
WalkontableTableRenderer.prototype.adjustAvailableNodes = function () {                                                // 18874
  //adjust COLGROUP                                                                                                    // 18875
  this.adjustColGroups();                                                                                              // 18876
                                                                                                                       // 18877
  //adjust THEAD                                                                                                       // 18878
  this.adjustThead();                                                                                                  // 18879
};                                                                                                                     // 18880
                                                                                                                       // 18881
WalkontableTableRenderer.prototype.renderColumnHeaders = function () {                                                 // 18882
  if (!this.columnHeaderCount) {                                                                                       // 18883
    return;                                                                                                            // 18884
  }                                                                                                                    // 18885
                                                                                                                       // 18886
  var columnCount = this.wtTable.getRenderedColumnsCount(),                                                            // 18887
    TR,                                                                                                                // 18888
    renderedColumnIndex;                                                                                               // 18889
                                                                                                                       // 18890
  for (var i = 0; i < this.columnHeaderCount; i++) {                                                                   // 18891
    TR = this.getTrForColumnHeaders(i);                                                                                // 18892
                                                                                                                       // 18893
    for (renderedColumnIndex = (-1) * this.rowHeaderCount; renderedColumnIndex < columnCount; renderedColumnIndex++) { // 18894
        var sourceCol = this.columnFilter.renderedToSource(renderedColumnIndex);                                       // 18895
        this.renderColumnHeader(i, sourceCol, TR.childNodes[renderedColumnIndex + this.rowHeaderCount]);               // 18896
      }                                                                                                                // 18897
  }                                                                                                                    // 18898
};                                                                                                                     // 18899
                                                                                                                       // 18900
WalkontableTableRenderer.prototype.adjustColGroups = function () {                                                     // 18901
  var columnCount = this.wtTable.getRenderedColumnsCount();                                                            // 18902
                                                                                                                       // 18903
  //adjust COLGROUP                                                                                                    // 18904
  while (this.wtTable.colgroupChildrenLength < columnCount + this.rowHeaderCount) {                                    // 18905
    this.COLGROUP.appendChild(document.createElement('COL'));                                                          // 18906
    this.wtTable.colgroupChildrenLength++;                                                                             // 18907
  }                                                                                                                    // 18908
  while (this.wtTable.colgroupChildrenLength > columnCount + this.rowHeaderCount) {                                    // 18909
    this.COLGROUP.removeChild(this.COLGROUP.lastChild);                                                                // 18910
    this.wtTable.colgroupChildrenLength--;                                                                             // 18911
  }                                                                                                                    // 18912
};                                                                                                                     // 18913
                                                                                                                       // 18914
WalkontableTableRenderer.prototype.adjustThead = function () {                                                         // 18915
  var columnCount = this.wtTable.getRenderedColumnsCount();                                                            // 18916
  var TR = this.THEAD.firstChild;                                                                                      // 18917
  if (this.columnHeaders.length) {                                                                                     // 18918
                                                                                                                       // 18919
    for (var i = 0, columnHeadersLength = this.columnHeaders.length; i < columnHeadersLength; i++) {                   // 18920
      TR = this.THEAD.childNodes[i];                                                                                   // 18921
      if (!TR) {                                                                                                       // 18922
        TR = document.createElement('TR');                                                                             // 18923
        this.THEAD.appendChild(TR);                                                                                    // 18924
      }                                                                                                                // 18925
      this.theadChildrenLength = TR.childNodes.length;                                                                 // 18926
      while (this.theadChildrenLength < columnCount + this.rowHeaderCount) {                                           // 18927
        TR.appendChild(document.createElement('TH'));                                                                  // 18928
        this.theadChildrenLength++;                                                                                    // 18929
      }                                                                                                                // 18930
      while (this.theadChildrenLength > columnCount + this.rowHeaderCount) {                                           // 18931
        TR.removeChild(TR.lastChild);                                                                                  // 18932
        this.theadChildrenLength--;                                                                                    // 18933
      }                                                                                                                // 18934
    }                                                                                                                  // 18935
                                                                                                                       // 18936
    var theadChildrenLength = this.THEAD.childNodes.length;                                                            // 18937
    if(theadChildrenLength > this.columnHeaders.length) {                                                              // 18938
      for(var i = this.columnHeaders.length; i < theadChildrenLength; i++ ) {                                          // 18939
        this.THEAD.removeChild(this.THEAD.lastChild);                                                                  // 18940
      }                                                                                                                // 18941
    }                                                                                                                  // 18942
  }                                                                                                                    // 18943
                                                                                                                       // 18944
  else if (TR) {                                                                                                       // 18945
    Handsontable.Dom.empty(TR);                                                                                        // 18946
  }                                                                                                                    // 18947
};                                                                                                                     // 18948
                                                                                                                       // 18949
WalkontableTableRenderer.prototype.getTrForColumnHeaders = function (index) {                                          // 18950
  var TR = this.THEAD.childNodes[index];                                                                               // 18951
//  if (this.rowHeaderCount) {                                                                                         // 18952
//    for(var i = 0; i < this.rowHeaderCount; i++) {                                                                   // 18953
//      this.renderRowHeaders(i - this.rowHeaderCount, TR);                                                            // 18954
//    }                                                                                                                // 18955
//  }                                                                                                                  // 18956
                                                                                                                       // 18957
  return TR;                                                                                                           // 18958
};                                                                                                                     // 18959
                                                                                                                       // 18960
WalkontableTableRenderer.prototype.renderColumnHeader = function (row, col, TH) {                                      // 18961
  TH.className = '';                                                                                                   // 18962
  TH.removeAttribute('style');                                                                                         // 18963
  return this.columnHeaders[row](col, TH, row);                                                                        // 18964
};                                                                                                                     // 18965
                                                                                                                       // 18966
WalkontableTableRenderer.prototype.renderColGroups = function () {                                                     // 18967
  for (var colIndex = 0; colIndex < this.wtTable.colgroupChildrenLength; colIndex++) {                                 // 18968
    if (colIndex < this.rowHeaderCount) {                                                                              // 18969
      Handsontable.Dom.addClass(this.COLGROUP.childNodes[colIndex], 'rowHeader');                                      // 18970
    }                                                                                                                  // 18971
    else {                                                                                                             // 18972
      Handsontable.Dom.removeClass(this.COLGROUP.childNodes[colIndex], 'rowHeader');                                   // 18973
    }                                                                                                                  // 18974
  }                                                                                                                    // 18975
};                                                                                                                     // 18976
                                                                                                                       // 18977
WalkontableTableRenderer.prototype.adjustColumns = function (TR, desiredCount) {                                       // 18978
  var count = TR.childNodes.length;                                                                                    // 18979
  while (count < desiredCount) {                                                                                       // 18980
    var TD = document.createElement('TD');                                                                             // 18981
    TR.appendChild(TD);                                                                                                // 18982
    count++;                                                                                                           // 18983
  }                                                                                                                    // 18984
  while (count > desiredCount) {                                                                                       // 18985
    TR.removeChild(TR.lastChild);                                                                                      // 18986
    count--;                                                                                                           // 18987
  }                                                                                                                    // 18988
};                                                                                                                     // 18989
                                                                                                                       // 18990
WalkontableTableRenderer.prototype.removeRedundantColumns = function (renderedColumnsCount) {                          // 18991
  while (this.wtTable.tbodyChildrenLength > renderedColumnsCount) {                                                    // 18992
    this.TBODY.removeChild(this.TBODY.lastChild);                                                                      // 18993
    this.wtTable.tbodyChildrenLength--;                                                                                // 18994
  }                                                                                                                    // 18995
};                                                                                                                     // 18996
                                                                                                                       // 18997
/*                                                                                                                     // 18998
 Helper functions, which does not have any side effects                                                                // 18999
 */                                                                                                                    // 19000
WalkontableTableRenderer.utils = {};                                                                                   // 19001
                                                                                                                       // 19002
WalkontableTableRenderer.utils.replaceTdWithTh = function (TD, TR) {                                                   // 19003
  var TH;                                                                                                              // 19004
  TH = document.createElement('TH');                                                                                   // 19005
  TR.insertBefore(TH, TD);                                                                                             // 19006
  TR.removeChild(TD);                                                                                                  // 19007
                                                                                                                       // 19008
  return TH;                                                                                                           // 19009
};                                                                                                                     // 19010
                                                                                                                       // 19011
WalkontableTableRenderer.utils.replaceThWithTd = function (TH, TR) {                                                   // 19012
  var TD = document.createElement('TD');                                                                               // 19013
  TR.insertBefore(TD, TH);                                                                                             // 19014
  TR.removeChild(TH);                                                                                                  // 19015
                                                                                                                       // 19016
  return TD;                                                                                                           // 19017
};                                                                                                                     // 19018
                                                                                                                       // 19019
                                                                                                                       // 19020
                                                                                                                       // 19021
function WalkontableViewport(instance) {                                                                               // 19022
  this.instance = instance;                                                                                            // 19023
  this.oversizedRows = [];                                                                                             // 19024
  this.oversizedCols = [];                                                                                             // 19025
                                                                                                                       // 19026
  var that = this;                                                                                                     // 19027
                                                                                                                       // 19028
  var eventManager = Handsontable.eventManager(instance);                                                              // 19029
  eventManager.addEventListener(window,'resize',function () {                                                          // 19030
    that.clientHeight = that.getWorkspaceHeight();                                                                     // 19031
  });                                                                                                                  // 19032
}                                                                                                                      // 19033
                                                                                                                       // 19034
WalkontableViewport.prototype.getWorkspaceHeight = function () {                                                       // 19035
  var scrollHandler = this.instance.wtScrollbars.vertical.scrollHandler;                                               // 19036
  if (scrollHandler === window) {                                                                                      // 19037
    return document.documentElement.clientHeight;                                                                      // 19038
  }                                                                                                                    // 19039
  else {                                                                                                               // 19040
    var elemHeight = Handsontable.Dom.outerHeight(scrollHandler);                                                      // 19041
    var height = (elemHeight > 0 && scrollHandler.clientHeight > 0) ? scrollHandler.clientHeight : Infinity; //returns height without DIV scrollbar
    return height;                                                                                                     // 19043
  }                                                                                                                    // 19044
};                                                                                                                     // 19045
                                                                                                                       // 19046
                                                                                                                       // 19047
WalkontableViewport.prototype.getWorkspaceWidth = function () {                                                        // 19048
  var width;                                                                                                           // 19049
                                                                                                                       // 19050
  var totalColumns = this.instance.getSetting("totalColumns");                                                         // 19051
  var scrollHandler = this.instance.wtScrollbars.horizontal.scrollHandler;                                             // 19052
                                                                                                                       // 19053
  if(Handsontable.freezeOverlays) {                                                                                    // 19054
    width = Math.min(document.documentElement.offsetWidth - this.getWorkspaceOffset().left, document.documentElement.offsetWidth);
  } else {                                                                                                             // 19056
    width = Math.min(this.getContainerFillWidth(), document.documentElement.offsetWidth - this.getWorkspaceOffset().left, document.documentElement.offsetWidth);
  }                                                                                                                    // 19058
                                                                                                                       // 19059
  if (scrollHandler === window && totalColumns > 0 && this.sumColumnWidths(0, totalColumns - 1) > width) {             // 19060
    //in case sum of column widths is higher than available stylesheet width, let's assume using the whole window      // 19061
    //otherwise continue below, which will allow stretching                                                            // 19062
    //this is used in `scroll_window.html`                                                                             // 19063
    //TODO test me                                                                                                     // 19064
    return document.documentElement.clientWidth;                                                                       // 19065
  }                                                                                                                    // 19066
                                                                                                                       // 19067
  if (scrollHandler !== window){                                                                                       // 19068
    var overflow = this.instance.wtScrollbars.horizontal.scrollHandler.style.overflow;                                 // 19069
                                                                                                                       // 19070
    if (overflow == "scroll" || overflow == "hidden" || overflow == "auto") {                                          // 19071
      //this is used in `scroll.html`                                                                                  // 19072
      //TODO test me                                                                                                   // 19073
      return Math.max(width, scrollHandler.clientWidth);                                                               // 19074
    }                                                                                                                  // 19075
  }                                                                                                                    // 19076
                                                                                                                       // 19077
  //this is used in `stretch.html`, `stretch_window.html`                                                              // 19078
  //TODO test me                                                                                                       // 19079
  return Math.max(width, Handsontable.Dom.outerWidth(this.instance.wtTable.TABLE));                                    // 19080
};                                                                                                                     // 19081
                                                                                                                       // 19082
WalkontableViewport.prototype.sumColumnWidths = function (from, length) {                                              // 19083
  var sum = 0;                                                                                                         // 19084
  while(from < length) {                                                                                               // 19085
    sum += this.instance.wtTable.getColumnWidth(from) || this.instance.wtSettings.defaultColumnWidth;                  // 19086
    from++;                                                                                                            // 19087
  }                                                                                                                    // 19088
  return sum;                                                                                                          // 19089
};                                                                                                                     // 19090
WalkontableViewport.prototype.getContainerFillWidth = function() {                                                     // 19091
                                                                                                                       // 19092
  if(this.containerWidth) {                                                                                            // 19093
    return this.containerWidth;                                                                                        // 19094
  }                                                                                                                    // 19095
                                                                                                                       // 19096
  var mainContainer = this.instance.wtTable.holder,                                                                    // 19097
      fillWidth,                                                                                                       // 19098
      dummyElement;                                                                                                    // 19099
                                                                                                                       // 19100
  while(mainContainer.parentNode != document.body && mainContainer.parentNode != null && mainContainer.className.indexOf('handsontable') === -1) {
    mainContainer = mainContainer.parentNode;                                                                          // 19102
  }                                                                                                                    // 19103
                                                                                                                       // 19104
  dummyElement = document.createElement("DIV");                                                                        // 19105
  dummyElement.style.width = "100%";                                                                                   // 19106
  dummyElement.style.height = "1px";                                                                                   // 19107
  mainContainer.appendChild(dummyElement);                                                                             // 19108
  fillWidth = dummyElement.offsetWidth;                                                                                // 19109
                                                                                                                       // 19110
  this.containerWidth = fillWidth;                                                                                     // 19111
                                                                                                                       // 19112
  mainContainer.removeChild(dummyElement);                                                                             // 19113
                                                                                                                       // 19114
  return fillWidth;                                                                                                    // 19115
};                                                                                                                     // 19116
                                                                                                                       // 19117
WalkontableViewport.prototype.getWorkspaceOffset = function () {                                                       // 19118
  return Handsontable.Dom.offset(this.instance.wtTable.TABLE);                                                         // 19119
};                                                                                                                     // 19120
                                                                                                                       // 19121
WalkontableViewport.prototype.getWorkspaceActualHeight = function () {                                                 // 19122
  return Handsontable.Dom.outerHeight(this.instance.wtTable.TABLE);                                                    // 19123
};                                                                                                                     // 19124
                                                                                                                       // 19125
WalkontableViewport.prototype.getWorkspaceActualWidth = function () {                                                  // 19126
  return Handsontable.Dom.outerWidth(this.instance.wtTable.TABLE) || Handsontable.Dom.outerWidth(this.instance.wtTable.TBODY) || Handsontable.Dom.outerWidth(this.instance.wtTable.THEAD); //IE8 reports 0 as <table> offsetWidth;
};                                                                                                                     // 19128
                                                                                                                       // 19129
WalkontableViewport.prototype.getColumnHeaderHeight = function () {                                                    // 19130
  if (isNaN(this.columnHeaderHeight)) {                                                                                // 19131
    this.columnHeaderHeight = Handsontable.Dom.outerHeight(this.instance.wtTable.THEAD);                               // 19132
  }                                                                                                                    // 19133
  return this.columnHeaderHeight;                                                                                      // 19134
};                                                                                                                     // 19135
                                                                                                                       // 19136
WalkontableViewport.prototype.getViewportHeight = function () {                                                        // 19137
                                                                                                                       // 19138
  var containerHeight = this.getWorkspaceHeight();                                                                     // 19139
                                                                                                                       // 19140
  if (containerHeight === Infinity) {                                                                                  // 19141
    return containerHeight;                                                                                            // 19142
  }                                                                                                                    // 19143
                                                                                                                       // 19144
  var columnHeaderHeight = this.getColumnHeaderHeight();                                                               // 19145
  if (columnHeaderHeight > 0) {                                                                                        // 19146
    containerHeight -= columnHeaderHeight;                                                                             // 19147
  }                                                                                                                    // 19148
                                                                                                                       // 19149
  return containerHeight;                                                                                              // 19150
                                                                                                                       // 19151
};                                                                                                                     // 19152
                                                                                                                       // 19153
WalkontableViewport.prototype.getRowHeaderWidth = function () {                                                        // 19154
  if (this.instance.cloneSource) {                                                                                     // 19155
    return this.instance.cloneSource.wtViewport.getRowHeaderWidth();                                                   // 19156
  }                                                                                                                    // 19157
  if (isNaN(this.rowHeaderWidth)) {                                                                                    // 19158
    var rowHeaders = this.instance.getSetting('rowHeaders');                                                           // 19159
    if (rowHeaders.length) {                                                                                           // 19160
      var TH = this.instance.wtTable.TABLE.querySelector('TH');                                                        // 19161
      this.rowHeaderWidth = 0;                                                                                         // 19162
      for (var i = 0, ilen = rowHeaders.length; i < ilen; i++) {                                                       // 19163
        if (TH) {                                                                                                      // 19164
          this.rowHeaderWidth += Handsontable.Dom.outerWidth(TH);                                                      // 19165
          TH = TH.nextSibling;                                                                                         // 19166
        }                                                                                                              // 19167
        else {                                                                                                         // 19168
          this.rowHeaderWidth += 50; //yes this is a cheat but it worked like that before, just taking assumption from CSS instead of measuring. TODO: proper fix
        }                                                                                                              // 19170
      }                                                                                                                // 19171
    }                                                                                                                  // 19172
    else {                                                                                                             // 19173
      this.rowHeaderWidth = 0;                                                                                         // 19174
    }                                                                                                                  // 19175
  }                                                                                                                    // 19176
  return this.rowHeaderWidth;                                                                                          // 19177
};                                                                                                                     // 19178
                                                                                                                       // 19179
// Viewport width = Workspace width - Row Headers width                                                                // 19180
WalkontableViewport.prototype.getViewportWidth = function () {                                                         // 19181
  var containerWidth = this.getWorkspaceWidth();                                                                       // 19182
                                                                                                                       // 19183
  if (containerWidth === Infinity) {                                                                                   // 19184
    return containerWidth;                                                                                             // 19185
  }                                                                                                                    // 19186
                                                                                                                       // 19187
  var rowHeaderWidth = this.getRowHeaderWidth();                                                                       // 19188
  if (rowHeaderWidth > 0) {                                                                                            // 19189
    return containerWidth - rowHeaderWidth;                                                                            // 19190
  }                                                                                                                    // 19191
  else {                                                                                                               // 19192
    return containerWidth;                                                                                             // 19193
  }                                                                                                                    // 19194
};                                                                                                                     // 19195
                                                                                                                       // 19196
/**                                                                                                                    // 19197
 * Creates:                                                                                                            // 19198
 *  - rowsRenderCalculator (before draw, to qualify rows for rendering)                                                // 19199
 *  - rowsVisibleCalculator (after draw, to measure which rows are actually visible)                                   // 19200
 * @returns {WalkontableViewportRowsCalculator}                                                                        // 19201
 */                                                                                                                    // 19202
WalkontableViewport.prototype.createRowsCalculator = function (visible) {                                              // 19203
  this.rowHeaderWidth = NaN;                                                                                           // 19204
                                                                                                                       // 19205
  var height;                                                                                                          // 19206
  if (this.instance.wtSettings.settings.renderAllRows) {                                                               // 19207
    height = Infinity;                                                                                                 // 19208
  }                                                                                                                    // 19209
  else {                                                                                                               // 19210
    height = this.getViewportHeight();                                                                                 // 19211
  }                                                                                                                    // 19212
                                                                                                                       // 19213
  var pos = this.instance.wtScrollbars.vertical.getScrollPosition() - this.instance.wtScrollbars.vertical.getTableParentOffset();
  if (pos < 0) {                                                                                                       // 19215
    pos = 0;                                                                                                           // 19216
  }                                                                                                                    // 19217
                                                                                                                       // 19218
  var fixedRowsTop = this.instance.getSetting('fixedRowsTop');                                                         // 19219
  if(fixedRowsTop) {                                                                                                   // 19220
    var fixedRowsHeight = this.instance.wtScrollbars.vertical.sumCellSizes(0, fixedRowsTop);                           // 19221
    pos += fixedRowsHeight;                                                                                            // 19222
    height -= fixedRowsHeight;                                                                                         // 19223
  }                                                                                                                    // 19224
                                                                                                                       // 19225
  var that = this;                                                                                                     // 19226
  return new WalkontableViewportRowsCalculator(                                                                        // 19227
    height,                                                                                                            // 19228
    pos,                                                                                                               // 19229
    this.instance.getSetting('totalRows'),                                                                             // 19230
    function(sourceRow) {                                                                                              // 19231
      return that.instance.wtTable.getRowHeight(sourceRow)                                                             // 19232
    },                                                                                                                 // 19233
    visible ? null : this.instance.wtSettings.settings.viewportRowCalculatorOverride,                                  // 19234
    visible ? true : false                                                                                             // 19235
  );                                                                                                                   // 19236
};                                                                                                                     // 19237
                                                                                                                       // 19238
/**                                                                                                                    // 19239
 * Creates:                                                                                                            // 19240
 *  - columnsRenderCalculator (before draw, to qualify columns for rendering)                                          // 19241
 *  - columnsVisibleCalculator (after draw, to measure which columns are actually visible)                             // 19242
 * @returns {WalkontableViewportRowsCalculator}                                                                        // 19243
 */                                                                                                                    // 19244
WalkontableViewport.prototype.createColumnsCalculator = function (visible) {                                           // 19245
  this.columnHeaderHeight = NaN;                                                                                       // 19246
                                                                                                                       // 19247
  var width = this.getViewportWidth();                                                                                 // 19248
                                                                                                                       // 19249
  var pos = this.instance.wtScrollbars.horizontal.getScrollPosition() - this.instance.wtScrollbars.vertical.getTableParentOffset();
  if (pos < 0) {                                                                                                       // 19251
    pos = 0;                                                                                                           // 19252
  }                                                                                                                    // 19253
                                                                                                                       // 19254
  var fixedColumnsLeft = this.instance.getSetting('fixedColumnsLeft');                                                 // 19255
  if(fixedColumnsLeft) {                                                                                               // 19256
    var fixedColumnsWidth = this.instance.wtScrollbars.horizontal.sumCellSizes(0, fixedColumnsLeft);                   // 19257
    pos += fixedColumnsWidth;                                                                                          // 19258
    width -= fixedColumnsWidth;                                                                                        // 19259
  }                                                                                                                    // 19260
                                                                                                                       // 19261
  var that = this;                                                                                                     // 19262
  return new WalkontableViewportColumnsCalculator(                                                                     // 19263
    width,                                                                                                             // 19264
    pos,                                                                                                               // 19265
    this.instance.getSetting('totalColumns'),                                                                          // 19266
    function (sourceCol) {                                                                                             // 19267
      return that.instance.wtTable.getColumnWidth(sourceCol);                                                          // 19268
    },                                                                                                                 // 19269
    visible ? null : this.instance.wtSettings.settings.viewportColumnCalculatorOverride,                               // 19270
    visible ? true : false,                                                                                            // 19271
    this.instance.getSetting('stretchH')                                                                               // 19272
  )                                                                                                                    // 19273
};                                                                                                                     // 19274
                                                                                                                       // 19275
                                                                                                                       // 19276
/**                                                                                                                    // 19277
 * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and cols should be rendered)
 * @param fastDraw {Boolean} If TRUE, will try to avoid full redraw and only update the border positions. If FALSE or UNDEFINED, will perform a full redraw
 */                                                                                                                    // 19280
WalkontableViewport.prototype.createRenderCalculators = function (fastDraw) {                                          // 19281
  if (fastDraw) {                                                                                                      // 19282
    var proposedRowsVisibleCalculator = this.createRowsCalculator(true);                                               // 19283
    var proposedColumnsVisibleCalculator = this.createColumnsCalculator(true);                                         // 19284
    if (!(this.areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) && this.areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator) ) ) {
      fastDraw = false;                                                                                                // 19286
    }                                                                                                                  // 19287
  }                                                                                                                    // 19288
                                                                                                                       // 19289
  if(!fastDraw) {                                                                                                      // 19290
    this.rowsRenderCalculator = this.createRowsCalculator();                                                           // 19291
    this.columnsRenderCalculator = this.createColumnsCalculator();                                                     // 19292
  }                                                                                                                    // 19293
                                                                                                                       // 19294
  this.rowsVisibleCalculator = null; //delete temporarily to make sure that renderers always use rowsRenderCalculator, not rowsVisibleCalculator
  this.columnsVisibleCalculator = null;                                                                                // 19296
                                                                                                                       // 19297
  return fastDraw;                                                                                                     // 19298
};                                                                                                                     // 19299
                                                                                                                       // 19300
/**                                                                                                                    // 19301
 * Creates rowsVisibleCalculator and columnsVisibleCalculator (after draw, to determine what are the actually visible rows and columns)
 */                                                                                                                    // 19303
WalkontableViewport.prototype.createVisibleCalculators = function () {                                                 // 19304
  this.rowsVisibleCalculator = this.createRowsCalculator(true);                                                        // 19305
  this.columnsVisibleCalculator = this.createColumnsCalculator(true);                                                  // 19306
};                                                                                                                     // 19307
                                                                                                                       // 19308
/**                                                                                                                    // 19309
 * Returns information whether proposedRowsVisibleCalculator viewport                                                  // 19310
 * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator)                                 // 19311
 *                                                                                                                     // 19312
 * Returns TRUE if all proposed visible rows are already rendered (meaning: redraw is not needed)                      // 19313
 * Returns FALSE if at least one proposed visible row is not already rendered (meaning: redraw is needed)              // 19314
 *                                                                                                                     // 19315
 * @returns {boolean}                                                                                                  // 19316
 */                                                                                                                    // 19317
WalkontableViewport.prototype.areAllProposedVisibleRowsAlreadyRendered = function (proposedRowsVisibleCalculator) {    // 19318
  if (this.rowsVisibleCalculator) {                                                                                    // 19319
    if (proposedRowsVisibleCalculator.startRow < this.rowsRenderCalculator.startRow || (proposedRowsVisibleCalculator.startRow === this.rowsRenderCalculator.startRow && proposedRowsVisibleCalculator.startRow > 0)) {
      return false;                                                                                                    // 19321
    }                                                                                                                  // 19322
    else if (proposedRowsVisibleCalculator.endRow > this.rowsRenderCalculator.endRow || (proposedRowsVisibleCalculator.endRow === this.rowsRenderCalculator.endRow && proposedRowsVisibleCalculator.endRow < this.instance.getSetting('totalRows') - 1)) {
      return false;                                                                                                    // 19324
    }                                                                                                                  // 19325
    else {                                                                                                             // 19326
      return true;                                                                                                     // 19327
    }                                                                                                                  // 19328
  }                                                                                                                    // 19329
  return false;                                                                                                        // 19330
};                                                                                                                     // 19331
                                                                                                                       // 19332
/**                                                                                                                    // 19333
 * Returns information whether proposedColumnsVisibleCalculator viewport                                               // 19334
 * is contained inside column rendered in previous draw (cached in columnsRenderCalculator)                            // 19335
 *                                                                                                                     // 19336
 * Returns TRUE if all proposed visible columns are already rendered (meaning: redraw is not needed)                   // 19337
 * Returns FALSE if at least one proposed visible column is not already rendered (meaning: redraw is needed)           // 19338
 *                                                                                                                     // 19339
 * @returns {boolean}                                                                                                  // 19340
 */                                                                                                                    // 19341
WalkontableViewport.prototype.areAllProposedVisibleColumnsAlreadyRendered = function (proposedColumnsVisibleCalculator) {
  if (this.columnsVisibleCalculator) {                                                                                 // 19343
    if (proposedColumnsVisibleCalculator.startColumn < this.columnsRenderCalculator.startColumn || (proposedColumnsVisibleCalculator.startColumn === this.columnsRenderCalculator.startColumn && proposedColumnsVisibleCalculator.startColumn > 0)) {
      return false;                                                                                                    // 19345
    }                                                                                                                  // 19346
    else if (proposedColumnsVisibleCalculator.endColumn > this.columnsRenderCalculator.endColumn || (proposedColumnsVisibleCalculator.endColumn === this.columnsRenderCalculator.endColumn && proposedColumnsVisibleCalculator.endColumn < this.instance.getSetting('totalColumns') - 1)) {
      return false;                                                                                                    // 19348
    }                                                                                                                  // 19349
    else {                                                                                                             // 19350
      return true;                                                                                                     // 19351
    }                                                                                                                  // 19352
  }                                                                                                                    // 19353
  return false;                                                                                                        // 19354
};                                                                                                                     // 19355
                                                                                                                       // 19356
function WalkontableViewportColumnsCalculator (width, scrollOffset, totalColumns, columnWidthFn, overrideFn, onlyFullyVisible, stretchH) {
  this.scrollOffset = scrollOffset;                                                                                    // 19358
  this.startColumn = null;                                                                                             // 19359
  this.endColumn = null;                                                                                               // 19360
  this.startPosition = null;                                                                                           // 19361
  this.count = 0;                                                                                                      // 19362
  this.stretchAllRatio = 0;                                                                                            // 19363
  this.stretchLastWidth = 0;                                                                                           // 19364
  this.stretch = stretchH;                                                                                             // 19365
                                                                                                                       // 19366
                                                                                                                       // 19367
  var i;                                                                                                               // 19368
  var sum = 0;                                                                                                         // 19369
  var columnWidth;                                                                                                     // 19370
  var needReverse = true;                                                                                              // 19371
  var defaultColumnWidth = 50;                                                                                         // 19372
  var startPositions = [];                                                                                             // 19373
                                                                                                                       // 19374
  var ratio = 1;                                                                                                       // 19375
                                                                                                                       // 19376
  var getColumnWidth = function (i) {                                                                                  // 19377
    ratio = ratio || 1;                                                                                                // 19378
    var width = columnWidthFn(i);                                                                                      // 19379
    if (width === undefined) {                                                                                         // 19380
      width = defaultColumnWidth ;                                                                                     // 19381
    }                                                                                                                  // 19382
    return width;                                                                                                      // 19383
  };                                                                                                                   // 19384
                                                                                                                       // 19385
  this.refreshStretching = function (width) {                                                                          // 19386
    var columnWidth;                                                                                                   // 19387
    var sumAll = 0;                                                                                                    // 19388
                                                                                                                       // 19389
    for(var i = 0; i < totalColumns; i++) {                                                                            // 19390
      columnWidth = getColumnWidth(i);                                                                                 // 19391
      sumAll +=columnWidth;                                                                                            // 19392
    }                                                                                                                  // 19393
                                                                                                                       // 19394
    var remainingSize = sumAll - width;                                                                                // 19395
    if (this.stretch === 'all' && remainingSize < 0){                                                                  // 19396
      this.stretchAllRatio = width / sumAll;                                                                           // 19397
    } else if (this.stretch === 'last' && width !== Infinity) {                                                        // 19398
      this.stretchLastWidth = -remainingSize + getColumnWidth(totalColumns-1);                                         // 19399
    }                                                                                                                  // 19400
  };                                                                                                                   // 19401
                                                                                                                       // 19402
                                                                                                                       // 19403
  for (i = 0; i< totalColumns; i++) {                                                                                  // 19404
    columnWidth = getColumnWidth(i);                                                                                   // 19405
                                                                                                                       // 19406
    if (sum <= scrollOffset && !onlyFullyVisible){                                                                     // 19407
      this.startColumn = i;                                                                                            // 19408
    }                                                                                                                  // 19409
                                                                                                                       // 19410
    if (sum >= scrollOffset && sum + columnWidth <= scrollOffset + width) {                                            // 19411
      if (this.startColumn == null) {                                                                                  // 19412
        this.startColumn = i;                                                                                          // 19413
      }                                                                                                                // 19414
      this.endColumn = i;                                                                                              // 19415
    }                                                                                                                  // 19416
    startPositions.push(sum);                                                                                          // 19417
    sum += columnWidth;                                                                                                // 19418
    if(!onlyFullyVisible) {                                                                                            // 19419
      this.endColumn = i;                                                                                              // 19420
    }                                                                                                                  // 19421
                                                                                                                       // 19422
    if(sum >= scrollOffset + width) {                                                                                  // 19423
      needReverse = false;                                                                                             // 19424
      break;                                                                                                           // 19425
    }                                                                                                                  // 19426
  }                                                                                                                    // 19427
                                                                                                                       // 19428
  if (this.endColumn == totalColumns - 1 && needReverse) {                                                             // 19429
    this.startColumn = this.endColumn;                                                                                 // 19430
    while(this.startColumn > 0) {                                                                                      // 19431
      var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];           // 19432
      if (viewportSum <= width || !onlyFullyVisible) {                                                                 // 19433
        this.startColumn--;                                                                                            // 19434
      }                                                                                                                // 19435
      if (viewportSum > width) {                                                                                       // 19436
        break;                                                                                                         // 19437
      }                                                                                                                // 19438
    }                                                                                                                  // 19439
  }                                                                                                                    // 19440
                                                                                                                       // 19441
  if (this.startColumn !== null && overrideFn){                                                                        // 19442
    overrideFn(this);                                                                                                  // 19443
  }                                                                                                                    // 19444
                                                                                                                       // 19445
  this.startPosition = startPositions[this.startColumn];                                                               // 19446
  if (this.startPosition == void 0) {                                                                                  // 19447
    this.startPosition = null;                                                                                         // 19448
  }                                                                                                                    // 19449
                                                                                                                       // 19450
  if (this.startColumn != null) {                                                                                      // 19451
    this.count = this.endColumn - this.startColumn + 1;                                                                // 19452
  }                                                                                                                    // 19453
}                                                                                                                      // 19454
                                                                                                                       // 19455
                                                                                                                       // 19456
/**                                                                                                                    // 19457
 * Viewport calculator constructor. Calculates indexes of rows to render OR rows that are visible.                     // 19458
 * To redo the calculation, you need to create a new calculator.                                                       // 19459
 *                                                                                                                     // 19460
 * Object properties:                                                                                                  // 19461
 *   this.scrollOffset - position of vertical scroll (in px)                                                           // 19462
 *   this.startRow - index of the first rendered/visible row (can be overwritten using overrideFn)                     // 19463
 *   this.startPosition - position of the first rendered/visible row (in px)                                           // 19464
 *   this.endRow - index of the last rendered/visible row (can be overwritten using overrideFn)                        // 19465
 *   this.count - number of rendered/visible rows                                                                      // 19466
 *                                                                                                                     // 19467
 * @param height - height of the viewport                                                                              // 19468
 * @param scrollOffset - current vertical scroll position of the viewport                                              // 19469
 * @param totalRows - total number of rows                                                                             // 19470
 * @param rowHeightFn - function that returns the height of the row at a given index (in px)                           // 19471
 * @param overrideFn - function that changes calculated this.startRow, this.endRow (used by mergeCells.js plugin)      // 19472
 * @param onlyFullyVisible {bool} - if TRUE, only startRow and endRow will be indexes of rows that are FULLY in viewport
 * @constructor                                                                                                        // 19474
 */                                                                                                                    // 19475
function WalkontableViewportRowsCalculator(height, scrollOffset, totalRows, rowHeightFn, overrideFn, onlyFullyVisible) {
  this.scrollOffset = scrollOffset;                                                                                    // 19477
  this.startRow = null;                                                                                                // 19478
  this.startPosition = null;                                                                                           // 19479
  this.endRow = null;                                                                                                  // 19480
  this.count = 0;                                                                                                      // 19481
  var sum = 0;                                                                                                         // 19482
  var rowHeight;                                                                                                       // 19483
  var needReverse = true;                                                                                              // 19484
  var defaultRowHeight = 23;                                                                                           // 19485
  var startPositions = [];                                                                                             // 19486
  for (var i = 0; i < totalRows; i++) {                                                                                // 19487
    rowHeight = rowHeightFn(i);                                                                                        // 19488
    if (rowHeight === undefined) {                                                                                     // 19489
      rowHeight = defaultRowHeight;                                                                                    // 19490
    }                                                                                                                  // 19491
    if (sum <= scrollOffset && !onlyFullyVisible) {                                                                    // 19492
      this.startRow = i;                                                                                               // 19493
    }                                                                                                                  // 19494
    if (sum >= scrollOffset && sum + rowHeight <= scrollOffset + height) {                                             // 19495
      if (this.startRow == null) {                                                                                     // 19496
        this.startRow = i;                                                                                             // 19497
      }                                                                                                                // 19498
      this.endRow = i;                                                                                                 // 19499
    }                                                                                                                  // 19500
    startPositions.push(sum);                                                                                          // 19501
    sum += rowHeight;                                                                                                  // 19502
    if(!onlyFullyVisible) {                                                                                            // 19503
      this.endRow = i;                                                                                                 // 19504
    }                                                                                                                  // 19505
    if (sum >= scrollOffset + height) {                                                                                // 19506
      needReverse = false;                                                                                             // 19507
      break;                                                                                                           // 19508
    }                                                                                                                  // 19509
  }                                                                                                                    // 19510
                                                                                                                       // 19511
  //If the rendering has reached the last row and there is still some space available in the viewport, we need to render in reverse in order to fill the whole viewport with rows
  if (this.endRow == totalRows - 1 && needReverse) {                                                                   // 19513
    this.startRow = this.endRow;                                                                                       // 19514
    while(this.startRow > 0) {                                                                                         // 19515
      var viewportSum = startPositions[this.endRow] + rowHeight - startPositions[this.startRow - 1]; //rowHeight is the height of the last row
      if (viewportSum <= height || !onlyFullyVisible)                                                                  // 19517
      {                                                                                                                // 19518
        this.startRow--;                                                                                               // 19519
      }                                                                                                                // 19520
      if (viewportSum >= height)                                                                                       // 19521
      {                                                                                                                // 19522
       break;                                                                                                          // 19523
      }                                                                                                                // 19524
    }                                                                                                                  // 19525
  }                                                                                                                    // 19526
                                                                                                                       // 19527
  if (this.startRow !== null && overrideFn) {                                                                          // 19528
    overrideFn(this);                                                                                                  // 19529
  }                                                                                                                    // 19530
                                                                                                                       // 19531
  this.startPosition = startPositions[this.startRow];                                                                  // 19532
  if (this.startPosition == void 0) {                                                                                  // 19533
    this.startPosition = null;                                                                                         // 19534
  }                                                                                                                    // 19535
                                                                                                                       // 19536
  if (this.startRow != null) {                                                                                         // 19537
    this.count = this.endRow - this.startRow + 1;                                                                      // 19538
  }                                                                                                                    // 19539
}                                                                                                                      // 19540
                                                                                                                       // 19541
if (window.jQuery) {                                                                                                   // 19542
  (function (window, $, Handsontable) {                                                                                // 19543
    $.fn.handsontable = function (action) {                                                                            // 19544
      var i                                                                                                            // 19545
        , ilen                                                                                                         // 19546
        , args                                                                                                         // 19547
        , output                                                                                                       // 19548
        , userSettings                                                                                                 // 19549
        , $this = this.first() // Use only first element from list                                                     // 19550
        , instance = $this.data('handsontable');                                                                       // 19551
                                                                                                                       // 19552
      // Init case                                                                                                     // 19553
      if (typeof action !== 'string') {                                                                                // 19554
        userSettings = action || {};                                                                                   // 19555
        if (instance) {                                                                                                // 19556
          instance.updateSettings(userSettings);                                                                       // 19557
        }                                                                                                              // 19558
        else {                                                                                                         // 19559
          instance = new Handsontable.Core($this[0], userSettings);                                                    // 19560
          $this.data('handsontable', instance);                                                                        // 19561
          instance.init();                                                                                             // 19562
        }                                                                                                              // 19563
                                                                                                                       // 19564
        return $this;                                                                                                  // 19565
      }                                                                                                                // 19566
      // Action case                                                                                                   // 19567
      else {                                                                                                           // 19568
        args = [];                                                                                                     // 19569
        if (arguments.length > 1) {                                                                                    // 19570
          for (i = 1, ilen = arguments.length; i < ilen; i++) {                                                        // 19571
            args.push(arguments[i]);                                                                                   // 19572
          }                                                                                                            // 19573
        }                                                                                                              // 19574
                                                                                                                       // 19575
        if (instance) {                                                                                                // 19576
          if (typeof instance[action] !== 'undefined') {                                                               // 19577
            output = instance[action].apply(instance, args);                                                           // 19578
                                                                                                                       // 19579
            if (action === 'destroy'){                                                                                 // 19580
              $this.removeData();                                                                                      // 19581
            }                                                                                                          // 19582
          }                                                                                                            // 19583
          else {                                                                                                       // 19584
            throw new Error('Handsontable do not provide action: ' + action);                                          // 19585
          }                                                                                                            // 19586
        }                                                                                                              // 19587
                                                                                                                       // 19588
        return output;                                                                                                 // 19589
      }                                                                                                                // 19590
    };                                                                                                                 // 19591
  })(window, jQuery, Handsontable);                                                                                    // 19592
}                                                                                                                      // 19593
                                                                                                                       // 19594
                                                                                                                       // 19595
                                                                                                                       // 19596
})(window, Handsontable);                                                                                              // 19597
                                                                                                                       // 19598
/*!                                                                                                                    // 19599
 * numeral.js                                                                                                          // 19600
 * version : 1.5.3                                                                                                     // 19601
 * author : Adam Draper                                                                                                // 19602
 * license : MIT                                                                                                       // 19603
 * http://adamwdraper.github.com/Numeral-js/                                                                           // 19604
 */                                                                                                                    // 19605
                                                                                                                       // 19606
(function () {                                                                                                         // 19607
                                                                                                                       // 19608
    /************************************                                                                              // 19609
        Constants                                                                                                      // 19610
    ************************************/                                                                              // 19611
                                                                                                                       // 19612
    var numeral,                                                                                                       // 19613
        VERSION = '1.5.3',                                                                                             // 19614
        // internal storage for language config files                                                                  // 19615
        languages = {},                                                                                                // 19616
        currentLanguage = 'en',                                                                                        // 19617
        zeroFormat = null,                                                                                             // 19618
        defaultFormat = '0,0',                                                                                         // 19619
        // check for nodeJS                                                                                            // 19620
        hasModule = (typeof module !== 'undefined' && module.exports);                                                 // 19621
                                                                                                                       // 19622
                                                                                                                       // 19623
    /************************************                                                                              // 19624
        Constructors                                                                                                   // 19625
    ************************************/                                                                              // 19626
                                                                                                                       // 19627
                                                                                                                       // 19628
    // Numeral prototype object                                                                                        // 19629
    function Numeral (number) {                                                                                        // 19630
        this._value = number;                                                                                          // 19631
    }                                                                                                                  // 19632
                                                                                                                       // 19633
    /**                                                                                                                // 19634
     * Implementation of toFixed() that treats floats more like decimals                                               // 19635
     *                                                                                                                 // 19636
     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present                                   // 19637
     * problems for accounting- and finance-related software.                                                          // 19638
     */                                                                                                                // 19639
    function toFixed (value, precision, roundingFunction, optionals) {                                                 // 19640
        var power = Math.pow(10, precision),                                                                           // 19641
            optionalsRegExp,                                                                                           // 19642
            output;                                                                                                    // 19643
                                                                                                                       // 19644
        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);                         // 19645
        // Multiply up by precision, round accurately, then divide and use native toFixed():                           // 19646
        output = (roundingFunction(value * power) / power).toFixed(precision);                                         // 19647
                                                                                                                       // 19648
        if (optionals) {                                                                                               // 19649
            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');                                                   // 19650
            output = output.replace(optionalsRegExp, '');                                                              // 19651
        }                                                                                                              // 19652
                                                                                                                       // 19653
        return output;                                                                                                 // 19654
    }                                                                                                                  // 19655
                                                                                                                       // 19656
    /************************************                                                                              // 19657
        Formatting                                                                                                     // 19658
    ************************************/                                                                              // 19659
                                                                                                                       // 19660
    // determine what type of formatting we need to do                                                                 // 19661
    function formatNumeral (n, format, roundingFunction) {                                                             // 19662
        var output;                                                                                                    // 19663
                                                                                                                       // 19664
        // figure out what kind of format we are dealing with                                                          // 19665
        if (format.indexOf('$') > -1) { // currency!!!!!                                                               // 19666
            output = formatCurrency(n, format, roundingFunction);                                                      // 19667
        } else if (format.indexOf('%') > -1) { // percentage                                                           // 19668
            output = formatPercentage(n, format, roundingFunction);                                                    // 19669
        } else if (format.indexOf(':') > -1) { // time                                                                 // 19670
            output = formatTime(n, format);                                                                            // 19671
        } else { // plain ol' numbers or bytes                                                                         // 19672
            output = formatNumber(n._value, format, roundingFunction);                                                 // 19673
        }                                                                                                              // 19674
                                                                                                                       // 19675
        // return string                                                                                               // 19676
        return output;                                                                                                 // 19677
    }                                                                                                                  // 19678
                                                                                                                       // 19679
    // revert to number                                                                                                // 19680
    function unformatNumeral (n, string) {                                                                             // 19681
        var stringOriginal = string,                                                                                   // 19682
            thousandRegExp,                                                                                            // 19683
            millionRegExp,                                                                                             // 19684
            billionRegExp,                                                                                             // 19685
            trillionRegExp,                                                                                            // 19686
            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],                                               // 19687
            bytesMultiplier = false,                                                                                   // 19688
            power;                                                                                                     // 19689
                                                                                                                       // 19690
        if (string.indexOf(':') > -1) {                                                                                // 19691
            n._value = unformatTime(string);                                                                           // 19692
        } else {                                                                                                       // 19693
            if (string === zeroFormat) {                                                                               // 19694
                n._value = 0;                                                                                          // 19695
            } else {                                                                                                   // 19696
                if (languages[currentLanguage].delimiters.decimal !== '.') {                                           // 19697
                    string = string.replace(/\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');     // 19698
                }                                                                                                      // 19699
                                                                                                                       // 19700
                // see if abbreviations are there so that we can multiply to the correct number                        // 19701
                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                                                                                                                       // 19706
                // see if bytes are there so that we can multiply to the correct number                                // 19707
                for (power = 0; power <= suffixes.length; power++) {                                                   // 19708
                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;      // 19709
                                                                                                                       // 19710
                    if (bytesMultiplier) {                                                                             // 19711
                        break;                                                                                         // 19712
                    }                                                                                                  // 19713
                }                                                                                                      // 19714
                                                                                                                       // 19715
                // do some math to create our number                                                                   // 19716
                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\.]+/g, ''));
                                                                                                                       // 19718
                // round if we are talking about bytes                                                                 // 19719
                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;                                         // 19720
            }                                                                                                          // 19721
        }                                                                                                              // 19722
        return n._value;                                                                                               // 19723
    }                                                                                                                  // 19724
                                                                                                                       // 19725
    function formatCurrency (n, format, roundingFunction) {                                                            // 19726
        var symbolIndex = format.indexOf('$'),                                                                         // 19727
            openParenIndex = format.indexOf('('),                                                                      // 19728
            minusSignIndex = format.indexOf('-'),                                                                      // 19729
            space = '',                                                                                                // 19730
            spliceIndex,                                                                                               // 19731
            output;                                                                                                    // 19732
                                                                                                                       // 19733
        // check for space before or after currency                                                                    // 19734
        if (format.indexOf(' $') > -1) {                                                                               // 19735
            space = ' ';                                                                                               // 19736
            format = format.replace(' $', '');                                                                         // 19737
        } else if (format.indexOf('$ ') > -1) {                                                                        // 19738
            space = ' ';                                                                                               // 19739
            format = format.replace('$ ', '');                                                                         // 19740
        } else {                                                                                                       // 19741
            format = format.replace('$', '');                                                                          // 19742
        }                                                                                                              // 19743
                                                                                                                       // 19744
        // format the number                                                                                           // 19745
        output = formatNumber(n._value, format, roundingFunction);                                                     // 19746
                                                                                                                       // 19747
        // position the symbol                                                                                         // 19748
        if (symbolIndex <= 1) {                                                                                        // 19749
            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {                                                // 19750
                output = output.split('');                                                                             // 19751
                spliceIndex = 1;                                                                                       // 19752
                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){                                     // 19753
                    // the symbol appears before the "(" or "-"                                                        // 19754
                    spliceIndex = 0;                                                                                   // 19755
                }                                                                                                      // 19756
                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);                     // 19757
                output = output.join('');                                                                              // 19758
            } else {                                                                                                   // 19759
                output = languages[currentLanguage].currency.symbol + space + output;                                  // 19760
            }                                                                                                          // 19761
        } else {                                                                                                       // 19762
            if (output.indexOf(')') > -1) {                                                                            // 19763
                output = output.split('');                                                                             // 19764
                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);                              // 19765
                output = output.join('');                                                                              // 19766
            } else {                                                                                                   // 19767
                output = output + space + languages[currentLanguage].currency.symbol;                                  // 19768
            }                                                                                                          // 19769
        }                                                                                                              // 19770
                                                                                                                       // 19771
        return output;                                                                                                 // 19772
    }                                                                                                                  // 19773
                                                                                                                       // 19774
    function formatPercentage (n, format, roundingFunction) {                                                          // 19775
        var space = '',                                                                                                // 19776
            output,                                                                                                    // 19777
            value = n._value * 100;                                                                                    // 19778
                                                                                                                       // 19779
        // check for space before %                                                                                    // 19780
        if (format.indexOf(' %') > -1) {                                                                               // 19781
            space = ' ';                                                                                               // 19782
            format = format.replace(' %', '');                                                                         // 19783
        } else {                                                                                                       // 19784
            format = format.replace('%', '');                                                                          // 19785
        }                                                                                                              // 19786
                                                                                                                       // 19787
        output = formatNumber(value, format, roundingFunction);                                                        // 19788
                                                                                                                       // 19789
        if (output.indexOf(')') > -1 ) {                                                                               // 19790
            output = output.split('');                                                                                 // 19791
            output.splice(-1, 0, space + '%');                                                                         // 19792
            output = output.join('');                                                                                  // 19793
        } else {                                                                                                       // 19794
            output = output + space + '%';                                                                             // 19795
        }                                                                                                              // 19796
                                                                                                                       // 19797
        return output;                                                                                                 // 19798
    }                                                                                                                  // 19799
                                                                                                                       // 19800
    function formatTime (n) {                                                                                          // 19801
        var hours = Math.floor(n._value/60/60),                                                                        // 19802
            minutes = Math.floor((n._value - (hours * 60 * 60))/60),                                                   // 19803
            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));                                       // 19804
        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
    }                                                                                                                  // 19806
                                                                                                                       // 19807
    function unformatTime (string) {                                                                                   // 19808
        var timeArray = string.split(':'),                                                                             // 19809
            seconds = 0;                                                                                               // 19810
        // turn hours and minutes into seconds and add them all up                                                     // 19811
        if (timeArray.length === 3) {                                                                                  // 19812
            // hours                                                                                                   // 19813
            seconds = seconds + (Number(timeArray[0]) * 60 * 60);                                                      // 19814
            // minutes                                                                                                 // 19815
            seconds = seconds + (Number(timeArray[1]) * 60);                                                           // 19816
            // seconds                                                                                                 // 19817
            seconds = seconds + Number(timeArray[2]);                                                                  // 19818
        } else if (timeArray.length === 2) {                                                                           // 19819
            // minutes                                                                                                 // 19820
            seconds = seconds + (Number(timeArray[0]) * 60);                                                           // 19821
            // seconds                                                                                                 // 19822
            seconds = seconds + Number(timeArray[1]);                                                                  // 19823
        }                                                                                                              // 19824
        return Number(seconds);                                                                                        // 19825
    }                                                                                                                  // 19826
                                                                                                                       // 19827
    function formatNumber (value, format, roundingFunction) {                                                          // 19828
        var negP = false,                                                                                              // 19829
            signed = false,                                                                                            // 19830
            optDec = false,                                                                                            // 19831
            abbr = '',                                                                                                 // 19832
            abbrK = false, // force abbreviation to thousands                                                          // 19833
            abbrM = false, // force abbreviation to millions                                                           // 19834
            abbrB = false, // force abbreviation to billions                                                           // 19835
            abbrT = false, // force abbreviation to trillions                                                          // 19836
            abbrForce = false, // force abbreviation                                                                   // 19837
            bytes = '',                                                                                                // 19838
            ord = '',                                                                                                  // 19839
            abs = Math.abs(value),                                                                                     // 19840
            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],                                          // 19841
            min,                                                                                                       // 19842
            max,                                                                                                       // 19843
            power,                                                                                                     // 19844
            w,                                                                                                         // 19845
            precision,                                                                                                 // 19846
            thousands,                                                                                                 // 19847
            d = '',                                                                                                    // 19848
            neg = false;                                                                                               // 19849
                                                                                                                       // 19850
        // check if number is zero and a custom zero format has been set                                               // 19851
        if (value === 0 && zeroFormat !== null) {                                                                      // 19852
            return zeroFormat;                                                                                         // 19853
        } else {                                                                                                       // 19854
            // see if we should use parentheses for negative number or if we should prefix with a sign                 // 19855
            // if both are present we default to parentheses                                                           // 19856
            if (format.indexOf('(') > -1) {                                                                            // 19857
                negP = true;                                                                                           // 19858
                format = format.slice(1, -1);                                                                          // 19859
            } else if (format.indexOf('+') > -1) {                                                                     // 19860
                signed = true;                                                                                         // 19861
                format = format.replace(/\+/g, '');                                                                    // 19862
            }                                                                                                          // 19863
                                                                                                                       // 19864
            // see if abbreviation is wanted                                                                           // 19865
            if (format.indexOf('a') > -1) {                                                                            // 19866
                // check if abbreviation is specified                                                                  // 19867
                abbrK = format.indexOf('aK') >= 0;                                                                     // 19868
                abbrM = format.indexOf('aM') >= 0;                                                                     // 19869
                abbrB = format.indexOf('aB') >= 0;                                                                     // 19870
                abbrT = format.indexOf('aT') >= 0;                                                                     // 19871
                abbrForce = abbrK || abbrM || abbrB || abbrT;                                                          // 19872
                                                                                                                       // 19873
                // check for space before abbreviation                                                                 // 19874
                if (format.indexOf(' a') > -1) {                                                                       // 19875
                    abbr = ' ';                                                                                        // 19876
                    format = format.replace(' a', '');                                                                 // 19877
                } else {                                                                                               // 19878
                    format = format.replace('a', '');                                                                  // 19879
                }                                                                                                      // 19880
                                                                                                                       // 19881
                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {                                                  // 19882
                    // trillion                                                                                        // 19883
                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;                                   // 19884
                    value = value / Math.pow(10, 12);                                                                  // 19885
                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {                  // 19886
                    // billion                                                                                         // 19887
                    abbr = abbr + languages[currentLanguage].abbreviations.billion;                                    // 19888
                    value = value / Math.pow(10, 9);                                                                   // 19889
                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {                   // 19890
                    // million                                                                                         // 19891
                    abbr = abbr + languages[currentLanguage].abbreviations.million;                                    // 19892
                    value = value / Math.pow(10, 6);                                                                   // 19893
                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {                   // 19894
                    // thousand                                                                                        // 19895
                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;                                   // 19896
                    value = value / Math.pow(10, 3);                                                                   // 19897
                }                                                                                                      // 19898
            }                                                                                                          // 19899
                                                                                                                       // 19900
            // see if we are formatting bytes                                                                          // 19901
            if (format.indexOf('b') > -1) {                                                                            // 19902
                // check for space before                                                                              // 19903
                if (format.indexOf(' b') > -1) {                                                                       // 19904
                    bytes = ' ';                                                                                       // 19905
                    format = format.replace(' b', '');                                                                 // 19906
                } else {                                                                                               // 19907
                    format = format.replace('b', '');                                                                  // 19908
                }                                                                                                      // 19909
                                                                                                                       // 19910
                for (power = 0; power <= suffixes.length; power++) {                                                   // 19911
                    min = Math.pow(1024, power);                                                                       // 19912
                    max = Math.pow(1024, power+1);                                                                     // 19913
                                                                                                                       // 19914
                    if (value >= min && value < max) {                                                                 // 19915
                        bytes = bytes + suffixes[power];                                                               // 19916
                        if (min > 0) {                                                                                 // 19917
                            value = value / min;                                                                       // 19918
                        }                                                                                              // 19919
                        break;                                                                                         // 19920
                    }                                                                                                  // 19921
                }                                                                                                      // 19922
            }                                                                                                          // 19923
                                                                                                                       // 19924
            // see if ordinal is wanted                                                                                // 19925
            if (format.indexOf('o') > -1) {                                                                            // 19926
                // check for space before                                                                              // 19927
                if (format.indexOf(' o') > -1) {                                                                       // 19928
                    ord = ' ';                                                                                         // 19929
                    format = format.replace(' o', '');                                                                 // 19930
                } else {                                                                                               // 19931
                    format = format.replace('o', '');                                                                  // 19932
                }                                                                                                      // 19933
                                                                                                                       // 19934
                ord = ord + languages[currentLanguage].ordinal(value);                                                 // 19935
            }                                                                                                          // 19936
                                                                                                                       // 19937
            if (format.indexOf('[.]') > -1) {                                                                          // 19938
                optDec = true;                                                                                         // 19939
                format = format.replace('[.]', '.');                                                                   // 19940
            }                                                                                                          // 19941
                                                                                                                       // 19942
            w = value.toString().split('.')[0];                                                                        // 19943
            precision = format.split('.')[1];                                                                          // 19944
            thousands = format.indexOf(',');                                                                           // 19945
                                                                                                                       // 19946
            if (precision) {                                                                                           // 19947
                if (precision.indexOf('[') > -1) {                                                                     // 19948
                    precision = precision.replace(']', '');                                                            // 19949
                    precision = precision.split('[');                                                                  // 19950
                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                } else {                                                                                               // 19952
                    d = toFixed(value, precision.length, roundingFunction);                                            // 19953
                }                                                                                                      // 19954
                                                                                                                       // 19955
                w = d.split('.')[0];                                                                                   // 19956
                                                                                                                       // 19957
                if (d.split('.')[1].length) {                                                                          // 19958
                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];                               // 19959
                } else {                                                                                               // 19960
                    d = '';                                                                                            // 19961
                }                                                                                                      // 19962
                                                                                                                       // 19963
                if (optDec && Number(d.slice(1)) === 0) {                                                              // 19964
                    d = '';                                                                                            // 19965
                }                                                                                                      // 19966
            } else {                                                                                                   // 19967
                w = toFixed(value, null, roundingFunction);                                                            // 19968
            }                                                                                                          // 19969
                                                                                                                       // 19970
            // format number                                                                                           // 19971
            if (w.indexOf('-') > -1) {                                                                                 // 19972
                w = w.slice(1);                                                                                        // 19973
                neg = true;                                                                                            // 19974
            }                                                                                                          // 19975
                                                                                                                       // 19976
            if (thousands > -1) {                                                                                      // 19977
                w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
            }                                                                                                          // 19979
                                                                                                                       // 19980
            if (format.indexOf('.') === 0) {                                                                           // 19981
                w = '';                                                                                                // 19982
            }                                                                                                          // 19983
                                                                                                                       // 19984
            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
        }                                                                                                              // 19986
    }                                                                                                                  // 19987
                                                                                                                       // 19988
    /************************************                                                                              // 19989
        Top Level Functions                                                                                            // 19990
    ************************************/                                                                              // 19991
                                                                                                                       // 19992
    numeral = function (input) {                                                                                       // 19993
        if (numeral.isNumeral(input)) {                                                                                // 19994
            input = input.value();                                                                                     // 19995
        } else if (input === 0 || typeof input === 'undefined') {                                                      // 19996
            input = 0;                                                                                                 // 19997
        } else if (!Number(input)) {                                                                                   // 19998
            input = numeral.fn.unformat(input);                                                                        // 19999
        }                                                                                                              // 20000
                                                                                                                       // 20001
        return new Numeral(Number(input));                                                                             // 20002
    };                                                                                                                 // 20003
                                                                                                                       // 20004
    // version number                                                                                                  // 20005
    numeral.version = VERSION;                                                                                         // 20006
                                                                                                                       // 20007
    // compare numeral object                                                                                          // 20008
    numeral.isNumeral = function (obj) {                                                                               // 20009
        return obj instanceof Numeral;                                                                                 // 20010
    };                                                                                                                 // 20011
                                                                                                                       // 20012
    // This function will load languages and then set the global language.  If                                         // 20013
    // no arguments are passed in, it will simply return the current global                                            // 20014
    // language key.                                                                                                   // 20015
    numeral.language = function (key, values) {                                                                        // 20016
        if (!key) {                                                                                                    // 20017
            return currentLanguage;                                                                                    // 20018
        }                                                                                                              // 20019
                                                                                                                       // 20020
        if (key && !values) {                                                                                          // 20021
            if(!languages[key]) {                                                                                      // 20022
                throw new Error('Unknown language : ' + key);                                                          // 20023
            }                                                                                                          // 20024
            currentLanguage = key;                                                                                     // 20025
        }                                                                                                              // 20026
                                                                                                                       // 20027
        if (values || !languages[key]) {                                                                               // 20028
            loadLanguage(key, values);                                                                                 // 20029
        }                                                                                                              // 20030
                                                                                                                       // 20031
        return numeral;                                                                                                // 20032
    };                                                                                                                 // 20033
                                                                                                                       // 20034
    // This function provides access to the loaded language data.  If                                                  // 20035
    // no arguments are passed in, it will simply return the current                                                   // 20036
    // global language object.                                                                                         // 20037
    numeral.languageData = function (key) {                                                                            // 20038
        if (!key) {                                                                                                    // 20039
            return languages[currentLanguage];                                                                         // 20040
        }                                                                                                              // 20041
                                                                                                                       // 20042
        if (!languages[key]) {                                                                                         // 20043
            throw new Error('Unknown language : ' + key);                                                              // 20044
        }                                                                                                              // 20045
                                                                                                                       // 20046
        return languages[key];                                                                                         // 20047
    };                                                                                                                 // 20048
                                                                                                                       // 20049
    numeral.language('en', {                                                                                           // 20050
        delimiters: {                                                                                                  // 20051
            thousands: ',',                                                                                            // 20052
            decimal: '.'                                                                                               // 20053
        },                                                                                                             // 20054
        abbreviations: {                                                                                               // 20055
            thousand: 'k',                                                                                             // 20056
            million: 'm',                                                                                              // 20057
            billion: 'b',                                                                                              // 20058
            trillion: 't'                                                                                              // 20059
        },                                                                                                             // 20060
        ordinal: function (number) {                                                                                   // 20061
            var b = number % 10;                                                                                       // 20062
            return (~~ (number % 100 / 10) === 1) ? 'th' :                                                             // 20063
                (b === 1) ? 'st' :                                                                                     // 20064
                (b === 2) ? 'nd' :                                                                                     // 20065
                (b === 3) ? 'rd' : 'th';                                                                               // 20066
        },                                                                                                             // 20067
        currency: {                                                                                                    // 20068
            symbol: '$'                                                                                                // 20069
        }                                                                                                              // 20070
    });                                                                                                                // 20071
                                                                                                                       // 20072
    numeral.zeroFormat = function (format) {                                                                           // 20073
        zeroFormat = typeof(format) === 'string' ? format : null;                                                      // 20074
    };                                                                                                                 // 20075
                                                                                                                       // 20076
    numeral.defaultFormat = function (format) {                                                                        // 20077
        defaultFormat = typeof(format) === 'string' ? format : '0.0';                                                  // 20078
    };                                                                                                                 // 20079
                                                                                                                       // 20080
    /************************************                                                                              // 20081
        Helpers                                                                                                        // 20082
    ************************************/                                                                              // 20083
                                                                                                                       // 20084
    function loadLanguage(key, values) {                                                                               // 20085
        languages[key] = values;                                                                                       // 20086
    }                                                                                                                  // 20087
                                                                                                                       // 20088
    /************************************                                                                              // 20089
        Floating-point helpers                                                                                         // 20090
    ************************************/                                                                              // 20091
                                                                                                                       // 20092
    // The floating-point helper functions and implementation                                                          // 20093
    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/                                               // 20094
                                                                                                                       // 20095
    /**                                                                                                                // 20096
     * Array.prototype.reduce for browsers that don't support it                                                       // 20097
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility     // 20098
     */                                                                                                                // 20099
    if ('function' !== typeof Array.prototype.reduce) {                                                                // 20100
        Array.prototype.reduce = function (callback, opt_initialValue) {                                               // 20101
            'use strict';                                                                                              // 20102
                                                                                                                       // 20103
            if (null === this || 'undefined' === typeof this) {                                                        // 20104
                // At the moment all modern browsers, that support strict mode, have                                   // 20105
                // native implementation of Array.prototype.reduce. For instance, IE8                                  // 20106
                // does not support strict mode, so this check is actually useless.                                    // 20107
                throw new TypeError('Array.prototype.reduce called on null or undefined');                             // 20108
            }                                                                                                          // 20109
                                                                                                                       // 20110
            if ('function' !== typeof callback) {                                                                      // 20111
                throw new TypeError(callback + ' is not a function');                                                  // 20112
            }                                                                                                          // 20113
                                                                                                                       // 20114
            var index,                                                                                                 // 20115
                value,                                                                                                 // 20116
                length = this.length >>> 0,                                                                            // 20117
                isValueSet = false;                                                                                    // 20118
                                                                                                                       // 20119
            if (1 < arguments.length) {                                                                                // 20120
                value = opt_initialValue;                                                                              // 20121
                isValueSet = true;                                                                                     // 20122
            }                                                                                                          // 20123
                                                                                                                       // 20124
            for (index = 0; length > index; ++index) {                                                                 // 20125
                if (this.hasOwnProperty(index)) {                                                                      // 20126
                    if (isValueSet) {                                                                                  // 20127
                        value = callback(value, this[index], index, this);                                             // 20128
                    } else {                                                                                           // 20129
                        value = this[index];                                                                           // 20130
                        isValueSet = true;                                                                             // 20131
                    }                                                                                                  // 20132
                }                                                                                                      // 20133
            }                                                                                                          // 20134
                                                                                                                       // 20135
            if (!isValueSet) {                                                                                         // 20136
                throw new TypeError('Reduce of empty array with no initial value');                                    // 20137
            }                                                                                                          // 20138
                                                                                                                       // 20139
            return value;                                                                                              // 20140
        };                                                                                                             // 20141
    }                                                                                                                  // 20142
                                                                                                                       // 20143
                                                                                                                       // 20144
    /**                                                                                                                // 20145
     * Computes the multiplier necessary to make x >= 1,                                                               // 20146
     * effectively eliminating miscalculations caused by                                                               // 20147
     * finite precision.                                                                                               // 20148
     */                                                                                                                // 20149
    function multiplier(x) {                                                                                           // 20150
        var parts = x.toString().split('.');                                                                           // 20151
        if (parts.length < 2) {                                                                                        // 20152
            return 1;                                                                                                  // 20153
        }                                                                                                              // 20154
        return Math.pow(10, parts[1].length);                                                                          // 20155
    }                                                                                                                  // 20156
                                                                                                                       // 20157
    /**                                                                                                                // 20158
     * Given a variable number of arguments, returns the maximum                                                       // 20159
     * multiplier that must be used to normalize an operation involving                                                // 20160
     * all of them.                                                                                                    // 20161
     */                                                                                                                // 20162
    function correctionFactor() {                                                                                      // 20163
        var args = Array.prototype.slice.call(arguments);                                                              // 20164
        return args.reduce(function (prev, next) {                                                                     // 20165
            var mp = multiplier(prev),                                                                                 // 20166
                mn = multiplier(next);                                                                                 // 20167
        return mp > mn ? mp : mn;                                                                                      // 20168
        }, -Infinity);                                                                                                 // 20169
    }                                                                                                                  // 20170
                                                                                                                       // 20171
                                                                                                                       // 20172
    /************************************                                                                              // 20173
        Numeral Prototype                                                                                              // 20174
    ************************************/                                                                              // 20175
                                                                                                                       // 20176
                                                                                                                       // 20177
    numeral.fn = Numeral.prototype = {                                                                                 // 20178
                                                                                                                       // 20179
        clone : function () {                                                                                          // 20180
            return numeral(this);                                                                                      // 20181
        },                                                                                                             // 20182
                                                                                                                       // 20183
        format : function (inputString, roundingFunction) {                                                            // 20184
            return formatNumeral(this,                                                                                 // 20185
                  inputString ? inputString : defaultFormat,                                                           // 20186
                  (roundingFunction !== undefined) ? roundingFunction : Math.round                                     // 20187
              );                                                                                                       // 20188
        },                                                                                                             // 20189
                                                                                                                       // 20190
        unformat : function (inputString) {                                                                            // 20191
            if (Object.prototype.toString.call(inputString) === '[object Number]') {                                   // 20192
                return inputString;                                                                                    // 20193
            }                                                                                                          // 20194
            return unformatNumeral(this, inputString ? inputString : defaultFormat);                                   // 20195
        },                                                                                                             // 20196
                                                                                                                       // 20197
        value : function () {                                                                                          // 20198
            return this._value;                                                                                        // 20199
        },                                                                                                             // 20200
                                                                                                                       // 20201
        valueOf : function () {                                                                                        // 20202
            return this._value;                                                                                        // 20203
        },                                                                                                             // 20204
                                                                                                                       // 20205
        set : function (value) {                                                                                       // 20206
            this._value = Number(value);                                                                               // 20207
            return this;                                                                                               // 20208
        },                                                                                                             // 20209
                                                                                                                       // 20210
        add : function (value) {                                                                                       // 20211
            var corrFactor = correctionFactor.call(null, this._value, value);                                          // 20212
            function cback(accum, curr, currI, O) {                                                                    // 20213
                return accum + corrFactor * curr;                                                                      // 20214
            }                                                                                                          // 20215
            this._value = [this._value, value].reduce(cback, 0) / corrFactor;                                          // 20216
            return this;                                                                                               // 20217
        },                                                                                                             // 20218
                                                                                                                       // 20219
        subtract : function (value) {                                                                                  // 20220
            var corrFactor = correctionFactor.call(null, this._value, value);                                          // 20221
            function cback(accum, curr, currI, O) {                                                                    // 20222
                return accum - corrFactor * curr;                                                                      // 20223
            }                                                                                                          // 20224
            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;                                // 20225
            return this;                                                                                               // 20226
        },                                                                                                             // 20227
                                                                                                                       // 20228
        multiply : function (value) {                                                                                  // 20229
            function cback(accum, curr, currI, O) {                                                                    // 20230
                var corrFactor = correctionFactor(accum, curr);                                                        // 20231
                return (accum * corrFactor) * (curr * corrFactor) /                                                    // 20232
                    (corrFactor * corrFactor);                                                                         // 20233
            }                                                                                                          // 20234
            this._value = [this._value, value].reduce(cback, 1);                                                       // 20235
            return this;                                                                                               // 20236
        },                                                                                                             // 20237
                                                                                                                       // 20238
        divide : function (value) {                                                                                    // 20239
            function cback(accum, curr, currI, O) {                                                                    // 20240
                var corrFactor = correctionFactor(accum, curr);                                                        // 20241
                return (accum * corrFactor) / (curr * corrFactor);                                                     // 20242
            }                                                                                                          // 20243
            this._value = [this._value, value].reduce(cback);                                                          // 20244
            return this;                                                                                               // 20245
        },                                                                                                             // 20246
                                                                                                                       // 20247
        difference : function (value) {                                                                                // 20248
            return Math.abs(numeral(this._value).subtract(value).value());                                             // 20249
        }                                                                                                              // 20250
                                                                                                                       // 20251
    };                                                                                                                 // 20252
                                                                                                                       // 20253
    /************************************                                                                              // 20254
        Exposing Numeral                                                                                               // 20255
    ************************************/                                                                              // 20256
                                                                                                                       // 20257
    // CommonJS module is defined                                                                                      // 20258
    if (hasModule) {                                                                                                   // 20259
        module.exports = numeral;                                                                                      // 20260
    }                                                                                                                  // 20261
                                                                                                                       // 20262
    /*global ender:false */                                                                                            // 20263
    if (typeof ender === 'undefined') {                                                                                // 20264
        // here, `this` means `window` in the browser, or `global` on the server                                       // 20265
        // add `numeral` as a global object via a string identifier,                                                   // 20266
        // for Closure Compiler 'advanced' mode                                                                        // 20267
        this['numeral'] = numeral;                                                                                     // 20268
    }                                                                                                                  // 20269
                                                                                                                       // 20270
    /*global define:false */                                                                                           // 20271
    if (typeof define === 'function' && define.amd) {                                                                  // 20272
        define([], function () {                                                                                       // 20273
            return numeral;                                                                                            // 20274
        });                                                                                                            // 20275
    }                                                                                                                  // 20276
}).call(this);                                                                                                         // 20277
                                                                                                                       // 20278
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['olragon:handsontable'] = {
  Handsontable: Handsontable
};

})();
