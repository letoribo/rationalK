)]}'
{"version":3,"sources":["maazalik:highcharts/lib/highcharts.js","maazalik:highcharts/lib/no-data-to-display.js","maazalik:highcharts/lib/highcharts-more.js","maazalik:highcharts/lib/highchartsHelper.html","maazalik:highcharts/lib/highchartsHelper.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sB;AACA,0C;;AAEA,G;AACA,6C;AACA,E;AACA,+B;AACA,E;AACA,sC;AACA,G;;AAEA,kB;AACA,sK;AACA,iK;AACA,c;AACA,yB;AACA,c;AACA,gB;AACA,c;AACA,a;AACA,wB;AACA,wB;AACA,sB;AACA,oB;AACA,oB;AACA,oB;AACA,oB;AACA,oB;AACA,kB;AACA,4B;;;AAGA,kB;AACA,iC;AACA,qB;AACA,sD;AACA,mC;AACA,0C;AACA,uC;AACA,kE;AACA,uC;AACA,sF;AACA,yF;AACA,yE;AACA,U;AACA,U;AACA,kB;AACA,e;AACA,Y;AACA,gB;AACA,wB;AACA,iB;AACA,U;AACA,W;AACA,0C;AACA,a;AACA,gB;AACA,wB;AACA,mB;;AAEA,8C;AACA,a;AACA,uB;AACA,uB;AACA,mB;AACA,wB;AACA,qB;AACA,W;AACA,e;AACA,S;AACA,S;AACA,uB;AACA,mB;AACA,uB;AACA,yB;AACA,sE;AACA,C;AACA,6B;AACA,6B;;AAEA,4B;AACA,+B;;AAEA,6D;AACA,6C;AACA,U;AACA,gB;AACA,mB;AACA,Y;AACA,U;AACA,Q;AACA,S;AACA,U;AACA,a;AACA,iB;AACA,Y;AACA,Y;AACA,U;AACA,S;AACA,U;AACA,a;;;AAGA,oD;AACA,kB;AACA,Y;;AAEA,2B;AACA,oE;;AAEA,qC;;AAEA,G;AACA,+C;AACA,8C;AACA,uD;AACA,G;AACA,kD;AACA,O;AACA,U;AACA,S;AACA,E;AACA,e;AACA,c;AACA,E;AACA,U;AACA,E;AACA,C;AACA,G;AACA,qF;AACA,2E;AACA,4F;AACA,iF;AACA,kD;AACA,G;AACA,kB;AACA,O;AACA,mB;AACA,M;AACA,W;AACA,sC;AACA,kB;;AAEA,wC;AACA,kC;AACA,c;AACA,I;;AAEA,0B;AACA,uC;AACA,2B;;AAEA,iE;AACA,4G;AACA,kE;AACA,iD;AACA,I;AACA,sD;AACA,a;AACA,gC;AACA,M;AACA,K;AACA,I;AACA,e;AACA,I;;AAEA,iF;AACA,wB;AACA,gB;AACA,6C;AACA,E;;AAEA,wC;AACA,mB;AACA,4B;AACA,6B;AACA,E;;AAEA,Y;AACA,C;;AAEA,G;AACA,wB;AACA,oB;AACA,gC;AACA,G;AACA,uB;AACA,+B;AACA,C;;AAEA,G;AACA,mB;AACA,oB;AACA,G;AACA,sB;AACA,8B;AACA,C;;AAEA,G;AACA,mB;AACA,sB;AACA,G;AACA,wB;AACA,uC;AACA,C;;AAEA,G;AACA,kB;AACA,sB;AACA,G;AACA,uB;AACA,iE;AACA,C;;AAEA,G;AACA,mB;AACA,oB;AACA,G;AACA,sB;AACA,8B;AACA,C;;AAEA,uB;AACA,kC;AACA,C;AACA,uB;AACA,0B;AACA,C;;AAEA,G;AACA,iD;AACA,qB;AACA,sB;AACA,G;AACA,2B;AACA,oB;AACA,c;AACA,wB;AACA,oB;AACA,S;AACA,G;AACA,E;AACA,c;AACA,C;;AAEA,G;AACA,iF;AACA,sB;AACA,G;AACA,uB;AACA,0C;AACA,C;;AAEA,G;AACA,oF;AACA,kF;AACA,E;AACA,mE;AACA,2E;AACA,8D;AACA,G;AACA,kC;AACA,S;AACA,M;;AAEA,2B;AACA,sB;AACA,kB;AACA,uB;AACA,kC;;AAEA,kB;AACA,uF;AACA,iC;AACA,G;;AAEA,4D;AACA,8C;AACA,qB;AACA,qC;AACA,G;AACA,E;AACA,Y;AACA,C;AACA,G;AACA,2E;AACA,qB;AACA,G;AACA,qB;AACA,mC;AACA,C;;;AAGA,G;AACA,iE;AACA,G;AACA,0C;AACA,sB;AACA,I;AACA,M;AACA,uB;AACA,+B;AACA,gB;AACA,0C;AACA,c;AACA,G;AACA,E;AACA,E;;AAEA,G;AACA,6B;AACA,qB;AACA,qE;AACA,G;AACA,0B;AACA,gC;AACA,+C;AACA,mE;AACA,G;AACA,E;AACA,0B;AACA,C;;AAEA,G;AACA,gE;AACA,sB;AACA,0B;AACA,yB;AACA,yB;AACA,wB;AACA,G;AACA,6D;AACA,iC;AACA,e;AACA,sB;AACA,E;AACA,a;AACA,iD;AACA,E;AACA,c;AACA,kB;AACA,E;AACA,c;AACA,yB;AACA,E;AACA,W;AACA,C;;AAEA,G;AACA,2C;AACA,yB;AACA,0B;AACA,G;AACA,uC;AACA,gD;AACA,iC;AACA,mC;AACA,e;AACA,C;;AAEA,G;AACA,8D;AACA,yB;AACA,yB;AACA,G;AACA,8B;AACA,mE;AACA,8E;AACA,C;;AAEA,G;AACA,gF;AACA,G;AACA,uC;AACA,gF;AACA,C;;AAEA,G;AACA,8E;AACA,qE;AACA,0D;AACA,sG;AACA,oG;AACA,a;AACA,G;AACA,2D;AACA,2B;AACA,4B;AACA,mD;AACA,wB;AACA,gC;AACA,G;AACA,E;;;AAGA,iC;AACA,6F;AACA,C;;AAEA,G;AACA,8D;AACA,yB;AACA,4B;AACA,8B;AACA,G;AACA,uD;AACA,+C;AACA,wB;AACA,E;AACA,4C;;AAEA,yD;AACA,oC;AACA,8B;AACA,2B;AACA,uB;AACA,+B;AACA,2B;AACA,iC;AACA,6B;AACA,+B;;AAEA,yE;AACA,yB;;AAEA,S;AACA,oE;AACA,yD;AACA,gE;AACA,qD;AACA,Y;;AAEA,6B;AACA,uB;;AAEA,W;AACA,2D;AACA,yD;AACA,gE;;AAEA,U;AACA,8E;AACA,gD;;AAEA,U;AACA,oE;AACA,iF;AACA,gE;AACA,qE;AACA,wD;AACA,wD;AACA,qE;AACA,8E;AACA,6B;;;AAGA,mB;AACA,4B;AACA,iG;AACA,kI;AACA,G;AACA,E;;AAEA,+C;AACA,mF;AACA,E;;AAEA,I;AACA,sE;AACA,G;AACA,oC;AACA,uB;AACA,yB;AACA,6B;AACA,W;;AAEA,wC;AACA,oC;AACA,yC;AACA,qB;AACA,iC;AACA,Q;AACA,a;AACA,sB;AACA,qD;AACA,K;AACA,G;AACA,S;AACA,gC;AACA,E;AACA,Y;AACA,C;;AAEA,G;AACA,uF;AACA,G;AACA,2B;AACA,oB;AACA,mB;AACA,U;AACA,iB;AACA,O;AACA,I;AACA,M;AACA,W;AACA,M;AACA,Q;AACA,C;AACA,iD;AACA,E;AACA,gC;AACA,8D;AACA,G;AACA,uC;AACA,0E;AACA,qB;AACA,a;;AAEA,yB;AACA,8B;AACA,uB;AACA,I;;AAEA,4B;AACA,+B;AACA,sD;AACA,I;;AAEA,4C;AACA,iB;AACA,G;AACA,U;AACA,qB;AACA,G;AACA,G;AACA,yC;AACA,iC;AACA,wE;AACA,E;AACA,e;AACA,qB;AACA,C;;AAEA,G;AACA,gC;AACA,G;AACA,4B;AACA,2D;AACA,C;;AAEA,G;AACA,oE;AACA,2B;AACA,2B;AACA,4B;AACA,0B;AACA,G;AACA,8F;AACA,iB;AACA,I;AACA,yB;;AAEA,wC;AACA,gC;AACA,mC;;AAEA,gC;AACA,kB;AACA,iC;;AAEA,6B;AACA,gC;AACA,yB;AACA,8B;AACA,iC;AACA,gC;AACA,I;AACA,G;AACA,E;;AAEA,kD;AACA,yC;AACA,6B;AACA,+G;AACA,iG;AACA,S;AACA,G;AACA,E;;AAEA,0C;AACA,0B;AACA,C;AACA,oB;AACA,C;;;AAGA,G;AACA,kF;AACA,4E;AACA,G;AACA,wC;AACA,yB;AACA,Y;AACA,I;;AAEA,0B;AACA,+B;AACA,uC;AACA,E;;AAEA,2B;AACA,iC;AACA,uD;AACA,I;;AAEA,2B;AACA,+B;AACA,0C;AACA,E;AACA,C;;AAEA,G;AACA,wF;AACA,+F;AACA,uC;AACA,G;AACA,yB;AACA,qB;AACA,gB;;AAEA,c;AACA,sB;AACA,iB;AACA,G;AACA,E;AACA,Y;AACA,C;;AAEA,G;AACA,wF;AACA,+F;AACA,uC;AACA,G;AACA,yB;AACA,qB;AACA,gB;;AAEA,c;AACA,sB;AACA,iB;AACA,G;AACA,E;AACA,Y;AACA,C;;AAEA,G;AACA,qG;AACA,4F;AACA,kB;AACA,sD;AACA,2E;AACA,G;AACA,+C;AACA,O;AACA,iB;AACA,qD;AACA,sD;AACA,wB;AACA,oB;AACA,G;;AAEA,yC;AACA,gB;AACA,E;AACA,C;;;AAGA,G;AACA,wD;AACA,2C;AACA,G;AACA,kC;AACA,qD;AACA,mB;AACA,kC;AACA,E;;AAEA,+B;AACA,e;AACA,kC;AACA,E;AACA,2B;AACA,C;;AAEA,G;AACA,0E;AACA,G;AACA,6B;AACA,+E;AACA,Y;AACA,Y;AACA,E;AACA,Y;AACA,mB;AACA,mB;AACA,E;AACA,C;;AAEA,G;AACA,gC;AACA,sB;AACA,G;AACA,4B;AACA,mB;AACA,qB;AACA,G;AACA,C;;AAEA,G;AACA,wE;AACA,iC;AACA,4B;AACA,wB;AACA,G;AACA,yC;AACA,oD;AACA,C;;AAEA,G;AACA,uB;AACA,G;AACA,a;AACA,gB;AACA,c;AACA,e;AACA,e;AACA,mB;AACA,wB;AACA,0B;AACA,yB;AACA,E;;;AAGA,G;AACA,8D;AACA,oD;AACA,kD;AACA,4F;AACA,sG;AACA,G;AACA,+E;AACA,gC;AACA,iG;AACA,mB;AACA,uB;AACA,2G;AACA,wD;AACA,4D;AACA,oE;AACA,uB;AACA,8C;AACA,sC;;AAEA,8F;AACA,sD;AACA,E;AACA,G;AACA,oD;AACA,G;AACA,Y;AACA,I;AACA,4E;AACA,I;AACA,oC;AACA,sB;AACA,yB;AACA,oC;AACA,8B;AACA,a;AACA,S;AACA,K;AACA,4B;AACA,gC;AACA,iB;AACA,e;AACA,kG;AACA,mB;AACA,iB;AACA,wB;AACA,2E;AACA,M;AACA,K;AACA,K;;AAEA,e;AACA,iB;AACA,e;AACA,G;;AAEA,2C;AACA,oB;AACA,qD;AACA,+C;AACA,G;;AAEA,8D;AACA,uE;AACA,oB;AACA,0D;AACA,I;AACA,G;AACA,mD;;AAEA,uE;AACA,qB;AACA,0B;AACA,qC;;AAEA,8B;AACA,yE;AACA,gD;AACA,iD;AACA,iD;AACA,K;AACA,gC;AACA,I;AACA,G;;AAEA,yD;AACA,uC;AACA,iC;AACA,G;AACA,sB;AACA,G;;AAEA,I;AACA,2D;AACA,I;AACA,6C;AACA,e;AACA,oB;AACA,Y;;AAEA,2F;AACA,kB;;AAEA,2C;AACA,gB;AACA,oC;AACA,Y;AACA,0D;AACA,gB;AACA,uD;;AAEA,I;AACA,kF;AACA,a;AACA,G;AACA,a;AACA,E;AACA,E;;AAEA,e;AACA,I;AACA,4C;AACA,I;AACA,yD;AACA,E;AACA,K;AACA,iE;AACA,K;AACA,6B;AACA,G;AACA,yD;AACA,iB;AACA,G;AACA,sE;AACA,uB;AACA,2C;AACA,wC;AACA,K;AACA,M;AACA,4B;AACA,E;AACA,2F;AACA,+E;AACA,sB;AACA,U;AACA,K;AACA,sC;AACA,uB;AACA,sE;AACA,I;AACA,kE;AACA,iC;AACA,gB;AACA,K;AACA,E;AACA,2B;AACA,mB;AACA,yE;AACA,E;AACA,gD;AACA,8B;;AAEA,e;AACA,M;AACA,kD;AACA,yB;;AAEA,sE;AACA,gC;AACA,c;AACA,O;AACA,E;AACA,iB;AACA,qB;AACA,E;AACA,+E;AACA,6C;AACA,kD;AACA,gG;AACA,mE;AACA,O;AACA,K;AACA,M;;AAEA,oF;AACA,uE;AACA,gF;AACA,M;AACA,G;AACA,yD;AACA,0C;AACA,uB;AACA,U;AACA,E;AACA,yE;AACA,8E;AACA,qB;AACA,sB;AACA,kD;AACA,wB;AACA,sB;AACA,uB;AACA,K;AACA,E;AACA,yC;AACA,sE;AACA,M;AACA,G;AACA,M;AACA,sF;AACA,wB;AACA,0B;AACA,M;AACA,wC;AACA,2C;AACA,kD;AACA,K;AACA,Q;AACA,kC;AACA,Y;AACA,uB;AACA,gC;AACA,sD;AACA,gB;AACA,O;AACA,M;AACA,M;AACA,G;AACA,M;AACA,iE;AACA,M;AACA,kC;AACA,gD;AACA,sB;AACA,a;AACA,S;AACA,W;;AAEA,kB;;AAEA,6B;AACA,uB;AACA,kD;AACA,M;AACA,uB;;AAEA,wB;AACA,iC;AACA,6B;AACA,0C;AACA,uC;AACA,uD;AACA,iB;AACA,4B;AACA,M;;AAEA,0F;AACA,iC;AACA,2D;AACA,M;AACA,K;AACA,I;AACA,e;AACA,K;;AAEA,I;;AAEA,K;AACA,oD;AACA,K;AACA,0C;AACA,sB;AACA,iB;AACA,+B;AACA,gB;AACA,M;AACA,a;AACA,W;AACA,6B;AACA,I;AACA,I;AACA,E;AACA,K;AACA,0D;AACA,mC;AACA,+B;AACA,K;AACA,yB;AACA,E;AACA,K;AACA,gE;AACA,K;AACA,qB;AACA,E;AACA,K;AACA,kH;AACA,0C;AACA,sE;AACA,K;AACA,uC;AACA,4B;AACA,I;AACA,C;AACA,K;AACA,oB;AACA,K;AACA,e;AACA,C;AACA,K;AACA,iB;AACA,uB;AACA,yB;AACA,K;AACA,2B;AACA,gC;AACA,oB;AACA,U;AACA,qB;AACA,yB;AACA,iD;AACA,I;AACA,kB;AACA,C;AACA,I;AACA,C;AACA,K;AACA,wE;AACA,K;AACA,yB;AACA,yB;AACA,I;AACA,C;AACA,K;AACA,0B;AACA,uD;AACA,yC;AACA,2C;AACA,K;AACA,sC;AACA,yB;AACA,I;AACA,C;AACA,K;AACA,qC;AACA,kC;AACA,gF;AACA,qD;AACA,K;AACA,kD;AACA,+D;AACA,qG;AACA,8E;AACA,sC;AACA,8B;AACA,I;AACA,C;AACA,oC;AACA,I;AACA,C;AACA,K;AACA,qC;AACA,uB;AACA,yB;AACA,mC;AACA,sC;AACA,K;AACA,mE;AACA,6B;AACA,qC;AACA,qB;AACA,C;AACA,0G;AACA,sF;AACA,iF;AACA,K;AACA,yF;AACA,6F;AACA,iC;AACA,iC;AACA,iC;AACA,sC;AACA,I;AACA,C;AACA,iC;AACA,C;AACA,wE;AACA,sE;AACA,yD;AACA,kB;AACA,gC;AACA,oB;AACA,I;AACA,C;AACA,oE;AACA,kE;AACA,oB;AACA,2B;AACA,mE;AACA,yB;AACA,6B;AACA,U;AACA,uB;AACA,kB;AACA,oC;AACA,+B;AACA,O;AACA,M;AACA,M;AACA,M;AACA,4B;AACA,C;AACA,gB;AACA,wB;AACA,C;AACA,uB;AACA,0B;AACA,gC;AACA,4B;AACA,I;AACA,C;AACA,6E;AACA,2B;AACA,I;AACA,I;AACA,E;AACA,K;AACA,yC;AACA,K;AACA,gC;AACA,kC;AACA,G;AACA,uC;AACA,0C;AACA,wB;AACA,wB;AACA,I;AACA,G;AACA,c;AACA,I;AACA,C;AACA,K;AACA,kD;AACA,uB;AACA,2B;AACA,sF;AACA,K;AACA,2C;AACA,mB;AACA,mB;AACA,2B;AACA,I;AACA,kB;AACA,4E;AACA,qF;AACA,I;AACA,C;AACA,c;AACA,iD;AACA,yF;AACA,I;AACA,2B;AACA,gC;AACA,C;AACA,I;AACA,K;AACA,2B;AACA,K;AACA,uB;AACA,wE;AACA,iB;AACA,I;AACA,G;AACA,I;AACA,e;;;AAGA,kE;AACA,0C;AACA,+B;AACA,C;AACA,yB;AACA,oB;AACA,kD;AACA,C;;;AAGA,yF;AACA,qF;AACA,0B;AACA,oC;AACA,+B;AACA,2B;AACA,uC;AACA,qB;AACA,yB;AACA,mB;AACA,6B;AACA,mC;AACA,+B;AACA,yC;AACA,2B;AACA,qB;;;;AAIA,+E;AACA,+E;AACA,+E;AACA,kB;AACA,sD;AACA,wE;AACA,uE;AACA,Q;AACA,wB;AACA,0E;AACA,8D;AACA,oG;AACA,2F;AACA,oB;AACA,oF;AACA,0B;AACA,yC;AACA,mB;AACA,G;AACA,U;AACA,e;AACA,sB;AACA,6E;AACA,sF;AACA,G;AACA,S;AACA,oB;AACA,sB;AACA,iB;AACA,oB;AACA,gC;AACA,mB;AACA,oB;AACA,sB;AACA,uB;AACA,qB;AACA,yB;AACA,mB;AACA,kB;AACA,4B;AACA,2B;AACA,oB;AACA,kB;AACA,4B;AACA,mB;AACA,qB;AACA,sB;AACA,oB;AACA,Y;AACA,iH;AACA,qB;AACA,M;AACA,6B;AACA,8B;AACA,6B;AACA,uB;AACA,sB;AACA,gB;AACA,oB;AACA,W;AACA,c;AACA,K;AACA,c;AACA,mB;AACA,W;AACA,2B;AACA,S;AACA,I;AACA,wB;AACA,G;AACA,G;AACA,S;AACA,sB;AACA,kB;AACA,qB;AACA,a;AACA,U;AACA,0B;AACA,a;AACA,U;AACA,oB;AACA,mB;AACA,G;;AAEA,G;AACA,Y;AACA,W;AACA,kB;AACA,oB;AACA,U;AACA,0B;AACA,a;AACA,U;AACA,mB;AACA,G;AACA,G;;AAEA,e;AACA,gC;AACA,2B;AACA,uB;AACA,e;AACA,kB;AACA,K;AACA,yB;AACA,uB;AACA,gB;AACA,qB;AACA,+B;AACA,c;AACA,oB;AACA,sB;AACA,gB;AACA,mB;AACA,qB;AACA,Y;AACA,oB;AACA,mB;AACA,iB;AACA,c;AACA,yB;AACA,sB;AACA,0C;AACA,a;AACA,oB;AACA,uB;AACA,mB;AACA,O;AACA,c;AACA,2B;AACA,2B;AACA,kB;AACA,M;AACA,K;AACA,K;AACA,W;AACA,c;AACA,K;AACA,gB;AACA,oB;AACA,mB;AACA,sB;AACA,4B;AACA,uE;AACA,M;AACA,Y;AACA,uB;AACA,sB;AACA,wB;AACA,qD;AACA,M;AACA,oD;AACA,S;AACA,S;AACA,kC;AACA,8B;AACA,+B;AACA,8B;AACA,c;AACA,oB;AACA,K;AACA,uG;AACA,iB;AACA,mB;AACA,sB;AACA,qF;AACA,4C;AACA,Y;AACA,sB;AACA,sB;AACA,c;AACA,6B;AACA,yB;AACA,O;AACA,Y;AACA,e;AACA,mB;AACA,M;AACA,M;AACA,a;AACA,e;AACA,K;AACA,K;AACA,wB;AACA,e;AACA,oG;AACA,0B;AACA,mC;AACA,sB;AACA,qB;AACA,M;AACA,uB;AACA,kB;AACA,G;AACA,G;AACA,U;AACA,c;AACA,U;AACA,uB;AACA,sB;AACA,mB;AACA,G;AACA,G;AACA,U;AACA,gB;AACA,kB;AACA,oB;AACA,uB;AACA,+B;AACA,oB;AACA,I;AACA,mB;AACA,yB;AACA,kB;AACA,e;AACA,sB;AACA,0B;AACA,mB;AACA,wB;AACA,8B;AACA,I;AACA,gB;AACA,qB;AACA,gB;AACA,2B;AACA,Y;AACA,iB;AACA,M;AACA,iB;AACA,oB;AACA,oB;AACA,qB;AACA,I;AACA,mB;AACA,0C;AACA,gB;AACA,I;AACA,oB;AACA,gB;AACA,I;AACA,sB;AACA,sB;AACA,qC;AACA,iB;AACA,I;AACA,0B;AACA,qB;AACA,qB;AACA,mB;AACA,0B;AACA,sB;AACA,O;AACA,O;AACA,U;AACA,gB;AACA,W;AACA,sB;AACA,I;AACA,M;AACA,G;;AAEA,W;AACA,uB;AACA,e;AACA,sB;AACA,sB;AACA,a;AACA,I;AACA,qB;AACA,U;AACA,sB;AACA,4B;AACA,gB;AACA,sB;AACA,G;AACA,G;;AAEA,W;AACA,gB;AACA,oB;AACA,qB;AACA,8C;AACA,iB;AACA,kB;AACA,0B;AACA,yC;AACA,iC;AACA,8B;AACA,4B;AACA,wB;AACA,mC;AACA,kB;AACA,a;AACA,I;AACA,mB;AACA,gC;AACA,wE;AACA,sG;AACA,e;AACA,qB;AACA,kB;AACA,gC;AACA,U;AACA,oB;AACA,qB;AACA,oB;AACA,kB;AACA,uB;AACA,G;AACA,iC;AACA,wB;AACA,oB;AACA,mB;AACA,G;;AAEA,W;AACA,gB;AACA,yB;AACA,oC;AACA,a;AACA,kB;AACA,U;AACA,2B;AACA,Q;AACA,I;AACA,U;AACA,qB;AACA,oB;AACA,kB;AACA,G;AACA,E;AACA,E;;;;;AAKA,kB;AACA,oD;AACA,gD;;AAEA,+B;AACA,iB;;;;AAIA,G;AACA,sF;AACA,+B;AACA,G;AACA,2B;AACA,2C;AACA,gC;AACA,kC;AACA,kC;;;AAGA,0C;AACA,yD;AACA,+D;AACA,mE;AACA,Q;AACA,e;AACA,oC;AACA,uB;AACA,U;AACA,gB;AACA,S;AACA,U;AACA,kB;AACA,mB;AACA,qB;AACA,oB;AACA,e;AACA,G;AACA,W;AACA,G;AACA,mC;AACA,iC;AACA,+B;AACA,gC;AACA,iC;AACA,oC;AACA,wC;AACA,mC;AACA,mC;AACA,iC;AACA,gC;AACA,iC;AACA,oC;;AAEA,C;;AAEA,G;AACA,qF;AACA,iD;AACA,G;AACA,8B;AACA,C;AACA,+B;AACA,uD;AACA,C;AACA,a;AACA,kB;;AAEA,uB;AACA,C;;AAEA,G;AACA,mG;AACA,oE;AACA,G;AACA,uB;AACA,uB;AACA,C;;;AAGA,G;AACA,6D;AACA,qE;AACA,G;AACA,+G;AACA,gE;AACA,8E;;AAEA,8B;AACA,qB;AACA,8B;;AAEA,I;AACA,uC;AACA,yB;AACA,I;AACA,uB;;AAEA,c;AACA,6B;AACA,6C;AACA,0B;AACA,M;;AAEA,iB;AACA,U;AACA,U;AACA,kC;AACA,gB;AACA,0F;AACA,Y;AACA,U;AACA,kC;AACA,iB;AACA,+E;AACA,Y;AACA,W;AACA,mC;AACA,kB;AACA,oE;AACA,M;AACA,K;AACA,I;AACA,K;;AAEA,E;AACA,I;AACA,uC;AACA,0B;AACA,I;AACA,uB;AACA,U;;AAEA,c;AACA,sB;AACA,oC;AACA,mC;AACA,uD;AACA,M;;AAEA,kD;AACA,uC;AACA,0B;AACA,iE;AACA,+B;AACA,kB;AACA,W;AACA,yC;AACA,I;AACA,U;AACA,e;AACA,G;AACA,a;AACA,E;;AAEA,I;AACA,sB;AACA,yB;AACA,I;AACA,2B;AACA,c;AACA,gC;AACA,yB;AACA,M;AACA,E;AACA,8C;AACA,S;AACA,4B;AACA,iC;;AAEA,sB;AACA,iB;AACA,K;AACA,wB;AACA,mB;AACA,K;AACA,I;AACA,G;AACA,c;AACA,E;AACA,I;AACA,kD;AACA,yB;AACA,I;AACA,6B;AACA,kB;AACA,c;AACA,E;;AAEA,+B;AACA,a;;AAEA,kB;AACA,S;AACA,W;AACA,qB;AACA,a;AACA,yB;AACA,Y;AACA,G;AACA,E;;;AAGA,G;AACA,oC;AACA,G;AACA,wB;;AAEA,wB;AACA,C;AACA,8B;AACA,Y;AACA,4E;AACA,2E;AACA,yD;AACA,C;AACA,I;AACA,+B;AACA,4B;AACA,4B;AACA,I;AACA,sC;AACA,qB;AACA,yC;AACA,4B;AACA,yC;AACA,8B;AACA,G;AACA,C;AACA,I;AACA,6B;AACA,0B;AACA,mE;AACA,0E;AACA,I;AACA,gD;AACA,yD;AACA,4F;AACA,oB;AACA,gD;AACA,8F;AACA,oC;AACA,I;AACA,sC;AACA,U;AACA,qB;AACA,kB;AACA,e;AACA,I;AACA,G;AACA,c;AACA,G;;AAEA,I;AACA,yE;AACA,I;AACA,8C;AACA,+B;AACA,e;AACA,Y;AACA,Y;AACA,a;AACA,kB;AACA,S;AACA,a;AACA,e;AACA,mB;AACA,K;AACA,M;AACA,Y;;AAEA,qC;AACA,6B;AACA,+B;AACA,oC;AACA,+B;AACA,G;;AAEA,iB;AACA,8B;AACA,kC;AACA,uB;AACA,0C;;AAEA,8B;AACA,2B;AACA,kC;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,oC;AACA,M;AACA,I;;AAEA,iE;AACA,8F;AACA,gC;AACA,0F;AACA,0F;AACA,wC;AACA,oC;AACA,O;AACA,I;;AAEA,oF;AACA,wB;AACA,qB;AACA,8B;AACA,K;AACA,I;AACA,qB;AACA,uB;AACA,I;AACA,uB;;AAEA,4F;AACA,wB;AACA,mC;;AAEA,W;;AAEA,wC;AACA,4C;AACA,sE;AACA,oB;AACA,yB;;;AAGA,4E;AACA,8B;AACA,iC;AACA,oB;AACA,yC;AACA,mC;AACA,yC;AACA,yC;AACA,a;AACA,0B;AACA,sB;AACA,M;AACA,uD;AACA,sB;AACA,8B;AACA,iC;AACA,4B;;AAEA,4C;AACA,2C;AACA,O;AACA,I;;AAEA,8C;AACA,mE;AACA,I;AACA,G;;AAEA,I;AACA,iF;AACA,kC;AACA,G;AACA,kI;AACA,U;AACA,qB;AACA,I;AACA,yC;AACA,0B;AACA,U;AACA,uD;AACA,e;AACA,sF;AACA,wF;AACA,wF;;AAEA,2F;AACA,oB;AACA,gH;AACA,G;;AAEA,kG;AACA,iC;AACA,iB;AACA,+C;AACA,G;;AAEA,mG;AACA,6C;AACA,sC;AACA,oB;AACA,G;AACA,O;;AAEA,oD;AACA,iB;AACA,6E;AACA,U;;AAEA,0C;;AAEA,0D;AACA,4B;AACA,+B;;AAEA,8D;AACA,6D;AACA,qC;AACA,W;AACA,iB;AACA,I;AACA,uC;AACA,8C;;AAEA,mE;AACA,oD;;AAEA,sB;AACA,uC;AACA,gB;;AAEA,2D;AACA,oB;AACA,uD;AACA,kC;AACA,uC;AACA,wB;AACA,kC;AACA,Q;AACA,O;;AAEA,qD;AACA,iC;AACA,mB;AACA,uC;AACA,qB;AACA,uB;AACA,2D;AACA,mC;AACA,iC;AACA,S;AACA,2C;AACA,Q;AACA,K;AACA,M;AACA,G;AACA,G;;AAEA,I;AACA,gC;AACA,+B;AACA,gC;AACA,I;AACA,6B;AACA,U;AACA,S;AACA,0B;AACA,oB;AACA,c;AACA,Y;;AAEA,0B;AACA,sD;AACA,c;AACA,a;AACA,mB;AACA,G;;AAEA,sE;AACA,iC;AACA,kF;AACA,E;AACA,W;AACA,U;;AAEA,sB;AACA,sB;AACA,qB;;;;AAIA,gG;AACA,6B;AACA,4B;AACA,8B;AACA,M;AACA,qB;AACA,K;;AAEA,wD;AACA,6B;AACA,K;AACA,I;AACA,oB;AACA,mF;AACA,K;;AAEA,6C;AACA,0F;AACA,oC;AACA,K;AACA,I;;AAEA,gG;AACA,oB;AACA,0B;AACA,2B;AACA,6B;AACA,I;;AAEA,G;;AAEA,a;AACA,G;;AAEA,uC;AACA,6B;AACA,sB;AACA,e;AACA,2B;AACA,Q;AACA,sB;AACA,sD;AACA,iC;AACA,K;AACA,G;AACA,G;;AAEA,I;AACA,kC;AACA,I;AACA,iC;AACA,6B;AACA,mD;;AAEA,mD;AACA,8D;AACA,G;AACA,c;AACA,G;AACA,iD;AACA,iC;AACA,+D;AACA,G;AACA,oC;AACA,kF;AACA,c;AACA,G;AACA,G;;AAEA,I;AACA,+D;AACA,gE;AACA,kB;AACA,wB;AACA,I;AACA,8B;AACA,qB;;AAEA,2G;AACA,gD;AACA,K;;AAEA,gB;AACA,mD;AACA,c;AACA,c;AACA,kB;AACA,mB;AACA,W;AACA,I;AACA,K;AACA,G;;AAEA,I;AACA,wC;AACA,sB;AACA,I;AACA,4B;AACA,wG;AACA,G;;AAEA,I;AACA,mF;AACA,yB;AACA,+B;AACA,qB;AACA,qB;AACA,yB;AACA,0B;AACA,I;AACA,yB;;AAEA,qB;AACA,O;AACA,gB;AACA,c;AACA,8D;;AAEA,kH;;AAEA,8B;AACA,4D;AACA,4D;AACA,8E;AACA,iF;AACA,iC;;AAEA,qB;AACA,qE;AACA,4C;AACA,I;AACA,G;;AAEA,iB;AACA,G;;AAEA,I;AACA,8B;AACA,0B;AACA,I;AACA,yB;AACA,yB;AACA,kC;AACA,kB;AACA,8B;AACA,a;AACA,K;AACA,sB;AACA,a;AACA,uB;;AAEA,mB;AACA,+B;AACA,8B;AACA,G;;AAEA,+D;AACA,kB;AACA,sB;AACA,qC;AACA,8B;AACA,mB;AACA,K;AACA,I;AACA,G;AACA,e;AACA,uC;AACA,gG;AACA,mC;;AAEA,4C;AACA,mB;AACA,oB;AACA,e;AACA,c;AACA,M;AACA,M;;AAEA,kB;AACA,+B;;AAEA,gF;AACA,wB;AACA,I;;AAEA,uC;AACA,yB;AACA,qC;AACA,W;AACA,4B;AACA,kE;AACA,6B;AACA,uB;AACA,+E;AACA,K;AACA,gD;AACA,I;;;AAGA,mB;AACA,wC;AACA,gD;AACA,I;AACA,G;;AAEA,qB;AACA,G;;AAEA,I;AACA,yB;AACA,6B;AACA,6B;AACA,I;AACA,oC;AACA,wB;AACA,gC;AACA,E;AACA,U;AACA,0C;AACA,2C;AACA,gD;AACA,uB;AACA,6B;AACA,K;AACA,+C;AACA,gH;AACA,8B;AACA,K;AACA,Q;AACA,U;AACA,oD;AACA,uC;AACA,G;AACA,c;AACA,G;;AAEA,I;AACA,0E;AACA,wE;AACA,2C;AACA,I;AACA,6C;AACA,6C;AACA,c;AACA,G;;AAEA,I;AACA,qD;AACA,qB;AACA,qB;AACA,I;AACA,6B;AACA,oB;AACA,iB;AACA,gB;AACA,K;AACA,G;;AAEA,I;AACA,mC;AACA,I;AACA,sB;AACA,qB;AACA,0B;AACA,4B;AACA,iB;AACA,G;;AAEA,I;AACA,sE;AACA,c;AACA,I;AACA,+B;AACA,qB;AACA,wC;AACA,wC;AACA,2B;AACA,2B;AACA,+B;AACA,+B;AACA,6B;AACA,a;;AAEA,kF;AACA,iB;AACA,uC;AACA,wC;AACA,G;;AAEA,kF;AACA,gE;AACA,mE;;AAEA,mB;AACA,iB;AACA,4C;AACA,yC;AACA,gI;AACA,G;AACA,gD;AACA,yB;AACA,G;;AAEA,gB;AACA,2C;AACA,4E;AACA,G;;AAEA,yB;AACA,0D;AACA,G;AACA,G;AACA,I;AACA,kC;AACA,I;AACA,uB;AACA,6B;AACA,0C;AACA,c;AACA,G;;;AAGA,I;AACA,mE;AACA,qC;AACA,G;AACA,gC;AACA,qC;AACA,sF;AACA,+E;AACA,oF;AACA,wB;AACA,G;AACA,I;AACA,wD;AACA,Y;AACA,U;AACA,K;AACA,K;AACA,gB;AACA,W;AACA,4B;AACA,4C;;AAEA,8B;AACA,qB;AACA,oC;AACA,4C;AACA,mF;AACA,+C;AACA,qF;AACA,8B;AACA,oC;AACA,I;;AAEA,qD;AACA,U;AACA,oC;AACA,4C;AACA,0B;AACA,G;;AAEA,+C;;AAEA,qB;AACA,6B;AACA,sC;AACA,kE;AACA,iE;;AAEA,U;AACA,gD;AACA,iD;AACA,oC;AACA,G;AACA,gE;;;AAGA,mB;AACA,mD;AACA,mD;AACA,6C;;AAEA,G;AACA,gE;;AAEA,mC;AACA,kD;AACA,qB;AACA,2B;;AAEA,c;AACA,G;;AAEA,I;AACA,iE;AACA,I;AACA,6B;AACA,qB;AACA,0B;AACA,+B;AACA,S;AACA,U;AACA,+B;AACA,6B;AACA,2B;AACA,4B;AACA,6B;AACA,c;AACA,6B;AACA,wB;AACA,Y;;AAEA,8B;;AAEA,yC;AACA,4F;;AAEA,iF;AACA,iF;AACA,yB;AACA,kD;AACA,6D;;AAEA,yD;AACA,W;AACA,kC;AACA,I;AACA,G;;AAEA,4B;AACA,mC;AACA,G;;AAEA,mB;AACA,c;;AAEA,kB;AACA,+D;AACA,iE;;AAEA,2E;AACA,+C;AACA,+D;AACA,qF;AACA,qC;AACA,S;AACA,O;;AAEA,8E;AACA,6C;AACA,wC;AACA,gC;AACA,uC;AACA,iC;AACA,M;;AAEA,6B;AACA,sF;AACA,4B;AACA,qC;AACA,qD;AACA,O;AACA,kC;AACA,mC;AACA,Q;;AAEA,a;AACA,sB;AACA,wC;AACA,uC;AACA,+B;AACA,M;AACA,kB;;AAEA,oF;AACA,yE;AACA,kC;AACA,oC;AACA,K;;;AAGA,wC;AACA,W;;AAEA,iC;;AAEA,I;;AAEA,6F;AACA,sC;AACA,wB;AACA,uB;AACA,yB;;AAEA,qF;AACA,2F;AACA,+B;AACA,K;;AAEA,8B;AACA,mB;AACA,iF;AACA,kF;AACA,K;AACA,I;;AAEA,c;AACA,mC;AACA,G;AACA,c;AACA,G;;AAEA,I;AACA,oB;AACA,I;AACA,2B;AACA,6F;AACA,wD;AACA,8C;AACA,U;AACA,4D;AACA,G;AACA,c;AACA,G;;AAEA,I;AACA,oB;AACA,I;AACA,oB;AACA,2C;AACA,G;;AAEA,+B;AACA,yB;AACA,uB;AACA,a;AACA,M;AACA,6B;AACA,0B;AACA,yF;AACA,I;AACA,K;AACA,G;;AAEA,I;AACA,mB;AACA,uF;AACA,8C;AACA,I;AACA,yB;;AAEA,+B;AACA,0B;AACA,Y;;AAEA,e;AACA,6B;AACA,G;;AAEA,qB;AACA,kD;;AAEA,yB;AACA,mC;AACA,4B;AACA,G;;AAEA,kB;AACA,oB;;AAEA,sE;AACA,yC;AACA,iD;AACA,kC;AACA,G;;AAEA,gD;AACA,kB;AACA,iE;AACA,G;;AAEA,qC;AACA,mB;AACA,gB;AACA,G;;AAEA,c;AACA,G;;AAEA,I;AACA,gE;AACA,wG;AACA,I;AACA,sC;AACA,sC;AACA,mB;AACA,mC;AACA,G;AACA,G;;AAEA,I;AACA,2C;AACA,I;AACA,uB;AACA,qB;AACA,mC;AACA,6B;AACA,gG;AACA,e;AACA,O;AACA,K;;AAEA,kB;AACA,0G;AACA,2C;;AAEA,yB;AACA,iD;AACA,G;;AAEA,oD;AACA,sB;AACA,+C;AACA,kD;AACA,I;AACA,wB;AACA,G;;AAEA,mB;AACA,mC;;AAEA,oB;AACA,gB;AACA,oC;AACA,oC;AACA,M;AACA,G;;AAEA,8F;AACA,2F;AACA,2C;AACA,8C;AACA,4B;AACA,+B;AACA,G;;AAEA,6B;AACA,wB;AACA,mD;AACA,G;;AAEA,wB;AACA,uB;AACA,G;;AAEA,c;AACA,G;;AAEA,I;AACA,mF;AACA,yC;AACA,I;AACA,kD;AACA,mB;AACA,K;AACA,U;AACA,0B;AACA,e;AACA,e;AACA,wB;;AAEA,uC;AACA,a;;;AAGA,sB;AACA,8C;AACA,wE;AACA,oC;AACA,e;AACA,uF;AACA,uC;AACA,kC;AACA,kD;AACA,kB;AACA,wB;AACA,8C;AACA,gD;AACA,iC;AACA,0C;AACA,iB;AACA,O;AACA,iB;AACA,8E;AACA,oC;AACA,K;;AAEA,gB;AACA,uC;AACA,Y;AACA,sD;AACA,K;;AAEA,yB;AACA,I;;AAEA,0B;AACA,G;AACA,c;;AAEA,G;;AAEA,0B;AACA,2C;AACA,0C;AACA,G;AACA,kC;AACA,G;;AAEA,K;AACA,0E;AACA,kB;AACA,I;AACA,iC;AACA,qF;;AAEA,iD;AACA,yB;AACA,G;AACA,a;AACA,G;;;AAGA,0C;AACA,yC;AACA,2B;AACA,G;AACA,oC;AACA,mB;AACA,G;AACA,mC;;AAEA,oB;AACA,G;AACA,oC;AACA,Q;AACA,uC;AACA,c;AACA,gB;AACA,+C;AACA,uC;AACA,gC;AACA,iC;AACA,gC;AACA,4B;AACA,4B;AACA,sB;AACA,gC;;AAEA,oB;AACA,gB;AACA,qD;AACA,I;AACA,0B;AACA,qC;AACA,wD;AACA,G;AACA,G;AACA,gC;AACA,qG;AACA,G;AACA,gD;AACA,oB;AACA,mC;AACA,G;AACA,gC;AACA,gE;AACA,mB;AACA,oD;AACA,uC;AACA,G;AACA,wB;AACA,sB;AACA,qE;AACA,I;AACA,I;AACA,G;AACA,+B;AACA,+B;AACA,4C;AACA,oB;AACA,E;AACA,wB;AACA,oB;AACA,kC;AACA,I;AACA,G;AACA,G;AACA,6C;AACA,kC;AACA,oC;AACA,qB;AACA,2C;AACA,G;AACA,G;AACA,sC;AACA,+B;AACA,kC;AACA,2C;AACA,sD;AACA,c;AACA,gB;AACA,e;AACA,0B;AACA,Y;AACA,oB;AACA,K;AACA,E;AACA,uB;AACA,yF;AACA,kB;AACA,gE;AACA,gB;AACA,I;AACA,qB;AACA,G;;AAEA,kF;AACA,8E;AACA,6C;AACA,Y;AACA,uB;;AAEA,8B;AACA,+B;AACA,I;AACA,E;AACA,sC;AACA,yD;AACA,iC;AACA,+C;AACA,qC;AACA,6D;AACA,kC;AACA,0E;AACA,+C;;AAEA,U;AACA,oD;AACA,qB;AACA,K;AACA,I;AACA,mB;AACA,oC;AACA,I;AACA,G;AACA,kB;AACA,G;AACA,iD;AACA,mC;AACA,E;AACA,E;;AAEA,kC;AACA,4D;AACA,gF;AACA,mF;AACA,iG;AACA,mB;AACA,yB;AACA,E;;AAEA,6F;AACA,2D;AACA,iH;AACA,mB;AACA,oF;AACA,2C;AACA,0C;AACA,4H;AACA,6D;AACA,wB;AACA,sE;AACA,oC;AACA,yB;AACA,E;AACA,E;;;AAGA,G;AACA,2B;AACA,G;AACA,+B;AACA,kC;AACA,E;AACA,yB;AACA,qB;;AAEA,I;AACA,8B;AACA,6B;AACA,yB;AACA,0B;AACA,8B;AACA,I;AACA,8D;AACA,sB;AACA,kB;AACA,c;AACA,W;AACA,Q;;AAEA,4C;AACA,U;AACA,kB;AACA,K;AACA,8B;AACA,+B;AACA,iC;;AAEA,oE;AACA,oD;AACA,kC;AACA,G;;AAEA,sB;AACA,wB;AACA,yB;AACA,mC;AACA,+B;;AAEA,4D;AACA,qF;AACA,W;AACA,4C;AACA,mE;AACA,sE;AACA,M;;AAEA,oB;AACA,0C;AACA,0F;;;AAGA,mD;AACA,iC;AACA,0E;AACA,4D;;AAEA,yC;;;;AAIA,0B;AACA,kF;AACA,kF;AACA,gF;AACA,gF;AACA,uC;AACA,wB;AACA,qD;AACA,qD;AACA,wC;AACA,6C;AACA,oB;AACA,kD;AACA,8C;AACA,O;AACA,K;;AAEA,qB;AACA,iB;;AAEA,sB;AACA,wC;AACA,G;AACA,G;;AAEA,6B;AACA,+B;AACA,sG;AACA,mB;AACA,a;AACA,G;;AAEA,I;AACA,uF;AACA,4B;AACA,I;AACA,wB;AACA,0C;AACA,G;;AAEA,I;AACA,oD;AACA,I;AACA,uB;AACA,sB;AACA,gC;AACA,sB;AACA,sD;;AAEA,0C;AACA,oD;AACA,4B;;AAEA,iC;AACA,kC;AACA,qB;AACA,0C;AACA,G;;AAEA,iC;AACA,yH;AACA,mB;AACA,6B;AACA,oD;AACA,G;;AAEA,iC;;AAEA,c;AACA,G;;AAEA,I;AACA,uC;AACA,4B;AACA,I;AACA,qC;AACA,mC;AACA,+B;AACA,iB;AACA,G;;AAEA,I;AACA,6C;AACA,I;AACA,sB;;AAEA,I;AACA,8C;AACA,G;AACA,qD;AACA,I;AACA,gC;AACA,iC;AACA,mB;AACA,kC;AACA,kD;AACA,2C;AACA,S;AACA,oC;AACA,c;AACA,a;AACA,iC;AACA,+B;AACA,6B;AACA,wD;AACA,oD;AACA,mE;AACA,yB;AACA,oD;AACA,qC;AACA,4B;AACA,2B;AACA,0B;AACA,sD;AACA,6B;AACA,8E;AACA,W;AACA,S;AACA,K;AACA,gD;AACA,gE;AACA,K;;AAEA,qB;AACA,e;AACA,uC;AACA,G;;AAEA,2E;AACA,+B;AACA,8E;AACA,4E;AACA,U;;AAEA,oC;AACA,U;;AAEA,wC;AACA,0C;;AAEA,oB;AACA,kF;AACA,I;;AAEA,mB;AACA,mB;AACA,iE;AACA,8D;AACA,6B;AACA,kD;AACA,wB;;AAEA,W;AACA,sB;AACA,I;;;AAGA,8B;AACA,wC;AACA,gB;AACA,I;;AAEA,G;AACA,qB;AACA,wC;AACA,0B;;AAEA,iF;AACA,8B;;AAEA,iC;AACA,6C;AACA,0B;AACA,oD;AACA,yB;AACA,kC;AACA,uF;AACA,uC;AACA,O;AACA,yE;AACA,oF;AACA,yC;AACA,O;;AAEA,2E;;AAEA,wE;AACA,yB;;AAEA,2B;AACA,mD;;AAEA,mE;AACA,yC;AACA,gC;AACA,S;AACA,e;AACA,iC;AACA,Q;;AAEA,wB;AACA,+B;;AAEA,mB;AACA,mC;;AAEA,4D;AACA,+B;;AAEA,mE;AACA,mC;AACA,0C;AACA,S;;AAEA,+D;AACA,gD;AACA,a;AACA,e;AACA,c;AACA,6B;AACA,U;AACA,Q;;AAEA,qB;AACA,2C;AACA,U;;AAEA,uD;AACA,mB;AACA,0E;AACA,gH;AACA,iB;AACA,oB;AACA,qB;AACA,mB;AACA,mC;AACA,wB;AACA,qC;AACA,wC;AACA,yD;AACA,c;;AAEA,8E;AACA,qE;AACA,sC;AACA,kC;;AAEA,0E;AACA,6C;AACA,yF;AACA,U;;AAEA,uC;;AAEA,0E;AACA,wC;AACA,6C;AACA,U;AACA,sC;AACA,sB;;AAEA,6D;AACA,2C;AACA,kB;AACA,yB;AACA,8B;AACA,Y;AACA,+F;AACA,2D;AACA,+C;AACA,W;;AAEA,+E;AACA,qD;AACA,qD;AACA,uB;AACA,oB;AACA,Y;AACA,6B;AACA,wB;AACA,W;AACA,wD;AACA,wB;AACA,mB;AACA,sB;AACA,c;AACA,mC;AACA,4C;AACA,Y;AACA,uC;AACA,W;AACA,wE;AACA,+B;AACA,W;AACA,kD;AACA,8C;AACA,oC;AACA,U;AACA,4B;AACA,qF;AACA,U;AACA,S;AACA,yB;AACA,gD;AACA,S;AACA,oC;AACA,Q;;AAEA,gB;AACA,O;AACA,M;AACA,O;AACA,M;AACA,oB;AACA,kF;AACA,I;;AAEA,2B;AACA,+C;AACA,wC;AACA,I;AACA,G;AACA,G;;AAEA,C;;AAEA,G;AACA,uC;AACA,+B;AACA,0B;AACA,wC;AACA,iH;AACA,iB;AACA,Y;;AAEA,2B;AACA,mC;AACA,iD;;AAEA,8B;AACA,4B;AACA,qB;AACA,a;AACA,oB;AACA,M;AACA,Y;AACA,2B;AACA,yB;AACA,a;AACA,qB;AACA,M;AACA,K;AACA,qB;AACA,I;AACA,G;AACA,6D;AACA,G;AACA,G;;AAEA,K;AACA,6D;AACA,I;AACA,gC;AACA,4B;AACA,sE;AACA,G;;AAEA,I;AACA,sC;AACA,wB;AACA,qB;AACA,qB;AACA,8B;AACA,+B;AACA,8B;AACA,gC;AACA,I;AACA,uG;AACA,8E;AACA,gB;AACA,gB;AACA,c;AACA,e;AACA,c;AACA,gB;AACA,iB;AACA,qD;;AAEA,0C;AACA,uB;AACA,qB;AACA,qB;AACA,U;AACA,qC;AACA,Y;AACA,oB;AACA,mB;AACA,K;AACA,K;AACA,Q;AACA,c;AACA,W;AACA,kB;AACA,I;AACA,kB;AACA,kC;AACA,2B;;AAEA,gB;AACA,mC;AACA,kB;AACA,U;AACA,qC;AACA,Y;AACA,iB;AACA,gB;AACA,K;AACA,I;AACA,iB;AACA,gC;AACA,0B;;AAEA,kB;AACA,qC;AACA,kB;AACA,U;AACA,qC;AACA,Y;AACA,iB;AACA,gB;AACA,K;AACA,I;AACA,mB;AACA,oC;AACA,4B;;AAEA,mB;AACA,sC;AACA,W;AACA,iB;AACA,I;AACA,oB;AACA,sC;AACA,6B;;AAEA,iF;AACA,0E;AACA,wB;AACA,0B;AACA,sB;AACA,I;AACA,K;AACA,yE;AACA,wB;AACA,qE;AACA,mE;AACA,4B;AACA,sB;AACA,I;AACA,K;;AAEA,qC;AACA,kC;AACA,gB;AACA,2B;AACA,uB;AACA,4B;AACA,4B;AACA,wB;AACA,4B;AACA,6B;AACA,yB;AACA,I;AACA,I;;AAEA,c;AACA,6B;AACA,yB;AACA,0B;AACA,K;AACA,K;AACA,qB;AACA,oD;AACA,G;;AAEA,I;AACA,wE;AACA,yB;AACA,yB;AACA,I;AACA,sC;AACA,wC;AACA,8B;AACA,gC;AACA,iF;AACA,kE;AACA,G;AACA,gC;AACA,kE;AACA,G;AACA,gB;AACA,G;;;AAGA,I;AACA,e;AACA,iD;AACA,I;AACA,wB;AACA,c;AACA,a;AACA,I;AACA,sB;AACA,iB;AACA,4C;AACA,sB;AACA,G;AACA,+C;AACA,G;;AAEA,I;AACA,iC;AACA,oC;AACA,oC;AACA,gC;AACA,I;AACA,6B;AACA,0B;AACA,M;AACA,I;AACA,S;AACA,S;AACA,Q;AACA,K;AACA,0C;;AAEA,sC;AACA,0C;AACA,I;AACA,sC;AACA,0C;AACA,I;AACA,4B;AACA,G;;AAEA,I;AACA,0B;AACA,gC;AACA,gC;AACA,4B;AACA,iE;AACA,wC;AACA,oC;AACA,I;AACA,8C;AACA,U;;AAEA,oB;AACA,W;AACA,W;AACA,qB;AACA,mB;AACA,e;AACA,W;AACA,G;;AAEA,uD;AACA,mC;AACA,4D;AACA,uB;AACA,qB;AACA,gB;AACA,K;AACA,oB;AACA,a;AACA,G;;AAEA,I;AACA,+B;AACA,mC;AACA,kC;AACA,yB;AACA,0B;AACA,0C;AACA,qF;AACA,I;AACA,uD;;AAEA,4B;;AAEA,2C;AACA,uD;AACA,S;AACA,S;AACA,6B;AACA,8B;AACA,K;;AAEA,kC;AACA,qC;AACA,oC;AACA,G;;AAEA,U;AACA,iB;AACA,G;;AAEA,sC;AACA,uB;AACA,c;AACA,a;AACA,M;AACA,I;AACA,E;AACA,+B;AACA,G;;AAEA,I;AACA,oD;AACA,yB;AACA,0B;AACA,4B;AACA,G;AACA,I;AACA,6C;AACA,sB;AACA,4C;AACA,6B;;AAEA,yB;AACA,2B;;AAEA,iE;AACA,gB;AACA,iB;AACA,K;;AAEA,e;AACA,6B;AACA,G;AACA,G;;AAEA,I;AACA,kB;AACA,qF;AACA,gD;AACA,I;AACA,qB;AACA,qC;AACA,sE;AACA,G;;AAEA,I;AACA,oB;AACA,uB;AACA,qB;AACA,qB;AACA,yB;AACA,0B;AACA,I;AACA,6C;AACA,iB;AACA,6B;AACA,K;AACA,e;;AAEA,wB;AACA,6B;AACA,oB;AACA,S;AACA,S;AACA,iB;AACA,kB;AACA,M;AACA,G;;AAEA,0D;;AAEA,wC;AACA,2C;AACA,qE;AACA,iB;AACA,U;AACA,8B;AACA,0F;AACA,wD;AACA,G;AACA,qB;AACA,G;;AAEA,I;AACA,oF;AACA,G;AACA,0B;AACA,qB;AACA,qB;AACA,0B;AACA,2B;AACA,I;AACA,0D;;AAEA,U;;AAEA,wC;AACA,mC;;AAEA,qD;AACA,+B;AACA,iB;AACA,iB;AACA,U;AACA,W;AACA,W;AACA,K;;AAEA,gB;AACA,iC;AACA,Y;AACA,a;AACA,e;;AAEA,a;;AAEA,yB;AACA,oD;AACA,gB;AACA,uB;AACA,S;AACA,S;AACA,iB;AACA,kB;AACA,M;AACA,iB;AACA,yB;AACA,I;;;AAGA,kB;AACA,uC;;AAEA,8C;AACA,uC;AACA,qE;AACA,e;AACA,qB;AACA,qB;AACA,Q;;AAEA,yC;AACA,oB;AACA,iD;AACA,wC;AACA,Q;AACA,M;AACA,K;AACA,K;;AAEA,0C;AACA,wH;;AAEA,uD;AACA,6B;AACA,W;AACA,U;AACA,S;AACA,O;AACA,oB;;AAEA,mB;AACA,gC;AACA,W;AACA,8F;AACA,sC;;AAEA,2F;AACA,kF;AACA,yC;AACA,0B;AACA,0E;AACA,O;AACA,kB;AACA,O;AACA,I;AACA,G;;AAEA,a;AACA,G;;AAEA,I;AACA,oE;AACA,I;AACA,W;AACA,mC;AACA,uB;AACA,W;AACA,oB;AACA,8D;AACA,kD;AACA,O;AACA,K;AACA,I;;AAEA,mC;AACA,W;AACA,Y;AACA,gB;AACA,iB;AACA,a;AACA,O;AACA,K;AACA,I;;AAEA,qC;AACA,W;AACA,oB;AACA,oB;AACA,a;AACA,O;AACA,K;AACA,I;;AAEA,0C;AACA,W;AACA,Y;AACA,gB;AACA,qB;AACA,O;AACA,K;AACA,I;AACA,oC;AACA,W;AACA,oB;AACA,wB;AACA,qB;AACA,iB;AACA,O;AACA,K;AACA,I;AACA,yC;AACA,6B;AACA,iC;AACA,0H;AACA,iC;AACA,wB;AACA,8B;AACA,8B;AACA,0B;AACA,0B;AACA,mD;;AAEA,W;AACA,M;AACA,0B;AACA,0B;AACA,iB;AACA,uB;AACA,uB;AACA,kB;AACA,iC;AACA,mB;AACA,wB;AACA,wB;AACA,iB;AACA,6B;AACA,6B;AACA,iB;AACA,4B;AACA,4B;AACA,kB;AACA,iC;AACA,mB;AACA,+B;AACA,+B;;AAEA,4B;AACA,K;AACA,I;;AAEA,K;AACA,qF;AACA,K;AACA,2C;AACA,uB;AACA,qB;AACA,mD;AACA,oC;AACA,yC;AACA,yC;AACA,S;;AAEA,W;AACA,mB;AACA,kC;AACA,8D;AACA,wC;AACA,6E;AACA,qC;AACA,gE;AACA,+B;AACA,iD;AACA,K;AACA,G;AACA,sH;AACA,sB;AACA,yC;AACA,kC;AACA,mC;AACA,qB;AACA,M;AACA,4H;AACA,uB;AACA,qC;AACA,8B;AACA,+B;AACA,a;AACA,M;AACA,yH;AACA,sB;AACA,wC;AACA,kC;AACA,mC;AACA,iB;AACA,M;AACA,sH;AACA,qB;AACA,oC;AACA,8B;AACA,+B;AACA,a;AACA,M;AACA,I;AACA,e;AACA,G;AACA,G;;AAEA,I;AACA,+B;AACA,sB;AACA,qB;AACA,qB;AACA,yB;AACA,0B;AACA,I;AACA,2C;AACA,c;AACA,6B;;AAEA,mD;AACA,U;AACA,qB;;AAEA,4D;AACA,kB;AACA,8B;AACA,oB;;AAEA,iB;AACA,G;;;AAGA,C;;;AAGA,I;AACA,8B;AACA,uB;AACA,mC;AACA,kC;AACA,wD;AACA,I;AACA,sC;;AAEA,sB;AACA,sB;AACA,yD;AACA,W;AACA,a;;AAEA,uC;AACA,mC;AACA,G;;AAEA,wE;AACA,U;AACA,0B;AACA,G;AACA,yB;AACA,mB;AACA,G;;AAEA,0C;AACA,e;;AAEA,4F;AACA,gB;AACA,gB;AACA,sB;AACA,M;AACA,G;;AAEA,iB;AACA,qD;AACA,uD;AACA,W;AACA,2C;AACA,O;AACA,yC;AACA,uB;AACA,mE;AACA,iD;AACA,qC;AACA,M;AACA,K;AACA,qC;AACA,K;AACA,G;AACA,E;AACA,iB;AACA,G;;AAEA,I;AACA,kF;AACA,I;AACA,yC;AACA,iB;AACA,Y;AACA,S;;AAEA,6C;AACA,qC;AACA,6C;AACA,0C;AACA,0G;AACA,G;AACA,yG;;AAEA,2E;AACA,8E;AACA,wE;AACA,yC;;AAEA,U;AACA,iB;AACA,e;AACA,c;AACA,I;AACA,G;;AAEA,I;AACA,+D;AACA,I;AACA,iD;AACA,mB;AACA,2B;AACA,mD;AACA,G;AACA,U;AACA,oD;AACA,O;AACA,I;AACA,G;;AAEA,I;AACA,2E;AACA,mC;AACA,uB;AACA,qB;AACA,qB;AACA,yB;AACA,qF;AACA,sC;AACA,2B;AACA,0F;AACA,gE;AACA,sD;AACA,I;AACA,qF;;AAEA,sB;AACA,mC;AACA,0C;AACA,W;AACA,c;AACA,O;AACA,oB;AACA,O;AACA,Q;AACA,mB;AACA,e;AACA,mB;AACA,S;AACA,U;AACA,Y;AACA,Y;AACA,mB;AACA,qB;AACA,kB;AACA,Y;;AAEA,K;AACA,qF;AACA,sF;AACA,0C;AACA,K;AACA,4B;AACA,Y;AACA,S;AACA,+B;;AAEA,gH;AACA,oE;AACA,0E;AACA,+D;;AAEA,sC;AACA,oF;;AAEA,G;AACA,kB;;AAEA,yD;AACA,e;AACA,4D;AACA,2D;;AAEA,gC;AACA,uF;AACA,8F;AACA,yC;AACA,K;;AAEA,+B;AACA,8B;AACA,sB;AACA,sC;AACA,uC;AACA,uB;AACA,K;AACA,wB;AACA,I;AACA,G;;AAEA,K;AACA,qF;AACA,K;AACA,gC;AACA,+B;AACA,2C;AACA,kD;AACA,M;;AAEA,sC;AACA,qC;;AAEA,8B;AACA,qF;AACA,qE;AACA,I;;AAEA,gC;AACA,sC;AACA,sB;AACA,0B;AACA,uB;AACA,K;AACA,I;;AAEA,2B;AACA,c;AACA,c;AACA,G;;AAEA,K;AACA,mE;AACA,wB;AACA,0B;AACA,K;AACA,gC;AACA,a;AACA,yB;AACA,W;AACA,8B;AACA,I;AACA,G;;AAEA,K;AACA,4E;AACA,2C;AACA,K;AACA,+B;AACA,qB;AACA,iB;AACA,mH;AACA,S;AACA,Q;AACA,M;;AAEA,iC;AACA,kB;AACA,sB;AACA,qB;AACA,O;AACA,I;AACA,I;;AAEA,I;AACA,oC;AACA,K;;AAEA,gC;AACA,0C;AACA,iB;AACA,I;AACA,2C;AACA,kB;AACA,I;AACA,6C;AACA,6C;AACA,sC;AACA,wB;AACA,I;AACA,I;AACA,iD;AACA,iD;AACA,wB;AACA,wB;AACA,I;AACA,I;;;AAGA,qE;AACA,0C;AACA,2D;AACA,I;;AAEA,8C;AACA,yC;AACA,6B;AACA,2B;AACA,I;AACA,mB;AACA,uB;AACA,I;;AAEA,+C;AACA,yD;AACA,e;AACA,oB;AACA,I;AACA,+B;AACA,uB;AACA,I;AACA,uF;AACA,iC;AACA,oB;AACA,I;AACA,uB;AACA,I;AACA,iD;AACA,mB;AACA,2D;AACA,I;AACA,iD;AACA,mB;AACA,kC;AACA,I;;AAEA,sB;AACA,sC;AACA,6C;AACA,qB;AACA,6D;AACA,I;AACA,+B;AACA,wC;AACA,I;AACA,sC;AACA,2C;AACA,wC;AACA,I;;AAEA,2D;AACA,4B;AACA,0B;AACA,M;AACA,+E;AACA,M;AACA,2B;AACA,iB;AACA,yB;AACA,0F;AACA,8C;AACA,uC;AACA,uC;AACA,2B;AACA,O;AACA,Q;AACA,0B;AACA,K;AACA,yC;AACA,K;AACA,M;AACA,uD;AACA,M;AACA,yB;AACA,Y;AACA,qC;AACA,uC;AACA,yB;AACA,wB;AACA,M;AACA,K;AACA,M;AACA,iC;AACA,M;AACA,yB;AACA,c;AACA,mB;AACA,K;AACA,mB;AACA,K;AACA,M;AACA,iC;AACA,M;AACA,yB;;AAEA,qC;AACA,+C;AACA,+C;;AAEA,e;AACA,2B;AACA,K;AACA,c;AACA,yB;AACA,K;AACA,mD;AACA,+C;;AAEA,qC;AACA,4E;AACA,I;AACA,K;AACA,E;AACA,qB;;;AAGA,mB;AACA,uB;AACA,uC;AACA,8B;AACA,I;AACA,6E;AACA,uB;AACA,I;AACA,6B;AACA,qB;AACA,6B;AACA,oE;;AAEA,kB;AACA,uB;AACA,iC;AACA,6B;AACA,G;AACA,qD;AACA,gC;AACA,8B;AACA,G;AACA,kD;AACA,+B;;AAEA,iB;AACA,G;;AAEA,I;AACA,4E;AACA,8E;AACA,wB;AACA,G;AACA,wE;AACA,I;;AAEA,2B;AACA,qB;AACA,6B;;AAEA,gD;AACA,4F;AACA,oC;AACA,qC;AACA,G;;AAEA,U;AACA,yB;AACA,wB;AACA,8B;AACA,+B;AACA,I;AACA,G;;AAEA,I;AACA,oE;AACA,qC;AACA,I;AACA,mC;AACA,6C;AACA,oB;AACA,0B;AACA,U;AACA,G;;AAEA,qB;AACA,+B;AACA,0B;AACA,wC;AACA,wC;AACA,sB;AACA,sB;AACA,uC;AACA,+D;AACA,6B;AACA,2B;;AAEA,oB;AACA,a;AACA,0B;AACA,wB;AACA,K;AACA,0C;AACA,oC;AACA,iB;AACA,gC;AACA,8B;AACA,O;AACA,M;AACA,G;;AAEA,oB;AACA,+C;AACA,2C;AACA,sC;AACA,M;AACA,G;;AAEA,gC;;AAEA,a;AACA,gC;AACA,a;AACA,wC;AACA,0F;;AAEA,+G;;;AAGA,2D;;AAEA,kD;AACA,4B;AACA,kE;AACA,K;;AAEA,sD;;AAEA,uB;AACA,+F;AACA,gB;AACA,4B;AACA,uB;AACA,oE;AACA,Q;AACA,uB;AACA,K;;AAEA,iF;AACA,I;;AAEA,oC;AACA,c;AACA,0C;AACA,wC;AACA,M;;AAEA,iF;AACA,kB;AACA,4E;AACA,I;;AAEA,mC;AACA,sC;AACA,G;AACA,G;;AAEA,I;AACA,+C;AACA,I;AACA,kE;AACA,yB;AACA,0I;;AAEA,2F;AACA,yJ;AACA,mC;AACA,G;;AAEA,I;AACA,wE;AACA,I;AACA,iE;AACA,wC;AACA,yB;AACA,E;AACA,G;;AAEA,yC;AACA,+B;AACA,I;AACA,8E;AACA,wC;AACA,G;AACA,uB;AACA,qB;AACA,qB;AACA,I;AACA,6B;AACA,2C;AACA,6B;AACA,+B;;AAEA,gB;AACA,yC;AACA,qC;AACA,qB;AACA,I;AACA,4C;AACA,I;;AAEA,mD;AACA,4G;AACA,yB;AACA,oF;AACA,I;AACA,wB;AACA,iC;AACA,I;;AAEA,+B;AACA,gB;AACA,c;AACA,oB;AACA,mB;AACA,K;AACA,S;AACA,uB;AACA,sC;AACA,iC;AACA,M;;AAEA,oE;AACA,sC;;AAEA,sC;AACA,gC;;AAEA,yC;AACA,uB;AACA,6C;;AAEA,kB;AACA,yC;AACA,iB;AACA,kB;;AAEA,uC;;AAEA,oD;AACA,0B;AACA,qC;AACA,sB;;AAEA,mE;AACA,oC;AACA,2B;;AAEA,iC;;AAEA,0C;AACA,6C;AACA,O;;AAEA,2E;AACA,sD;AACA,0B;AACA,iD;;AAEA,iB;AACA,iC;AACA,qB;;AAEA,sE;AACA,iC;AACA,iF;AACA,2B;AACA,iD;AACA,+C;AACA,4E;;AAEA,kB;AACA,wC;;AAEA,gF;AACA,6B;AACA,4B;AACA,iD;AACA,0C;AACA,kC;AACA,wC;AACA,U;AACA,iD;AACA,yC;AACA,kC;AACA,wC;AACA,U;AACA,iD;AACA,qC;AACA,S;AACA,U;AACA,S;;AAEA,M;AACA,Y;AACA,2B;AACA,K;;AAEA,mC;;AAEA,uB;AACA,yB;AACA,6B;AACA,mC;AACA,K;;AAEA,mB;AACA,K;AACA,G;AACA,iB;AACA,E;AACA,G;;AAEA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;;AAEA,G;AACA,e;AACA,G;AACA,4B;AACA,2B;;AAEA,G;AACA,2B;AACA,G;AACA,c;;AAEA,I;AACA,0E;AACA,4B;AACA,4B;AACA,4B;AACA,I;AACA,sC;AACA,qB;AACA,wD;AACA,yC;AACA,4B;;AAEA,8B;AACA,sC;AACA,oD;AACA,G;AACA,uD;;AAEA,iD;;AAEA,qD;AACA,iB;AACA,gE;AACA,mB;AACA,+B;AACA,2C;AACA,G;;AAEA,8B;AACA,G;;AAEA,I;AACA,oC;AACA,0B;AACA,I;AACA,yB;AACA,qB;AACA,+B;AACA,6B;AACA,sB;AACA,wC;;AAEA,yB;AACA,wB;AACA,8B;AACA,Q;;;AAGA,qE;AACA,mC;AACA,6C;AACA,G;;AAEA,c;AACA,kC;;AAEA,sD;AACA,uB;AACA,4D;AACA,6B;AACA,G;;AAEA,qC;AACA,sB;AACA,mB;AACA,G;;AAEA,iB;AACA,G;;AAEA,I;AACA,uC;AACA,I;AACA,2D;;AAEA,I;AACA,kD;AACA,I;AACA,+B;AACA,0F;AACA,gF;AACA,gF;AACA,oE;AACA,qD;;AAEA,+B;AACA,0C;AACA,0C;AACA,K;AACA,qB;AACA,iF;AACA,gE;AACA,sD;AACA,K;AACA,G;;AAEA,I;AACA,gE;AACA,I;AACA,kF;;AAEA,4D;AACA,yD;AACA,6D;AACA,Q;AACA,uC;;AAEA,oB;AACA,sC;AACA,uC;;AAEA,iE;AACA,iC;AACA,qF;AACA,sG;AACA,8C;AACA,gB;AACA,mE;AACA,kB;AACA,qE;AACA,I;AACA,sB;AACA,oB;AACA,M;AACA,G;AACA,G;;AAEA,I;AACA,sF;AACA,0C;AACA,I;AACA,8B;AACA,kB;AACA,uB;AACA,a;;AAEA,e;;AAEA,iD;AACA,6D;AACA,4D;AACA,4B;AACA,2C;AACA,mD;AACA,kB;AACA,W;AACA,uB;;AAEA,sE;AACA,4E;AACA,sE;AACA,kE;AACA,uB;AACA,uC;AACA,0D;AACA,M;AACA,uB;AACA,uC;AACA,0D;AACA,M;AACA,K;AACA,I;AACA,G;;AAEA,E;AACA,mD;AACA,+B;AACA,+C;AACA,kB;AACA,uC;AACA,oD;AACA,kB;AACA,uC;AACA,I;AACA,K;AACA,+B;AACA,G;;AAEA,I;AACA,wD;AACA,G;AACA,mD;AACA,I;AACA,4B;AACA,qB;AACA,e;AACA,U;;AAEA,iB;AACA,kC;AACA,yE;AACA,6B;AACA,sC;AACA,gC;AACA,K;AACA,qC;;AAEA,U;AACA,6B;AACA,0B;AACA,I;AACA,mE;AACA,G;;AAEA,6B;;AAEA,G;;AAEA,I;AACA,8B;AACA,0B;AACA,I;AACA,mC;;AAEA,I;AACA,gE;AACA,wG;AACA,I;AACA,sC;AACA,4E;AACA,6F;AACA,2B;AACA,2B;AACA,G;AACA,G;;AAEA,I;AACA,qE;AACA,I;AACA,uB;AACA,yB;AACA,sB;AACA,G;;AAEA,kD;AACA,G;;AAEA,I;AACA,yE;AACA,6B;AACA,6B;AACA,I;AACA,oC;AACA,mD;AACA,gD;AACA,uB;AACA,+B;AACA,gB;AACA,I;AACA,c;AACA,G;;AAEA,I;AACA,sE;AACA,I;AACA,sC;;AAEA,U;;AAEA,4B;AACA,oB;;AAEA,gC;AACA,qE;AACA,G;AACA,wB;AACA,G;;AAEA,I;AACA,6E;AACA,yC;AACA,I;AACA,kD;AACA,mB;AACA,K;AACA,0B;AACA,4B;AACA,U;AACA,6B;AACA,U;AACA,uB;AACA,e;AACA,gB;AACA,e;AACA,wB;;AAEA,2C;AACA,+C;AACA,c;AACA,G;AACA,sB;;AAEA,sB;AACA,8C;AACA,wE;AACA,6B;;AAEA,kD;;AAEA,+C;AACA,iB;AACA,mE;AACA,K;;AAEA,mE;AACA,6C;AACA,mE;;AAEA,oD;AACA,Y;AACA,kE;AACA,+D;AACA,M;AACA,M;AACA,iB;AACA,qC;AACA,K;;AAEA,wB;AACA,iH;AACA,gE;;;AAGA,gB;AACA,gB;AACA,uC;AACA,Y;AACA,sD;AACA,K;;AAEA,gB;AACA,yB;;AAEA,I;;AAEA,0B;AACA,G;AACA,c;AACA,G;AACA,yC;;AAEA,iC;AACA,yC;AACA,6B;AACA,U;AACA,yC;AACA,G;AACA,G;AACA,gC;AACA,kF;AACA,iC;AACA,G;AACA,kD;AACA,+D;AACA,4E;AACA,qC;AACA,iF;AACA,mC;AACA,G;AACA,0C;AACA,Q;AACA,0B;AACA,sB;AACA,yE;;AAEA,+C;;AAEA,mB;AACA,gB;AACA,sB;AACA,gB;AACA,4F;AACA,I;AACA,G;AACA,2B;AACA,G;AACA,6C;AACA,kC;AACA,0C;AACA,+B;AACA,2C;AACA,mC;AACA,6E;AACA,G;AACA,G;AACA,6F;AACA,iD;AACA,4B;AACA,uD;;AAEA,+E;AACA,6D;AACA,uD;AACA,G;AACA,+C;AACA,wE;AACA,G;AACA,uD;AACA,uD;AACA,kD;AACA,wB;AACA,e;AACA,G;AACA,sC;AACA,G;AACA,qC;AACA,2B;AACA,G;AACA,mD;;AAEA,gC;AACA,4B;AACA,mB;AACA,G;AACA,E;AACA,2C;AACA,qB;AACA,yC;AACA,8B;AACA,M;AACA,G;;AAEA,uF;AACA,mC;AACA,mC;AACA,2C;;AAEA,0E;AACA,qE;AACA,2D;AACA,mB;AACA,kD;AACA,I;AACA,e;AACA,G;AACA,6B;AACA,G;AACA,0C;AACA,sC;;AAEA,oB;AACA,gB;AACA,2B;AACA,e;AACA,Y;AACA,4E;AACA,K;;AAEA,+B;AACA,4B;AACA,uE;AACA,yB;AACA,U;AACA,Y;AACA,8B;AACA,G;AACA,G;AACA,+C;AACA,6B;AACA,E;AACA,E;AACA,yE;;AAEA,sB;AACA,8B;AACA,oC;AACA,qC;AACA,8B;;;AAGA,G;AACA,mB;AACA,G;AACA,mD;;AAEA,qB;AACA,2C;;;AAGA,I;AACA,8B;AACA,6B;AACA,yB;AACA,0B;AACA,I;AACA,mD;AACA,sB;AACA,c;AACA,O;AACA,O;;AAEA,+B;;AAEA,0C;AACA,6D;AACA,2B;AACA,4C;;;AAGA,gC;AACA,wB;AACA,qB;AACA,mC;AACA,sB;;;AAGA,yC;;AAEA,kF;AACA,sF;AACA,2E;AACA,4B;;AAEA,8D;;AAEA,6C;AACA,8D;AACA,8D;AACA,Q;AACA,yC;AACA,gB;AACA,sC;AACA,I;;AAEA,G;AACA,G;;;AAGA,I;AACA,uF;AACA,qB;AACA,I;AACA,wB;AACA,+B;AACA,G;;AAEA,I;AACA,gF;AACA,wD;AACA,G;AACA,qB;AACA,qB;AACA,yB;AACA,0B;AACA,I;AACA,2C;;AAEA,2B;AACA,sC;AACA,uB;;AAEA,2E;AACA,2B;AACA,e;AACA,Y;AACA,+B;AACA,8B;AACA,wC;AACA,2C;AACA,+B;AACA,kC;AACA,iC;AACA,oC;AACA,iC;AACA,iB;AACA,wD;AACA,sB;AACA,+B;AACA,gC;AACA,Y;AACA,qB;AACA,iD;AACA,qD;AACA,qD;AACA,+C;AACA,O;;AAEA,0B;AACA,sD;AACA,kB;AACA,wB;AACA,yB;AACA,Q;AACA,K;AACA,e;AACA,K;;AAEA,sE;AACA,gC;AACA,8C;AACA,yI;AACA,0C;AACA,M;AACA,O;AACA,I;AACA,K;;AAEA,G;;;AAGA,I;AACA,6E;AACA,qD;AACA,G;AACA,oD;AACA,I;AACA,+C;AACA,sB;AACA,e;AACA,uB;AACA,U;AACA,Y;AACA,c;;AAEA,wC;AACA,sC;AACA,yB;AACA,6C;AACA,wB;AACA,G;;;AAGA,iB;;AAEA,iB;AACA,gB;AACA,4D;AACA,O;AACA,O;AACA,O;AACA,O;AACA,a;AACA,a;AACA,W;AACA,W;AACA,kB;AACA,wB;AACA,c;AACA,a;AACA,gB;AACA,+B;AACA,mG;AACA,qB;AACA,yG;AACA,4E;AACA,+D;AACA,M;;AAEA,wB;AACA,wB;AACA,sC;AACA,0B;AACA,mB;AACA,O;AACA,iB;AACA,O;AACA,I;AACA,yB;AACA,gB;AACA,O;AACA,gB;AACA,O;AACA,I;;AAEA,uB;AACA,mC;AACA,kC;AACA,kC;AACA,wC;AACA,wC;AACA,Y;AACA,yB;AACA,qB;AACA,K;;AAEA,gC;AACA,oD;;AAEA,iF;AACA,a;AACA,4B;AACA,wB;AACA,Y;AACA,4B;AACA,wB;AACA,K;AACA,M;;AAEA,uC;AACA,yB;;AAEA,mC;AACA,kC;AACA,0C;AACA,0C;AACA,0C;AACA,0C;AACA,6C;AACA,6B;AACA,2B;AACA,8B;;AAEA,mB;;AAEA,iC;AACA,Y;;AAEA,wB;AACA,oB;AACA,oB;AACA,uB;AACA,uB;AACA,6C;AACA,W;AACA,yC;AACA,6B;AACA,iC;AACA,+D;AACA,gE;AACA,iD;AACA,kD;AACA,Q;AACA,+E;AACA,+C;AACA,6B;AACA,6C;AACA,mC;;AAEA,qB;AACA,Q;;AAEA,6B;AACA,yB;AACA,4B;AACA,a;AACA,4E;AACA,0C;AACA,M;;AAEA,iF;AACA,mE;AACA,kB;AACA,K;;AAEA,+E;AACA,W;AACA,oB;AACA,I;;AAEA,gE;AACA,kC;AACA,+D;;AAEA,8B;;AAEA,mE;AACA,yD;;AAEA,gC;;;AAGA,U;AACA,8E;AACA,0B;AACA,6B;AACA,gC;AACA,I;AACA,e;AACA,G;;AAEA,a;AACA,G;;AAEA,I;AACA,+D;AACA,qE;AACA,I;AACA,6B;AACA,oE;AACA,sB;;AAEA,2B;;AAEA,4C;AACA,8E;AACA,0C;AACA,kE;AACA,W;AACA,6D;AACA,I;;AAEA,2B;AACA,yC;AACA,G;;AAEA,gB;AACA,G;;AAEA,I;AACA,mC;AACA,uB;AACA,qB;AACA,qB;AACA,I;AACA,kC;;AAEA,I;AACA,oC;AACA,uB;AACA,I;AACA,wB;AACA,c;AACA,6D;AACA,qB;AACA,I;AACA,sB;AACA,iB;AACA,4C;AACA,sB;AACA,G;AACA,qB;AACA,gD;AACA,G;;AAEA,I;AACA,yE;AACA,uC;AACA,qB;AACA,qB;AACA,qB;AACA,I;AACA,6B;AACA,qC;AACA,oB;AACA,W;AACA,W;AACA,W;AACA,G;AACA,kE;AACA,e;AACA,qC;AACA,G;;AAEA,I;AACA,4E;AACA,uE;AACA,qC;AACA,G;AACA,8C;AACA,I;AACA,qB;AACA,c;AACA,W;;AAEA,uB;AACA,a;AACA,oE;AACA,G;;AAEA,sC;AACA,kD;;AAEA,iB;AACA,G;;AAEA,I;AACA,+C;AACA,uB;AACA,qB;AACA,qB;AACA,yB;AACA,0B;AACA,I;AACA,6C;AACA,qC;AACA,uB;;AAEA,6B;AACA,a;AACA,S;AACA,S;AACA,iB;AACA,kB;AACA,M;AACA,G;AACA,a;AACA,G;;AAEA,I;AACA,oF;AACA,I;AACA,qC;AACA,iH;AACA,G;;AAEA,I;AACA,0E;AACA,2B;AACA,8B;AACA,I;AACA,8C;AACA,iB;AACA,kC;AACA,kE;;AAEA,gB;AACA,a;AACA,uE;AACA,wE;AACA,gB;AACA,K;;AAEA,uH;AACA,6C;AACA,mC;AACA,K;AACA,G;;AAEA,I;AACA,sE;AACA,G;AACA,I;AACA,W;AACA,8B;AACA,uC;AACA,6B;AACA,sB;AACA,iC;AACA,iC;AACA,8B;AACA,8B;AACA,0B;AACA,0B;AACA,Q;;AAEA,uD;AACA,iB;AACA,I;;AAEA,U;AACA,6B;AACA,uB;AACA,sB;AACA,wB;AACA,yB;AACA,qC;AACA,qC;AACA,iC;AACA,iC;AACA,K;;AAEA,sC;AACA,a;AACA,S;AACA,O;AACA,wB;AACA,sB;AACA,M;AACA,I;;AAEA,Y;AACA,kC;AACA,4B;AACA,2B;AACA,6B;AACA,8B;AACA,wC;AACA,wC;AACA,wC;AACA,wC;AACA,uB;AACA,gB;AACA,K;;AAEA,oB;AACA,c;;AAEA,I;AACA,4E;AACA,0C;;AAEA,iB;AACA,0B;AACA,I;;AAEA,8B;AACA,qC;AACA,e;AACA,e;AACA,I;;AAEA,qB;AACA,W;AACA,2B;AACA,c;AACA,a;AACA,mB;AACA,oB;AACA,qB;AACA,6B;AACA,mB;AACA,2B;AACA,yB;AACA,gB;AACA,K;AACA,I;AACA,K;AACA,8E;AACA,gF;AACA,8E;AACA,K;AACA,wC;AACA,wC;AACA,0D;AACA,kC;AACA,G;AACA,E;AACA,E;AACA,oD;AACA,kC;AACA,E;AACA,2E;;AAEA,oB;AACA,wB;AACA,C;;AAEA,+E;AACA,kE;AACA,+C;AACA,c;AACA,qC;;AAEA,qC;AACA,4B;AACA,qC;AACA,yC;AACA,wC;AACA,oB;AACA,E;;;AAGA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,kB;AACA,iB;;AAEA,e;AACA,I;AACA,6E;AACA,iF;AACA,oC;AACA,I;AACA,yD;AACA,wE;AACA,0C;AACA,G;;AAEA,I;AACA,6H;AACA,iF;AACA,I;AACA,sC;;AAEA,I;AACA,0D;AACA,I;AACA,iC;AACA,8B;AACA,+B;;AAEA,K;AACA,2D;AACA,K;AACA,2B;AACA,+C;AACA,c;;AAEA,mC;AACA,6D;AACA,qC;AACA,I;AACA,oB;AACA,4B;AACA,G;;AAEA,U;AACA,0C;AACA,+B;AACA,2C;AACA,6C;AACA,K;AACA,2B;AACA,mC;AACA,I;AACA,I;AACA,M;;AAEA,0B;AACA,sB;;AAEA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;;AAEA,G;AACA,iB;AACA,G;AACA,yC;AACA,kB;AACA,gB;AACA,wB;AACA,mB;;AAEA,yB;AACA,kB;AACA,E;AACA,C;;AAEA,kB;AACA,I;AACA,wB;AACA,I;AACA,wB;AACA,kB;AACA,oB;AACA,0B;AACA,sB;AACA,gC;AACA,sB;AACA,kB;AACA,iC;AACA,O;AACA,sC;AACA,sC;AACA,4D;AACA,uB;AACA,4C;AACA,Q;AACA,sB;AACA,yC;AACA,uB;;AAEA,gG;AACA,4B;AACA,gD;AACA,sH;AACA,G;AACA,+C;AACA,yB;AACA,uB;;AAEA,mB;AACA,kC;AACA,c;AACA,gB;AACA,oB;AACA,kB;AACA,4C;AACA,2D;AACA,K;;AAEA,gB;AACA,mG;AACA,E;AACA,e;AACA,wB;;AAEA,uB;AACA,0C;AACA,yB;AACA,W;AACA,S;AACA,S;AACA,2B;AACA,O;AACA,mB;AACA,gE;AACA,qC;AACA,6B;AACA,U;AACA,0E;AACA,6E;;AAEA,W;AACA,qB;AACA,6B;AACA,G;AACA,G;;AAEA,I;AACA,+C;AACA,I;AACA,4B;AACA,qB;AACA,+D;AACA,K;AACA,G;;AAEA,I;AACA,oF;AACA,uD;AACA,I;AACA,gC;AACA,uB;AACA,gB;AACA,sC;AACA,gC;AACA,mE;AACA,6F;AACA,sB;AACA,4B;AACA,gE;AACA,sC;AACA,8B;AACA,wB;AACA,e;AACA,W;AACA,Y;AACA,a;AACA,Y;;AAEA,8E;AACA,sD;AACA,kB;AACA,yC;AACA,gD;;AAEA,6B;AACA,4D;AACA,sC;AACA,uD;AACA,iB;AACA,I;;AAEA,2D;AACA,oE;AACA,yH;AACA,I;AACA,6E;AACA,iF;AACA,6E;AACA,6E;AACA,0B;AACA,I;;AAEA,uF;AACA,uE;AACA,0E;AACA,wE;AACA,6E;AACA,G;;AAEA,kB;AACA,yB;AACA,iD;AACA,kC;AACA,I;AACA,kB;AACA,G;AACA,G;;AAEA,I;AACA,iD;AACA,I;AACA,0D;AACA,uB;AACA,sB;AACA,gE;;AAEA,U;AACA,a;AACA,yE;AACA,gI;;AAEA,a;AACA,6E;AACA,iF;AACA,I;;AAEA,G;;AAEA,I;AACA,2C;AACA,I;AACA,6F;AACA,uB;AACA,wB;AACA,4B;AACA,oC;AACA,gD;AACA,qG;AACA,Q;;AAEA,iE;AACA,sD;AACA,+C;AACA,sD;;AAEA,iC;AACA,qB;AACA,+C;AACA,iD;AACA,G;;AAEA,U;AACA,Q;AACA,kB;AACA,I;AACA,G;;AAEA,I;AACA,sD;AACA,I;AACA,uE;AACA,6B;AACA,M;AACA,M;AACA,M;AACA,M;AACA,kC;AACA,gC;AACA,iB;AACA,G;;AAEA,I;AACA,2B;AACA,G;AACA,yB;AACA,sF;AACA,I;AACA,yC;AACA,kB;AACA,oB;AACA,0B;AACA,sB;AACA,6B;AACA,sB;AACA,oB;AACA,sB;AACA,kB;AACA,iC;AACA,4B;AACA,8C;AACA,8C;AACA,qD;AACA,qD;AACA,qD;AACA,+C;AACA,kD;AACA,6C;AACA,mD;AACA,gB;AACA,oB;AACA,Y;AACA,kD;AACA,W;AACA,e;AACA,wC;AACA,0D;AACA,Y;AACA,Y;AACA,gH;;AAEA,6B;AACA,uB;;AAEA,yB;AACA,sB;AACA,sG;;AAEA,gC;AACA,e;AACA,2B;AACA,kC;AACA,M;AACA,oB;AACA,mC;AACA,K;AACA,gB;AACA,wB;AACA,K;AACA,c;AACA,yB;AACA,K;AACA,8B;AACA,oB;AACA,iC;AACA,2C;AACA,W;AACA,I;;AAEA,sE;AACA,mE;AACA,0C;AACA,+C;AACA,qB;AACA,qB;AACA,O;AACA,I;AACA,G;;AAEA,yB;AACA,gC;;AAEA,uB;AACA,mC;AACA,6B;AACA,I;AACA,uB;AACA,6B;AACA,I;;AAEA,4F;AACA,0B;AACA,kB;AACA,iB;AACA,qB;AACA,O;AACA,yB;AACA,8B;AACA,a;AACA,Y;AACA,uB;AACA,+B;AACA,qB;AACA,2B;AACA,I;AACA,G;;AAEA,0D;AACA,2B;AACA,wG;;AAEA,+E;AACA,6E;AACA,4E;AACA,yE;AACA,iB;;AAEA,wD;AACA,iH;AACA,4B;AACA,I;;AAEA,gB;AACA,8B;AACA,2C;AACA,iB;AACA,I;;AAEA,4C;AACA,8B;AACA,yB;AACA,+C;AACA,uB;AACA,W;AACA,oC;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,qC;AACA,I;AACA,uB;AACA,2C;AACA,E;AACA,E;;AAEA,G;AACA,mD;AACA,0B;AACA,G;AACA,sD;AACA,kB;;AAEA,e;AACA,yB;AACA,uB;AACA,E;AACA,E;;AAEA,uC;AACA,C;AACA,I;AACA,iE;AACA,Y;AACA,I;AACA,sB;AACA,sB;AACA,wB;AACA,sB;AACA,8B;AACA,gC;AACA,0B;AACA,yB;AACA,mB;AACA,uB;AACA,yC;AACA,yB;AACA,iC;AACA,8B;AACA,a;AACA,Y;AACA,a;AACA,M;AACA,M;AACA,K;AACA,K;AACA,yB;AACA,2B;AACA,2B;AACA,gB;AACA,kC;;AAEA,2B;AACA,mB;AACA,wB;AACA,oB;AACA,0B;AACA,G;;AAEA,c;AACA,c;AACA,6C;AACA,c;AACA,kB;AACA,yB;AACA,K;AACA,mB;AACA,kC;AACA,I;AACA,mC;;AAEA,kD;AACA,e;AACA,yB;AACA,I;AACA,6B;AACA,yC;AACA,kD;AACA,I;AACA,U;AACA,U;AACA,G;AACA,W;AACA,wB;AACA,2B;AACA,G;;AAEA,+B;AACA,gB;AACA,c;AACA,qB;AACA,Y;AACA,gC;AACA,W;AACA,mB;AACA,qC;AACA,oB;AACA,M;AACA,gB;AACA,8C;AACA,K;AACA,I;AACA,mC;AACA,mD;AACA,yB;;AAEA,Y;AACA,gB;AACA,qC;AACA,yC;AACA,6C;AACA,Q;AACA,M;AACA,+B;AACA,yB;AACA,K;AACA,I;AACA,G;;AAEA,6B;AACA,+G;AACA,oB;AACA,yB;AACA,uC;AACA,iC;AACA,iD;AACA,kD;AACA,oC;AACA,oB;;AAEA,yB;AACA,gB;AACA,e;AACA,yD;AACA,oC;AACA,M;AACA,0B;AACA,6B;AACA,K;AACA,2C;AACA,wB;AACA,Q;AACA,Q;AACA,0B;AACA,M;AACA,mB;AACA,6B;AACA,Y;AACA,I;;AAEA,8C;AACA,wE;AACA,yD;AACA,yD;AACA,oB;AACA,oB;;AAEA,qC;AACA,S;AACA,S;AACA,4B;AACA,4B;AACA,M;AACA,gB;;AAEA,0C;AACA,gB;AACA,G;;AAEA,c;AACA,kB;AACA,G;;AAEA,I;AACA,gC;AACA,I;AACA,uB;AACA,8B;AACA,2C;AACA,E;AACA,mB;AACA,gC;AACA,E;AACA,E;;AAEA,G;AACA,uD;AACA,G;;AAEA,+B;;AAEA,I;AACA,mC;AACA,K;AACA,uC;AACA,0D;AACA,uD;;AAEA,yE;AACA,a;AACA,c;AACA,c;AACA,c;AACA,a;AACA,K;AACA,mC;AACA,e;AACA,G;AACA,E;AACA,c;AACA,G;;AAEA,kC;AACA,sD;AACA,G;AACA,C;AACA,kC;AACA,sD;AACA,G;;AAEA,I;AACA,kD;AACA,G;AACA,yE;AACA,I;AACA,8C;AACA,kE;AACA,kC;;AAEA,qB;AACA,8D;AACA,c;AACA,gD;AACA,qC;AACA,I;AACA,qC;AACA,G;AACA,E;AACA,a;AACA,G;;AAEA,I;AACA,wD;AACA,sB;AACA,I;AACA,sC;AACA,iD;AACA,0B;AACA,kC;AACA,gC;AACA,e;AACA,wC;AACA,mC;AACA,I;AACA,G;AACA,qI;AACA,kB;AACA,gB;AACA,2B;AACA,wB;AACA,K;AACA,I;AACA,K;AACA,E;AACA,E;;AAEA,G;AACA,2B;AACA,wB;AACA,0B;AACA,G;AACA,0C;AACA,kC;AACA,E;;AAEA,kB;;AAEA,I;AACA,qE;AACA,I;AACA,kB;AACA,yB;AACA,8B;AACA,oB;AACA,yB;AACA,8B;AACA,sB;AACA,mB;AACA,iB;AACA,iB;AACA,kB;AACA,oB;AACA,a;AACA,I;AACA,mB;AACA,2B;AACA,gC;AACA,sB;AACA,qB;;AAEA,W;AACA,iB;AACA,kB;AACA,sB;AACA,iB;AACA,W;AACA,qB;AACA,sB;AACA,oB;AACA,K;AACA,Q;AACA,Q;AACA,6B;AACA,sB;AACA,O;AACA,I;AACA,uB;AACA,e;AACA,mB;AACA,mB;AACA,mB;AACA,mB;AACA,mB;AACA,mB;AACA,gC;AACA,kC;AACA,wB;AACA,4B;AACA,4B;AACA,qB;AACA,oD;AACA,sB;AACA,oB;AACA,c;AACA,iB;AACA,gB;AACA,e;AACA,uE;AACA,O;AACA,iB;AACA,e;AACA,mB;AACA,Y;AACA,uE;AACA,O;AACA,oB;AACA,0B;AACA,yB;AACA,iB;AACA,qB;AACA,uB;AACA,uB;AACA,iB;AACA,gD;AACA,yB;AACA,0B;AACA,e;AACA,U;AACA,gB;AACA,0C;AACA,oD;AACA,iB;AACA,qB;AACA,W;AACA,oB;AACA,I;AACA,U;AACA,S;AACA,I;AACA,mD;AACA,G;;AAEA,I;AACA,0D;AACA,I;AACA,uB;AACA,kB;AACA,mB;AACA,wB;AACA,sB;AACA,W;AACA,S;AACA,O;AACA,I;AACA,e;AACA,mB;AACA,mB;AACA,oB;AACA,e;AACA,U;AACA,iB;AACA,iB;AACA,I;AACA,gB;AACA,kB;AACA,oB;AACA,gB;AACA,gB;AACA,4B;AACA,wB;AACA,iB;AACA,2B;AACA,mD;AACA,K;AACA,+E;AACA,G;AACA,G;;AAEA,I;AACA,yD;AACA,I;AACA,0B;AACA,W;AACA,U;AACA,U;AACA,I;AACA,U;AACA,gB;AACA,G;AACA,G;;AAEA,I;AACA,0D;AACA,I;AACA,2B;AACA,W;AACA,S;AACA,U;AACA,I;AACA,U;AACA,e;AACA,G;AACA,G;;AAEA,I;AACA,2D;AACA,I;AACA,4B;AACA,W;AACA,uB;AACA,Q;AACA,gC;AACA,0B;AACA,wB;AACA,I;AACA,U;AACA,c;AACA,G;AACA,G;AACA,I;AACA,wD;AACA,I;AACA,yB;AACA,W;AACA,uB;AACA,Q;AACA,S;AACA,yB;AACA,wB;AACA,I;AACA,U;AACA,c;AACA,G;AACA,G;;AAEA,I;AACA,uB;AACA,I;AACA,sC;;;AAGA,gC;AACA,e;;AAEA,iC;AACA,mD;;AAEA,kB;AACA,yB;AACA,0C;;AAEA,+D;AACA,+C;AACA,6C;AACA,8C;;AAEA,+B;;;AAGA,6B;AACA,uB;AACA,wC;;AAEA,uH;;;AAGA,+B;AACA,iC;;AAEA,+D;AACA,2B;AACA,sF;AACA,sC;;AAEA,qB;AACA,mC;AACA,mD;;AAEA,uB;AACA,8D;AACA,8D;;AAEA,a;AACA,+B;AACA,+B;AACA,+B;AACA,8B;;AAEA,oB;AACA,sC;AACA,uC;;AAEA,4C;AACA,4C;AACA,iB;AACA,kC;;AAEA,mB;AACA,4E;AACA,mB;AACA,kC;AACA,uC;;AAEA,E;AACA,gB;AACA,kB;AACA,sB;AACA,gB;AACA,uB;;AAEA,4B;AACA,8B;;AAEA,oB;AACA,2B;;AAEA,iB;AACA,0B;AACA,yB;AACA,2B;AACA,4B;AACA,4B;AACA,2B;AACA,4B;AACA,4B;AACA,+B;AACA,e;AACA,4B;AACA,4B;AACA,gC;AACA,gC;AACA,mC;AACA,0E;AACA,6B;AACA,oC;;;AAGA,0B;AACA,mB;AACA,sB;AACA,E;AACA,4B;AACA,6B;AACA,6B;;AAEA,mB;AACA,kB;AACA,kB;;AAEA,yB;AACA,6B;AACA,6B;;AAEA,sB;AACA,4G;AACA,a;;AAEA,gB;AACA,gC;;AAEA,a;AACA,gF;AACA,+C;AACA,mD;AACA,W;AACA,0B;AACA,I;;AAEA,+B;AACA,G;;AAEA,yD;;AAEA,mD;AACA,iE;AACA,wB;AACA,G;;AAEA,kD;AACA,kD;;;AAGA,6B;AACA,6B;AACA,gD;AACA,G;;AAEA,4B;AACA,mB;AACA,0B;AACA,0B;AACA,G;AACA,G;;AAEA,I;AACA,yB;AACA,I;AACA,qC;AACA,uB;AACA,uB;AACA,gD;AACA,6D;AACA,2E;AACA,S;AACA,8D;AACA,e;AACA,I;AACA,I;AACA,G;;AAEA,I;AACA,sF;AACA,I;AACA,qC;AACA,uB;AACA,sB;AACA,gC;AACA,kD;AACA,uD;AACA,+C;AACA,S;AACA,O;AACA,6C;;AAEA,wE;AACA,kE;;AAEA,qB;AACA,oC;;AAEA,0B;AACA,e;;AAEA,oD;AACA,gD;;AAEA,kD;AACA,uF;AACA,mF;AACA,gE;AACA,qC;AACA,kC;AACA,qG;AACA,0E;AACA,K;AACA,I;AACA,G;;AAEA,0B;AACA,6D;AACA,6C;;AAEA,4B;AACA,qE;AACA,I;AACA,G;;AAEA,a;AACA,G;;AAEA,I;AACA,2D;AACA,I;AACA,iC;AACA,kB;AACA,sB;;AAEA,gC;;AAEA,qD;AACA,qF;AACA,E;AACA,yB;AACA,sB;AACA,G;;AAEA,mC;AACA,uC;;AAEA,mE;;AAEA,uC;AACA,W;AACA,yC;AACA,mB;AACA,mB;;AAEA,iC;;AAEA,6C;AACA,uC;AACA,sB;AACA,K;;AAEA,yC;AACA,uB;AACA,0B;AACA,wB;AACA,4E;AACA,4E;AACA,M;;AAEA,wF;AACA,Y;;AAEA,2C;AACA,0B;AACA,oC;AACA,oC;;AAEA,sF;AACA,iF;AACA,0D;AACA,4D;AACA,+E;AACA,+E;AACA,M;;AAEA,2B;AACA,8B;AACA,sC;AACA,gC;AACA,oC;AACA,4C;AACA,gC;AACA,oC;AACA,O;AACA,M;AACA,K;AACA,I;AACA,K;AACA,G;;AAEA,I;AACA,qE;AACA,G;AACA,I;AACA,iF;AACA,gD;AACA,Y;AACA,iB;AACA,+C;AACA,2C;AACA,e;AACA,0C;AACA,yF;;AAEA,gB;AACA,wB;AACA,G;;AAEA,6E;AACA,S;AACA,iB;AACA,sD;AACA,wB;AACA,G;;AAEA,yB;AACA,sB;AACA,c;AACA,iD;AACA,G;;AAEA,yB;AACA,yC;;AAEA,gC;AACA,0B;AACA,sE;AACA,iD;AACA,4C;AACA,I;;AAEA,yB;AACA,U;AACA,iD;AACA,4B;AACA,I;AACA,sC;AACA,yB;AACA,I;AACA,0F;AACA,+E;AACA,G;;AAEA,qB;AACA,G;;AAEA,I;AACA,gE;AACA,wD;AACA,iG;AACA,wC;AACA,I;AACA,8C;AACA,kG;AACA,G;;AAEA,G;AACA,oE;AACA,oD;AACA,iG;AACA,4B;AACA,I;AACA,6C;AACA,iG;AACA,G;;AAEA,I;AACA,qE;AACA,mD;AACA,yB;AACA,6D;AACA,wE;AACA,I;AACA,4E;AACA,kB;AACA,sB;AACA,wB;AACA,sB;AACA,M;AACA,M;AACA,M;AACA,M;AACA,gE;AACA,6D;AACA,Q;AACA,wB;AACA,M;AACA,yE;AACA,uC;AACA,M;AACA,iC;AACA,yB;AACA,iB;AACA,oC;AACA,a;AACA,kB;AACA,M;AACA,K;AACA,a;AACA,K;;AAEA,kF;AACA,gD;AACA,0D;;AAEA,gD;AACA,e;;AAEA,0B;AACA,gB;AACA,8B;AACA,0D;AACA,U;AACA,iB;AACA,4B;AACA,yD;AACA,G;AACA,yB;AACA,S;AACA,oE;AACA,G;;AAEA,I;AACA,0F;AACA,I;AACA,4D;AACA,U;AACA,W;AACA,2E;AACA,0E;AACA,sB;;AAEA,8E;AACA,qC;AACA,gB;AACA,G;;AAEA,qC;AACA,mB;AACA,6B;;AAEA,yC;AACA,2B;;AAEA,6D;AACA,0C;;AAEA,2F;AACA,iF;AACA,yB;AACA,U;AACA,I;;AAEA,2B;AACA,iB;AACA,G;AACA,uB;AACA,G;;AAEA,I;AACA,+E;AACA,uB;AACA,I;AACA,qC;AACA,kB;AACA,0B;AACA,sC;AACA,8C;AACA,2B;AACA,O;AACA,K;AACA,kB;AACA,kB;AACA,qB;AACA,O;;AAEA,mH;AACA,mE;;AAEA,oB;AACA,+B;AACA,+B;AACA,oD;AACA,+F;AACA,O;AACA,K;AACA,qF;AACA,mD;AACA,uB;AACA,wD;AACA,U;AACA,U;AACA,yB;AACA,M;AACA,M;AACA,W;AACA,0G;AACA,kC;AACA,K;AACA,I;AACA,G;;AAEA,oD;AACA,4B;AACA,G;;AAEA,I;AACA,sF;AACA,qF;AACA,mF;AACA,4C;AACA,I;AACA,iC;AACA,kB;AACA,0B;AACA,kB;AACA,kB;AACA,c;AACA,iE;AACA,oB;AACA,K;AACA,Y;AACA,S;AACA,c;AACA,W;AACA,W;;AAEA,wE;AACA,mE;;AAEA,sD;AACA,gD;;AAEA,W;;AAEA,uE;AACA,+E;AACA,yC;AACA,0B;AACA,2D;AACA,uC;AACA,yC;AACA,0E;AACA,mC;AACA,O;AACA,M;AACA,O;AACA,+E;AACA,I;AACA,G;;AAEA,oC;AACA,kC;AACA,gC;AACA,2C;;AAEA,8D;AACA,qE;AACA,6E;AACA,8B;AACA,I;AACA,2B;;AAEA,iE;AACA,4E;AACA,8B;AACA,I;;AAEA,2B;;AAEA,qD;AACA,8B;AACA,gC;AACA,mD;AACA,4B;AACA,I;AACA,G;;AAEA,6B;AACA,iB;AACA,iB;AACA,G;;AAEA,I;AACA,kC;AACA,I;AACA,yC;AACA,kB;AACA,+B;AACA,yC;AACA,qB;AACA,sB;AACA,yB;AACA,oC;AACA,qB;AACA,qC;AACA,wB;AACA,0B;;AAEA,gG;AACA,+C;AACA,sB;AACA,iD;AACA,uD;;AAEA,W;AACA,yC;AACA,oH;AACA,qD;AACA,yD;;AAEA,6C;AACA,2B;AACA,M;AACA,wD;;AAEA,wB;AACA,qF;AACA,6F;AACA,2D;AACA,+B;AACA,sB;AACA,0D;AACA,Q;;AAEA,0F;AACA,gF;AACA,kC;AACA,yB;AACA,qD;AACA,Q;AACA,M;;AAEA,iC;AACA,uE;AACA,sD;AACA,4D;AACA,+B;AACA,M;AACA,O;AACA,I;;AAEA,iD;AACA,yH;AACA,6E;AACA,sF;;AAEA,gF;AACA,gD;;AAEA,6E;AACA,4F;AACA,yB;AACA,iB;AACA,+C;AACA,I;AACA,G;;AAEA,qB;AACA,gB;AACA,2B;AACA,G;AACA,+F;AACA,2E;AACA,iD;AACA,G;;AAEA,I;AACA,6E;AACA,uB;AACA,I;AACA,yC;AACA,kB;AACA,sB;AACA,0B;AACA,sB;AACA,wC;AACA,0B;AACA,4B;AACA,mC;AACA,mC;AACA,U;AACA,wB;AACA,6C;AACA,mB;AACA,uD;AACA,gC;;AAEA,oD;AACA,wB;AACA,G;;AAEA,uD;AACA,iB;AACA,0D;AACA,0D;AACA,2E;AACA,2E;AACA,yD;AACA,sD;AACA,I;AACA,8D;AACA,4D;AACA,4D;AACA,G;;AAEA,c;AACA,qF;AACA,2D;AACA,I;AACA,yE;AACA,8C;AACA,G;;AAEA,wB;AACA,wC;AACA,8E;AACA,2B;;AAEA,+D;AACA,G;;AAEA,qE;AACA,2B;AACA,wB;AACA,G;;AAEA,6C;AACA,2B;;AAEA,+F;AACA,oE;AACA,0H;AACA,gC;AACA,gB;AACA,wH;AACA,qC;AACA,K;AACA,yH;AACA,qC;AACA,K;AACA,I;AACA,G;;AAEA,kC;AACA,gC;AACA,+C;AACA,G;AACA,kC;AACA,iD;AACA,G;;AAEA,qB;AACA,kF;AACA,yB;AACA,+C;AACA,8E;AACA,2E;AACA,U;AACA,4B;AACA,uB;AACA,4F;AACA,kF;AACA,Q;AACA,gD;AACA,iG;AACA,K;AACA,G;;AAEA,+E;AACA,uE;AACA,+B;AACA,wC;AACA,6E;AACA,M;AACA,G;;AAEA,0D;AACA,gC;;AAEA,0C;AACA,oC;AACA,iC;AACA,G;;AAEA,wD;AACA,qC;AACA,uE;AACA,G;;AAEA,mF;AACA,wB;AACA,mE;AACA,G;;AAEA,0H;AACA,iG;AACA,mE;AACA,uC;AACA,G;;AAEA,8D;AACA,yD;AACA,6C;AACA,uB;AACA,U;AACA,qC;AACA,oF;AACA,qF;AACA,2H;AACA,qB;AACA,K;AACA,G;AACA,E;AACA,sE;AACA,sF;AACA,uC;AACA,G;;AAEA,0B;AACA,G;;AAEA,I;AACA,4E;AACA,I;AACA,gC;;AAEA,6B;AACA,iB;AACA,+C;AACA,2C;AACA,qC;AACA,iC;AACA,U;;AAEA,2B;AACA,uF;AACA,+C;;;AAGA,0B;AACA,sF;AACA,qD;;AAEA,4B;AACA,oH;AACA,uB;;AAEA,6B;AACA,sC;AACA,sE;AACA,c;AACA,c;AACA,yB;AACA,2B;AACA,4B;AACA,S;AACA,M;AACA,2B;AACA,oF;AACA,W;AACA,uF;AACA,I;;AAEA,sC;;AAEA,kF;AACA,wB;AACA,sE;AACA,yB;AACA,yD;AACA,K;AACA,I;;AAEA,G;;AAEA,uB;;AAEA,iE;AACA,yD;;AAEA,4F;AACA,0F;AACA,sE;AACA,wE;AACA,yD;AACA,kB;AACA,oB;AACA,oB;AACA,I;AACA,wB;;AAEA,iD;AACA,4B;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,6F;AACA,I;AACA,8D;AACA,oC;AACA,wD;AACA,6C;AACA,G;AACA,oB;AACA,yB;AACA,sD;AACA,yB;AACA,G;;AAEA,kB;AACA,yB;AACA,sD;AACA,uB;AACA,G;;AAEA,6D;AACA,0D;AACA,qD;AACA,K;AACA,G;;AAEA,I;AACA,2D;AACA,I;AACA,6B;AACA,yE;AACA,Y;AACA,0B;AACA,mC;AACA,iD;;AAEA,yF;AACA,8D;AACA,kB;AACA,G;;AAEA,qG;AACA,uD;AACA,gD;AACA,+B;AACA,wB;AACA,gH;AACA,I;AACA,sB;AACA,8B;AACA,+B;AACA,M;AACA,Y;AACA,qB;AACA,K;AACA,M;;AAEA,kB;AACA,gF;AACA,4D;AACA,I;AACA,G;;AAEA,2F;AACA,sF;AACA,uB;AACA,kC;AACA,kB;AACA,G;AACA,E;AACA,+B;AACA,G;;AAEA,I;AACA,6E;AACA,iC;AACA,I;AACA,gC;AACA,uC;AACA,sC;AACA,gC;AACA,oC;AACA,6D;AACA,K;AACA,O;;AAEA,4D;AACA,8C;AACA,oC;AACA,2D;AACA,O;AACA,I;AACA,6D;AACA,sD;;AAEA,mE;AACA,8C;AACA,0B;AACA,2B;AACA,G;;AAEA,sD;AACA,8B;AACA,kC;AACA,gB;AACA,Q;AACA,sE;AACA,iF;AACA,O;AACA,gC;AACA,M;AACA,I;AACA,iC;AACA,G;AACA,G;;AAEA,I;AACA,4E;AACA,G;AACA,I;AACA,wB;AACA,kB;AACA,wB;AACA,Q;AACA,K;AACA,e;AACA,qB;;AAEA,yB;AACA,yB;AACA,gC;;AAEA,2B;AACA,qB;AACA,gD;AACA,sD;;AAEA,uB;AACA,uC;AACA,8C;AACA,6F;AACA,uB;AACA,I;AACA,K;;AAEA,8C;AACA,8E;AACA,0E;;AAEA,kB;AACA,uB;AACA,0B;AACA,8B;AACA,mC;AACA,8B;AACA,M;AACA,K;AACA,I;;AAEA,4B;;AAEA,iC;AACA,4B;;AAEA,+C;AACA,0B;;AAEA,gF;AACA,kC;AACA,kC;;AAEA,sF;AACA,uB;AACA,6F;AACA,I;AACA,6B;AACA,wB;AACA,0C;AACA,I;;AAEA,kB;AACA,yB;AACA,6B;AACA,iD;AACA,K;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,0C;AACA,0B;AACA,0B;AACA,2B;AACA,0F;AACA,oB;AACA,kC;AACA,G;AACA,I;AACA,4E;AACA,kB;AACA,sB;;AAEA,kD;;AAEA,sC;AACA,uB;AACA,K;;AAEA,0C;AACA,2C;AACA,e;AACA,c;AACA,K;;AAEA,mB;AACA,2F;;AAEA,yB;AACA,yB;AACA,mC;;AAEA,uC;AACA,+B;;AAEA,Y;AACA,gB;AACA,4B;AACA,I;AACA,K;AACA,G;;AAEA,I;AACA,6F;AACA,oB;AACA,I;AACA,kC;AACA,6B;AACA,0B;AACA,0B;;AAEA,+E;AACA,+B;AACA,oF;AACA,uB;AACA,I;AACA,oF;AACA,uB;AACA,I;AACA,G;;AAEA,mE;AACA,iE;;AAEA,U;AACA,mB;AACA,U;AACA,U;AACA,S;AACA,a;AACA,sB;AACA,I;AACA,c;AACA,G;;AAEA,I;AACA,2B;AACA,I;AACA,2B;AACA,yB;AACA,0B;AACA,wC;AACA,0C;AACA,sB;AACA,2E;AACA,mD;AACA,0C;AACA,0D;AACA,uB;;AAEA,4C;AACA,kC;AACA,wD;AACA,G;AACA,+B;AACA,kE;AACA,G;;AAEA,8D;AACA,mB;AACA,iB;AACA,qB;AACA,uB;AACA,iD;AACA,+C;;AAEA,kC;AACA,sE;AACA,4D;AACA,G;;AAEA,I;AACA,gC;AACA,I;AACA,2B;AACA,kB;AACA,sB;;AAEA,U;AACA,2D;AACA,2D;AACA,yB;AACA,yB;AACA,yB;AACA,wB;AACA,I;AACA,G;;AAEA,I;AACA,uE;AACA,8B;AACA,I;AACA,qC;AACA,kB;AACA,sB;AACA,kD;AACA,kD;;AAEA,kF;AACA,uE;AACA,2B;AACA,+C;AACA,mC;AACA,uB;AACA,mC;AACA,uB;AACA,G;;AAEA,+C;AACA,G;;AAEA,I;AACA,gF;AACA,wC;AACA,I;AACA,sC;AACA,U;AACA,8D;;AAEA,kC;AACA,iB;AACA,0C;AACA,gB;AACA,U;AACA,kB;AACA,G;AACA,a;AACA,G;;AAEA,I;AACA,qF;AACA,sF;AACA,qD;AACA,I;AACA,wB;AACA,yB;AACA,sB;AACA,sC;AACA,sB;AACA,oC;AACA,kC;AACA,4F;AACA,Y;AACA,0C;AACA,sG;AACA,Q;AACA,gC;AACA,gB;AACA,2E;AACA,qC;AACA,6C;AACA,yC;AACA,+B;AACA,K;AACA,E;AACA,c;AACA,4C;AACA,sB;AACA,yI;;AAEA,sB;;AAEA,+F;AACA,+F;AACA,uC;AACA,e;;AAEA,+E;AACA,K;AACA,uE;;AAEA,wC;;AAEA,8B;AACA,yB;AACA,sB;AACA,8B;AACA,O;AACA,M;AACA,O;AACA,I;;AAEA,U;AACA,6C;AACA,G;;AAEA,mC;AACA,gC;;AAEA,yB;AACA,G;;AAEA,8B;AACA,yB;AACA,6B;AACA,sC;AACA,sB;AACA,sC;AACA,sB;AACA,yB;AACA,iF;AACA,yF;AACA,gE;AACA,4G;AACA,mF;AACA,a;AACA,gG;AACA,wD;AACA,O;AACA,mB;AACA,S;AACA,K;AACA,O;;AAEA,4D;AACA,yC;AACA,yC;AACA,G;AACA,E;AACA,4C;AACA,0B;;AAEA,kC;AACA,wC;AACA,uB;AACA,iD;AACA,oC;AACA,K;AACA,M;AACA,G;AACA,oE;AACA,yC;AACA,kE;AACA,uC;AACA,W;AACA,2B;AACA,I;;AAEA,kD;AACA,yB;AACA,+B;AACA,oC;;AAEA,6B;AACA,8B;;AAEA,8E;AACA,6B;AACA,2B;AACA,4B;AACA,8B;AACA,iB;AACA,wE;AACA,qD;AACA,2C;AACA,O;AACA,yG;AACA,oD;AACA,O;AACA,M;AACA,K;AACA,I;AACA,G;;;AAGA,wE;AACA,sB;AACA,W;AACA,sG;AACA,K;AACA,6B;AACA,kC;AACA,I;AACA,G;;AAEA,kD;AACA,+F;;AAEA,mC;AACA,sC;AACA,yB;AACA,+B;AACA,e;AACA,c;AACA,0C;AACA,K;AACA,yB;AACA,qB;AACA,kC;AACA,I;AACA,K;;AAEA,4C;AACA,gG;AACA,G;;AAEA,I;AACA,+C;AACA,I;AACA,uB;AACA,mG;AACA,G;;AAEA,I;AACA,uE;AACA,I;AACA,yB;AACA,kB;AACA,sB;AACA,6B;AACA,0B;AACA,sC;AACA,sB;AACA,sB;AACA,oB;AACA,6D;AACA,W;AACA,Y;AACA,mB;AACA,qB;AACA,mB;AACA,oC;AACA,iC;AACA,4B;AACA,qB;AACA,iC;AACA,iC;AACA,Q;AACA,0C;AACA,K;AACA,wB;;AAEA,6B;AACA,2B;AACA,sE;;AAEA,2B;AACA,8D;;AAEA,mE;AACA,wB;AACA,sC;AACA,8C;AACA,W;AACA,sC;AACA,0C;AACA,W;AACA,8C;AACA,+C;AACA,2D;AACA,W;AACA,G;;AAEA,iC;AACA,G;AACA,oB;AACA,uC;AACA,sB;AACA,sC;AACA,Y;AACA,uE;AACA,K;AACA,M;;AAEA,yB;;AAEA,uC;AACA,qF;AACA,0F;;AAEA,8B;AACA,2B;AACA,gC;AACA,iB;AACA,O;AACA,K;AACA,M;;AAEA,2B;AACA,qC;AACA,mC;AACA,I;;;AAGA,+B;AACA,qB;AACA,uB;AACA,oB;AACA,I;AACA,G;;AAEA,wF;AACA,yB;AACA,mC;AACA,2B;AACA,O;AACA,O;AACA,6B;AACA,K;AACA,W;AACA,e;AACA,8C;AACA,W;AACA,mC;AACA,8E;AACA,M;AACA,0D;AACA,gC;AACA,yB;AACA,gC;AACA,I;;AAEA,kB;AACA,uE;AACA,gD;AACA,iG;AACA,I;;AAEA,kE;AACA,gD;AACA,G;;AAEA,wC;AACA,yE;;AAEA,iE;AACA,6D;AACA,iD;AACA,uI;AACA,oE;;AAEA,6B;AACA,oB;AACA,sE;AACA,6B;AACA,I;;AAEA,qF;AACA,8C;AACA,uB;AACA,8C;AACA,G;AACA,qE;AACA,G;;AAEA,I;AACA,kC;AACA,I;AACA,oC;AACA,yB;AACA,4B;AACA,wB;AACA,sB;AACA,+D;AACA,qF;;AAEA,iB;AACA,4D;AACA,G;;AAEA,mC;AACA,M;AACA,W;AACA,gB;AACA,c;AACA,W;AACA,c;AACA,c;AACA,M;AACA,W;AACA,oC;AACA,c;AACA,W;AACA,c;AACA,oC;AACA,iB;AACA,G;;AAEA,I;AACA,sB;AACA,I;AACA,gC;AACA,8D;AACA,yB;AACA,wB;AACA,sB;AACA,yB;AACA,yC;AACA,uC;AACA,4B;AACA,wB;AACA,qC;AACA,qC;AACA,0D;;AAEA,sD;AACA,gB;AACA,2C;AACA,oC;AACA,2C;AACA,6B;;AAEA,6D;AACA,yD;AACA,6D;AACA,kD;AACA,0B;AACA,qC;;AAEA,U;AACA,a;AACA,yB;AACA,6D;AACA,a;AACA,+D;AACA,uB;AACA,I;AACA,G;;AAEA,I;AACA,mB;AACA,I;AACA,sB;AACA,kB;AACA,sB;AACA,6B;AACA,0B;AACA,sB;AACA,4B;AACA,sC;AACA,iC;AACA,sB;AACA,gC;AACA,wC;AACA,2C;AACA,mD;AACA,wC;AACA,iC;AACA,Y;AACA,mC;AACA,6E;AACA,4B;AACA,Q;AACA,M;;AAEA,U;AACA,4B;AACA,gD;AACA,uB;;AAEA,0E;AACA,6D;AACA,W;AACA,sB;AACA,+B;AACA,I;AACA,K;;AAEA,wE;AACA,mC;;AAEA,iB;AACA,oD;AACA,uD;AACA,4B;AACA,qD;AACA,M;;AAEA,wC;AACA,iD;AACA,yC;AACA,M;;AAEA,4C;AACA,O;AACA,I;;AAEA,qE;AACA,2D;AACA,uC;AACA,2C;;AAEA,sD;AACA,6D;;AAEA,wB;AACA,wC;AACA,O;;AAEA,yC;AACA,6C;AACA,uC;AACA,O;;AAEA,2B;AACA,M;;AAEA,O;AACA,6E;AACA,+E;AACA,4D;AACA,sB;AACA,iD;AACA,M;AACA,0B;AACA,K;;AAEA,I;;AAEA,0B;AACA,4B;AACA,2C;AACA,yC;AACA,iC;AACA,iE;AACA,O;AACA,0C;AACA,iG;AACA,qC;AACA,0C;AACA,oC;AACA,gC;AACA,Q;AACA,mC;AACA,0C;AACA,M;AACA,O;AACA,I;;AAEA,iC;AACA,+C;AACA,gG;AACA,6C;AACA,O;AACA,6B;AACA,I;;AAEA,qB;;AAEA,0B;AACA,6D;AACA,W;AACA,M;AACA,wB;AACA,kE;AACA,wC;AACA,+B;AACA,kB;AACA,sF;AACA,kC;AACA,yE;AACA,yC;AACA,sC;AACA,O;AACA,M;;AAEA,M;;AAEA,sB;;AAEA,8B;AACA,8B;AACA,qC;AACA,gC;AACA,8B;AACA,K;AACA,I;;AAEA,4D;AACA,iE;AACA,2B;AACA,sB;AACA,4C;AACA,I;AACA,K;;AAEA,mE;AACA,wD;AACA,c;AACA,kB;AACA,0C;AACA,wB;AACA,2C;AACA,Y;AACA,gC;AACA,gC;AACA,e;AACA,O;AACA,0B;AACA,W;AACA,2C;AACA,I;;AAEA,0D;AACA,+C;AACA,G;;AAEA,8B;;AAEA,mD;AACA,2B;AACA,K;AACA,2B;AACA,G;;AAEA,oB;AACA,uD;AACA,4B;AACA,G;AACA,uB;;AAEA,uB;AACA,G;;AAEA,I;AACA,mE;AACA,I;AACA,sB;AACA,E;AACA,oB;AACA,gB;;AAEA,8B;AACA,oD;AACA,qB;AACA,K;;AAEA,yD;AACA,uC;AACA,yB;AACA,K;;AAEA,G;;AAEA,I;AACA,8B;AACA,I;AACA,iC;AACA,kB;AACA,wB;AACA,Y;AACA,8C;AACA,K;;AAEA,sB;AACA,oB;AACA,qB;AACA,G;;AAEA,6B;AACA,4B;AACA,6C;;AAEA,2B;AACA,G;;AAEA,wB;AACA,4E;AACA,iC;AACA,K;AACA,+B;AACA,wB;AACA,kC;AACA,G;;AAEA,4B;AACA,uH;AACA,oB;AACA,sC;AACA,I;AACA,K;;AAEA,sB;AACA,mB;AACA,wB;AACA,G;AACA,G;;AAEA,I;AACA,sB;AACA,I;AACA,oG;;AAEA,W;AACA,4B;AACA,iC;AACA,O;AACA,W;AACA,e;AACA,E;AACA,M;AACA,yB;AACA,sB;AACA,U;AACA,uE;AACA,qC;AACA,8D;AACA,K;AACA,wB;AACA,E;AACA,a;;AAEA,kB;AACA,mC;AACA,8E;AACA,+B;AACA,yB;AACA,uE;AACA,0B;AACA,I;;AAEA,uB;AACA,uG;AACA,W;AACA,8E;AACA,I;;AAEA,uB;AACA,yB;AACA,W;AACA,I;;AAEA,oB;AACA,oB;AACA,c;AACA,4F;AACA,W;AACA,oD;AACA,e;AACA,sE;AACA,kF;AACA,gC;AACA,M;AACA,4B;AACA,2C;AACA,K;AACA,oE;AACA,I;;AAEA,G;;AAEA,G;;AAEA,I;AACA,uB;AACA,I;AACA,6B;AACA,mB;AACA,qB;AACA,G;AACA,E;AACA,c;;AAEA,oD;;AAEA,G;AACA,sE;AACA,iE;AACA,yE;AACA,2B;AACA,E;AACA,oF;AACA,iD;AACA,iD;AACA,8B;AACA,G;AACA,oF;AACA,wB;AACA,I;AACA,mB;AACA,wC;AACA,gE;AACA,6C;AACA,0C;AACA,mC;;AAEA,6B;AACA,sE;AACA,yE;;AAEA,+C;AACA,kE;AACA,qD;AACA,G;AACA,C;AACA,+C;AACA,uD;AACA,sD;AACA,G;AACA,C;AACA,2C;AACA,oD;AACA,oD;AACA,G;AACA,C;AACA,yC;AACA,qD;AACA,mD;AACA,G;AACA,C;AACA,6C;AACA,qD;AACA,oD;AACA,oC;AACA,G;AACA,C;AACA,2C;AACA,8B;AACA,iC;AACA,G;AACA,C;AACA,2D;AACA,oC;AACA,qD;AACA,4D;AACA,0B;AACA,G;AACA,C;AACA,C;AACA,uB;AACA,Q;AACA,4C;AACA,+B;AACA,sD;AACA,G;AACA,mC;AACA,+B;AACA,kC;AACA,oC;AACA,0C;AACA,8E;AACA,qC;AACA,C;AACA,yD;AACA,sB;AACA,4B;AACA,C;AACA,8D;AACA,qC;AACA,4C;AACA,C;AACA,gE;AACA,6C;AACA,mD;AACA,C;AACA,uE;AACA,mC;AACA,uF;AACA,oD;AACA,uD;AACA,C;AACA,4D;AACA,W;AACA,6B;AACA,I;AACA,C;AACA,O;AACA,G;AACA,C;AACA,uB;AACA,2B;;;AAGA,iE;AACA,4C;AACA,qF;AACA,uB;AACA,6B;AACA,K;AACA,E;;;AAGA,uE;AACA,kD;AACA,2B;AACA,8B;AACA,I;;AAEA,sB;AACA,E;;AAEA,G;AACA,gF;AACA,iF;AACA,+E;AACA,gF;AACA,gF;AACA,c;AACA,G;AACA,iF;AACA,8B;AACA,+B;AACA,iE;AACA,O;AACA,a;AACA,yB;AACA,O;AACA,a;AACA,yB;AACA,O;AACA,W;AACA,0B;AACA,O;AACA,U;AACA,U;AACA,O;AACA,W;AACA,U;AACA,O;AACA,Y;AACA,mB;AACA,O;AACA,W;AACA,Q;AACA,M;AACA,0D;AACA,gC;AACA,sB;AACA,Q;AACA,I;AACA,E;AACA,0E;AACA,qC;AACA,kB;AACA,gC;AACA,sB;;;AAGA,qB;AACA,+E;AACA,+D;AACA,sC;;AAEA,qC;AACA,kC;AACA,U;AACA,I;AACA,G;AACA,E;;AAEA,gE;AACA,kE;AACA,wB;AACA,E;;AAEA,iB;AACA,+B;AACA,2B;AACA,Y;AACA,4F;AACA,G;AACA,C;AACA,S;AACA,sB;AACA,e;AACA,mB;AACA,G;AACA,K;AACA,wC;AACA,G;;AAEA,G;AACA,+C;AACA,G;AACA,2E;AACA,iB;AACA,yB;AACA,wB;AACA,6D;AACA,+C;AACA,kB;AACA,C;AACA,S;AACA,c;AACA,iC;AACA,E;AACA,C;AACA,mE;AACA,uB;AACA,iC;AACA,8D;AACA,E;AACA,yD;AACA,mC;AACA,+B;AACA,kC;AACA,gB;AACA,K;AACA,K;AACA,O;AACA,O;AACA,W;AACA,U;AACA,G;AACA,uB;AACA,4B;AACA,iF;AACA,kC;AACA,2D;AACA,8C;AACA,G;AACA,E;AACA,qD;AACA,6B;AACA,yC;AACA,gD;AACA,sG;AACA,6B;AACA,K;AACA,I;AACA,wB;AACA,mB;AACA,K;AACA,kB;AACA,I;AACA,G;AACA,E;AACA,uE;AACA,sE;AACA,mC;AACA,S;AACA,6B;AACA,0B;AACA,8E;AACA,0F;AACA,yE;AACA,kF;AACA,E;AACA,kB;AACA,8B;AACA,2B;AACA,0E;AACA,I;AACA,E;AACA,mC;AACA,a;AACA,S;AACA,yB;AACA,I;AACA,E;AACA,8C;AACA,a;AACA,W;AACA,W;AACA,c;AACA,E;AACA,e;AACA,0C;AACA,G;AACA,E;AACA,C;AACA,6C;AACA,c;AACA,+B;AACA,E;AACA,kB;AACA,K;AACA,qB;AACA,2C;AACA,0C;AACA,G;AACA,gD;AACA,kC;AACA,E;;AAEA,qB;;AAEA,kC;;AAEA,wC;AACA,yB;AACA,iC;;AAEA,+B;AACA,qB;AACA,yB;;AAEA,qC;AACA,mC;;AAEA,uB;AACA,uB;;AAEA,6C;AACA,4B;;AAEA,oC;AACA,uB;;;AAGA,uB;AACA,uH;AACA,U;AACA,qB;AACA,kC;AACA,gC;AACA,4B;AACA,a;AACA,K;AACA,c;AACA,qG;AACA,S;AACA,uC;;AAEA,0D;AACA,mC;AACA,kB;AACA,qC;AACA,G;;AAEA,kD;AACA,+B;AACA,G;;AAEA,I;AACA,yC;AACA,I;AACA,uB;AACA,sC;AACA,mB;AACA,qC;AACA,G;AACA,+B;AACA,oC;AACA,G;;AAEA,I;AACA,2C;AACA,G;AACA,qB;AACA,qB;AACA,Y;AACA,I;AACA,0C;AACA,qB;AACA,qB;AACA,yE;AACA,oG;AACA,uD;AACA,yD;;AAEA,0C;AACA,e;AACA,wC;AACA,oC;AACA,yF;AACA,oF;AACA,K;;AAEA,mC;AACA,0B;;AAEA,E;AACA,0C;AACA,gB;AACA,E;AACA,8B;AACA,qC;AACA,G;AACA,2D;AACA,iD;AACA,yH;AACA,kB;AACA,0C;AACA,K;AACA,U;AACA,G;AACA,G;AACA,G;;AAEA,I;AACA,oB;AACA,I;AACA,yB;AACA,qB;AACA,e;AACA,E;AACA,2E;AACA,uB;AACA,wC;;AAEA,4C;AACA,4B;AACA,4B;AACA,gD;AACA,G;AACA,G;AACA,C;AACA,K;AACA,+D;AACA,iC;AACA,I;AACA,2C;AACA,U;AACA,sB;AACA,6B;AACA,2B;AACA,6B;AACA,a;AACA,a;AACA,S;AACA,S;AACA,E;AACA,yB;AACA,E;AACA,kC;AACA,6B;AACA,E;AACA,iE;AACA,yC;AACA,yC;AACA,qD;AACA,I;AACA,U;AACA,uC;AACA,+B;AACA,K;AACA,G;AACA,0C;AACA,a;AACA,kC;AACA,+B;AACA,+B;AACA,8E;AACA,mF;AACA,6D;AACA,M;AACA,G;AACA,0B;AACA,0B;AACA,G;AACA,U;AACA,+C;AACA,kE;AACA,mF;AACA,gD;AACA,K;AACA,G;;AAEA,6B;AACA,G;AACA,C;AACA,I;AACA,sD;AACA,uC;AACA,I;AACA,qD;AACA,E;AACA,yB;AACA,4B;AACA,Y;AACA,6B;AACA,W;AACA,4E;AACA,4E;AACA,qC;AACA,mH;AACA,M;AACA,6E;AACA,kE;AACA,M;AACA,iE;AACA,gD;AACA,0D;AACA,gD;AACA,qC;;AAEA,qC;AACA,6B;AACA,4C;AACA,4B;AACA,0B;AACA,oE;AACA,2B;AACA,2F;AACA,Y;AACA,kB;AACA,K;AACA,K;AACA,M;AACA,2E;AACA,iF;AACA,wE;AACA,iC;AACA,M;AACA,kE;AACA,8D;AACA,2D;AACA,kB;AACA,I;AACA,qB;AACA,uC;AACA,kB;AACA,yB;AACA,mD;AACA,0C;AACA,mB;AACA,Y;AACA,sC;AACA,K;AACA,K;AACA,M;AACA,0B;AACA,M;AACA,4B;AACA,qB;AACA,mB;AACA,kB;AACA,oB;AACA,K;AACA,sB;AACA,mD;AACA,kE;AACA,iB;AACA,Y;AACA,M;AACA,0B;AACA,gB;AACA,W;AACA,Y;AACA,uB;AACA,K;AACA,K;;AAEA,wE;AACA,uC;AACA,U;AACA,G;AACA,Q;;AAEA,a;AACA,C;AACA,G;;AAEA,I;AACA,wF;AACA,sD;AACA,I;AACA,uC;AACA,yC;AACA,K;;AAEA,qB;AACA,sH;;AAEA,qB;AACA,6C;;AAEA,W;AACA,8H;;AAEA,oB;AACA,G;;AAEA,I;AACA,4C;AACA,yB;AACA,I;AACA,wC;AACA,qB;AACA,yB;AACA,yB;AACA,6B;AACA,K;AACA,K;AACA,U;AACA,mB;AACA,Q;AACA,oB;AACA,6D;AACA,mC;AACA,e;AACA,2B;AACA,iB;AACA,G;AACA,+B;AACA,E;AACA,oE;AACA,8E;AACA,gD;AACA,gB;AACA,gB;;AAEA,uC;AACA,kE;AACA,G;AACA,2C;AACA,G;AACA,6B;AACA,qB;AACA,wC;AACA,sB;AACA,O;AACA,I;;AAEA,gC;AACA,+B;;AAEA,4C;AACA,M;;AAEA,iB;AACA,yB;AACA,iB;AACA,K;AACA,mC;AACA,iC;AACA,oB;;AAEA,yB;AACA,U;AACA,uC;AACA,G;AACA,6C;;AAEA,gC;AACA,+B;AACA,kE;;AAEA,0B;AACA,uB;AACA,e;AACA,U;;AAEA,a;AACA,0B;AACA,gB;AACA,oC;AACA,I;;AAEA,iB;AACA,e;AACA,c;AACA,M;;AAEA,qC;AACA,wF;AACA,e;AACA,uB;AACA,M;AACA,4B;AACA,c;AACA,c;AACA,8B;AACA,4B;AACA,qB;AACA,M;AACA,E;AACA,yB;AACA,G;AACA,sC;AACA,e;AACA,0B;AACA,yB;AACA,4B;AACA,M;AACA,G;AACA,C;AACA,I;AACA,8C;AACA,I;AACA,mC;AACA,yB;AACA,uB;AACA,4D;AACA,S;AACA,gB;AACA,iB;AACA,S;AACA,K;;AAEA,gB;AACA,Y;AACA,qB;AACA,sD;AACA,iC;AACA,8B;AACA,I;AACA,G;;AAEA,K;AACA,4E;AACA,I;AACA,mD;AACA,kB;AACA,uD;AACA,wD;AACA,K;AACA,gC;AACA,a;AACA,oB;AACA,e;AACA,c;AACA,Y;AACA,U;AACA,K;AACA,Q;AACA,4D;;AAEA,0B;AACA,mD;AACA,yB;;AAEA,oG;AACA,4G;AACA,2C;AACA,gB;AACA,W;;AAEA,uD;AACA,kD;AACA,e;AACA,W;AACA,I;AACA,iE;AACA,kC;AACA,iF;AACA,W;AACA,K;;AAEA,sG;AACA,uB;AACA,e;AACA,K;AACA,I;AACA,G;AACA,W;AACA,0C;AACA,I;AACA,U;AACA,0C;AACA,G;;AAEA,iE;AACA,G;;AAEA,I;AACA,2C;AACA,gE;AACA,I;AACA,2D;AACA,kD;AACA,yB;AACA,0C;AACA,4C;AACA,wB;AACA,kF;AACA,sD;;AAEA,iF;AACA,mC;AACA,mE;AACA,G;;AAEA,yC;AACA,kC;AACA,yF;AACA,G;;AAEA,+B;AACA,gB;AACA,iB;AACA,K;AACA,G;;AAEA,I;AACA,+G;AACA,gF;AACA,I;AACA,kC;AACA,2C;AACA,4D;AACA,+H;AACA,W;AACA,K;AACA,I;AACA,E;;AAEA,oB;;AAEA,gC;AACA,0D;;AAEA,G;AACA,4F;AACA,2E;AACA,2C;AACA,kD;AACA,G;AACA,8D;AACA,2B;AACA,E;;AAEA,qB;AACA,I;AACA,sB;AACA,I;AACA,kC;AACA,E;AACA,mC;AACA,qC;AACA,oD;AACA,6B;AACA,S;AACA,S;;AAEA,qB;AACA,yB;AACA,qB;AACA,E;AACA,gB;AACA,0C;AACA,0C;AACA,6D;AACA,8D;AACA,gC;;AAEA,kD;AACA,0D;;AAEA,sB;AACA,2B;;AAEA,sD;AACA,uD;AACA,sE;AACA,G;;AAEA,sB;AACA,I;;AAEA,I;AACA,kD;AACA,2D;AACA,I;AACA,yC;AACA,a;AACA,U;AACA,Q;;AAEA,0B;AACA,wB;;AAEA,2C;AACA,wB;;AAEA,0D;AACA,kB;AACA,2B;AACA,G;AACA,E;AACA,gB;AACA,uF;;AAEA,uB;AACA,uB;AACA,qE;AACA,G;;AAEA,sB;AACA,kD;AACA,8F;AACA,4C;AACA,gB;AACA,U;AACA,4C;AACA,2C;AACA,G;;AAEA,oB;AACA,6B;AACA,4B;AACA,K;AACA,G;;AAEA,I;AACA,mD;AACA,G;AACA,qC;AACA,I;AACA,+B;AACA,qB;AACA,c;AACA,a;AACA,K;;AAEA,yC;AACA,uD;AACA,e;AACA,4D;AACA,M;AACA,K;AACA,qB;AACA,G;AACA,C;AACA,I;AACA,oF;AACA,sE;AACA,I;AACA,gC;;AAEA,qB;AACA,yB;AACA,yB;AACA,2B;AACA,6C;AACA,iB;AACA,iC;AACA,mC;AACA,K;AACA,+B;AACA,U;AACA,mB;AACA,e;AACA,iB;AACA,W;AACA,Y;;AAEA,oF;AACA,6F;AACA,gC;AACA,wC;AACA,qE;AACA,iB;AACA,K;AACA,I;AACA,G;;AAEA,kF;AACA,gE;AACA,wE;AACA,wB;;AAEA,qE;AACA,U;AACA,uC;AACA,8B;AACA,yB;AACA,kD;AACA,2C;AACA,8G;AACA,oF;AACA,oB;AACA,8B;AACA,M;AACA,K;AACA,M;AACA,iC;AACA,gC;AACA,+D;AACA,uB;AACA,iB;AACA,K;AACA,M;AACA,G;;AAEA,yF;AACA,mF;AACA,+B;AACA,mD;AACA,wB;AACA,iB;AACA,yF;AACA,4B;AACA,M;AACA,K;AACA,qC;AACA,kC;AACA,K;;AAEA,oD;AACA,qC;AACA,8B;AACA,2B;AACA,M;AACA,Q;AACA,yF;AACA,wF;AACA,W;AACA,mB;AACA,iC;AACA,K;AACA,4B;AACA,I;AACA,8B;AACA,E;AACA,2D;AACA,U;AACA,2E;AACA,uD;AACA,wC;AACA,sE;AACA,I;AACA,G;;AAEA,qD;AACA,iD;AACA,gD;AACA,kC;AACA,4D;AACA,K;AACA,K;AACA,4D;AACA,G;AACA,E;AACA,c;AACA,oC;AACA,oD;AACA,M;AACA,E;;AAEA,G;;;;AAIA,I;AACA,wF;AACA,I;AACA,wG;AACA,I;AACA,qC;AACA,qB;AACA,yB;AACA,mC;AACA,iC;AACA,mC;AACA,2B;AACA,wE;AACA,G;AACA,wB;AACA,oD;AACA,G;AACA,kE;AACA,kE;AACA,qB;AACA,I;AACA,gC;AACA,kB;AACA,kC;AACA,6B;AACA,gD;AACA,sC;AACA,6E;AACA,2C;AACA,c;AACA,2B;AACA,M;AACA,O;AACA,I;AACA,I;;AAEA,e;AACA,U;;AAEA,oB;AACA,4B;AACA,I;;AAEA,qB;AACA,wC;AACA,sB;AACA,O;AACA,I;;AAEA,qB;AACA,6B;AACA,I;;AAEA,iB;AACA,wB;AACA,I;;AAEA,sC;AACA,gE;AACA,wC;AACA,I;;AAEA,uB;AACA,qC;AACA,yB;AACA,M;AACA,G;AACA,gE;;AAEA,G;AACA,G;;AAEA,I;AACA,0D;AACA,I;AACA,wC;;AAEA,yB;AACA,iB;;AAEA,sB;AACA,wC;AACA,2D;AACA,kD;AACA,qC;AACA,6B;AACA,4C;AACA,2D;AACA,K;AACA,iC;AACA,gD;AACA,K;AACA,I;AACA,K;AACA,E;AACA,S;AACA,6C;AACA,G;;AAEA,I;AACA,0B;AACA,I;AACA,0B;AACA,yB;;AAEA,8B;AACA,6B;AACA,4B;AACA,gD;AACA,gD;AACA,G;;AAEA,I;AACA,qF;AACA,I;AACA,qB;;AAEA,yB;AACA,sC;AACA,qB;AACA,qB;AACA,0B;AACA,4B;AACA,6B;AACA,2B;AACA,+B;AACA,iC;AACA,iB;AACA,Q;AACA,gC;AACA,gC;AACA,kE;;AAEA,kE;AACA,8D;AACA,0B;AACA,qB;AACA,6C;AACA,iC;AACA,G;;AAEA,yB;AACA,oB;AACA,6C;AACA,iC;AACA,G;AACA,E;AACA,oD;AACA,8B;AACA,qC;AACA,mC;AACA,I;AACA,E;AACA,6B;AACA,mF;;AAEA,sB;AACA,4F;AACA,gC;AACA,gD;AACA,e;AACA,c;AACA,8B;AACA,gC;AACA,O;AACA,M;AACA,Y;AACA,wE;AACA,e;AACA,O;AACA,Y;AACA,K;AACA,I;;AAEA,8C;AACA,yC;AACA,+B;AACA,+B;AACA,0B;AACA,0C;AACA,O;AACA,I;AACA,+C;AACA,0C;AACA,+B;AACA,+B;AACA,2B;AACA,0C;AACA,O;AACA,I;;AAEA,a;AACA,wE;AACA,uC;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,4E;AACA,I;AACA,qB;AACA,qB;AACA,sB;AACA,gC;;AAEA,6B;AACA,wB;AACA,e;AACA,e;AACA,wC;AACA,M;AACA,wC;AACA,gF;AACA,+E;AACA,yF;AACA,4F;AACA,Y;;AAEA,+B;AACA,uC;;AAEA,oC;AACA,sC;AACA,0I;AACA,6B;AACA,yF;AACA,6F;AACA,gI;;AAEA,qC;AACA,kB;AACA,qE;AACA,+C;AACA,S;AACA,qB;AACA,M;AACA,O;AACA,kB;AACA,oE;AACA,0E;AACA,Q;AACA,K;;AAEA,I;AACA,yD;;AAEA,2B;AACA,oB;AACA,uB;AACA,I;AACA,G;;AAEA,c;AACA,wD;AACA,mD;AACA,oD;AACA,iE;AACA,uB;AACA,G;AACA,G;;AAEA,qC;;AAEA,wB;;AAEA,uD;AACA,yB;AACA,sB;AACA,G;AACA,E;AACA,oB;AACA,G;;AAEA,C;;AAEA,kC;AACA,gC;AACA,2C;AACA,G;AACA,G;;AAEA,I;AACA,iG;AACA,sE;AACA,I;AACA,oC;AACA,yB;AACA,sC;;AAEA,uC;;AAEA,uC;AACA,uE;AACA,+E;AACA,gB;AACA,G;AACA,G;;AAEA,I;AACA,sD;AACA,I;AACA,qC;AACA,sC;AACA,c;AACA,yB;AACA,yF;AACA,G;AACA,G;;AAEA,yD;AACA,qC;;AAEA,yB;;AAEA,gC;;AAEA,0B;AACA,wC;AACA,E;AACA,0C;AACA,gB;AACA,I;AACA,E;AACA,sD;AACA,uD;AACA,kG;AACA,2B;AACA,G;AACA,G;;AAEA,I;AACA,8E;AACA,4E;AACA,qE;AACA,I;AACA,yC;AACA,oB;AACA,mB;AACA,0C;AACA,uB;AACA,kD;AACA,iB;AACA,oE;AACA,kB;AACA,K;AACA,I;AACA,gC;AACA,K;AACA,G;;AAEA,kC;AACA,sC;AACA,kD;AACA,+F;AACA,E;AACA,qG;AACA,+B;AACA,uB;AACA,G;AACA,G;;AAEA,iC;AACA,yB;AACA,kC;AACA,6B;AACA,2B;AACA,E;AACA,wB;AACA,+B;;AAEA,2B;AACA,G;AACA,qE;AACA,kE;;AAEA,6B;AACA,qD;AACA,sB;AACA,Q;;AAEA,4B;AACA,0D;AACA,2C;AACA,K;;AAEA,yD;AACA,W;AACA,sC;;AAEA,sC;AACA,sE;AACA,kC;AACA,K;AACA,I;;;AAGA,G;AACA,G;;AAEA,I;AACA,mF;AACA,yF;AACA,wD;AACA,I;AACA,4B;;AAEA,qB;AACA,uC;;AAEA,wC;AACA,mC;AACA,I;AACA,wC;AACA,mC;AACA,I;AACA,oC;AACA,+B;AACA,I;AACA,mE;AACA,yB;AACA,uD;AACA,G;AACA,iB;AACA,0C;AACA,qC;AACA,K;AACA,yC;AACA,oC;AACA,K;AACA,0B;AACA,0D;AACA,I;AACA,G;AACA,E;AACA,G;;AAEA,I;AACA,2D;AACA,I;AACA,uB;AACA,W;;AAEA,8E;AACA,oB;AACA,uD;AACA,yD;AACA,G;;AAEA,wB;AACA,qC;;AAEA,sB;AACA,qB;AACA,G;AACA,E;AACA,E;;;AAGA,+B;AACA,sC;;AAEA,I;AACA,8B;AACA,I;AACA,kG;AACA,sC;AACA,4G;AACA,G;AACA,wC;AACA,6G;AACA,G;AACA,G;;AAEA,I;AACA,yF;AACA,I;AACA,+H;AACA,yB;AACA,0B;AACA,0B;AACA,2B;AACA,mC;AACA,0D;AACA,e;AACA,e;AACA,U;AACA,4B;AACA,6B;AACA,4C;AACA,wC;AACA,wC;AACA,oC;AACA,wD;AACA,oD;AACA,e;AACA,kB;AACA,Y;AACA,2B;AACA,sH;AACA,iG;AACA,K;AACA,I;AACA,+D;AACA,uE;AACA,K;;AAEA,8B;AACA,a;;AAEA,gH;;AAEA,kB;AACA,iC;AACA,4B;AACA,sB;AACA,sD;AACA,0C;AACA,sB;AACA,G;AACA,E;AACA,4E;AACA,oB;;AAEA,8F;AACA,4E;AACA,0D;AACA,sB;AACA,2D;AACA,I;;AAEA,4E;AACA,c;;AAEA,U;AACA,+C;AACA,G;;AAEA,4D;AACA,kE;AACA,mC;AACA,0B;AACA,G;AACA,qE;AACA,gD;;AAEA,oC;AACA,oC;AACA,8B;AACA,8G;AACA,G;AACA,C;AACA,I;AACA,wC;AACA,I;AACA,sB;;AAEA,kB;AACA,sB;AACA,8B;AACA,uB;AACA,kC;AACA,wC;AACA,0B;AACA,0C;AACA,kB;AACA,2F;AACA,kD;AACA,a;;AAEA,8E;AACA,sE;AACA,0B;AACA,yB;AACA,G;;AAEA,4E;AACA,qD;AACA,sB;AACA,G;AACA,E;AACA,yB;AACA,6B;AACA,4B;AACA,K;AACA,E;AACA,sC;AACA,gC;AACA,kC;AACA,0D;AACA,M;AACA,iF;AACA,iF;;AAEA,wC;AACA,qC;AACA,2B;AACA,uD;AACA,6C;AACA,gE;AACA,gE;AACA,iC;AACA,iC;;AAEA,yD;AACA,8D;AACA,yE;AACA,K;AACA,M;AACA,yC;AACA,E;AACA,yD;AACA,oF;AACA,G;;AAEA,oB;AACA,0B;AACA,qD;AACA,kB;AACA,sB;AACA,I;AACA,G;AACA,6F;;AAEA,6B;;AAEA,+E;AACA,qC;AACA,G;AACA,8C;AACA,iE;AACA,4C;AACA,yB;AACA,qB;AACA,yB;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,6D;AACA,I;AACA,6B;AACA,yB;;AAEA,gC;;AAEA,+B;;AAEA,yB;;AAEA,oG;;AAEA,+C;AACA,gB;AACA,6B;AACA,K;;AAEA,kB;;AAEA,sB;AACA,iE;AACA,iB;AACA,I;;AAEA,sC;AACA,iB;AACA,G;AACA,G;;AAEA,sC;AACA,sB;AACA,G;;AAEA,qC;AACA,gB;AACA,G;;AAEA,mC;AACA,gC;AACA,2C;AACA,G;AACA,E;;AAEA,G;AACA,6C;AACA,C;AACA,2E;AACA,kB;AACA,uC;AACA,kC;AACA,sB;AACA,gD;AACA,yB;AACA,sC;AACA,gB;AACA,gC;AACA,gC;AACA,iC;AACA,Q;AACA,K;AACA,I;AACA,e;AACA,I;AACA,+D;AACA,S;AACA,4B;AACA,4G;AACA,gB;AACA,wC;AACA,e;AACA,kB;AACA,6B;AACA,0B;AACA,gC;AACA,W;AACA,I;AACA,I;;AAEA,I;AACA,6E;AACA,I;AACA,4B;AACA,wC;AACA,8E;AACA,uF;AACA,M;AACA,I;AACA,wC;AACA,4E;AACA,8D;AACA,uC;AACA,mD;AACA,K;AACA,M;AACA,I;AACA,qC;AACA,yE;AACA,gC;AACA,M;AACA,I;;AAEA,K;AACA,iD;AACA,K;AACA,gC;AACA,4G;AACA,4G;AACA,oF;AACA,G;AACA,I;;AAEA,kE;AACA,qE;AACA,qC;AACA,8B;AACA,yB;AACA,6B;AACA,wB;AACA,M;AACA,G;AACA,I;;AAEA,yC;AACA,6D;AACA,sB;AACA,6C;AACA,gC;AACA,G;AACA,I;AACA,0B;AACA,wD;AACA,kC;AACA,qB;AACA,I;AACA,C;AACA,G;AACA,qC;AACA,G;AACA,4D;AACA,2B;AACA,E;;AAEA,oB;AACA,C;AACA,I;AACA,yB;AACA,I;AACA,kC;AACA,E;AACA,oB;AACA,iC;AACA,W;AACA,8C;AACA,C;AACA,yB;;AAEA,yB;AACA,U;AACA,G;AACA,C;AACA,+B;AACA,qE;AACA,uC;AACA,sD;AACA,gC;AACA,gF;AACA,0B;AACA,uB;AACA,wB;AACA,qD;AACA,oB;;;AAGA,c;AACA,kB;;AAEA,oB;AACA,oD;AACA,+B;AACA,K;;AAEA,G;;AAEA,I;AACA,sC;AACA,mD;AACA,6C;AACA,I;AACA,yC;AACA,oB;AACA,4B;AACA,gC;AACA,gC;AACA,oC;AACA,8C;AACA,+D;AACA,oF;AACA,uD;AACA,sC;AACA,O;AACA,O;AACA,E;AACA,mB;AACA,mF;AACA,G;AACA,mB;AACA,4C;AACA,G;AACA,E;AACA,qB;AACA,G;AACA,0B;AACA,wD;AACA,oC;AACA,uD;AACA,gC;AACA,8B;AACA,6B;AACA,4B;AACA,M;AACA,K;AACA,I;;AAEA,iC;AACA,G;AACA,G;;AAEA,I;AACA,4B;AACA,mD;AACA,I;AACA,gC;AACA,oB;AACA,4B;AACA,yC;AACA,sB;AACA,uC;AACA,4B;AACA,4B;AACA,4B;AACA,kC;;AAEA,2C;AACA,yB;AACA,qE;AACA,S;AACA,K;AACA,G;;AAEA,iB;AACA,sB;AACA,sB;AACA,G;AACA,G;;AAEA,I;AACA,gC;AACA,4C;AACA,I;AACA,+B;AACA,+B;;AAEA,yB;AACA,oF;AACA,mB;AACA,oC;AACA,I;AACA,K;;AAEA,iB;AACA,iC;AACA,G;AACA,G;;AAEA,I;AACA,wB;AACA,I;AACA,uB;AACA,oB;AACA,8B;AACA,oB;;AAEA,Y;AACA,8B;AACA,G;;AAEA,oB;AACA,wC;AACA,G;AACA,G;;AAEA,I;AACA,yD;AACA,I;AACA,8C;AACA,uC;AACA,c;AACA,qD;;AAEA,kB;AACA,qC;AACA,wC;AACA,iC;AACA,S;AACA,I;AACA,mB;AACA,+D;AACA,oB;AACA,gF;AACA,oB;AACA,oF;AACA,Q;AACA,K;AACA,M;AACA,G;AACA,G;AACA,C;AACA,I;AACA,gD;AACA,I;AACA,2B;AACA,6B;AACA,0B;AACA,gC;AACA,mB;AACA,Q;AACA,E;AACA,0B;AACA,qB;AACA,qI;AACA,yB;AACA,6B;AACA,sB;AACA,I;AACA,+B;AACA,6B;AACA,0C;AACA,uD;AACA,G;AACA,iC;AACA,G;;AAEA,I;AACA,4B;AACA,I;AACA,2B;AACA,6B;AACA,wB;AACA,oG;AACA,K;AACA,G;;AAEA,I;AACA,wC;AACA,0C;AACA,I;AACA,8B;AACA,oB;AACA,wB;AACA,6B;AACA,4B;AACA,gD;AACA,oC;AACA,yC;AACA,gC;AACA,4C;AACA,4B;AACA,kE;AACA,sB;AACA,c;AACA,+B;AACA,oD;AACA,wC;AACA,sC;AACA,Q;AACA,a;AACA,wB;AACA,6E;AACA,kC;AACA,8F;AACA,6B;;AAEA,+C;;AAEA,4B;AACA,kF;AACA,+C;AACA,wB;AACA,6B;;AAEA,yD;AACA,wC;AACA,Q;AACA,wD;AACA,0B;AACA,Y;AACA,K;AACA,0G;AACA,W;AACA,mC;AACA,c;AACA,M;AACA,2B;;AAEA,0E;AACA,0B;AACA,sE;AACA,+D;AACA,kC;AACA,I;;AAEA,iD;AACA,yC;;AAEA,8B;AACA,wE;AACA,O;;AAEA,wB;AACA,2C;;AAEA,kC;AACA,sB;AACA,2C;AACA,I;AACA,G;;AAEA,2B;AACA,uB;;AAEA,8C;AACA,sB;;AAEA,oC;AACA,wB;AACA,2B;AACA,qF;AACA,mF;;AAEA,oD;AACA,6D;AACA,mF;AACA,+B;AACA,4E;AACA,kE;AACA,G;;AAEA,uD;AACA,gH;AACA,sC;AACA,uC;AACA,2B;AACA,K;;AAEA,2B;AACA,gE;AACA,qE;AACA,6E;;AAEA,iE;AACA,qD;;AAEA,Y;AACA,mB;AACA,6B;;AAEA,U;AACA,iE;AACA,sC;AACA,G;;AAEA,iC;AACA,8C;AACA,mF;AACA,qB;AACA,I;AACA,G;;AAEA,I;AACA,wF;AACA,mB;AACA,I;AACA,2B;AACA,oB;AACA,6C;AACA,sC;;AAEA,wF;AACA,uG;AACA,W;AACA,I;;AAEA,sE;AACA,8B;AACA,0B;AACA,4C;AACA,oB;AACA,c;AACA,K;AACA,K;AACA,kB;AACA,G;;AAEA,I;AACA,+E;AACA,+E;AACA,+D;AACA,I;AACA,4C;AACA,0B;AACA,0B;AACA,gF;AACA,+E;AACA,G;AACA,0C;;AAEA,S;AACA,mB;AACA,mB;AACA,mB;AACA,kB;AACA,mC;AACA,+D;AACA,8F;AACA,wC;AACA,+B;AACA,sE;AACA,gE;AACA,iC;AACA,oB;AACA,O;AACA,K;AACA,M;AACA,G;AACA,G;;AAEA,I;AACA,sE;AACA,uE;AACA,yB;AACA,I;AACA,sB;AACA,oB;AACA,wB;AACA,6B;AACA,8B;AACA,Y;AACA,W;AACA,e;AACA,gB;AACA,oB;AACA,4B;AACA,4B;AACA,2C;AACA,mD;;AAEA,qC;AACA,qC;AACA,yB;AACA,uB;;AAEA,qB;AACA,oD;AACA,yB;AACA,W;AACA,qC;AACA,4C;AACA,sB;AACA,oC;AACA,8B;AACA,G;AACA,E;AACA,uB;;AAEA,6B;AACA,kC;;AAEA,wB;AACA,wC;AACA,oG;AACA,K;;AAEA,oB;AACA,yB;AACA,sB;AACA,G;;AAEA,6B;AACA,+C;;AAEA,qB;AACA,4B;AACA,kC;AACA,4B;AACA,K;;AAEA,gB;AACA,gE;AACA,+E;AACA,qD;AACA,0B;;AAEA,sC;AACA,mD;;AAEA,c;AACA,qC;AACA,O;AACA,O;AACA,iB;AACA,kB;AACA,0B;AACA,2B;AACA,Y;AACA,iC;AACA,4C;AACA,wC;AACA,M;AACA,qB;AACA,4B;AACA,qB;;AAEA,oD;AACA,wC;AACA,4D;AACA,M;AACA,sB;AACA,I;;AAEA,iC;AACA,oC;AACA,G;AACA,E;AACA,mC;AACA,qC;;AAEA,gF;AACA,mB;AACA,kC;AACA,6B;AACA,K;;AAEA,kD;AACA,mD;AACA,Q;AACA,S;AACA,e;AACA,mB;AACA,+D;AACA,sD;AACA,8E;AACA,I;AACA,K;;AAEA,gB;AACA,6B;AACA,uB;AACA,wB;AACA,oC;AACA,G;;AAEA,0B;AACA,6B;AACA,G;AACA,G;AACA,C;AACA,I;AACA,uF;AACA,W;AACA,I;AACA,0C;AACA,oB;AACA,sB;AACA,6B;AACA,0B;AACA,wB;AACA,8C;AACA,4F;AACA,iC;AACA,c;AACA,4B;AACA,mC;AACA,gD;AACA,0C;AACA,kB;AACA,sB;AACA,0B;AACA,S;AACA,4B;AACA,qC;AACA,mB;AACA,mB;AACA,O;;AAEA,c;AACA,kC;AACA,0G;AACA,K;AACA,K;;AAEA,G;AACA,sB;AACA,wC;AACA,oB;AACA,G;AACA,kB;AACA,iD;AACA,G;AACA,E;AACA,8D;AACA,mB;AACA,mC;;AAEA,4F;AACA,gD;AACA,kC;AACA,G;AACA,+E;AACA,0C;AACA,sC;AACA,mC;AACA,qD;AACA,wB;AACA,I;AACA,uF;AACA,4B;AACA,W;AACA,K;AACA,I;AACA,2E;AACA,mB;AACA,K;AACA,sB;AACA,e;AACA,K;AACA,M;;AAEA,yF;AACA,mB;AACA,wE;AACA,uC;AACA,I;AACA,I;AACA,4B;;AAEA,6B;AACA,c;AACA,sE;AACA,qE;AACA,+B;AACA,mC;AACA,O;AACA,e;AACA,0C;AACA,2B;AACA,e;AACA,4E;AACA,+B;AACA,kC;AACA,O;AACA,e;AACA,I;AACA,G;AACA,0B;AACA,oB;AACA,G;AACA,8B;AACA,G;AACA,mB;AACA,mC;AACA,c;AACA,0B;AACA,iB;AACA,M;AACA,gC;AACA,G;AACA,E;AACA,sB;AACA,G;AACA,C;AACA,I;AACA,0C;AACA,4B;AACA,6B;AACA,I;AACA,yC;AACA,yB;AACA,4B;AACA,6C;AACA,gC;AACA,wC;AACA,wC;AACA,4C;AACA,sB;AACA,0B;AACA,gB;AACA,E;AACA,iD;AACA,gC;AACA,2B;AACA,G;AACA,E;AACA,wB;AACA,G;AACA,iC;AACA,wC;AACA,I;AACA,G;AACA,kB;AACA,wB;AACA,iE;AACA,uB;AACA,M;AACA,iB;AACA,0D;AACA,M;AACA,U;AACA,sD;AACA,O;AACA,e;AACA,uC;AACA,M;AACA,mB;AACA,gE;AACA,kE;AACA,M;AACA,U;AACA,8D;AACA,O;AACA,G;AACA,8D;;AAEA,6B;AACA,4B;AACA,S;AACA,G;AACA,kC;AACA,yC;AACA,G;AACA,G;AACA,E;AACA,C;AACA,E;;AAEA,E;AACA,oB;AACA,I;;AAEA,wD;;AAEA,I;AACA,wC;AACA,I;AACA,4C;AACA,mD;AACA,I;AACA,yC;AACA,yE;;AAEA,+C;AACA,K;AACA,+C;AACA,sB;AACA,gB;AACA,mC;AACA,U;AACA,Y;AACA,6B;AACA,E;AACA,G;;AAEA,I;AACA,6F;AACA,6E;AACA,I;AACA,4C;AACA,I;AACA,oC;;AAEA,6B;AACA,kC;AACA,U;AACA,gB;AACA,oC;AACA,kC;AACA,sC;AACA,4E;AACA,Q;;AAEA,kB;AACA,0B;AACA,W;AACA,qC;AACA,K;AACA,2B;AACA,uC;AACA,I;AACA,oC;AACA,M;AACA,M;AACA,mB;AACA,M;AACA,gB;AACA,kB;AACA,K;AACA,c;AACA,yB;AACA,G;AACA,E;AACA,oB;AACA,yD;AACA,iC;AACA,sD;AACA,gB;AACA,+B;AACA,4B;AACA,e;AACA,c;AACA,I;AACA,yB;AACA,gC;AACA,G;AACA,E;AACA,E;;AAEA,gF;AACA,uD;AACA,iF;AACA,kF;AACA,mD;AACA,kE;AACA,oB;AACA,2F;AACA,8B;AACA,gC;AACA,K;AACA,K;;AAEA,wD;AACA,oB;AACA,E;AACA,8C;AACA,8B;AACA,I;AACA,C;AACA,G;AACA,kB;AACA,0B;AACA,uE;AACA,G;AACA,4C;AACA,kC;AACA,E;;AAEA,mB;;AAEA,I;AACA,oB;AACA,I;AACA,e;;AAEA,I;AACA,wB;AACA,I;AACA,yC;;AAEA,2B;AACA,c;AACA,0F;;AAEA,4B;AACA,+D;AACA,kF;AACA,iC;;AAEA,mC;AACA,E;AACA,kC;AACA,yD;AACA,2D;;AAEA,wC;;AAEA,4D;AACA,qE;;AAEA,2B;AACA,sB;AACA,yB;AACA,kC;AACA,qC;;AAEA,iB;AACA,mB;AACA,kD;AACA,gC;AACA,qF;AACA,8B;AACA,kC;AACA,+B;AACA,gC;AACA,iC;AACA,iC;AACA,kC;AACA,oC;AACA,qC;AACA,mC;AACA,oC;;AAEA,8B;AACA,mC;;AAEA,+B;;AAEA,4B;;AAEA,a;AACA,qC;AACA,oC;AACA,iC;AACA,gC;AACA,gC;AACA,iC;;AAEA,mB;AACA,a;;AAEA,uC;AACA,8B;AACA,qB;AACA,e;;AAEA,uB;AACA,sC;AACA,wC;AACA,uB;AACA,M;AACA,G;;AAEA,yB;AACA,oB;AACA,mC;AACA,uD;AACA,I;AACA,G;;AAEA,mB;AACA,mB;;AAEA,iC;AACA,0E;AACA,kE;;AAEA,sB;AACA,G;;AAEA,I;AACA,yE;AACA,I;AACA,iC;AACA,mB;AACA,sC;AACA,8E;AACA,U;AACA,8B;;AAEA,wB;AACA,gB;AACA,mB;AACA,G;;AAEA,wB;AACA,6B;AACA,gB;AACA,G;;AAEA,I;AACA,uD;AACA,G;AACA,2D;AACA,2D;AACA,2D;AACA,I;AACA,kD;AACA,mC;AACA,gC;AACA,G;AACA,kB;AACA,yB;AACA,Y;AACA,wB;AACA,G;;AAEA,I;AACA,uD;AACA,G;AACA,0F;AACA,oB;AACA,I;AACA,+B;AACA,mB;AACA,qB;AACA,yB;AACA,2B;AACA,yB;AACA,sC;AACA,oB;AACA,kB;AACA,iD;AACA,4E;AACA,gC;AACA,oB;AACA,S;AACA,6B;AACA,uC;AACA,oB;AACA,G;AACA,iC;AACA,E;AACA,sB;AACA,yB;AACA,G;;AAEA,gD;AACA,uB;;AAEA,wB;AACA,e;AACA,qB;;AAEA,gC;AACA,4B;AACA,I;AACA,wB;AACA,2B;AACA,W;AACA,K;AACA,I;AACA,G;AACA,+C;AACA,oB;AACA,gB;AACA,sB;AACA,iC;AACA,0B;AACA,K;AACA,I;AACA,G;;AAEA,sC;AACA,iC;AACA,uB;AACA,+C;AACA,8B;AACA,2B;AACA,M;AACA,yB;AACA,K;AACA,I;AACA,K;;AAEA,mC;AACA,4F;AACA,0B;AACA,mB;;AAEA,+B;AACA,G;;AAEA,iB;AACA,yB;AACA,qB;AACA,G;;;AAGA,2B;AACA,2B;;AAEA,qB;AACA,0B;;AAEA,sB;AACA,gC;AACA,qB;AACA,O;AACA,I;AACA,G;;AAEA,8B;;AAEA,2B;AACA,kE;AACA,+B;AACA,uB;AACA,uB;AACA,K;AACA,M;;AAEA,iB;AACA,+B;AACA,I;AACA,uD;AACA,uC;AACA,kC;AACA,yF;AACA,oG;AACA,4B;AACA,Q;AACA,K;AACA,I;AACA,yC;AACA,mB;AACA,K;AACA,M;AACA,G;AACA,E;AACA,oC;AACA,mB;AACA,wB;AACA,G;;;AAGA,2B;AACA,iC;AACA,wC;AACA,yD;AACA,mB;AACA,I;AACA,K;;AAEA,0B;AACA,gB;AACA,uB;AACA,G;;AAEA,qB;AACA,kB;;AAEA,mB;AACA,0G;AACA,E;AACA,sB;AACA,6B;AACA,G;AACA,E;AACA,+D;AACA,yC;AACA,mB;AACA,K;AACA,G;;AAEA,I;AACA,8C;AACA,mE;AACA,I;AACA,qB;AACA,mB;AACA,qB;AACA,yB;;AAEA,Q;AACA,K;AACA,U;;AAEA,gB;AACA,qC;AACA,mC;AACA,mB;AACA,I;AACA,G;;AAEA,kB;AACA,uC;AACA,qC;AACA,qB;AACA,I;AACA,G;;AAEA,kB;AACA,uC;AACA,mC;AACA,wC;AACA,8B;AACA,sB;AACA,K;AACA,I;AACA,G;AACA,c;AACA,G;;AAEA,I;AACA,yD;AACA,I;AACA,uB;AACA,mB;AACA,0B;AACA,6D;AACA,6D;AACA,gB;AACA,Q;;AAEA,0D;AACA,yC;AACA,kB;AACA,mB;AACA,K;;AAEA,yC;AACA,kB;AACA,K;;AAEA,gD;AACA,mD;;AAEA,6C;AACA,uC;AACA,K;AACA,G;;;AAGA,I;AACA,qD;AACA,I;AACA,iC;AACA,kB;AACA,sC;AACA,qE;AACA,0B;AACA,O;AACA,K;AACA,gB;AACA,G;;AAEA,I;AACA,qC;AACA,I;AACA,iC;AACA,6C;AACA,yB;AACA,K;AACA,G;;AAEA,I;AACA,qE;AACA,I;AACA,yB;AACA,mB;;AAEA,gC;AACA,qC;AACA,8C;AACA,iC;AACA,I;AACA,K;;AAEA,wC;AACA,kH;AACA,mE;AACA,I;AACA,K;AACA,I;;AAEA,I;AACA,4C;AACA,G;AACA,kD;AACA,wD;AACA,G;AACA,I;AACA,6D;AACA,mB;AACA,2B;AACA,qB;AACA,wB;;AAEA,yE;AACA,qF;;AAEA,2B;AACA,Q;AACA,8C;AACA,sD;AACA,qB;AACA,qB;AACA,wB;AACA,0B;AACA,+B;;AAEA,+B;AACA,wD;AACA,I;AACA,G;AACA,+D;AACA,sC;AACA,4B;AACA,O;AACA,O;AACA,8B;AACA,K;AACA,W;AACA,oC;AACA,4B;AACA,0C;AACA,M;AACA,iC;AACA,W;AACA,K;AACA,K;AACA,6B;AACA,G;;AAEA,I;AACA,mF;AACA,I;AACA,kC;AACA,sB;AACA,sB;AACA,4B;AACA,0B;AACA,gC;AACA,sC;AACA,oB;AACA,4B;AACA,sF;;AAEA,c;AACA,Q;AACA,2D;AACA,oB;AACA,sE;AACA,2C;AACA,G;AACA,+D;AACA,yC;AACA,I;AACA,G;AACA,iB;AACA,W;AACA,8D;AACA,oB;AACA,iH;AACA,8C;AACA,G;AACA,qE;AACA,oE;AACA,I;AACA,G;;AAEA,0D;AACA,uD;;AAEA,6C;AACA,sC;AACA,0C;AACA,mE;AACA,kB;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,sE;AACA,I;AACA,4B;AACA,mB;AACA,sC;AACA,oC;AACA,sC;AACA,oD;;AAEA,kD;AACA,8B;AACA,wD;AACA,G;AACA,+B;AACA,0D;AACA,G;AACA,E;AACA,2F;AACA,mD;AACA,sF;AACA,8D;AACA,G;;AAEA,I;AACA,yF;AACA,qD;AACA,I;AACA,mC;AACA,iC;AACA,8B;AACA,E;AACA,4E;AACA,e;AACA,e;AACA,yC;AACA,0B;AACA,8B;AACA,I;AACA,E;AACA,qB;AACA,U;AACA,6D;AACA,8D;AACA,I;AACA,2D;AACA,e;AACA,uB;AACA,mB;AACA,4B;AACA,M;AACA,0C;AACA,6D;AACA,I;AACA,+B;AACA,mB;AACA,iC;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,iF;AACA,yB;AACA,I;AACA,4B;AACA,mB;AACA,a;AACA,sC;AACA,c;AACA,e;AACA,Y;AACA,2C;AACA,iB;AACA,e;;AAEA,oD;AACA,qC;;AAEA,2B;AACA,4D;AACA,G;AACA,E;AACA,8C;AACA,kB;AACA,mB;AACA,G;AACA,E;AACA,2F;AACA,uG;AACA,mF;AACA,wE;AACA,sD;AACA,4F;AACA,mC;AACA,K;AACA,E;AACA,+C;AACA,6C;;AAEA,0B;AACA,0B;;AAEA,iF;AACA,2E;AACA,2E;AACA,mF;AACA,oC;AACA,yD;AACA,yB;AACA,G;;AAEA,6B;AACA,uB;AACA,gC;AACA,kC;;AAEA,+B;AACA,oD;AACA,qC;AACA,kE;AACA,mB;AACA,c;AACA,uB;AACA,uE;AACA,8B;AACA,2B;AACA,6B;AACA,sB;AACA,iC;AACA,uB;AACA,kD;AACA,0B;AACA,kC;AACA,I;;AAEA,6B;AACA,yC;;AAEA,4B;AACA,kB;AACA,6D;AACA,mF;AACA,yE;;AAEA,iB;AACA,iE;AACA,qD;AACA,oE;AACA,G;AACA,wC;AACA,0C;AACA,G;;AAEA,I;AACA,gF;AACA,6E;AACA,oC;AACA,I;AACA,kC;AACA,mB;AACA,2B;AACA,yB;AACA,mC;;AAEA,uB;;AAEA,kC;AACA,2C;AACA,iG;AACA,G;AACA,E;AACA,sB;AACA,8C;;AAEA,wB;AACA,gC;AACA,iD;AACA,G;AACA,6B;AACA,yC;AACA,G;AACA,kB;AACA,yB;AACA,G;AACA,G;;AAEA,8B;;AAEA,mB;AACA,4E;AACA,yB;AACA,E;AACA,+C;AACA,iC;AACA,qC;AACA,qB;AACA,M;AACA,G;;AAEA,yB;AACA,wC;AACA,gC;AACA,iC;AACA,M;AACA,K;;AAEA,uB;;AAEA,G;;AAEA,I;AACA,mE;AACA,I;AACA,uB;AACA,mB;AACA,sC;AACA,6B;AACA,+D;AACA,kE;AACA,mE;AACA,2B;AACA,gF;AACA,yC;AACA,8B;AACA,K;AACA,K;AACA,G;AACA,8E;AACA,oC;AACA,kH;AACA,4E;AACA,sC;AACA,yC;AACA,qD;AACA,uC;AACA,gB;AACA,K;AACA,I;AACA,gC;AACA,kC;AACA,G;AACA,G;;AAEA,I;AACA,sD;AACA,I;AACA,0B;AACA,mB;AACA,0B;AACA,oB;AACA,K;AACA,G;AACA,E;AACA,kC;AACA,0C;AACA,sC;AACA,K;AACA,G;;AAEA,I;AACA,gD;AACA,yB;AACA,0B;AACA,qC;AACA,I;AACA,+C;AACA,mB;AACA,c;AACA,e;AACA,iB;;AAEA,kC;AACA,wB;AACA,+B;AACA,e;AACA,qD;AACA,2B;AACA,O;AACA,I;AACA,I;;AAEA,8C;AACA,iC;;AAEA,2C;AACA,yC;AACA,uB;AACA,gE;AACA,oC;AACA,G;AACA,wB;AACA,mE;AACA,G;;AAEA,8E;AACA,sD;AACA,0B;AACA,2B;AACA,sB;;AAEA,2B;AACA,6D;;AAEA,gB;AACA,wB;AACA,oC;AACA,uB;AACA,mB;AACA,K;;AAEA,oD;AACA,uC;AACA,wB;AACA,K;;AAEA,oD;AACA,mE;;AAEA,gC;AACA,qB;;AAEA,0B;;;AAGA,8B;AACA,6B;;AAEA,2C;AACA,iD;AACA,kC;AACA,mB;AACA,4D;AACA,mF;AACA,G;AACA,G;;AAEA,I;AACA,iF;AACA,6B;AACA,I;AACA,oC;AACA,mB;AACA,6B;AACA,6B;AACA,iC;AACA,mC;AACA,sC;AACA,2B;AACA,iC;AACA,S;AACA,S;AACA,Y;AACA,W;AACA,a;AACA,c;AACA,mB;;AAEA,wD;AACA,qD;AACA,iG;AACA,oG;;AAEA,sD;AACA,sD;AACA,E;AACA,4D;;AAEA,iC;AACA,4C;AACA,iB;AACA,iB;AACA,+C;AACA,gD;AACA,I;AACA,sC;AACA,e;AACA,c;AACA,oB;AACA,qB;AACA,I;;AAEA,6D;AACA,gE;AACA,gE;AACA,mB;AACA,a;AACA,a;AACA,4F;AACA,uG;AACA,I;;AAEA,kB;AACA,qC;AACA,uB;AACA,8B;AACA,M;AACA,G;AACA,G;;AAEA,I;AACA,wD;AACA,I;AACA,4B;AACA,mB;;AAEA,wC;AACA,4D;AACA,K;AACA,8D;AACA,kC;AACA,G;;AAEA,I;AACA,4D;AACA,I;AACA,4B;AACA,mB;AACA,sC;AACA,6B;AACA,iC;AACA,mC;AACA,2C;AACA,yC;AACA,iC;AACA,mC;AACA,oD;AACA,uD;AACA,0D;AACA,0D;AACA,uD;AACA,O;AACA,U;AACA,6B;AACA,2B;AACA,+B;AACA,iC;AACA,2B;AACA,6B;AACA,2B;;AAEA,e;AACA,yD;;AAEA,iD;AACA,0B;AACA,I;AACA,c;AACA,uC;AACA,M;AACA,mC;AACA,8C;AACA,+C;AACA,K;AACA,gG;AACA,kD;AACA,kB;AACA,qC;AACA,W;AACA,kC;;AAEA,qB;AACA,4B;AACA,kF;AACA,M;AACA,I;AACA,G;;;AAGA,oB;AACA,4B;AACA,yB;AACA,qF;AACA,Y;AACA,+B;AACA,O;AACA,W;AACA,sC;AACA,W;AACA,oC;AACA,I;AACA,G;AACA,4B;AACA,sB;AACA,qG;AACA,Y;AACA,W;AACA,iC;AACA,I;AACA,G;AACA,E;AACA,c;AACA,kB;AACA,+C;AACA,U;AACA,qB;AACA,yB;AACA,0B;AACA,M;AACA,G;;AAEA,qB;AACA,wB;AACA,qB;AACA,mG;AACA,Y;AACA,2C;AACA,sC;AACA,iB;AACA,e;AACA,O;AACA,Y;AACA,W;AACA,uB;AACA,6J;AACA,M;AACA,I;AACA,G;;AAEA,U;AACA,2B;AACA,G;;AAEA,I;AACA,qF;AACA,uF;AACA,iD;AACA,I;AACA,8B;AACA,mB;AACA,sC;AACA,S;AACA,wC;AACA,K;AACA,S;AACA,G;AACA,G;AACA,yD;AACA,G;AACA,qC;AACA,4E;AACA,G;AACA,wD;AACA,Y;AACA,wC;AACA,uD;AACA,+E;AACA,K;AACA,C;AACA,mD;AACA,6C;AACA,0B;AACA,+C;AACA,wC;AACA,kB;AACA,K;AACA,I;AACA,C;AACA,4B;AACA,uB;AACA,K;AACA,E;AACA,G;;AAEA,I;AACA,+E;AACA,gD;AACA,I;AACA,0B;AACA,mB;AACA,8B;;AAEA,gB;AACA,uC;AACA,kC;AACA,K;;AAEA,oB;AACA,uC;AACA,0C;AACA,4B;AACA,mC;AACA,+C;AACA,Y;AACA,oC;AACA,K;AACA,mB;AACA,wC;AACA,oC;AACA,K;AACA,I;AACA,K;AACA,G;;AAEA,I;AACA,+B;AACA,I;AACA,4B;AACA,sC;AACA,qB;AACA,kB;AACA,K;AACA,G;AACA,E;AACA,I;AACA,+B;AACA,I;AACA,4B;AACA,mB;AACA,iC;AACA,qB;AACA,wC;AACA,kD;AACA,2C;AACA,8C;;AAEA,wC;AACA,sB;AACA,qB;;AAEA,wB;AACA,gB;AACA,O;AACA,M;AACA,K;AACA,wB;AACA,e;AACA,W;;AAEA,M;AACA,G;AACA,G;;AAEA,I;AACA,qC;AACA,I;AACA,sB;AACA,mB;AACA,qB;AACA,6B;AACA,2B;AACA,a;AACA,c;AACA,kB;AACA,gB;;AAEA,U;AACA,mB;;;AAGA,W;AACA,mD;;AAEA,qC;;AAEA,sB;AACA,yB;AACA,uB;;AAEA,uD;AACA,8B;AACA,yG;;AAEA,sC;AACA,8B;AACA,mB;AACA,K;AACA,yB;;AAEA,oF;AACA,qD;AACA,qD;;AAEA,uC;;AAEA,kD;AACA,+B;AACA,0E;AACA,qE;AACA,K;AACA,M;AACA,6D;AACA,G;;AAEA,qC;AACA,yB;;;AAGA,S;AACA,iC;AACA,+B;AACA,kB;AACA,M;AACA,G;;AAEA,e;AACA,2B;AACA,iD;AACA,wB;AACA,W;AACA,G;AACA,uB;;AAEA,W;AACA,uB;;AAEA,Y;AACA,qC;;AAEA,a;AACA,2B;;AAEA,G;;AAEA,I;AACA,8C;AACA,I;AACA,kC;AACA,yC;AACA,qC;AACA,iB;AACA,M;AACA,K;AACA,I;AACA,6B;AACA,uB;AACA,kC;AACA,K;AACA,K;AACA,U;AACA,kC;AACA,a;AACA,K;AACA,sB;AACA,S;AACA,4B;AACA,G;AACA,G;;AAEA,I;AACA,yB;AACA,I;AACA,uB;AACA,mB;AACA,qB;AACA,yB;AACA,+B;AACA,K;AACA,kD;AACA,G;AACA,gC;AACA,8B;AACA,E;AACA,8C;AACA,kC;AACA,e;AACA,0D;;AAEA,kB;AACA,qB;;AAEA,8B;AACA,iB;AACA,kB;AACA,e;AACA,+B;AACA,G;;AAEA,wB;AACA,oB;AACA,e;AACA,mC;AACA,G;;AAEA,mC;AACA,iF;AACA,+E;AACA,2F;AACA,0B;;AAEA,8B;AACA,iC;AACA,I;AACA,K;;AAEA,iC;AACA,4E;AACA,4B;AACA,0B;AACA,oB;AACA,8B;AACA,I;;AAEA,G;;AAEA,oB;AACA,oB;AACA,mB;AACA,G;;AAEA,G;;;AAGA,I;AACA,iE;AACA,6C;AACA,I;AACA,+B;AACA,mB;;AAEA,sE;AACA,uB;AACA,mG;AACA,wB;AACA,kB;AACA,kE;AACA,oG;AACA,W;AACA,uD;AACA,8D;AACA,yC;AACA,0B;AACA,M;AACA,O;AACA,I;AACA,gB;AACA,G;AACA,c;AACA,G;;AAEA,I;AACA,yD;AACA,I;AACA,2B;AACA,mB;AACA,2B;AACA,6B;;AAEA,+C;AACA,iC;AACA,U;AACA,G;;AAEA,yB;AACA,uB;;AAEA,wE;AACA,2B;;AAEA,E;AACA,uB;AACA,uB;;AAEA,0E;AACA,yB;;AAEA,a;AACA,kB;;AAEA,0B;AACA,sD;AACA,kC;AACA,K;;AAEA,qB;;AAEA,0F;AACA,0F;AACA,gD;AACA,oC;;AAEA,iD;AACA,2B;AACA,+C;AACA,G;;AAEA,iB;;AAEA,e;AACA,wB;AACA,kB;AACA,iB;AACA,kC;AACA,G;AACA,uC;AACA,kF;AACA,6B;AACA,I;AACA,K;AACA,E;AACA,wB;AACA,6B;AACA,E;AACA,gF;AACA,4B;;AAEA,G;;AAEA,I;AACA,4D;AACA,G;AACA,0C;AACA,6B;AACA,6D;;AAEA,mD;AACA,+C;AACA,gD;AACA,+C;AACA,E;AACA,e;;AAEA,4D;AACA,I;AACA,oF;AACA,4D;AACA,I;AACA,yB;AACA,E;AACA,6B;AACA,sB;AACA,iD;AACA,qB;AACA,iD;AACA,mD;AACA,iC;AACA,4H;AACA,iD;AACA,K;AACA,S;;AAEA,2B;AACA,wB;AACA,8D;AACA,G;AACA,wC;AACA,yC;AACA,4C;AACA,yC;AACA,iG;AACA,0C;;AAEA,G;AACA,mB;AACA,E;AACA,E;;AAEA,G;AACA,4E;AACA,G;AACA,2B;AACA,mB;;AAEA,I;AACA,wB;AACA,kE;AACA,6E;AACA,I;AACA,sC;;AAEA,mB;AACA,U;AACA,wB;AACA,sC;AACA,iC;AACA,uB;;AAEA,oC;AACA,iE;AACA,8D;AACA,uB;AACA,+C;AACA,4B;AACA,I;AACA,G;;AAEA,4B;AACA,e;AACA,G;AACA,I;AACA,qF;AACA,sD;AACA,G;AACA,2B;AACA,I;AACA,sC;AACA,mB;AACA,yB;AACA,kE;;AAEA,gE;;AAEA,mC;AACA,yB;AACA,2E;;AAEA,iG;AACA,oB;AACA,gC;AACA,G;;AAEA,+E;AACA,2E;AACA,wC;AACA,0D;AACA,G;;AAEA,e;AACA,G;;AAEA,I;AACA,kD;AACA,I;AACA,sC;AACA,e;AACA,wB;AACA,8B;AACA,yD;AACA,qC;AACA,iB;AACA,S;AACA,S;;AAEA,wD;AACA,mC;;AAEA,gC;AACA,0B;AACA,8C;AACA,sC;AACA,qC;AACA,2B;AACA,4C;AACA,wB;AACA,K;AACA,Q;AACA,I;AACA,2B;AACA,2C;AACA,I;AACA,2C;AACA,iB;;AAEA,0F;AACA,iF;AACA,4B;AACA,kC;AACA,I;;AAEA,wC;AACA,wB;AACA,mC;AACA,I;AACA,G;AACA,a;AACA,G;;AAEA,I;AACA,8E;AACA,I;AACA,uB;AACA,mB;AACA,yB;AACA,wB;AACA,mC;AACA,Q;;AAEA,qB;;AAEA,oB;AACA,oB;AACA,6B;AACA,6B;AACA,6B;AACA,I;;AAEA,G;AACA,mC;AACA,sB;AACA,G;;AAEA,sB;AACA,sG;AACA,sB;AACA,2B;AACA,G;;AAEA,mD;AACA,mC;AACA,G;;AAEA,uB;AACA,sB;AACA,G;;;AAGA,G;;AAEA,I;AACA,kD;AACA,I;AACA,+B;AACA,mB;AACA,2F;AACA,Q;AACA,S;AACA,e;AACA,mB;AACA,qB;AACA,wC;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,kF;AACA,I;AACA,8B;AACA,mB;AACA,U;AACA,qB;AACA,c;AACA,qC;AACA,wB;AACA,gB;AACA,gC;AACA,yC;AACA,I;AACA,I;;AAEA,I;AACA,8D;AACA,G;AACA,8E;AACA,I;AACA,2C;;AAEA,mE;AACA,2B;AACA,gD;AACA,gE;AACA,wD;AACA,wD;;AAEA,gG;AACA,sD;AACA,wD;AACA,oC;AACA,wF;AACA,I;AACA,oF;AACA,K;;AAEA,8B;AACA,e;AACA,sB;AACA,K;AACA,G;;AAEA,I;AACA,gF;AACA,mC;AACA,6B;AACA,wD;AACA,2D;AACA,I;AACA,mE;AACA,mB;AACA,wB;AACA,kC;;AAEA,gE;AACA,4H;AACA,uB;AACA,G;;AAEA,6C;AACA,gE;AACA,uC;AACA,4E;AACA,6E;AACA,0E;AACA,K;AACA,K;AACA,G;;AAEA,yD;AACA,E;AACA,K;AACA,kH;AACA,qB;AACA,E;AACA,4E;AACA,uE;AACA,oG;AACA,uG;AACA,6D;AACA,uG;AACA,yG;AACA,sG;AACA,4B;AACA,gH;AACA,gH;AACA,E;AACA,wB;AACA,0B;AACA,G;AACA,gD;;AAEA,oB;;AAEA,mB;AACA,c;AACA,mB;AACA,gD;AACA,sB;AACA,sF;AACA,sB;AACA,8B;AACA,oB;AACA,a;AACA,G;AACA,+B;AACA,iB;AACA,mG;AACA,kC;AACA,oB;AACA,a;AACA,U;AACA,8B;AACA,kC;AACA,qE;AACA,K;;AAEA,uB;AACA,kF;AACA,2B;;AAEA,kB;AACA,oB;;AAEA,uB;AACA,kB;AACA,sB;AACA,uB;AACA,iB;AACA,yD;AACA,0D;AACA,K;;AAEA,Y;AACA,iB;AACA,6B;AACA,G;;AAEA,6B;AACA,0B;AACA,6B;AACA,kD;AACA,G;AACA,M;AACA,8B;AACA,2E;AACA,2B;AACA,K;AACA,gC;AACA,G;;AAEA,oB;AACA,qB;;AAEA,iB;AACA,8C;AACA,6B;AACA,K;AACA,sC;;AAEA,mB;AACA,2B;AACA,mC;AACA,G;;AAEA,6B;AACA,2B;AACA,qC;;AAEA,+D;AACA,uC;AACA,mB;AACA,8C;AACA,G;;AAEA,0C;AACA,oB;AACA,oD;AACA,K;;AAEA,G;;AAEA,I;AACA,mF;AACA,4B;AACA,I;AACA,wB;AACA,oB;AACA,kC;AACA,wB;AACA,e;;AAEA,8E;;AAEA,+E;AACA,+B;;AAEA,2E;AACA,gD;AACA,sD;AACA,sF;AACA,uE;;AAEA,sD;AACA,8B;;AAEA,uD;AACA,yB;;AAEA,6B;AACA,yB;AACA,K;AACA,M;;AAEA,yC;AACA,uD;AACA,oB;AACA,I;;AAEA,K;AACA,G;;AAEA,I;AACA,yF;AACA,2F;AACA,qF;AACA,8C;AACA,I;AACA,4C;AACA,4B;AACA,oB;AACA,+B;AACA,8C;AACA,oB;AACA,kF;AACA,mC;AACA,O;AACA,gF;AACA,oB;AACA,yF;AACA,M;;AAEA,kC;AACA,G;;AAEA,I;AACA,yF;AACA,wF;AACA,I;AACA,6B;;AAEA,6B;AACA,gC;AACA,Q;AACA,iB;AACA,iD;AACA,E;AACA,uD;AACA,E;AACA,0F;AACA,E;AACA,yC;AACA,sE;AACA,+B;AACA,2C;AACA,uD;AACA,4D;AACA,qC;AACA,G;AACA,E;AACA,+C;AACA,oB;AACA,G;;AAEA,I;AACA,gE;AACA,I;AACA,2B;AACA,oB;AACA,iB;AACA,iB;AACA,K;AACA,0B;AACA,gC;;AAEA,kD;;AAEA,+C;AACA,qC;AACA,qB;AACA,iB;AACA,gC;AACA,0B;AACA,M;AACA,K;AACA,wB;AACA,yB;AACA,K;;AAEA,gC;AACA,W;AACA,sC;AACA,4B;AACA,6B;AACA,oD;AACA,O;AACA,mB;AACA,uD;AACA,uD;AACA,M;AACA,O;AACA,I;AACA,G;;AAEA,gB;AACA,6B;AACA,G;;AAEA,I;AACA,2D;AACA,+B;AACA,I;AACA,qC;AACA,yB;AACA,gC;AACA,0C;AACA,yC;AACA,mD;AACA,wC;AACA,W;AACA,S;;AAEA,iC;;AAEA,wF;AACA,mF;AACA,sF;AACA,sE;AACA,kB;AACA,e;AACA,sB;AACA,c;AACA,I;;AAEA,8E;AACA,8B;AACA,0B;AACA,iD;AACA,uB;AACA,4D;AACA,oE;AACA,sB;AACA,I;;AAEA,gD;AACA,oC;AACA,yB;AACA,G;;AAEA,uB;AACA,mC;AACA,qD;AACA,+E;AACA,e;AACA,0E;AACA,iC;AACA,wC;AACA,M;AACA,G;AACA,yD;AACA,gD;AACA,gB;AACA,uB;AACA,8B;AACA,O;AACA,I;AACA,G;AACA,iB;AACA,G;;AAEA,8C;AACA,Q;AACA,kC;AACA,oC;AACA,kC;;AAEA,e;AACA,kE;AACA,+B;AACA,W;AACA,2E;AACA,iC;AACA,I;AACA,uB;AACA,G;AACA,qB;AACA,G;;AAEA,I;AACA,yB;AACA,I;AACA,wB;AACA,mC;AACA,iH;AACA,G;AACA,G;AACA,I;AACA,0B;AACA,I;AACA,yB;AACA,+C;;AAEA,kF;;AAEA,mD;AACA,iC;AACA,iC;AACA,G;AACA,G;;AAEA,oD;;AAEA,I;AACA,kD;AACA,wB;AACA,0B;AACA,I;AACA,4D;AACA,oB;AACA,2B;AACA,oD;AACA,c;AACA,4B;AACA,wB;AACA,qB;AACA,wB;AACA,+C;AACA,K;AACA,2C;AACA,M;AACA,sB;AACA,sB;AACA,wC;AACA,sD;;AAEA,oB;AACA,2B;AACA,8B;;AAEA,6E;AACA,+D;AACA,4I;AACA,mC;AACA,wE;AACA,kD;AACA,K;AACA,M;;AAEA,U;;AAEA,sB;AACA,4B;AACA,8D;;AAEA,mE;AACA,G;AACA,4B;AACA,6C;AACA,oC;AACA,M;;AAEA,mF;AACA,iF;AACA,8E;AACA,8C;AACA,uD;;AAEA,oC;AACA,U;AACA,mD;AACA,0B;AACA,S;AACA,K;;;AAGA,gE;AACA,yC;AACA,qD;;AAEA,uC;AACA,mB;AACA,yB;AACA,yB;AACA,M;AACA,2B;AACA,qE;AACA,2D;AACA,wC;AACA,oB;AACA,wB;AACA,8C;AACA,O;AACA,uB;AACA,wC;AACA,oB;AACA,wB;AACA,wB;AACA,O;AACA,M;AACA,Y;AACA,mF;AACA,K;AACA,W;AACA,sC;AACA,0D;AACA,8B;AACA,oE;AACA,yC;AACA,qC;AACA,4C;AACA,O;AACA,M;AACA,K;AACA,I;;AAEA,wF;AACA,4B;AACA,oB;AACA,I;;AAEA,oB;AACA,8B;AACA,0B;;AAEA,wB;AACA,qB;AACA,gB;AACA,2C;AACA,0B;AACA,K;AACA,I;;AAEA,2B;AACA,e;AACA,wC;AACA,I;;AAEA,Y;AACA,iE;AACA,qB;AACA,G;;AAEA,e;AACA,2B;AACA,G;AACA,G;;AAEA,I;AACA,gF;AACA,uE;AACA,I;AACA,gC;AACA,oB;AACA,wE;AACA,iC;AACA,sC;AACA,e;AACA,iB;AACA,W;AACA,Y;AACA,qB;AACA,wB;AACA,sB;AACA,4B;AACA,yC;AACA,oC;AACA,a;AACA,O;AACA,O;;AAEA,4F;AACA,8D;AACA,4F;AACA,gB;AACA,G;;AAEA,c;AACA,qE;AACA,uB;AACA,uB;AACA,G;;AAEA,uD;AACA,2G;AACA,G;AACA,mC;AACA,yE;AACA,wB;AACA,wB;;AAEA,6C;AACA,gF;AACA,sE;AACA,uC;AACA,uC;AACA,kC;AACA,mB;AACA,I;AACA,G;;;AAGA,uD;AACA,oD;AACA,wD;AACA,G;AACA,2F;AACA,iC;;AAEA,sF;AACA,gF;AACA,sD;AACA,c;AACA,I;AACA,G;;AAEA,0B;AACA,gD;AACA,+B;AACA,yC;AACA,yC;;AAEA,8F;AACA,8C;AACA,G;AACA,+C;;AAEA,G;;AAEA,I;AACA,oG;AACA,gG;AACA,I;AACA,8C;AACA,gC;AACA,iB;AACA,wB;AACA,wF;AACA,K;;AAEA,mC;AACA,oC;AACA,yB;AACA,6C;AACA,U;AACA,I;AACA,G;;AAEA,8B;AACA,+B;AACA,wB;AACA,+B;AACA,U;AACA,I;AACA,G;;AAEA,U;AACA,0C;AACA,0C;AACA,oB;AACA,e;AACA,I;AACA,G;;;AAGA,I;AACA,8E;AACA,6D;AACA,I;AACA,8B;AACA,oB;AACA,4B;AACA,8B;AACA,sB;AACA,c;AACA,0C;AACA,0C;AACA,kC;AACA,+C;AACA,qC;AACA,U;AACA,0C;AACA,S;AACA,e;AACA,K;;AAEA,iC;AACA,gB;AACA,mC;AACA,4B;AACA,G;;AAEA,6C;AACA,0B;AACA,yB;AACA,uB;AACA,0B;AACA,2D;AACA,oG;AACA,K;AACA,sB;AACA,W;AACA,kD;AACA,sG;AACA,I;AACA,iE;AACA,G;;AAEA,wG;AACA,iE;AACA,uF;AACA,qC;AACA,wF;AACA,8B;AACA,K;AACA,kB;AACA,+B;AACA,wC;AACA,K;AACA,I;AACA,G;;AAEA,qB;AACA,yB;AACA,G;;AAEA,I;AACA,yC;AACA,I;AACA,gC;AACA,yB;AACA,sB;AACA,+B;AACA,e;AACA,oB;AACA,qB;AACA,+E;AACA,wB;AACA,wB;AACA,c;AACA,e;AACA,K;AACA,K;AACA,K;AACA,K;;AAEA,4D;AACA,6B;;AAEA,qC;;AAEA,gB;AACA,gB;;AAEA,gF;AACA,wC;AACA,uF;AACA,8F;AACA,iE;;AAEA,mC;;AAEA,iB;AACA,8C;AACA,kB;AACA,0B;AACA,2C;AACA,O;AACA,M;AACA,Y;AACA,sC;AACA,K;AACA,I;AACA,G;AACA,uC;AACA,uC;AACA,G;;AAEA,I;AACA,iF;AACA,0D;AACA,I;AACA,yB;AACA,8C;AACA,sB;AACA,G;AACA,wB;AACA,oB;AACA,4B;AACA,+B;AACA,wB;AACA,iC;AACA,wB;AACA,0B;AACA,8B;AACA,yC;AACA,K;AACA,2C;AACA,gF;AACA,iC;AACA,+D;AACA,S;AACA,S;AACA,a;AACA,0C;;AAEA,yB;AACA,oC;AACA,yB;AACA,qB;AACA,qB;AACA,wB;AACA,mI;AACA,e;AACA,gB;;AAEA,sD;AACA,uD;AACA,4B;AACA,c;AACA,I;;AAEA,+B;AACA,0I;;;AAGA,qD;AACA,8D;;AAEA,+B;AACA,4D;AACA,6B;AACA,4B;;AAEA,qC;AACA,0C;AACA,K;AACA,sD;AACA,oB;AACA,K;;AAEA,sD;AACA,8E;AACA,0B;;AAEA,4B;AACA,qE;;AAEA,I;;AAEA,yC;AACA,qC;AACA,0C;AACA,S;;AAEA,mD;AACA,wB;AACA,+C;AACA,I;;AAEA,mD;AACA,8E;AACA,+E;AACA,c;AACA,uF;AACA,qC;;;AAGA,qD;AACA,4F;;AAEA,+C;;AAEA,mB;AACA,qE;AACA,kC;;AAEA,gD;AACA,W;AACA,mF;AACA,I;AACA,qB;;AAEA,G;;AAEA,mD;;AAEA,0D;AACA,uB;AACA,G;;AAEA,I;AACA,8F;AACA,wF;AACA,I;AACA,gC;AACA,yB;AACA,6B;AACA,6B;AACA,gC;AACA,4C;AACA,mJ;AACA,mC;AACA,+C;;AAEA,kG;AACA,kB;;AAEA,0D;AACA,oB;AACA,sB;;AAEA,oE;AACA,kD;AACA,iD;AACA,Q;AACA,oD;AACA,M;AACA,I;AACA,gE;AACA,G;AACA,G;AACA,kB;AACA,uB;AACA,G;;AAEA,oC;AACA,2E;AACA,yC;AACA,sC;AACA,G;;AAEA,mE;AACA,mB;AACA,uB;AACA,sE;AACA,yB;AACA,2D;AACA,K;AACA,qC;AACA,uE;AACA,K;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,yB;AACA,I;AACA,2B;AACA,oB;AACA,wB;AACA,Y;AACA,wC;AACA,iB;;AAEA,oC;AACA,0C;AACA,yD;AACA,G;;AAEA,6D;AACA,a;;AAEA,6B;;AAEA,sB;AACA,U;AACA,sC;AACA,mC;AACA,kB;AACA,sB;AACA,2B;AACA,kB;AACA,I;AACA,oC;AACA,wC;AACA,gC;AACA,kB;AACA,I;;AAEA,gD;AACA,yB;AACA,C;AACA,G;AACA,G;;AAEA,I;AACA,gE;AACA,I;AACA,4B;AACA,iB;AACA,kC;AACA,G;;AAEA,I;AACA,oB;AACA,I;AACA,0B;AACA,oB;AACA,a;AACA,0B;AACA,wB;AACA,S;AACA,S;AACA,K;AACA,S;AACA,U;AACA,U;AACA,W;AACA,W;AACA,4B;AACA,wC;AACA,0C;AACA,sB;AACA,kB;AACA,W;AACA,Y;AACA,oC;AACA,wB;AACA,0B;AACA,iC;AACA,mB;AACA,+D;AACA,K;;AAEA,yE;;AAEA,qB;AACA,gB;AACA,sB;AACA,4C;AACA,wB;AACA,4B;AACA,4C;AACA,oC;AACA,0G;AACA,8B;;AAEA,0C;AACA,8E;;AAEA,iB;AACA,kG;AACA,0B;AACA,6D;AACA,2C;;AAEA,6B;AACA,+H;AACA,wB;AACA,0B;AACA,yB;AACA,qE;AACA,0B;AACA,0B;AACA,gB;AACA,sD;AACA,sD;AACA,c;AACA,sB;AACA,sB;AACA,kB;AACA,kB;AACA,gE;AACA,O;AACA,sB;AACA,wB;AACA,M;;AAEA,yB;AACA,gD;AACA,K;AACA,I;AACA,G;;AAEA,G;;AAEA,I;AACA,0E;AACA,G;AACA,8C;AACA,8D;AACA,2E;AACA,I;AACA,0D;AACA,2C;AACA,Q;AACA,U;AACA,Y;;AAEA,0B;AACA,sB;AACA,sB;AACA,sB;;AAEA,4B;AACA,6B;AACA,4E;AACA,G;AACA,a;AACA,G;;AAEA,I;AACA,4E;AACA,+F;AACA,6E;AACA,yF;AACA,2E;AACA,I;AACA,0B;AACA,oB;AACA,kC;AACA,iG;AACA,uC;AACA,iD;AACA,0B;AACA,8B;AACA,sD;AACA,qB;AACA,wB;AACA,qB;AACA,K;AACA,wC;AACA,K;AACA,S;AACA,wB;AACA,a;AACA,kD;AACA,4D;AACA,8C;AACA,8C;AACA,iD;AACA,wB;AACA,qC;AACA,Q;AACA,O;;AAEA,uC;AACA,wE;;AAEA,+D;AACA,8G;AACA,0H;;AAEA,8B;;AAEA,2D;AACA,uD;AACA,iD;AACA,mD;;AAEA,2E;AACA,uE;AACA,iE;AACA,mD;AACA,G;;AAEA,yD;AACA,uF;;AAEA,4F;AACA,sD;AACA,2B;AACA,+E;AACA,K;;AAEA,W;AACA,qC;;;AAGA,wE;AACA,2E;AACA,e;AACA,oB;AACA,yE;AACA,gB;AACA,sB;AACA,6E;AACA,2D;AACA,8B;AACA,K;;AAEA,uB;AACA,e;AACA,2B;AACA,qD;AACA,6B;AACA,M;AACA,K;AACA,qD;AACA,K;;AAEA,gF;;AAEA,qD;AACA,wB;AACA,sC;AACA,4D;AACA,sC;AACA,O;AACA,M;AACA,K;;AAEA,2E;AACA,2C;AACA,kC;AACA,yC;AACA,oB;AACA,gF;AACA,0F;;AAEA,yC;AACA,uD;AACA,4E;AACA,wL;AACA,yB;AACA,oF;AACA,e;AACA,M;;AAEA,4D;AACA,2C;AACA,yF;AACA,mC;AACA,M;AACA,6B;AACA,uF;AACA,M;AACA,mE;AACA,yE;AACA,iC;AACA,M;AACA,iH;;AAEA,kD;AACA,oD;AACA,gC;AACA,mC;AACA,6B;AACA,O;;AAEA,kD;AACA,qD;AACA,iC;AACA,oC;AACA,6B;AACA,O;;;AAGA,8E;AACA,2B;AACA,Y;AACA,iC;AACA,K;;AAEA,gC;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,wC;AACA,I;AACA,uB;AACA,oB;AACA,wB;AACA,iD;AACA,W;AACA,K;AACA,4B;AACA,S;AACA,Q;AACA,Q;;AAEA,mB;AACA,+B;;AAEA,sB;AACA,sB;;AAEA,oB;AACA,gD;AACA,uB;AACA,c;AACA,+B;AACA,2C;AACA,I;AACA,K;;AAEA,wB;AACA,0B;AACA,2C;AACA,G;;AAEA,2C;AACA,kB;AACA,e;AACA,mB;AACA,gC;AACA,oB;AACA,I;AACA,G;AACA,uB;;AAEA,yF;AACA,wC;;AAEA,qD;AACA,wB;AACA,mH;;AAEA,2B;AACA,4C;AACA,a;AACA,e;;AAEA,4B;AACA,I;AACA,G;;AAEA,4B;AACA,qC;AACA,4B;AACA,G;AACA,8B;;AAEA,sB;AACA,wB;AACA,uB;AACA,G;AACA,G;;AAEA,I;AACA,sC;AACA,I;AACA,qC;AACA,oB;AACA,oB;AACA,8B;;AAEA,2B;AACA,qC;;AAEA,2B;AACA,wB;AACA,c;;AAEA,4F;AACA,kF;;AAEA,W;;AAEA,uB;AACA,gC;;AAEA,iB;AACA,oB;AACA,gC;AACA,4B;AACA,uB;AACA,uB;AACA,Y;AACA,Q;;AAEA,oC;AACA,uB;AACA,qC;AACA,uB;AACA,qC;AACA,Y;AACA,Q;;AAEA,a;AACA,uB;AACA,a;AACA,sB;AACA,Q;AACA,M;AACA,K;;AAEA,gC;AACA,qB;AACA,iB;AACA,gB;AACA,M;AACA,I;AACA,K;;AAEA,qB;AACA,G;;AAEA,I;AACA,sB;AACA,I;AACA,4B;AACA,oB;AACA,kB;AACA,e;AACA,4C;;AAEA,wD;AACA,4C;;AAEA,gD;;AAEA,kE;AACA,4B;AACA,8C;AACA,W;AACA,kC;AACA,I;AACA,K;;AAEA,yE;AACA,qC;AACA,+B;;AAEA,mB;;AAEA,G;;AAEA,I;AACA,yB;AACA,I;AACA,yB;AACA,oB;AACA,0B;AACA,2E;AACA,iC;AACA,2C;AACA,mC;AACA,yF;AACA,sB;;AAEA,uC;AACA,4G;AACA,K;AACA,E;AACA,mB;AACA,kC;AACA,0B;AACA,6B;AACA,Y;;AAEA,e;AACA,mD;AACA,oC;;AAEA,sE;AACA,e;AACA,qB;AACA,+B;AACA,qB;AACA,uB;AACA,M;AACA,kB;AACA,iC;AACA,0B;AACA,sE;AACA,K;;AAEA,4D;AACA,mB;AACA,uB;AACA,sG;AACA,I;AACA,K;AACA,G;;AAEA,I;AACA,kE;AACA,I;AACA,0B;AACA,oB;AACA,sB;AACA,6B;AACA,sB;AACA,kB;AACA,gB;AACA,4B;AACA,Y;AACA,sB;AACA,oB;AACA,+D;AACA,mC;AACA,kC;AACA,Y;AACA,4B;AACA,6B;AACA,sB;AACA,W;AACA,Y;AACA,Y;AACA,uB;;AAEA,wC;AACA,8D;AACA,uD;AACA,e;AACA,iB;AACA,I;AACA,e;AACA,iB;AACA,I;;AAEA,sB;AACA,iC;AACA,wC;;AAEA,gC;AACA,qC;AACA,+C;AACA,2F;AACA,0H;AACA,I;AACA,sB;AACA,iE;AACA,K;;AAEA,sD;AACA,qD;AACA,qD;AACA,uB;AACA,iB;AACA,wC;AACA,W;AACA,sB;AACA,0B;AACA,O;AACA,kB;AACA,iD;AACA,M;AACA,Y;AACA,iB;AACA,W;AACA,wC;AACA,2B;AACA,qB;AACA,Y;AACA,iB;AACA,gD;AACA,M;AACA,K;;AAEA,oB;AACA,2C;AACA,2B;AACA,kB;AACA,Y;AACA,yC;AACA,8B;AACA,8B;AACA,U;AACA,iB;AACA,kB;AACA,2D;AACA,Y;AACA,8B;AACA,gC;AACA,S;AACA,U;AACA,K;AACA,0B;;AAEA,mB;AACA,gC;AACA,Y;AACA,4C;;AAEA,iB;AACA,6C;AACA,M;;AAEA,gB;AACA,4C;AACA,M;AACA,K;AACA,8D;AACA,iD;AACA,M;AACA,sB;AACA,G;AACA,G;;AAEA,I;AACA,iF;AACA,I;AACA,4B;AACA,oB;AACA,wB;;AAEA,yB;AACA,sB;AACA,U;AACA,G;;AAEA,iD;AACA,wB;AACA,e;AACA,4B;AACA,4B;AACA,K;;AAEA,wD;AACA,4B;AACA,2C;AACA,K;AACA,M;AACA,G;;AAEA,0D;AACA,2C;AACA,2C;AACA,K;;AAEA,c;AACA,2B;;AAEA,uF;AACA,kC;AACA,G;;AAEA,I;AACA,8F;AACA,sG;AACA,I;AACA,+D;AACA,yB;AACA,kB;;AAEA,8B;AACA,c;AACA,mD;AACA,W;AACA,4B;AACA,4C;AACA,M;AACA,iB;AACA,G;AACA,oD;AACA,uD;AACA,e;AACA,G;;AAEA,I;AACA,kE;AACA,I;AACA,0B;AACA,yB;AACA,sB;AACA,sB;;AAEA,mC;AACA,uB;AACA,iB;AACA,sB;AACA,G;AACA,U;AACA,mD;AACA,iD;AACA,sB;AACA,Y;AACA,I;AACA,G;;AAEA,I;AACA,gC;AACA,I;AACA,sB;AACA,oB;AACA,wB;AACA,S;AACA,4B;AACA,iC;AACA,wE;AACA,kC;AACA,gH;AACA,kD;AACA,2B;AACA,oC;AACA,wC;;AAEA,c;AACA,2B;AACA,W;AACA,Y;AACA,c;AACA,U;AACA,mB;AACA,I;;AAEA,wC;AACA,iB;AACA,a;AACA,c;AACA,U;AACA,mB;AACA,I;;AAEA,2B;AACA,qB;AACA,wB;AACA,G;;AAEA,gC;AACA,sB;;AAEA,0E;AACA,+D;;AAEA,0B;AACA,yB;AACA,sB;AACA,uB;AACA,G;;AAEA,wC;AACA,sB;AACA,mB;AACA,I;AACA,K;;AAEA,8D;AACA,8B;AACA,2B;AACA,G;;AAEA,oB;AACA,uB;AACA,uB;AACA,G;;;AAGA,iC;AACA,2E;AACA,wB;AACA,G;;AAEA,8C;AACA,uB;AACA,yB;AACA,G;;AAEA,uG;AACA,wE;AACA,8B;AACA,G;;AAEA,sB;AACA,qB;AACA,oB;AACA,I;;AAEA,4G;AACA,4C;AACA,qB;AACA,sB;AACA,sD;AACA,2B;AACA,qB;AACA,W;AACA,0B;AACA,I;AACA,G;;AAEA,+F;AACA,6G;AACA,4B;AACA,G;;AAEA,I;AACA,kD;AACA,I;AACA,sB;AACA,oB;AACA,wB;AACA,sG;AACA,6B;AACA,wB;AACA,wB;AACA,wB;;AAEA,yB;AACA,c;AACA,wB;AACA,gB;AACA,4B;AACA,6B;AACA,O;AACA,I;;AAEA,kB;AACA,0D;AACA,uD;AACA,M;AACA,G;;AAEA,qB;AACA,kB;AACA,qB;AACA,oC;AACA,G;AACA,8E;AACA,sE;AACA,G;AACA,G;;AAEA,I;AACA,4C;AACA,I;;AAEA,iB;AACA,mC;;AAEA,sC;AACA,oB;AACA,wB;AACA,wB;AACA,oC;AACA,E;AACA,4B;AACA,+E;AACA,4E;AACA,e;AACA,G;;AAEA,2B;AACA,oB;AACA,oC;;AAEA,sB;AACA,+C;AACA,sD;;AAEA,gB;;AAEA,iC;AACA,kD;;AAEA,uB;AACA,gC;AACA,8B;AACA,O;AACA,G;AACA,oC;AACA,I;AACA,2B;AACA,Y;AACA,2B;AACA,mE;AACA,oE;AACA,M;AACA,G;AACA,I;AACA,G;;AAEA,4G;AACA,6B;AACA,sD;AACA,4B;AACA,M;;AAEA,2D;AACA,G;AACA,uB;AACA,E;AACA,0E;AACA,oB;AACA,U;AACA,8B;AACA,G;AACA,G;;AAEA,2C;AACA,oB;AACA,6B;AACA,6B;AACA,4C;;AAEA,iE;AACA,gC;AACA,0F;AACA,uF;AACA,4B;;AAEA,0D;AACA,2D;AACA,G;AACA,qD;AACA,0B;AACA,kD;AACA,U;AACA,U;AACA,U;AACA,gB;AACA,Y;AACA,Y;AACA,G;AACA,8B;;AAEA,oD;AACA,sC;AACA,wC;AACA,wC;;AAEA,iB;AACA,qB;AACA,iE;;AAEA,oE;AACA,K;AACA,qB;AACA,kG;AACA,qD;AACA,mE;AACA,mE;AACA,K;AACA,I;AACA,G;AACA,c;AACA,G;;AAEA,qB;AACA,sB;AACA,G;;AAEA,oB;AACA,yB;AACA,uD;AACA,G;AACA,E;;AAEA,0B;;AAEA,G;AACA,4B;AACA,G;AACA,+D;AACA,C;AACA,oC;;AAEA,kB;;AAEA,kC;AACA,8B;;AAEA,kD;AACA,wB;;AAEA,2D;AACA,Y;;AAEA,0B;AACA,mB;;AAEA,+E;AACA,kB;;AAEA,gG;AACA,0B;;AAEA,gF;AACA,oC;AACA,6D;AACA,sB;AACA,kF;AACA,kG;AACA,4D;AACA,0D;AACA,G;;AAEA,+F;AACA,C;;AAEA,uB;AACA,uB;AACA,2C;AACA,G;;AAEA,I;AACA,uE;AACA,I;AACA,2B;AACA,6B;AACA,iC;AACA,uB;AACA,iC;AACA,kE;;AAEA,sG;AACA,mB;AACA,oD;AACA,qB;AACA,U;AACA,e;AACA,sJ;AACA,0C;AACA,Y;AACA,sD;AACA,6C;AACA,gE;AACA,W;AACA,kD;AACA,G;AACA,G;;AAEA,I;AACA,kF;AACA,I;AACA,wC;AACA,uB;AACA,yB;AACA,sB;AACA,6B;AACA,4B;AACA,mF;AACA,+H;AACA,kD;AACA,gD;AACA,sE;AACA,iC;AACA,yD;AACA,wC;AACA,0F;AACA,iC;AACA,iC;AACA,K;AACA,sB;AACA,a;AACA,E;AACA,c;AACA,gF;AACA,I;AACA,2B;AACA,+B;AACA,8G;AACA,G;AACA,E;AACA,E;;;AAGA,iD;;AAEA,G;AACA,iC;AACA,G;AACA,0C;AACA,0B;AACA,2D;AACA,oB;AACA,qB;AACA,6B;AACA,e;AACA,yE;AACA,G;AACA,2C;AACA,2B;AACA,wC;AACA,iC;AACA,I;AACA,G;AACA,E;AACA,E;;AAEA,gD;AACA,iB;AACA,qB;AACA,4B;AACA,uB;AACA,Y;AACA,Y;AACA,gB;AACA,yC;;AAEA,sD;AACA,wB;AACA,0C;AACA,6B;AACA,W;AACA,yB;AACA,c;AACA,M;AACA,W;AACA,E;;AAEA,+E;AACA,+D;AACA,0D;;AAEA,2B;AACA,2B;AACA,8B;AACA,mC;AACA,mD;AACA,G;AACA,E;AACA,E;;;AAGA,gD;;AAEA,G;AACA,mD;AACA,G;AACA,iD;AACA,kH;AACA,S;AACA,E;;AAEA,mB;AACA,gC;AACA,gC;AACA,oB;AACA,6B;AACA,iC;AACA,sC;AACA,oE;AACA,oC;AACA,oC;AACA,6B;AACA,0B;AACA,+B;AACA,uB;AACA,wB;AACA,8B;AACA,a;AACA,Q;AACA,Q;AACA,M;AACA,W;AACA,I;AACA,I;AACA,I;;AAEA,oE;AACA,oC;AACA,e;AACA,e;AACA,oC;;AAEA,2D;AACA,qF;AACA,iE;AACA,uC;;AAEA,+D;AACA,qB;AACA,oB;AACA,G;;AAEA,oC;AACA,wB;AACA,6C;AACA,uC;AACA,gC;AACA,W;AACA,iG;AACA,I;AACA,G;;AAEA,oD;AACA,yB;AACA,2D;AACA,6D;;AAEA,E;;AAEA,iC;AACA,+B;;AAEA,sF;AACA,0C;AACA,wD;AACA,6B;AACA,oF;;AAEA,2B;AACA,W;AACA,gE;AACA,I;AACA,U;AACA,sD;AACA,G;;AAEA,yD;;AAEA,yC;AACA,8B;;AAEA,E;;AAEA,8B;AACA,6B;AACA,E;;AAEA,+D;;AAEA,oB;AACA,sB;AACA,E;;AAEA,G;AACA,qE;AACA,G;AACA,iD;AACA,mB;AACA,6B;AACA,+B;AACA,yC;;AAEA,kD;AACA,gC;AACA,K;AACA,S;AACA,iB;AACA,e;;AAEA,e;AACA,yB;AACA,yC;AACA,iE;AACA,uB;AACA,sD;AACA,sF;AACA,+E;AACA,8C;AACA,I;AACA,G;AACA,I;AACA,E;;AAEA,iD;AACA,yB;;AAEA,I;AACA,wC;AACA,G;AACA,8C;AACA,uF;AACA,0F;AACA,oB;AACA,G;AACA,2D;AACA,I;AACA,mD;AACA,a;AACA,gB;;AAEA,gB;AACA,mD;;AAEA,oE;AACA,uC;;AAEA,mF;AACA,uB;AACA,iB;AACA,6B;AACA,K;AACA,M;AACA,G;;AAEA,gB;AACA,G;;AAEA,I;AACA,+B;AACA,8C;AACA,mE;AACA,O;AACA,sD;AACA,oC;AACA,+B;AACA,Q;;AAEA,0B;AACA,wC;AACA,2B;AACA,W;AACA,M;AACA,yB;;AAEA,mD;AACA,qD;AACA,kC;;AAEA,2B;AACA,0B;AACA,G;AACA,G;;AAEA,I;AACA,mD;AACA,gG;AACA,I;AACA,8B;AACA,mB;AACA,2B;AACA,iC;AACA,oC;AACA,iC;AACA,qB;AACA,sB;AACA,gC;AACA,8B;AACA,kC;AACA,mC;AACA,Q;AACA,K;AACA,K;;AAEA,uC;AACA,oB;AACA,uD;AACA,iC;AACA,oC;AACA,e;AACA,iB;AACA,wB;;AAEA,qC;AACA,W;AACA,S;AACA,8B;AACA,c;AACA,K;AACA,sD;AACA,G;;AAEA,gB;AACA,4D;;AAEA,Y;AACA,4B;AACA,oB;AACA,e;AACA,mB;AACA,M;AACA,wB;AACA,yC;AACA,O;AACA,8C;AACA,M;AACA,6B;AACA,G;AACA,mB;AACA,G;;AAEA,I;AACA,0B;AACA,I;AACA,2B;AACA,6B;AACA,gC;;AAEA,mB;AACA,wB;AACA,c;AACA,O;AACA,kD;AACA,2B;AACA,wC;AACA,K;AACA,M;AACA,G;AACA,4B;AACA,E;AACA,G;;AAEA,iD;AACA,yB;AACA,I;AACA,4F;AACA,G;AACA,6E;AACA,oF;AACA,0F;AACA,oB;AACA,G;AACA,I;AACA,0D;AACA,mB;AACA,yB;AACA,2B;AACA,K;AACA,wB;AACA,kC;AACA,8C;;AAEA,8B;;AAEA,qB;;AAEA,+B;;AAEA,oB;AACA,8C;AACA,sC;AACA,I;AACA,gD;AACA,uE;AACA,gC;AACA,mB;AACA,+D;AACA,yC;AACA,c;AACA,8G;AACA,O;AACA,M;AACA,qE;AACA,kD;AACA,M;AACA,yB;AACA,M;AACA,I;;AAEA,2C;AACA,mB;AACA,yC;AACA,6B;AACA,gC;AACA,I;;AAEA,yC;;AAEA,Y;AACA,8C;AACA,uE;AACA,4B;AACA,I;;AAEA,8D;AACA,+B;AACA,I;AACA,gB;AACA,4B;AACA,I;AACA,G;;AAEA,8D;AACA,uD;AACA,Y;AACA,U;AACA,gE;AACA,G;AACA,G;;AAEA,I;AACA,6E;AACA,oF;AACA,0F;AACA,oB;AACA,I;AACA,uC;AACA,8E;AACA,E;AACA,G;;AAEA,kD;AACA,0B;AACA,I;AACA,iD;AACA,iE;AACA,oF;AACA,6E;AACA,mD;AACA,0F;AACA,oB;AACA,I;AACA,yD;AACA,oB;AACA,kC;AACA,sB;AACA,wB;AACA,sB;AACA,wB;AACA,8C;AACA,8C;AACA,mC;AACA,oC;AACA,S;AACA,iB;AACA,wB;AACA,K;AACA,K;;AAEA,iC;;AAEA,gC;AACA,c;AACA,2B;AACA,gB;AACA,sD;AACA,I;AACA,uC;AACA,wB;AACA,4C;AACA,K;AACA,M;AACA,G;AACA,a;AACA,0E;AACA,G;;AAEA,sC;AACA,8B;;AAEA,gG;AACA,sF;AACA,6B;AACA,mE;AACA,c;;AAEA,4B;AACA,mB;AACA,kD;AACA,wB;AACA,kC;AACA,Q;AACA,I;AACA,G;;AAEA,iF;AACA,qD;;AAEA,4B;AACA,yB;AACA,G;AACA,oC;;AAEA,sB;AACA,kC;AACA,wB;AACA,G;;AAEA,sD;AACA,6C;AACA,2B;AACA,G;;AAEA,kD;AACA,gD;AACA,c;AACA,mC;AACA,0B;AACA,W;AACA,iB;AACA,gD;;AAEA,wB;AACA,I;AACA,G;;AAEA,W;AACA,wB;AACA,4B;AACA,e;AACA,gC;AACA,kB;AACA,G;AACA,G;;AAEA,I;AACA,8C;AACA,I;AACA,+C;;AAEA,oB;AACA,sB;AACA,mB;AACA,0B;AACA,wB;AACA,yB;;AAEA,wC;AACA,yB;AACA,K;AACA,sB;AACA,qC;AACA,6E;;AAEA,gB;AACA,qB;AACA,K;;AAEA,a;AACA,0B;AACA,8B;AACA,iB;AACA,oB;AACA,K;AACA,K;;AAEA,iC;AACA,8B;;AAEA,gE;AACA,c;AACA,gD;AACA,U;AACA,Y;AACA,G;AACA,G;;AAEA,I;AACA,mD;AACA,G;AACA,oF;AACA,0F;AACA,oB;AACA,I;;AAEA,uC;AACA,oB;AACA,wB;AACA,8B;;AAEA,yE;AACA,0D;AACA,4B;;AAEA,iE;AACA,kD;;;AAGA,uB;AACA,qB;;;AAGA,a;AACA,kD;AACA,uB;;AAEA,iB;AACA,6B;AACA,K;AACA,M;;AAEA,G;AACA,4B;AACA,G;;AAEA,I;AACA,+C;AACA,I;AACA,wC;AACA,oB;AACA,sB;AACA,6E;AACA,uC;AACA,iC;AACA,uB;AACA,0C;AACA,0D;AACA,K;;AAEA,uE;AACA,4F;AACA,uB;AACA,G;;AAEA,+C;AACA,kC;AACA,iC;AACA,uB;AACA,K;;AAEA,2C;AACA,kC;AACA,oB;AACA,qB;AACA,4D;AACA,8C;;AAEA,wE;AACA,8D;AACA,qB;AACA,oB;AACA,uB;AACA,G;AACA,kE;;AAEA,+B;AACA,kC;AACA,iC;AACA,K;;AAEA,+B;AACA,8D;AACA,2B;AACA,uB;AACA,G;AACA,E;AACA,G;;AAEA,gD;AACA,wB;;AAEA,I;AACA,gD;AACA,I;AACA,wC;AACA,yB;;AAEA,kG;;AAEA,qB;AACA,gF;;AAEA,8D;;AAEA,0B;AACA,2B;AACA,kB;AACA,G;AACA,G;;AAEA,I;AACA,qC;AACA,O;AACA,4B;AACA,yB;AACA,qC;AACA,4B;AACA,yB;;AAEA,qC;AACA,e;AACA,uB;AACA,gC;AACA,I;AACA,G;;AAEA,oB;AACA,0B;AACA,0B;AACA,mD;AACA,0D;AACA,0B;AACA,K;AACA,iB;AACA,0B;;AAEA,2B;AACA,kB;AACA,G;AACA,G;;AAEA,I;AACA,oC;AACA,I;AACA,+C;AACA,kD;AACA,G;;AAEA,I;AACA,iD;AACA,6B;AACA,2B;AACA,I;AACA,+C;AACA,kD;AACA,E;;AAEA,G;;;AAGA,G;AACA,oB;AACA,G;AACA,qC;AACA,8B;;AAEA,G;AACA,mC;AACA,G;AACA,uD;AACA,a;AACA,uB;AACA,wE;AACA,sB;AACA,mB;AACA,G;;AAEA,G;AACA,oB;AACA,G;AACA,sC;AACA,c;AACA,I;AACA,oF;AACA,sF;AACA,iB;AACA,K;AACA,2B;AACA,oB;AACA,iB;AACA,gB;AACA,a;AACA,sB;AACA,sB;AACA,uC;AACA,iB;AACA,S;AACA,S;AACA,wB;AACA,4C;AACA,K;AACA,K;;AAEA,oG;AACA,4E;AACA,wC;AACA,sC;AACA,I;;AAEA,2B;AACA,qB;AACA,oG;AACA,mB;AACA,K;AACA,I;AACA,8B;AACA,iB;AACA,M;;AAEA,4B;AACA,c;AACA,gB;;AAEA,4E;AACA,Y;;AAEA,+C;AACA,6B;AACA,+B;;AAEA,gE;AACA,8D;AACA,iB;AACA,Y;;AAEA,sE;AACA,uB;AACA,4D;AACA,gD;AACA,uB;AACA,yB;AACA,a;AACA,O;AACA,M;;AAEA,gC;AACA,qC;AACA,oB;AACA,e;AACA,mB;AACA,sB;AACA,oB;AACA,qB;AACA,uB;AACA,Q;AACA,K;AACA,M;;AAEA,wB;AACA,2B;AACA,I;;AAEA,U;AACA,2C;AACA,4B;AACA,G;;AAEA,2B;AACA,G;AACA,C;AACA,I;AACA,iF;AACA,wD;AACA,I;AACA,qC;AACA,E;AACA,4F;AACA,gF;AACA,K;AACA,0B;AACA,kC;AACA,6E;AACA,W;AACA,E;AACA,8D;AACA,2D;AACA,G;AACA,+C;AACA,G;AACA,oF;AACA,kF;AACA,qD;AACA,8C;;AAEA,4D;AACA,G;AACA,iB;AACA,iD;AACA,yD;AACA,K;AACA,I;AACA,oD;AACA,I;;AAEA,mC;AACA,oE;AACA,G;AACA,wD;AACA,qB;AACA,G;AACA,C;AACA,I;AACA,wF;AACA,W;AACA,I;AACA,8D;AACA,Y;AACA,K;AACA,qC;AACA,uB;AACA,K;AACA,oB;AACA,sB;AACA,I;AACA,G;AACA,C;AACA,I;AACA,6E;AACA,gF;AACA,kD;AACA,I;AACA,yB;AACA,E;AACA,6B;AACA,qB;AACA,E;AACA,yB;AACA,yC;AACA,E;AACA,2B;AACA,oB;AACA,4B;AACA,0B;AACA,sB;AACA,0F;AACA,E;AACA,uC;AACA,2G;AACA,K;AACA,+B;AACA,yB;AACA,2B;AACA,I;AACA,+B;AACA,wB;AACA,kC;AACA,C;AACA,qB;AACA,0D;AACA,Y;AACA,iB;AACA,e;AACA,uE;AACA,Q;AACA,wB;AACA,0B;AACA,I;AACA,K;AACA,G;;AAEA,kD;AACA,G;;AAEA,8B;AACA,G;AACA,qC;AACA,G;AACA,wD;;AAEA,G;AACA,sB;AACA,G;AACA,wC;AACA,gB;;AAEA,I;AACA,qF;AACA,I;AACA,+C;AACA,gH;AACA,yB;AACA,uB;AACA,uB;AACA,8B;AACA,8B;AACA,a;AACA,a;AACA,c;AACA,c;AACA,O;;AAEA,wB;AACA,+B;AACA,E;AACA,+B;AACA,4B;AACA,4B;AACA,4B;AACA,e;;AAEA,mD;AACA,mD;AACA,oD;AACA,oD;;AAEA,yE;AACA,mE;AACA,kD;;AAEA,2B;AACA,4B;;AAEA,sE;AACA,mC;AACA,gD;AACA,sC;AACA,uE;AACA,uD;AACA,sC;AACA,uC;AACA,I;AACA,kD;AACA,uC;AACA,uC;AACA,yD;AACA,uC;AACA,uC;AACA,I;;AAEA,sC;AACA,iC;AACA,iC;;AAEA,G;AACA,E;AACA,2C;AACA,I;AACA,kB;AACA,iG;AACA,W;AACA,mB;AACA,uB;AACA,iB;AACA,M;AACA,W;AACA,kG;AACA,kE;AACA,W;AACA,mB;AACA,sB;AACA,M;AACA,W;AACA,mG;AACA,W;AACA,qB;AACA,uB;AACA,iB;AACA,M;AACA,W;AACA,oG;AACA,kE;AACA,W;AACA,qB;AACA,sB;AACA,M;AACA,W;AACA,G;AACA,I;;AAEA,qB;AACA,W;AACA,2B;AACA,2C;AACA,U;AACA,Q;AACA,4C;AACA,4C;AACA,uB;AACA,uB;AACA,U;AACA,S;AACA,K;AACA,yF;AACA,G;AACA,a;AACA,E;AACA,G;AACA,kC;;AAEA,G;AACA,yC;AACA,G;AACA,+D;;AAEA,G;AACA,0B;AACA,G;AACA,qC;AACA,+C;AACA,qB;AACA,gG;AACA,E;AACA,wC;AACA,2C;AACA,uC;AACA,iC;AACA,mD;AACA,I;;AAEA,0C;;AAEA,G;AACA,qC;AACA,G;AACA,yD;AACA,wB;AACA,kB;AACA,iB;AACA,2B;AACA,mB;AACA,kB;AACA,iE;AACA,mB;AACA,oB;AACA,mB;AACA,8G;AACA,0H;AACA,U;AACA,U;AACA,mB;AACA,iB;AACA,c;AACA,I;AACA,W;AACA,oB;AACA,0B;AACA,gB;AACA,G;AACA,G;AACA,c;AACA,sB;AACA,8B;AACA,S;AACA,G;AACA,+E;AACA,uB;AACA,W;AACA,a;AACA,G;AACA,a;AACA,G;;AAEA,G;AACA,sB;AACA,G;AACA,wC;AACA,gB;AACA,sF;AACA,wB;AACA,gB;AACA,mB;AACA,G;AACA,iB;AACA,qI;AACA,6C;AACA,uF;AACA,+C;AACA,C;AACA,I;AACA,yB;AACA,I;AACA,oB;AACA,+C;;AAEA,oB;AACA,wB;;AAEA,8D;AACA,oC;AACA,0B;AACA,8C;AACA,2C;AACA,gC;AACA,K;AACA,M;AACA,G;AACA,G;;AAEA,I;AACA,mG;AACA,oB;AACA,I;AACA,gC;;AAEA,oB;AACA,4B;AACA,wB;AACA,wB;AACA,kC;AACA,Y;AACA,oB;AACA,e;AACA,mB;;AAEA,gD;AACA,oE;AACA,iF;AACA,mC;AACA,mB;AACA,U;AACA,qD;AACA,2C;AACA,oC;AACA,kE;AACA,qF;AACA,iC;AACA,sC;AACA,gD;AACA,6C;AACA,O;AACA,0C;AACA,2D;AACA,kC;AACA,M;AACA,2C;AACA,K;AACA,M;AACA,G;;AAEA,8B;AACA,sI;AACA,sB;AACA,K;AACA,uD;AACA,iD;AACA,+C;AACA,yC;AACA,yF;AACA,4C;AACA,uH;AACA,+B;AACA,sD;AACA,6B;AACA,2D;AACA,6C;AACA,6B;;AAEA,mE;AACA,mC;AACA,sB;AACA,wB;AACA,K;AACA,G;AACA,G;;AAEA,I;AACA,oF;AACA,I;AACA,yB;AACA,oB;AACA,wB;AACA,4B;AACA,2C;AACA,yB;AACA,uE;AACA,K;AACA,wB;AACA,iC;AACA,oF;AACA,oD;AACA,uC;AACA,8B;AACA,yG;AACA,uD;AACA,yC;AACA,sC;;AAEA,uB;AACA,uC;AACA,8B;AACA,gB;AACA,I;AACA,G;;AAEA,iG;AACA,8F;AACA,qB;AACA,6B;AACA,qC;AACA,G;;AAEA,2C;;AAEA,0B;AACA,wC;AACA,0D;AACA,0C;AACA,iJ;AACA,sC;AACA,sB;AACA,mC;AACA,U;AACA,W;AACA,Y;AACA,O;AACA,0C;;AAEA,mC;AACA,wC;AACA,yB;AACA,2B;AACA,qF;AACA,W;AACA,iF;AACA,kD;AACA,wE;AACA,K;AACA,I;;AAEA,+B;AACA,qB;AACA,iC;;AAEA,mF;AACA,2C;AACA,mC;AACA,uB;;AAEA,iC;AACA,mE;AACA,mC;AACA,wB;;AAEA,8B;AACA,iB;AACA,c;AACA,c;AACA,I;;AAEA,uE;AACA,uC;AACA,iG;AACA,+D;;AAEA,gE;AACA,4B;AACA,sB;AACA,Y;AACA,Y;AACA,gB;AACA,gB;AACA,K;AACA,K;;AAEA,G;;AAEA,iB;AACA,C;AACA,I;AACA,oD;AACA,I;AACA,mD;AACA,C;AACA,C;AACA,I;AACA,yB;AACA,I;AACA,iB;;AAEA,I;AACA,oF;AACA,2E;AACA,G;AACA,I;AACA,0B;AACA,oB;AACA,sB;AACA,4B;AACA,6B;AACA,kD;AACA,a;AACA,a;;AAEA,qB;AACA,wC;AACA,2B;AACA,4B;AACA,e;;AAEA,kE;AACA,gC;;AAEA,gD;AACA,uC;AACA,W;;AAEA,gH;AACA,I;AACA,4B;AACA,mB;AACA,wG;;AAEA,Y;AACA,mE;AACA,uB;AACA,sB;AACA,wB;AACA,+E;AACA,K;;AAEA,wB;AACA,+C;AACA,I;AACA,K;AACA,G;;AAEA,I;AACA,mD;AACA,uE;AACA,I;AACA,2B;AACA,oB;AACA,sB;AACA,4B;AACA,kC;AACA,a;AACA,uB;;AAEA,yC;AACA,c;AACA,wB;AACA,gH;AACA,mB;AACA,uD;AACA,Y;AACA,2C;AACA,K;AACA,4B;;AAEA,gC;AACA,I;AACA,oB;AACA,6D;AACA,yD;;AAEA,iD;AACA,0B;AACA,I;AACA,G;AACA,G;AACA,C;AACA,I;AACA,qC;AACA,I;AACA,sB;AACA,oB;AACA,wB;;AAEA,gE;AACA,0C;AACA,0B;AACA,8C;AACA,2C;AACA,gC;AACA,K;AACA,M;AACA,G;;AAEA,mD;AACA,E;AACA,G;AACA,kC;AACA,G;AACA,kC;AACA,G;AACA,0D;AACA,G;AACA,uB;AACA,G;AACA,2C;AACA,a;AACA,e;AACA,G;AACA,4B;;AAEA,G;AACA,sC;AACA,G;AACA,0D;AACA,c;AACA,U;AACA,iE;AACA,G;AACA,W;AACA,6H;AACA,iE;AACA,E;AACA,G;;AAEA,G;AACA,2B;AACA,G;AACA,yC;AACA,iB;AACA,e;AACA,uB;AACA,uB;AACA,4D;AACA,qC;AACA,iB;AACA,yB;AACA,+B;AACA,yC;AACA,G;AACA,E;AACA,G;;AAEA,oC;;AAEA,G;AACA,kC;AACA,G;AACA,sD;AACA,wB;AACA,gB;AACA,sB;AACA,a;AACA,4C;AACA,c;AACA,iB;AACA,uB;AACA,iC;AACA,yB;AACA,e;AACA,gB;AACA,mC;AACA,0B;AACA,I;AACA,yB;AACA,M;AACA,S;AACA,G;AACA,yB;AACA,gB;AACA,qB;AACA,iE;AACA,Y;AACA,qB;AACA,kB;AACA,U;AACA,U;AACA,mB;AACA,gB;AACA,G;AACA,G;AACA,uB;AACA,W;AACA,qB;AACA,E;AACA,G;;AAEA,G;AACA,iC;AACA,G;AACA,mC;AACA,I;AACA,0B;AACA,I;AACA,oB;;AAEA,8C;;AAEA,mB;AACA,e;;AAEA,iB;AACA,oC;AACA,kC;AACA,K;;AAEA,kC;AACA,8B;AACA,oC;AACA,I;AACA,yC;AACA,2C;;AAEA,e;AACA,G;;AAEA,I;AACA,0C;AACA,4E;AACA,4B;AACA,I;AACA,qC;AACA,mB;AACA,yB;AACA,wB;AACA,wD;AACA,E;AACA,2C;;AAEA,8B;;AAEA,sD;AACA,0F;AACA,+F;;AAEA,uF;AACA,oD;AACA,8E;AACA,qB;AACA,6C;AACA,K;AACA,M;;AAEA,0B;AACA,0C;AACA,I;;AAEA,yC;AACA,yC;AACA,uB;AACA,I;AACA,G;AACA,iC;AACA,2B;AACA,0B;AACA,I;;AAEA,gB;AACA,mB;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,2D;AACA,sE;AACA,yE;AACA,I;AACA,8C;AACA,mB;AACA,yB;AACA,wB;AACA,e;;AAEA,iC;;AAEA,8B;AACA,8B;;AAEA,0C;AACA,0F;AACA,8F;;AAEA,oD;AACA,iB;AACA,gB;AACA,I;;AAEA,qC;AACA,E;AACA,0B;AACA,0C;AACA,G;;AAEA,G;;AAEA,4B;AACA,iC;AACA,6B;;AAEA,wL;AACA,4B;AACA,0B;AACA,qB;AACA,K;AACA,E;AACA,G;;AAEA,G;AACA,uB;AACA,G;AACA,iB;AACA,a;AACA,oB;AACA,sB;AACA,uB;AACA,mB;AACA,uB;AACA,6C;AACA,e;AACA,sF;AACA,wB;AACA,gC;AACA,e;AACA,G;;AAEA,I;AACA,kC;AACA,I;AACA,gB;;AAEA,I;AACA,uB;AACA,I;AACA,2B;AACA,oB;AACA,0B;AACA,wC;;AAEA,c;AACA,kC;AACA,gC;AACA,4B;;AAEA,kB;AACA,oB;AACA,mB;AACA,oF;AACA,2B;AACA,wB;AACA,Q;;AAEA,e;AACA,sB;AACA,gB;AACA,wB;AACA,mB;AACA,kC;AACA,K;AACA,M;;AAEA,gD;AACA,yB;AACA,G;AACA,G;;AAEA,I;AACA,0F;AACA,kD;AACA,I;AACA,4D;AACA,4E;AACA,qB;AACA,wB;AACA,2B;AACA,gC;AACA,I;AACA,G;;AAEA,I;AACA,+D;AACA,I;AACA,4B;AACA,Q;AACA,a;AACA,wB;AACA,uB;AACA,S;AACA,sD;;AAEA,sB;AACA,6B;AACA,qB;AACA,gE;AACA,G;AACA,qB;;AAEA,gC;AACA,6B;AACA,qB;AACA,uG;AACA,uB;AACA,G;AACA,G;;AAEA,I;AACA,4F;AACA,I;AACA,8B;AACA,6C;AACA,sB;AACA,G;AACA,C;AACA,I;AACA,iC;AACA,I;AACA,kC;AACA,wB;AACA,E;AACA,oB;AACA,kB;AACA,kC;AACA,4B;AACA,uC;AACA,wD;AACA,S;AACA,O;AACA,S;AACA,wC;AACA,2E;AACA,uG;AACA,oD;AACA,0B;AACA,qE;AACA,W;AACA,+C;AACA,iD;AACA,K;AACA,uB;AACA,S;;AAEA,4E;AACA,oF;AACA,2B;AACA,mB;AACA,kD;AACA,G;;AAEA,gG;AACA,oC;;AAEA,0F;;AAEA,wB;AACA,qB;AACA,0D;AACA,I;;AAEA,0C;AACA,6B;AACA,G;AACA,qB;AACA,G;AACA,6B;AACA,+C;AACA,6C;AACA,yC;AACA,I;AACA,6C;;AAEA,mB;AACA,2B;AACA,sB;AACA,oB;AACA,oB;AACA,wB;AACA,6B;AACA,oD;AACA,+C;AACA,K;;AAEA,oD;AACA,6B;AACA,8B;AACA,wB;AACA,oC;AACA,wB;AACA,I;;AAEA,qC;AACA,8B;AACA,yD;AACA,wD;AACA,K;;AAEA,uC;AACA,+C;AACA,+C;AACA,uB;AACA,iC;AACA,gC;AACA,K;AACA,G;AACA,kE;AACA,uB;;AAEA,0C;AACA,0E;AACA,qB;AACA,wF;AACA,mE;AACA,iG;AACA,qE;AACA,0D;AACA,kC;AACA,oC;AACA,e;AACA,gD;AACA,yB;AACA,K;;AAEA,G;AACA,G;AACA,C;AACA,iB;;AAEA,I;AACA,wB;AACA,I;AACA,0B;AACA,oB;AACA,wB;AACA,6B;AACA,oB;AACA,Y;AACA,W;AACA,W;AACA,kC;AACA,e;AACA,a;AACA,Q;;AAEA,sC;AACA,4C;AACA,uB;AACA,G;;AAEA,oB;AACA,wC;AACA,2B;AACA,+B;AACA,mC;;AAEA,sC;AACA,gC;AACA,0D;AACA,8B;AACA,I;;AAEA,oF;AACA,gE;AACA,kB;AACA,iB;AACA,K;;AAEA,+D;AACA,qB;AACA,uC;AACA,I;;AAEA,oB;AACA,iB;AACA,6D;AACA,W;AACA,0C;AACA,yB;AACA,gC;AACA,K;;AAEA,kE;AACA,uC;AACA,W;AACA,mE;AACA,M;AACA,gB;AACA,4B;AACA,uB;AACA,mC;AACA,I;;AAEA,K;;AAEA,G;;;AAGA,mB;;AAEA,I;AACA,mC;AACA,I;AACA,uC;AACA,+B;AACA,8D;AACA,K;AACA,K;;AAEA,I;AACA,8C;AACA,I;AACA,mD;;AAEA,I;AACA,kD;AACA,I;AACA,0C;;AAEA,I;AACA,wC;AACA,I;AACA,gB;;AAEA,E;AACA,2C;AACA,4B;;AAEA,G;AACA,uB;AACA,G;AACA,+C;;AAEA,mB;AACA,iC;AACA,gC;AACA,qC;AACA,yB;AACA,e;AACA,iB;AACA,wC;AACA,M;AACA,kB;AACA,mC;;AAEA,iD;;AAEA,yD;AACA,gC;AACA,oC;AACA,G;;AAEA,kE;AACA,qC;AACA,qB;AACA,iB;AACA,oC;AACA,sB;AACA,I;;AAEA,kC;AACA,4D;AACA,sB;AACA,kD;AACA,0C;AACA,6B;AACA,M;AACA,sG;AACA,O;AACA,I;AACA,G;;AAEA,mC;AACA,2B;AACA,iC;;AAEA,e;AACA,gC;AACA,gB;AACA,S;AACA,S;AACA,a;AACA,gC;AACA,iB;AACA,U;AACA,mB;;AAEA,6C;AACA,kH;AACA,yF;;;AAGA,mE;AACA,+B;AACA,0C;;AAEA,mE;AACA,kE;AACA,wB;;AAEA,uE;AACA,uB;AACA,kD;AACA,0B;;AAEA,gC;;AAEA,qB;AACA,yC;AACA,0B;AACA,0C;AACA,kD;;AAEA,0B;AACA,0E;;;AAGA,4B;AACA,oB;;AAEA,wB;AACA,e;AACA,c;AACA,iB;AACA,U;AACA,oB;;AAEA,yD;AACA,wD;AACA,sB;AACA,6C;AACA,O;AACA,M;;AAEA,uB;AACA,8B;AACA,a;AACA,qB;AACA,oC;AACA,kC;AACA,0C;AACA,mC;AACA,yB;AACA,+B;AACA,e;AACA,O;AACA,K;AACA,oC;AACA,sC;AACA,6F;AACA,2D;AACA,iB;AACA,M;AACA,kB;AACA,gC;AACA,M;AACA,K;;AAEA,uC;AACA,yB;AACA,qC;AACA,yB;AACA,O;AACA,M;;AAEA,0G;AACA,U;AACA,Q;AACA,W;AACA,oB;AACA,W;AACA,W;AACA,qB;AACA,M;AACA,gB;AACA,mC;AACA,0B;AACA,6B;;AAEA,K;;AAEA,oB;AACA,+E;AACA,mE;AACA,K;AACA,I;AACA,K;AACA,E;AACA,E;;AAEA,G;AACA,mC;AACA,G;AACA,wF;AACA,wB;AACA,4B;AACA,kC;AACA,kC;AACA,6B;AACA,kE;AACA,iC;AACA,mF;AACA,6G;AACA,gH;AACA,mC;;AAEA,e;;AAEA,0C;AACA,oB;AACA,iD;AACA,6D;AACA,Y;AACA,Y;AACA,c;;AAEA,gD;AACA,mB;AACA,qB;AACA,sB;AACA,K;;AAEA,kF;AACA,iF;AACA,yE;AACA,0C;AACA,8D;AACA,kD;AACA,M;AACA,oB;AACA,yB;AACA,O;AACA,U;AACA,2C;AACA,mC;;AAEA,4B;AACA,yD;AACA,+E;;AAEA,yC;AACA,4D;AACA,sI;;AAEA,I;;AAEA,oG;AACA,uB;AACA,oB;AACA,0B;AACA,yB;AACA,O;AACA,I;;AAEA,G;AACA,E;;AAEA,oD;AACA,gB;AACA,8B;AACA,oD;AACA,E;;AAEA,E;;AAEA,G;AACA,sF;AACA,0B;AACA,G;AACA,oG;AACA,wB;AACA,wB;AACA,wC;AACA,M;AACA,Y;AACA,yD;;AAEA,Y;AACA,6B;AACA,e;AACA,0B;AACA,0B;AACA,U;AACA,oB;AACA,G;AACA,mB;AACA,E;;AAEA,a;AACA,0C;AACA,6B;AACA,yB;AACA,2B;AACA,U;AACA,qC;AACA,G;AACA,mB;AACA,E;;AAEA,W;AACA,6B;AACA,e;AACA,mC;AACA,iC;AACA,U;AACA,oB;AACA,G;AACA,mB;AACA,E;;AAEA,c;AACA,2C;AACA,8B;AACA,gC;AACA,oC;AACA,U;AACA,sC;AACA,G;AACA,mB;AACA,E;;AAEA,iB;AACA,4B;AACA,0C;AACA,E;AACA,E;;AAEA,G;AACA,wE;AACA,G;AACA,sB;AACA,yD;AACA,oB;AACA,sB;AACA,S;AACA,wB;AACA,uC;AACA,yD;AACA,oD;AACA,+B;AACA,iC;AACA,a;AACA,iB;AACA,qD;AACA,qC;AACA,gC;AACA,gC;AACA,6B;AACA,gC;AACA,a;AACA,kB;AACA,Y;AACA,e;AACA,+E;AACA,gB;AACA,e;AACA,K;AACA,K;AACA,K;AACA,c;AACA,W;AACA,K;AACA,K;AACA,uD;AACA,2B;AACA,qB;AACA,K;;AAEA,2B;AACA,yE;AACA,U;AACA,G;;AAEA,sB;AACA,gD;;AAEA,2C;AACA,+B;AACA,yD;AACA,mC;AACA,I;AACA,K;;AAEA,wE;AACA,6C;AACA,K;AACA,Q;AACA,e;;AAEA,kB;AACA,gB;AACA,mB;AACA,uB;AACA,Q;AACA,W;AACA,2B;AACA,c;;AAEA,iB;AACA,a;AACA,I;;AAEA,mB;AACA,uC;;AAEA,6D;AACA,uB;AACA,+C;AACA,qH;AACA,Q;AACA,I;;AAEA,mF;AACA,4B;;AAEA,sB;AACA,0E;AACA,kG;AACA,qB;AACA,K;AACA,+B;;;AAGA,0B;AACA,+B;AACA,8B;AACA,K;AACA,kB;AACA,kD;AACA,qB;AACA,Q;AACA,oC;AACA,K;AACA,K;AACA,sC;AACA,sE;AACA,kC;AACA,K;AACA,yB;AACA,yF;AACA,c;AACA,0B;AACA,yB;AACA,iC;AACA,S;AACA,e;AACA,iF;AACA,c;AACA,sB;AACA,iB;AACA,M;AACA,O;AACA,S;;AAEA,0E;AACA,+B;AACA,8E;AACA,iC;AACA,wB;AACA,gB;AACA,kB;AACA,0B;AACA,M;AACA,gB;AACA,kB;AACA,0C;AACA,2B;AACA,O;AACA,M;AACA,4B;AACA,K;;AAEA,+E;AACA,yB;AACA,kC;;AAEA,uB;AACA,+B;;AAEA,wB;AACA,e;AACA,Y;;AAEA,mC;AACA,oD;AACA,qD;AACA,+B;AACA,0B;AACA,yB;AACA,O;AACA,M;;AAEA,uE;AACA,uC;AACA,oE;AACA,oB;AACA,sG;AACA,2C;AACA,sE;AACA,mB;AACA,O;AACA,a;AACA,gG;AACA,wD;AACA,sE;AACA,mB;AACA,O;AACA,M;;AAEA,2D;AACA,8C;AACA,K;AACA,iD;AACA,yB;AACA,I;;AAEA,8D;AACA,iC;;AAEA,uB;;AAEA,sB;AACA,8B;AACA,gC;AACA,8D;AACA,2B;;AAEA,6B;AACA,4B;AACA,wB;;AAEA,yE;AACA,4C;AACA,gB;AACA,2D;AACA,0D;AACA,0D;AACA,M;;AAEA,Y;AACA,kB;AACA,K;;AAEA,yF;AACA,0E;AACA,yB;AACA,iE;AACA,uH;;;AAGA,0C;AACA,uB;AACA,4B;AACA,uB;AACA,M;AACA,sB;AACA,uB;AACA,+E;AACA,oE;AACA,M;AACA,wB;AACA,wB;;;AAGA,qC;AACA,qC;AACA,sC;AACA,qB;AACA,iD;AACA,2F;;AAEA,sB;AACA,oE;AACA,uG;AACA,M;;AAEA,oB;AACA,mC;AACA,0E;;AAEA,qB;AACA,mD;AACA,sF;AACA,M;AACA,K;AACA,sB;AACA,oB;;AAEA,oF;AACA,uC;AACA,2E;;AAEA,4C;AACA,0B;;AAEA,yB;AACA,mC;AACA,wC;AACA,iC;AACA,+B;AACA,iC;;AAEA,wD;AACA,8C;AACA,0B;AACA,0B;AACA,uC;AACA,S;AACA,kF;AACA,W;AACA,8C;AACA,oE;AACA,gD;AACA,S;AACA,uC;AACA,W;AACA,S;AACA,kF;AACA,S;AACA,gD;AACA,S;AACA,uC;AACA,Q;;AAEA,sB;AACA,+C;AACA,gD;;AAEA,c;AACA,qF;AACA,uC;AACA,mE;AACA,8B;AACA,uC;AACA,S;AACA,oC;AACA,O;AACA,4B;AACA,4C;AACA,M;AACA,O;AACA,I;AACA,G;AACA,G;AACA,I;AACA,mF;AACA,8B;AACA,I;AACA,0D;AACA,sC;AACA,mC;AACA,S;;AAEA,oC;AACA,0B;AACA,e;AACA,qC;AACA,2D;AACA,4B;AACA,2B;AACA,iC;AACA,K;AACA,I;AACA,K;AACA,G;;AAEA,kD;;AAEA,I;AACA,kG;AACA,gG;AACA,Y;AACA,I;AACA,0E;;AAEA,2B;AACA,0B;AACA,iC;AACA,mC;AACA,qB;AACA,O;;AAEA,sC;AACA,iD;AACA,6E;;AAEA,yB;AACA,qB;AACA,iE;AACA,W;AACA,K;AACA,qE;AACA,G;;AAEA,oC;AACA,iD;AACA,+F;;AAEA,yB;AACA,qB;AACA,Y;AACA,a;AACA,+D;AACA,M;AACA,W;AACA,K;AACA,mE;AACA,G;;AAEA,qF;AACA,4B;AACA,uB;AACA,+D;AACA,0B;AACA,uC;AACA,0B;AACA,0C;AACA,K;AACA,M;;AAEA,6B;AACA,0B;AACA,I;AACA,sF;AACA,U;AACA,c;AACA,G;AACA,a;AACA,G;AACA,C;;AAEA,yB;;AAEA,I;AACA,uF;AACA,I;AACA,sG;AACA,qC;AACA,yB;AACA,0E;AACA,oI;AACA,qF;;AAEA,iD;AACA,6D;AACA,0B;;AAEA,kB;AACA,e;AACA,sD;AACA,qD;AACA,2B;AACA,0B;AACA,M;AACA,I;;AAEA,+B;AACA,iB;AACA,mB;AACA,4C;AACA,uB;AACA,Y;AACA,6C;AACA,wB;AACA,K;AACA,I;AACA,G;;;AAGA,qF;AACA,8D;AACA,uB;AACA,iB;AACA,4D;AACA,I;AACA,+B;AACA,yB;AACA,2D;AACA,I;;AAEA,2B;AACA,wF;AACA,G;AACA,C;;;;AAIA,G;AACA,oC;AACA,qG;AACA,E;AACA,+B;AACA,E;AACA,sC;AACA,G;;AAEA,yC;AACA,e;AACA,qB;AACA,gB;AACA,gB;AACA,wC;;AAEA,sF;AACA,+F;AACA,kD;AACA,6B;AACA,mB;;AAEA,yC;AACA,8C;AACA,8G;AACA,4C;AACA,4B;AACA,6G;AACA,oC;AACA,O;AACA,Q;AACA,K;AACA,M;AACA,uC;AACA,G;;AAEA,kB;AACA,mB;;AAEA,oC;AACA,4C;;AAEA,I;;AAEA,I;AACA,+F;AACA,qB;AACA,M;AACA,4D;;AAEA,0B;AACA,S;AACA,K;AACA,K;AACA,U;AACA,U;AACA,wD;AACA,a;AACA,qC;AACA,qC;AACA,sC;AACA,mC;AACA,M;AACA,K;AACA,C;AACA,8B;AACA,6B;AACA,qB;AACA,e;AACA,qC;AACA,yB;AACA,I;AACA,G;;AAEA,qE;AACA,mE;AACA,gB;AACA,+B;AACA,oC;AACA,K;;AAEA,8B;AACA,6B;AACA,sB;;AAEA,kC;AACA,uB;AACA,oH;AACA,0E;AACA,4E;AACA,K;AACA,I;AACA,G;;AAEA,iB;AACA,6B;AACA,qB;AACA,e;AACA,gE;AACA,gD;AACA,kF;AACA,K;AACA,uB;AACA,I;AACA,G;AACA,G;;AAEA,kB;AACA,qC;AACA,G;;AAEA,8C;;AAEA,gC;AACA,oB;AACA,wB;AACA,2B;AACA,kC;AACA,sC;AACA,+B;AACA,0B;AACA,U;;AAEA,8B;AACA,0B;AACA,gC;AACA,K;;AAEA,kG;AACA,0B;AACA,K;AACA,K;;AAEA,+B;AACA,wC;AACA,uB;AACA,wC;AACA,I;AACA,yB;AACA,0C;AACA,I;AACA,K;;AAEA,0D;AACA,6B;AACA,8C;AACA,8D;AACA,gB;AACA,mC;AACA,mC;AACA,qE;AACA,gB;AACA,oB;AACA,gD;AACA,M;AACA,K;AACA,M;AACA,8B;AACA,G;AACA,G;;AAEA,I;AACA,0E;AACA,uE;AACA,wE;AACA,uB;AACA,I;AACA,gC;AACA,oB;AACA,4B;AACA,qC;AACA,6E;AACA,0C;AACA,wB;AACA,2B;AACA,6B;AACA,qC;AACA,4B;AACA,2B;AACA,sC;AACA,sC;AACA,e;AACA,K;AACA,8B;AACA,uC;AACA,0B;AACA,K;AACA,K;AACA,K;AACA,yG;AACA,gB;AACA,gB;AACA,gB;AACA,oC;AACA,mC;AACA,mC;AACA,sB;AACA,sB;AACA,sC;AACA,M;AACA,wE;;AAEA,oE;AACA,wC;AACA,0C;AACA,6B;AACA,gB;AACA,mD;AACA,oF;AACA,K;AACA,sF;AACA,gF;AACA,K;AACA,I;AACA,G;;AAEA,yB;AACA,6C;AACA,iC;AACA,mE;AACA,mD;AACA,G;;AAEA,qB;AACA,gB;AACA,oC;AACA,oB;;AAEA,8C;AACA,U;AACA,wC;AACA,kD;AACA,yB;AACA,4C;AACA,sE;AACA,a;AACA,K;AACA,sB;;AAEA,gF;AACA,4E;AACA,kE;AACA,wC;AACA,kC;AACA,oE;AACA,e;;AAEA,mB;AACA,2C;AACA,K;AACA,M;AACA,G;AACA,E;AACA,E;AACA,sB;;;AAGA,G;AACA,yE;AACA,6B;AACA,I;;AAEA,yB;AACA,qE;AACA,C;;AAEA,sB;AACA,uE;AACA,C;;AAEA,0B;AACA,qE;AACA,C;;AAEA,G;AACA,iC;AACA,I;AACA,0B;;AAEA,kF;AACA,mB;AACA,oF;AACA,wE;AACA,8B;AACA,iD;AACA,I;AACA,+B;AACA,8D;AACA,mB;AACA,I;AACA,iC;AACA,8C;AACA,qC;AACA,uB;AACA,M;AACA,I;AACA,0C;AACA,Y;AACA,uB;AACA,K;;AAEA,8B;AACA,sC;AACA,sE;AACA,W;AACA,kE;AACA,I;AACA,K;AACA,G;;AAEA,yC;AACA,oB;;AAEA,0C;AACA,oB;AACA,0B;AACA,mD;AACA,+D;;AAEA,qD;AACA,6B;AACA,6D;AACA,6B;AACA,e;AACA,M;AACA,iB;AACA,mB;AACA,K;AACA,K;AACA,K;AACA,G;AACA,G;;AAEA,G;AACA,2D;AACA,G;AACA,mD;;;AAGA,G;AACA,2C;AACA,G;;AAEA,yB;AACA,I;AACA,2B;AACA,I;AACA,6B;AACA,mB;AACA,8B;AACA,oD;AACA,4B;AACA,yB;AACA,kE;AACA,G;AACA,2I;AACA,U;AACA,qC;AACA,8B;AACA,K;AACA,S;AACA,+C;AACA,G;AACA,G;;AAEA,I;AACA,mB;AACA,I;AACA,uB;AACA,mB;AACA,wE;AACA,gB;AACA,K;AACA,G;;AAEA,I;AACA,oE;AACA,yB;AACA,I;AACA,yB;AACA,mB;AACA,a;AACA,2B;AACA,yB;AACA,mB;;AAEA,wD;AACA,uC;AACA,qC;AACA,4B;AACA,M;AACA,uC;AACA,8D;AACA,6B;AACA,4B;;AAEA,oC;AACA,yF;AACA,uD;AACA,2B;AACA,2B;AACA,M;AACA,K;AACA,M;AACA,G;AACA,E;AACA,uC;AACA,0C;AACA,0C;AACA,yB;AACA,2D;AACA,qD;AACA,G;AACA,E;;AAEA,W;AACA,kB;AACA,gB;AACA,sG;AACA,K;AACA,G;AACA,G;;AAEA,I;AACA,gF;AACA,8E;AACA,wD;AACA,I;AACA,6B;;AAEA,mB;AACA,mC;AACA,Y;;AAEA,4C;AACA,oB;AACA,uC;AACA,qB;AACA,M;AACA,G;;AAEA,8E;AACA,+C;AACA,6C;AACA,wD;AACA,gD;AACA,kC;AACA,sE;AACA,gH;AACA,6C;;AAEA,6B;AACA,wE;AACA,wE;AACA,uE;AACA,oB;AACA,I;;AAEA,yF;AACA,K;;AAEA,iB;AACA,uB;AACA,G;AACA,2C;AACA,E;AACA,G;;AAEA,E;AACA,2C;AACA,G;AACA,yB;AACA,I;AACA,0C;AACA,sE;AACA,qF;AACA,+E;AACA,I;AACA,0C;AACA,mB;AACA,yB;AACA,wB;;AAEA,6C;;AAEA,4C;AACA,kG;AACA,sD;AACA,oE;;AAEA,4C;;AAEA,0D;AACA,qB;AACA,0D;AACA,qD;AACA,8D;AACA,+E;AACA,uC;AACA,4C;AACA,M;AACA,O;AACA,I;AACA,K;AACA,G;;AAEA,I;AACA,gC;AACA,I;AACA,4B;AACA,mB;AACA,yB;AACA,wB;AACA,2B;AACA,iC;;AAEA,qC;AACA,wB;AACA,K;;AAEA,wC;AACA,2C;AACA,2B;AACA,G;;AAEA,0D;;AAEA,uB;AACA,qC;;AAEA,wB;AACA,gE;AACA,8B;AACA,I;;AAEA,gB;AACA,+B;AACA,4B;AACA,G;AACA,G;;AAEA,I;AACA,oC;AACA,I;AACA,0B;AACA,gC;AACA,mC;;AAEA,kC;;AAEA,yE;AACA,mB;AACA,2B;AACA,G;AACA,G;;AAEA,I;AACA,qE;AACA,gD;AACA,I;AACA,4B;AACA,gC;AACA,oB;AACA,+D;AACA,4B;AACA,c;;AAEA,yB;;AAEA,8B;AACA,kD;AACA,I;AACA,iC;;AAEA,G;AACA,G;;AAEA,I;AACA,yB;AACA,yB;AACA,I;AACA,mC;AACA,mB;AACA,uB;AACA,uB;AACA,yB;AACA,wC;AACA,mF;AACA,4D;AACA,qE;AACA,8E;AACA,kD;AACA,oC;AACA,wB;AACA,U;AACA,sB;AACA,e;AACA,a;AACA,a;;AAEA,gD;AACA,gE;;AAEA,M;AACA,6B;AACA,uC;AACA,6C;AACA,iD;AACA,wC;AACA,qE;AACA,uD;AACA,6F;AACA,0D;AACA,sH;;AAEA,M;AACA,U;AACA,G;;AAEA,6C;AACA,sB;AACA,qE;AACA,4B;AACA,c;AACA,oD;AACA,uB;AACA,uB;AACA,uB;AACA,uB;AACA,U;AACA,M;;AAEA,qE;AACA,4B;AACA,8B;AACA,I;AACA,U;AACA,oF;AACA,iC;AACA,qC;AACA,uC;AACA,oD;;AAEA,4E;AACA,uD;AACA,+E;AACA,uD;AACA,K;;AAEA,qC;AACA,8B;AACA,qB;AACA,6E;AACA,iB;AACA,sB;AACA,sB;AACA,kB;AACA,iB;AACA,O;AACA,sB;AACA,+B;AACA,mD;AACA,M;;AAEA,gC;AACA,Y;AACA,6D;AACA,wB;AACA,uB;AACA,Q;AACA,K;AACA,I;;AAEA,4B;AACA,+G;AACA,sD;AACA,I;AACA,G;;AAEA,sB;AACA,gE;AACA,wC;AACA,e;AACA,8C;AACA,6B;AACA,I;AACA,qB;AACA,kF;AACA,2D;AACA,uC;AACA,M;AACA,oB;AACA,wB;AACA,G;;AAEA,sB;AACA,G;;AAEA,4B;AACA,2B;AACA,wB;AACA,iC;AACA,6B;;AAEA,uC;AACA,wF;AACA,wF;AACA,a;AACA,W;AACA,I;AACA,E;AACA,G;;AAEA,E;AACA,4C;AACA,G;;AAEA,0B;AACA,I;AACA,6B;AACA,I;AACA,2B;AACA,oB;AACA,wB;AACA,mC;;AAEA,wC;AACA,8C;AACA,4B;AACA,G;;AAEA,oD;AACA,oB;AACA,wC;AACA,kC;AACA,G;;AAEA,e;AACA,+B;AACA,6B;AACA,G;;AAEA,I;AACA,4B;AACA,I;AACA,0B;AACA,8C;AACA,oB;AACA,4B;AACA,wB;AACA,2B;AACA,iC;;AAEA,gF;;AAEA,iE;AACA,mB;AACA,2B;AACA,G;;AAEA,6B;AACA,0C;AACA,iC;AACA,G;;;AAGA,qB;AACA,0F;AACA,kB;AACA,G;;AAEA,qB;AACA,oB;AACA,G;;AAEA,I;AACA,8B;AACA,I;AACA,6B;AACA,oB;AACA,4B;AACA,wB;AACA,iC;AACA,iC;AACA,W;AACA,S;;AAEA,gC;;AAEA,+B;AACA,wB;;AAEA,sE;AACA,W;AACA,I;;AAEA,e;AACA,+G;AACA,I;;AAEA,kF;AACA,e;AACA,8B;AACA,M;AACA,mF;AACA,wB;AACA,qC;AACA,2C;AACA,e;AACA,K;AACA,I;AACA,G;AACA,G;;AAEA,I;AACA,mC;AACA,G;AACA,8E;AACA,iC;AACA,I;AACA,qC;AACA,oB;AACA,wB;AACA,kC;AACA,c;AACA,+D;AACA,kC;;AAEA,qD;AACA,+F;AACA,qC;;AAEA,0B;AACA,+E;AACA,qB;AACA,8B;AACA,I;AACA,K;;;AAGA,yB;AACA,iG;AACA,uB;AACA,G;;;AAGA,mB;AACA,0C;AACA,G;;;AAGA,sC;AACA,wB;AACA,8C;AACA,gC;AACA,8C;AACA,8D;AACA,gC;AACA,K;AACA,M;AACA,G;;AAEA,+B;AACA,oD;AACA,sC;AACA,K;;AAEA,2B;AACA,2B;AACA,G;AACA,yB;AACA,kB;AACA,G;;AAEA,gC;AACA,G;;AAEA,I;AACA,kB;AACA,I;AACA,oB;AACA,wB;AACA,G;;AAEA,I;AACA,kB;AACA,I;AACA,oB;AACA,yB;AACA,G;;;AAGA,I;AACA,uC;AACA,G;AACA,8E;AACA,iD;AACA,I;AACA,8B;AACA,oB;AACA,0C;AACA,sF;;AAEA,wB;AACA,sC;AACA,G;;AAEA,sD;AACA,G;;AAEA,2C;AACA,G;AACA,mB;AACA,oB;AACA,C;AACA,gB;AACA,c;AACA,c;AACA,a;AACA,oB;AACA,wB;AACA,0B;AACA,C;AACA,W;AACA,oB;AACA,oB;AACA,gB;AACA,wB;AACA,c;AACA,gB;AACA,oB;AACA,wB;AACA,wB;AACA,8B;AACA,wB;AACA,oB;AACA,0B;AACA,8B;AACA,gC;AACA,U;AACA,Y;AACA,U;AACA,c;AACA,c;AACA,0B;AACA,Y;AACA,a;AACA,kB;AACA,2B;AACA,kB;AACA,iB;AACA,G;;AAEA,K;;;;;;;;;;;;;;;;;;;AC1skBA,G;AACA,6C;AACA,0E;AACA,E;AACA,4B;AACA,yB;AACA,E;AACA,sC;AACA,G;;AAEA,e;AACA,C;AACA,iC;AACA,qC;AACA,kC;AACA,oB;AACA,gB;;AAEA,uB;AACA,8B;AACA,8B;AACA,I;AACA,C;AACA,2C;AACA,0B;AACA,a;AACA,Q;AACA,W;AACA,mB;AACA,0B;AACA,I;AACA,e;AACA,I;AACA,W;AACA,wB;AACA,oB;AACA,qB;AACA,G;AACA,2B;AACA,G;;AAEA,I;AACA,uH;AACA,K;AACA,wB;AACA,yC;AACA,E;;AAEA,gE;AACA,0B;AACA,oD;AACA,G;AACA,I;;AAEA,2C;AACA,2F;AACA,G;AACA,C;AACA,I;AACA,8B;AACA,G;AACA,gF;AACA,I;AACA,6C;AACA,mB;AACA,2B;AACA,qC;AACA,kC;;AAEA,2B;AACA,qC;AACA,W;AACA,W;AACA,Q;AACA,Q;AACA,W;AACA,W;AACA,W;AACA,4B;AACA,W;AACA,c;AACA,K;AACA,6B;AACA,6B;AACA,W;AACA,0G;AACA,G;AACA,G;;AAEA,I;AACA,yB;AACA,K;AACA,0C;AACA,mB;AACA,0B;AACA,mD;AACA,G;AACA,G;;AAEA,I;AACA,kE;AACA,K;AACA,uC;AACA,mB;AACA,yB;AACA,qB;;AAEA,e;AACA,+D;AACA,gB;AACA,K;AACA,G;;AAEA,e;AACA,G;;AAEA,I;AACA,0E;AACA,I;AACA,0B;AACA,mB;AACA,wB;AACA,sB;AACA,U;AACA,sB;AACA,G;AACA,E;;AAEA,I;AACA,qE;AACA,I;AACA,iD;AACA,0C;AACA,4C;AACA,I;;AAEA,e;;;;;;;;;;;;;;;;;;;ACxIA,sB;AACA,0C;;AAEA,G;AACA,6C;AACA,E;AACA,+B;AACA,E;AACA,sC;AACA,G;;AAEA,kB;AACA,0J;;AAEA,mC;AACA,mC;AACA,gC;AACA,wB;AACA,4B;AACA,0B;AACA,sB;AACA,wB;AACA,wB;AACA,0D;AACA,sC;AACA,sC;AACA,0B;AACA,wB;AACA,wB;AACA,wB;AACA,0B;AACA,8B;AACA,sD;AACA,wC;AACA,4B;AACA,a;AACA,wB;AACA,wB;AACA,oB;AACA,0B;AACA,0B;AACA,2E;AACA,G;AACA,yE;AACA,G;AACA,0C;AACA,iD;AACA,C;;AAEA,4B;AACA,wB;AACA,C;AACA,I;AACA,4B;AACA,I;AACA,6C;AACA,kB;AACA,oB;AACA,wC;AACA,E;AACA,qB;AACA,E;AACA,kE;AACA,0G;AACA,E;AACA,wC;AACA,E;AACA,+E;AACA,iF;AACA,yB;AACA,yE;AACA,8G;AACA,6C;AACA,0D;AACA,0B;AACA,8C;AACA,K;AACA,wE;AACA,gD;AACA,yE;AACA,8C;AACA,M;AACA,G;AACA,G;AACA,C;AACA,I;AACA,8B;AACA,I;AACA,kB;AACA,+B;AACA,yB;AACA,c;AACA,e;AACA,8B;AACA,I;AACA,C;AACA,I;AACA,kC;AACA,I;AACA,4B;AACA,kB;AACA,iB;AACA,wB;AACA,oB;AACA,kD;AACA,W;AACA,gB;AACA,e;AACA,I;AACA,I;AACA,mD;AACA,iB;AACA,gD;AACA,qB;AACA,E;AACA,C;AACA,G;AACA,+B;AACA,4B;AACA,C;AACA,G;AACA,iG;AACA,G;AACA,uB;AACA,iB;AACA,sB;AACA,uD;AACA,G;AACA,sB;AACA,uD;AACA,G;AACA,gB;AACA,qB;AACA,e;AACA,E;;AAEA,G;AACA,uC;AACA,G;AACA,wB;AACA,uB;AACA,gB;AACA,C;AACA,I;AACA,kD;AACA,I;AACA,6B;AACA,W;AACA,mB;AACA,Q;AACA,kB;AACA,I;AACA,wB;AACA,4B;AACA,sB;AACA,8B;AACA,oB;AACA,iB;AACA,yB;AACA,e;AACA,U;AACA,c;AACA,I;AACA,uD;AACA,G;AACA,C;AACA,uD;AACA,yB;AACA,6B;AACA,W;AACA,uB;AACA,gB;AACA,Q;AACA,kB;AACA,I;AACA,gB;AACA,gB;AACA,wB;AACA,e;AACA,G;AACA,C;AACA,8C;AACA,yB;AACA,kC;AACA,W;AACA,kB;AACA,S;AACA,Q;AACA,I;AACA,uB;AACA,U;AACA,Q;AACA,c;AACA,e;AACA,G;AACA,G;AACA,C;AACA,I;AACA,yB;AACA,I;AACA,qC;AACA,E;AACA,qC;AACA,uB;AACA,6B;AACA,c;AACA,I;;AAEA,wE;AACA,2B;AACA,0B;AACA,G;AACA,E;AACA,G;AACA,C;AACA,I;AACA,oF;AACA,Q;AACA,I;AACA,yB;AACA,gF;AACA,iC;AACA,E;AACA,2C;AACA,uC;AACA,E;AACA,yB;AACA,iF;AACA,G;;;AAGA,I;AACA,yF;AACA,W;AACA,I;AACA,4C;AACA,2B;AACA,qD;AACA,E;AACA,yC;AACA,yB;AACA,wB;AACA,U;AACA,W;AACA,I;AACA,8B;AACA,0B;AACA,e;AACA,a;AACA,I;AACA,I;AACA,G;;AAEA,I;AACA,4E;AACA,sE;AACA,oB;AACA,I;AACA,kC;AACA,E;AACA,uB;AACA,0C;AACA,G;AACA,mC;AACA,uD;AACA,yB;AACA,I;AACA,4D;AACA,kC;AACA,K;AACA,I;AACA,Y;AACA,sE;AACA,I;AACA,G;AACA,sB;AACA,6D;AACA,W;AACA,gG;AACA,oE;AACA,8B;AACA,I;AACA,G;AACA,G;AACA,C;AACA,I;AACA,oF;AACA,8E;AACA,I;AACA,sC;AACA,yB;AACA,wG;AACA,G;AACA,G;AACA,C;AACA,I;AACA,kF;AACA,0E;AACA,I;AACA,2B;AACA,E;AACA,mC;;AAEA,sB;;AAEA,0B;AACA,6F;;AAEA,qG;AACA,yB;AACA,yD;AACA,I;AACA,G;AACA,2C;AACA,mF;;;AAGA,G;AACA,G;AACA,C;AACA,I;AACA,gF;AACA,e;AACA,I;AACA,wC;AACA,4B;AACA,wD;AACA,2F;AACA,M;AACA,G;AACA,C;AACA,I;AACA,qG;AACA,I;AACA,0C;AACA,E;AACA,yB;AACA,wB;AACA,G;AACA,qC;;AAEA,U;AACA,4D;AACA,0D;AACA,K;AACA,E;AACA,G;AACA,C;AACA,I;AACA,sD;AACA,I;AACA,gD;AACA,2B;AACA,sC;AACA,8B;AACA,Y;AACA,sC;AACA,wB;AACA,+B;AACA,K;AACA,uB;AACA,S;AACA,O;AACA,Q;AACA,2D;AACA,O;AACA,G;AACA,yB;AACA,yD;AACA,2E;AACA,E;AACA,wB;AACA,U;;AAEA,wB;AACA,mC;AACA,+B;AACA,G;AACA,uF;AACA,qB;AACA,oC;AACA,kC;AACA,I;AACA,G;AACA,yC;AACA,yC;AACA,oC;AACA,oD;AACA,K;AACA,kB;AACA,M;AACA,G;AACA,wB;AACA,mD;AACA,yB;AACA,wB;AACA,gB;AACA,W;AACA,iD;AACA,6C;AACA,I;AACA,E;AACA,E;AACA,yC;AACA,0B;AACA,yB;AACA,a;AACA,a;AACA,K;AACA,uE;AACA,+B;AACA,iD;AACA,e;AACA,K;AACA,K;AACA,G;;AAEA,a;AACA,G;AACA,C;AACA,I;AACA,kE;AACA,I;AACA,6C;AACA,kB;AACA,wB;AACA,sB;AACA,iC;AACA,S;AACA,M;AACA,iB;AACA,O;AACA,E;AACA,W;AACA,wB;AACA,yF;AACA,E;AACA,0B;AACA,+D;AACA,iC;AACA,gD;AACA,qC;AACA,I;AACA,yB;AACA,U;AACA,sC;AACA,mC;AACA,+B;AACA,e;AACA,K;AACA,M;AACA,Y;AACA,iC;AACA,uC;AACA,2B;AACA,6D;AACA,I;AACA,qE;AACA,iB;AACA,uD;AACA,I;AACA,I;AACA,0C;AACA,uC;AACA,wC;AACA,M;AACA,G;AACA,G;AACA,a;AACA,G;AACA,C;AACA,I;AACA,qE;AACA,I;AACA,gC;AACA,2B;AACA,sB;AACA,qC;AACA,E;AACA,W;AACA,0D;AACA,6F;AACA,wC;AACA,I;AACA,E;AACA,C;AACA,E;AACA,yB;;AAEA,G;AACA,2F;AACA,G;AACA,gE;AACA,iB;AACA,0B;AACA,sB;AACA,wB;AACA,4B;AACA,a;AACA,gB;AACA,c;AACA,U;AACA,+B;AACA,oC;AACA,O;AACA,c;AACA,E;AACA,yB;AACA,e;AACA,6D;AACA,qB;AACA,mB;AACA,8D;AACA,G;AACA,E;AACA,oB;AACA,sE;AACA,gC;AACA,mB;AACA,6H;AACA,E;AACA,E;AACA,C;AACA,sB;AACA,wC;AACA,C;AACA,uC;AACA,yB;AACA,E;AACA,8C;AACA,qB;AACA,oB;AACA,G;AACA,iF;AACA,uC;AACA,S;AACA,O;AACA,I;AACA,6B;AACA,E;AACA,G;AACA,uD;AACA,yB;AACA,qC;AACA,E;AACA,oC;AACA,sE;AACA,6C;AACA,qF;AACA,oH;AACA,oC;AACA,E;AACA,+B;AACA,E;AACA,sC;AACA,mG;AACA,2B;AACA,G;AACA,E;AACA,C;AACA,G;;AAEA,G;AACA,oE;AACA,I;AACA,oF;AACA,sB;AACA,C;AACA,2B;AACA,yB;AACA,uD;AACA,G;;AAEA,G;AACA,8E;AACA,+B;AACA,I;AACA,uH;AACA,sB;AACA,4B;AACA,M;AACA,mE;AACA,6B;AACA,gG;;AAEA,qB;AACA,4F;AACA,E;AACA,0B;AACA,yC;AACA,gB;AACA,mB;AACA,M;AACA,E;AACA,wB;AACA,iC;AACA,oG;AACA,G;AACA,E;AACA,wB;AACA,uB;AACA,yB;AACA,qG;AACA,oB;AACA,K;AACA,yD;AACA,wC;AACA,sE;AACA,wC;AACA,Y;AACA,uC;AACA,K;AACA,W;AACA,qB;AACA,I;AACA,e;AACA,gB;AACA,M;AACA,G;AACA,E;AACA,0B;AACA,oB;AACA,E;AACA,S;AACA,0F;AACA,E;AACA,Y;AACA,G;;AAEA,G;AACA,wE;AACA,G;AACA,iG;AACA,sB;AACA,W;AACA,M;AACA,E;AACA,qB;AACA,yE;AACA,S;AACA,O;AACA,K;AACA,K;AACA,O;AACA,c;AACA,a;AACA,I;AACA,S;AACA,yE;AACA,E;AACA,Y;AACA,M;AACA,4B;AACA,G;AACA,G;;AAEA,G;AACA,8C;AACA,G;AACA,+D;AACA,c;AACA,c;AACA,iB;AACA,W;AACA,8H;AACA,G;AACA,mB;AACA,c;AACA,c;AACA,sB;AACA,U;AACA,W;AACA,U;AACA,W;AACA,G;AACA,U;AACA,U;AACA,c;AACA,G;AACA,E;AACA,G;;AAEA,G;AACA,sB;AACA,G;AACA,uD;AACA,mB;AACA,gC;AACA,4B;AACA,iC;AACA,G;AACA,oB;AACA,2B;;AAEA,I;AACA,gF;AACA,8E;AACA,gF;AACA,I;AACA,6B;AACA,mC;AACA,yB;AACA,mF;AACA,0C;AACA,wC;AACA,G;AACA,C;AACA,I;AACA,+E;AACA,I;AACA,2B;AACA,oB;;AAEA,wC;AACA,qF;AACA,mB;AACA,0D;AACA,yB;AACA,I;AACA,K;AACA,0C;AACA,G;AACA,C;AACA,I;AACA,oE;AACA,I;AACA,yB;AACA,oB;AACA,wB;;AAEA,qD;;AAEA,6B;AACA,wC;;AAEA,uB;AACA,sB;AACA,wB;;AAEA,uC;AACA,mB;AACA,6B;AACA,uC;AACA,uD;AACA,8B;AACA,0B;AACA,0B;AACA,W;AACA,0B;AACA,uD;AACA,I;AACA,K;;AAEA,yB;AACA,yB;AACA,uC;AACA,2B;AACA,M;AACA,G;AACA,G;AACA,C;AACA,I;AACA,yE;AACA,qD;AACA,I;AACA,qC;AACA,E;AACA,iB;AACA,oB;AACA,sB;AACA,wD;AACA,S;AACA,Y;AACA,a;AACA,0B;AACA,uB;AACA,c;AACA,G;AACA,kC;AACA,iE;AACA,iC;AACA,K;AACA,E;AACA,2D;AACA,e;AACA,sB;AACA,iC;AACA,sB;AACA,4E;AACA,0B;AACA,O;AACA,I;AACA,G;AACA,E;AACA,kB;AACA,wD;AACA,a;AACA,uB;AACA,kB;AACA,I;AACA,iH;AACA,G;AACA,0D;AACA,sB;AACA,E;AACA,sD;AACA,8C;AACA,E;AACA,yF;AACA,0B;AACA,gE;AACA,G;AACA,8D;AACA,E;AACA,kB;AACA,G;AACA,C;AACA,I;AACA,kF;AACA,W;AACA,I;AACA,8B;AACA,E;AACA,uB;AACA,wB;AACA,K;AACA,2B;AACA,kC;AACA,8C;AACA,kC;AACA,S;AACA,M;AACA,kC;AACA,G;AACA,yD;AACA,G;AACA,sF;AACA,c;AACA,gB;AACA,oB;AACA,gB;AACA,yC;AACA,K;AACA,8B;AACA,0B;AACA,gC;AACA,kC;AACA,K;AACA,qF;AACA,0B;AACA,6C;AACA,4C;AACA,K;AACA,8B;AACA,sB;AACA,oB;AACA,mB;AACA,sD;AACA,O;AACA,0D;AACA,a;AACA,kD;AACA,M;AACA,K;AACA,I;AACA,G;AACA,oC;AACA,+D;AACA,I;AACA,G;AACA,oE;AACA,c;AACA,gB;AACA,oB;AACA,gB;AACA,yC;AACA,K;AACA,oF;AACA,4C;AACA,6C;AACA,K;AACA,oB;AACA,yB;AACA,gC;AACA,K;AACA,8B;AACA,uB;AACA,oB;AACA,mB;AACA,sD;AACA,O;AACA,iD;AACA,a;AACA,iD;AACA,M;AACA,K;AACA,I;AACA,oC;AACA,sD;AACA,I;AACA,G;;AAEA,iC;AACA,C;AACA,G;AACA,C;AACA,8B;AACA,qE;AACA,G;AACA,C;AACA,wB;AACA,C;AACA,iB;AACA,C;AACA,iB;AACA,M;AACA,kC;AACA,G;;AAEA,yE;;AAEA,G;AACA,+B;AACA,G;AACA,kE;AACA,yB;AACA,4D;AACA,G;;AAEA,c;AACA,C;AACA,6C;;AAEA,I;AACA,+B;AACA,I;AACA,kG;AACA,e;AACA,kB;AACA,I;;AAEA,I;AACA,4B;AACA,I;AACA,+D;AACA,sB;AACA,K;AACA,qE;AACA,K;AACA,0B;AACA,qB;AACA,yB;AACA,a;;AAEA,oC;;AAEA,8B;AACA,yC;AACA,oC;AACA,oD;AACA,sB;AACA,Y;AACA,O;;AAEA,yD;AACA,wE;AACA,gC;;AAEA,mB;AACA,iB;AACA,oC;;AAEA,gC;AACA,4C;AACA,kD;AACA,gC;AACA,+B;;AAEA,4D;AACA,4B;AACA,kB;AACA,iB;AACA,K;;AAEA,8B;AACA,oB;AACA,M;AACA,I;AACA,oB;AACA,8C;AACA,kB;AACA,kD;AACA,kC;AACA,oC;AACA,4B;AACA,6C;AACA,I;AACA,K;;AAEA,G;AACA,wB;AACA,G;;;;AAIA,G;AACA,6B;AACA,G;AACA,2D;AACA,c;AACA,gB;AACA,e;AACA,Q;AACA,iB;AACA,wB;AACA,kB;AACA,c;AACA,uB;AACA,W;AACA,G;AACA,Q;AACA,mB;AACA,8B;AACA,2B;AACA,oB;AACA,kB;AACA,iB;AACA,mC;AACA,sB;AACA,G;AACA,S;AACA,c;AACA,kB;AACA,0B;AACA,4B;AACA,G;AACA,W;AACA,kB;AACA,G;AACA,oB;AACA,G;;AAEA,G;AACA,0B;AACA,G;AACA,qC;AACA,I;AACA,yC;AACA,I;AACA,6B;AACA,qB;AACA,E;AACA,G;;;AAGA,G;AACA,sB;AACA,G;AACA,mB;AACA,e;AACA,wB;AACA,C;AACA,mF;AACA,uB;AACA,gB;AACA,iB;AACA,gB;AACA,e;AACA,6C;AACA,C;AACA,I;AACA,uB;AACA,I;AACA,yB;AACA,E;AACA,oB;AACA,wB;AACA,4B;AACA,yB;AACA,G;AACA,0B;AACA,E;AACA,wC;AACA,G;AACA,qD;AACA,oE;AACA,yE;AACA,yE;AACA,2C;AACA,yC;AACA,kC;AACA,sF;;AAEA,2C;AACA,oD;AACA,0C;AACA,+G;AACA,G;AACA,uC;AACA,oF;AACA,I;;AAEA,uC;AACA,I;AACA,4B;AACA,sB;AACA,4B;AACA,U;AACA,kC;AACA,U;AACA,gC;AACA,2B;AACA,0B;AACA,+B;AACA,gC;AACA,Q;AACA,M;AACA,0B;AACA,0B;AACA,sB;AACA,K;AACA,G;AACA,8B;AACA,2B;AACA,2B;AACA,K;AACA,G;AACA,C;AACA,I;AACA,kD;AACA,I;AACA,0B;AACA,E;AACA,oB;AACA,gC;AACA,wB;AACA,4B;AACA,gC;AACA,oC;AACA,E;AACA,wC;AACA,G;AACA,+B;AACA,gC;AACA,oB;AACA,2D;AACA,G;AACA,iB;AACA,+B;AACA,yC;AACA,W;AACA,wD;AACA,Y;AACA,gD;AACA,mD;AACA,mD;AACA,6E;AACA,O;AACA,wB;AACA,I;AACA,K;AACA,E;AACA,0B;AACA,c;AACA,2B;AACA,0B;AACA,yB;AACA,M;AACA,U;AACA,qE;AACA,W;AACA,mD;AACA,kD;AACA,kD;AACA,M;AACA,oC;AACA,uB;AACA,G;AACA,G;AACA,C;AACA,I;AACA,wC;AACA,I;AACA,2B;AACA,oB;;AAEA,c;AACA,yC;AACA,gC;;AAEA,kB;AACA,mB;AACA,mB;AACA,0D;AACA,Q;;AAEA,e;AACA,sB;AACA,wC;AACA,kC;AACA,K;AACA,M;;AAEA,gD;AACA,yB;AACA,G;AACA,G;AACA,C;AACA,sB;AACA,8B;AACA,Y;AACA,a;AACA,wC;AACA,wB;AACA,yB;AACA,I;AACA,qC;AACA,uC;AACA,G;AACA,C;AACA,I;AACA,0F;AACA,kD;AACA,I;AACA,mC;AACA,mD;AACA,qB;AACA,wB;AACA,2B;AACA,uB;AACA,G;AACA,G;;AAEA,I;AACA,2D;AACA,I;AACA,2D;AACA,E;AACA,+D;;AAEA,+E;AACA,+C;AACA,+E;;AAEA,sB;AACA,+D;AACA,sB;AACA,c;AACA,qB;AACA,gB;AACA,U;AACA,U;AACA,mB;AACA,G;AACA,G;AACA,mB;AACA,yB;AACA,mB;AACA,iB;AACA,W;AACA,qG;AACA,iC;AACA,sC;AACA,kC;AACA,sC;AACA,8B;AACA,G;AACA,G;AACA,sB;AACA,sB;AACA,gB;AACA,G;;AAEA,2B;AACA,uD;AACA,iB;AACA,gG;AACA,2E;AACA,mE;AACA,G;AACA,uD;AACA,C;AACA,I;AACA,qD;AACA,I;AACA,sF;AACA,oB;AACA,kB;AACA,6B;AACA,G;AACA,C;AACA,I;AACA,oC;AACA,I;AACA,sB;;AAEA,I;AACA,oE;AACA,I;AACA,yB;AACA,oB;AACA,wB;AACA,wC;;AAEA,uD;;AAEA,+C;AACA,wC;AACA,uC;AACA,8B;AACA,mE;AACA,K;AACA,M;AACA,K;AACA,G;;AAEA,I;AACA,wB;AACA,I;AACA,0B;AACA,6C;AACA,0B;AACA,4B;AACA,wB;AACA,6B;AACA,a;AACA,U;AACA,U;AACA,Y;AACA,W;AACA,c;AACA,a;AACA,U;AACA,W;AACA,Y;AACA,Y;AACA,W;AACA,gB;AACA,gB;AACA,c;AACA,c;AACA,S;AACA,Q;AACA,S;AACA,a;AACA,a;AACA,S;AACA,8G;AACA,oE;;;AAGA,iC;;AAEA,2B;AACA,0C;AACA,iB;AACA,qB;AACA,mB;AACA,uC;AACA,G;AACA,mC;;AAEA,kE;;AAEA,+B;AACA,4B;AACA,kC;AACA,yB;AACA,qC;AACA,uD;AACA,kF;AACA,kF;AACA,wD;AACA,sD;AACA,I;AACA,sB;AACA,oE;AACA,2F;AACA,sE;AACA,I;AACA,0B;AACA,8E;AACA,qG;AACA,I;AACA,wB;AACA,0E;AACA,iG;AACA,I;AACA,e;AACA,mD;AACA,8C;AACA,gB;AACA,e;AACA,S;AACA,oB;AACA,S;AACA,sB;AACA,K;AACA,iB;AACA,S;AACA,oB;AACA,S;AACA,oB;AACA,M;AACA,I;AACA,c;AACA,sB;AACA,qD;AACA,4C;AACA,4C;AACA,4C;AACA,uB;AACA,wB;AACA,gB;AACA,U;AACA,mB;AACA,U;AACA,mB;AACA,U;AACA,oB;AACA,U;AACA,oB;AACA,U;AACA,mB;AACA,S;AACA,O;AACA,K;AACA,I;AACA,mB;AACA,wB;AACA,wD;AACA,qC;AACA,mC;AACA,qB;AACA,qB;AACA,U;AACA,0C;AACA,e;AACA,U;AACA,0C;AACA,e;AACA,M;AACA,oB;AACA,U;AACA,0C;AACA,c;AACA,U;AACA,0C;AACA,a;AACA,O;AACA,K;AACA,I;AACA,iB;AACA,yD;AACA,yD;AACA,kB;AACA,S;AACA,W;AACA,gB;AACA,S;AACA,Y;AACA,e;AACA,M;AACA,I;AACA,oC;AACA,4B;AACA,K;AACA,yC;AACA,yB;AACA,kD;AACA,M;AACA,uB;AACA,wC;AACA,M;AACA,kD;AACA,K;AACA,0B;AACA,2C;AACA,yB;AACA,K;AACA,yC;AACA,qB;AACA,oB;AACA,M;AACA,yB;AACA,mD;AACA,0B;AACA,qB;AACA,M;AACA,uB;AACA,wC;AACA,uB;AACA,qB;AACA,O;AACA,kD;AACA,uB;AACA,oB;AACA,K;AACA,I;AACA,K;;AAEA,G;AACA,gC;;;AAGA,G;;AAEA,+E;AACA,wC;AACA,+E;AACA,+E;AACA,+E;AACA,+E;;AAEA,0B;AACA,iE;AACA,kB;AACA,iB;AACA,uB;AACA,W;AACA,qI;AACA,G;AACA,mB;AACA,G;;AAEA,+B;AACA,yD;AACA,kB;AACA,0E;AACA,2E;AACA,iC;AACA,G;AACA,uD;AACA,oB;AACA,+F;;AAEA,I;AACA,yE;AACA,iB;AACA,I;AACA,gC;AACA,mE;AACA,4D;AACA,E;AACA,G;;AAEA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;AACA,+E;;AAEA,0B;AACA,iE;AACA,c;AACA,mB;AACA,kB;AACA,qB;AACA,c;AACA,c;AACA,G;AACA,U;AACA,U;AACA,4B;AACA,G;AACA,E;AACA,G;;;AAGA,+B;AACA,yD;AACA,mB;;AAEA,qB;;AAEA,kB;;AAEA,I;AACA,yC;AACA,I;AACA,yB;AACA,oB;AACA,4B;AACA,wB;AACA,O;AACA,K;AACA,U;AACA,S;AACA,a;AACA,S;AACA,K;AACA,U;AACA,a;AACA,wB;AACA,S;AACA,iC;AACA,+B;AACA,Y;;AAEA,gC;AACA,qD;;AAEA,+C;AACA,yB;;AAEA,kD;AACA,gC;AACA,qB;AACA,mC;AACA,+B;;AAEA,uB;AACA,2G;AACA,mB;AACA,mD;AACA,gB;;AAEA,mC;AACA,kD;AACA,qB;AACA,qB;AACA,wC;AACA,qD;AACA,I;AACA,e;AACA,0D;AACA,0C;;;AAGA,gB;AACA,qB;AACA,kD;AACA,mG;;AAEA,wC;AACA,kD;AACA,sG;AACA,oC;;AAEA,4E;AACA,0B;AACA,W;AACA,iD;AACA,qC;AACA,sD;AACA,mF;AACA,K;AACA,wB;AACA,I;AACA,mE;AACA,8B;AACA,oC;AACA,2B;AACA,I;;AAEA,qF;AACA,2E;AACA,kD;;AAEA,uC;AACA,oE;AACA,+B;AACA,+C;AACA,W;AACA,mC;AACA,I;;AAEA,G;AACA,G;;AAEA,I;AACA,yF;AACA,I;AACA,gC;AACA,oB;AACA,4B;AACA,wB;AACA,gF;AACA,S;AACA,6B;AACA,sC;AACA,U;AACA,O;AACA,W;AACA,W;AACA,K;AACA,K;;AAEA,+C;;AAEA,oC;AACA,gB;AACA,gD;;AAEA,oC;AACA,mB;AACA,mE;AACA,sB;AACA,W;AACA,a;AACA,gB;AACA,I;AACA,oC;AACA,oC;AACA,G;;AAEA,iD;;AAEA,oB;AACA,2B;AACA,2B;AACA,G;;AAEA,I;AACA,4C;AACA,I;AACA,yB;AACA,iB;AACA,kG;AACA,oC;AACA,0D;AACA,G;AACA,c;AACA,G;;AAEA,I;AACA,0D;AACA,I;AACA,0B;AACA,iE;;AAEA,oB;AACA,4B;AACA,iC;AACA,6C;AACA,8D;AACA,iD;AACA,oC;;AAEA,iD;AACA,oF;AACA,mF;;AAEA,wC;AACA,8B;AACA,e;AACA,sB;AACA,2C;AACA,2B;;AAEA,6C;AACA,Y;AACA,wC;AACA,K;AACA,I;AACA,K;AACA,G;;AAEA,I;AACA,iC;AACA,I;AACA,4B;;AAEA,uB;AACA,wB;AACA,yD;AACA,6C;AACA,a;AACA,W;AACA,W;AACA,Y;AACA,a;AACA,K;AACA,K;;AAEA,gC;AACA,iC;AACA,oC;;AAEA,Q;AACA,M;AACA,yD;AACA,M;AACA,wC;AACA,K;;AAEA,2B;AACA,4B;AACA,4B;AACA,I;;AAEA,yB;AACA,G;;AAEA,c;AACA,G;;AAEA,I;AACA,wC;AACA,I;AACA,mB;;AAEA,sC;AACA,G;;AAEA,+E;AACA,+E;AACA,+E;AACA,G;AACA,sC;AACA,G;AACA,gE;AACA,U;AACA,gB;AACA,E;AACA,G;;AAEA,G;AACA,2B;AACA,G;AACA,wD;AACA,iB;AACA,iB;AACA,sB;AACA,qC;AACA,yE;AACA,G;AACA,uC;AACA,6D;AACA,G;AACA,+E;AACA,iD;AACA,+E;;AAEA,0B;AACA,+D;AACA,c;AACA,mC;AACA,uB;AACA,I;AACA,e;AACA,yB;AACA,G;AACA,0B;AACA,U;AACA,sB;AACA,+C;AACA,c;AACA,G;AACA,Y;AACA,gB;AACA,wB;AACA,kB;AACA,U;AACA,U;AACA,U;AACA,W;AACA,I;AACA,G;AACA,G;AACA,W;AACA,wD;AACA,G;AACA,mB;AACA,e;AACA,c;AACA,G;;AAEA,sC;AACA,wB;AACA,4G;AACA,G;AACA,e;AACA,G;;AAEA,+B;AACA,uD;AACA,gB;AACA,yB;AACA,2B;AACA,iC;AACA,6C;AACA,qB;AACA,e;AACA,C;AACA,I;AACA,gE;AACA,I;AACA,uB;AACA,sB;AACA,8B;AACA,mB;AACA,G;AACA,C;AACA,I;AACA,+C;AACA,I;AACA,gC;AACA,0C;AACA,sD;AACA,E;AACA,oE;AACA,wD;AACA,E;AACA,0B;AACA,0D;AACA,G;AACA,c;AACA,G;AACA,C;AACA,I;AACA,oE;AACA,I;AACA,8B;AACA,mE;AACA,E;AACA,yC;AACA,E;AACA,a;AACA,G;;AAEA,I;AACA,8F;AACA,oF;AACA,oC;AACA,I;AACA,oD;AACA,U;AACA,K;AACA,O;AACA,sB;AACA,c;AACA,gD;AACA,U;AACA,E;AACA,mE;AACA,iD;AACA,wB;AACA,gE;AACA,wC;AACA,Q;AACA,gC;AACA,yB;AACA,I;AACA,kE;AACA,G;AACA,qB;AACA,G;AACA,C;AACA,I;AACA,oC;AACA,I;AACA,2B;AACA,yC;AACA,E;AACA,mC;AACA,uC;AACA,gC;AACA,iC;;AAEA,+B;AACA,oB;AACA,0B;;AAEA,e;AACA,sB;AACA,oB;AACA,mB;AACA,K;AACA,M;;AAEA,gD;AACA,uB;AACA,G;AACA,G;AACA,C;AACA,I;AACA,0D;AACA,I;AACA,yB;AACA,E;AACA,Q;AACA,oB;AACA,S;AACA,U;AACA,sB;AACA,E;AACA,0B;AACA,qD;AACA,E;AACA,mE;AACA,kB;AACA,E;AACA,e;AACA,mB;AACA,0C;AACA,G;AACA,sC;AACA,sB;AACA,+B;AACA,uB;AACA,oB;AACA,oB;AACA,c;AACA,M;AACA,I;AACA,uC;AACA,mB;AACA,6B;AACA,6B;AACA,uB;AACA,uB;AACA,M;AACA,+B;AACA,qE;AACA,I;AACA,G;AACA,G;AACA,C;AACA,I;AACA,wC;AACA,I;AACA,4C;AACA,mD;AACA,I;AACA,4C;AACA,mD;AACA,E;AACA,iD;AACA,U;AACA,4B;AACA,S;AACA,U;AACA,Y;AACA,2B;AACA,qC;AACA,E;AACA,G;AACA,E;AACA,qD;AACA,6D;AACA,mB;AACA,iB;AACA,G;;AAEA,G;AACA,uD;AACA,8C;AACA,G;AACA,4C;AACA,iB;AACA,wB;AACA,qB;AACA,a;AACA,qB;AACA,yB;AACA,wC;AACA,iB;AACA,gB;AACA,6D;AACA,0B;AACA,2B;AACA,yB;AACA,8B;AACA,oB;;AAEA,mD;AACA,sC;;AAEA,qC;AACA,S;;AAEA,4F;;AAEA,0B;AACA,gC;;AAEA,c;AACA,6B;;AAEA,sD;AACA,G;AACA,mE;AACA,kD;AACA,sC;AACA,oC;AACA,K;AACA,2B;AACA,iC;AACA,mC;AACA,a;AACA,K;AACA,O;AACA,wC;AACA,I;AACA,6B;AACA,yB;AACA,gC;AACA,8C;AACA,W;AACA,e;AACA,wB;AACA,6F;AACA,O;AACA,Q;AACA,sE;AACA,K;AACA,I;AACA,G;AACA,I;;AAEA,uC;;AAEA,6B;AACA,mB;AACA,U;;AAEA,gB;AACA,mE;AACA,G;AACA,E;AACA,kB;AACA,gB;AACA,sC;AACA,8B;AACA,kE;AACA,kE;AACA,K;AACA,I;AACA,G;AACA,I;AACA,C;AACA,oJ;AACA,sB;AACA,sD;AACA,6B;AACA,6B;AACA,E;AACA,E;;AAEA,+E;AACA,+E;AACA,+E;;AAEA,c;;AAEA,I;AACA,gG;AACA,8B;AACA,I;AACA,I;;AAEA,oC;AACA,mC;AACA,W;;AAEA,I;AACA,kF;AACA,I;AACA,gD;AACA,oB;AACA,wB;AACA,wB;AACA,8B;AACA,iD;AACA,gD;;AAEA,4B;AACA,+D;AACA,K;;AAEA,G;AACA,C;AACA,I;AACA,mG;AACA,0D;AACA,I;AACA,sD;AACA,yB;AACA,wB;AACA,+C;AACA,W;AACA,0B;AACA,I;AACA,G;AACA,sB;AACA,I;;AAEA,I;AACA,uF;AACA,iC;AACA,I;AACA,sC;AACA,S;AACA,sB;AACA,uB;AACA,uB;AACA,W;AACA,C;AACA,wD;AACA,0B;AACA,0B;AACA,C;AACA,mC;AACA,qE;AACA,yD;AACA,wD;;AAEA,0F;AACA,wE;AACA,uB;AACA,kF;AACA,8B;AACA,mB;AACA,I;AACA,2B;AACA,U;AACA,+B;AACA,G;AACA,G;;AAEA,I;AACA,wD;AACA,I;AACA,6C;AACA,qC;AACA,yB;AACA,E;AACA,M;AACA,qF;AACA,2E;AACA,M;AACA,wC;AACA,mC;AACA,c;AACA,S;AACA,e;AACA,c;AACA,S;AACA,K;AACA,E;AACA,oF;AACA,yB;AACA,4B;AACA,G;AACA,E;;AAEA,C;AACA,0B;AACA,sD;AACA,E;AACA,gC;AACA,8D;AACA,G;;AAEA,0B;AACA,K;AACA,0E;AACA,K;AACA,8F;AACA,C;AACA,W;AACA,+G;AACA,0B;AACA,W;AACA,U;AACA,c;AACA,c;AACA,U;AACA,U;AACA,U;AACA,U;AACA,c;AACA,c;AACA,e;AACA,e;AACA,6B;AACA,8B;AACA,kB;AACA,mB;AACA,e;AACA,E;AACA,E;AACA,0B;AACA,E;AACA,wB;AACA,wB;AACA,+B;AACA,+B;AACA,G;AACA,mB;AACA,2B;AACA,sB;AACA,4H;AACA,M;AACA,sB;AACA,6B;AACA,O;AACA,K;;AAEA,0B;AACA,iC;AACA,E;AACA,6B;AACA,6B;AACA,6B;AACA,6B;AACA,qD;AACA,qD;AACA,sD;AACA,sD;AACA,2G;AACA,8G;AACA,sE;AACA,yE;AACA,yE;AACA,I;AACA,I;AACA,8F;AACA,8D;AACA,4B;AACA,M;AACA,G;AACA,iF;AACA,yE;AACA,yE;AACA,qF;AACA,qF;AACA,G;AACA,wC;AACA,mC;AACA,mC;;AAEA,K;AACA,E;AACA,E;AACA,uB;AACA,a;AACA,+B;AACA,6C;AACA,Y;AACA,U;AACA,8C;AACA,8C;AACA,yB;AACA,yB;AACA,Y;AACA,W;AACA,O;AACA,2F;AACA,K;AACA,E;AACA,E;AACA,W;AACA,gD;AACA,I;AACA,c;AACA,K;AACA,E;;AAEA,I;AACA,0F;AACA,gH;AACA,Y;AACA,I;AACA,oD;AACA,yB;AACA,U;AACA,K;;AAEA,oB;AACA,qB;AACA,C;AACA,iC;AACA,oB;AACA,0D;AACA,C;AACA,oC;AACA,yB;AACA,sB;;AAEA,iB;AACA,6E;AACA,0B;AACA,K;AACA,I;AACA,G;AACA,I;;AAEA,K;AACA,0F;AACA,qB;AACA,I;AACA,kE;AACA,E;AACA,2B;AACA,C;AACA,qB;AACA,gE;AACA,wF;AACA,iD;AACA,6C;AACA,G;AACA,C;AACA,oB;AACA,qC;AACA,C;AACA,I;;;AAGA,uC;AACA,yB;AACA,sC;AACA,sB;AACA,kC;AACA,8B;AACA,6B;AACA,2B;AACA,W;;AAEA,wC;AACA,oB;AACA,E;AACA,oG;AACA,yC;AACA,8B;;AAEA,6B;AACA,oB;AACA,K;AACA,C;AACA,+B;AACA,e;AACA,I;AACA,uD;AACA,gB;AACA,uC;AACA,sC;AACA,6B;AACA,mB;AACA,O;AACA,K;AACA,yB;AACA,uB;AACA,oD;AACA,gC;AACA,M;AACA,I;AACA,wB;AACA,Y;AACA,gB;AACA,2B;AACA,0B;AACA,gB;AACA,e;AACA,O;AACA,uC;AACA,uB;AACA,8C;AACA,M;AACA,I;AACA,kD;AACA,yB;AACA,K;AACA,I;AACA,C;AACA,wD;AACA,U;AACA,4B;AACA,I;AACA,E;;AAEA,gD;AACA,4C;;;AAGA,0B;;AAEA,0C;AACA,K;AACA,8C;AACA,I;AACA,0C;;;AAGA,K;AACA,mD;AACA,K;AACA,kD;AACA,E;AACA,0B;AACA,yB;AACA,0B;AACA,wC;AACA,mC;AACA,U;AACA,W;AACA,U;AACA,M;AACA,C;AACA,oC;AACA,C;AACA,qB;AACA,sB;AACA,C;AACA,kC;AACA,wB;AACA,yB;AACA,sB;AACA,iB;AACA,uB;AACA,wC;AACA,8B;AACA,wB;AACA,8B;AACA,iB;AACA,iB;AACA,yB;AACA,a;AACA,Q;AACA,qB;AACA,sC;AACA,8C;AACA,Q;AACA,O;AACA,O;AACA,gD;AACA,uB;AACA,mD;AACA,6C;AACA,K;AACA,I;AACA,K;;;AAGA,K;AACA,yD;AACA,K;AACA,kG;AACA,C;AACA,0B;AACA,gD;AACA,W;AACA,mB;AACA,E;AACA,wD;AACA,iC;AACA,qC;AACA,yC;AACA,6C;AACA,yC;AACA,a;AACA,wC;AACA,M;AACA,2B;AACA,K;AACA,yC;AACA,qC;AACA,2C;AACA,6C;AACA,2C;AACA,a;AACA,gD;AACA,M;AACA,2C;AACA,K;AACA,E;AACA,qF;AACA,W;AACA,kE;AACA,I;AACA,C;AACA,O;AACA,E;;AAEA,I;AACA,0D;AACA,I;AACA,6D;AACA,yB;AACA,U;AACA,c;AACA,a;AACA,K;AACA,C;AACA,qB;;AAEA,qC;AACA,+B;AACA,0B;AACA,+C;AACA,8C;AACA,G;AACA,2C;AACA,gB;AACA,2B;AACA,e;AACA,6C;AACA,0E;AACA,U;AACA,M;AACA,O;AACA,M;AACA,E;AACA,U;AACA,+B;AACA,G;AACA,C;AACA,a;AACA,I;;AAEA,K;;AAEA,e;;;;;;;;;;;;;;;;;;;;ACrjFA,yC;AACA,sF;AACA,kB;AACA,mB;AACA,oB;AACA,wD;AACA,M;AACA,uB;AACA,wI;AACA,K;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;ACZA,iD;AACA,iB;;AAEA,0B;AACA,oC;AACA,qD;AACA,I;AACA,G","file":"/packages/maazalik_highcharts.js","sourcesContent":["// ==ClosureCompiler==\n// @compilation_level SIMPLE_OPTIMIZATIONS\n\n/**\n * @license Highcharts JS v4.1.7 (2015-06-26)\n *\n * (c) 2009-2014 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n\n// JSLint options:\n/*global Highcharts, HighchartsAdapter, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console, each, grep */\n/*jslint ass: true, sloppy: true, forin: true, plusplus: true, nomen: true, vars: true, regexp: true, newcap: true, browser: true, continue: true, white: true */\n(function () {\n// encapsulated variables\nvar UNDEFINED,\n\tdoc = document,\n\twin = window,\n\tmath = Math,\n\tmathRound = math.round,\n\tmathFloor = math.floor,\n\tmathCeil = math.ceil,\n\tmathMax = math.max,\n\tmathMin = math.min,\n\tmathAbs = math.abs,\n\tmathCos = math.cos,\n\tmathSin = math.sin,\n\tmathPI = math.PI,\n\tdeg2rad = mathPI * 2 / 360,\n\n\n\t// some variables\n\tuserAgent = navigator.userAgent,\n\tisOpera = win.opera,\n\tisIE = /(msie|trident)/i.test(userAgent) && !isOpera,\n\tdocMode8 = doc.documentMode === 8,\n\tisWebKit = /AppleWebKit/.test(userAgent),\n\tisFirefox = /Firefox/.test(userAgent),\n\tisTouchDevice = /(Mobile|Android|Windows Phone)/.test(userAgent),\n\tSVG_NS = 'http://www.w3.org/2000/svg',\n\thasSVG = !!doc.createElementNS && !!doc.createElementNS(SVG_NS, 'svg').createSVGRect,\n\thasBidiBug = isFirefox && parseInt(userAgent.split('Firefox/')[1], 10) < 4, // issue #38\n\tuseCanVG = !hasSVG && !isIE && !!doc.createElement('canvas').getContext,\n\tRenderer,\n\thasTouch,\n\tsymbolSizes = {},\n\tidCounter = 0,\n\tgarbageBin,\n\tdefaultOptions,\n\tdateFormat, // function\n\tglobalAnimation,\n\tpathAnim,\n\ttimeUnits,\n\tnoop = function () { return UNDEFINED; },\n\tcharts = [],\n\tchartCount = 0,\n\tPRODUCT = 'Highcharts',\n\tVERSION = '4.1.7',\n\n\t// some constants for frequently used strings\n\tDIV = 'div',\n\tABSOLUTE = 'absolute',\n\tRELATIVE = 'relative',\n\tHIDDEN = 'hidden',\n\tPREFIX = 'highcharts-',\n\tVISIBLE = 'visible',\n\tPX = 'px',\n\tNONE = 'none',\n\tM = 'M',\n\tL = 'L',\n\tnumRegex = /^[0-9]+$/,\n\tNORMAL_STATE = '',\n\tHOVER_STATE = 'hover',\n\tSELECT_STATE = 'select',\n\tmarginNames = ['plotTop', 'marginRight', 'marginBottom', 'plotLeft'],\n\t\n\t// Object for extending Axis\n\tAxisPlotLineOrBandExtension,\n\n\t// constants for attributes\n\tSTROKE_WIDTH = 'stroke-width',\n\n\t// time methods, changed based on whether or not UTC is used\n\tDate,  // Allow using a different Date class\n\tmakeTime,\n\ttimezoneOffset,\n\tgetTimezoneOffset,\n\tgetMinutes,\n\tgetHours,\n\tgetDay,\n\tgetDate,\n\tgetMonth,\n\tgetFullYear,\n\tsetMilliseconds,\n\tsetSeconds,\n\tsetMinutes,\n\tsetHours,\n\tsetDate,\n\tsetMonth,\n\tsetFullYear,\n\n\n\t// lookup over the types and the associated classes\n\tseriesTypes = {},\n\tHighcharts;\n\n// The Highcharts namespace\nHighcharts = win.Highcharts = win.Highcharts ? error(16, true) : {};\n\nHighcharts.seriesTypes = seriesTypes;\n\n/**\n * Extend an object with the members of another\n * @param {Object} a The object to be extended\n * @param {Object} b The object to add to the first one\n */\nvar extend = Highcharts.extend = function (a, b) {\n\tvar n;\n\tif (!a) {\n\t\ta = {};\n\t}\n\tfor (n in b) {\n\t\ta[n] = b[n];\n\t}\n\treturn a;\n};\n\t\n/**\n * Deep merge two or more objects and return a third object. If the first argument is\n * true, the contents of the second object is copied into the first object.\n * Previously this function redirected to jQuery.extend(true), but this had two limitations.\n * First, it deep merged arrays, which lead to workarounds in Highcharts. Second,\n * it copied properties from extended prototypes. \n */\nfunction merge() {\n\tvar i,\n\t\targs = arguments,\n\t\tlen,\n\t\tret = {},\n\t\tdoCopy = function (copy, original) {\n\t\t\tvar value, key;\n\n\t\t\t// An object is replacing a primitive\n\t\t\tif (typeof copy !== 'object') {\n\t\t\t\tcopy = {};\n\t\t\t}\n\n\t\t\tfor (key in original) {\n\t\t\t\tif (original.hasOwnProperty(key)) {\n\t\t\t\t\tvalue = original[key];\n\n\t\t\t\t\t// Copy the contents of objects, but not arrays or DOM nodes\n\t\t\t\t\tif (value && typeof value === 'object' && Object.prototype.toString.call(value) !== '[object Array]' &&\n\t\t\t\t\t\t\tkey !== 'renderTo' && typeof value.nodeType !== 'number') {\n\t\t\t\t\t\tcopy[key] = doCopy(copy[key] || {}, value);\n\t\t\t\t\n\t\t\t\t\t// Primitives and arrays are copied over directly\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcopy[key] = original[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn copy;\n\t\t};\n\n\t// If first argument is true, copy into the existing object. Used in setOptions.\n\tif (args[0] === true) {\n\t\tret = args[1];\n\t\targs = Array.prototype.slice.call(args, 2);\n\t}\n\n\t// For each argument, extend the return\n\tlen = args.length;\n\tfor (i = 0; i < len; i++) {\n\t\tret = doCopy(ret, args[i]);\n\t}\n\n\treturn ret;\n}\n\n/**\n * Shortcut for parseInt\n * @param {Object} s\n * @param {Number} mag Magnitude\n */\nfunction pInt(s, mag) {\n\treturn parseInt(s, mag || 10);\n}\n\n/**\n * Check for string\n * @param {Object} s\n */\nfunction isString(s) {\n\treturn typeof s === 'string';\n}\n\n/**\n * Check for object\n * @param {Object} obj\n */\nfunction isObject(obj) {\n\treturn obj && typeof obj === 'object';\n}\n\n/**\n * Check for array\n * @param {Object} obj\n */\nfunction isArray(obj) {\n\treturn Object.prototype.toString.call(obj) === '[object Array]';\n}\n\n/**\n * Check for number\n * @param {Object} n\n */\nfunction isNumber(n) {\n\treturn typeof n === 'number';\n}\n\nfunction log2lin(num) {\n\treturn math.log(num) / math.LN10;\n}\nfunction lin2log(num) {\n\treturn math.pow(10, num);\n}\n\n/**\n * Remove last occurence of an item from an array\n * @param {Array} arr\n * @param {Mixed} item\n */\nfunction erase(arr, item) {\n\tvar i = arr.length;\n\twhile (i--) {\n\t\tif (arr[i] === item) {\n\t\t\tarr.splice(i, 1);\n\t\t\tbreak;\n\t\t}\n\t}\n\t//return arr;\n}\n\n/**\n * Returns true if the object is not null or undefined. Like MooTools' $.defined.\n * @param {Object} obj\n */\nfunction defined(obj) {\n\treturn obj !== UNDEFINED && obj !== null;\n}\n\n/**\n * Set or get an attribute or an object of attributes. Can't use jQuery attr because\n * it attempts to set expando properties on the SVG element, which is not allowed.\n *\n * @param {Object} elem The DOM element to receive the attribute(s)\n * @param {String|Object} prop The property or an abject of key-value pairs\n * @param {String} value The value if a single property is set\n */\nfunction attr(elem, prop, value) {\n\tvar key,\n\t\tret;\n\n\t// if the prop is a string\n\tif (isString(prop)) {\n\t\t// set the value\n\t\tif (defined(value)) {\n\t\t\telem.setAttribute(prop, value);\n\n\t\t// get the value\n\t\t} else if (elem && elem.getAttribute) { // elem not defined when printing pie demo...\n\t\t\tret = elem.getAttribute(prop);\n\t\t}\n\n\t// else if prop is defined, it is a hash of key/value pairs\n\t} else if (defined(prop) && isObject(prop)) {\n\t\tfor (key in prop) {\n\t\t\telem.setAttribute(key, prop[key]);\n\t\t}\n\t}\n\treturn ret;\n}\n/**\n * Check if an element is an array, and if not, make it into an array. Like\n * MooTools' $.splat.\n */\nfunction splat(obj) {\n\treturn isArray(obj) ? obj : [obj];\n}\n\n\n/**\n * Return the first value that is defined. Like MooTools' $.pick.\n */\nvar pick = Highcharts.pick = function () {\n\tvar args = arguments,\n\t\ti,\n\t\targ,\n\t\tlength = args.length;\n\tfor (i = 0; i < length; i++) {\n\t\targ = args[i];\n\t\tif (arg !== UNDEFINED && arg !== null) {\n\t\t\treturn arg;\n\t\t}\n\t}\n};\n\n/**\n * Set CSS on a given element\n * @param {Object} el\n * @param {Object} styles Style object with camel case property names\n */\nfunction css(el, styles) {\n\tif (isIE && !hasSVG) { // #2686\n\t\tif (styles && styles.opacity !== UNDEFINED) {\n\t\t\tstyles.filter = 'alpha(opacity=' + (styles.opacity * 100) + ')';\n\t\t}\n\t}\n\textend(el.style, styles);\n}\n\n/**\n * Utility function to create element with attributes and styles\n * @param {Object} tag\n * @param {Object} attribs\n * @param {Object} styles\n * @param {Object} parent\n * @param {Object} nopad\n */\nfunction createElement(tag, attribs, styles, parent, nopad) {\n\tvar el = doc.createElement(tag);\n\tif (attribs) {\n\t\textend(el, attribs);\n\t}\n\tif (nopad) {\n\t\tcss(el, {padding: 0, border: NONE, margin: 0});\n\t}\n\tif (styles) {\n\t\tcss(el, styles);\n\t}\n\tif (parent) {\n\t\tparent.appendChild(el);\n\t}\n\treturn el;\n}\n\n/**\n * Extend a prototyped class by new members\n * @param {Object} parent\n * @param {Object} members\n */\nfunction extendClass(parent, members) {\n\tvar object = function () { return UNDEFINED; };\n\tobject.prototype = new parent();\n\textend(object.prototype, members);\n\treturn object;\n}\n\n/**\n * Pad a string to a given length by adding 0 to the beginning\n * @param {Number} number\n * @param {Number} length\n */\nfunction pad(number, length) {\n\t// Create an array of the remaining length +1 and join it with 0's\n\treturn new Array((length || 2) + 1 - String(number).length).join(0) + number;\n}\n\n/**\n * Return a length based on either the integer value, or a percentage of a base.\n */\nfunction relativeLength (value, base) {\n\treturn (/%$/).test(value) ? base * parseFloat(value) / 100 : parseFloat(value);\n}\n\n/**\n * Wrap a method with extended functionality, preserving the original function\n * @param {Object} obj The context object that the method belongs to \n * @param {String} method The name of the method to extend\n * @param {Function} func A wrapper function callback. This function is called with the same arguments\n * as the original function, except that the original function is unshifted and passed as the first \n * argument. \n */\nvar wrap = Highcharts.wrap = function (obj, method, func) {\n\tvar proceed = obj[method];\n\tobj[method] = function () {\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\targs.unshift(proceed);\n\t\treturn func.apply(this, args);\n\t};\n};\n\n\nfunction getTZOffset(timestamp) {\n\treturn ((getTimezoneOffset && getTimezoneOffset(timestamp)) || timezoneOffset || 0) * 60000;\n}\n\n/**\n * Based on http://www.php.net/manual/en/function.strftime.php\n * @param {String} format\n * @param {Number} timestamp\n * @param {Boolean} capitalize\n */\ndateFormat = function (format, timestamp, capitalize) {\n\tif (!defined(timestamp) || isNaN(timestamp)) {\n\t\treturn 'Invalid date';\n\t}\n\tformat = pick(format, '%Y-%m-%d %H:%M:%S');\n\n\tvar date = new Date(timestamp - getTZOffset(timestamp)),\n\t\tkey, // used in for constuct below\n\t\t// get the basic time values\n\t\thours = date[getHours](),\n\t\tday = date[getDay](),\n\t\tdayOfMonth = date[getDate](),\n\t\tmonth = date[getMonth](),\n\t\tfullYear = date[getFullYear](),\n\t\tlang = defaultOptions.lang,\n\t\tlangWeekdays = lang.weekdays,\n\n\t\t// List all format keys. Custom formats can be added from the outside. \n\t\treplacements = extend({\n\n\t\t\t// Day\n\t\t\t'a': langWeekdays[day].substr(0, 3), // Short weekday, like 'Mon'\n\t\t\t'A': langWeekdays[day], // Long weekday, like 'Monday'\n\t\t\t'd': pad(dayOfMonth), // Two digit day of the month, 01 to 31\n\t\t\t'e': dayOfMonth, // Day of the month, 1 through 31\n\t\t\t'w': day,\n\n\t\t\t// Week (none implemented)\n\t\t\t//'W': weekNumber(),\n\n\t\t\t// Month\n\t\t\t'b': lang.shortMonths[month], // Short month, like 'Jan'\n\t\t\t'B': lang.months[month], // Long month, like 'January'\n\t\t\t'm': pad(month + 1), // Two digit month number, 01 through 12\n\n\t\t\t// Year\n\t\t\t'y': fullYear.toString().substr(2, 2), // Two digits year, like 09 for 2009\n\t\t\t'Y': fullYear, // Four digits year, like 2009\n\n\t\t\t// Time\n\t\t\t'H': pad(hours), // Two digits hours in 24h format, 00 through 23\n\t\t\t'I': pad((hours % 12) || 12), // Two digits hours in 12h format, 00 through 11\n\t\t\t'l': (hours % 12) || 12, // Hours in 12h format, 1 through 12\n\t\t\t'M': pad(date[getMinutes]()), // Two digits minutes, 00 through 59\n\t\t\t'p': hours < 12 ? 'AM' : 'PM', // Upper case AM or PM\n\t\t\t'P': hours < 12 ? 'am' : 'pm', // Lower case AM or PM\n\t\t\t'S': pad(date.getSeconds()), // Two digits seconds, 00 through  59\n\t\t\t'L': pad(mathRound(timestamp % 1000), 3) // Milliseconds (naming from Ruby)\n\t\t}, Highcharts.dateFormats);\n\n\n\t// do the replaces\n\tfor (key in replacements) {\n\t\twhile (format.indexOf('%' + key) !== -1) { // regex would do it in one line, but this is faster\n\t\t\tformat = format.replace('%' + key, typeof replacements[key] === 'function' ? replacements[key](timestamp) : replacements[key]);\n\t\t}\n\t}\n\n\t// Optionally capitalize the string and return\n\treturn capitalize ? format.substr(0, 1).toUpperCase() + format.substr(1) : format;\n};\n\n/** \n * Format a single variable. Similar to sprintf, without the % prefix.\n */\nfunction formatSingle(format, val) {\n\tvar floatRegex = /f$/,\n\t\tdecRegex = /\\.([0-9])/,\n\t\tlang = defaultOptions.lang,\n\t\tdecimals;\n\n\tif (floatRegex.test(format)) { // float\n\t\tdecimals = format.match(decRegex);\n\t\tdecimals = decimals ? decimals[1] : -1;\n\t\tif (val !== null) {\n\t\t\tval = Highcharts.numberFormat(\n\t\t\t\tval,\n\t\t\t\tdecimals,\n\t\t\t\tlang.decimalPoint,\n\t\t\t\tformat.indexOf(',') > -1 ? lang.thousandsSep : ''\n\t\t\t);\n\t\t}\n\t} else {\n\t\tval = dateFormat(format, val);\n\t}\n\treturn val;\n}\n\n/**\n * Format a string according to a subset of the rules of Python's String.format method.\n */\nfunction format(str, ctx) {\n\tvar splitter = '{',\n\t\tisInside = false,\n\t\tsegment,\n\t\tvalueAndFormat,\n\t\tpath,\n\t\ti,\n\t\tlen,\n\t\tret = [],\n\t\tval,\n\t\tindex;\n\t\n\twhile ((index = str.indexOf(splitter)) !== -1) {\n\t\t\n\t\tsegment = str.slice(0, index);\n\t\tif (isInside) { // we're on the closing bracket looking back\n\t\t\t\n\t\t\tvalueAndFormat = segment.split(':');\n\t\t\tpath = valueAndFormat.shift().split('.'); // get first and leave format\n\t\t\tlen = path.length;\n\t\t\tval = ctx;\n\n\t\t\t// Assign deeper paths\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tval = val[path[i]];\n\t\t\t}\n\n\t\t\t// Format the replacement\n\t\t\tif (valueAndFormat.length) {\n\t\t\t\tval = formatSingle(valueAndFormat.join(':'), val);\n\t\t\t}\n\n\t\t\t// Push the result and advance the cursor\n\t\t\tret.push(val);\n\t\t\t\n\t\t} else {\n\t\t\tret.push(segment);\n\t\t\t\n\t\t}\n\t\tstr = str.slice(index + 1); // the rest\n\t\tisInside = !isInside; // toggle\n\t\tsplitter = isInside ? '}' : '{'; // now look for next matching bracket\n\t}\n\tret.push(str);\n\treturn ret.join('');\n}\n\n/**\n * Get the magnitude of a number\n */\nfunction getMagnitude(num) {\n\treturn math.pow(10, mathFloor(math.log(num) / math.LN10));\n}\n\n/**\n * Take an interval and normalize it to multiples of 1, 2, 2.5 and 5\n * @param {Number} interval\n * @param {Array} multiples\n * @param {Number} magnitude\n * @param {Object} options\n */\nfunction normalizeTickInterval(interval, multiples, magnitude, allowDecimals, preventExceed) {\n\tvar normalized, \n\t\ti,\n\t\tretInterval = interval;\n\n\t// round to a tenfold of 1, 2, 2.5 or 5\n\tmagnitude = pick(magnitude, 1);\n\tnormalized = interval / magnitude;\n\n\t// multiples for a linear scale\n\tif (!multiples) {\n\t\tmultiples = [1, 2, 2.5, 5, 10];\n\n\t\t// the allowDecimals option\n\t\tif (allowDecimals === false) {\n\t\t\tif (magnitude === 1) {\n\t\t\t\tmultiples = [1, 2, 5, 10];\n\t\t\t} else if (magnitude <= 0.1) {\n\t\t\t\tmultiples = [1 / magnitude];\n\t\t\t}\n\t\t}\n\t}\n\n\t// normalize the interval to the nearest multiple\n\tfor (i = 0; i < multiples.length; i++) {\n\t\tretInterval = multiples[i];\n\t\tif ((preventExceed && retInterval * magnitude >= interval) || // only allow tick amounts smaller than natural\n\t\t\t(!preventExceed && (normalized <= (multiples[i] + (multiples[i + 1] || multiples[i])) / 2))) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// multiply back to the correct magnitude\n\tretInterval *= magnitude;\n\t\n\treturn retInterval;\n}\n\n\n/**\n * Utility method that sorts an object array and keeping the order of equal items.\n * ECMA script standard does not specify the behaviour when items are equal.\n */\nfunction stableSort(arr, sortFunction) {\n\tvar length = arr.length,\n\t\tsortValue,\n\t\ti;\n\n\t// Add index to each item\n\tfor (i = 0; i < length; i++) {\n\t\tarr[i].ss_i = i; // stable sort index\n\t}\n\n\tarr.sort(function (a, b) {\n\t\tsortValue = sortFunction(a, b);\n\t\treturn sortValue === 0 ? a.ss_i - b.ss_i : sortValue;\n\t});\n\n\t// Remove index from items\n\tfor (i = 0; i < length; i++) {\n\t\tdelete arr[i].ss_i; // stable sort index\n\t}\n}\n\n/**\n * Non-recursive method to find the lowest member of an array. Math.min raises a maximum\n * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This\n * method is slightly slower, but safe.\n */\nfunction arrayMin(data) {\n\tvar i = data.length,\n\t\tmin = data[0];\n\n\twhile (i--) {\n\t\tif (data[i] < min) {\n\t\t\tmin = data[i];\n\t\t}\n\t}\n\treturn min;\n}\n\n/**\n * Non-recursive method to find the lowest member of an array. Math.min raises a maximum\n * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This\n * method is slightly slower, but safe.\n */\nfunction arrayMax(data) {\n\tvar i = data.length,\n\t\tmax = data[0];\n\n\twhile (i--) {\n\t\tif (data[i] > max) {\n\t\t\tmax = data[i];\n\t\t}\n\t}\n\treturn max;\n}\n\n/**\n * Utility method that destroys any SVGElement or VMLElement that are properties on the given object.\n * It loops all properties and invokes destroy if there is a destroy method. The property is\n * then delete'ed.\n * @param {Object} The object to destroy properties on\n * @param {Object} Exception, do not destroy this property, only delete it.\n */\nfunction destroyObjectProperties(obj, except) {\n\tvar n;\n\tfor (n in obj) {\n\t\t// If the object is non-null and destroy is defined\n\t\tif (obj[n] && obj[n] !== except && obj[n].destroy) {\n\t\t\t// Invoke the destroy\n\t\t\tobj[n].destroy();\n\t\t}\n\n\t\t// Delete the property from the object.\n\t\tdelete obj[n];\n\t}\n}\n\n\n/**\n * Discard an element by moving it to the bin and delete\n * @param {Object} The HTML node to discard\n */\nfunction discardElement(element) {\n\t// create a garbage bin element, not part of the DOM\n\tif (!garbageBin) {\n\t\tgarbageBin = createElement(DIV);\n\t}\n\n\t// move the node and empty bin\n\tif (element) {\n\t\tgarbageBin.appendChild(element);\n\t}\n\tgarbageBin.innerHTML = '';\n}\n\n/**\n * Provide error messages for debugging, with links to online explanation \n */\nfunction error (code, stop) {\n\tvar msg = 'Highcharts error #' + code + ': www.highcharts.com/errors/' + code;\n\tif (stop) {\n\t\tthrow msg;\n\t}\n\t// else ...\n\tif (win.console) {\n\t\tconsole.log(msg);\n\t}\n}\n\n/**\n * Fix JS round off float errors\n * @param {Number} num\n */\nfunction correctFloat(num) {\n\treturn parseFloat(\n\t\tnum.toPrecision(14)\n\t);\n}\n\n/**\n * Set the global animation to either a given value, or fall back to the\n * given chart's animation option\n * @param {Object} animation\n * @param {Object} chart\n */\nfunction setAnimation(animation, chart) {\n\tglobalAnimation = pick(animation, chart.animation);\n}\n\n/**\n * The time unit lookup\n */\ntimeUnits = {\n\tmillisecond: 1,\n\tsecond: 1000,\n\tminute: 60000,\n\thour: 3600000,\n\tday: 24 * 3600000,\n\tweek: 7 * 24 * 3600000,\n\tmonth: 28 * 24 * 3600000,\n\tyear: 364 * 24 * 3600000\n};\n\n\n/**\n * Format a number and return a string based on input settings\n * @param {Number} number The input number to format\n * @param {Number} decimals The amount of decimals\n * @param {String} decPoint The decimal point, defaults to the one given in the lang options\n * @param {String} thousandsSep The thousands separator, defaults to the one given in the lang options\n */\nHighcharts.numberFormat = function (number, decimals, decPoint, thousandsSep) {\n\tvar lang = defaultOptions.lang,\n\t\t// http://kevin.vanzonneveld.net/techblog/article/javascript_equivalent_for_phps_number_format/\n\t\tn = +number || 0,\n\t\tc = decimals === -1 ?\n\t\t\tmathMin((n.toString().split('.')[1] || '').length, 20) : // Preserve decimals. Not huge numbers (#3793).\n\t\t\t(isNaN(decimals = mathAbs(decimals)) ? 2 : decimals),\n\t\td = decPoint === undefined ? lang.decimalPoint : decPoint,\n\t\tt = thousandsSep === undefined ? lang.thousandsSep : thousandsSep,\n\t\ts = n < 0 ? \"-\" : \"\",\n\t\ti = String(pInt(n = mathAbs(n).toFixed(c))),\n\t\tj = i.length > 3 ? i.length % 3 : 0;\n\n\treturn (s + (j ? i.substr(0, j) + t : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + t) +\n\t\t\t(c ? d + mathAbs(n - i).toFixed(c).slice(2) : \"\"));\n};\n/**\n * Path interpolation algorithm used across adapters\n */\npathAnim = {\n\t/**\n\t * Prepare start and end values so that the path can be animated one to one\n\t */\n\tinit: function (elem, fromD, toD) {\n\t\tfromD = fromD || '';\n\t\tvar shift = elem.shift,\n\t\t\tbezier = fromD.indexOf('C') > -1,\n\t\t\tnumParams = bezier ? 7 : 3,\n\t\t\tendLength,\n\t\t\tslice,\n\t\t\ti,\n\t\t\tstart = fromD.split(' '),\n\t\t\tend = [].concat(toD), // copy\n\t\t\tstartBaseLine,\n\t\t\tendBaseLine,\n\t\t\tsixify = function (arr) { // in splines make move points have six parameters like bezier curves\n\t\t\t\ti = arr.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (arr[i] === M) {\n\t\t\t\t\t\tarr.splice(i + 1, 0, arr[i + 1], arr[i + 2], arr[i + 1], arr[i + 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\tif (bezier) {\n\t\t\tsixify(start);\n\t\t\tsixify(end);\n\t\t}\n\n\t\t// pull out the base lines before padding\n\t\tif (elem.isArea) {\n\t\t\tstartBaseLine = start.splice(start.length - 6, 6);\n\t\t\tendBaseLine = end.splice(end.length - 6, 6);\n\t\t}\n\n\t\t// if shifting points, prepend a dummy point to the end path\n\t\tif (shift <= end.length / numParams && start.length === end.length) {\n\t\t\twhile (shift--) {\n\t\t\t\tend = [].concat(end).splice(0, numParams).concat(end);\n\t\t\t}\n\t\t}\n\t\telem.shift = 0; // reset for following animations\n\n\t\t// copy and append last point until the length matches the end length\n\t\tif (start.length) {\n\t\t\tendLength = end.length;\n\t\t\twhile (start.length < endLength) {\n\n\t\t\t\t//bezier && sixify(start);\n\t\t\t\tslice = [].concat(start).splice(start.length - numParams, numParams);\n\t\t\t\tif (bezier) { // disable first control point\n\t\t\t\t\tslice[numParams - 6] = slice[numParams - 2];\n\t\t\t\t\tslice[numParams - 5] = slice[numParams - 1];\n\t\t\t\t}\n\t\t\t\tstart = start.concat(slice);\n\t\t\t}\n\t\t}\n\n\t\tif (startBaseLine) { // append the base lines for areas\n\t\t\tstart = start.concat(startBaseLine);\n\t\t\tend = end.concat(endBaseLine);\n\t\t}\n\t\treturn [start, end];\n\t},\n\n\t/**\n\t * Interpolate each value of the path and return the array\n\t */\n\tstep: function (start, end, pos, complete) {\n\t\tvar ret = [],\n\t\t\ti = start.length,\n\t\t\tstartVal;\n\n\t\tif (pos === 1) { // land on the final path without adjustment points appended in the ends\n\t\t\tret = complete;\n\n\t\t} else if (i === end.length && pos < 1) {\n\t\t\twhile (i--) {\n\t\t\t\tstartVal = parseFloat(start[i]);\n\t\t\t\tret[i] =\n\t\t\t\t\tisNaN(startVal) ? // a letter instruction like M or L\n\t\t\t\t\t\tstart[i] :\n\t\t\t\t\t\tpos * (parseFloat(end[i] - startVal)) + startVal;\n\n\t\t\t}\n\t\t} else { // if animation is finished or length not matching, land on right value\n\t\t\tret = end;\n\t\t}\n\t\treturn ret;\n\t}\n};\n\n(function ($) {\n\t/**\n\t * The default HighchartsAdapter for jQuery\n\t */\n\twin.HighchartsAdapter = win.HighchartsAdapter || ($ && {\n\t\t\n\t\t/**\n\t\t * Initialize the adapter by applying some extensions to jQuery\n\t\t */\n\t\tinit: function (pathAnim) {\n\t\t\t\n\t\t\t// extend the animate function to allow SVG animations\n\t\t\tvar Fx = $.fx;\n\t\t\t\n\t\t\t/*jslint unparam: true*//* allow unused param x in this function */\n\t\t\t$.extend($.easing, {\n\t\t\t\teaseOutQuad: function (x, t, b, c, d) {\n\t\t\t\t\treturn -c * (t /= d) * (t - 2) + b;\n\t\t\t\t}\n\t\t\t});\n\t\t\t/*jslint unparam: false*/\n\t\t\n\t\t\t// extend some methods to check for elem.attr, which means it is a Highcharts SVG object\n\t\t\t$.each(['cur', '_default', 'width', 'height', 'opacity'], function (i, fn) {\n\t\t\t\tvar obj = Fx.step,\n\t\t\t\t\tbase;\n\t\t\t\t\t\n\t\t\t\t// Handle different parent objects\n\t\t\t\tif (fn === 'cur') {\n\t\t\t\t\tobj = Fx.prototype; // 'cur', the getter, relates to Fx.prototype\n\t\t\t\t\n\t\t\t\t} else if (fn === '_default' && $.Tween) { // jQuery 1.8 model\n\t\t\t\t\tobj = $.Tween.propHooks[fn];\n\t\t\t\t\tfn = 'set';\n\t\t\t\t}\n\t\t\n\t\t\t\t// Overwrite the method\n\t\t\t\tbase = obj[fn];\n\t\t\t\tif (base) { // step.width and step.height don't exist in jQuery < 1.7\n\t\t\n\t\t\t\t\t// create the extended function replacement\n\t\t\t\t\tobj[fn] = function (fx) {\n\n\t\t\t\t\t\tvar elem;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Fx.prototype.cur does not use fx argument\n\t\t\t\t\t\tfx = i ? fx : this;\n\n\t\t\t\t\t\t// Don't run animations on textual properties like align (#1821)\n\t\t\t\t\t\tif (fx.prop === 'align') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t// shortcut\n\t\t\t\t\t\telem = fx.elem;\n\t\t\n\t\t\t\t\t\t// Fx.prototype.cur returns the current value. The other ones are setters\n\t\t\t\t\t\t// and returning a value has no effect.\n\t\t\t\t\t\treturn elem.attr ? // is SVG element wrapper\n\t\t\t\t\t\t\telem.attr(fx.prop, fn === 'cur' ? UNDEFINED : fx.now) : // apply the SVG wrapper's method\n\t\t\t\t\t\t\tbase.apply(this, arguments); // use jQuery's built-in method\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Extend the opacity getter, needed for fading opacity with IE9 and jQuery 1.10+\n\t\t\twrap($.cssHooks.opacity, 'get', function (proceed, elem, computed) {\n\t\t\t\treturn elem.attr ? (elem.opacity || 0) : proceed.call(this, elem, computed);\n\t\t\t});\n\t\t\t\n\t\t\t// Define the setter function for d (path definitions)\n\t\t\tthis.addAnimSetter('d', function (fx) {\n\t\t\t\tvar elem = fx.elem,\n\t\t\t\t\tends;\n\t\t\n\t\t\t\t// Normally start and end should be set in state == 0, but sometimes,\n\t\t\t\t// for reasons unknown, this doesn't happen. Perhaps state == 0 is skipped\n\t\t\t\t// in these cases\n\t\t\t\tif (!fx.started) {\n\t\t\t\t\tends = pathAnim.init(elem, elem.d, elem.toD);\n\t\t\t\t\tfx.start = ends[0];\n\t\t\t\t\tfx.end = ends[1];\n\t\t\t\t\tfx.started = true;\n\t\t\t\t}\n\t\t\n\t\t\t\t// Interpolate each value of the path\n\t\t\t\telem.attr('d', pathAnim.step(fx.start, fx.end, fx.pos, elem.toD));\n\t\t\t});\n\t\t\t\n\t\t\t/**\n\t\t\t * Utility for iterating over an array. Parameters are reversed compared to jQuery.\n\t\t\t * @param {Array} arr\n\t\t\t * @param {Function} fn\n\t\t\t */\n\t\t\tthis.each = Array.prototype.forEach ?\n\t\t\t\tfunction (arr, fn) { // modern browsers\n\t\t\t\t\treturn Array.prototype.forEach.call(arr, fn);\n\t\t\t\t\t\n\t\t\t\t} : \n\t\t\t\tfunction (arr, fn) { // legacy\n\t\t\t\t\tvar i, \n\t\t\t\t\t\tlen = arr.length;\n\t\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\t\tif (fn.call(arr[i], arr[i], i, arr) === false) {\n\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\n\t\t\t/**\n\t\t\t * Register Highcharts as a plugin in the respective framework\n\t\t\t */\n\t\t\t$.fn.highcharts = function () {\n\t\t\t\tvar constr = 'Chart', // default constructor\n\t\t\t\t\targs = arguments,\n\t\t\t\t\toptions,\n\t\t\t\t\tret,\n\t\t\t\t\tchart;\n\n\t\t\t\tif (this[0]) {\n\n\t\t\t\t\tif (isString(args[0])) {\n\t\t\t\t\t\tconstr = args[0];\n\t\t\t\t\t\targs = Array.prototype.slice.call(args, 1); \n\t\t\t\t\t}\n\t\t\t\t\toptions = args[0];\n\n\t\t\t\t\t// Create the chart\n\t\t\t\t\tif (options !== UNDEFINED) {\n\t\t\t\t\t\t/*jslint unused:false*/\n\t\t\t\t\t\toptions.chart = options.chart || {};\n\t\t\t\t\t\toptions.chart.renderTo = this[0];\n\t\t\t\t\t\tchart = new Highcharts[constr](options, args[1]);\n\t\t\t\t\t\tret = this;\n\t\t\t\t\t\t/*jslint unused:true*/\n\t\t\t\t\t}\n\n\t\t\t\t\t// When called without parameters or with the return argument, get a predefined chart\n\t\t\t\t\tif (options === UNDEFINED) {\n\t\t\t\t\t\tret = charts[attr(this[0], 'data-highcharts-chart')];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn ret;\n\t\t\t};\n\n\t\t},\n\n\t\t/**\n\t\t * Add an animation setter for a specific property\n\t\t */\n\t\taddAnimSetter: function (prop, setter) {\n\t\t\t// jQuery 1.8 style\n\t\t\tif ($.Tween) {\n\t\t\t\t$.Tween.propHooks[prop] = {\n\t\t\t\t\tset: setter\n\t\t\t\t};\n\t\t\t// pre 1.8\n\t\t\t} else {\n\t\t\t\t$.fx.step[prop] = setter;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Downloads a script and executes a callback when done.\n\t\t * @param {String} scriptLocation\n\t\t * @param {Function} callback\n\t\t */\n\t\tgetScript: $.getScript,\n\t\t\n\t\t/**\n\t\t * Return the index of an item in an array, or -1 if not found\n\t\t */\n\t\tinArray: $.inArray,\n\t\t\n\t\t/**\n\t\t * A direct link to jQuery methods. MooTools and Prototype adapters must be implemented for each case of method.\n\t\t * @param {Object} elem The HTML element\n\t\t * @param {String} method Which method to run on the wrapped element\n\t\t */\n\t\tadapterRun: function (elem, method) {\n\t\t\treturn $(elem)[method]();\n\t\t},\n\t\n\t\t/**\n\t\t * Filter an array\n\t\t */\n\t\tgrep: $.grep,\n\t\n\t\t/**\n\t\t * Map an array\n\t\t * @param {Array} arr\n\t\t * @param {Function} fn\n\t\t */\n\t\tmap: function (arr, fn) {\n\t\t\t//return jQuery.map(arr, fn);\n\t\t\tvar results = [],\n\t\t\t\ti = 0,\n\t\t\t\tlen = arr.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tresults[i] = fn.call(arr[i], arr[i], i, arr);\n\t\t\t}\n\t\t\treturn results;\n\t\n\t\t},\n\t\n\t\t/**\n\t\t * Get the position of an element relative to the top left of the page\n\t\t */\n\t\toffset: function (el) {\n\t\t\treturn $(el).offset();\n\t\t},\n\t\n\t\t/**\n\t\t * Add an event listener\n\t\t * @param {Object} el A HTML element or custom object\n\t\t * @param {String} event The event type\n\t\t * @param {Function} fn The event handler\n\t\t */\n\t\taddEvent: function (el, event, fn) {\n\t\t\t$(el).bind(event, fn);\n\t\t},\n\t\n\t\t/**\n\t\t * Remove event added with addEvent\n\t\t * @param {Object} el The object\n\t\t * @param {String} eventType The event type. Leave blank to remove all events.\n\t\t * @param {Function} handler The function to remove\n\t\t */\n\t\tremoveEvent: function (el, eventType, handler) {\n\t\t\t// workaround for jQuery issue with unbinding custom events:\n\t\t\t// http://forum.jQuery.com/topic/javascript-error-when-unbinding-a-custom-event-using-jQuery-1-4-2\n\t\t\tvar func = doc.removeEventListener ? 'removeEventListener' : 'detachEvent';\n\t\t\tif (doc[func] && el && !el[func]) {\n\t\t\t\tel[func] = function () {};\n\t\t\t}\n\t\n\t\t\t$(el).unbind(eventType, handler);\n\t\t},\n\t\n\t\t/**\n\t\t * Fire an event on a custom object\n\t\t * @param {Object} el\n\t\t * @param {String} type\n\t\t * @param {Object} eventArguments\n\t\t * @param {Function} defaultFunction\n\t\t */\n\t\tfireEvent: function (el, type, eventArguments, defaultFunction) {\n\t\t\tvar event = $.Event(type),\n\t\t\t\tdetachedType = 'detached' + type,\n\t\t\t\tdefaultPrevented;\n\t\n\t\t\t// Remove warnings in Chrome when accessing returnValue (#2790), layerX and layerY. Although Highcharts\n\t\t\t// never uses these properties, Chrome includes them in the default click event and\n\t\t\t// raises the warning when they are copied over in the extend statement below.\n\t\t\t//\n\t\t\t// To avoid problems in IE (see #1010) where we cannot delete the properties and avoid\n\t\t\t// testing if they are there (warning in chrome) the only option is to test if running IE.\n\t\t\tif (!isIE && eventArguments) {\n\t\t\t\tdelete eventArguments.layerX;\n\t\t\t\tdelete eventArguments.layerY;\n\t\t\t\tdelete eventArguments.returnValue;\n\t\t\t}\n\t\n\t\t\textend(event, eventArguments);\n\t\n\t\t\t// Prevent jQuery from triggering the object method that is named the\n\t\t\t// same as the event. For example, if the event is 'select', jQuery\n\t\t\t// attempts calling el.select and it goes into a loop.\n\t\t\tif (el[type]) {\n\t\t\t\tel[detachedType] = el[type];\n\t\t\t\tel[type] = null;\n\t\t\t}\n\t\n\t\t\t// Wrap preventDefault and stopPropagation in try/catch blocks in\n\t\t\t// order to prevent JS errors when cancelling events on non-DOM\n\t\t\t// objects. #615.\n\t\t\t/*jslint unparam: true*/\n\t\t\t$.each(['preventDefault', 'stopPropagation'], function (i, fn) {\n\t\t\t\tvar base = event[fn];\n\t\t\t\tevent[fn] = function () {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbase.call(event);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (fn === 'preventDefault') {\n\t\t\t\t\t\t\tdefaultPrevented = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t\t/*jslint unparam: false*/\n\t\n\t\t\t// trigger it\n\t\t\t$(el).trigger(event);\n\t\n\t\t\t// attach the method\n\t\t\tif (el[detachedType]) {\n\t\t\t\tel[type] = el[detachedType];\n\t\t\t\tel[detachedType] = null;\n\t\t\t}\n\t\n\t\t\tif (defaultFunction && !event.isDefaultPrevented() && !defaultPrevented) {\n\t\t\t\tdefaultFunction(event);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extension method needed for MooTools\n\t\t */\n\t\twashMouseEvent: function (e) {\n\t\t\tvar ret = e.originalEvent || e;\n\t\t\t\n\t\t\t// computed by jQuery, needed by IE8\n\t\t\tif (ret.pageX === UNDEFINED) { // #1236\n\t\t\t\tret.pageX = e.pageX;\n\t\t\t\tret.pageY = e.pageY;\n\t\t\t}\n\t\t\t\n\t\t\treturn ret;\n\t\t},\n\t\n\t\t/**\n\t\t * Animate a HTML element or SVG element wrapper\n\t\t * @param {Object} el\n\t\t * @param {Object} params\n\t\t * @param {Object} options jQuery-like animation options: duration, easing, callback\n\t\t */\n\t\tanimate: function (el, params, options) {\n\t\t\tvar $el = $(el);\n\t\t\tif (!el.style) {\n\t\t\t\tel.style = {}; // #1881\n\t\t\t}\n\t\t\tif (params.d) {\n\t\t\t\tel.toD = params.d; // keep the array form for paths, used in $.fx.step.d\n\t\t\t\tparams.d = 1; // because in jQuery, animating to an array has a different meaning\n\t\t\t}\n\t\n\t\t\t$el.stop();\n\t\t\tif (params.opacity !== UNDEFINED && el.attr) {\n\t\t\t\tparams.opacity += 'px'; // force jQuery to use same logic as width and height (#2161)\n\t\t\t}\n\t\t\tel.hasAnim = 1; // #3342\n\t\t\t$el.animate(params, options);\n\t\n\t\t},\n\t\t/**\n\t\t * Stop running animation\n\t\t */\n\t\tstop: function (el) {\n\t\t\tif (el.hasAnim) { // #3342, memory leak on calling $(el) from destroy\n\t\t\t\t$(el).stop();\n\t\t\t}\n\t\t}\n\t});\n}(win.jQuery));\n\n\n// check for a custom HighchartsAdapter defined prior to this file\nvar globalAdapter = win.HighchartsAdapter,\n\tadapter = globalAdapter || {};\n\t\n// Initialize the adapter\nif (globalAdapter) {\n\tglobalAdapter.init.call(globalAdapter, pathAnim);\n}\n\n\n// Utility functions. If the HighchartsAdapter is not defined, adapter is an empty object\n// and all the utility functions will be null. In that case they are populated by the\n// default adapters below.\nvar adapterRun = adapter.adapterRun,\n\tgetScript = adapter.getScript,\n\tinArray = adapter.inArray,\n\teach = Highcharts.each = adapter.each,\n\tgrep = adapter.grep,\n\toffset = adapter.offset,\n\tmap = adapter.map,\n\taddEvent = adapter.addEvent,\n\tremoveEvent = adapter.removeEvent,\n\tfireEvent = adapter.fireEvent,\n\twashMouseEvent = adapter.washMouseEvent,\n\tanimate = adapter.animate,\n\tstop = adapter.stop;\n\n\n\n/* ****************************************************************************\n * Handle the options                                                         *\n *****************************************************************************/\ndefaultOptions = {\n\tcolors: ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', \n\t\t    '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'],\n\tsymbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n\tlang: {\n\t\tloading: 'Loading...',\n\t\tmonths: ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n\t\t\t\t'August', 'September', 'October', 'November', 'December'],\n\t\tshortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n\t\tweekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n\t\tdecimalPoint: '.',\n\t\tnumericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'], // SI prefixes used in axis labels\n\t\tresetZoom: 'Reset zoom',\n\t\tresetZoomTitle: 'Reset zoom level 1:1',\n\t\tthousandsSep: ' '\n\t},\n\tglobal: {\n\t\tuseUTC: true,\n\t\t//timezoneOffset: 0,\n\t\tcanvasToolsURL: 'http://code.highcharts.com/4.1.7/modules/canvas-tools.js',\n\t\tVMLRadialGradientURL: 'http://code.highcharts.com/4.1.7/gfx/vml-radial-gradient.png'\n\t},\n\tchart: {\n\t\t//animation: true,\n\t\t//alignTicks: false,\n\t\t//reflow: true,\n\t\t//className: null,\n\t\t//events: { load, selection },\n\t\t//margin: [null],\n\t\t//marginTop: null,\n\t\t//marginRight: null,\n\t\t//marginBottom: null,\n\t\t//marginLeft: null,\n\t\tborderColor: '#4572A7',\n\t\t//borderWidth: 0,\n\t\tborderRadius: 0,\n\t\tdefaultSeriesType: 'line',\n\t\tignoreHiddenSeries: true,\n\t\t//inverted: false,\n\t\t//shadow: false,\n\t\tspacing: [10, 10, 15, 10],\n\t\t//spacingTop: 10,\n\t\t//spacingRight: 10,\n\t\t//spacingBottom: 15,\n\t\t//spacingLeft: 10,\n\t\t//style: {\n\t\t//\tfontFamily: '\"Lucida Grande\", \"Lucida Sans Unicode\", Verdana, Arial, Helvetica, sans-serif', // default font\n\t\t//\tfontSize: '12px'\n\t\t//},\n\t\tbackgroundColor: '#FFFFFF',\n\t\t//plotBackgroundColor: null,\n\t\tplotBorderColor: '#C0C0C0',\n\t\t//plotBorderWidth: 0,\n\t\t//plotShadow: false,\n\t\t//zoomType: ''\n\t\tresetZoomButton: {\n\t\t\ttheme: {\n\t\t\t\tzIndex: 20\n\t\t\t},\n\t\t\tposition: {\n\t\t\t\talign: 'right',\n\t\t\t\tx: -10,\n\t\t\t\t//verticalAlign: 'top',\n\t\t\t\ty: 10\n\t\t\t}\n\t\t\t// relativeTo: 'plot'\n\t\t}\n\t},\n\ttitle: {\n\t\ttext: 'Chart title',\n\t\talign: 'center',\n\t\t// floating: false,\n\t\tmargin: 15,\n\t\t// x: 0,\n\t\t// verticalAlign: 'top',\n\t\t// y: null,\n\t\tstyle: {\n\t\t\tcolor: '#333333',\n\t\t\tfontSize: '18px'\n\t\t}\n\n\t},\n\tsubtitle: {\n\t\ttext: '',\n\t\talign: 'center',\n\t\t// floating: false\n\t\t// x: 0,\n\t\t// verticalAlign: 'top',\n\t\t// y: null,\n\t\tstyle: {\n\t\t\tcolor: '#555555'\n\t\t}\n\t},\n\n\tplotOptions: {\n\t\tline: { // base series options\n\t\t\tallowPointSelect: false,\n\t\t\tshowCheckbox: false,\n\t\t\tanimation: {\n\t\t\t\tduration: 1000\n\t\t\t},\n\t\t\t//connectNulls: false,\n\t\t\t//cursor: 'default',\n\t\t\t//clip: true,\n\t\t\t//dashStyle: null,\n\t\t\t//enableMouseTracking: true,\n\t\t\tevents: {},\n\t\t\t//legendIndex: 0,\n\t\t\t//linecap: 'round',\n\t\t\tlineWidth: 2,\n\t\t\t//shadow: false,\n\t\t\t// stacking: null,\n\t\t\tmarker: {\n\t\t\t\t//enabled: true,\n\t\t\t\t//symbol: null,\n\t\t\t\tlineWidth: 0,\n\t\t\t\tradius: 4,\n\t\t\t\tlineColor: '#FFFFFF',\n\t\t\t\t//fillColor: null,\n\t\t\t\tstates: { // states for a single point\n\t\t\t\t\thover: {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tlineWidthPlus: 1,\n\t\t\t\t\t\tradiusPlus: 2\n\t\t\t\t\t},\n\t\t\t\t\tselect: {\n\t\t\t\t\t\tfillColor: '#FFFFFF',\n\t\t\t\t\t\tlineColor: '#000000',\n\t\t\t\t\t\tlineWidth: 2\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpoint: {\n\t\t\t\tevents: {}\n\t\t\t},\n\t\t\tdataLabels: {\n\t\t\t\talign: 'center',\n\t\t\t\t// defer: true,\n\t\t\t\t// enabled: false,\n\t\t\t\tformatter: function () {\n\t\t\t\t\treturn this.y === null ? '' : Highcharts.numberFormat(this.y, -1);\n\t\t\t\t},\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: 'contrast',\n\t\t\t\t\tfontSize: '11px',\n\t\t\t\t\tfontWeight: 'bold',\n\t\t\t\t\ttextShadow: '0 0 6px contrast, 0 0 3px contrast'\n\t\t\t\t},\n\t\t\t\tverticalAlign: 'bottom', // above singular point\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\t// backgroundColor: undefined,\n\t\t\t\t// borderColor: undefined,\n\t\t\t\t// borderRadius: undefined,\n\t\t\t\t// borderWidth: undefined,\n\t\t\t\tpadding: 5\n\t\t\t\t// shadow: false\n\t\t\t},\n\t\t\tcropThreshold: 300, // draw points outside the plot area when the number of points is less than this\n\t\t\tpointRange: 0,\n\t\t\t//pointStart: 0,\n\t\t\t//pointInterval: 1,\n\t\t\t//showInLegend: null, // auto: true for standalone series, false for linked series\n\t\t\tstates: { // states for the entire series\n\t\t\t\thover: {\n\t\t\t\t\t//enabled: false,\n\t\t\t\t\tlineWidthPlus: 1,\n\t\t\t\t\tmarker: {\n\t\t\t\t\t\t// lineWidth: base + 1,\n\t\t\t\t\t\t// radius: base + 1\n\t\t\t\t\t},\n\t\t\t\t\thalo: {\n\t\t\t\t\t\tsize: 10,\n\t\t\t\t\t\topacity: 0.25\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tmarker: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tstickyTracking: true,\n\t\t\t//tooltip: {\n\t\t\t\t//pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b>'\n\t\t\t\t//valueDecimals: null,\n\t\t\t\t//xDateFormat: '%A, %b %e, %Y',\n\t\t\t\t//valuePrefix: '',\n\t\t\t\t//ySuffix: ''\t\t\t\t\n\t\t\t//}\n\t\t\tturboThreshold: 1000\n\t\t\t// zIndex: null\n\t\t}\n\t},\n\tlabels: {\n\t\t//items: [],\n\t\tstyle: {\n\t\t\t//font: defaultFont,\n\t\t\tposition: ABSOLUTE,\n\t\t\tcolor: '#3E576F'\n\t\t}\n\t},\n\tlegend: {\n\t\tenabled: true,\n\t\talign: 'center',\n\t\t//floating: false,\n\t\tlayout: 'horizontal',\n\t\tlabelFormatter: function () {\n\t\t\treturn this.name;\n\t\t},\n\t\t//borderWidth: 0,\n\t\tborderColor: '#909090',\n\t\tborderRadius: 0,\n\t\tnavigation: {\n\t\t\t// animation: true,\n\t\t\tactiveColor: '#274b6d',\n\t\t\t// arrowSize: 12\n\t\t\tinactiveColor: '#CCC'\n\t\t\t// style: {} // text styles\n\t\t},\n\t\t// margin: 20,\n\t\t// reversed: false,\n\t\tshadow: false,\n\t\t// backgroundColor: null,\n\t\t/*style: {\n\t\t\tpadding: '5px'\n\t\t},*/\n\t\titemStyle: {\t\t\t\n\t\t\tcolor: '#333333',\n\t\t\tfontSize: '12px',\n\t\t\tfontWeight: 'bold'\n\t\t},\n\t\titemHoverStyle: {\n\t\t\t//cursor: 'pointer', removed as of #601\n\t\t\tcolor: '#000'\n\t\t},\n\t\titemHiddenStyle: {\n\t\t\tcolor: '#CCC'\n\t\t},\n\t\titemCheckboxStyle: {\n\t\t\tposition: ABSOLUTE,\n\t\t\twidth: '13px', // for IE precision\n\t\t\theight: '13px'\n\t\t},\n\t\t// itemWidth: undefined,\n\t\t// symbolRadius: 0,\n\t\t// symbolWidth: 16,\n\t\tsymbolPadding: 5,\n\t\tverticalAlign: 'bottom',\n\t\t// width: undefined,\n\t\tx: 0,\n\t\ty: 0,\n\t\ttitle: {\n\t\t\t//text: null,\n\t\t\tstyle: {\n\t\t\t\tfontWeight: 'bold'\n\t\t\t}\n\t\t}\t\t\t\n\t},\n\n\tloading: {\n\t\t// hideDuration: 100,\n\t\tlabelStyle: {\n\t\t\tfontWeight: 'bold',\n\t\t\tposition: RELATIVE,\n\t\t\ttop: '45%'\n\t\t},\n\t\t// showDuration: 0,\n\t\tstyle: {\n\t\t\tposition: ABSOLUTE,\n\t\t\tbackgroundColor: 'white',\n\t\t\topacity: 0.5,\n\t\t\ttextAlign: 'center'\n\t\t}\n\t},\n\n\ttooltip: {\n\t\tenabled: true,\n\t\tanimation: hasSVG,\n\t\t//crosshairs: null,\n\t\tbackgroundColor: 'rgba(249, 249, 249, .85)',\n\t\tborderWidth: 1,\n\t\tborderRadius: 3,\n\t\tdateTimeLabelFormats: { \n\t\t\tmillisecond: '%A, %b %e, %H:%M:%S.%L',\n\t\t\tsecond: '%A, %b %e, %H:%M:%S',\n\t\t\tminute: '%A, %b %e, %H:%M',\n\t\t\thour: '%A, %b %e, %H:%M',\n\t\t\tday: '%A, %b %e, %Y',\n\t\t\tweek: 'Week from %A, %b %e, %Y',\n\t\t\tmonth: '%B %Y',\n\t\t\tyear: '%Y'\n\t\t},\n\t\tfooterFormat: '',\n\t\t//formatter: defaultFormatter,\n\t\theaderFormat: '<span style=\"font-size: 10px\">{point.key}</span><br/>',\n\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n\t\tshadow: true,\n\t\t//shape: 'callout',\n\t\t//shared: false,\n\t\tsnap: isTouchDevice ? 25 : 10,\n\t\tstyle: {\n\t\t\tcolor: '#333333',\n\t\t\tcursor: 'default',\n\t\t\tfontSize: '12px',\n\t\t\tpadding: '8px',\n\t\t\twhiteSpace: 'nowrap'\n\t\t}\n\t\t//xDateFormat: '%A, %b %e, %Y',\n\t\t//valueDecimals: null,\n\t\t//valuePrefix: '',\n\t\t//valueSuffix: ''\n\t},\n\n\tcredits: {\n\t\tenabled: true,\n\t\ttext: 'Highcharts.com',\n\t\thref: 'http://www.highcharts.com',\n\t\tposition: {\n\t\t\talign: 'right',\n\t\t\tx: -10,\n\t\t\tverticalAlign: 'bottom',\n\t\t\ty: -5\n\t\t},\n\t\tstyle: {\n\t\t\tcursor: 'pointer',\n\t\t\tcolor: '#909090',\n\t\t\tfontSize: '9px'\n\t\t}\n\t}\n};\n\n\n\n\n// Series defaults\nvar defaultPlotOptions = defaultOptions.plotOptions,\n\tdefaultSeriesOptions = defaultPlotOptions.line;\n\n// set the default time methods\nsetTimeMethods();\n\n\n\n/**\n * Set the time methods globally based on the useUTC option. Time method can be either\n * local time or UTC (default).\n */\nfunction setTimeMethods() {\n\tvar globalOptions = defaultOptions.global,\n\t\tuseUTC = globalOptions.useUTC,\n\t\tGET = useUTC ? 'getUTC' : 'get',\n\t\tSET = useUTC ? 'setUTC' : 'set';\n\n\n\tDate = globalOptions.Date || window.Date;\n\ttimezoneOffset = useUTC && globalOptions.timezoneOffset;\n\tgetTimezoneOffset = useUTC && globalOptions.getTimezoneOffset;\n\tmakeTime = function (year, month, date, hours, minutes, seconds) {\n\t\tvar d;\n\t\tif (useUTC) {\n\t\t\td = Date.UTC.apply(0, arguments);\n\t\t\td += getTZOffset(d);\n\t\t} else {\n\t\t\td = new Date(\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tpick(date, 1),\n\t\t\t\tpick(hours, 0),\n\t\t\t\tpick(minutes, 0),\n\t\t\t\tpick(seconds, 0)\n\t\t\t).getTime();\n\t\t}\n\t\treturn d;\n\t};\n\tgetMinutes =      GET + 'Minutes';\n\tgetHours =        GET + 'Hours';\n\tgetDay =          GET + 'Day';\n\tgetDate =         GET + 'Date';\n\tgetMonth =        GET + 'Month';\n\tgetFullYear =     GET + 'FullYear';\n\tsetMilliseconds = SET + 'Milliseconds';\n\tsetSeconds =      SET + 'Seconds';\n\tsetMinutes =      SET + 'Minutes';\n\tsetHours =        SET + 'Hours';\n\tsetDate =         SET + 'Date';\n\tsetMonth =        SET + 'Month';\n\tsetFullYear =     SET + 'FullYear';\n\n}\n\n/**\n * Merge the default options with custom options and return the new options structure\n * @param {Object} options The new custom options\n */\nfunction setOptions(options) {\n\t\n\t// Copy in the default options\n\tdefaultOptions = merge(true, defaultOptions, options);\n\t\n\t// Apply UTC\n\tsetTimeMethods();\n\n\treturn defaultOptions;\n}\n\n/**\n * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules\n * wasn't enough because the setOptions method created a new object.\n */\nfunction getOptions() {\n\treturn defaultOptions;\n}\n\n\n/**\n * Handle color operations. The object methods are chainable.\n * @param {String} input The input color in either rbga or hex format\n */\nvar rgbaRegEx = /rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]?(?:\\.[0-9]+)?)\\s*\\)/,\n\thexRegEx = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,\n\trgbRegEx = /rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/;\n\nvar Color = function (input) {\n\t// declare variables\n\tvar rgba = [], result, stops;\n\n\t/**\n\t * Parse the input color to rgba array\n\t * @param {String} input\n\t */\n\tfunction init(input) {\n\n\t\t// Gradients\n\t\tif (input && input.stops) {\n\t\t\tstops = map(input.stops, function (stop) {\n\t\t\t\treturn Color(stop[1]);\n\t\t\t});\n\n\t\t// Solid colors\n\t\t} else {\n\t\t\t// rgba\n\t\t\tresult = rgbaRegEx.exec(input);\n\t\t\tif (result) {\n\t\t\t\trgba = [pInt(result[1]), pInt(result[2]), pInt(result[3]), parseFloat(result[4], 10)];\n\t\t\t} else { \n\t\t\t\t// hex\n\t\t\t\tresult = hexRegEx.exec(input);\n\t\t\t\tif (result) {\n\t\t\t\t\trgba = [pInt(result[1], 16), pInt(result[2], 16), pInt(result[3], 16), 1];\n\t\t\t\t} else {\n\t\t\t\t\t// rgb\n\t\t\t\t\tresult = rgbRegEx.exec(input);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\trgba = [pInt(result[1]), pInt(result[2]), pInt(result[3]), 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\n\t}\n\t/**\n\t * Return the color a specified format\n\t * @param {String} format\n\t */\n\tfunction get(format) {\n\t\tvar ret;\n\n\t\tif (stops) {\n\t\t\tret = merge(input);\n\t\t\tret.stops = [].concat(ret.stops);\n\t\t\teach(stops, function (stop, i) {\n\t\t\t\tret.stops[i] = [ret.stops[i][0], stop.get(format)];\n\t\t\t});\n\n\t\t// it's NaN if gradient colors on a column chart\n\t\t} else if (rgba && !isNaN(rgba[0])) {\n\t\t\tif (format === 'rgb') {\n\t\t\t\tret = 'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')';\n\t\t\t} else if (format === 'a') {\n\t\t\t\tret = rgba[3];\n\t\t\t} else {\n\t\t\t\tret = 'rgba(' + rgba.join(',') + ')';\n\t\t\t}\n\t\t} else {\n\t\t\tret = input;\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Brighten the color\n\t * @param {Number} alpha\n\t */\n\tfunction brighten(alpha) {\n\t\tif (stops) {\n\t\t\teach(stops, function (stop) {\n\t\t\t\tstop.brighten(alpha);\n\t\t\t});\n\t\t\n\t\t} else if (isNumber(alpha) && alpha !== 0) {\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < 3; i++) {\n\t\t\t\trgba[i] += pInt(alpha * 255);\n\n\t\t\t\tif (rgba[i] < 0) {\n\t\t\t\t\trgba[i] = 0;\n\t\t\t\t}\n\t\t\t\tif (rgba[i] > 255) {\n\t\t\t\t\trgba[i] = 255;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * Set the color's opacity to a given alpha value\n\t * @param {Number} alpha\n\t */\n\tfunction setOpacity(alpha) {\n\t\trgba[3] = alpha;\n\t\treturn this;\n\t}\n\n\t// initialize: parse the input\n\tinit(input);\n\n\t// public methods\n\treturn {\n\t\tget: get,\n\t\tbrighten: brighten,\n\t\trgba: rgba,\n\t\tsetOpacity: setOpacity,\n\t\traw: input\n\t};\n};\n\n\n/**\n * A wrapper object for SVG elements\n */\nfunction SVGElement() {}\n\nSVGElement.prototype = {\n\t\n\t// Default base for animation\n\topacity: 1,\n\t// For labels, these CSS properties are applied to the <text> node directly\n\ttextProps: ['fontSize', 'fontWeight', 'fontFamily', 'fontStyle', 'color', \n\t\t'lineHeight', 'width', 'textDecoration', 'textShadow'],\n\t\n\t/**\n\t * Initialize the SVG renderer\n\t * @param {Object} renderer\n\t * @param {String} nodeName\n\t */\n\tinit: function (renderer, nodeName) {\n\t\tvar wrapper = this;\n\t\twrapper.element = nodeName === 'span' ?\n\t\t\tcreateElement(nodeName) :\n\t\t\tdoc.createElementNS(SVG_NS, nodeName);\n\t\twrapper.renderer = renderer;\n\t},\n\t\n\t/**\n\t * Animate a given attribute\n\t * @param {Object} params\n\t * @param {Number} options The same options as in jQuery animation\n\t * @param {Function} complete Function to perform at the end of animation\n\t */\n\tanimate: function (params, options, complete) {\n\t\tvar animOptions = pick(options, globalAnimation, true);\n\t\tstop(this); // stop regardless of animation actually running, or reverting to .attr (#607)\n\t\tif (animOptions) {\n\t\t\tanimOptions = merge(animOptions, {}); //#2625\n\t\t\tif (complete) { // allows using a callback with the global animation without overwriting it\n\t\t\t\tanimOptions.complete = complete;\n\t\t\t}\n\t\t\tanimate(this, params, animOptions);\n\t\t} else {\n\t\t\tthis.attr(params);\n\t\t\tif (complete) {\n\t\t\t\tcomplete();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**\n\t * Build an SVG gradient out of a common JavaScript configuration object\n\t */\n\tcolorGradient: function (color, prop, elem) {\n\t\tvar renderer = this.renderer,\n\t\t\tcolorObject,\n\t\t\tgradName,\n\t\t\tgradAttr,\n\t\t\tgradients,\n\t\t\tgradientObject,\n\t\t\tstops,\n\t\t\tstopColor,\n\t\t\tstopOpacity,\n\t\t\tradialReference,\n\t\t\tn,\n\t\t\tid,\n\t\t\tkey = [];\n\n\t\t// Apply linear or radial gradients\n\t\tif (color.linearGradient) {\n\t\t\tgradName = 'linearGradient';\n\t\t} else if (color.radialGradient) {\n\t\t\tgradName = 'radialGradient';\n\t\t}\n\n\t\tif (gradName) {\n\t\t\tgradAttr = color[gradName];\n\t\t\tgradients = renderer.gradients;\n\t\t\tstops = color.stops;\n\t\t\tradialReference = elem.radialReference;\n\n\t\t\t// Keep < 2.2 kompatibility\n\t\t\tif (isArray(gradAttr)) {\n\t\t\t\tcolor[gradName] = gradAttr = {\n\t\t\t\t\tx1: gradAttr[0],\n\t\t\t\t\ty1: gradAttr[1],\n\t\t\t\t\tx2: gradAttr[2],\n\t\t\t\t\ty2: gradAttr[3],\n\t\t\t\t\tgradientUnits: 'userSpaceOnUse'\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Correct the radial gradient for the radial reference system\n\t\t\tif (gradName === 'radialGradient' && radialReference && !defined(gradAttr.gradientUnits)) {\n\t\t\t\tgradAttr = merge(gradAttr, {\n\t\t\t\t\tcx: (radialReference[0] - radialReference[2] / 2) + gradAttr.cx * radialReference[2],\n\t\t\t\t\tcy: (radialReference[1] - radialReference[2] / 2) + gradAttr.cy * radialReference[2],\n\t\t\t\t\tr: gradAttr.r * radialReference[2],\n\t\t\t\t\tgradientUnits: 'userSpaceOnUse'\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Build the unique key to detect whether we need to create a new element (#1282)\n\t\t\tfor (n in gradAttr) {\n\t\t\t\tif (n !== 'id') {\n\t\t\t\t\tkey.push(n, gradAttr[n]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (n in stops) {\n\t\t\t\tkey.push(stops[n]);\n\t\t\t}\n\t\t\tkey = key.join(',');\n\n\t\t\t// Check if a gradient object with the same config object is created within this renderer\n\t\t\tif (gradients[key]) {\n\t\t\t\tid = gradients[key].attr('id');\n\n\t\t\t} else {\n\n\t\t\t\t// Set the id and create the element\n\t\t\t\tgradAttr.id = id = PREFIX + idCounter++;\n\t\t\t\tgradients[key] = gradientObject = renderer.createElement(gradName)\n\t\t\t\t\t.attr(gradAttr)\n\t\t\t\t\t.add(renderer.defs);\n\n\n\t\t\t\t// The gradient needs to keep a list of stops to be able to destroy them\n\t\t\t\tgradientObject.stops = [];\n\t\t\t\teach(stops, function (stop) {\n\t\t\t\t\tvar stopObject;\n\t\t\t\t\tif (stop[1].indexOf('rgba') === 0) {\n\t\t\t\t\t\tcolorObject = Color(stop[1]);\n\t\t\t\t\t\tstopColor = colorObject.get('rgb');\n\t\t\t\t\t\tstopOpacity = colorObject.get('a');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstopColor = stop[1];\n\t\t\t\t\t\tstopOpacity = 1;\n\t\t\t\t\t}\n\t\t\t\t\tstopObject = renderer.createElement('stop').attr({\n\t\t\t\t\t\toffset: stop[0],\n\t\t\t\t\t\t'stop-color': stopColor,\n\t\t\t\t\t\t'stop-opacity': stopOpacity\n\t\t\t\t\t}).add(gradientObject);\n\n\t\t\t\t\t// Add the stop element to the gradient\n\t\t\t\t\tgradientObject.stops.push(stopObject);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Set the reference to the gradient object\n\t\t\telem.setAttribute(prop, 'url(' + renderer.url + '#' + id + ')');\n\t\t} \n\t},\n\n\t/**\n\t * Apply a polyfill to the text-stroke CSS property, by copying the text element\n\t * and apply strokes to the copy.\n\t *\n\t * docs: update default, document the polyfill and the limitations on hex colors and pixel values, document contrast pseudo-color\n\t * TODO: \n\t * - update defaults\n\t */\n\tapplyTextShadow: function (textShadow) {\n\t\tvar elem = this.element,\n\t\t\ttspans,\n\t\t\thasContrast = textShadow.indexOf('contrast') !== -1,\n\t\t\tstyles = {},\n\t\t\t// IE10 and IE11 report textShadow in elem.style even though it doesn't work. Check\n\t\t\t// this again with new IE release. In exports, the rendering is passed to PhantomJS. \n\t\t\tsupports = this.renderer.forExport || (elem.style.textShadow !== UNDEFINED && !isIE);\n\n\t\t// When the text shadow is set to contrast, use dark stroke for light text and vice versa\n\t\tif (hasContrast) {\n\t\t\tstyles.textShadow = textShadow = textShadow.replace(/contrast/g, this.renderer.getContrast(elem.style.fill));\n\t\t}\n\n\t\t// Safari with retina displays as well as PhantomJS bug (#3974). Firefox does not tolerate this,\n\t\t// it removes the text shadows.\n\t\tif (isWebKit) {\n\t\t\tstyles.textRendering = 'geometricPrecision';\n\t\t}\n\n\t\t/* Selective side-by-side testing in supported browser (http://jsfiddle.net/highcharts/73L1ptrh/)\n\t\tif (elem.textContent.indexOf('2.') === 0) {\n\t\t\telem.style['text-shadow'] = 'none';\n\t\t\tsupports = false;\n\t\t}\n\t\t// */\n\n\t\t// No reason to polyfill, we've got native support\n\t\tif (supports) {\n\t\t\tcss(elem, styles); // Apply altered textShadow or textRendering workaround\n\t\t} else {\n\n\t\t\tthis.fakeTS = true; // Fake text shadow\n\n\t\t\t// In order to get the right y position of the clones, \n\t\t\t// copy over the y setter\n\t\t\tthis.ySetter = this.xSetter;\n\n\t\t\ttspans = [].slice.call(elem.getElementsByTagName('tspan'));\n\t\t\teach(textShadow.split(/\\s?,\\s?/g), function (textShadow) {\n\t\t\t\tvar firstChild = elem.firstChild,\n\t\t\t\t\tcolor,\n\t\t\t\t\tstrokeWidth;\n\t\t\t\t\n\t\t\t\ttextShadow = textShadow.split(' ');\n\t\t\t\tcolor = textShadow[textShadow.length - 1];\n\n\t\t\t\t// Approximately tune the settings to the text-shadow behaviour\n\t\t\t\tstrokeWidth = textShadow[textShadow.length - 2];\n\n\t\t\t\tif (strokeWidth) {\n\t\t\t\t\teach(tspans, function (tspan, y) {\n\t\t\t\t\t\tvar clone;\n\n\t\t\t\t\t\t// Let the first line start at the correct X position\n\t\t\t\t\t\tif (y === 0) {\n\t\t\t\t\t\t\ttspan.setAttribute('x', elem.getAttribute('x'));\n\t\t\t\t\t\t\ty = elem.getAttribute('y');\n\t\t\t\t\t\t\ttspan.setAttribute('y', y || 0);\n\t\t\t\t\t\t\tif (y === null) {\n\t\t\t\t\t\t\t\telem.setAttribute('y', 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Create the clone and apply shadow properties\n\t\t\t\t\t\tclone = tspan.cloneNode(1);\n\t\t\t\t\t\tattr(clone, {\n\t\t\t\t\t\t\t'class': PREFIX + 'text-shadow',\n\t\t\t\t\t\t\t'fill': color,\n\t\t\t\t\t\t\t'stroke': color,\n\t\t\t\t\t\t\t'stroke-opacity': 1 / mathMax(pInt(strokeWidth), 3),\n\t\t\t\t\t\t\t'stroke-width': strokeWidth,\n\t\t\t\t\t\t\t'stroke-linejoin': 'round'\n\t\t\t\t\t\t});\n\t\t\t\t\t\telem.insertBefore(clone, firstChild);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Set or get a given attribute\n\t * @param {Object|String} hash\n\t * @param {Mixed|Undefined} val\n\t */\n\tattr: function (hash, val) {\n\t\tvar key,\n\t\t\tvalue,\n\t\t\telement = this.element,\n\t\t\thasSetSymbolSize,\n\t\t\tret = this,\n\t\t\tskipAttr;\n\n\t\t// single key-value pair\n\t\tif (typeof hash === 'string' && val !== UNDEFINED) {\n\t\t\tkey = hash;\n\t\t\thash = {};\n\t\t\thash[key] = val;\n\t\t}\n\n\t\t// used as a getter: first argument is a string, second is undefined\n\t\tif (typeof hash === 'string') {\n\t\t\tret = (this[hash + 'Getter'] || this._defaultGetter).call(this, hash, element);\n\t\t\n\t\t// setter\n\t\t} else {\n\n\t\t\tfor (key in hash) {\n\t\t\t\tvalue = hash[key];\n\t\t\t\tskipAttr = false;\n\n\n\n\t\t\t\tif (this.symbolName && /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(key)) {\n\t\t\t\t\tif (!hasSetSymbolSize) {\n\t\t\t\t\t\tthis.symbolAttr(hash);\n\t\t\t\t\t\thasSetSymbolSize = true;\n\t\t\t\t\t}\n\t\t\t\t\tskipAttr = true;\n\t\t\t\t}\n\n\t\t\t\tif (this.rotation && (key === 'x' || key === 'y')) {\n\t\t\t\t\tthis.doTransform = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!skipAttr) {\n\t\t\t\t\t(this[key + 'Setter'] || this._defaultSetter).call(this, value, key, element);\n\t\t\t\t}\n\n\t\t\t\t// Let the shadow follow the main element\n\t\t\t\tif (this.shadows && /^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(key)) {\n\t\t\t\t\tthis.updateShadows(key, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update transform. Do this outside the loop to prevent redundant updating for batch setting\n\t\t\t// of attributes.\n\t\t\tif (this.doTransform) {\n\t\t\t\tthis.updateTransform();\n\t\t\t\tthis.doTransform = false;\n\t\t\t}\n\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tupdateShadows: function (key, value) {\n\t\tvar shadows = this.shadows,\n\t\t\ti = shadows.length;\n\t\twhile (i--) {\n\t\t\tshadows[i].setAttribute(\n\t\t\t\tkey,\n\t\t\t\tkey === 'height' ?\n\t\t\t\t\tmathMax(value - (shadows[i].cutHeight || 0), 0) :\n\t\t\t\t\tkey === 'd' ? this.d : value\n\t\t\t);\n\t\t}\n\t},\n\n\t/**\n\t * Add a class name to an element\n\t */\n\taddClass: function (className) {\n\t\tvar element = this.element,\n\t\t\tcurrentClassName = attr(element, 'class') || '';\n\n\t\tif (currentClassName.indexOf(className) === -1) {\n\t\t\tattr(element, 'class', currentClassName + ' ' + className);\n\t\t}\n\t\treturn this;\n\t},\n\t/* hasClass and removeClass are not (yet) needed\n\thasClass: function (className) {\n\t\treturn attr(this.element, 'class').indexOf(className) !== -1;\n\t},\n\tremoveClass: function (className) {\n\t\tattr(this.element, 'class', attr(this.element, 'class').replace(className, ''));\n\t\treturn this;\n\t},\n\t*/\n\n\t/**\n\t * If one of the symbol size affecting parameters are changed,\n\t * check all the others only once for each call to an element's\n\t * .attr() method\n\t * @param {Object} hash\n\t */\n\tsymbolAttr: function (hash) {\n\t\tvar wrapper = this;\n\n\t\teach(['x', 'y', 'r', 'start', 'end', 'width', 'height', 'innerR', 'anchorX', 'anchorY'], function (key) {\n\t\t\twrapper[key] = pick(hash[key], wrapper[key]);\n\t\t});\n\n\t\twrapper.attr({\n\t\t\td: wrapper.renderer.symbols[wrapper.symbolName](\n\t\t\t\twrapper.x,\n\t\t\t\twrapper.y,\n\t\t\t\twrapper.width,\n\t\t\t\twrapper.height,\n\t\t\t\twrapper\n\t\t\t)\n\t\t});\n\t},\n\n\t/**\n\t * Apply a clipping path to this object\n\t * @param {String} id\n\t */\n\tclip: function (clipRect) {\n\t\treturn this.attr('clip-path', clipRect ? 'url(' + this.renderer.url + '#' + clipRect.id + ')' : NONE);\n\t},\n\n\t/**\n\t * Calculate the coordinates needed for drawing a rectangle crisply and return the\n\t * calculated attributes\n\t * @param {Number} strokeWidth\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} width\n\t * @param {Number} height\n\t */\n\tcrisp: function (rect) {\n\n\t\tvar wrapper = this,\n\t\t\tkey,\n\t\t\tattribs = {},\n\t\t\tnormalizer,\n\t\t\tstrokeWidth = rect.strokeWidth || wrapper.strokeWidth || 0;\n\n\t\tnormalizer = mathRound(strokeWidth) % 2 / 2; // mathRound because strokeWidth can sometimes have roundoff errors\n\n\t\t// normalize for crisp edges\n\t\trect.x = mathFloor(rect.x || wrapper.x || 0) + normalizer;\n\t\trect.y = mathFloor(rect.y || wrapper.y || 0) + normalizer;\n\t\trect.width = mathFloor((rect.width || wrapper.width || 0) - 2 * normalizer);\n\t\trect.height = mathFloor((rect.height || wrapper.height || 0) - 2 * normalizer);\n\t\trect.strokeWidth = strokeWidth;\n\n\t\tfor (key in rect) {\n\t\t\tif (wrapper[key] !== rect[key]) { // only set attribute if changed\n\t\t\t\twrapper[key] = attribs[key] = rect[key];\n\t\t\t}\n\t\t}\n\n\t\treturn attribs;\n\t},\n\n\t/**\n\t * Set styles for the element\n\t * @param {Object} styles\n\t */\n\tcss: function (styles) {\n\t\tvar elemWrapper = this,\n\t\t\toldStyles = elemWrapper.styles,\n\t\t\tnewStyles = {},\n\t\t\telem = elemWrapper.element,\n\t\t\ttextWidth,\n\t\t\tn,\n\t\t\tserializedCss = '',\n\t\t\thyphenate,\n\t\t\thasNew = !oldStyles;\n\n\t\t// convert legacy\n\t\tif (styles && styles.color) {\n\t\t\tstyles.fill = styles.color;\n\t\t}\n\n\t\t// Filter out existing styles to increase performance (#2640)\n\t\tif (oldStyles) {\n\t\t\tfor (n in styles) {\n\t\t\t\tif (styles[n] !== oldStyles[n]) {\n\t\t\t\t\tnewStyles[n] = styles[n];\n\t\t\t\t\thasNew = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (hasNew) {\n\t\t\ttextWidth = elemWrapper.textWidth = \n\t\t\t\t(styles && styles.width && elem.nodeName.toLowerCase() === 'text' && pInt(styles.width)) || \n\t\t\t\telemWrapper.textWidth; // #3501\n\n\t\t\t// Merge the new styles with the old ones\n\t\t\tif (oldStyles) {\n\t\t\t\tstyles = extend(\n\t\t\t\t\toldStyles,\n\t\t\t\t\tnewStyles\n\t\t\t\t);\n\t\t\t}\t\t\n\n\t\t\t// store object\n\t\t\telemWrapper.styles = styles;\n\n\t\t\tif (textWidth && (useCanVG || (!hasSVG && elemWrapper.renderer.forExport))) {\n\t\t\t\tdelete styles.width;\n\t\t\t}\n\n\t\t\t// serialize and set style attribute\n\t\t\tif (isIE && !hasSVG) {\n\t\t\t\tcss(elemWrapper.element, styles);\n\t\t\t} else {\n\t\t\t\t/*jslint unparam: true*/\n\t\t\t\thyphenate = function (a, b) { return '-' + b.toLowerCase(); };\n\t\t\t\t/*jslint unparam: false*/\n\t\t\t\tfor (n in styles) {\n\t\t\t\t\tserializedCss += n.replace(/([A-Z])/g, hyphenate) + ':' + styles[n] + ';';\n\t\t\t\t}\n\t\t\t\tattr(elem, 'style', serializedCss); // #1881\n\t\t\t}\n\n\n\t\t\t// re-build text\n\t\t\tif (textWidth && elemWrapper.added) {\n\t\t\t\telemWrapper.renderer.buildText(elemWrapper);\n\t\t\t}\n\t\t}\n\n\t\treturn elemWrapper;\n\t},\n\n\t/**\n\t * Add an event listener\n\t * @param {String} eventType\n\t * @param {Function} handler\n\t */\n\ton: function (eventType, handler) {\n\t\tvar svgElement = this,\n\t\t\telement = svgElement.element;\n\t\t\n\t\t// touch\n\t\tif (hasTouch && eventType === 'click') {\n\t\t\telement.ontouchstart = function (e) {\t\t\t\n\t\t\t\tsvgElement.touchEventFired = Date.now();\t\t\t\t\n\t\t\t\te.preventDefault();\n\t\t\t\thandler.call(element, e);\n\t\t\t};\n\t\t\telement.onclick = function (e) {\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tif (userAgent.indexOf('Android') === -1 || Date.now() - (svgElement.touchEventFired || 0) > 1100) { // #2269\n\t\t\t\t\thandler.call(element, e);\n\t\t\t\t}\n\t\t\t};\t\t\t\n\t\t} else {\n\t\t\t// simplest possible event model for internal use\n\t\t\telement['on' + eventType] = handler;\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**\n\t * Set the coordinates needed to draw a consistent radial gradient across\n\t * pie slices regardless of positioning inside the chart. The format is\n\t * [centerX, centerY, diameter] in pixels.\n\t */\n\tsetRadialReference: function (coordinates) {\n\t\tthis.element.radialReference = coordinates;\n\t\treturn this;\n\t},\n\n\t/**\n\t * Move an object and its children by x and y values\n\t * @param {Number} x\n\t * @param {Number} y\n\t */\n\ttranslate: function (x, y) {\n\t\treturn this.attr({\n\t\t\ttranslateX: x,\n\t\t\ttranslateY: y\n\t\t});\n\t},\n\n\t/**\n\t * Invert a group, rotate and flip\n\t */\n\tinvert: function () {\n\t\tvar wrapper = this;\n\t\twrapper.inverted = true;\n\t\twrapper.updateTransform();\n\t\treturn wrapper;\n\t},\n\n\t/**\n\t * Private method to update the transform attribute based on internal\n\t * properties\n\t */\n\tupdateTransform: function () {\n\t\tvar wrapper = this,\n\t\t\ttranslateX = wrapper.translateX || 0,\n\t\t\ttranslateY = wrapper.translateY || 0,\n\t\t\tscaleX = wrapper.scaleX,\n\t\t\tscaleY = wrapper.scaleY,\n\t\t\tinverted = wrapper.inverted,\n\t\t\trotation = wrapper.rotation,\n\t\t\telement = wrapper.element,\n\t\t\ttransform;\n\n\t\t// flipping affects translate as adjustment for flipping around the group's axis\n\t\tif (inverted) {\n\t\t\ttranslateX += wrapper.attr('width');\n\t\t\ttranslateY += wrapper.attr('height');\n\t\t}\n\n\t\t// Apply translate. Nearly all transformed elements have translation, so instead\n\t\t// of checking for translate = 0, do it always (#1767, #1846).\n\t\ttransform = ['translate(' + translateX + ',' + translateY + ')'];\n\n\t\t// apply rotation\n\t\tif (inverted) {\n\t\t\ttransform.push('rotate(90) scale(-1,1)');\n\t\t} else if (rotation) { // text rotation\n\t\t\ttransform.push('rotate(' + rotation + ' ' + (element.getAttribute('x') || 0) + ' ' + (element.getAttribute('y') || 0) + ')');\n\t\t\t\n\t\t\t// Delete bBox memo when the rotation changes\n\t\t\t//delete wrapper.bBox;\n\t\t}\n\n\t\t// apply scale\n\t\tif (defined(scaleX) || defined(scaleY)) {\n\t\t\ttransform.push('scale(' + pick(scaleX, 1) + ' ' + pick(scaleY, 1) + ')');\n\t\t}\n\n\t\tif (transform.length) {\n\t\t\telement.setAttribute('transform', transform.join(' '));\n\t\t}\n\t},\n\t/**\n\t * Bring the element to the front\n\t */\n\ttoFront: function () {\n\t\tvar element = this.element;\n\t\telement.parentNode.appendChild(element);\n\t\treturn this;\n\t},\n\n\n\t/**\n\t * Break down alignment options like align, verticalAlign, x and y\n\t * to x and y relative to the chart.\n\t *\n\t * @param {Object} alignOptions\n\t * @param {Boolean} alignByTranslate\n\t * @param {String[Object} box The box to align to, needs a width and height. When the\n\t *\t\tbox is a string, it refers to an object in the Renderer. For example, when\n\t *\t\tbox is 'spacingBox', it refers to Renderer.spacingBox which holds width, height\n\t *\t\tx and y properties.\n\t *\n\t */\n\talign: function (alignOptions, alignByTranslate, box) {\n\t\tvar align,\n\t\t\tvAlign,\n\t\t\tx,\n\t\t\ty,\n\t\t\tattribs = {},\n\t\t\talignTo,\n\t\t\trenderer = this.renderer,\n\t\t\talignedObjects = renderer.alignedObjects;\n\n\t\t// First call on instanciate\n\t\tif (alignOptions) {\n\t\t\tthis.alignOptions = alignOptions;\n\t\t\tthis.alignByTranslate = alignByTranslate;\n\t\t\tif (!box || isString(box)) { // boxes other than renderer handle this internally\n\t\t\t\tthis.alignTo = alignTo = box || 'renderer';\n\t\t\t\terase(alignedObjects, this); // prevent duplicates, like legendGroup after resize\n\t\t\t\talignedObjects.push(this);\n\t\t\t\tbox = null; // reassign it below\n\t\t\t}\n\n\t\t// When called on resize, no arguments are supplied\n\t\t} else {\n\t\t\talignOptions = this.alignOptions;\n\t\t\talignByTranslate = this.alignByTranslate;\n\t\t\talignTo = this.alignTo;\n\t\t}\n\n\t\tbox = pick(box, renderer[alignTo], renderer);\n\n\t\t// Assign variables\n\t\talign = alignOptions.align;\n\t\tvAlign = alignOptions.verticalAlign;\n\t\tx = (box.x || 0) + (alignOptions.x || 0); // default: left align\n\t\ty = (box.y || 0) + (alignOptions.y || 0); // default: top align\n\n\t\t// Align\n\t\tif (align === 'right' || align === 'center') {\n\t\t\tx += (box.width - (alignOptions.width || 0)) /\n\t\t\t\t\t{ right: 1, center: 2 }[align];\n\t\t}\n\t\tattribs[alignByTranslate ? 'translateX' : 'x'] = mathRound(x);\n\n\n\t\t// Vertical align\n\t\tif (vAlign === 'bottom' || vAlign === 'middle') {\n\t\t\ty += (box.height - (alignOptions.height || 0)) /\n\t\t\t\t\t({ bottom: 1, middle: 2 }[vAlign] || 1);\n\n\t\t}\n\t\tattribs[alignByTranslate ? 'translateY' : 'y'] = mathRound(y);\n\n\t\t// Animate only if already placed\n\t\tthis[this.placed ? 'animate' : 'attr'](attribs);\n\t\tthis.placed = true;\n\t\tthis.alignAttr = attribs;\n\n\t\treturn this;\n\t},\n\n\t/**\n\t * Get the bounding box (width, height, x and y) for the element\n\t */\n\tgetBBox: function (reload) {\n\t\tvar wrapper = this,\n\t\t\tbBox,// = wrapper.bBox,\n\t\t\trenderer = wrapper.renderer,\n\t\t\twidth,\n\t\t\theight,\n\t\t\trotation = wrapper.rotation,\n\t\t\telement = wrapper.element,\n\t\t\tstyles = wrapper.styles,\n\t\t\trad = rotation * deg2rad,\n\t\t\ttextStr = wrapper.textStr,\n\t\t\ttextShadow,\n\t\t\telemStyle = element.style,\n\t\t\ttoggleTextShadowShim,\n\t\t\tcacheKey;\n\n\t\tif (textStr !== UNDEFINED) {\n\n\t\t\t// Properties that affect bounding box\n\t\t\tcacheKey = ['', rotation || 0, styles && styles.fontSize, element.style.width].join(',');\n\n\t\t\t// Since numbers are monospaced, and numerical labels appear a lot in a chart,\n\t\t\t// we assume that a label of n characters has the same bounding box as others \n\t\t\t// of the same length.\n\t\t\tif (textStr === '' || numRegex.test(textStr)) {\n\t\t\t\tcacheKey = 'num:' + textStr.toString().length + cacheKey;\n\n\t\t\t// Caching all strings reduces rendering time by 4-5%.\n\t\t\t} else {\n\t\t\t\tcacheKey = textStr + cacheKey;\n\t\t\t}\n\t\t}\n\n\t\tif (cacheKey && !reload) {\n\t\t\tbBox = renderer.cache[cacheKey];\n\t\t}\n\n\t\t// No cache found\n\t\tif (!bBox) {\n\n\t\t\t// SVG elements\n\t\t\tif (element.namespaceURI === SVG_NS || renderer.forExport) {\n\t\t\t\ttry { // Fails in Firefox if the container has display: none.\n\n\t\t\t\t\t// When the text shadow shim is used, we need to hide the fake shadows\n\t\t\t\t\t// to get the correct bounding box (#3872)\n\t\t\t\t\ttoggleTextShadowShim = this.fakeTS && function (display) {\n\t\t\t\t\t\teach(element.querySelectorAll('.' + PREFIX + 'text-shadow'), function (tspan) {\n\t\t\t\t\t\t\ttspan.style.display = display;\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\n\t\t\t\t\t// Workaround for #3842, Firefox reporting wrong bounding box for shadows\n\t\t\t\t\tif (isFirefox && elemStyle.textShadow) {\n\t\t\t\t\t\ttextShadow = elemStyle.textShadow;\n\t\t\t\t\t\telemStyle.textShadow = '';\n\t\t\t\t\t} else if (toggleTextShadowShim) {\n\t\t\t\t\t\ttoggleTextShadowShim(NONE);\n\t\t\t\t\t}\n\n\t\t\t\t\tbBox = element.getBBox ?\n\t\t\t\t\t\t// SVG: use extend because IE9 is not allowed to change width and height in case\n\t\t\t\t\t\t// of rotation (below)\n\t\t\t\t\t\textend({}, element.getBBox()) :\n\t\t\t\t\t\t// Canvas renderer and legacy IE in export mode\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twidth: element.offsetWidth,\n\t\t\t\t\t\t\theight: element.offsetHeight\n\t\t\t\t\t\t};\n\n\t\t\t\t\t// #3842\n\t\t\t\t\tif (textShadow) {\n\t\t\t\t\t\telemStyle.textShadow = textShadow;\n\t\t\t\t\t} else if (toggleTextShadowShim) {\n\t\t\t\t\t\ttoggleTextShadowShim('');\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\n\t\t\t\t// If the bBox is not set, the try-catch block above failed. The other condition\n\t\t\t\t// is for Opera that returns a width of -Infinity on hidden elements.\n\t\t\t\tif (!bBox || bBox.width < 0) {\n\t\t\t\t\tbBox = { width: 0, height: 0 };\n\t\t\t\t}\n\n\n\t\t\t// VML Renderer or useHTML within SVG\n\t\t\t} else {\n\n\t\t\t\tbBox = wrapper.htmlGetBBox();\n\n\t\t\t}\n\n\t\t\t// True SVG elements as well as HTML elements in modern browsers using the .useHTML option\n\t\t\t// need to compensated for rotation\n\t\t\tif (renderer.isSVG) {\n\t\t\t\twidth = bBox.width;\n\t\t\t\theight = bBox.height;\n\n\t\t\t\t// Workaround for wrong bounding box in IE9 and IE10 (#1101, #1505, #1669, #2568)\n\t\t\t\tif (isIE && styles && styles.fontSize === '11px' && height.toPrecision(3) === '16.9') {\n\t\t\t\t\tbBox.height = height = 14;\n\t\t\t\t}\n\n\t\t\t\t// Adjust for rotated text\n\t\t\t\tif (rotation) {\n\t\t\t\t\tbBox.width = mathAbs(height * mathSin(rad)) + mathAbs(width * mathCos(rad));\n\t\t\t\t\tbBox.height = mathAbs(height * mathCos(rad)) + mathAbs(width * mathSin(rad));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Cache it\n\t\t\trenderer.cache[cacheKey] = bBox;\n\t\t}\n\t\treturn bBox;\n\t},\n\n\t/**\n\t * Show the element\n\t */\n\tshow: function (inherit) {\n\t\t// IE9-11 doesn't handle visibilty:inherit well, so we remove the attribute instead (#2881)\n\t\tif (inherit && this.element.namespaceURI === SVG_NS) {\n\t\t\tthis.element.removeAttribute('visibility');\n\t\t} else {\n\t\t\tthis.attr({ visibility: inherit ? 'inherit' : VISIBLE });\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**\n\t * Hide the element\n\t */\n\thide: function () {\n\t\treturn this.attr({ visibility: HIDDEN });\n\t},\n\n\tfadeOut: function (duration) {\n\t\tvar elemWrapper = this;\n\t\telemWrapper.animate({\n\t\t\topacity: 0\n\t\t}, {\n\t\t\tduration: duration || 150,\n\t\t\tcomplete: function () {\n\t\t\t\telemWrapper.attr({ y: -9999 }); // #3088, assuming we're only using this for tooltips\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Add the element\n\t * @param {Object|Undefined} parent Can be an element, an element wrapper or undefined\n\t *\tto append the element to the renderer.box.\n\t */\n\tadd: function (parent) {\n\n\t\tvar renderer = this.renderer,\n\t\t\telement = this.element,\n\t\t\tinserted;\n\n\t\tif (parent) {\n\t\t\tthis.parentGroup = parent;\n\t\t}\n\n\t\t// mark as inverted\n\t\tthis.parentInverted = parent && parent.inverted;\n\n\t\t// build formatted text\n\t\tif (this.textStr !== undefined) {\n\t\t\trenderer.buildText(this);\n\t\t}\n\n\t\t// Mark as added\n\t\tthis.added = true;\n\n\t\t// If we're adding to renderer root, or other elements in the group \n\t\t// have a z index, we need to handle it\n\t\tif (!parent || parent.handleZ || this.zIndex) {\n\t\t\tinserted = this.zIndexSetter();\n\t\t}\n\n\t\t// If zIndex is not handled, append at the end\n\t\tif (!inserted) {\n\t\t\t(parent ? parent.element : renderer.box).appendChild(element);\n\t\t}\n\n\t\t// fire an event for internal hooks\n\t\tif (this.onAdd) {\n\t\t\tthis.onAdd();\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t/**\n\t * Removes a child either by removeChild or move to garbageBin.\n\t * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.\n\t */\n\tsafeRemoveChild: function (element) {\n\t\tvar parentNode = element.parentNode;\n\t\tif (parentNode) {\n\t\t\tparentNode.removeChild(element);\n\t\t}\n\t},\n\n\t/**\n\t * Destroy the element and element wrapper\n\t */\n\tdestroy: function () {\n\t\tvar wrapper = this,\n\t\t\telement = wrapper.element || {},\n\t\t\tshadows = wrapper.shadows,\n\t\t\tparentToClean = wrapper.renderer.isSVG && element.nodeName === 'SPAN' && wrapper.parentGroup,\n\t\t\tgrandParent,\n\t\t\tkey,\n\t\t\ti;\n\n\t\t// remove events\n\t\telement.onclick = element.onmouseout = element.onmouseover = element.onmousemove = element.point = null;\n\t\tstop(wrapper); // stop running animations\n\n\t\tif (wrapper.clipPath) {\n\t\t\twrapper.clipPath = wrapper.clipPath.destroy();\n\t\t}\n\n\t\t// Destroy stops in case this is a gradient object\n\t\tif (wrapper.stops) {\n\t\t\tfor (i = 0; i < wrapper.stops.length; i++) {\n\t\t\t\twrapper.stops[i] = wrapper.stops[i].destroy();\n\t\t\t}\n\t\t\twrapper.stops = null;\n\t\t}\n\n\t\t// remove element\n\t\twrapper.safeRemoveChild(element);\n\n\t\t// destroy shadows\n\t\tif (shadows) {\n\t\t\teach(shadows, function (shadow) {\n\t\t\t\twrapper.safeRemoveChild(shadow);\n\t\t\t});\n\t\t}\n\n\t\t// In case of useHTML, clean up empty containers emulating SVG groups (#1960, #2393, #2697).\n\t\twhile (parentToClean && parentToClean.div && parentToClean.div.childNodes.length === 0) {\n\t\t\tgrandParent = parentToClean.parentGroup;\n\t\t\twrapper.safeRemoveChild(parentToClean.div);\n\t\t\tdelete parentToClean.div;\n\t\t\tparentToClean = grandParent;\n\t\t}\n\n\t\t// remove from alignObjects\n\t\tif (wrapper.alignTo) {\n\t\t\terase(wrapper.renderer.alignedObjects, wrapper);\n\t\t}\n\n\t\tfor (key in wrapper) {\n\t\t\tdelete wrapper[key];\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Add a shadow to the element. Must be done after the element is added to the DOM\n\t * @param {Boolean|Object} shadowOptions\n\t */\n\tshadow: function (shadowOptions, group, cutOff) {\n\t\tvar shadows = [],\n\t\t\ti,\n\t\t\tshadow,\n\t\t\telement = this.element,\n\t\t\tstrokeWidth,\n\t\t\tshadowWidth,\n\t\t\tshadowElementOpacity,\n\n\t\t\t// compensate for inverted plot area\n\t\t\ttransform;\n\n\n\t\tif (shadowOptions) {\n\t\t\tshadowWidth = pick(shadowOptions.width, 3);\n\t\t\tshadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;\n\t\t\ttransform = this.parentInverted ?\n\t\t\t\t'(-1,-1)' :\n\t\t\t\t'(' + pick(shadowOptions.offsetX, 1) + ', ' + pick(shadowOptions.offsetY, 1) + ')';\n\t\t\tfor (i = 1; i <= shadowWidth; i++) {\n\t\t\t\tshadow = element.cloneNode(0);\n\t\t\t\tstrokeWidth = (shadowWidth * 2) + 1 - (2 * i);\n\t\t\t\tattr(shadow, {\n\t\t\t\t\t'isShadow': 'true',\n\t\t\t\t\t'stroke': shadowOptions.color || 'black',\n\t\t\t\t\t'stroke-opacity': shadowElementOpacity * i,\n\t\t\t\t\t'stroke-width': strokeWidth,\n\t\t\t\t\t'transform': 'translate' + transform,\n\t\t\t\t\t'fill': NONE\n\t\t\t\t});\n\t\t\t\tif (cutOff) {\n\t\t\t\t\tattr(shadow, 'height', mathMax(attr(shadow, 'height') - strokeWidth, 0));\n\t\t\t\t\tshadow.cutHeight = strokeWidth;\n\t\t\t\t}\n\n\t\t\t\tif (group) {\n\t\t\t\t\tgroup.element.appendChild(shadow);\n\t\t\t\t} else {\n\t\t\t\t\telement.parentNode.insertBefore(shadow, element);\n\t\t\t\t}\n\n\t\t\t\tshadows.push(shadow);\n\t\t\t}\n\n\t\t\tthis.shadows = shadows;\n\t\t}\n\t\treturn this;\n\n\t},\n\n\txGetter: function (key) {\n\t\tif (this.element.nodeName === 'circle') {\n\t\t\tkey = { x: 'cx', y: 'cy' }[key] || key;\n\t\t}\n\t\treturn this._defaultGetter(key);\n\t},\n\n\t/** \n\t * Get the current value of an attribute or pseudo attribute, used mainly\n\t * for animation.\n\t */\n\t_defaultGetter: function (key) {\n\t\tvar ret = pick(this[key], this.element ? this.element.getAttribute(key) : null, 0);\n\n\t\tif (/^[\\-0-9\\.]+$/.test(ret)) { // is numerical\n\t\t\tret = parseFloat(ret);\n\t\t}\n\t\treturn ret;\n\t},\n\n\n\tdSetter: function (value, key, element) {\n\t\tif (value && value.join) { // join path\n\t\t\tvalue = value.join(' ');\n\t\t}\n\t\tif (/(NaN| {2}|^$)/.test(value)) {\n\t\t\tvalue = 'M 0 0';\n\t\t}\n\t\telement.setAttribute(key, value);\n\n\t\tthis[key] = value;\n\t},\n\tdashstyleSetter: function (value) {\n\t\tvar i;\n\t\tvalue = value && value.toLowerCase();\n\t\tif (value) {\n\t\t\tvalue = value\n\t\t\t\t.replace('shortdashdotdot', '3,1,1,1,1,1,')\n\t\t\t\t.replace('shortdashdot', '3,1,1,1')\n\t\t\t\t.replace('shortdot', '1,1,')\n\t\t\t\t.replace('shortdash', '3,1,')\n\t\t\t\t.replace('longdash', '8,3,')\n\t\t\t\t.replace(/dot/g, '1,3,')\n\t\t\t\t.replace('dash', '4,3,')\n\t\t\t\t.replace(/,$/, '')\n\t\t\t\t.split(','); // ending comma\n\n\t\t\ti = value.length;\n\t\t\twhile (i--) {\n\t\t\t\tvalue[i] = pInt(value[i]) * this['stroke-width'];\n\t\t\t}\n\t\t\tvalue = value.join(',')\n\t\t\t\t.replace('NaN', 'none'); // #3226\n\t\t\tthis.element.setAttribute('stroke-dasharray', value);\n\t\t}\n\t},\n\talignSetter: function (value) {\n\t\tthis.element.setAttribute('text-anchor', { left: 'start', center: 'middle', right: 'end' }[value]);\n\t},\n\topacitySetter: function (value, key, element) {\n\t\tthis[key] = value;\n\t\telement.setAttribute(key, value);\n\t},\n\ttitleSetter: function (value) {\n\t\tvar titleNode = this.element.getElementsByTagName('title')[0];\n\t\tif (!titleNode) {\n\t\t\ttitleNode = doc.createElementNS(SVG_NS, 'title');\n\t\t\tthis.element.appendChild(titleNode);\n\t\t}\n\t\ttitleNode.appendChild(\n\t\t\tdoc.createTextNode(\n\t\t\t\t(String(pick(value), '')).replace(/<[^>]*>/g, '') // #3276, #3895\n\t\t\t)\n\t\t);\n\t},\n\ttextSetter: function (value) {\n\t\tif (value !== this.textStr) {\n\t\t\t// Delete bBox memo when the text changes\n\t\t\tdelete this.bBox;\n\t\t\n\t\t\tthis.textStr = value;\n\t\t\tif (this.added) {\n\t\t\t\tthis.renderer.buildText(this);\n\t\t\t}\n\t\t}\n\t},\n\tfillSetter: function (value, key, element) {\n\t\tif (typeof value === 'string') {\n\t\t\telement.setAttribute(key, value);\n\t\t} else if (value) {\n\t\t\tthis.colorGradient(value, key, element);\n\t\t}\n\t},\n\tzIndexSetter: function (value, key) {\n\t\tvar renderer = this.renderer,\n\t\t\tparentGroup = this.parentGroup,\n\t\t\tparentWrapper = parentGroup || renderer,\n\t\t\tparentNode = parentWrapper.element || renderer.box,\n\t\t\tchildNodes,\n\t\t\totherElement,\n\t\t\totherZIndex,\n\t\t\telement = this.element,\n\t\t\tinserted,\n\t\t\trun = this.added,\n\t\t\ti;\n\t\t\n\t\tif (defined(value)) {\n\t\t\telement.setAttribute(key, value); // So we can read it for other elements in the group\n\t\t\tvalue = +value;\n\t\t\tif (this[key] === value) { // Only update when needed (#3865)\n\t\t\t\trun = false;\n\t\t\t}\n\t\t\tthis[key] = value;\n\t\t}\n\n\t\t// Insert according to this and other elements' zIndex. Before .add() is called,\n\t\t// nothing is done. Then on add, or by later calls to zIndexSetter, the node\n\t\t// is placed on the right place in the DOM.\n\t\tif (run) {\n\t\t\tvalue = this.zIndex;\n\n\t\t\tif (value && parentGroup) {\n\t\t\t\tparentGroup.handleZ = true;\n\t\t\t}\n\t\t\n\t\t\tchildNodes = parentNode.childNodes;\n\t\t\tfor (i = 0; i < childNodes.length && !inserted; i++) {\n\t\t\t\totherElement = childNodes[i];\n\t\t\t\totherZIndex = attr(otherElement, 'zIndex');\n\t\t\t\tif (otherElement !== element && (\n\t\t\t\t\t\t// Insert before the first element with a higher zIndex\n\t\t\t\t\t\tpInt(otherZIndex) > value ||\n\t\t\t\t\t\t// If no zIndex given, insert before the first element with a zIndex\n\t\t\t\t\t\t(!defined(value) && defined(otherZIndex))\n\n\t\t\t\t\t\t)) {\n\t\t\t\t\tparentNode.insertBefore(element, otherElement);\n\t\t\t\t\tinserted = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!inserted) {\n\t\t\t\tparentNode.appendChild(element);\n\t\t\t}\n\t\t}\n\t\treturn inserted;\n\t},\n\t_defaultSetter: function (value, key, element) {\n\t\telement.setAttribute(key, value);\n\t}\n};\n\n// Some shared setters and getters\nSVGElement.prototype.yGetter = SVGElement.prototype.xGetter;\nSVGElement.prototype.translateXSetter = SVGElement.prototype.translateYSetter = \n\t\tSVGElement.prototype.rotationSetter = SVGElement.prototype.verticalAlignSetter = \n\t\tSVGElement.prototype.scaleXSetter = SVGElement.prototype.scaleYSetter = function (value, key) {\n\tthis[key] = value;\n\tthis.doTransform = true;\n};\n\n// WebKit and Batik have problems with a stroke-width of zero, so in this case we remove the \n// stroke attribute altogether. #1270, #1369, #3065, #3072.\nSVGElement.prototype['stroke-widthSetter'] = SVGElement.prototype.strokeSetter = function (value, key, element) {\n\tthis[key] = value;\n\t// Only apply the stroke attribute if the stroke width is defined and larger than 0\n\tif (this.stroke && this['stroke-width']) {\n\t\tthis.strokeWidth = this['stroke-width'];\n\t\tSVGElement.prototype.fillSetter.call(this, this.stroke, 'stroke', element); // use prototype as instance may be overridden\n\t\telement.setAttribute('stroke-width', this['stroke-width']);\n\t\tthis.hasStroke = true;\n\t} else if (key === 'stroke-width' && value === 0 && this.hasStroke) {\n\t\telement.removeAttribute('stroke');\n\t\tthis.hasStroke = false;\n\t}\n};\n\n\n/**\n * The default SVG renderer\n */\nvar SVGRenderer = function () {\n\tthis.init.apply(this, arguments);\n};\nSVGRenderer.prototype = {\n\tElement: SVGElement,\n\n\t/**\n\t * Initialize the SVGRenderer\n\t * @param {Object} container\n\t * @param {Number} width\n\t * @param {Number} height\n\t * @param {Boolean} forExport\n\t */\n\tinit: function (container, width, height, style, forExport) {\n\t\tvar renderer = this,\n\t\t\tloc = location,\n\t\t\tboxWrapper,\n\t\t\telement,\n\t\t\tdesc;\n\n\t\tboxWrapper = renderer.createElement('svg')\n\t\t\t.attr({\n\t\t\t\tversion: '1.1'\n\t\t\t})\n\t\t\t.css(this.getStyle(style));\n\t\telement = boxWrapper.element;\n\t\tcontainer.appendChild(element);\n\n\t\t// For browsers other than IE, add the namespace attribute (#1978)\n\t\tif (container.innerHTML.indexOf('xmlns') === -1) {\n\t\t\tattr(element, 'xmlns', SVG_NS);\n\t\t}\n\n\t\t// object properties\n\t\trenderer.isSVG = true;\n\t\trenderer.box = element;\n\t\trenderer.boxWrapper = boxWrapper;\n\t\trenderer.alignedObjects = [];\n\n\t\t// Page url used for internal references. #24, #672, #1070\n\t\trenderer.url = (isFirefox || isWebKit) && doc.getElementsByTagName('base').length ?\n\t\t\tloc.href\n\t\t\t\t.replace(/#.*?$/, '') // remove the hash\n\t\t\t\t.replace(/([\\('\\)])/g, '\\\\$1') // escape parantheses and quotes\n\t\t\t\t.replace(/ /g, '%20') : // replace spaces (needed for Safari only)\n\t\t\t'';\n\n\t\t// Add description\n\t\tdesc = this.createElement('desc').add();\n\t\tdesc.element.appendChild(doc.createTextNode('Created with ' + PRODUCT + ' ' + VERSION));\n\n\n\t\trenderer.defs = this.createElement('defs').add();\n\t\trenderer.forExport = forExport;\n\t\trenderer.gradients = {}; // Object where gradient SvgElements are stored\n\t\trenderer.cache = {}; // Cache for numerical bounding boxes\n\n\t\trenderer.setSize(width, height, false);\n\n\n\n\t\t// Issue 110 workaround:\n\t\t// In Firefox, if a div is positioned by percentage, its pixel position may land\n\t\t// between pixels. The container itself doesn't display this, but an SVG element\n\t\t// inside this container will be drawn at subpixel precision. In order to draw\n\t\t// sharp lines, this must be compensated for. This doesn't seem to work inside\n\t\t// iframes though (like in jsFiddle).\n\t\tvar subPixelFix, rect;\n\t\tif (isFirefox && container.getBoundingClientRect) {\n\t\t\trenderer.subPixelFix = subPixelFix = function () {\n\t\t\t\tcss(container, { left: 0, top: 0 });\n\t\t\t\trect = container.getBoundingClientRect();\n\t\t\t\tcss(container, {\n\t\t\t\t\tleft: (mathCeil(rect.left) - rect.left) + PX,\n\t\t\t\t\ttop: (mathCeil(rect.top) - rect.top) + PX\n\t\t\t\t});\n\t\t\t};\n\n\t\t\t// run the fix now\n\t\t\tsubPixelFix();\n\n\t\t\t// run it on resize\n\t\t\taddEvent(win, 'resize', subPixelFix);\n\t\t}\n\t},\n\n\tgetStyle: function (style) {\n\t\treturn (this.style = extend({\n\t\t\tfontFamily: '\"Lucida Grande\", \"Lucida Sans Unicode\", Arial, Helvetica, sans-serif', // default font\n\t\t\tfontSize: '12px'\n\t\t}, style));\n\t},\n\n\t/**\n\t * Detect whether the renderer is hidden. This happens when one of the parent elements\n\t * has display: none. #608.\n\t */\n\tisHidden: function () {\n\t\treturn !this.boxWrapper.getBBox().width;\n\t},\n\n\t/**\n\t * Destroys the renderer and its allocated members.\n\t */\n\tdestroy: function () {\n\t\tvar renderer = this,\n\t\t\trendererDefs = renderer.defs;\n\t\trenderer.box = null;\n\t\trenderer.boxWrapper = renderer.boxWrapper.destroy();\n\n\t\t// Call destroy on all gradient elements\n\t\tdestroyObjectProperties(renderer.gradients || {});\n\t\trenderer.gradients = null;\n\n\t\t// Defs are null in VMLRenderer\n\t\t// Otherwise, destroy them here.\n\t\tif (rendererDefs) {\n\t\t\trenderer.defs = rendererDefs.destroy();\n\t\t}\n\n\t\t// Remove sub pixel fix handler\n\t\t// We need to check that there is a handler, otherwise all functions that are registered for event 'resize' are removed\n\t\t// See issue #982\n\t\tif (renderer.subPixelFix) {\n\t\t\tremoveEvent(win, 'resize', renderer.subPixelFix);\n\t\t}\n\n\t\trenderer.alignedObjects = null;\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Create a wrapper for an SVG element\n\t * @param {Object} nodeName\n\t */\n\tcreateElement: function (nodeName) {\n\t\tvar wrapper = new this.Element();\n\t\twrapper.init(this, nodeName);\n\t\treturn wrapper;\n\t},\n\n\t/**\n\t * Dummy function for use in canvas renderer\n\t */\n\tdraw: function () {},\n\n\t/**\n\t * Parse a simple HTML string into SVG tspans\n\t *\n\t * @param {Object} textNode The parent text SVG node\n\t */\n\tbuildText: function (wrapper) {\n\t\tvar textNode = wrapper.element,\n\t\t\trenderer = this,\n\t\t\tforExport = renderer.forExport,\n\t\t\ttextStr = pick(wrapper.textStr, '').toString(),\n\t\t\thasMarkup = textStr.indexOf('<') !== -1,\n\t\t\tlines,\n\t\t\tchildNodes = textNode.childNodes,\n\t\t\tstyleRegex,\n\t\t\threfRegex,\n\t\t\tparentX = attr(textNode, 'x'),\n\t\t\ttextStyles = wrapper.styles,\n\t\t\twidth = wrapper.textWidth,\n\t\t\ttextLineHeight = textStyles && textStyles.lineHeight,\n\t\t\ttextShadow = textStyles && textStyles.textShadow,\n\t\t\tellipsis = textStyles && textStyles.textOverflow === 'ellipsis',\n\t\t\ti = childNodes.length,\n\t\t\ttempParent = width && !wrapper.added && this.box,\n\t\t\tgetLineHeight = function (tspan) {\n\t\t\t\treturn textLineHeight ? \n\t\t\t\t\tpInt(textLineHeight) :\n\t\t\t\t\trenderer.fontMetrics(\n\t\t\t\t\t\t/(px|em)$/.test(tspan && tspan.style.fontSize) ?\n\t\t\t\t\t\t\ttspan.style.fontSize :\n\t\t\t\t\t\t\t((textStyles && textStyles.fontSize) || renderer.style.fontSize || 12),\n\t\t\t\t\t\ttspan\n\t\t\t\t\t).h;\n\t\t\t},\n\t\t\tunescapeAngleBrackets = function (inputStr) {\n\t\t\t\treturn inputStr.replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n\t\t\t};\n\n\t\t/// remove old text\n\t\twhile (i--) {\n\t\t\ttextNode.removeChild(childNodes[i]);\n\t\t}\n\n\t\t// Skip tspans, add text directly to text node. The forceTSpan is a hook \n\t\t// used in text outline hack.\n\t\tif (!hasMarkup && !textShadow && !ellipsis && textStr.indexOf(' ') === -1) {\n\t\t\ttextNode.appendChild(doc.createTextNode(unescapeAngleBrackets(textStr)));\n\t\t\treturn;\n\n\t\t// Complex strings, add more logic\n\t\t} else {\n\n\t\t\tstyleRegex = /<.*style=\"([^\"]+)\".*>/;\n\t\t\threfRegex = /<.*href=\"(http[^\"]+)\".*>/;\n\n\t\t\tif (tempParent) {\n\t\t\t\ttempParent.appendChild(textNode); // attach it to the DOM to read offset width\n\t\t\t}\n\n\t\t\tif (hasMarkup) {\n\t\t\t\tlines = textStr\n\t\t\t\t\t.replace(/<(b|strong)>/g, '<span style=\"font-weight:bold\">')\n\t\t\t\t\t.replace(/<(i|em)>/g, '<span style=\"font-style:italic\">')\n\t\t\t\t\t.replace(/<a/g, '<span')\n\t\t\t\t\t.replace(/<\\/(b|strong|i|em|a)>/g, '</span>')\n\t\t\t\t\t.split(/<br.*?>/g);\n\n\t\t\t} else {\n\t\t\t\tlines = [textStr];\n\t\t\t}\n\n\n\t\t\t// remove empty line at end\n\t\t\tif (lines[lines.length - 1] === '') {\n\t\t\t\tlines.pop();\n\t\t\t}\n\n\t\t\t\n\t\t\t// build the lines\n\t\t\teach(lines, function (line, lineNo) {\n\t\t\t\tvar spans, spanNo = 0;\n\n\t\t\t\tline = line.replace(/<span/g, '|||<span').replace(/<\\/span>/g, '</span>|||');\n\t\t\t\tspans = line.split('|||');\n\n\t\t\t\teach(spans, function (span) {\n\t\t\t\t\tif (span !== '' || spans.length === 1) {\n\t\t\t\t\t\tvar attributes = {},\n\t\t\t\t\t\t\ttspan = doc.createElementNS(SVG_NS, 'tspan'),\n\t\t\t\t\t\t\tspanStyle; // #390\n\t\t\t\t\t\tif (styleRegex.test(span)) {\n\t\t\t\t\t\t\tspanStyle = span.match(styleRegex)[1].replace(/(;| |^)color([ :])/, '$1fill$2');\n\t\t\t\t\t\t\tattr(tspan, 'style', spanStyle);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (hrefRegex.test(span) && !forExport) { // Not for export - #1529\n\t\t\t\t\t\t\tattr(tspan, 'onclick', 'location.href=\\\"' + span.match(hrefRegex)[1] + '\\\"');\n\t\t\t\t\t\t\tcss(tspan, { cursor: 'pointer' });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tspan = unescapeAngleBrackets(span.replace(/<(.|\\n)*?>/g, '') || ' ');\n\n\t\t\t\t\t\t// Nested tags aren't supported, and cause crash in Safari (#1596)\n\t\t\t\t\t\tif (span !== ' ') {\n\n\t\t\t\t\t\t\t// add the text node\n\t\t\t\t\t\t\ttspan.appendChild(doc.createTextNode(span));\n\n\t\t\t\t\t\t\tif (!spanNo) { // first span in a line, align it to the left\n\t\t\t\t\t\t\t\tif (lineNo && parentX !== null) {\n\t\t\t\t\t\t\t\t\tattributes.x = parentX;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tattributes.dx = 0; // #16\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// add attributes\n\t\t\t\t\t\t\tattr(tspan, attributes);\n\n\t\t\t\t\t\t\t// Append it\n\t\t\t\t\t\t\ttextNode.appendChild(tspan);\n\n\t\t\t\t\t\t\t// first span on subsequent line, add the line height\n\t\t\t\t\t\t\tif (!spanNo && lineNo) {\n\n\t\t\t\t\t\t\t\t// allow getting the right offset height in exporting in IE\n\t\t\t\t\t\t\t\tif (!hasSVG && forExport) {\n\t\t\t\t\t\t\t\t\tcss(tspan, { display: 'block' });\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Set the line height based on the font size of either\n\t\t\t\t\t\t\t\t// the text element or the tspan element\n\t\t\t\t\t\t\t\tattr(\n\t\t\t\t\t\t\t\t\ttspan,\n\t\t\t\t\t\t\t\t\t'dy',\n\t\t\t\t\t\t\t\t\tgetLineHeight(tspan)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/*if (width) {\n\t\t\t\t\t\t\t\trenderer.breakText(wrapper, width);\n\t\t\t\t\t\t\t}*/\n\n\t\t\t\t\t\t\t// Check width and apply soft breaks or ellipsis\n\t\t\t\t\t\t\tif (width) {\n\t\t\t\t\t\t\t\tvar words = span.replace(/([^\\^])-/g, '$1- ').split(' '), // #1273\n\t\t\t\t\t\t\t\t\thasWhiteSpace = spans.length > 1 || lineNo || (words.length > 1 && textStyles.whiteSpace !== 'nowrap'),\n\t\t\t\t\t\t\t\t\ttooLong,\n\t\t\t\t\t\t\t\t\twasTooLong,\n\t\t\t\t\t\t\t\t\tactualWidth,\n\t\t\t\t\t\t\t\t\trest = [],\n\t\t\t\t\t\t\t\t\tdy = getLineHeight(tspan),\n\t\t\t\t\t\t\t\t\tsoftLineNo = 1,\n\t\t\t\t\t\t\t\t\trotation = wrapper.rotation,\n\t\t\t\t\t\t\t\t\twordStr = span, // for ellipsis\n\t\t\t\t\t\t\t\t\tcursor = wordStr.length, // binary search cursor\n\t\t\t\t\t\t\t\t\tbBox;\n\n\t\t\t\t\t\t\t\twhile ((hasWhiteSpace || ellipsis) && (words.length || rest.length)) {\n\t\t\t\t\t\t\t\t\twrapper.rotation = 0; // discard rotation when computing box\n\t\t\t\t\t\t\t\t\tbBox = wrapper.getBBox(true);\n\t\t\t\t\t\t\t\t\tactualWidth = bBox.width;\n\n\t\t\t\t\t\t\t\t\t// Old IE cannot measure the actualWidth for SVG elements (#2314)\n\t\t\t\t\t\t\t\t\tif (!hasSVG && renderer.forExport) {\n\t\t\t\t\t\t\t\t\t\tactualWidth = renderer.measureSpanWidth(tspan.firstChild.data, wrapper.styles);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\ttooLong = actualWidth > width;\n\n\t\t\t\t\t\t\t\t\t// For ellipsis, do a binary search for the correct string length\n\t\t\t\t\t\t\t\t\tif (wasTooLong === undefined) {\n\t\t\t\t\t\t\t\t\t\twasTooLong = tooLong; // First time\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (ellipsis && wasTooLong) {\n\t\t\t\t\t\t\t\t\t\tcursor /= 2;\n\n\t\t\t\t\t\t\t\t\t\tif (wordStr === '' || (!tooLong && cursor < 0.5)) {\n\t\t\t\t\t\t\t\t\t\t\twords = []; // All ok, break out\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif (tooLong) {\n\t\t\t\t\t\t\t\t\t\t\t\twasTooLong = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\twordStr = span.substring(0, wordStr.length + (tooLong ? -1 : 1) * mathCeil(cursor));\n\t\t\t\t\t\t\t\t\t\t\twords = [wordStr + (width > 3 ? '\\u2026' : '')];\n\t\t\t\t\t\t\t\t\t\t\ttspan.removeChild(tspan.firstChild);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Looping down, this is the first word sequence that is not too long,\n\t\t\t\t\t\t\t\t\t// so we can move on to build the next line.\n\t\t\t\t\t\t\t\t\t} else if (!tooLong || words.length === 1) {\n\t\t\t\t\t\t\t\t\t\twords = rest;\n\t\t\t\t\t\t\t\t\t\trest = [];\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (words.length) {\n\t\t\t\t\t\t\t\t\t\t\tsoftLineNo++;\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\ttspan = doc.createElementNS(SVG_NS, 'tspan');\n\t\t\t\t\t\t\t\t\t\t\tattr(tspan, {\n\t\t\t\t\t\t\t\t\t\t\t\tdy: dy,\n\t\t\t\t\t\t\t\t\t\t\t\tx: parentX\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tif (spanStyle) { // #390\n\t\t\t\t\t\t\t\t\t\t\t\tattr(tspan, 'style', spanStyle);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\ttextNode.appendChild(tspan);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (actualWidth > width) { // a single word is pressing it out\n\t\t\t\t\t\t\t\t\t\t\twidth = actualWidth;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else { // append to existing line tspan\n\t\t\t\t\t\t\t\t\t\ttspan.removeChild(tspan.firstChild);\n\t\t\t\t\t\t\t\t\t\trest.unshift(words.pop());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (words.length) {\n\t\t\t\t\t\t\t\t\t\ttspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g, '-')));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (wasTooLong) {\n\t\t\t\t\t\t\t\t\twrapper.attr('title', wrapper.textStr);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twrapper.rotation = rotation;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tspanNo++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tif (tempParent) {\n\t\t\t\ttempParent.removeChild(textNode); // attach it to the DOM to read offset width\n\t\t\t}\n\n\t\t\t// Apply the text shadow\n\t\t\tif (textShadow && wrapper.applyTextShadow) {\n\t\t\t\twrapper.applyTextShadow(textShadow);\n\t\t\t}\n\t\t}\n\t},\n\n\t\n\n\t/*\n\tbreakText: function (wrapper, width) {\n\t\tvar bBox = wrapper.getBBox(),\n\t\t\tnode = wrapper.element,\n\t\t\ttextLength = node.textContent.length,\n\t\t\tpos = mathRound(width * textLength / bBox.width), // try this position first, based on average character width\n\t\t\tincrement = 0,\n\t\t\tfinalPos;\n\n\t\tif (bBox.width > width) {\n\t\t\twhile (finalPos === undefined) {\n\t\t\t\ttextLength = node.getSubStringLength(0, pos);\n\n\t\t\t\tif (textLength <= width) {\n\t\t\t\t\tif (increment === -1) {\n\t\t\t\t\t\tfinalPos = pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tincrement = 1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (increment === 1) {\n\t\t\t\t\t\tfinalPos = pos - 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tincrement = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpos += increment;\n\t\t\t}\n\t\t}\n\t\tconsole.log(finalPos, node.getSubStringLength(0, finalPos))\n\t},\n\t*/\n\n\t/** \n\t * Returns white for dark colors and black for bright colors\n\t */\n\tgetContrast: function (color) {\n\t\tcolor = Color(color).rgba;\n\t\treturn color[0] + color[1] + color[2] > 384 ? '#000000' : '#FFFFFF';\n\t},\n\n\t/**\n\t * Create a button with preset states\n\t * @param {String} text\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Function} callback\n\t * @param {Object} normalState\n\t * @param {Object} hoverState\n\t * @param {Object} pressedState\n\t */\n\tbutton: function (text, x, y, callback, normalState, hoverState, pressedState, disabledState, shape) {\n\t\tvar label = this.label(text, x, y, shape, null, null, null, null, 'button'),\n\t\t\tcurState = 0,\n\t\t\tstateOptions,\n\t\t\tstateStyle,\n\t\t\tnormalStyle,\n\t\t\thoverStyle,\n\t\t\tpressedStyle,\n\t\t\tdisabledStyle,\n\t\t\tverticalGradient = { x1: 0, y1: 0, x2: 0, y2: 1 };\n\n\t\t// Normal state - prepare the attributes\n\t\tnormalState = merge({\n\t\t\t'stroke-width': 1,\n\t\t\tstroke: '#CCCCCC',\n\t\t\tfill: {\n\t\t\t\tlinearGradient: verticalGradient,\n\t\t\t\tstops: [\n\t\t\t\t\t[0, '#FEFEFE'],\n\t\t\t\t\t[1, '#F6F6F6']\n\t\t\t\t]\n\t\t\t},\n\t\t\tr: 2,\n\t\t\tpadding: 5,\n\t\t\tstyle: {\n\t\t\t\tcolor: 'black'\n\t\t\t}\n\t\t}, normalState);\n\t\tnormalStyle = normalState.style;\n\t\tdelete normalState.style;\n\n\t\t// Hover state\n\t\thoverState = merge(normalState, {\n\t\t\tstroke: '#68A',\n\t\t\tfill: {\n\t\t\t\tlinearGradient: verticalGradient,\n\t\t\t\tstops: [\n\t\t\t\t\t[0, '#FFF'],\n\t\t\t\t\t[1, '#ACF']\n\t\t\t\t]\n\t\t\t}\n\t\t}, hoverState);\n\t\thoverStyle = hoverState.style;\n\t\tdelete hoverState.style;\n\n\t\t// Pressed state\n\t\tpressedState = merge(normalState, {\n\t\t\tstroke: '#68A',\n\t\t\tfill: {\n\t\t\t\tlinearGradient: verticalGradient,\n\t\t\t\tstops: [\n\t\t\t\t\t[0, '#9BD'],\n\t\t\t\t\t[1, '#CDF']\n\t\t\t\t]\n\t\t\t}\n\t\t}, pressedState);\n\t\tpressedStyle = pressedState.style;\n\t\tdelete pressedState.style;\n\n\t\t// Disabled state\n\t\tdisabledState = merge(normalState, {\n\t\t\tstyle: {\n\t\t\t\tcolor: '#CCC'\n\t\t\t}\n\t\t}, disabledState);\n\t\tdisabledStyle = disabledState.style;\n\t\tdelete disabledState.style;\n\n\t\t// Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).\n\t\taddEvent(label.element, isIE ? 'mouseover' : 'mouseenter', function () {\n\t\t\tif (curState !== 3) {\n\t\t\t\tlabel.attr(hoverState)\n\t\t\t\t\t.css(hoverStyle);\n\t\t\t}\n\t\t});\n\t\taddEvent(label.element, isIE ? 'mouseout' : 'mouseleave', function () {\n\t\t\tif (curState !== 3) {\n\t\t\t\tstateOptions = [normalState, hoverState, pressedState][curState];\n\t\t\t\tstateStyle = [normalStyle, hoverStyle, pressedStyle][curState];\n\t\t\t\tlabel.attr(stateOptions)\n\t\t\t\t\t.css(stateStyle);\n\t\t\t}\n\t\t});\n\n\t\tlabel.setState = function (state) {\n\t\t\tlabel.state = curState = state;\n\t\t\tif (!state) {\n\t\t\t\tlabel.attr(normalState)\n\t\t\t\t\t.css(normalStyle);\n\t\t\t} else if (state === 2) {\n\t\t\t\tlabel.attr(pressedState)\n\t\t\t\t\t.css(pressedStyle);\n\t\t\t} else if (state === 3) {\n\t\t\t\tlabel.attr(disabledState)\n\t\t\t\t\t.css(disabledStyle);\n\t\t\t}\n\t\t};\n\n\t\treturn label\n\t\t\t.on('click', function () {\n\t\t\t\tif (curState !== 3) {\n\t\t\t\t\tcallback.call(label);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.attr(normalState)\n\t\t\t.css(extend({ cursor: 'default' }, normalStyle));\n\t},\n\n\t/**\n\t * Make a straight line crisper by not spilling out to neighbour pixels\n\t * @param {Array} points\n\t * @param {Number} width\n\t */\n\tcrispLine: function (points, width) {\n\t\t// points format: [M, 0, 0, L, 100, 0]\n\t\t// normalize to a crisp line\n\t\tif (points[1] === points[4]) {\n\t\t\t// Substract due to #1129. Now bottom and left axis gridlines behave the same.\n\t\t\tpoints[1] = points[4] = mathRound(points[1]) - (width % 2 / 2);\n\t\t}\n\t\tif (points[2] === points[5]) {\n\t\t\tpoints[2] = points[5] = mathRound(points[2]) + (width % 2 / 2);\n\t\t}\n\t\treturn points;\n\t},\n\n\n\t/**\n\t * Draw a path\n\t * @param {Array} path An SVG path in array form\n\t */\n\tpath: function (path) {\n\t\tvar attr = {\n\t\t\tfill: NONE\n\t\t};\n\t\tif (isArray(path)) {\n\t\t\tattr.d = path;\n\t\t} else if (isObject(path)) { // attributes\n\t\t\textend(attr, path);\n\t\t}\n\t\treturn this.createElement('path').attr(attr);\n\t},\n\n\t/**\n\t * Draw and return an SVG circle\n\t * @param {Number} x The x position\n\t * @param {Number} y The y position\n\t * @param {Number} r The radius\n\t */\n\tcircle: function (x, y, r) {\n\t\tvar attr = isObject(x) ?\n\t\t\tx :\n\t\t\t{\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\tr: r\n\t\t\t},\n\t\t\twrapper = this.createElement('circle');\n\n\t\twrapper.xSetter = function (value) {\n\t\t\tthis.element.setAttribute('cx', value);\n\t\t};\n\t\twrapper.ySetter = function (value) {\n\t\t\tthis.element.setAttribute('cy', value);\n\t\t};\n\t\treturn wrapper.attr(attr);\n\t},\n\n\t/**\n\t * Draw and return an arc\n\t * @param {Number} x X position\n\t * @param {Number} y Y position\n\t * @param {Number} r Radius\n\t * @param {Number} innerR Inner radius like used in donut charts\n\t * @param {Number} start Starting angle\n\t * @param {Number} end Ending angle\n\t */\n\tarc: function (x, y, r, innerR, start, end) {\n\t\tvar arc;\n\n\t\tif (isObject(x)) {\n\t\t\ty = x.y;\n\t\t\tr = x.r;\n\t\t\tinnerR = x.innerR;\n\t\t\tstart = x.start;\n\t\t\tend = x.end;\n\t\t\tx = x.x;\n\t\t}\n\n\t\t// Arcs are defined as symbols for the ability to set\n\t\t// attributes in attr and animate\n\t\tarc = this.symbol('arc', x || 0, y || 0, r || 0, r || 0, {\n\t\t\tinnerR: innerR || 0,\n\t\t\tstart: start || 0,\n\t\t\tend: end || 0\n\t\t});\n\t\tarc.r = r; // #959\n\t\treturn arc;\n\t},\n\n\t/**\n\t * Draw and return a rectangle\n\t * @param {Number} x Left position\n\t * @param {Number} y Top position\n\t * @param {Number} width\n\t * @param {Number} height\n\t * @param {Number} r Border corner radius\n\t * @param {Number} strokeWidth A stroke width can be supplied to allow crisp drawing\n\t */\n\trect: function (x, y, width, height, r, strokeWidth) {\n\n\t\tr = isObject(x) ? x.r : r;\n\n\t\tvar wrapper = this.createElement('rect'),\n\t\t\tattribs = isObject(x) ? x : x === UNDEFINED ? {} : {\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\twidth: mathMax(width, 0),\n\t\t\t\theight: mathMax(height, 0)\n\t\t\t};\n\n\t\tif (strokeWidth !== UNDEFINED) {\n\t\t\tattribs.strokeWidth = strokeWidth;\n\t\t\tattribs = wrapper.crisp(attribs);\n\t\t}\n\n\t\tif (r) {\n\t\t\tattribs.r = r;\n\t\t}\n\n\t\twrapper.rSetter = function (value) {\n\t\t\tattr(this.element, {\n\t\t\t\trx: value,\n\t\t\t\try: value\n\t\t\t});\n\t\t};\n\t\t\n\t\treturn wrapper.attr(attribs);\n\t},\n\n\t/**\n\t * Resize the box and re-align all aligned elements\n\t * @param {Object} width\n\t * @param {Object} height\n\t * @param {Boolean} animate\n\t *\n\t */\n\tsetSize: function (width, height, animate) {\n\t\tvar renderer = this,\n\t\t\talignedObjects = renderer.alignedObjects,\n\t\t\ti = alignedObjects.length;\n\n\t\trenderer.width = width;\n\t\trenderer.height = height;\n\n\t\trenderer.boxWrapper[pick(animate, true) ? 'animate' : 'attr']({\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t});\n\n\t\twhile (i--) {\n\t\t\talignedObjects[i].align();\n\t\t}\n\t},\n\n\t/**\n\t * Create a group\n\t * @param {String} name The group will be given a class name of 'highcharts-{name}'.\n\t *\t This can be used for styling and scripting.\n\t */\n\tg: function (name) {\n\t\tvar elem = this.createElement('g');\n\t\treturn defined(name) ? elem.attr({ 'class': PREFIX + name }) : elem;\n\t},\n\n\t/**\n\t * Display an image\n\t * @param {String} src\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} width\n\t * @param {Number} height\n\t */\n\timage: function (src, x, y, width, height) {\n\t\tvar attribs = {\n\t\t\t\tpreserveAspectRatio: NONE\n\t\t\t},\n\t\t\telemWrapper;\n\n\t\t// optional properties\n\t\tif (arguments.length > 1) {\n\t\t\textend(attribs, {\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t});\n\t\t}\n\n\t\telemWrapper = this.createElement('image').attr(attribs);\n\n\t\t// set the href in the xlink namespace\n\t\tif (elemWrapper.element.setAttributeNS) {\n\t\t\telemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink',\n\t\t\t\t'href', src);\n\t\t} else {\n\t\t\t// could be exporting in IE\n\t\t\t// using href throws \"not supported\" in ie7 and under, requries regex shim to fix later\n\t\t\telemWrapper.element.setAttribute('hc-svg-href', src);\n\t\t}\n\t\treturn elemWrapper;\n\t},\n\n\t/**\n\t * Draw a symbol out of pre-defined shape paths from the namespace 'symbol' object.\n\t *\n\t * @param {Object} symbol\n\t * @param {Object} x\n\t * @param {Object} y\n\t * @param {Object} radius\n\t * @param {Object} options\n\t */\n\tsymbol: function (symbol, x, y, width, height, options) {\n\n\t\tvar obj,\n\n\t\t\t// get the symbol definition function\n\t\t\tsymbolFn = this.symbols[symbol],\n\n\t\t\t// check if there's a path defined for this symbol\n\t\t\tpath = symbolFn && symbolFn(\n\t\t\t\tmathRound(x),\n\t\t\t\tmathRound(y),\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\toptions\n\t\t\t),\n\n\t\t\timageElement,\n\t\t\timageRegex = /^url\\((.*?)\\)$/,\n\t\t\timageSrc,\n\t\t\timageSize,\n\t\t\tcenterImage;\n\n\t\tif (path) {\n\n\t\t\tobj = this.path(path);\n\t\t\t// expando properties for use in animate and attr\n\t\t\textend(obj, {\n\t\t\t\tsymbolName: symbol,\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t});\n\t\t\tif (options) {\n\t\t\t\textend(obj, options);\n\t\t\t}\n\n\n\t\t// image symbols\n\t\t} else if (imageRegex.test(symbol)) {\n\n\t\t\t// On image load, set the size and position\n\t\t\tcenterImage = function (img, size) {\n\t\t\t\tif (img.element) { // it may be destroyed in the meantime (#1390)\n\t\t\t\t\timg.attr({\n\t\t\t\t\t\twidth: size[0],\n\t\t\t\t\t\theight: size[1]\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!img.alignByTranslate) { // #185\n\t\t\t\t\t\timg.translate(\n\t\t\t\t\t\t\tmathRound((width - size[0]) / 2), // #1378\n\t\t\t\t\t\t\tmathRound((height - size[1]) / 2)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\timageSrc = symbol.match(imageRegex)[1];\n\t\t\timageSize = symbolSizes[imageSrc] || (options && options.width && options.height && [options.width, options.height]);\n\n\t\t\t// Ireate the image synchronously, add attribs async\n\t\t\tobj = this.image(imageSrc)\n\t\t\t\t.attr({\n\t\t\t\t\tx: x,\n\t\t\t\t\ty: y\n\t\t\t\t});\n\t\t\tobj.isImg = true;\n\n\t\t\tif (imageSize) {\n\t\t\t\tcenterImage(obj, imageSize);\n\t\t\t} else {\n\t\t\t\t// Initialize image to be 0 size so export will still function if there's no cached sizes.\n\t\t\t\tobj.attr({ width: 0, height: 0 });\n\n\t\t\t\t// Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,\n\t\t\t\t// the created element must be assigned to a variable in order to load (#292).\n\t\t\t\timageElement = createElement('img', {\n\t\t\t\t\tonload: function () {\n\t\t\t\t\t\tcenterImage(obj, symbolSizes[imageSrc] = [this.width, this.height]);\n\t\t\t\t\t},\n\t\t\t\t\tsrc: imageSrc\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t/**\n\t * An extendable collection of functions for defining symbol paths.\n\t */\n\tsymbols: {\n\t\t'circle': function (x, y, w, h) {\n\t\t\tvar cpw = 0.166 * w;\n\t\t\treturn [\n\t\t\t\tM, x + w / 2, y,\n\t\t\t\t'C', x + w + cpw, y, x + w + cpw, y + h, x + w / 2, y + h,\n\t\t\t\t'C', x - cpw, y + h, x - cpw, y, x + w / 2, y,\n\t\t\t\t'Z'\n\t\t\t];\n\t\t},\n\n\t\t'square': function (x, y, w, h) {\n\t\t\treturn [\n\t\t\t\tM, x, y,\n\t\t\t\tL, x + w, y,\n\t\t\t\tx + w, y + h,\n\t\t\t\tx, y + h,\n\t\t\t\t'Z'\n\t\t\t];\n\t\t},\n\n\t\t'triangle': function (x, y, w, h) {\n\t\t\treturn [\n\t\t\t\tM, x + w / 2, y,\n\t\t\t\tL, x + w, y + h,\n\t\t\t\tx, y + h,\n\t\t\t\t'Z'\n\t\t\t];\n\t\t},\n\n\t\t'triangle-down': function (x, y, w, h) {\n\t\t\treturn [\n\t\t\t\tM, x, y,\n\t\t\t\tL, x + w, y,\n\t\t\t\tx + w / 2, y + h,\n\t\t\t\t'Z'\n\t\t\t];\n\t\t},\n\t\t'diamond': function (x, y, w, h) {\n\t\t\treturn [\n\t\t\t\tM, x + w / 2, y,\n\t\t\t\tL, x + w, y + h / 2,\n\t\t\t\tx + w / 2, y + h,\n\t\t\t\tx, y + h / 2,\n\t\t\t\t'Z'\n\t\t\t];\n\t\t},\n\t\t'arc': function (x, y, w, h, options) {\n\t\t\tvar start = options.start,\n\t\t\t\tradius = options.r || w || h,\n\t\t\t\tend = options.end - 0.001, // to prevent cos and sin of start and end from becoming equal on 360 arcs (related: #1561)\n\t\t\t\tinnerRadius = options.innerR,\n\t\t\t\topen = options.open,\n\t\t\t\tcosStart = mathCos(start),\n\t\t\t\tsinStart = mathSin(start),\n\t\t\t\tcosEnd = mathCos(end),\n\t\t\t\tsinEnd = mathSin(end),\n\t\t\t\tlongArc = options.end - start < mathPI ? 0 : 1;\n\n\t\t\treturn [\n\t\t\t\tM,\n\t\t\t\tx + radius * cosStart,\n\t\t\t\ty + radius * sinStart,\n\t\t\t\t'A', // arcTo\n\t\t\t\tradius, // x radius\n\t\t\t\tradius, // y radius\n\t\t\t\t0, // slanting\n\t\t\t\tlongArc, // long or short arc\n\t\t\t\t1, // clockwise\n\t\t\t\tx + radius * cosEnd,\n\t\t\t\ty + radius * sinEnd,\n\t\t\t\topen ? M : L,\n\t\t\t\tx + innerRadius * cosEnd,\n\t\t\t\ty + innerRadius * sinEnd,\n\t\t\t\t'A', // arcTo\n\t\t\t\tinnerRadius, // x radius\n\t\t\t\tinnerRadius, // y radius\n\t\t\t\t0, // slanting\n\t\t\t\tlongArc, // long or short arc\n\t\t\t\t0, // clockwise\n\t\t\t\tx + innerRadius * cosStart,\n\t\t\t\ty + innerRadius * sinStart,\n\n\t\t\t\topen ? '' : 'Z' // close\n\t\t\t];\n\t\t},\n\n\t\t/**\n\t\t * Callout shape used for default tooltips, also used for rounded rectangles in VML\n\t\t */\n\t\tcallout: function (x, y, w, h, options) {\n\t\t\tvar arrowLength = 6,\n\t\t\t\thalfDistance = 6,\n\t\t\t\tr = mathMin((options && options.r) || 0, w, h),\n\t\t\t\tsafeDistance = r + halfDistance,\n\t\t\t\tanchorX = options && options.anchorX,\n\t\t\t\tanchorY = options && options.anchorY,\n\t\t\t\tpath;\n\n\t\t\tpath = [\n\t\t\t\t'M', x + r, y, \n\t\t\t\t'L', x + w - r, y, // top side\n\t\t\t\t'C', x + w, y, x + w, y, x + w, y + r, // top-right corner\n\t\t\t\t'L', x + w, y + h - r, // right side\n\t\t\t\t'C', x + w, y + h, x + w, y + h, x + w - r, y + h, // bottom-right corner\n\t\t\t\t'L', x + r, y + h, // bottom side\n\t\t\t\t'C', x, y + h, x, y + h, x, y + h - r, // bottom-left corner\n\t\t\t\t'L', x, y + r, // left side\n\t\t\t\t'C', x, y, x, y, x + r, y // top-right corner\n\t\t\t];\n\t\t\t\n\t\t\tif (anchorX && anchorX > w && anchorY > y + safeDistance && anchorY < y + h - safeDistance) { // replace right side\n\t\t\t\tpath.splice(13, 3,\n\t\t\t\t\t'L', x + w, anchorY - halfDistance, \n\t\t\t\t\tx + w + arrowLength, anchorY,\n\t\t\t\t\tx + w, anchorY + halfDistance,\n\t\t\t\t\tx + w, y + h - r\n\t\t\t\t);\n\t\t\t} else if (anchorX && anchorX < 0 && anchorY > y + safeDistance && anchorY < y + h - safeDistance) { // replace left side\n\t\t\t\tpath.splice(33, 3, \n\t\t\t\t\t'L', x, anchorY + halfDistance, \n\t\t\t\t\tx - arrowLength, anchorY,\n\t\t\t\t\tx, anchorY - halfDistance,\n\t\t\t\t\tx, y + r\n\t\t\t\t);\n\t\t\t} else if (anchorY && anchorY > h && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace bottom\n\t\t\t\tpath.splice(23, 3,\n\t\t\t\t\t'L', anchorX + halfDistance, y + h,\n\t\t\t\t\tanchorX, y + h + arrowLength,\n\t\t\t\t\tanchorX - halfDistance, y + h,\n\t\t\t\t\tx + r, y + h\n\t\t\t\t);\n\t\t\t} else if (anchorY && anchorY < 0 && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace top\n\t\t\t\tpath.splice(3, 3,\n\t\t\t\t\t'L', anchorX - halfDistance, y,\n\t\t\t\t\tanchorX, y - arrowLength,\n\t\t\t\t\tanchorX + halfDistance, y,\n\t\t\t\t\tw - r, y\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn path;\n\t\t}\n\t},\n\n\t/**\n\t * Define a clipping rectangle\n\t * @param {String} id\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} width\n\t * @param {Number} height\n\t */\n\tclipRect: function (x, y, width, height) {\n\t\tvar wrapper,\n\t\t\tid = PREFIX + idCounter++,\n\n\t\t\tclipPath = this.createElement('clipPath').attr({\n\t\t\t\tid: id\n\t\t\t}).add(this.defs);\n\n\t\twrapper = this.rect(x, y, width, height, 0).add(clipPath);\n\t\twrapper.id = id;\n\t\twrapper.clipPath = clipPath;\n\t\twrapper.count = 0;\n\n\t\treturn wrapper;\n\t},\n\n\n\t\n\n\n\t/**\n\t * Add text to the SVG object\n\t * @param {String} str\n\t * @param {Number} x Left position\n\t * @param {Number} y Top position\n\t * @param {Boolean} useHTML Use HTML to render the text\n\t */\n\ttext: function (str, x, y, useHTML) {\n\n\t\t// declare variables\n\t\tvar renderer = this,\n\t\t\tfakeSVG = useCanVG || (!hasSVG && renderer.forExport),\n\t\t\twrapper,\n\t\t\tattr = {};\n\n\t\tif (useHTML && !renderer.forExport) {\n\t\t\treturn renderer.html(str, x, y);\n\t\t}\n\n\t\tattr.x = Math.round(x || 0); // X is always needed for line-wrap logic\n\t\tif (y) {\n\t\t\tattr.y = Math.round(y);\n\t\t}\n\t\tif (str || str === 0) {\n\t\t\tattr.text = str;\n\t\t}\n\n\t\twrapper = renderer.createElement('text')\n\t\t\t.attr(attr);\n\n\t\t// Prevent wrapping from creating false offsetWidths in export in legacy IE (#1079, #1063)\n\t\tif (fakeSVG) {\n\t\t\twrapper.css({\n\t\t\t\tposition: ABSOLUTE\n\t\t\t});\n\t\t}\n\n\t\tif (!useHTML) {\n\t\t\twrapper.xSetter = function (value, key, element) {\n\t\t\t\tvar tspans = element.getElementsByTagName('tspan'),\n\t\t\t\t\ttspan,\n\t\t\t\t\tparentVal = element.getAttribute(key),\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 0; i < tspans.length; i++) {\n\t\t\t\t\ttspan = tspans[i];\n\t\t\t\t\t// If the x values are equal, the tspan represents a linebreak\n\t\t\t\t\tif (tspan.getAttribute(key) === parentVal) {\n\t\t\t\t\t\ttspan.setAttribute(key, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telement.setAttribute(key, value);\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn wrapper;\n\t},\n\n\t/**\n\t * Utility to return the baseline offset and total line height from the font size\n\t */\n\tfontMetrics: function (fontSize, elem) {\n\t\tvar lineHeight,\n\t\t\tbaseline,\n\t\t\tstyle;\n\n\t\tfontSize = fontSize || this.style.fontSize;\n\t\tif (elem && win.getComputedStyle) {\n\t\t\telem = elem.element || elem; // SVGElement\n\t\t\tstyle = win.getComputedStyle(elem, \"\");\n\t\t\tfontSize = style && style.fontSize; // #4309, the style doesn't exist inside a hidden iframe in Firefox\n\t\t}\n\t\tfontSize = /px/.test(fontSize) ? pInt(fontSize) : /em/.test(fontSize) ? parseFloat(fontSize) * 12 : 12;\n\n\t\t// Empirical values found by comparing font size and bounding box height.\n\t\t// Applies to the default font family. http://jsfiddle.net/highcharts/7xvn7/\n\t\tlineHeight = fontSize < 24 ? fontSize + 3 : mathRound(fontSize * 1.2);\n\t\tbaseline = mathRound(lineHeight * 0.8);\n\n\t\treturn {\n\t\t\th: lineHeight,\n\t\t\tb: baseline,\n\t\t\tf: fontSize\n\t\t};\n\t},\n\n\t/**\n\t * Correct X and Y positioning of a label for rotation (#1764)\n\t */\n\trotCorr: function (baseline, rotation, alterY) {\n\t\tvar y = baseline;\n\t\tif (rotation && alterY) {\n\t\t\ty = mathMax(y * mathCos(rotation * deg2rad), 4);\n\t\t}\n\t\treturn {\n\t\t\tx: (-baseline / 3) * mathSin(rotation * deg2rad),\n\t\t\ty: y\n\t\t};\n\t},\n\n\t/**\n\t * Add a label, a text item that can hold a colored or gradient background\n\t * as well as a border and shadow.\n\t * @param {string} str\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {String} shape\n\t * @param {Number} anchorX In case the shape has a pointer, like a flag, this is the\n\t *\tcoordinates it should be pinned to\n\t * @param {Number} anchorY\n\t * @param {Boolean} baseline Whether to position the label relative to the text baseline,\n\t *\tlike renderer.text, or to the upper border of the rectangle.\n\t * @param {String} className Class name for the group\n\t */\n\tlabel: function (str, x, y, shape, anchorX, anchorY, useHTML, baseline, className) {\n\n\t\tvar renderer = this,\n\t\t\twrapper = renderer.g(className),\n\t\t\ttext = renderer.text('', 0, 0, useHTML)\n\t\t\t\t.attr({\n\t\t\t\t\tzIndex: 1\n\t\t\t\t}),\n\t\t\t\t//.add(wrapper),\n\t\t\tbox,\n\t\t\tbBox,\n\t\t\talignFactor = 0,\n\t\t\tpadding = 3,\n\t\t\tpaddingLeft = 0,\n\t\t\twidth,\n\t\t\theight,\n\t\t\twrapperX,\n\t\t\twrapperY,\n\t\t\tcrispAdjust = 0,\n\t\t\tdeferredAttr = {},\n\t\t\tbaselineOffset,\n\t\t\tneedsBox;\n\n\t\t/**\n\t\t * This function runs after the label is added to the DOM (when the bounding box is\n\t\t * available), and after the text of the label is updated to detect the new bounding\n\t\t * box and reflect it in the border box.\n\t\t */\n\t\tfunction updateBoxSize() {\n\t\t\tvar boxX,\n\t\t\t\tboxY,\n\t\t\t\tstyle = text.element.style;\n\n\t\t\tbBox = (width === undefined || height === undefined || wrapper.styles.textAlign) && defined(text.textStr) && \n\t\t\t\ttext.getBBox(); //#3295 && 3514 box failure when string equals 0\n\t\t\twrapper.width = (width || bBox.width || 0) + 2 * padding + paddingLeft;\n\t\t\twrapper.height = (height || bBox.height || 0) + 2 * padding;\n\n\t\t\t// update the label-scoped y offset\n\t\t\tbaselineOffset = padding + renderer.fontMetrics(style && style.fontSize, text).b;\n\n\t\t\t\n\t\t\tif (needsBox) {\n\n\t\t\t\t// create the border box if it is not already present\n\t\t\t\tif (!box) {\n\t\t\t\t\tboxX = mathRound(-alignFactor * padding) + crispAdjust;\n\t\t\t\t\tboxY = (baseline ? -baselineOffset : 0) + crispAdjust;\n\n\t\t\t\t\twrapper.box = box = shape ?\n\t\t\t\t\t\trenderer.symbol(shape, boxX, boxY, wrapper.width, wrapper.height, deferredAttr) :\n\t\t\t\t\t\trenderer.rect(boxX, boxY, wrapper.width, wrapper.height, 0, deferredAttr[STROKE_WIDTH]);\n\t\t\t\t\tbox.attr('fill', NONE).add(wrapper);\n\t\t\t\t}\n\n\t\t\t\t// apply the box attributes\n\t\t\t\tif (!box.isImg) { // #1630\n\t\t\t\t\tbox.attr(extend({\n\t\t\t\t\t\twidth: mathRound(wrapper.width),\n\t\t\t\t\t\theight: mathRound(wrapper.height)\n\t\t\t\t\t}, deferredAttr));\n\t\t\t\t}\n\t\t\t\tdeferredAttr = null;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * This function runs after setting text or padding, but only if padding is changed\n\t\t */\n\t\tfunction updateTextPadding() {\n\t\t\tvar styles = wrapper.styles,\n\t\t\t\ttextAlign = styles && styles.textAlign,\n\t\t\t\tx = paddingLeft + padding * (1 - alignFactor),\n\t\t\t\ty;\n\n\t\t\t// determin y based on the baseline\n\t\t\ty = baseline ? 0 : baselineOffset;\n\n\t\t\t// compensate for alignment\n\t\t\tif (defined(width) && bBox && (textAlign === 'center' || textAlign === 'right')) {\n\t\t\t\tx += { center: 0.5, right: 1 }[textAlign] * (width - bBox.width);\n\t\t\t}\n\n\t\t\t// update if anything changed\n\t\t\tif (x !== text.x || y !== text.y) {\n\t\t\t\ttext.attr('x', x);\n\t\t\t\tif (y !== UNDEFINED) {\n\t\t\t\t\ttext.attr('y', y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// record current values\n\t\t\ttext.x = x;\n\t\t\ttext.y = y;\n\t\t}\n\n\t\t/**\n\t\t * Set a box attribute, or defer it if the box is not yet created\n\t\t * @param {Object} key\n\t\t * @param {Object} value\n\t\t */\n\t\tfunction boxAttr(key, value) {\n\t\t\tif (box) {\n\t\t\t\tbox.attr(key, value);\n\t\t\t} else {\n\t\t\t\tdeferredAttr[key] = value;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * After the text element is added, get the desired size of the border box\n\t\t * and add it before the text in the DOM.\n\t\t */\n\t\twrapper.onAdd = function () {\n\t\t\ttext.add(wrapper);\n\t\t\twrapper.attr({\n\t\t\t\ttext: (str || str === 0) ? str : '', // alignment is available now // #3295: 0 not rendered if given as a value\n\t\t\t\tx: x,\n\t\t\t\ty: y\n\t\t\t});\n\n\t\t\tif (box && defined(anchorX)) {\n\t\t\t\twrapper.attr({\n\t\t\t\t\tanchorX: anchorX,\n\t\t\t\t\tanchorY: anchorY\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\t/*\n\t\t * Add specific attribute setters.\n\t\t */\n\n\t\t// only change local variables\n\t\twrapper.widthSetter = function (value) {\n\t\t\twidth = value;\n\t\t};\n\t\twrapper.heightSetter = function (value) {\n\t\t\theight = value;\n\t\t};\n\t\twrapper.paddingSetter =  function (value) {\n\t\t\tif (defined(value) && value !== padding) {\n\t\t\t\tpadding = wrapper.padding = value;\n\t\t\t\tupdateTextPadding();\n\t\t\t}\n\t\t};\n\t\twrapper.paddingLeftSetter =  function (value) {\n\t\t\tif (defined(value) && value !== paddingLeft) {\n\t\t\t\tpaddingLeft = value;\n\t\t\t\tupdateTextPadding();\n\t\t\t}\n\t\t};\n\n\n\t\t// change local variable and prevent setting attribute on the group\n\t\twrapper.alignSetter = function (value) {\n\t\t\talignFactor = { left: 0, center: 0.5, right: 1 }[value];\n\t\t};\n\n\t\t// apply these to the box and the text alike\n\t\twrapper.textSetter = function (value) {\n\t\t\tif (value !== UNDEFINED) {\n\t\t\t\ttext.textSetter(value);\n\t\t\t}\n\t\t\tupdateBoxSize();\n\t\t\tupdateTextPadding();\n\t\t};\n\n\t\t// apply these to the box but not to the text\n\t\twrapper['stroke-widthSetter'] = function (value, key) {\n\t\t\tif (value) {\n\t\t\t\tneedsBox = true;\n\t\t\t}\n\t\t\tcrispAdjust = value % 2 / 2;\n\t\t\tboxAttr(key, value);\n\t\t};\n\t\twrapper.strokeSetter = wrapper.fillSetter = wrapper.rSetter = function (value, key) {\n\t\t\tif (key === 'fill' && value) {\n\t\t\t\tneedsBox = true;\n\t\t\t}\n\t\t\tboxAttr(key, value);\n\t\t};\n\t\twrapper.anchorXSetter = function (value, key) {\n\t\t\tanchorX = value;\n\t\t\tboxAttr(key, mathRound(value) - crispAdjust - wrapperX);\n\t\t};\n\t\twrapper.anchorYSetter = function (value, key) {\n\t\t\tanchorY = value;\n\t\t\tboxAttr(key, value - wrapperY);\n\t\t};\n\n\t\t// rename attributes\n\t\twrapper.xSetter = function (value) {\n\t\t\twrapper.x = value; // for animation getter\n\t\t\tif (alignFactor) {\n\t\t\t\tvalue -= alignFactor * ((width || bBox.width) + padding);\n\t\t\t}\n\t\t\twrapperX = mathRound(value);\n\t\t\twrapper.attr('translateX', wrapperX);\n\t\t};\n\t\twrapper.ySetter = function (value) {\n\t\t\twrapperY = wrapper.y = mathRound(value);\n\t\t\twrapper.attr('translateY', wrapperY);\n\t\t};\n\n\t\t// Redirect certain methods to either the box or the text\n\t\tvar baseCss = wrapper.css;\n\t\treturn extend(wrapper, {\n\t\t\t/**\n\t\t\t * Pick up some properties and apply them to the text instead of the wrapper\n\t\t\t */\n\t\t\tcss: function (styles) {\n\t\t\t\tif (styles) {\n\t\t\t\t\tvar textStyles = {};\n\t\t\t\t\tstyles = merge(styles); // create a copy to avoid altering the original object (#537)\n\t\t\t\t\teach(wrapper.textProps, function (prop) {\n\t\t\t\t\t\tif (styles[prop] !== UNDEFINED) {\n\t\t\t\t\t\t\ttextStyles[prop] = styles[prop];\n\t\t\t\t\t\t\tdelete styles[prop];\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\ttext.css(textStyles);\n\t\t\t\t}\n\t\t\t\treturn baseCss.call(wrapper, styles);\n\t\t\t},\n\t\t\t/**\n\t\t\t * Return the bounding box of the box, not the group\n\t\t\t */\n\t\t\tgetBBox: function () {\n\t\t\t\treturn {\n\t\t\t\t\twidth: bBox.width + 2 * padding,\n\t\t\t\t\theight: bBox.height + 2 * padding,\n\t\t\t\t\tx: bBox.x - padding,\n\t\t\t\t\ty: bBox.y - padding\n\t\t\t\t};\n\t\t\t},\n\t\t\t/**\n\t\t\t * Apply the shadow to the box\n\t\t\t */\n\t\t\tshadow: function (b) {\n\t\t\t\tif (box) {\n\t\t\t\t\tbox.shadow(b);\n\t\t\t\t}\n\t\t\t\treturn wrapper;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Destroy and release memory.\n\t\t\t */\n\t\t\tdestroy: function () {\n\n\t\t\t\t// Added by button implementation\n\t\t\t\tremoveEvent(wrapper.element, 'mouseenter');\n\t\t\t\tremoveEvent(wrapper.element, 'mouseleave');\n\n\t\t\t\tif (text) {\n\t\t\t\t\ttext = text.destroy();\n\t\t\t\t}\n\t\t\t\tif (box) {\n\t\t\t\t\tbox = box.destroy();\n\t\t\t\t}\n\t\t\t\t// Call base implementation to destroy the rest\n\t\t\t\tSVGElement.prototype.destroy.call(wrapper);\n\n\t\t\t\t// Release local pointers (#1298)\n\t\t\t\twrapper = renderer = updateBoxSize = updateTextPadding = boxAttr = null;\n\t\t\t}\n\t\t});\n\t}\n}; // end SVGRenderer\n\n\n// general renderer\nRenderer = SVGRenderer;\n// extend SvgElement for useHTML option\nextend(SVGElement.prototype, {\n\t/**\n\t * Apply CSS to HTML elements. This is used in text within SVG rendering and\n\t * by the VML renderer\n\t */\n\thtmlCss: function (styles) {\n\t\tvar wrapper = this,\n\t\t\telement = wrapper.element,\n\t\t\ttextWidth = styles && element.tagName === 'SPAN' && styles.width;\n\n\t\tif (textWidth) {\n\t\t\tdelete styles.width;\n\t\t\twrapper.textWidth = textWidth;\n\t\t\twrapper.updateTransform();\n\t\t}\n\t\tif (styles && styles.textOverflow === 'ellipsis') {\n\t\t\tstyles.whiteSpace = 'nowrap';\n\t\t\tstyles.overflow = 'hidden';\n\t\t}\n\t\twrapper.styles = extend(wrapper.styles, styles);\n\t\tcss(wrapper.element, styles);\n\n\t\treturn wrapper;\n\t},\n\n\t/**\n\t * VML and useHTML method for calculating the bounding box based on offsets\n\t * @param {Boolean} refresh Whether to force a fresh value from the DOM or to\n\t * use the cached value\n\t *\n\t * @return {Object} A hash containing values for x, y, width and height\n\t */\n\n\thtmlGetBBox: function () {\n\t\tvar wrapper = this,\n\t\t\telement = wrapper.element;\n\n\t\t// faking getBBox in exported SVG in legacy IE\n\t\t// faking getBBox in exported SVG in legacy IE (is this a duplicate of the fix for #1079?)\n\t\tif (element.nodeName === 'text') {\n\t\t\telement.style.position = ABSOLUTE;\n\t\t}\n\n\t\treturn {\n\t\t\tx: element.offsetLeft,\n\t\t\ty: element.offsetTop,\n\t\t\twidth: element.offsetWidth,\n\t\t\theight: element.offsetHeight\n\t\t};\n\t},\n\n\t/**\n\t * VML override private method to update elements based on internal\n\t * properties based on SVG transform\n\t */\n\thtmlUpdateTransform: function () {\n\t\t// aligning non added elements is expensive\n\t\tif (!this.added) {\n\t\t\tthis.alignOnAdd = true;\n\t\t\treturn;\n\t\t}\n\n\t\tvar wrapper = this,\n\t\t\trenderer = wrapper.renderer,\n\t\t\telem = wrapper.element,\n\t\t\ttranslateX = wrapper.translateX || 0,\n\t\t\ttranslateY = wrapper.translateY || 0,\n\t\t\tx = wrapper.x || 0,\n\t\t\ty = wrapper.y || 0,\n\t\t\talign = wrapper.textAlign || 'left',\n\t\t\talignCorrection = { left: 0, center: 0.5, right: 1 }[align],\n\t\t\tshadows = wrapper.shadows,\n\t\t\tstyles = wrapper.styles;\n\n\t\t// apply translate\n\t\tcss(elem, {\n\t\t\tmarginLeft: translateX,\n\t\t\tmarginTop: translateY\n\t\t});\n\t\tif (shadows) { // used in labels/tooltip\n\t\t\teach(shadows, function (shadow) {\n\t\t\t\tcss(shadow, {\n\t\t\t\t\tmarginLeft: translateX + 1,\n\t\t\t\t\tmarginTop: translateY + 1\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// apply inversion\n\t\tif (wrapper.inverted) { // wrapper is a group\n\t\t\teach(elem.childNodes, function (child) {\n\t\t\t\trenderer.invertChild(child, elem);\n\t\t\t});\n\t\t}\n\n\t\tif (elem.tagName === 'SPAN') {\n\n\t\t\tvar width,\n\t\t\t\trotation = wrapper.rotation,\n\t\t\t\tbaseline,\n\t\t\t\ttextWidth = pInt(wrapper.textWidth),\n\t\t\t\tcurrentTextTransform = [rotation, align, elem.innerHTML, wrapper.textWidth].join(',');\n\n\t\t\tif (currentTextTransform !== wrapper.cTT) { // do the calculations and DOM access only if properties changed\n\n\n\t\t\t\tbaseline = renderer.fontMetrics(elem.style.fontSize).b;\n\n\t\t\t\t// Renderer specific handling of span rotation\n\t\t\t\tif (defined(rotation)) {\n\t\t\t\t\twrapper.setSpanRotation(rotation, alignCorrection, baseline);\n\t\t\t\t}\n\n\t\t\t\twidth = pick(wrapper.elemWidth, elem.offsetWidth);\n\n\t\t\t\t// Update textWidth\n\t\t\t\tif (width > textWidth && /[ \\-]/.test(elem.textContent || elem.innerText)) { // #983, #1254\n\t\t\t\t\tcss(elem, {\n\t\t\t\t\t\twidth: textWidth + PX,\n\t\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\t\twhiteSpace: (styles && styles.whiteSpace) || 'normal' // #3331\n\t\t\t\t\t});\n\t\t\t\t\twidth = textWidth;\n\t\t\t\t}\n\n\t\t\t\twrapper.getSpanCorrection(width, baseline, alignCorrection, rotation, align);\n\t\t\t}\n\n\t\t\t// apply position with correction\n\t\t\tcss(elem, {\n\t\t\t\tleft: (x + (wrapper.xCorr || 0)) + PX,\n\t\t\t\ttop: (y + (wrapper.yCorr || 0)) + PX\n\t\t\t});\n\n\t\t\t// force reflow in webkit to apply the left and top on useHTML element (#1249)\n\t\t\tif (isWebKit) {\n\t\t\t\tbaseline = elem.offsetHeight; // assigned to baseline for JSLint purpose\n\t\t\t}\n\n\t\t\t// record current text transform\n\t\t\twrapper.cTT = currentTextTransform;\n\t\t}\n\t},\n\n\t/**\n\t * Set the rotation of an individual HTML span\n\t */\n\tsetSpanRotation: function (rotation, alignCorrection, baseline) {\n\t\tvar rotationStyle = {},\n\t\t\tcssTransformKey = isIE ? '-ms-transform' : isWebKit ? '-webkit-transform' : isFirefox ? 'MozTransform' : isOpera ? '-o-transform' : '';\n\n\t\trotationStyle[cssTransformKey] = rotationStyle.transform = 'rotate(' + rotation + 'deg)';\n\t\trotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] = rotationStyle.transformOrigin = (alignCorrection * 100) + '% ' + baseline + 'px';\n\t\tcss(this.element, rotationStyle);\n\t},\n\n\t/**\n\t * Get the correction in X and Y positioning as the element is rotated.\n\t */\n\tgetSpanCorrection: function (width, baseline, alignCorrection) {\n\t\tthis.xCorr = -width * alignCorrection;\n\t\tthis.yCorr = -baseline;\n\t}\n});\n\n// Extend SvgRenderer for useHTML option.\nextend(SVGRenderer.prototype, {\n\t/**\n\t * Create HTML text node. This is used by the VML renderer as well as the SVG\n\t * renderer through the useHTML option.\n\t *\n\t * @param {String} str\n\t * @param {Number} x\n\t * @param {Number} y\n\t */\n\thtml: function (str, x, y) {\n\t\tvar wrapper = this.createElement('span'),\n\t\t\telement = wrapper.element,\n\t\t\trenderer = wrapper.renderer;\n\n\t\t// Text setter\n\t\twrapper.textSetter = function (value) {\n\t\t\tif (value !== element.innerHTML) {\n\t\t\t\tdelete this.bBox;\n\t\t\t}\n\t\t\telement.innerHTML = this.textStr = value;\n\t\t};\n\n\t\t// Various setters which rely on update transform\n\t\twrapper.xSetter = wrapper.ySetter = wrapper.alignSetter = wrapper.rotationSetter = function (value, key) {\n\t\t\tif (key === 'align') {\n\t\t\t\tkey = 'textAlign'; // Do not overwrite the SVGElement.align method. Same as VML.\n\t\t\t}\n\t\t\twrapper[key] = value;\n\t\t\twrapper.htmlUpdateTransform();\n\t\t};\n\n\t\t// Set the default attributes\n\t\twrapper.attr({\n\t\t\t\ttext: str,\n\t\t\t\tx: mathRound(x),\n\t\t\t\ty: mathRound(y)\n\t\t\t})\n\t\t\t.css({\n\t\t\t\tposition: ABSOLUTE,\n\t\t\t\tfontFamily: this.style.fontFamily,\n\t\t\t\tfontSize: this.style.fontSize\n\t\t\t});\n\n\t\t// Keep the whiteSpace style outside the wrapper.styles collection\n\t\telement.style.whiteSpace = 'nowrap';\n\n\t\t// Use the HTML specific .css method\n\t\twrapper.css = wrapper.htmlCss;\n\n\t\t// This is specific for HTML within SVG\n\t\tif (renderer.isSVG) {\n\t\t\twrapper.add = function (svgGroupWrapper) {\n\n\t\t\t\tvar htmlGroup,\n\t\t\t\t\tcontainer = renderer.box.parentNode,\n\t\t\t\t\tparentGroup,\n\t\t\t\t\tparents = [];\n\n\t\t\t\tthis.parentGroup = svgGroupWrapper;\n\n\t\t\t\t// Create a mock group to hold the HTML elements\n\t\t\t\tif (svgGroupWrapper) {\n\t\t\t\t\thtmlGroup = svgGroupWrapper.div;\n\t\t\t\t\tif (!htmlGroup) {\n\n\t\t\t\t\t\t// Read the parent chain into an array and read from top down\n\t\t\t\t\t\tparentGroup = svgGroupWrapper;\n\t\t\t\t\t\twhile (parentGroup) {\n\n\t\t\t\t\t\t\tparents.push(parentGroup);\n\n\t\t\t\t\t\t\t// Move up to the next parent group\n\t\t\t\t\t\t\tparentGroup = parentGroup.parentGroup;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Ensure dynamically updating position when any parent is translated\n\t\t\t\t\t\teach(parents.reverse(), function (parentGroup) {\n\t\t\t\t\t\t\tvar htmlGroupStyle,\n\t\t\t\t\t\t\t\tcls = attr(parentGroup.element, 'class');\n\n\t\t\t\t\t\t\tif (cls) {\n\t\t\t\t\t\t\t\tcls = { className: cls };\n\t\t\t\t\t\t\t} // else null\n\n\t\t\t\t\t\t\t// Create a HTML div and append it to the parent div to emulate\n\t\t\t\t\t\t\t// the SVG group structure\n\t\t\t\t\t\t\thtmlGroup = parentGroup.div = parentGroup.div || createElement(DIV, cls, {\n\t\t\t\t\t\t\t\tposition: ABSOLUTE,\n\t\t\t\t\t\t\t\tleft: (parentGroup.translateX || 0) + PX,\n\t\t\t\t\t\t\t\ttop: (parentGroup.translateY || 0) + PX\n\t\t\t\t\t\t\t}, htmlGroup || container); // the top group is appended to container\n\n\t\t\t\t\t\t\t// Shortcut\n\t\t\t\t\t\t\thtmlGroupStyle = htmlGroup.style;\n\n\t\t\t\t\t\t\t// Set listeners to update the HTML div's position whenever the SVG group\n\t\t\t\t\t\t\t// position is changed\n\t\t\t\t\t\t\textend(parentGroup, {\n\t\t\t\t\t\t\t\ttranslateXSetter: function (value, key) {\n\t\t\t\t\t\t\t\t\thtmlGroupStyle.left = value + PX;\n\t\t\t\t\t\t\t\t\tparentGroup[key] = value;\n\t\t\t\t\t\t\t\t\tparentGroup.doTransform = true;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ttranslateYSetter: function (value, key) {\n\t\t\t\t\t\t\t\t\thtmlGroupStyle.top = value + PX;\n\t\t\t\t\t\t\t\t\tparentGroup[key] = value;\n\t\t\t\t\t\t\t\t\tparentGroup.doTransform = true;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvisibilitySetter: function (value, key) {\n\t\t\t\t\t\t\t\t\thtmlGroupStyle[key] = value;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thtmlGroup = container;\n\t\t\t\t}\n\n\t\t\t\thtmlGroup.appendChild(element);\n\n\t\t\t\t// Shared with VML:\n\t\t\t\twrapper.added = true;\n\t\t\t\tif (wrapper.alignOnAdd) {\n\t\t\t\t\twrapper.htmlUpdateTransform();\n\t\t\t\t}\n\n\t\t\t\treturn wrapper;\n\t\t\t};\n\t\t}\n\t\treturn wrapper;\n\t}\n});\n\n/* ****************************************************************************\n *                                                                            *\n * START OF INTERNET EXPLORER <= 8 SPECIFIC CODE                              *\n *                                                                            *\n * For applications and websites that don't need IE support, like platform    *\n * targeted mobile apps and web apps, this code can be removed.               *\n *                                                                            *\n *****************************************************************************/\n\n/**\n * @constructor\n */\nvar VMLRenderer, VMLElement;\nif (!hasSVG && !useCanVG) {\n\n/**\n * The VML element wrapper.\n */\nVMLElement = {\n\n\t/**\n\t * Initialize a new VML element wrapper. It builds the markup as a string\n\t * to minimize DOM traffic.\n\t * @param {Object} renderer\n\t * @param {Object} nodeName\n\t */\n\tinit: function (renderer, nodeName) {\n\t\tvar wrapper = this,\n\t\t\tmarkup =  ['<', nodeName, ' filled=\"f\" stroked=\"f\"'],\n\t\t\tstyle = ['position: ', ABSOLUTE, ';'],\n\t\t\tisDiv = nodeName === DIV;\n\n\t\t// divs and shapes need size\n\t\tif (nodeName === 'shape' || isDiv) {\n\t\t\tstyle.push('left:0;top:0;width:1px;height:1px;');\n\t\t}\n\t\tstyle.push('visibility: ', isDiv ? HIDDEN : VISIBLE);\n\n\t\tmarkup.push(' style=\"', style.join(''), '\"/>');\n\n\t\t// create element with default attributes and style\n\t\tif (nodeName) {\n\t\t\tmarkup = isDiv || nodeName === 'span' || nodeName === 'img' ?\n\t\t\t\tmarkup.join('')\n\t\t\t\t: renderer.prepVML(markup);\n\t\t\twrapper.element = createElement(markup);\n\t\t}\n\n\t\twrapper.renderer = renderer;\n\t},\n\n\t/**\n\t * Add the node to the given parent\n\t * @param {Object} parent\n\t */\n\tadd: function (parent) {\n\t\tvar wrapper = this,\n\t\t\trenderer = wrapper.renderer,\n\t\t\telement = wrapper.element,\n\t\t\tbox = renderer.box,\n\t\t\tinverted = parent && parent.inverted,\n\n\t\t\t// get the parent node\n\t\t\tparentNode = parent ?\n\t\t\t\tparent.element || parent :\n\t\t\t\tbox;\n\n\n\t\t// if the parent group is inverted, apply inversion on all children\n\t\tif (inverted) { // only on groups\n\t\t\trenderer.invertChild(element, parentNode);\n\t\t}\n\n\t\t// append it\n\t\tparentNode.appendChild(element);\n\n\t\t// align text after adding to be able to read offset\n\t\twrapper.added = true;\n\t\tif (wrapper.alignOnAdd && !wrapper.deferUpdateTransform) {\n\t\t\twrapper.updateTransform();\n\t\t}\n\n\t\t// fire an event for internal hooks\n\t\tif (wrapper.onAdd) {\n\t\t\twrapper.onAdd();\n\t\t}\n\n\t\treturn wrapper;\n\t},\n\n\t/**\n\t * VML always uses htmlUpdateTransform\n\t */\n\tupdateTransform: SVGElement.prototype.htmlUpdateTransform,\n\n\t/**\n\t * Set the rotation of a span with oldIE's filter\n\t */\n\tsetSpanRotation: function () {\n\t\t// Adjust for alignment and rotation. Rotation of useHTML content is not yet implemented\n\t\t// but it can probably be implemented for Firefox 3.5+ on user request. FF3.5+\n\t\t// has support for CSS3 transform. The getBBox method also needs to be updated\n\t\t// to compensate for the rotation, like it currently does for SVG.\n\t\t// Test case: http://jsfiddle.net/highcharts/Ybt44/\n\n\t\tvar rotation = this.rotation,\n\t\t\tcostheta = mathCos(rotation * deg2rad),\n\t\t\tsintheta = mathSin(rotation * deg2rad);\n\t\t\t\t\t\n\t\tcss(this.element, {\n\t\t\tfilter: rotation ? ['progid:DXImageTransform.Microsoft.Matrix(M11=', costheta,\n\t\t\t\t', M12=', -sintheta, ', M21=', sintheta, ', M22=', costheta,\n\t\t\t\t', sizingMethod=\\'auto expand\\')'].join('') : NONE\n\t\t});\n\t},\n\n\t/**\n\t * Get the positioning correction for the span after rotating. \n\t */\n\tgetSpanCorrection: function (width, baseline, alignCorrection, rotation, align) {\n\n\t\tvar costheta = rotation ? mathCos(rotation * deg2rad) : 1,\n\t\t\tsintheta = rotation ? mathSin(rotation * deg2rad) : 0,\n\t\t\theight = pick(this.elemHeight, this.element.offsetHeight),\n\t\t\tquad,\n\t\t\tnonLeft = align && align !== 'left';\n\n\t\t// correct x and y\n\t\tthis.xCorr = costheta < 0 && -width;\n\t\tthis.yCorr = sintheta < 0 && -height;\n\n\t\t// correct for baseline and corners spilling out after rotation\n\t\tquad = costheta * sintheta < 0;\n\t\tthis.xCorr += sintheta * baseline * (quad ? 1 - alignCorrection : alignCorrection);\n\t\tthis.yCorr -= costheta * baseline * (rotation ? (quad ? alignCorrection : 1 - alignCorrection) : 1);\n\t\t// correct for the length/height of the text\n\t\tif (nonLeft) {\n\t\t\tthis.xCorr -= width * alignCorrection * (costheta < 0 ? -1 : 1);\n\t\t\tif (rotation) {\n\t\t\t\tthis.yCorr -= height * alignCorrection * (sintheta < 0 ? -1 : 1);\n\t\t\t}\n\t\t\tcss(this.element, {\n\t\t\t\ttextAlign: align\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Converts a subset of an SVG path definition to its VML counterpart. Takes an array\n\t * as the parameter and returns a string.\n\t */\n\tpathToVML: function (value) {\n\t\t// convert paths\n\t\tvar i = value.length,\n\t\t\tpath = [];\n\n\t\twhile (i--) {\n\n\t\t\t// Multiply by 10 to allow subpixel precision.\n\t\t\t// Substracting half a pixel seems to make the coordinates\n\t\t\t// align with SVG, but this hasn't been tested thoroughly\n\t\t\tif (isNumber(value[i])) {\n\t\t\t\tpath[i] = mathRound(value[i] * 10) - 5;\n\t\t\t} else if (value[i] === 'Z') { // close the path\n\t\t\t\tpath[i] = 'x';\n\t\t\t} else {\n\t\t\t\tpath[i] = value[i];\n\n\t\t\t\t// When the start X and end X coordinates of an arc are too close,\n\t\t\t\t// they are rounded to the same value above. In this case, substract or \n\t\t\t\t// add 1 from the end X and Y positions. #186, #760, #1371, #1410.\n\t\t\t\tif (value.isArc && (value[i] === 'wa' || value[i] === 'at')) {\n\t\t\t\t\t// Start and end X\n\t\t\t\t\tif (path[i + 5] === path[i + 7]) {\n\t\t\t\t\t\tpath[i + 7] += value[i + 7] > value[i + 5] ? 1 : -1;\n\t\t\t\t\t}\n\t\t\t\t\t// Start and end Y\n\t\t\t\t\tif (path[i + 6] === path[i + 8]) {\n\t\t\t\t\t\tpath[i + 8] += value[i + 8] > value[i + 6] ? 1 : -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t\n\t\t// Loop up again to handle path shortcuts (#2132)\n\t\t/*while (i++ < path.length) {\n\t\t\tif (path[i] === 'H') { // horizontal line to\n\t\t\t\tpath[i] = 'L';\n\t\t\t\tpath.splice(i + 2, 0, path[i - 1]);\n\t\t\t} else if (path[i] === 'V') { // vertical line to\n\t\t\t\tpath[i] = 'L';\n\t\t\t\tpath.splice(i + 1, 0, path[i - 2]);\n\t\t\t}\n\t\t}*/\n\t\treturn path.join(' ') || 'x';\n\t},\n\n\t/**\n\t * Set the element's clipping to a predefined rectangle\n\t *\n\t * @param {String} id The id of the clip rectangle\n\t */\n\tclip: function (clipRect) {\n\t\tvar wrapper = this,\n\t\t\tclipMembers,\n\t\t\tcssRet;\n\n\t\tif (clipRect) {\n\t\t\tclipMembers = clipRect.members;\n\t\t\terase(clipMembers, wrapper); // Ensure unique list of elements (#1258)\n\t\t\tclipMembers.push(wrapper);\n\t\t\twrapper.destroyClip = function () {\n\t\t\t\terase(clipMembers, wrapper);\n\t\t\t};\n\t\t\tcssRet = clipRect.getCSS(wrapper);\n\n\t\t} else {\n\t\t\tif (wrapper.destroyClip) {\n\t\t\t\twrapper.destroyClip();\n\t\t\t}\n\t\t\tcssRet = { clip: docMode8 ? 'inherit' : 'rect(auto)' }; // #1214\n\t\t}\n\n\t\treturn wrapper.css(cssRet);\n\n\t},\n\n\t/**\n\t * Set styles for the element\n\t * @param {Object} styles\n\t */\n\tcss: SVGElement.prototype.htmlCss,\n\n\t/**\n\t * Removes a child either by removeChild or move to garbageBin.\n\t * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.\n\t */\n\tsafeRemoveChild: function (element) {\n\t\t// discardElement will detach the node from its parent before attaching it\n\t\t// to the garbage bin. Therefore it is important that the node is attached and have parent.\n\t\tif (element.parentNode) {\n\t\t\tdiscardElement(element);\n\t\t}\n\t},\n\n\t/**\n\t * Extend element.destroy by removing it from the clip members array\n\t */\n\tdestroy: function () {\n\t\tif (this.destroyClip) {\n\t\t\tthis.destroyClip();\n\t\t}\n\n\t\treturn SVGElement.prototype.destroy.apply(this);\n\t},\n\n\t/**\n\t * Add an event listener. VML override for normalizing event parameters.\n\t * @param {String} eventType\n\t * @param {Function} handler\n\t */\n\ton: function (eventType, handler) {\n\t\t// simplest possible event model for internal use\n\t\tthis.element['on' + eventType] = function () {\n\t\t\tvar evt = win.event;\n\t\t\tevt.target = evt.srcElement;\n\t\t\thandler(evt);\n\t\t};\n\t\treturn this;\n\t},\n\n\t/**\n\t * In stacked columns, cut off the shadows so that they don't overlap\n\t */\n\tcutOffPath: function (path, length) {\n\n\t\tvar len;\n\n\t\tpath = path.split(/[ ,]/);\n\t\tlen = path.length;\n\n\t\tif (len === 9 || len === 11) {\n\t\t\tpath[len - 4] = path[len - 2] = pInt(path[len - 2]) - 10 * length;\n\t\t}\n\t\treturn path.join(' ');\n\t},\n\n\t/**\n\t * Apply a drop shadow by copying elements and giving them different strokes\n\t * @param {Boolean|Object} shadowOptions\n\t */\n\tshadow: function (shadowOptions, group, cutOff) {\n\t\tvar shadows = [],\n\t\t\ti,\n\t\t\telement = this.element,\n\t\t\trenderer = this.renderer,\n\t\t\tshadow,\n\t\t\telemStyle = element.style,\n\t\t\tmarkup,\n\t\t\tpath = element.path,\n\t\t\tstrokeWidth,\n\t\t\tmodifiedPath,\n\t\t\tshadowWidth,\n\t\t\tshadowElementOpacity;\n\n\t\t// some times empty paths are not strings\n\t\tif (path && typeof path.value !== 'string') {\n\t\t\tpath = 'x';\n\t\t}\n\t\tmodifiedPath = path;\n\n\t\tif (shadowOptions) {\n\t\t\tshadowWidth = pick(shadowOptions.width, 3);\n\t\t\tshadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;\n\t\t\tfor (i = 1; i <= 3; i++) {\n\n\t\t\t\tstrokeWidth = (shadowWidth * 2) + 1 - (2 * i);\n\n\t\t\t\t// Cut off shadows for stacked column items\n\t\t\t\tif (cutOff) {\n\t\t\t\t\tmodifiedPath = this.cutOffPath(path.value, strokeWidth + 0.5);\n\t\t\t\t}\n\n\t\t\t\tmarkup = ['<shape isShadow=\"true\" strokeweight=\"', strokeWidth,\n\t\t\t\t\t'\" filled=\"false\" path=\"', modifiedPath,\n\t\t\t\t\t'\" coordsize=\"10 10\" style=\"', element.style.cssText, '\" />'];\n\n\t\t\t\tshadow = createElement(renderer.prepVML(markup),\n\t\t\t\t\tnull, {\n\t\t\t\t\t\tleft: pInt(elemStyle.left) + pick(shadowOptions.offsetX, 1),\n\t\t\t\t\t\ttop: pInt(elemStyle.top) + pick(shadowOptions.offsetY, 1)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tif (cutOff) {\n\t\t\t\t\tshadow.cutOff = strokeWidth + 1;\n\t\t\t\t}\n\n\t\t\t\t// apply the opacity\n\t\t\t\tmarkup = ['<stroke color=\"', shadowOptions.color || 'black', '\" opacity=\"', shadowElementOpacity * i, '\"/>'];\n\t\t\t\tcreateElement(renderer.prepVML(markup), null, null, shadow);\n\n\n\t\t\t\t// insert it\n\t\t\t\tif (group) {\n\t\t\t\t\tgroup.element.appendChild(shadow);\n\t\t\t\t} else {\n\t\t\t\t\telement.parentNode.insertBefore(shadow, element);\n\t\t\t\t}\n\n\t\t\t\t// record it\n\t\t\t\tshadows.push(shadow);\n\n\t\t\t}\n\n\t\t\tthis.shadows = shadows;\n\t\t}\n\t\treturn this;\n\t},\n\tupdateShadows: noop, // Used in SVG only\n\n\tsetAttr: function (key, value) {\n\t\tif (docMode8) { // IE8 setAttribute bug\n\t\t\tthis.element[key] = value;\n\t\t} else {\n\t\t\tthis.element.setAttribute(key, value);\n\t\t}\n\t},\n\tclassSetter: function (value) {\n\t\t// IE8 Standards mode has problems retrieving the className unless set like this\n\t\tthis.element.className = value;\n\t},\n\tdashstyleSetter: function (value, key, element) {\n\t\tvar strokeElem = element.getElementsByTagName('stroke')[0] ||\n\t\t\tcreateElement(this.renderer.prepVML(['<stroke/>']), null, null, element);\n\t\tstrokeElem[key] = value || 'solid';\n\t\tthis[key] = value; /* because changing stroke-width will change the dash length\n\t\t\tand cause an epileptic effect */\n\t},\n\tdSetter: function (value, key, element) {\n\t\tvar i,\n\t\t\tshadows = this.shadows;\n\t\tvalue = value || [];\n\t\tthis.d = value.join && value.join(' '); // used in getter for animation\n\n\t\telement.path = value = this.pathToVML(value);\n\n\t\t// update shadows\n\t\tif (shadows) {\n\t\t\ti = shadows.length;\n\t\t\twhile (i--) {\n\t\t\t\tshadows[i].path = shadows[i].cutOff ? this.cutOffPath(value, shadows[i].cutOff) : value;\n\t\t\t}\n\t\t}\n\t\tthis.setAttr(key, value);\n\t},\n\tfillSetter: function (value, key, element) {\n\t\tvar nodeName = element.nodeName;\n\t\tif (nodeName === 'SPAN') { // text color\n\t\t\telement.style.color = value;\n\t\t} else if (nodeName !== 'IMG') { // #1336\n\t\t\telement.filled = value !== NONE;\n\t\t\tthis.setAttr('fillcolor', this.renderer.color(value, element, key, this));\n\t\t}\n\t},\n\topacitySetter: noop, // Don't bother - animation is too slow and filters introduce artifacts\n\trotationSetter: function (value, key, element) {\n\t\tvar style = element.style;\n\t\tthis[key] = style[key] = value; // style is for #1873\n\n\t\t// Correction for the 1x1 size of the shape container. Used in gauge needles.\n\t\tstyle.left = -mathRound(mathSin(value * deg2rad) + 1) + PX;\n\t\tstyle.top = mathRound(mathCos(value * deg2rad)) + PX;\n\t},\n\tstrokeSetter: function (value, key, element) {\n\t\tthis.setAttr('strokecolor', this.renderer.color(value, element, key));\n\t},\n\t'stroke-widthSetter': function (value, key, element) {\n\t\telement.stroked = !!value; // VML \"stroked\" attribute\n\t\tthis[key] = value; // used in getter, issue #113\n\t\tif (isNumber(value)) {\n\t\t\tvalue += PX;\n\t\t}\n\t\tthis.setAttr('strokeweight', value);\n\t},\n\ttitleSetter: function (value, key) {\n\t\tthis.setAttr(key, value);\n\t},\n\tvisibilitySetter: function (value, key, element) {\n\n\t\t// Handle inherited visibility\n\t\tif (value === 'inherit') {\n\t\t\tvalue = VISIBLE;\n\t\t}\n\t\t\n\t\t// Let the shadow follow the main element\n\t\tif (this.shadows) {\n\t\t\teach(this.shadows, function (shadow) {\n\t\t\t\tshadow.style[key] = value;\n\t\t\t});\n\t\t}\n\n\t\t// Instead of toggling the visibility CSS property, move the div out of the viewport.\n\t\t// This works around #61 and #586\n\t\tif (element.nodeName === 'DIV') {\n\t\t\tvalue = value === HIDDEN ? '-999em' : 0;\n\n\t\t\t// In order to redraw, IE7 needs the div to be visible when tucked away\n\t\t\t// outside the viewport. So the visibility is actually opposite of\n\t\t\t// the expected value. This applies to the tooltip only.\n\t\t\tif (!docMode8) {\n\t\t\t\telement.style[key] = value ? VISIBLE : HIDDEN;\n\t\t\t}\n\t\t\tkey = 'top';\n\t\t}\n\t\telement.style[key] = value;\n\t},\n\txSetter: function (value, key, element) {\n\t\tthis[key] = value; // used in getter\n\n\t\tif (key === 'x') {\n\t\t\tkey = 'left';\n\t\t} else if (key === 'y') {\n\t\t\tkey = 'top';\n\t\t}/* else {\n\t\t\tvalue = mathMax(0, value); // don't set width or height below zero (#311)\n\t\t}*/\n\n\t\t// clipping rectangle special\n\t\tif (this.updateClipping) {\n\t\t\tthis[key] = value; // the key is now 'left' or 'top' for 'x' and 'y'\n\t\t\tthis.updateClipping();\n\t\t} else {\n\t\t\t// normal\n\t\t\telement.style[key] = value;\n\t\t}\n\t},\n\tzIndexSetter: function (value, key, element) {\n\t\telement.style[key] = value;\n\t}\n};\nHighcharts.VMLElement = VMLElement = extendClass(SVGElement, VMLElement);\n\n// Some shared setters\nVMLElement.prototype.ySetter =\n\tVMLElement.prototype.widthSetter = \n\tVMLElement.prototype.heightSetter = \n\tVMLElement.prototype.xSetter;\n\n\n/**\n * The VML renderer\n */\nvar VMLRendererExtension = { // inherit SVGRenderer\n\n\tElement: VMLElement,\n\tisIE8: userAgent.indexOf('MSIE 8.0') > -1,\n\n\n\t/**\n\t * Initialize the VMLRenderer\n\t * @param {Object} container\n\t * @param {Number} width\n\t * @param {Number} height\n\t */\n\tinit: function (container, width, height, style) {\n\t\tvar renderer = this,\n\t\t\tboxWrapper,\n\t\t\tbox,\n\t\t\tcss;\n\n\t\trenderer.alignedObjects = [];\n\n\t\tboxWrapper = renderer.createElement(DIV)\n\t\t\t.css(extend(this.getStyle(style), { position: RELATIVE}));\n\t\tbox = boxWrapper.element;\n\t\tcontainer.appendChild(boxWrapper.element);\n\n\n\t\t// generate the containing box\n\t\trenderer.isVML = true;\n\t\trenderer.box = box;\n\t\trenderer.boxWrapper = boxWrapper;\n\t\trenderer.cache = {};\n\n\n\t\trenderer.setSize(width, height, false);\n\n\t\t// The only way to make IE6 and IE7 print is to use a global namespace. However,\n\t\t// with IE8 the only way to make the dynamic shapes visible in screen and print mode\n\t\t// seems to be to add the xmlns attribute and the behaviour style inline.\n\t\tif (!doc.namespaces.hcv) {\n\n\t\t\tdoc.namespaces.add('hcv', 'urn:schemas-microsoft-com:vml');\n\n\t\t\t// Setup default CSS (#2153, #2368, #2384)\n\t\t\tcss = 'hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke' +\n\t\t\t\t'{ behavior:url(#default#VML); display: inline-block; } ';\n\t\t\ttry {\n\t\t\t\tdoc.createStyleSheet().cssText = css;\n\t\t\t} catch (e) {\n\t\t\t\tdoc.styleSheets[0].cssText += css;\n\t\t\t}\n\n\t\t}\n\t},\n\n\n\t/**\n\t * Detect whether the renderer is hidden. This happens when one of the parent elements\n\t * has display: none\n\t */\n\tisHidden: function () {\n\t\treturn !this.box.offsetWidth;\n\t},\n\n\t/**\n\t * Define a clipping rectangle. In VML it is accomplished by storing the values\n\t * for setting the CSS style to all associated members.\n\t *\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} width\n\t * @param {Number} height\n\t */\n\tclipRect: function (x, y, width, height) {\n\n\t\t// create a dummy element\n\t\tvar clipRect = this.createElement(),\n\t\t\tisObj = isObject(x);\n\n\t\t// mimic a rectangle with its style object for automatic updating in attr\n\t\treturn extend(clipRect, {\n\t\t\tmembers: [],\n\t\t\tcount: 0,\n\t\t\tleft: (isObj ? x.x : x) + 1,\n\t\t\ttop: (isObj ? x.y : y) + 1,\n\t\t\twidth: (isObj ? x.width : width) - 1,\n\t\t\theight: (isObj ? x.height : height) - 1,\n\t\t\tgetCSS: function (wrapper) {\n\t\t\t\tvar element = wrapper.element,\n\t\t\t\t\tnodeName = element.nodeName,\n\t\t\t\t\tisShape = nodeName === 'shape',\n\t\t\t\t\tinverted = wrapper.inverted,\n\t\t\t\t\trect = this,\n\t\t\t\t\ttop = rect.top - (isShape ? element.offsetTop : 0),\n\t\t\t\t\tleft = rect.left,\n\t\t\t\t\tright = left + rect.width,\n\t\t\t\t\tbottom = top + rect.height,\n\t\t\t\t\tret = {\n\t\t\t\t\t\tclip: 'rect(' +\n\t\t\t\t\t\t\tmathRound(inverted ? left : top) + 'px,' +\n\t\t\t\t\t\t\tmathRound(inverted ? bottom : right) + 'px,' +\n\t\t\t\t\t\t\tmathRound(inverted ? right : bottom) + 'px,' +\n\t\t\t\t\t\t\tmathRound(inverted ? top : left) + 'px)'\n\t\t\t\t\t};\n\n\t\t\t\t// issue 74 workaround\n\t\t\t\tif (!inverted && docMode8 && nodeName === 'DIV') {\n\t\t\t\t\textend(ret, {\n\t\t\t\t\t\twidth: right + PX,\n\t\t\t\t\t\theight: bottom + PX\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// used in attr and animation to update the clipping of all members\n\t\t\tupdateClipping: function () {\n\t\t\t\teach(clipRect.members, function (member) {\n\t\t\t\t\tif (member.element) { // Deleted series, like in stock/members/series-remove demo. Should be removed from members, but this will do.\n\t\t\t\t\t\tmember.css(clipRect.getCSS(member));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t},\n\n\n\t/**\n\t * Take a color and return it if it's a string, make it a gradient if it's a\n\t * gradient configuration object, and apply opacity.\n\t *\n\t * @param {Object} color The color or config object\n\t */\n\tcolor: function (color, elem, prop, wrapper) {\n\t\tvar renderer = this,\n\t\t\tcolorObject,\n\t\t\tregexRgba = /^rgba/,\n\t\t\tmarkup,\n\t\t\tfillType,\n\t\t\tret = NONE;\n\n\t\t// Check for linear or radial gradient\n\t\tif (color && color.linearGradient) {\n\t\t\tfillType = 'gradient';\n\t\t} else if (color && color.radialGradient) {\n\t\t\tfillType = 'pattern';\n\t\t}\n\n\n\t\tif (fillType) {\n\n\t\t\tvar stopColor,\n\t\t\t\tstopOpacity,\n\t\t\t\tgradient = color.linearGradient || color.radialGradient,\n\t\t\t\tx1,\n\t\t\t\ty1,\n\t\t\t\tx2,\n\t\t\t\ty2,\n\t\t\t\topacity1,\n\t\t\t\topacity2,\n\t\t\t\tcolor1,\n\t\t\t\tcolor2,\n\t\t\t\tfillAttr = '',\n\t\t\t\tstops = color.stops,\n\t\t\t\tfirstStop,\n\t\t\t\tlastStop,\n\t\t\t\tcolors = [],\n\t\t\t\taddFillNode = function () {\n\t\t\t\t\t// Add the fill subnode. When colors attribute is used, the meanings of opacity and o:opacity2\n\t\t\t\t\t// are reversed.\n\t\t\t\t\tmarkup = ['<fill colors=\"' + colors.join(',') + '\" opacity=\"', opacity2, '\" o:opacity2=\"', opacity1,\n\t\t\t\t\t\t'\" type=\"', fillType, '\" ', fillAttr, 'focus=\"100%\" method=\"any\" />'];\n\t\t\t\t\tcreateElement(renderer.prepVML(markup), null, null, elem);\n\t\t\t\t};\n\n\t\t\t// Extend from 0 to 1\n\t\t\tfirstStop = stops[0];\n\t\t\tlastStop = stops[stops.length - 1];\n\t\t\tif (firstStop[0] > 0) {\n\t\t\t\tstops.unshift([\n\t\t\t\t\t0,\n\t\t\t\t\tfirstStop[1]\n\t\t\t\t]);\n\t\t\t}\n\t\t\tif (lastStop[0] < 1) {\n\t\t\t\tstops.push([\n\t\t\t\t\t1,\n\t\t\t\t\tlastStop[1]\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Compute the stops\n\t\t\teach(stops, function (stop, i) {\n\t\t\t\tif (regexRgba.test(stop[1])) {\n\t\t\t\t\tcolorObject = Color(stop[1]);\n\t\t\t\t\tstopColor = colorObject.get('rgb');\n\t\t\t\t\tstopOpacity = colorObject.get('a');\n\t\t\t\t} else {\n\t\t\t\t\tstopColor = stop[1];\n\t\t\t\t\tstopOpacity = 1;\n\t\t\t\t}\n\n\t\t\t\t// Build the color attribute\n\t\t\t\tcolors.push((stop[0] * 100) + '% ' + stopColor);\n\n\t\t\t\t// Only start and end opacities are allowed, so we use the first and the last\n\t\t\t\tif (!i) {\n\t\t\t\t\topacity1 = stopOpacity;\n\t\t\t\t\tcolor2 = stopColor;\n\t\t\t\t} else {\n\t\t\t\t\topacity2 = stopOpacity;\n\t\t\t\t\tcolor1 = stopColor;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Apply the gradient to fills only.\n\t\t\tif (prop === 'fill') {\n\n\t\t\t\t// Handle linear gradient angle\n\t\t\t\tif (fillType === 'gradient') {\n\t\t\t\t\tx1 = gradient.x1 || gradient[0] || 0;\n\t\t\t\t\ty1 = gradient.y1 || gradient[1] || 0;\n\t\t\t\t\tx2 = gradient.x2 || gradient[2] || 0;\n\t\t\t\t\ty2 = gradient.y2 || gradient[3] || 0;\n\t\t\t\t\tfillAttr = 'angle=\"' + (90  - math.atan(\n\t\t\t\t\t\t(y2 - y1) / // y vector\n\t\t\t\t\t\t(x2 - x1) // x vector\n\t\t\t\t\t\t) * 180 / mathPI) + '\"';\n\n\t\t\t\t\taddFillNode();\n\n\t\t\t\t// Radial (circular) gradient\n\t\t\t\t} else {\n\n\t\t\t\t\tvar r = gradient.r,\n\t\t\t\t\t\tsizex = r * 2,\n\t\t\t\t\t\tsizey = r * 2,\n\t\t\t\t\t\tcx = gradient.cx,\n\t\t\t\t\t\tcy = gradient.cy,\n\t\t\t\t\t\tradialReference = elem.radialReference,\n\t\t\t\t\t\tbBox,\n\t\t\t\t\t\tapplyRadialGradient = function () {\n\t\t\t\t\t\t\tif (radialReference) {\n\t\t\t\t\t\t\t\tbBox = wrapper.getBBox();\n\t\t\t\t\t\t\t\tcx += (radialReference[0] - bBox.x) / bBox.width - 0.5;\n\t\t\t\t\t\t\t\tcy += (radialReference[1] - bBox.y) / bBox.height - 0.5;\n\t\t\t\t\t\t\t\tsizex *= radialReference[2] / bBox.width;\n\t\t\t\t\t\t\t\tsizey *= radialReference[2] / bBox.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfillAttr = 'src=\"' + defaultOptions.global.VMLRadialGradientURL + '\" ' +\n\t\t\t\t\t\t\t\t'size=\"' + sizex + ',' + sizey + '\" ' +\n\t\t\t\t\t\t\t\t'origin=\"0.5,0.5\" ' +\n\t\t\t\t\t\t\t\t'position=\"' + cx + ',' + cy + '\" ' +\n\t\t\t\t\t\t\t\t'color2=\"' + color2 + '\" ';\n\n\t\t\t\t\t\t\taddFillNode();\n\t\t\t\t\t\t};\n\n\t\t\t\t\t// Apply radial gradient\n\t\t\t\t\tif (wrapper.added) {\n\t\t\t\t\t\tapplyRadialGradient();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// We need to know the bounding box to get the size and position right\n\t\t\t\t\t\twrapper.onAdd = applyRadialGradient;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The fill element's color attribute is broken in IE8 standards mode, so we\n\t\t\t\t\t// need to set the parent shape's fillcolor attribute instead.\n\t\t\t\t\tret = color1;\n\t\t\t\t}\n\n\t\t\t// Gradients are not supported for VML stroke, return the first color. #722.\n\t\t\t} else {\n\t\t\t\tret = stopColor;\n\t\t\t}\n\n\t\t// if the color is an rgba color, split it and add a fill node\n\t\t// to hold the opacity component\n\t\t} else if (regexRgba.test(color) && elem.tagName !== 'IMG') {\n\n\t\t\tcolorObject = Color(color);\n\n\t\t\tmarkup = ['<', prop, ' opacity=\"', colorObject.get('a'), '\"/>'];\n\t\t\tcreateElement(this.prepVML(markup), null, null, elem);\n\n\t\t\tret = colorObject.get('rgb');\n\n\n\t\t} else {\n\t\t\tvar propNodes = elem.getElementsByTagName(prop); // 'stroke' or 'fill' node\n\t\t\tif (propNodes.length) {\n\t\t\t\tpropNodes[0].opacity = 1;\n\t\t\t\tpropNodes[0].type = 'solid';\n\t\t\t}\n\t\t\tret = color;\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\t/**\n\t * Take a VML string and prepare it for either IE8 or IE6/IE7.\n\t * @param {Array} markup A string array of the VML markup to prepare\n\t */\n\tprepVML: function (markup) {\n\t\tvar vmlStyle = 'display:inline-block;behavior:url(#default#VML);',\n\t\t\tisIE8 = this.isIE8;\n\n\t\tmarkup = markup.join('');\n\n\t\tif (isIE8) { // add xmlns and style inline\n\t\t\tmarkup = markup.replace('/>', ' xmlns=\"urn:schemas-microsoft-com:vml\" />');\n\t\t\tif (markup.indexOf('style=\"') === -1) {\n\t\t\t\tmarkup = markup.replace('/>', ' style=\"' + vmlStyle + '\" />');\n\t\t\t} else {\n\t\t\t\tmarkup = markup.replace('style=\"', 'style=\"' + vmlStyle);\n\t\t\t}\n\n\t\t} else { // add namespace\n\t\t\tmarkup = markup.replace('<', '<hcv:');\n\t\t}\n\n\t\treturn markup;\n\t},\n\n\t/**\n\t * Create rotated and aligned text\n\t * @param {String} str\n\t * @param {Number} x\n\t * @param {Number} y\n\t */\n\ttext: SVGRenderer.prototype.html,\n\n\t/**\n\t * Create and return a path element\n\t * @param {Array} path\n\t */\n\tpath: function (path) {\n\t\tvar attr = {\n\t\t\t// subpixel precision down to 0.1 (width and height = 1px)\n\t\t\tcoordsize: '10 10'\n\t\t};\n\t\tif (isArray(path)) {\n\t\t\tattr.d = path;\n\t\t} else if (isObject(path)) { // attributes\n\t\t\textend(attr, path);\n\t\t}\n\t\t// create the shape\n\t\treturn this.createElement('shape').attr(attr);\n\t},\n\n\t/**\n\t * Create and return a circle element. In VML circles are implemented as\n\t * shapes, which is faster than v:oval\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} r\n\t */\n\tcircle: function (x, y, r) {\n\t\tvar circle = this.symbol('circle');\n\t\tif (isObject(x)) {\n\t\t\tr = x.r;\n\t\t\ty = x.y;\n\t\t\tx = x.x;\n\t\t}\n\t\tcircle.isCircle = true; // Causes x and y to mean center (#1682)\n\t\tcircle.r = r;\n\t\treturn circle.attr({ x: x, y: y });\n\t},\n\n\t/**\n\t * Create a group using an outer div and an inner v:group to allow rotating\n\t * and flipping. A simple v:group would have problems with positioning\n\t * child HTML elements and CSS clip.\n\t *\n\t * @param {String} name The name of the group\n\t */\n\tg: function (name) {\n\t\tvar wrapper,\n\t\t\tattribs;\n\n\t\t// set the class name\n\t\tif (name) {\n\t\t\tattribs = { 'className': PREFIX + name, 'class': PREFIX + name };\n\t\t}\n\n\t\t// the div to hold HTML and clipping\n\t\twrapper = this.createElement(DIV).attr(attribs);\n\n\t\treturn wrapper;\n\t},\n\n\t/**\n\t * VML override to create a regular HTML image\n\t * @param {String} src\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} width\n\t * @param {Number} height\n\t */\n\timage: function (src, x, y, width, height) {\n\t\tvar obj = this.createElement('img')\n\t\t\t.attr({ src: src });\n\n\t\tif (arguments.length > 1) {\n\t\t\tobj.attr({\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t});\n\t\t}\n\t\treturn obj;\n\t},\n\n\t/**\n\t * For rectangles, VML uses a shape for rect to overcome bugs and rotation problems\n\t */\n\tcreateElement: function (nodeName) {\n\t\treturn nodeName === 'rect' ? this.symbol(nodeName) : SVGRenderer.prototype.createElement.call(this, nodeName);\t\n\t},\n\n\t/**\n\t * In the VML renderer, each child of an inverted div (group) is inverted\n\t * @param {Object} element\n\t * @param {Object} parentNode\n\t */\n\tinvertChild: function (element, parentNode) {\n\t\tvar ren = this,\n\t\t\tparentStyle = parentNode.style,\n\t\t\timgStyle = element.tagName === 'IMG' && element.style; // #1111\n\n\t\tcss(element, {\n\t\t\tflip: 'x',\n\t\t\tleft: pInt(parentStyle.width) - (imgStyle ? pInt(imgStyle.top) : 1),\n\t\t\ttop: pInt(parentStyle.height) - (imgStyle ? pInt(imgStyle.left) : 1),\n\t\t\trotation: -90\n\t\t});\n\n\t\t// Recursively invert child elements, needed for nested composite shapes like box plots and error bars. #1680, #1806.\n\t\teach(element.childNodes, function (child) {\n\t\t\tren.invertChild(child, element);\n\t\t});\n\t},\n\n\t/**\n\t * Symbol definitions that override the parent SVG renderer's symbols\n\t *\n\t */\n\tsymbols: {\n\t\t// VML specific arc function\n\t\tarc: function (x, y, w, h, options) {\n\t\t\tvar start = options.start,\n\t\t\t\tend = options.end,\n\t\t\t\tradius = options.r || w || h,\n\t\t\t\tinnerRadius = options.innerR,\n\t\t\t\tcosStart = mathCos(start),\n\t\t\t\tsinStart = mathSin(start),\n\t\t\t\tcosEnd = mathCos(end),\n\t\t\t\tsinEnd = mathSin(end),\n\t\t\t\tret;\n\n\t\t\tif (end - start === 0) { // no angle, don't show it.\n\t\t\t\treturn ['x'];\n\t\t\t}\n\n\t\t\tret = [\n\t\t\t\t'wa', // clockwise arc to\n\t\t\t\tx - radius, // left\n\t\t\t\ty - radius, // top\n\t\t\t\tx + radius, // right\n\t\t\t\ty + radius, // bottom\n\t\t\t\tx + radius * cosStart, // start x\n\t\t\t\ty + radius * sinStart, // start y\n\t\t\t\tx + radius * cosEnd, // end x\n\t\t\t\ty + radius * sinEnd  // end y\n\t\t\t];\n\n\t\t\tif (options.open && !innerRadius) {\n\t\t\t\tret.push(\n\t\t\t\t\t'e',\n\t\t\t\t\tM,\n\t\t\t\t\tx,// - innerRadius,\n\t\t\t\t\ty// - innerRadius\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tret.push(\n\t\t\t\t'at', // anti clockwise arc to\n\t\t\t\tx - innerRadius, // left\n\t\t\t\ty - innerRadius, // top\n\t\t\t\tx + innerRadius, // right\n\t\t\t\ty + innerRadius, // bottom\n\t\t\t\tx + innerRadius * cosEnd, // start x\n\t\t\t\ty + innerRadius * sinEnd, // start y\n\t\t\t\tx + innerRadius * cosStart, // end x\n\t\t\t\ty + innerRadius * sinStart, // end y\n\t\t\t\t'x', // finish path\n\t\t\t\t'e' // close\n\t\t\t);\n\n\t\t\tret.isArc = true;\n\t\t\treturn ret;\n\n\t\t},\n\t\t// Add circle symbol path. This performs significantly faster than v:oval.\n\t\tcircle: function (x, y, w, h, wrapper) {\n\n\t\t\tif (wrapper) {\n\t\t\t\tw = h = 2 * wrapper.r;\n\t\t\t}\n\n\t\t\t// Center correction, #1682\n\t\t\tif (wrapper && wrapper.isCircle) {\n\t\t\t\tx -= w / 2;\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\n\t\t\t// Return the path\n\t\t\treturn [\n\t\t\t\t'wa', // clockwisearcto\n\t\t\t\tx, // left\n\t\t\t\ty, // top\n\t\t\t\tx + w, // right\n\t\t\t\ty + h, // bottom\n\t\t\t\tx + w, // start x\n\t\t\t\ty + h / 2,     // start y\n\t\t\t\tx + w, // end x\n\t\t\t\ty + h / 2,     // end y\n\t\t\t\t//'x', // finish path\n\t\t\t\t'e' // close\n\t\t\t];\n\t\t},\n\t\t/**\n\t\t * Add rectangle symbol path which eases rotation and omits arcsize problems\n\t\t * compared to the built-in VML roundrect shape. When borders are not rounded,\n\t\t * use the simpler square path, else use the callout path without the arrow.\n\t\t */\n\t\trect: function (x, y, w, h, options) {\n\t\t\treturn SVGRenderer.prototype.symbols[\n\t\t\t\t!defined(options) || !options.r ? 'square' : 'callout'\n\t\t\t].call(0, x, y, w, h, options);\n\t\t}\n\t}\n};\nHighcharts.VMLRenderer = VMLRenderer = function () {\n\tthis.init.apply(this, arguments);\n};\nVMLRenderer.prototype = merge(SVGRenderer.prototype, VMLRendererExtension);\n\n\t// general renderer\n\tRenderer = VMLRenderer;\n}\n\n// This method is used with exporting in old IE, when emulating SVG (see #2314)\nSVGRenderer.prototype.measureSpanWidth = function (text, styles) {\n\tvar measuringSpan = doc.createElement('span'),\n\t\toffsetWidth,\n\ttextNode = doc.createTextNode(text);\n\n\tmeasuringSpan.appendChild(textNode);\n\tcss(measuringSpan, styles);\n\tthis.box.appendChild(measuringSpan);\n\toffsetWidth = measuringSpan.offsetWidth;\n\tdiscardElement(measuringSpan); // #2463\n\treturn offsetWidth;\n};\n\n\n/* ****************************************************************************\n *                                                                            *\n * END OF INTERNET EXPLORER <= 8 SPECIFIC CODE                                *\n *                                                                            *\n *****************************************************************************/\n/* ****************************************************************************\n *                                                                            *\n * START OF ANDROID < 3 SPECIFIC CODE. THIS CAN BE REMOVED IF YOU'RE NOT      *\n * TARGETING THAT SYSTEM.                                                     *\n *                                                                            *\n *****************************************************************************/\nvar CanVGRenderer,\n\tCanVGController;\n\nif (useCanVG) {\n\t/**\n\t * The CanVGRenderer is empty from start to keep the source footprint small.\n\t * When requested, the CanVGController downloads the rest of the source packaged\n\t * together with the canvg library.\n\t */\n\tHighcharts.CanVGRenderer = CanVGRenderer = function () {\n\t\t// Override the global SVG namespace to fake SVG/HTML that accepts CSS\n\t\tSVG_NS = 'http://www.w3.org/1999/xhtml';\n\t};\n\n\t/**\n\t * Start with an empty symbols object. This is needed when exporting is used (exporting.src.js will add a few symbols), but \n\t * the implementation from SvgRenderer will not be merged in until first render.\n\t */\n\tCanVGRenderer.prototype.symbols = {};\n\n\t/**\n\t * Handles on demand download of canvg rendering support.\n\t */\n\tCanVGController = (function () {\n\t\t// List of renderering calls\n\t\tvar deferredRenderCalls = [];\n\n\t\t/**\n\t\t * When downloaded, we are ready to draw deferred charts.\n\t\t */\n\t\tfunction drawDeferred() {\n\t\t\tvar callLength = deferredRenderCalls.length,\n\t\t\t\tcallIndex;\n\n\t\t\t// Draw all pending render calls\n\t\t\tfor (callIndex = 0; callIndex < callLength; callIndex++) {\n\t\t\t\tdeferredRenderCalls[callIndex]();\n\t\t\t}\n\t\t\t// Clear the list\n\t\t\tdeferredRenderCalls = [];\n\t\t}\n\n\t\treturn {\n\t\t\tpush: function (func, scriptLocation) {\n\t\t\t\t// Only get the script once\n\t\t\t\tif (deferredRenderCalls.length === 0) {\n\t\t\t\t\tgetScript(scriptLocation, drawDeferred);\n\t\t\t\t}\n\t\t\t\t// Register render call\n\t\t\t\tdeferredRenderCalls.push(func);\n\t\t\t}\n\t\t};\n\t}());\n\n\tRenderer = CanVGRenderer;\n} // end CanVGRenderer\n\n/* ****************************************************************************\n *                                                                            *\n * END OF ANDROID < 3 SPECIFIC CODE                                           *\n *                                                                            *\n *****************************************************************************/\n\n/**\n * The Tick class\n */\nfunction Tick(axis, pos, type, noLabel) {\n\tthis.axis = axis;\n\tthis.pos = pos;\n\tthis.type = type || '';\n\tthis.isNew = true;\n\n\tif (!type && !noLabel) {\n\t\tthis.addLabel();\n\t}\n}\n\nTick.prototype = {\n\t/**\n\t * Write the tick label\n\t */\n\taddLabel: function () {\n\t\tvar tick = this,\n\t\t\taxis = tick.axis,\n\t\t\toptions = axis.options,\n\t\t\tchart = axis.chart,\n\t\t\tcategories = axis.categories,\n\t\t\tnames = axis.names,\n\t\t\tpos = tick.pos,\n\t\t\tlabelOptions = options.labels,\n\t\t\tstr,\n\t\t\ttickPositions = axis.tickPositions,\n\t\t\tisFirst = pos === tickPositions[0],\n\t\t\tisLast = pos === tickPositions[tickPositions.length - 1],\n\t\t\tvalue = categories ?\n\t\t\t\tpick(categories[pos], names[pos], pos) :\n\t\t\t\tpos,\n\t\t\tlabel = tick.label,\n\t\t\ttickPositionInfo = tickPositions.info,\n\t\t\tdateTimeLabelFormat;\n\n\t\t// Set the datetime label format. If a higher rank is set for this position, use that. If not,\n\t\t// use the general format.\n\t\tif (axis.isDatetimeAxis && tickPositionInfo) {\n\t\t\tdateTimeLabelFormat = options.dateTimeLabelFormats[tickPositionInfo.higherRanks[pos] || tickPositionInfo.unitName];\n\t\t}\n\t\t// set properties for access in render method\n\t\ttick.isFirst = isFirst;\n\t\ttick.isLast = isLast;\n\n\t\t// get the string\n\t\tstr = axis.labelFormatter.call({\n\t\t\taxis: axis,\n\t\t\tchart: chart,\n\t\t\tisFirst: isFirst,\n\t\t\tisLast: isLast,\n\t\t\tdateTimeLabelFormat: dateTimeLabelFormat,\n\t\t\tvalue: axis.isLog ? correctFloat(lin2log(value)) : value\n\t\t});\n\n\t\t// prepare CSS\n\t\t//css = width && { width: mathMax(1, mathRound(width - 2 * (labelOptions.padding || 10))) + PX };\n\t\t\n\t\t// first call\n\t\tif (!defined(label)) {\n\n\t\t\ttick.label = label =\n\t\t\t\tdefined(str) && labelOptions.enabled ?\n\t\t\t\t\tchart.renderer.text(\n\t\t\t\t\t\t\tstr,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tlabelOptions.useHTML\n\t\t\t\t\t\t)\n\t\t\t\t\t\t//.attr(attr)\n\t\t\t\t\t\t// without position absolute, IE export sometimes is wrong\n\t\t\t\t\t\t.css(merge(labelOptions.style))\n\t\t\t\t\t\t.add(axis.labelGroup) :\n\t\t\t\t\tnull;\n\t\t\ttick.labelLength = label && label.getBBox().width; // Un-rotated length\n\t\t\ttick.rotation = 0; // Base value to detect change for new calls to getBBox\n\n\t\t// update\n\t\t} else if (label) {\n\t\t\tlabel.attr({ text: str });\n\t\t}\n\t},\n\n\t/**\n\t * Get the offset height or width of the label\n\t */\n\tgetLabelSize: function () {\n\t\treturn this.label ?\n\t\t\tthis.label.getBBox()[this.axis.horiz ? 'height' : 'width'] :\n\t\t\t0;\n\t},\n\n\t/**\n\t * Handle the label overflow by adjusting the labels to the left and right edge, or\n\t * hide them if they collide into the neighbour label.\n\t */\n\thandleOverflow: function (xy) {\n\t\tvar axis = this.axis,\n\t\t\tpxPos = xy.x,\n\t\t\tchartWidth = axis.chart.chartWidth,\n\t\t\tspacing = axis.chart.spacing,\n\t\t\tleftBound = pick(axis.labelLeft, mathMin(axis.pos, spacing[3])),\n\t\t\trightBound = pick(axis.labelRight, mathMax(axis.pos + axis.len, chartWidth - spacing[1])),\n\t\t\tlabel = this.label,\n\t\t\trotation = this.rotation,\n\t\t\tfactor = { left: 0, center: 0.5, right: 1 }[axis.labelAlign],\n\t\t\tlabelWidth = label.getBBox().width,\n\t\t\tslotWidth = axis.slotWidth,\n\t\t\txCorrection = factor,\n\t\t\tgoRight = 1,\n\t\t\tleftPos,\n\t\t\trightPos,\n\t\t\ttextWidth,\n\t\t\tcss = {};\n\n\t\t// Check if the label overshoots the chart spacing box. If it does, move it.\n\t\t// If it now overshoots the slotWidth, add ellipsis.\n\t\tif (!rotation) {\n\t\t\tleftPos = pxPos - factor * labelWidth;\n\t\t\trightPos = pxPos + (1 - factor) * labelWidth;\n\n\t\t\tif (leftPos < leftBound) {\n\t\t\t\tslotWidth = xy.x + slotWidth * (1 - factor) - leftBound;\n\t\t\t} else if (rightPos > rightBound) {\n\t\t\t\tslotWidth = rightBound - xy.x + slotWidth * factor;\n\t\t\t\tgoRight = -1;\n\t\t\t}\n\n\t\t\tslotWidth = mathMin(axis.slotWidth, slotWidth); // #4177\n\t\t\tif (slotWidth < axis.slotWidth && axis.labelAlign === 'center') {\n\t\t\t\txy.x += goRight * (axis.slotWidth - slotWidth - xCorrection * (axis.slotWidth - mathMin(labelWidth, slotWidth)));\t\t\t\t\n\t\t\t}\n\t\t\t// If the label width exceeds the available space, set a text width to be \n\t\t\t// picked up below. Also, if a width has been set before, we need to set a new\n\t\t\t// one because the reported labelWidth will be limited by the box (#3938).\n\t\t\tif (labelWidth > slotWidth || (axis.autoRotation && label.styles.width)) {\n\t\t\t\ttextWidth = slotWidth;\n\t\t\t}\n\n\t\t// Add ellipsis to prevent rotated labels to be clipped against the edge of the chart\n\t\t} else if (rotation < 0 && pxPos - factor * labelWidth < leftBound) {\n\t\t\ttextWidth = mathRound(pxPos / mathCos(rotation * deg2rad) - leftBound);\n\t\t} else if (rotation > 0 && pxPos + factor * labelWidth > rightBound) {\n\t\t\ttextWidth = mathRound((chartWidth - pxPos) / mathCos(rotation * deg2rad));\n\t\t}\n\n\t\tif (textWidth) {\n\t\t\tcss.width = textWidth;\n\t\t\tif (!axis.options.labels.style.textOverflow) {\n\t\t\t\tcss.textOverflow = 'ellipsis';\n\t\t\t}\n\t\t\tlabel.css(css);\n\t\t}\n\t},\n\n\t/**\n\t * Get the x and y position for ticks and labels\n\t */\n\tgetPosition: function (horiz, pos, tickmarkOffset, old) {\n\t\tvar axis = this.axis,\n\t\t\tchart = axis.chart,\n\t\t\tcHeight = (old && chart.oldChartHeight) || chart.chartHeight;\n\n\t\treturn {\n\t\t\tx: horiz ?\n\t\t\t\taxis.translate(pos + tickmarkOffset, null, null, old) + axis.transB :\n\t\t\t\taxis.left + axis.offset + (axis.opposite ? ((old && chart.oldChartWidth) || chart.chartWidth) - axis.right - axis.left : 0),\n\n\t\t\ty: horiz ?\n\t\t\t\tcHeight - axis.bottom + axis.offset - (axis.opposite ? axis.height : 0) :\n\t\t\t\tcHeight - axis.translate(pos + tickmarkOffset, null, null, old) - axis.transB\n\t\t};\n\n\t},\n\n\t/**\n\t * Get the x, y position of the tick label\n\t */\n\tgetLabelPosition: function (x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n\t\tvar axis = this.axis,\n\t\t\ttransA = axis.transA,\n\t\t\treversed = axis.reversed,\n\t\t\tstaggerLines = axis.staggerLines,\n\t\t\trotCorr = axis.tickRotCorr || { x: 0, y: 0 },\n\t\t\tyOffset = pick(labelOptions.y, rotCorr.y + (axis.side === 2 ? 8 : -(label.getBBox().height / 2))),\n\t\t\tline;\n\n\t\tx = x + labelOptions.x + rotCorr.x - (tickmarkOffset && horiz ?\n\t\t\ttickmarkOffset * transA * (reversed ? -1 : 1) : 0);\n\t\ty = y + yOffset - (tickmarkOffset && !horiz ?\n\t\t\ttickmarkOffset * transA * (reversed ? 1 : -1) : 0);\n\n\t\t// Correct for staggered labels\n\t\tif (staggerLines) {\n\t\t\tline = (index / (step || 1) % staggerLines);\n\t\t\ty += line * (axis.labelOffset / staggerLines);\n\t\t}\n\n\t\treturn {\n\t\t\tx: x,\n\t\t\ty: mathRound(y)\n\t\t};\n\t},\n\n\t/**\n\t * Extendible method to return the path of the marker\n\t */\n\tgetMarkPath: function (x, y, tickLength, tickWidth, horiz, renderer) {\n\t\treturn renderer.crispLine([\n\t\t\t\tM,\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t\tL,\n\t\t\t\tx + (horiz ? 0 : -tickLength),\n\t\t\t\ty + (horiz ? tickLength : 0)\n\t\t\t], tickWidth);\n\t},\n\n\t/**\n\t * Put everything in place\n\t *\n\t * @param index {Number}\n\t * @param old {Boolean} Use old coordinates to prepare an animation into new position\n\t */\n\trender: function (index, old, opacity) {\n\t\tvar tick = this,\n\t\t\taxis = tick.axis,\n\t\t\toptions = axis.options,\n\t\t\tchart = axis.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\thoriz = axis.horiz,\n\t\t\ttype = tick.type,\n\t\t\tlabel = tick.label,\n\t\t\tpos = tick.pos,\n\t\t\tlabelOptions = options.labels,\n\t\t\tgridLine = tick.gridLine,\n\t\t\tgridPrefix = type ? type + 'Grid' : 'grid',\n\t\t\ttickPrefix = type ? type + 'Tick' : 'tick',\n\t\t\tgridLineWidth = options[gridPrefix + 'LineWidth'],\n\t\t\tgridLineColor = options[gridPrefix + 'LineColor'],\n\t\t\tdashStyle = options[gridPrefix + 'LineDashStyle'],\n\t\t\ttickLength = options[tickPrefix + 'Length'],\n\t\t\ttickWidth = options[tickPrefix + 'Width'] || 0,\n\t\t\ttickColor = options[tickPrefix + 'Color'],\n\t\t\ttickPosition = options[tickPrefix + 'Position'],\n\t\t\tgridLinePath,\n\t\t\tmark = tick.mark,\n\t\t\tmarkPath,\n\t\t\tstep = /*axis.labelStep || */labelOptions.step,\n\t\t\tattribs,\n\t\t\tshow = true,\n\t\t\ttickmarkOffset = axis.tickmarkOffset,\n\t\t\txy = tick.getPosition(horiz, pos, tickmarkOffset, old),\n\t\t\tx = xy.x,\n\t\t\ty = xy.y,\n\t\t\treverseCrisp = ((horiz && x === axis.pos + axis.len) || (!horiz && y === axis.pos)) ? -1 : 1; // #1480, #1687\n\n\t\topacity = pick(opacity, 1);\n\t\tthis.isActive = true;\n\n\t\t// create the grid line\n\t\tif (gridLineWidth) {\n\t\t\tgridLinePath = axis.getPlotLinePath(pos + tickmarkOffset, gridLineWidth * reverseCrisp, old, true);\n\n\t\t\tif (gridLine === UNDEFINED) {\n\t\t\t\tattribs = {\n\t\t\t\t\tstroke: gridLineColor,\n\t\t\t\t\t'stroke-width': gridLineWidth\n\t\t\t\t};\n\t\t\t\tif (dashStyle) {\n\t\t\t\t\tattribs.dashstyle = dashStyle;\n\t\t\t\t}\n\t\t\t\tif (!type) {\n\t\t\t\t\tattribs.zIndex = 1;\n\t\t\t\t}\n\t\t\t\tif (old) {\n\t\t\t\t\tattribs.opacity = 0;\n\t\t\t\t}\n\t\t\t\ttick.gridLine = gridLine =\n\t\t\t\t\tgridLineWidth ?\n\t\t\t\t\t\trenderer.path(gridLinePath)\n\t\t\t\t\t\t\t.attr(attribs).add(axis.gridGroup) :\n\t\t\t\t\t\tnull;\n\t\t\t}\n\n\t\t\t// If the parameter 'old' is set, the current call will be followed\n\t\t\t// by another call, therefore do not do any animations this time\n\t\t\tif (!old && gridLine && gridLinePath) {\n\t\t\t\tgridLine[tick.isNew ? 'attr' : 'animate']({\n\t\t\t\t\td: gridLinePath,\n\t\t\t\t\topacity: opacity\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// create the tick mark\n\t\tif (tickWidth && tickLength) {\n\n\t\t\t// negate the length\n\t\t\tif (tickPosition === 'inside') {\n\t\t\t\ttickLength = -tickLength;\n\t\t\t}\n\t\t\tif (axis.opposite) {\n\t\t\t\ttickLength = -tickLength;\n\t\t\t}\n\n\t\t\tmarkPath = tick.getMarkPath(x, y, tickLength, tickWidth * reverseCrisp, horiz, renderer);\n\t\t\tif (mark) { // updating\n\t\t\t\tmark.animate({\n\t\t\t\t\td: markPath,\n\t\t\t\t\topacity: opacity\n\t\t\t\t});\n\t\t\t} else { // first time\n\t\t\t\ttick.mark = renderer.path(\n\t\t\t\t\tmarkPath\n\t\t\t\t).attr({\n\t\t\t\t\tstroke: tickColor,\n\t\t\t\t\t'stroke-width': tickWidth,\n\t\t\t\t\topacity: opacity\n\t\t\t\t}).add(axis.axisGroup);\n\t\t\t}\n\t\t}\n\n\t\t// the label is created on init - now move it into place\n\t\tif (label && !isNaN(x)) {\n\t\t\tlabel.xy = xy = tick.getLabelPosition(x, y, label, horiz, labelOptions, tickmarkOffset, index, step);\n\n\t\t\t// Apply show first and show last. If the tick is both first and last, it is\n\t\t\t// a single centered tick, in which case we show the label anyway (#2100).\n\t\t\tif ((tick.isFirst && !tick.isLast && !pick(options.showFirstLabel, 1)) ||\n\t\t\t\t\t(tick.isLast && !tick.isFirst && !pick(options.showLastLabel, 1))) {\n\t\t\t\tshow = false;\n\n\t\t\t// Handle label overflow and show or hide accordingly\n\t\t\t} else if (horiz && !axis.isRadial && !labelOptions.step && !labelOptions.rotation && !old && opacity !== 0) {\n\t\t\t\ttick.handleOverflow(xy);\n\t\t\t}\n\n\t\t\t// apply step\n\t\t\tif (step && index % step) {\n\t\t\t\t// show those indices dividable by step\n\t\t\t\tshow = false;\n\t\t\t}\n\n\t\t\t// Set the new position, and show or hide\n\t\t\tif (show && !isNaN(xy.y)) {\n\t\t\t\txy.opacity = opacity;\n\t\t\t\tlabel[tick.isNew ? 'attr' : 'animate'](xy);\n\t\t\t\ttick.isNew = false;\n\t\t\t} else {\n\t\t\t\tlabel.attr('y', -9999); // #1338\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Destructor for the tick prototype\n\t */\n\tdestroy: function () {\n\t\tdestroyObjectProperties(this, this.axis);\n\t}\n};\n\n/**\n * The object wrapper for plot lines and plot bands\n * @param {Object} options\n */\nHighcharts.PlotLineOrBand = function (axis, options) {\n\tthis.axis = axis;\n\n\tif (options) {\n\t\tthis.options = options;\n\t\tthis.id = options.id;\n\t}\n};\n\nHighcharts.PlotLineOrBand.prototype = {\n\t\n\t/**\n\t * Render the plot line or plot band. If it is already existing,\n\t * move it.\n\t */\n\trender: function () {\n\t\tvar plotLine = this,\n\t\t\taxis = plotLine.axis,\n\t\t\thoriz = axis.horiz,\n\t\t\toptions = plotLine.options,\n\t\t\toptionsLabel = options.label,\n\t\t\tlabel = plotLine.label,\n\t\t\twidth = options.width,\n\t\t\tto = options.to,\n\t\t\tfrom = options.from,\n\t\t\tisBand = defined(from) && defined(to),\n\t\t\tvalue = options.value,\n\t\t\tdashStyle = options.dashStyle,\n\t\t\tsvgElem = plotLine.svgElem,\n\t\t\tpath = [],\n\t\t\taddEvent,\n\t\t\teventType,\n\t\t\txs,\n\t\t\tys,\n\t\t\tx,\n\t\t\ty,\n\t\t\tcolor = options.color,\n\t\t\tzIndex = options.zIndex,\n\t\t\tevents = options.events,\n\t\t\tattribs = {},\n\t\t\trenderer = axis.chart.renderer;\n\n\t\t// logarithmic conversion\n\t\tif (axis.isLog) {\n\t\t\tfrom = log2lin(from);\n\t\t\tto = log2lin(to);\n\t\t\tvalue = log2lin(value);\n\t\t}\n\n\t\t// plot line\n\t\tif (width) {\n\t\t\tpath = axis.getPlotLinePath(value, width);\n\t\t\tattribs = {\n\t\t\t\tstroke: color,\n\t\t\t\t'stroke-width': width\n\t\t\t};\n\t\t\tif (dashStyle) {\n\t\t\t\tattribs.dashstyle = dashStyle;\n\t\t\t}\n\t\t} else if (isBand) { // plot band\n\n\t\t\tpath = axis.getPlotBandPath(from, to, options);\n\t\t\tif (color) {\n\t\t\t\tattribs.fill = color;\n\t\t\t}\n\t\t\tif (options.borderWidth) {\n\t\t\t\tattribs.stroke = options.borderColor;\n\t\t\t\tattribs['stroke-width'] = options.borderWidth;\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t\t// zIndex\n\t\tif (defined(zIndex)) {\n\t\t\tattribs.zIndex = zIndex;\n\t\t}\n\n\t\t// common for lines and bands\n\t\tif (svgElem) {\n\t\t\tif (path) {\n\t\t\t\tsvgElem.animate({\n\t\t\t\t\td: path\n\t\t\t\t}, null, svgElem.onGetPath);\n\t\t\t} else {\n\t\t\t\tsvgElem.hide();\n\t\t\t\tsvgElem.onGetPath = function () {\n\t\t\t\t\tsvgElem.show();\n\t\t\t\t};\n\t\t\t\tif (label) {\n\t\t\t\t\tplotLine.label = label = label.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (path && path.length) {\n\t\t\tplotLine.svgElem = svgElem = renderer.path(path)\n\t\t\t\t.attr(attribs).add();\n\n\t\t\t// events\n\t\t\tif (events) {\n\t\t\t\taddEvent = function (eventType) {\n\t\t\t\t\tsvgElem.on(eventType, function (e) {\n\t\t\t\t\t\tevents[eventType].apply(plotLine, [e]);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tfor (eventType in events) {\n\t\t\t\t\taddEvent(eventType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// the plot band/line label\n\t\tif (optionsLabel && defined(optionsLabel.text) && path && path.length && axis.width > 0 && axis.height > 0) {\n\t\t\t// apply defaults\n\t\t\toptionsLabel = merge({\n\t\t\t\talign: horiz && isBand && 'center',\n\t\t\t\tx: horiz ? !isBand && 4 : 10,\n\t\t\t\tverticalAlign : !horiz && isBand && 'middle',\n\t\t\t\ty: horiz ? isBand ? 16 : 10 : isBand ? 6 : -4,\n\t\t\t\trotation: horiz && !isBand && 90\n\t\t\t}, optionsLabel);\n\n\t\t\t// add the SVG element\n\t\t\tif (!label) {\n\t\t\t\tattribs = {\n\t\t\t\t\talign: optionsLabel.textAlign || optionsLabel.align,\n\t\t\t\t\trotation: optionsLabel.rotation\n\t\t\t\t};\n\t\t\t\tif (defined(zIndex)) {\n\t\t\t\t\tattribs.zIndex = zIndex;\n\t\t\t\t}\n\t\t\t\tplotLine.label = label = renderer.text(\n\t\t\t\t\t\toptionsLabel.text,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\toptionsLabel.useHTML\n\t\t\t\t\t)\n\t\t\t\t\t.attr(attribs)\n\t\t\t\t\t.css(optionsLabel.style)\n\t\t\t\t\t.add();\n\t\t\t}\n\n\t\t\t// get the bounding box and align the label\n\t\t\t// #3000 changed to better handle choice between plotband or plotline\n\t\t\txs = [path[1], path[4], (isBand ? path[6] : path[1])];\n\t\t\tys = [path[2], path[5], (isBand ? path[7] : path[2])];\n\t\t\tx = arrayMin(xs);\n\t\t\ty = arrayMin(ys);\n\n\t\t\tlabel.align(optionsLabel, false, {\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\twidth: arrayMax(xs) - x,\n\t\t\t\theight: arrayMax(ys) - y\n\t\t\t});\n\t\t\tlabel.show();\n\n\t\t} else if (label) { // move out of sight\n\t\t\tlabel.hide();\n\t\t}\n\n\t\t// chainable\n\t\treturn plotLine;\n\t},\n\n\t/**\n\t * Remove the plot line or band\n\t */\n\tdestroy: function () {\n\t\t// remove it from the lookup\n\t\terase(this.axis.plotLinesAndBands, this);\n\t\t\n\t\tdelete this.axis;\n\t\tdestroyObjectProperties(this);\n\t}\n};\n\n/**\n * Object with members for extending the Axis prototype\n */\n\nAxisPlotLineOrBandExtension = {\n\n\t/**\n\t * Create the path for a plot band\n\t */ \n\tgetPlotBandPath: function (from, to) {\n\t\tvar toPath = this.getPlotLinePath(to, null, null, true),\n\t\t\tpath = this.getPlotLinePath(from, null, null, true);\n\n\t\tif (path && toPath && path.toString() !== toPath.toString()) { // #3836\n\t\t\tpath.push(\n\t\t\t\ttoPath[4],\n\t\t\t\ttoPath[5],\n\t\t\t\ttoPath[1],\n\t\t\t\ttoPath[2]\n\t\t\t);\n\t\t} else { // outside the axis area\n\t\t\tpath = null;\n\t\t}\n\t\t\n\t\treturn path;\n\t},\n\n\taddPlotBand: function (options) {\n\t\treturn this.addPlotBandOrLine(options, 'plotBands');\n\t},\n\t\n\taddPlotLine: function (options) {\n\t\treturn this.addPlotBandOrLine(options, 'plotLines');\n\t},\n\n\t/**\n\t * Add a plot band or plot line after render time\n\t *\n\t * @param options {Object} The plotBand or plotLine configuration object\n\t */\n\taddPlotBandOrLine: function (options, coll) {\n\t\tvar obj = new Highcharts.PlotLineOrBand(this, options).render(),\n\t\t\tuserOptions = this.userOptions;\n\n\t\tif (obj) { // #2189\n\t\t\t// Add it to the user options for exporting and Axis.update\n\t\t\tif (coll) {\n\t\t\t\tuserOptions[coll] = userOptions[coll] || [];\n\t\t\t\tuserOptions[coll].push(options); \n\t\t\t}\n\t\t\tthis.plotLinesAndBands.push(obj); \n\t\t}\n\t\t\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Remove a plot band or plot line from the chart by id\n\t * @param {Object} id\n\t */\n\tremovePlotBandOrLine: function (id) {\n\t\tvar plotLinesAndBands = this.plotLinesAndBands,\n\t\t\toptions = this.options,\n\t\t\tuserOptions = this.userOptions,\n\t\t\ti = plotLinesAndBands.length;\n\t\twhile (i--) {\n\t\t\tif (plotLinesAndBands[i].id === id) {\n\t\t\t\tplotLinesAndBands[i].destroy();\n\t\t\t}\n\t\t}\n\t\teach([options.plotLines || [], userOptions.plotLines || [], options.plotBands || [], userOptions.plotBands || []], function (arr) {\n\t\t\ti = arr.length;\n\t\t\twhile (i--) {\n\t\t\t\tif (arr[i].id === id) {\n\t\t\t\t\terase(arr, arr[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Create a new axis object\n * @param {Object} chart\n * @param {Object} options\n */\nvar Axis = Highcharts.Axis = function () {\n\tthis.init.apply(this, arguments);\n};\n\nAxis.prototype = {\n\n\t/**\n\t * Default options for the X axis - the Y axis has extended defaults\n\t */\n\tdefaultOptions: {\n\t\t// allowDecimals: null,\n\t\t// alternateGridColor: null,\n\t\t// categories: [],\n\t\tdateTimeLabelFormats: {\n\t\t\tmillisecond: '%H:%M:%S.%L',\n\t\t\tsecond: '%H:%M:%S',\n\t\t\tminute: '%H:%M',\n\t\t\thour: '%H:%M',\n\t\t\tday: '%e. %b',\n\t\t\tweek: '%e. %b',\n\t\t\tmonth: '%b \\'%y',\n\t\t\tyear: '%Y'\n\t\t},\n\t\tendOnTick: false,\n\t\tgridLineColor: '#D8D8D8',\n\t\t// gridLineDashStyle: 'solid',\n\t\t// gridLineWidth: 0,\n\t\t// reversed: false,\n\n\t\tlabels: {\n\t\t\tenabled: true,\n\t\t\t// rotation: 0,\n\t\t\t// align: 'center',\n\t\t\t// step: null,\n\t\t\tstyle: {\n\t\t\t\tcolor: '#606060',\n\t\t\t\tcursor: 'default',\n\t\t\t\tfontSize: '11px'\n\t\t\t},\n\t\t\tx: 0,\n\t\t\ty: 15\n\t\t\t/*formatter: function () {\n\t\t\t\treturn this.value;\n\t\t\t},*/\n\t\t},\n\t\tlineColor: '#C0D0E0',\n\t\tlineWidth: 1,\n\t\t//linkedTo: null,\n\t\t//max: undefined,\n\t\t//min: undefined,\n\t\tminPadding: 0.01,\n\t\tmaxPadding: 0.01,\n\t\t//minRange: null,\n\t\tminorGridLineColor: '#E0E0E0',\n\t\t// minorGridLineDashStyle: null,\n\t\tminorGridLineWidth: 1,\n\t\tminorTickColor: '#A0A0A0',\n\t\t//minorTickInterval: null,\n\t\tminorTickLength: 2,\n\t\tminorTickPosition: 'outside', // inside or outside\n\t\t//minorTickWidth: 0,\n\t\t//opposite: false,\n\t\t//offset: 0,\n\t\t//plotBands: [{\n\t\t//\tevents: {},\n\t\t//\tzIndex: 1,\n\t\t//\tlabels: { align, x, verticalAlign, y, style, rotation, textAlign }\n\t\t//}],\n\t\t//plotLines: [{\n\t\t//\tevents: {}\n\t\t//  dashStyle: {}\n\t\t//\tzIndex:\n\t\t//\tlabels: { align, x, verticalAlign, y, style, rotation, textAlign }\n\t\t//}],\n\t\t//reversed: false,\n\t\t// showFirstLabel: true,\n\t\t// showLastLabel: true,\n\t\tstartOfWeek: 1,\n\t\tstartOnTick: false,\n\t\ttickColor: '#C0D0E0',\n\t\t//tickInterval: null,\n\t\ttickLength: 10,\n\t\ttickmarkPlacement: 'between', // on or between\n\t\ttickPixelInterval: 100,\n\t\ttickPosition: 'outside',\n\t\ttickWidth: 1,\n\t\ttitle: {\n\t\t\t//text: null,\n\t\t\talign: 'middle', // low, middle or high\n\t\t\t//margin: 0 for horizontal, 10 for vertical axes,\n\t\t\t//rotation: 0,\n\t\t\t//side: 'outside',\n\t\t\tstyle: {\n\t\t\t\tcolor: '#707070'\n\t\t\t}\n\t\t\t//x: 0,\n\t\t\t//y: 0\n\t\t},\n\t\ttype: 'linear' // linear, logarithmic or datetime\n\t},\n\n\t/**\n\t * This options set extends the defaultOptions for Y axes\n\t */\n\tdefaultYAxisOptions: {\n\t\tendOnTick: true,\n\t\tgridLineWidth: 1,\n\t\ttickPixelInterval: 72,\n\t\tshowLastLabel: true,\n\t\tlabels: {\n\t\t\tx: -8,\n\t\t\ty: 3\n\t\t},\n\t\tlineWidth: 0,\n\t\tmaxPadding: 0.05,\n\t\tminPadding: 0.05,\n\t\tstartOnTick: true,\n\t\ttickWidth: 0,\n\t\ttitle: {\n\t\t\trotation: 270,\n\t\t\ttext: 'Values'\n\t\t},\n\t\tstackLabels: {\n\t\t\tenabled: false,\n\t\t\t//align: dynamic,\n\t\t\t//y: dynamic,\n\t\t\t//x: dynamic,\n\t\t\t//verticalAlign: dynamic,\n\t\t\t//textAlign: dynamic,\n\t\t\t//rotation: 0,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.total, -1);\n\t\t\t},\n\t\t\tstyle: merge(defaultPlotOptions.line.dataLabels.style, { color: '#000000' })\n\t\t}\n\t},\n\n\t/**\n\t * These options extend the defaultOptions for left axes\n\t */\n\tdefaultLeftAxisOptions: {\n\t\tlabels: {\n\t\t\tx: -15,\n\t\t\ty: null\n\t\t},\n\t\ttitle: {\n\t\t\trotation: 270\n\t\t}\n\t},\n\n\t/**\n\t * These options extend the defaultOptions for right axes\n\t */\n\tdefaultRightAxisOptions: {\n\t\tlabels: {\n\t\t\tx: 15,\n\t\t\ty: null\n\t\t},\n\t\ttitle: {\n\t\t\trotation: 90\n\t\t}\n\t},\n\n\t/**\n\t * These options extend the defaultOptions for bottom axes\n\t */\n\tdefaultBottomAxisOptions: {\n\t\tlabels: {\n\t\t\tautoRotation: [-45],\n\t\t\tx: 0,\n\t\t\ty: null // based on font size\n\t\t\t// overflow: undefined,\n\t\t\t// staggerLines: null\n\t\t},\n\t\ttitle: {\n\t\t\trotation: 0\n\t\t}\n\t},\n\t/**\n\t * These options extend the defaultOptions for top axes\n\t */\n\tdefaultTopAxisOptions: {\n\t\tlabels: {\n\t\t\tautoRotation: [-45],\n\t\t\tx: 0,\n\t\t\ty: -15\n\t\t\t// overflow: undefined\n\t\t\t// staggerLines: null\n\t\t},\n\t\ttitle: {\n\t\t\trotation: 0\n\t\t}\n\t},\n\n\t/**\n\t * Initialize the axis\n\t */\n\tinit: function (chart, userOptions) {\n\n\n\t\tvar isXAxis = userOptions.isX,\n\t\t\taxis = this;\n\n\t\t// Flag, is the axis horizontal\n\t\taxis.horiz = chart.inverted ? !isXAxis : isXAxis;\n\n\t\t// Flag, isXAxis\n\t\taxis.isXAxis = isXAxis;\n\t\taxis.coll = isXAxis ? 'xAxis' : 'yAxis';\n\n\t\taxis.opposite = userOptions.opposite; // needed in setOptions\n\t\taxis.side = userOptions.side || (axis.horiz ?\n\t\t\t\t(axis.opposite ? 0 : 2) : // top : bottom\n\t\t\t\t(axis.opposite ? 1 : 3));  // right : left\n\n\t\taxis.setOptions(userOptions);\n\n\n\t\tvar options = this.options,\n\t\t\ttype = options.type,\n\t\t\tisDatetimeAxis = type === 'datetime';\n\n\t\taxis.labelFormatter = options.labels.formatter || axis.defaultLabelFormatter; // can be overwritten by dynamic format\n\n\n\t\t// Flag, stagger lines or not\n\t\taxis.userOptions = userOptions;\n\n\t\t//axis.axisTitleMargin = UNDEFINED,// = options.title.margin,\n\t\taxis.minPixelPadding = 0;\n\t\t//axis.ignoreMinPadding = UNDEFINED; // can be set to true by a column or bar series\n\t\t//axis.ignoreMaxPadding = UNDEFINED;\n\n\t\taxis.chart = chart;\n\t\taxis.reversed = options.reversed;\n\t\taxis.zoomEnabled = options.zoomEnabled !== false;\n\n\t\t// Initial categories\n\t\taxis.categories = options.categories || type === 'category';\n\t\taxis.names = axis.names || []; // Preserve on update (#3830)\n\n\t\t// Elements\n\t\t//axis.axisGroup = UNDEFINED;\n\t\t//axis.gridGroup = UNDEFINED;\n\t\t//axis.axisTitle = UNDEFINED;\n\t\t//axis.axisLine = UNDEFINED;\n\n\t\t// Shorthand types\n\t\taxis.isLog = type === 'logarithmic';\n\t\taxis.isDatetimeAxis = isDatetimeAxis;\n\n\t\t// Flag, if axis is linked to another axis\n\t\taxis.isLinked = defined(options.linkedTo);\n\t\t// Linked axis.\n\t\t//axis.linkedParent = UNDEFINED;\n\n\t\t// Tick positions\n\t\t//axis.tickPositions = UNDEFINED; // array containing predefined positions\n\t\t// Tick intervals\n\t\t//axis.tickInterval = UNDEFINED;\n\t\t//axis.minorTickInterval = UNDEFINED;\n\n\t\t\n\t\t// Major ticks\n\t\taxis.ticks = {};\n\t\taxis.labelEdge = [];\n\t\t// Minor ticks\n\t\taxis.minorTicks = {};\n\n\t\t// List of plotLines/Bands\n\t\taxis.plotLinesAndBands = [];\n\n\t\t// Alternate bands\n\t\taxis.alternateBands = {};\n\n\t\t// Axis metrics\n\t\t//axis.left = UNDEFINED;\n\t\t//axis.top = UNDEFINED;\n\t\t//axis.width = UNDEFINED;\n\t\t//axis.height = UNDEFINED;\n\t\t//axis.bottom = UNDEFINED;\n\t\t//axis.right = UNDEFINED;\n\t\t//axis.transA = UNDEFINED;\n\t\t//axis.transB = UNDEFINED;\n\t\t//axis.oldTransA = UNDEFINED;\n\t\taxis.len = 0;\n\t\t//axis.oldMin = UNDEFINED;\n\t\t//axis.oldMax = UNDEFINED;\n\t\t//axis.oldUserMin = UNDEFINED;\n\t\t//axis.oldUserMax = UNDEFINED;\n\t\t//axis.oldAxisLength = UNDEFINED;\n\t\taxis.minRange = axis.userMinRange = options.minRange || options.maxZoom;\n\t\taxis.range = options.range;\n\t\taxis.offset = options.offset || 0;\n\n\n\t\t// Dictionary for stacks\n\t\taxis.stacks = {};\n\t\taxis.oldStacks = {};\n\t\t\n\t\t// Min and max in the data\n\t\t//axis.dataMin = UNDEFINED,\n\t\t//axis.dataMax = UNDEFINED,\n\n\t\t// The axis range\n\t\taxis.max = null;\n\t\taxis.min = null;\n\n\t\t// User set min and max\n\t\t//axis.userMin = UNDEFINED,\n\t\t//axis.userMax = UNDEFINED,\n\n\t\t// Crosshair options\n\t\taxis.crosshair = pick(options.crosshair, splat(chart.options.tooltip.crosshairs)[isXAxis ? 0 : 1], false);\n\t\t// Run Axis\n\n\t\tvar eventType,\n\t\t\tevents = axis.options.events;\n\n\t\t// Register\n\t\tif (inArray(axis, chart.axes) === -1) { // don't add it again on Axis.update()\n\t\t\tif (isXAxis && !this.isColorAxis) { // #2713\n\t\t\t\tchart.axes.splice(chart.xAxis.length, 0, axis);\n\t\t\t} else {\n\t\t\t\tchart.axes.push(axis);\n\t\t\t}\n\n\t\t\tchart[axis.coll].push(axis);\n\t\t}\n\n\t\taxis.series = axis.series || []; // populated by Series\n\n\t\t// inverted charts have reversed xAxes as default\n\t\tif (chart.inverted && isXAxis && axis.reversed === UNDEFINED) {\n\t\t\taxis.reversed = true;\n\t\t}\n\n\t\taxis.removePlotBand = axis.removePlotBandOrLine;\n\t\taxis.removePlotLine = axis.removePlotBandOrLine;\n\n\n\t\t// register event listeners\n\t\tfor (eventType in events) {\n\t\t\taddEvent(axis, eventType, events[eventType]);\n\t\t}\n\n\t\t// extend logarithmic axis\n\t\tif (axis.isLog) {\n\t\t\taxis.val2lin = log2lin;\n\t\t\taxis.lin2val = lin2log;\n\t\t}\n\t},\n\n\t/**\n\t * Merge and set options\n\t */\n\tsetOptions: function (userOptions) {\n\t\tthis.options = merge(\n\t\t\tthis.defaultOptions,\n\t\t\tthis.isXAxis ? {} : this.defaultYAxisOptions,\n\t\t\t[this.defaultTopAxisOptions, this.defaultRightAxisOptions,\n\t\t\t\tthis.defaultBottomAxisOptions, this.defaultLeftAxisOptions][this.side],\n\t\t\tmerge(\n\t\t\t\tdefaultOptions[this.coll], // if set in setOptions (#1053)\n\t\t\t\tuserOptions\n\t\t\t)\n\t\t);\n\t},\n\n\t/**\n\t * The default label formatter. The context is a special config object for the label.\n\t */\n\tdefaultLabelFormatter: function () {\n\t\tvar axis = this.axis,\n\t\t\tvalue = this.value,\n\t\t\tcategories = axis.categories,\n\t\t\tdateTimeLabelFormat = this.dateTimeLabelFormat,\n\t\t\tnumericSymbols = defaultOptions.lang.numericSymbols,\n\t\t\ti = numericSymbols && numericSymbols.length,\n\t\t\tmulti,\n\t\t\tret,\n\t\t\tformatOption = axis.options.labels.format,\n\n\t\t\t// make sure the same symbol is added for all labels on a linear axis\n\t\t\tnumericSymbolDetector = axis.isLog ? value : axis.tickInterval;\n\n\t\tif (formatOption) {\n\t\t\tret = format(formatOption, this);\n\n\t\t} else if (categories) {\n\t\t\tret = value;\n\n\t\t} else if (dateTimeLabelFormat) { // datetime axis\n\t\t\tret = dateFormat(dateTimeLabelFormat, value);\n\n\t\t} else if (i && numericSymbolDetector >= 1000) {\n\t\t\t// Decide whether we should add a numeric symbol like k (thousands) or M (millions).\n\t\t\t// If we are to enable this in tooltip or other places as well, we can move this\n\t\t\t// logic to the numberFormatter and enable it by a parameter.\n\t\t\twhile (i-- && ret === UNDEFINED) {\n\t\t\t\tmulti = Math.pow(1000, i + 1);\n\t\t\t\tif (numericSymbolDetector >= multi && (value * 10) % multi === 0 && numericSymbols[i] !== null) {\n\t\t\t\t\tret = Highcharts.numberFormat(value / multi, -1) + numericSymbols[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (ret === UNDEFINED) {\n\t\t\tif (mathAbs(value) >= 10000) { // add thousands separators\n\t\t\t\tret = Highcharts.numberFormat(value, -1);\n\n\t\t\t} else { // small numbers\n\t\t\t\tret = Highcharts.numberFormat(value, -1, UNDEFINED, ''); // #2466\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\t/**\n\t * Get the minimum and maximum for the series of each axis\n\t */\n\tgetSeriesExtremes: function () {\n\t\tvar axis = this,\n\t\t\tchart = axis.chart;\n\n\t\taxis.hasVisibleSeries = false;\n\n\t\t// Reset properties in case we're redrawing (#3353)\n\t\taxis.dataMin = axis.dataMax = axis.ignoreMinPadding = axis.ignoreMaxPadding = null;\n\t\t\n\t\tif (axis.buildStacks) {\n\t\t\taxis.buildStacks();\n\t\t}\n\n\t\t// loop through this axis' series\n\t\teach(axis.series, function (series) {\n\n\t\t\tif (series.visible || !chart.options.chart.ignoreHiddenSeries) {\n\n\t\t\t\tvar seriesOptions = series.options,\n\t\t\t\t\txData,\n\t\t\t\t\tthreshold = seriesOptions.threshold,\n\t\t\t\t\tseriesDataMin,\n\t\t\t\t\tseriesDataMax;\n\n\t\t\t\taxis.hasVisibleSeries = true;\n\n\t\t\t\t// Validate threshold in logarithmic axes\n\t\t\t\tif (axis.isLog && threshold <= 0) {\n\t\t\t\t\tthreshold = null;\n\t\t\t\t}\n\n\t\t\t\t// Get dataMin and dataMax for X axes\n\t\t\t\tif (axis.isXAxis) {\n\t\t\t\t\txData = series.xData;\n\t\t\t\t\tif (xData.length) {\n\t\t\t\t\t\taxis.dataMin = mathMin(pick(axis.dataMin, xData[0]), arrayMin(xData));\n\t\t\t\t\t\taxis.dataMax = mathMax(pick(axis.dataMax, xData[0]), arrayMax(xData));\n\t\t\t\t\t}\n\n\t\t\t\t// Get dataMin and dataMax for Y axes, as well as handle stacking and processed data\n\t\t\t\t} else {\n\n\t\t\t\t\t// Get this particular series extremes\n\t\t\t\t\tseries.getExtremes();\n\t\t\t\t\tseriesDataMax = series.dataMax;\n\t\t\t\t\tseriesDataMin = series.dataMin;\n\n\t\t\t\t\t// Get the dataMin and dataMax so far. If percentage is used, the min and max are\n\t\t\t\t\t// always 0 and 100. If seriesDataMin and seriesDataMax is null, then series\n\t\t\t\t\t// doesn't have active y data, we continue with nulls\n\t\t\t\t\tif (defined(seriesDataMin) && defined(seriesDataMax)) {\n\t\t\t\t\t\taxis.dataMin = mathMin(pick(axis.dataMin, seriesDataMin), seriesDataMin);\n\t\t\t\t\t\taxis.dataMax = mathMax(pick(axis.dataMax, seriesDataMax), seriesDataMax);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Adjust to threshold\n\t\t\t\t\tif (defined(threshold)) {\n\t\t\t\t\t\tif (axis.dataMin >= threshold) {\n\t\t\t\t\t\t\taxis.dataMin = threshold;\n\t\t\t\t\t\t\taxis.ignoreMinPadding = true;\n\t\t\t\t\t\t} else if (axis.dataMax < threshold) {\n\t\t\t\t\t\t\taxis.dataMax = threshold;\n\t\t\t\t\t\t\taxis.ignoreMaxPadding = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Translate from axis value to pixel position on the chart, or back\n\t *\n\t */\n\ttranslate: function (val, backwards, cvsCoord, old, handleLog, pointPlacement) {\n\t\tvar axis = this.linkedParent || this, // #1417\n\t\t\tsign = 1,\n\t\t\tcvsOffset = 0,\n\t\t\tlocalA = old ? axis.oldTransA : axis.transA,\n\t\t\tlocalMin = old ? axis.oldMin : axis.min,\n\t\t\treturnValue,\n\t\t\tminPixelPadding = axis.minPixelPadding,\n\t\t\tdoPostTranslate = (axis.doPostTranslate || (axis.isLog && handleLog)) && axis.lin2val;\n\n\t\tif (!localA) {\n\t\t\tlocalA = axis.transA;\n\t\t}\n\n\t\t// In vertical axes, the canvas coordinates start from 0 at the top like in\n\t\t// SVG.\n\t\tif (cvsCoord) {\n\t\t\tsign *= -1; // canvas coordinates inverts the value\n\t\t\tcvsOffset = axis.len;\n\t\t}\n\n\t\t// Handle reversed axis\n\t\tif (axis.reversed) {\n\t\t\tsign *= -1;\n\t\t\tcvsOffset -= sign * (axis.sector || axis.len);\n\t\t}\n\n\t\t// From pixels to value\n\t\tif (backwards) { // reverse translation\n\n\t\t\tval = val * sign + cvsOffset;\n\t\t\tval -= minPixelPadding;\n\t\t\treturnValue = val / localA + localMin; // from chart pixel to value\n\t\t\tif (doPostTranslate) { // log and ordinal axes\n\t\t\t\treturnValue = axis.lin2val(returnValue);\n\t\t\t}\n\n\t\t// From value to pixels\n\t\t} else {\n\t\t\tif (doPostTranslate) { // log and ordinal axes\n\t\t\t\tval = axis.val2lin(val);\n\t\t\t}\n\t\t\tif (pointPlacement === 'between') {\n\t\t\t\tpointPlacement = 0.5;\n\t\t\t}\n\t\t\treturnValue = sign * (val - localMin) * localA + cvsOffset + (sign * minPixelPadding) +\n\t\t\t\t(isNumber(pointPlacement) ? localA * pointPlacement * axis.pointRange : 0);\n\t\t}\n\n\t\treturn returnValue;\n\t},\n\n\t/**\n\t * Utility method to translate an axis value to pixel position.\n\t * @param {Number} value A value in terms of axis units\n\t * @param {Boolean} paneCoordinates Whether to return the pixel coordinate relative to the chart\n\t *        or just the axis/pane itself.\n\t */\n\ttoPixels: function (value, paneCoordinates) {\n\t\treturn this.translate(value, false, !this.horiz, null, true) + (paneCoordinates ? 0 : this.pos);\n\t},\n\n\t/*\n\t * Utility method to translate a pixel position in to an axis value\n\t * @param {Number} pixel The pixel value coordinate\n\t * @param {Boolean} paneCoordiantes Whether the input pixel is relative to the chart or just the\n\t *        axis/pane itself.\n\t */\n\ttoValue: function (pixel, paneCoordinates) {\n\t\treturn this.translate(pixel - (paneCoordinates ? 0 : this.pos), true, !this.horiz, null, true);\n\t},\n\n\t/**\n\t * Create the path for a plot line that goes from the given value on\n\t * this axis, across the plot to the opposite side\n\t * @param {Number} value\n\t * @param {Number} lineWidth Used for calculation crisp line\n\t * @param {Number] old Use old coordinates (for resizing and rescaling)\n\t */\n\tgetPlotLinePath: function (value, lineWidth, old, force, translatedValue) {\n\t\tvar axis = this,\n\t\t\tchart = axis.chart,\n\t\t\taxisLeft = axis.left,\n\t\t\taxisTop = axis.top,\n\t\t\tx1,\n\t\t\ty1,\n\t\t\tx2,\n\t\t\ty2,\n\t\t\tcHeight = (old && chart.oldChartHeight) || chart.chartHeight,\n\t\t\tcWidth = (old && chart.oldChartWidth) || chart.chartWidth,\n\t\t\tskip,\n\t\t\ttransB = axis.transB,\n\t\t\t/**\n\t\t\t * Check if x is between a and b. If not, either move to a/b or skip, \n\t\t\t * depending on the force parameter.\n\t\t\t */\n\t\t\tbetween = function (x, a, b) {\n\t\t\t\tif (x < a || x > b) {\n\t\t\t\t\tif (force) {\n\t\t\t\t\t\tx = mathMin(mathMax(a, x), b);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn x;\n\t\t\t};\n\n\t\ttranslatedValue = pick(translatedValue, axis.translate(value, null, null, old));\n\t\tx1 = x2 = mathRound(translatedValue + transB);\n\t\ty1 = y2 = mathRound(cHeight - translatedValue - transB);\n\n\t\tif (isNaN(translatedValue)) { // no min or max\n\t\t\tskip = true;\n\n\t\t} else if (axis.horiz) {\n\t\t\ty1 = axisTop;\n\t\t\ty2 = cHeight - axis.bottom;\n\t\t\tx1 = x2 = between(x1, axisLeft, axisLeft + axis.width);\n\t\t} else {\n\t\t\tx1 = axisLeft;\n\t\t\tx2 = cWidth - axis.right;\n\t\t\ty1 = y2 = between(y1, axisTop, axisTop + axis.height);\n\t\t}\n\t\treturn skip && !force ?\n\t\t\tnull :\n\t\t\tchart.renderer.crispLine([M, x1, y1, L, x2, y2], lineWidth || 1);\n\t},\n\n\t/**\n\t * Set the tick positions of a linear axis to round values like whole tens or every five.\n\t */\n\tgetLinearTickPositions: function (tickInterval, min, max) {\n\t\tvar pos,\n\t\t\tlastPos,\n\t\t\troundedMin = correctFloat(mathFloor(min / tickInterval) * tickInterval),\n\t\t\troundedMax = correctFloat(mathCeil(max / tickInterval) * tickInterval),\n\t\t\ttickPositions = [];\n\n\t\t// For single points, add a tick regardless of the relative position (#2662)\n\t\tif (min === max && isNumber(min)) {\n\t\t\treturn [min];\n\t\t}\n\n\t\t// Populate the intermediate values\n\t\tpos = roundedMin;\n\t\twhile (pos <= roundedMax) {\n\n\t\t\t// Place the tick on the rounded value\n\t\t\ttickPositions.push(pos);\n\n\t\t\t// Always add the raw tickInterval, not the corrected one.\n\t\t\tpos = correctFloat(pos + tickInterval);\n\n\t\t\t// If the interval is not big enough in the current min - max range to actually increase\n\t\t\t// the loop variable, we need to break out to prevent endless loop. Issue #619\n\t\t\tif (pos === lastPos) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Record the last value\n\t\t\tlastPos = pos;\n\t\t}\n\t\treturn tickPositions;\n\t},\n\n\t/**\n\t * Return the minor tick positions. For logarithmic axes, reuse the same logic\n\t * as for major ticks.\n\t */\n\tgetMinorTickPositions: function () {\n\t\tvar axis = this,\n\t\t\toptions = axis.options,\n\t\t\ttickPositions = axis.tickPositions,\n\t\t\tminorTickInterval = axis.minorTickInterval,\n\t\t\tminorTickPositions = [],\n\t\t\tpos,\n\t\t\ti,\n\t\t\tmin = axis.min,\n\t\t\tmax = axis.max,\n\t\t\trange = max - min,\n\t\t\tlen;\n\n\t\t// If minor ticks get too dense, they are hard to read, and may cause long running script. So we don't draw them.\n\t\tif (range && range / minorTickInterval < axis.len / 3) { // #3875\n\n\t\t\tif (axis.isLog) {\n\t\t\t\tlen = tickPositions.length;\n\t\t\t\tfor (i = 1; i < len; i++) {\n\t\t\t\t\tminorTickPositions = minorTickPositions.concat(\n\t\t\t\t\t\taxis.getLogTickPositions(minorTickInterval, tickPositions[i - 1], tickPositions[i], true)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (axis.isDatetimeAxis && options.minorTickInterval === 'auto') { // #1314\n\t\t\t\tminorTickPositions = minorTickPositions.concat(\n\t\t\t\t\taxis.getTimeTicks(\n\t\t\t\t\t\taxis.normalizeTimeTickInterval(minorTickInterval),\n\t\t\t\t\t\tmin,\n\t\t\t\t\t\tmax,\n\t\t\t\t\t\toptions.startOfWeek\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tfor (pos = min + (tickPositions[0] - min) % minorTickInterval; pos <= max; pos += minorTickInterval) {\n\t\t\t\t\tminorTickPositions.push(pos);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\taxis.trimTicks(minorTickPositions); // #3652 #3743\n\t\treturn minorTickPositions;\n\t},\n\n\t/**\n\t * Adjust the min and max for the minimum range. Keep in mind that the series data is\n\t * not yet processed, so we don't have information on data cropping and grouping, or\n\t * updated axis.pointRange or series.pointRange. The data can't be processed until\n\t * we have finally established min and max.\n\t */\n\tadjustForMinRange: function () {\n\t\tvar axis = this,\n\t\t\toptions = axis.options,\n\t\t\tmin = axis.min,\n\t\t\tmax = axis.max,\n\t\t\tzoomOffset,\n\t\t\tspaceAvailable = axis.dataMax - axis.dataMin >= axis.minRange,\n\t\t\tclosestDataRange,\n\t\t\ti,\n\t\t\tdistance,\n\t\t\txData,\n\t\t\tloopLength,\n\t\t\tminArgs,\n\t\t\tmaxArgs;\n\n\t\t// Set the automatic minimum range based on the closest point distance\n\t\tif (axis.isXAxis && axis.minRange === UNDEFINED && !axis.isLog) {\n\n\t\t\tif (defined(options.min) || defined(options.max)) {\n\t\t\t\taxis.minRange = null; // don't do this again\n\n\t\t\t} else {\n\n\t\t\t\t// Find the closest distance between raw data points, as opposed to\n\t\t\t\t// closestPointRange that applies to processed points (cropped and grouped)\n\t\t\t\teach(axis.series, function (series) {\n\t\t\t\t\txData = series.xData;\n\t\t\t\t\tloopLength = series.xIncrement ? 1 : xData.length - 1;\n\t\t\t\t\tfor (i = loopLength; i > 0; i--) {\n\t\t\t\t\t\tdistance = xData[i] - xData[i - 1];\n\t\t\t\t\t\tif (closestDataRange === UNDEFINED || distance < closestDataRange) {\n\t\t\t\t\t\t\tclosestDataRange = distance;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\taxis.minRange = mathMin(closestDataRange * 5, axis.dataMax - axis.dataMin);\n\t\t\t}\n\t\t}\n\n\t\t// if minRange is exceeded, adjust\n\t\tif (max - min < axis.minRange) {\n\t\t\tvar minRange = axis.minRange;\n\t\t\tzoomOffset = (minRange - max + min) / 2;\n\n\t\t\t// if min and max options have been set, don't go beyond it\n\t\t\tminArgs = [min - zoomOffset, pick(options.min, min - zoomOffset)];\n\t\t\tif (spaceAvailable) { // if space is available, stay within the data range\n\t\t\t\tminArgs[2] = axis.dataMin;\n\t\t\t}\n\t\t\tmin = arrayMax(minArgs);\n\n\t\t\tmaxArgs = [min + minRange, pick(options.max, min + minRange)];\n\t\t\tif (spaceAvailable) { // if space is availabe, stay within the data range\n\t\t\t\tmaxArgs[2] = axis.dataMax;\n\t\t\t}\n\n\t\t\tmax = arrayMin(maxArgs);\n\n\t\t\t// now if the max is adjusted, adjust the min back\n\t\t\tif (max - min < minRange) {\n\t\t\t\tminArgs[0] = max - minRange;\n\t\t\t\tminArgs[1] = pick(options.min, max - minRange);\n\t\t\t\tmin = arrayMax(minArgs);\n\t\t\t}\n\t\t}\n\n\t\t// Record modified extremes\n\t\taxis.min = min;\n\t\taxis.max = max;\n\t},\n\n\t/**\n\t * Update translation information\n\t */\n\tsetAxisTranslation: function (saveOld) {\n\t\tvar axis = this,\n\t\t\trange = axis.max - axis.min,\n\t\t\tpointRange = axis.axisPointRange || 0,\n\t\t\tclosestPointRange,\n\t\t\tminPointOffset = 0,\n\t\t\tpointRangePadding = 0,\n\t\t\tlinkedParent = axis.linkedParent,\n\t\t\tordinalCorrection,\n\t\t\thasCategories = !!axis.categories,\n\t\t\ttransA = axis.transA,\n\t\t\tisXAxis = axis.isXAxis;\n\n\t\t// Adjust translation for padding. Y axis with categories need to go through the same (#1784).\n\t\tif (isXAxis || hasCategories || pointRange) {\n\t\t\tif (linkedParent) {\n\t\t\t\tminPointOffset = linkedParent.minPointOffset;\n\t\t\t\tpointRangePadding = linkedParent.pointRangePadding;\n\n\t\t\t} else {\n\t\t\t\teach(axis.series, function (series) {\n\t\t\t\t\tvar seriesPointRange = hasCategories ? 1 : (isXAxis ? series.pointRange : (axis.axisPointRange || 0)), // #2806\n\t\t\t\t\t\tpointPlacement = series.options.pointPlacement,\n\t\t\t\t\t\tseriesClosestPointRange = series.closestPointRange;\n\n\t\t\t\t\tif (seriesPointRange > range) { // #1446\n\t\t\t\t\t\tseriesPointRange = 0;\n\t\t\t\t\t}\n\t\t\t\t\tpointRange = mathMax(pointRange, seriesPointRange);\n\n\t\t\t\t\tif (!axis.single) {\n\t\t\t\t\t\t// minPointOffset is the value padding to the left of the axis in order to make\n\t\t\t\t\t\t// room for points with a pointRange, typically columns. When the pointPlacement option\n\t\t\t\t\t\t// is 'between' or 'on', this padding does not apply.\n\t\t\t\t\t\tminPointOffset = mathMax(\n\t\t\t\t\t\t\tminPointOffset,\n\t\t\t\t\t\t\tisString(pointPlacement) ? 0 : seriesPointRange / 2\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Determine the total padding needed to the length of the axis to make room for the\n\t\t\t\t\t\t// pointRange. If the series' pointPlacement is 'on', no padding is added.\n\t\t\t\t\t\tpointRangePadding = mathMax(\n\t\t\t\t\t\t\tpointRangePadding,\n\t\t\t\t\t\t\tpointPlacement === 'on' ? 0 : seriesPointRange\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set the closestPointRange\n\t\t\t\t\tif (!series.noSharedTooltip && defined(seriesClosestPointRange)) {\n\t\t\t\t\t\tclosestPointRange = defined(closestPointRange) ?\n\t\t\t\t\t\t\tmathMin(closestPointRange, seriesClosestPointRange) :\n\t\t\t\t\t\t\tseriesClosestPointRange;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Record minPointOffset and pointRangePadding\n\t\t\tordinalCorrection = axis.ordinalSlope && closestPointRange ? axis.ordinalSlope / closestPointRange : 1; // #988, #1853\n\t\t\taxis.minPointOffset = minPointOffset = minPointOffset * ordinalCorrection;\n\t\t\taxis.pointRangePadding = pointRangePadding = pointRangePadding * ordinalCorrection;\n\n\t\t\t// pointRange means the width reserved for each point, like in a column chart\n\t\t\taxis.pointRange = mathMin(pointRange, range);\n\n\t\t\t// closestPointRange means the closest distance between points. In columns\n\t\t\t// it is mostly equal to pointRange, but in lines pointRange is 0 while closestPointRange\n\t\t\t// is some other value\n\t\t\tif (isXAxis) {\n\t\t\t\taxis.closestPointRange = closestPointRange;\n\t\t\t}\n\t\t}\n\n\t\t// Secondary values\n\t\tif (saveOld) {\n\t\t\taxis.oldTransA = transA;\n\t\t}\n\t\taxis.translationSlope = axis.transA = transA = axis.len / ((range + pointRangePadding) || 1);\n\t\taxis.transB = axis.horiz ? axis.left : axis.bottom; // translation addend\n\t\taxis.minPixelPadding = transA * minPointOffset;\n\t},\n\n\t/**\n\t * Set the tick positions to round values and optionally extend the extremes\n\t * to the nearest tick\n\t */\n\tsetTickInterval: function (secondPass) {\n\t\tvar axis = this,\n\t\t\tchart = axis.chart,\n\t\t\toptions = axis.options,\n\t\t\tisLog = axis.isLog,\n\t\t\tisDatetimeAxis = axis.isDatetimeAxis,\n\t\t\tisXAxis = axis.isXAxis,\n\t\t\tisLinked = axis.isLinked,\n\t\t\tmaxPadding = options.maxPadding,\n\t\t\tminPadding = options.minPadding,\n\t\t\tlength,\n\t\t\tlinkedParentExtremes,\n\t\t\ttickIntervalOption = options.tickInterval,\n\t\t\tminTickInterval,\n\t\t\ttickPixelIntervalOption = options.tickPixelInterval,\n\t\t\tcategories = axis.categories;\n\n\t\tif (!isDatetimeAxis && !categories && !isLinked) {\n\t\t\tthis.getTickAmount();\n\t\t}\n\n\t\t// linked axis gets the extremes from the parent axis\n\t\tif (isLinked) {\n\t\t\taxis.linkedParent = chart[axis.coll][options.linkedTo];\n\t\t\tlinkedParentExtremes = axis.linkedParent.getExtremes();\n\t\t\taxis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);\n\t\t\taxis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);\n\t\t\tif (options.type !== axis.linkedParent.options.type) {\n\t\t\t\terror(11, 1); // Can't link axes of different type\n\t\t\t}\n\t\t} else { // initial min and max from the extreme data values\n\t\t\taxis.min = pick(axis.userMin, options.min, axis.dataMin);\n\t\t\taxis.max = pick(axis.userMax, options.max, axis.dataMax);\n\t\t}\n\n\t\tif (isLog) {\n\t\t\tif (!secondPass && mathMin(axis.min, pick(axis.dataMin, axis.min)) <= 0) { // #978\n\t\t\t\terror(10, 1); // Can't plot negative values on log axis\n\t\t\t}\n\t\t\taxis.min = correctFloat(log2lin(axis.min)); // correctFloat cures #934\n\t\t\taxis.max = correctFloat(log2lin(axis.max));\n\t\t}\n\n\t\t// handle zoomed range\n\t\tif (axis.range && defined(axis.max)) {\n\t\t\taxis.userMin = axis.min = mathMax(axis.min, axis.max - axis.range); // #618\n\t\t\taxis.userMax = axis.max;\n\n\t\t\taxis.range = null;  // don't use it when running setExtremes\n\t\t}\n\n\t\t// Hook for adjusting this.min and this.max. Used by bubble series.\n\t\tif (axis.beforePadding) {\n\t\t\taxis.beforePadding();\n\t\t}\n\n\t\t// adjust min and max for the minimum range\n\t\taxis.adjustForMinRange();\n\n\t\t// Pad the values to get clear of the chart's edges. To avoid tickInterval taking the padding\n\t\t// into account, we do this after computing tick interval (#1337).\n\t\tif (!categories && !axis.axisPointRange && !axis.usePercentage && !isLinked && defined(axis.min) && defined(axis.max)) {\n\t\t\tlength = axis.max - axis.min;\n\t\t\tif (length) {\n\t\t\t\tif (!defined(options.min) && !defined(axis.userMin) && minPadding && (axis.dataMin < 0 || !axis.ignoreMinPadding)) {\n\t\t\t\t\taxis.min -= length * minPadding;\n\t\t\t\t}\n\t\t\t\tif (!defined(options.max) && !defined(axis.userMax)  && maxPadding && (axis.dataMax > 0 || !axis.ignoreMaxPadding)) {\n\t\t\t\t\taxis.max += length * maxPadding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Stay within floor and ceiling\n\t\tif (isNumber(options.floor)) {\n\t\t\taxis.min = mathMax(axis.min, options.floor);\n\t\t}\n\t\tif (isNumber(options.ceiling)) {\n\t\t\taxis.max = mathMin(axis.max, options.ceiling);\n\t\t}\n\n\t\t// get tickInterval\n\t\tif (axis.min === axis.max || axis.min === undefined || axis.max === undefined) {\n\t\t\taxis.tickInterval = 1;\n\t\t} else if (isLinked && !tickIntervalOption &&\n\t\t\t\ttickPixelIntervalOption === axis.linkedParent.options.tickPixelInterval) {\n\t\t\taxis.tickInterval = tickIntervalOption = axis.linkedParent.tickInterval;\n\t\t} else {\n\t\t\taxis.tickInterval = pick(\n\t\t\t\ttickIntervalOption,\n\t\t\t\tthis.tickAmount ? ((axis.max - axis.min) / mathMax(this.tickAmount - 1, 1)) : undefined,\n\t\t\t\tcategories ? // for categoried axis, 1 is default, for linear axis use tickPix\n\t\t\t\t\t1 :\n\t\t\t\t\t// don't let it be more than the data range\n\t\t\t\t\t(axis.max - axis.min) * tickPixelIntervalOption / mathMax(axis.len, tickPixelIntervalOption)\n\t\t\t);\n\t\t}\n\n\t\t// Now we're finished detecting min and max, crop and group series data. This\n\t\t// is in turn needed in order to find tick positions in ordinal axes.\n\t\tif (isXAxis && !secondPass) {\n\t\t\teach(axis.series, function (series) {\n\t\t\t\tseries.processData(axis.min !== axis.oldMin || axis.max !== axis.oldMax);\n\t\t\t});\n\t\t}\n\n\t\t// set the translation factor used in translate function\n\t\taxis.setAxisTranslation(true);\n\n\t\t// hook for ordinal axes and radial axes\n\t\tif (axis.beforeSetTickPositions) {\n\t\t\taxis.beforeSetTickPositions();\n\t\t}\n\n\t\t// hook for extensions, used in Highstock ordinal axes\n\t\tif (axis.postProcessTickInterval) {\n\t\t\taxis.tickInterval = axis.postProcessTickInterval(axis.tickInterval);\n\t\t}\n\n\t\t// In column-like charts, don't cramp in more ticks than there are points (#1943)\n\t\tif (axis.pointRange) {\n\t\t\taxis.tickInterval = mathMax(axis.pointRange, axis.tickInterval);\n\t\t}\n\n\t\t// Before normalizing the tick interval, handle minimum tick interval. This applies only if tickInterval is not defined.\n\t\tminTickInterval = pick(options.minTickInterval, axis.isDatetimeAxis && axis.closestPointRange);\n\t\tif (!tickIntervalOption && axis.tickInterval < minTickInterval) {\n\t\t\taxis.tickInterval = minTickInterval;\n\t\t}\n\n\t\t// for linear axes, get magnitude and normalize the interval\n\t\tif (!isDatetimeAxis && !isLog && !tickIntervalOption) {\n\t\t\taxis.tickInterval = normalizeTickInterval(\n\t\t\t\taxis.tickInterval, \n\t\t\t\tnull, \n\t\t\t\tgetMagnitude(axis.tickInterval), \n\t\t\t\t// If the tick interval is between 0.5 and 5 and the axis max is in the order of\n\t\t\t\t// thousands, chances are we are dealing with years. Don't allow decimals. #3363.\n\t\t\t\tpick(options.allowDecimals, !(axis.tickInterval > 0.5 && axis.tickInterval < 5 && axis.max > 1000 && axis.max < 9999)),\n\t\t\t\t!!this.tickAmount\n\t\t\t);\n\t\t}\n\t\t\n\t\t// Prevent ticks from getting so close that we can't draw the labels\n\t\tif (!this.tickAmount && this.len) { // Color axis with disabled legend has no length\n\t\t\taxis.tickInterval = axis.unsquish();\n\t\t}\n\n\t\tthis.setTickPositions();\n\t},\n\n\t/**\n\t * Now we have computed the normalized tickInterval, get the tick positions\n\t */\n\tsetTickPositions: function () {\n\n\t\tvar options = this.options,\n\t\t\ttickPositions,\n\t\t\ttickPositionsOption = options.tickPositions,\n\t\t\ttickPositioner = options.tickPositioner,\n\t\t\tstartOnTick = options.startOnTick,\n\t\t\tendOnTick = options.endOnTick,\n\t\t\tsingle;\n\n\t\t// Set the tickmarkOffset\n\t\tthis.tickmarkOffset = (this.categories && options.tickmarkPlacement === 'between' && \n\t\t\tthis.tickInterval === 1) ? 0.5 : 0; // #3202\n\n\n\t\t// get minorTickInterval\n\t\tthis.minorTickInterval = options.minorTickInterval === 'auto' && this.tickInterval ?\n\t\t\tthis.tickInterval / 5 : options.minorTickInterval;\n\n\t\t// Find the tick positions\n\t\tthis.tickPositions = tickPositions = tickPositionsOption && tickPositionsOption.slice(); // Work on a copy (#1565)\n\t\tif (!tickPositions) {\n\n\t\t\tif (this.isDatetimeAxis) {\n\t\t\t\ttickPositions = this.getTimeTicks(\n\t\t\t\t\tthis.normalizeTimeTickInterval(this.tickInterval, options.units),\n\t\t\t\t\tthis.min,\n\t\t\t\t\tthis.max,\n\t\t\t\t\toptions.startOfWeek,\n\t\t\t\t\tthis.ordinalPositions,\n\t\t\t\t\tthis.closestPointRange,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t} else if (this.isLog) {\n\t\t\t\ttickPositions = this.getLogTickPositions(this.tickInterval, this.min, this.max);\n\t\t\t} else {\n\t\t\t\ttickPositions = this.getLinearTickPositions(this.tickInterval, this.min, this.max);\n\t\t\t}\n\n\t\t\tthis.tickPositions = tickPositions;\n\n\t\t\t// Run the tick positioner callback, that allows modifying auto tick positions.\n\t\t\tif (tickPositioner) {\n\t\t\t\ttickPositioner = tickPositioner.apply(this, [this.min, this.max]);\n\t\t\t\tif (tickPositioner) {\n\t\t\t\t\tthis.tickPositions = tickPositions = tickPositioner;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tif (!this.isLinked) {\n\n\t\t\t// reset min/max or remove extremes based on start/end on tick\n\t\t\tthis.trimTicks(tickPositions, startOnTick, endOnTick);\n\n\t\t\t// When there is only one point, or all points have the same value on this axis, then min\n\t\t\t// and max are equal and tickPositions.length is 0 or 1. In this case, add some padding\n\t\t\t// in order to center the point, but leave it with one tick. #1337.\n\t\t\tif (this.min === this.max && defined(this.min) && !this.tickAmount) {\n\t\t\t\t// Substract half a unit (#2619, #2846, #2515, #3390)\n\t\t\t\tsingle = true;\n\t\t\t\tthis.min -= 0.5;\n\t\t\t\tthis.max += 0.5;\n\t\t\t}\n\t\t\tthis.single = single;\n\n\t\t\tif (!tickPositionsOption && !tickPositioner) {\n\t\t\t\tthis.adjustTickAmount();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Handle startOnTick and endOnTick by either adapting to padding min/max or rounded min/max\n\t */\n\ttrimTicks: function (tickPositions, startOnTick, endOnTick) {\n\t\tvar roundedMin = tickPositions[0],\n\t\t\troundedMax = tickPositions[tickPositions.length - 1],\n\t\t\tminPointOffset = this.minPointOffset || 0;\n\t\t\t\n\t\tif (startOnTick) {\n\t\t\tthis.min = roundedMin;\n\t\t} else if (this.min - minPointOffset > roundedMin) {\n\t\t\ttickPositions.shift();\n\t\t}\n\n\t\tif (endOnTick) {\n\t\t\tthis.max = roundedMax;\n\t\t} else if (this.max + minPointOffset < roundedMax) {\n\t\t\ttickPositions.pop();\n\t\t}\n\n\t\t// If no tick are left, set one tick in the middle (#3195) \n\t\tif (tickPositions.length === 0 && defined(roundedMin)) {\n\t\t\ttickPositions.push((roundedMax + roundedMin) / 2);\n\t\t}\t\t\n\t},\n\n\t/**\n\t * Set the max ticks of either the x and y axis collection\n\t */\n\tgetTickAmount: function () {\n\t\tvar others = {}, // Whether there is another axis to pair with this one\n\t\t\thasOther,\n\t\t\toptions = this.options,\n\t\t\ttickAmount = options.tickAmount,\n\t\t\ttickPixelInterval = options.tickPixelInterval;\n\n\t\tif (!defined(options.tickInterval) && this.len < tickPixelInterval && !this.isRadial &&\n\t\t\t\t!this.isLog && options.startOnTick && options.endOnTick) {\n\t\t\ttickAmount = 2;\n\t\t}\n\n\t\tif (!tickAmount && this.chart.options.chart.alignTicks !== false && options.alignTicks !== false) {\n\t\t\t// Check if there are multiple axes in the same pane\n\t\t\teach(this.chart[this.coll], function (axis) {\n\t\t\t\tvar options = axis.options,\n\t\t\t\t\thoriz = axis.horiz,\n\t\t\t\t\tkey = [horiz ? options.left : options.top, horiz ? options.width : options.height, options.pane].join(',');\n\t\t\t\t\n\t\t\t\tif (others[key]) {\n\t\t\t\t\tif (axis.series.length) {\n\t\t\t\t\t\thasOther = true; // #4201\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tothers[key] = 1;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasOther) {\n\t\t\t\t// Add 1 because 4 tick intervals require 5 ticks (including first and last)\n\t\t\t\ttickAmount = mathCeil(this.len / tickPixelInterval) + 1;\n\t\t\t}\n\t\t}\n\n\t\t// For tick amounts of 2 and 3, compute five ticks and remove the intermediate ones. This\n\t\t// prevents the axis from adding ticks that are too far away from the data extremes.\n\t\tif (tickAmount < 4) {\n\t\t\tthis.finalTickAmt = tickAmount;\n\t\t\ttickAmount = 5;\n\t\t}\n\t\t\n\t\tthis.tickAmount = tickAmount;\n\t},\n\n\t/**\n\t * When using multiple axes, adjust the number of ticks to match the highest\n\t * number of ticks in that group\n\t */\n\tadjustTickAmount: function () {\n\t\tvar tickInterval = this.tickInterval,\n\t\t\ttickPositions = this.tickPositions,\n\t\t\ttickAmount = this.tickAmount,\n\t\t\tfinalTickAmt = this.finalTickAmt,\n\t\t\tcurrentTickAmount = tickPositions && tickPositions.length,\n\t\t\ti,\n\t\t\tlen;\n\n\t\tif (currentTickAmount < tickAmount) { // TODO: Check #3411\n\t\t\twhile (tickPositions.length < tickAmount) {\n\t\t\t\ttickPositions.push(correctFloat(\n\t\t\t\t\ttickPositions[tickPositions.length - 1] + tickInterval\n\t\t\t\t));\n\t\t\t}\n\t\t\tthis.transA *= (currentTickAmount - 1) / (tickAmount - 1);\n\t\t\tthis.max = tickPositions[tickPositions.length - 1];\n\n\t\t// We have too many ticks, run second pass to try to reduce ticks\n\t\t} else if (currentTickAmount > tickAmount) {\n\t\t\tthis.tickInterval *= 2;\n\t\t\tthis.setTickPositions();\n\t\t}\n\n\t\t// The finalTickAmt property is set in getTickAmount\n\t\tif (defined(finalTickAmt)) {\n\t\t\ti = len = tickPositions.length;\n\t\t\twhile (i--) {\n\t\t\t\tif (\n\t\t\t\t\t(finalTickAmt === 3 && i % 2 === 1) || // Remove every other tick\n\t\t\t\t\t(finalTickAmt <= 2 && i > 0 && i < len - 1) // Remove all but first and last\n\t\t\t\t) {\n\t\t\t\t\ttickPositions.splice(i, 1);\n\t\t\t\t}\t\n\t\t\t}\n\t\t\tthis.finalTickAmt = UNDEFINED;\n\t\t}\n\t},\n\n\t/**\n\t * Set the scale based on data min and max, user set min and max or options\n\t *\n\t */\n\tsetScale: function () {\n\t\tvar axis = this,\n\t\t\tstacks = axis.stacks,\n\t\t\ttype,\n\t\t\ti,\n\t\t\tisDirtyData,\n\t\t\tisDirtyAxisLength;\n\n\t\taxis.oldMin = axis.min;\n\t\taxis.oldMax = axis.max;\n\t\taxis.oldAxisLength = axis.len;\n\n\t\t// set the new axisLength\n\t\taxis.setAxisSize();\n\t\t//axisLength = horiz ? axisWidth : axisHeight;\n\t\tisDirtyAxisLength = axis.len !== axis.oldAxisLength;\n\n\t\t// is there new data?\n\t\teach(axis.series, function (series) {\n\t\t\tif (series.isDirtyData || series.isDirty ||\n\t\t\t\t\tseries.xAxis.isDirty) { // when x axis is dirty, we need new data extremes for y as well\n\t\t\t\tisDirtyData = true;\n\t\t\t}\n\t\t});\n\n\t\t// do we really need to go through all this?\n\t\tif (isDirtyAxisLength || isDirtyData || axis.isLinked || axis.forceRedraw ||\n\t\t\taxis.userMin !== axis.oldUserMin || axis.userMax !== axis.oldUserMax) {\n\n\t\t\t// reset stacks\n\t\t\tif (!axis.isXAxis) {\n\t\t\t\tfor (type in stacks) {\n\t\t\t\t\tfor (i in stacks[type]) {\n\t\t\t\t\t\tstacks[type][i].total = null;\n\t\t\t\t\t\tstacks[type][i].cum = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taxis.forceRedraw = false;\n\n\t\t\t// get data extremes if needed\n\t\t\taxis.getSeriesExtremes();\n\n\t\t\t// get fixed positions based on tickInterval\n\t\t\taxis.setTickInterval();\n\n\t\t\t// record old values to decide whether a rescale is necessary later on (#540)\n\t\t\taxis.oldUserMin = axis.userMin;\n\t\t\taxis.oldUserMax = axis.userMax;\n\n\t\t\t// Mark as dirty if it is not already set to dirty and extremes have changed. #595.\n\t\t\tif (!axis.isDirty) {\n\t\t\t\taxis.isDirty = isDirtyAxisLength || axis.min !== axis.oldMin || axis.max !== axis.oldMax;\n\t\t\t}\n\t\t} else if (!axis.isXAxis) {\n\t\t\tif (axis.oldStacks) {\n\t\t\t\tstacks = axis.stacks = axis.oldStacks;\n\t\t\t}\n\n\t\t\t// reset stacks\n\t\t\tfor (type in stacks) {\n\t\t\t\tfor (i in stacks[type]) {\n\t\t\t\t\tstacks[type][i].cum = stacks[type][i].total;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Set the extremes and optionally redraw\n\t * @param {Number} newMin\n\t * @param {Number} newMax\n\t * @param {Boolean} redraw\n\t * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n\t *    configuration\n\t * @param {Object} eventArguments\n\t *\n\t */\n\tsetExtremes: function (newMin, newMax, redraw, animation, eventArguments) {\n\t\tvar axis = this,\n\t\t\tchart = axis.chart;\n\n\t\tredraw = pick(redraw, true); // defaults to true\n\n\t\teach(axis.series, function (serie) {\n\t\t\tdelete serie.kdTree;\n\t\t});\n\n\t\t// Extend the arguments with min and max\n\t\teventArguments = extend(eventArguments, {\n\t\t\tmin: newMin,\n\t\t\tmax: newMax\n\t\t});\n\n\t\t// Fire the event\n\t\tfireEvent(axis, 'setExtremes', eventArguments, function () { // the default event handler\n\n\t\t\taxis.userMin = newMin;\n\t\t\taxis.userMax = newMax;\n\t\t\taxis.eventArgs = eventArguments;\n\n\t\t\t// Mark for running afterSetExtremes\n\t\t\taxis.isDirtyExtremes = true;\n\n\t\t\t// redraw\n\t\t\tif (redraw) {\n\t\t\t\tchart.redraw(animation);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Overridable method for zooming chart. Pulled out in a separate method to allow overriding\n\t * in stock charts.\n\t */\n\tzoom: function (newMin, newMax) {\n\t\tvar dataMin = this.dataMin,\n\t\t\tdataMax = this.dataMax,\n\t\t\toptions = this.options;\n\n\t\t// Prevent pinch zooming out of range. Check for defined is for #1946. #1734.\n\t\tif (!this.allowZoomOutside) {\n\t\t\tif (defined(dataMin) && newMin <= mathMin(dataMin, pick(options.min, dataMin))) {\n\t\t\t\tnewMin = UNDEFINED;\n\t\t\t}\n\t\t\tif (defined(dataMax) && newMax >= mathMax(dataMax, pick(options.max, dataMax))) {\n\t\t\t\tnewMax = UNDEFINED;\n\t\t\t}\n\t\t}\n\n\t\t// In full view, displaying the reset zoom button is not required\n\t\tthis.displayBtn = newMin !== UNDEFINED || newMax !== UNDEFINED;\n\n\t\t// Do it\n\t\tthis.setExtremes(\n\t\t\tnewMin,\n\t\t\tnewMax,\n\t\t\tfalse,\n\t\t\tUNDEFINED,\n\t\t\t{ trigger: 'zoom' }\n\t\t);\n\t\treturn true;\n\t},\n\n\t/**\n\t * Update the axis metrics\n\t */\n\tsetAxisSize: function () {\n\t\tvar chart = this.chart,\n\t\t\toptions = this.options,\n\t\t\toffsetLeft = options.offsetLeft || 0,\n\t\t\toffsetRight = options.offsetRight || 0,\n\t\t\thoriz = this.horiz,\n\t\t\twidth = pick(options.width, chart.plotWidth - offsetLeft + offsetRight),\n\t\t\theight = pick(options.height, chart.plotHeight),\n\t\t\ttop = pick(options.top, chart.plotTop),\n\t\t\tleft = pick(options.left, chart.plotLeft + offsetLeft),\n\t\t\tpercentRegex = /%$/;\n\n\t\t// Check for percentage based input values\n\t\tif (percentRegex.test(height)) {\n\t\t\theight = parseFloat(height) / 100 * chart.plotHeight;\n\t\t}\n\t\tif (percentRegex.test(top)) {\n\t\t\ttop = parseFloat(top) / 100 * chart.plotHeight + chart.plotTop;\n\t\t}\n\n\t\t// Expose basic values to use in Series object and navigator\n\t\tthis.left = left;\n\t\tthis.top = top;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.bottom = chart.chartHeight - height - top;\n\t\tthis.right = chart.chartWidth - width - left;\n\n\t\t// Direction agnostic properties\n\t\tthis.len = mathMax(horiz ? width : height, 0); // mathMax fixes #905\n\t\tthis.pos = horiz ? left : top; // distance from SVG origin\n\t},\n\n\t/**\n\t * Get the actual axis extremes\n\t */\n\tgetExtremes: function () {\n\t\tvar axis = this,\n\t\t\tisLog = axis.isLog;\n\n\t\treturn {\n\t\t\tmin: isLog ? correctFloat(lin2log(axis.min)) : axis.min,\n\t\t\tmax: isLog ? correctFloat(lin2log(axis.max)) : axis.max,\n\t\t\tdataMin: axis.dataMin,\n\t\t\tdataMax: axis.dataMax,\n\t\t\tuserMin: axis.userMin,\n\t\t\tuserMax: axis.userMax\n\t\t};\n\t},\n\n\t/**\n\t * Get the zero plane either based on zero or on the min or max value.\n\t * Used in bar and area plots\n\t */\n\tgetThreshold: function (threshold) {\n\t\tvar axis = this,\n\t\t\tisLog = axis.isLog,\n\t\t\trealMin = isLog ? lin2log(axis.min) : axis.min,\n\t\t\trealMax = isLog ? lin2log(axis.max) : axis.max;\n\n\t\t// With a threshold of null, make the columns/areas rise from the top or bottom \n\t\t// depending on the value, assuming an actual threshold of 0 (#4233).\n\t\tif (threshold === null) {\n\t\t\tthreshold = realMax < 0 ? realMax : realMin;\n\t\t} else if (realMin > threshold) {\n\t\t\tthreshold = realMin;\n\t\t} else if (realMax < threshold) {\n\t\t\tthreshold = realMax;\n\t\t}\n\n\t\treturn axis.translate(threshold, 0, 1, 0, 1);\n\t},\n\n\t/**\n\t * Compute auto alignment for the axis label based on which side the axis is on\n\t * and the given rotation for the label\n\t */\n\tautoLabelAlign: function (rotation) {\n\t\tvar ret,\n\t\t\tangle = (pick(rotation, 0) - (this.side * 90) + 720) % 360;\n\n\t\tif (angle > 15 && angle < 165) {\n\t\t\tret = 'right';\n\t\t} else if (angle > 195 && angle < 345) {\n\t\t\tret = 'left';\n\t\t} else {\n\t\t\tret = 'center';\n\t\t}\n\t\treturn ret;\n\t},\n\n\t/**\n\t * Prevent the ticks from getting so close we can't draw the labels. On a horizontal\n\t * axis, this is handled by rotating the labels, removing ticks and adding ellipsis. \n\t * On a vertical axis remove ticks and add ellipsis.\n\t */\n\tunsquish: function () {\n\t\tvar chart = this.chart,\n\t\t\tticks = this.ticks,\n\t\t\tlabelOptions = this.options.labels,\n\t\t\thoriz = this.horiz,\n\t\t\ttickInterval = this.tickInterval,\n\t\t\tnewTickInterval = tickInterval,\n\t\t\tslotSize = this.len / (((this.categories ? 1 : 0) + this.max - this.min) / tickInterval),\n\t\t\trotation,\n\t\t\trotationOption = labelOptions.rotation,\n\t\t\tlabelMetrics = chart.renderer.fontMetrics(labelOptions.style.fontSize, ticks[0] && ticks[0].label),\n\t\t\tstep,\n\t\t\tbestScore = Number.MAX_VALUE,\n\t\t\tautoRotation,\n\t\t\t// Return the multiple of tickInterval that is needed to avoid collision\n\t\t\tgetStep = function (spaceNeeded) {\n\t\t\t\tvar step = spaceNeeded / (slotSize || 1);\n\t\t\t\tstep = step > 1 ? mathCeil(step) : 1;\n\t\t\t\treturn step * tickInterval;\n\t\t\t};\n\t\t\n\t\tif (horiz) {\n\t\t\tautoRotation = defined(rotationOption) ? \n\t\t\t\t[rotationOption] :\n\t\t\t\tslotSize < pick(labelOptions.autoRotationLimit, 80) && !labelOptions.staggerLines && !labelOptions.step && labelOptions.autoRotation;\n\n\t\t\tif (autoRotation) {\n\n\t\t\t\t// Loop over the given autoRotation options, and determine which gives the best score. The \n\t\t\t\t// best score is that with the lowest number of steps and a rotation closest to horizontal.\n\t\t\t\teach(autoRotation, function (rot) {\n\t\t\t\t\tvar score;\n\n\t\t\t\t\tif (rot === rotationOption || (rot && rot >= -90 && rot <= 90)) { // #3891\n\t\t\t\t\t\n\t\t\t\t\t\tstep = getStep(mathAbs(labelMetrics.h / mathSin(deg2rad * rot)));\n\n\t\t\t\t\t\tscore = step + mathAbs(rot / 360);\n\n\t\t\t\t\t\tif (score < bestScore) {\n\t\t\t\t\t\t\tbestScore = score;\n\t\t\t\t\t\t\trotation = rot;\n\t\t\t\t\t\t\tnewTickInterval = step;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t} else {\n\t\t\tnewTickInterval = getStep(labelMetrics.h);\n\t\t}\n\n\t\tthis.autoRotation = autoRotation;\n\t\tthis.labelRotation = rotation;\n\n\t\treturn newTickInterval;\n\t},\n\n\trenderUnsquish: function () {\n\t\tvar chart = this.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\ttickPositions = this.tickPositions,\n\t\t\tticks = this.ticks,\n\t\t\tlabelOptions = this.options.labels,\n\t\t\thoriz = this.horiz,\n\t\t\tmargin = chart.margin,\n\t\t\tslotCount = this.categories ? tickPositions.length : tickPositions.length - 1,\n\t\t\tslotWidth = this.slotWidth = (horiz && !labelOptions.step && !labelOptions.rotation &&\n\t\t\t\t((this.staggerLines || 1) * chart.plotWidth) / slotCount) ||\n\t\t\t\t(!horiz && ((margin[3] && (margin[3] - chart.spacing[3])) || chart.chartWidth * 0.33)), // #1580, #1931,\n\t\t\tinnerWidth = mathMax(1, mathRound(slotWidth - 2 * (labelOptions.padding || 5))),\n\t\t\tattr = {},\n\t\t\tlabelMetrics = renderer.fontMetrics(labelOptions.style.fontSize, ticks[0] && ticks[0].label),\n\t\t\ttextOverflowOption = labelOptions.style.textOverflow,\n\t\t\tcss,\n\t\t\tlabelLength = 0,\n\t\t\tlabel,\n\t\t\ti,\n\t\t\tpos;\n\n\t\t// Set rotation option unless it is \"auto\", like in gauges\n\t\tif (!isString(labelOptions.rotation)) {\n\t\t\tattr.rotation = labelOptions.rotation;\n\t\t}\n\t\t\n\t\t// Handle auto rotation on horizontal axis\n\t\tif (this.autoRotation) {\n\n\t\t\t// Get the longest label length\n\t\t\teach(tickPositions, function (tick) {\n\t\t\t\ttick = ticks[tick];\n\t\t\t\tif (tick && tick.labelLength > labelLength) {\n\t\t\t\t\tlabelLength = tick.labelLength;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Apply rotation only if the label is too wide for the slot, and\n\t\t\t// the label is wider than its height.\n\t\t\tif (labelLength > innerWidth && labelLength > labelMetrics.h) {\n\t\t\t\tattr.rotation = this.labelRotation;\n\t\t\t} else {\n\t\t\t\tthis.labelRotation = 0;\n\t\t\t}\n\n\t\t// Handle word-wrap or ellipsis on vertical axis\n\t\t} else if (slotWidth) {\n\t\t\t// For word-wrap or ellipsis\n\t\t\tcss = { width: innerWidth + PX };\n\n\t\t\tif (!textOverflowOption) {\n\t\t\t\tcss.textOverflow = 'clip';\n\n\t\t\t\t// On vertical axis, only allow word wrap if there is room for more lines.\n\t\t\t\ti = tickPositions.length;\n\t\t\t\twhile (!horiz && i--) {\n\t\t\t\t\tpos = tickPositions[i];\n\t\t\t\t\tlabel = ticks[pos].label;\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\t// Reset ellipsis in order to get the correct bounding box (#4070)\n\t\t\t\t\t\tif (label.styles.textOverflow === 'ellipsis') {\n\t\t\t\t\t\t\tlabel.css({ textOverflow: 'clip' });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (label.getBBox().height > this.len / tickPositions.length - (labelMetrics.h - labelMetrics.f)) {\n\t\t\t\t\t\t\tlabel.specCss = { textOverflow: 'ellipsis' };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t// Add ellipsis if the label length is significantly longer than ideal\n\t\tif (attr.rotation) {\n\t\t\tcss = { \n\t\t\t\twidth: (labelLength > chart.chartHeight * 0.5 ? chart.chartHeight * 0.33 : chart.chartHeight) + PX\n\t\t\t};\n\t\t\tif (!textOverflowOption) {\n\t\t\t\tcss.textOverflow = 'ellipsis';\n\t\t\t}\n\t\t}\n\n\t\t// Set the explicit or automatic label alignment\n\t\tthis.labelAlign = attr.align = labelOptions.align || this.autoLabelAlign(this.labelRotation);\n\n\t\t// Apply general and specific CSS\n\t\teach(tickPositions, function (pos) {\n\t\t\tvar tick = ticks[pos],\n\t\t\t\tlabel = tick && tick.label;\n\t\t\tif (label) {\n\t\t\t\tif (css) {\n\t\t\t\t\tlabel.css(merge(css, label.specCss));\n\t\t\t\t}\n\t\t\t\tdelete label.specCss;\n\t\t\t\tlabel.attr(attr);\n\t\t\t\ttick.rotation = attr.rotation;\n\t\t\t}\n\t\t});\n\n\t\t// TODO: Why not part of getLabelPosition?\n\t\tthis.tickRotCorr = renderer.rotCorr(labelMetrics.b, this.labelRotation || 0, this.side === 2);\n\t},\n\n\t/**\n\t * Return true if the axis has associated data\n\t */\n\thasData: function () {\n\t\treturn this.hasVisibleSeries || (defined(this.min) && defined(this.max) && !!this.tickPositions);\n\t},\n\n\t/**\n\t * Render the tick labels to a preliminary position to get their sizes\n\t */\n\tgetOffset: function () {\n\t\tvar axis = this,\n\t\t\tchart = axis.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\toptions = axis.options,\n\t\t\ttickPositions = axis.tickPositions,\n\t\t\tticks = axis.ticks,\n\t\t\thoriz = axis.horiz,\n\t\t\tside = axis.side,\n\t\t\tinvertedSide = chart.inverted ? [1, 0, 3, 2][side] : side,\n\t\t\thasData,\n\t\t\tshowAxis,\n\t\t\ttitleOffset = 0,\n\t\t\ttitleOffsetOption,\n\t\t\ttitleMargin = 0,\n\t\t\taxisTitleOptions = options.title,\n\t\t\tlabelOptions = options.labels,\n\t\t\tlabelOffset = 0, // reset\n\t\t\tlabelOffsetPadded,\n\t\t\taxisOffset = chart.axisOffset,\n\t\t\tclipOffset = chart.clipOffset,\n\t\t\tclip,\n\t\t\tdirectionFactor = [-1, 1, 1, -1][side],\n\t\t\tn,\n\t\t\tlineHeightCorrection;\n\n\t\t// For reuse in Axis.render\n\t\thasData = axis.hasData();\n\t\taxis.showAxis = showAxis = hasData || pick(options.showEmpty, true);\n\n\t\t// Set/reset staggerLines\n\t\taxis.staggerLines = axis.horiz && labelOptions.staggerLines;\n\n\t\t// Create the axisGroup and gridGroup elements on first iteration\n\t\tif (!axis.axisGroup) {\n\t\t\taxis.gridGroup = renderer.g('grid')\n\t\t\t\t.attr({ zIndex: options.gridZIndex || 1 })\n\t\t\t\t.add();\n\t\t\taxis.axisGroup = renderer.g('axis')\n\t\t\t\t.attr({ zIndex: options.zIndex || 2 })\n\t\t\t\t.add();\n\t\t\taxis.labelGroup = renderer.g('axis-labels')\n\t\t\t\t.attr({ zIndex: labelOptions.zIndex || 7 })\n\t\t\t\t.addClass(PREFIX + axis.coll.toLowerCase() + '-labels')\n\t\t\t\t.add();\n\t\t}\n\n\t\tif (hasData || axis.isLinked) {\n\t\t\t\n\t\t\t// Generate ticks\n\t\t\teach(tickPositions, function (pos) {\n\t\t\t\tif (!ticks[pos]) {\n\t\t\t\t\tticks[pos] = new Tick(axis, pos);\n\t\t\t\t} else {\n\t\t\t\t\tticks[pos].addLabel(); // update labels depending on tick interval\n\t\t\t\t}\n\t\t\t});\n\n\t\t\taxis.renderUnsquish();\n\n\t\t\teach(tickPositions, function (pos) {\n\t\t\t\t// left side must be align: right and right side must have align: left for labels\n\t\t\t\tif (side === 0 || side === 2 || { 1: 'left', 3: 'right' }[side] === axis.labelAlign) {\n\n\t\t\t\t\t// get the highest offset\n\t\t\t\t\tlabelOffset = mathMax(\n\t\t\t\t\t\tticks[pos].getLabelSize(),\n\t\t\t\t\t\tlabelOffset\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (axis.staggerLines) {\n\t\t\t\tlabelOffset *= axis.staggerLines;\n\t\t\t\taxis.labelOffset = labelOffset;\n\t\t\t}\n\n\n\t\t} else { // doesn't have data\n\t\t\tfor (n in ticks) {\n\t\t\t\tticks[n].destroy();\n\t\t\t\tdelete ticks[n];\n\t\t\t}\n\t\t}\n\n\t\tif (axisTitleOptions && axisTitleOptions.text && axisTitleOptions.enabled !== false) {\n\t\t\tif (!axis.axisTitle) {\n\t\t\t\taxis.axisTitle = renderer.text(\n\t\t\t\t\taxisTitleOptions.text,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\taxisTitleOptions.useHTML\n\t\t\t\t)\n\t\t\t\t.attr({\n\t\t\t\t\tzIndex: 7,\n\t\t\t\t\trotation: axisTitleOptions.rotation || 0,\n\t\t\t\t\talign:\n\t\t\t\t\t\taxisTitleOptions.textAlign ||\n\t\t\t\t\t\t{ low: 'left', middle: 'center', high: 'right' }[axisTitleOptions.align]\n\t\t\t\t})\n\t\t\t\t.addClass(PREFIX + this.coll.toLowerCase() + '-title')\n\t\t\t\t.css(axisTitleOptions.style)\n\t\t\t\t.add(axis.axisGroup);\n\t\t\t\taxis.axisTitle.isNew = true;\n\t\t\t}\n\n\t\t\tif (showAxis) {\n\t\t\t\ttitleOffset = axis.axisTitle.getBBox()[horiz ? 'height' : 'width'];\n\t\t\t\ttitleOffsetOption = axisTitleOptions.offset;\n\t\t\t\ttitleMargin = defined(titleOffsetOption) ? 0 : pick(axisTitleOptions.margin, horiz ? 5 : 10);\n\t\t\t}\n\n\t\t\t// hide or show the title depending on whether showEmpty is set\n\t\t\taxis.axisTitle[showAxis ? 'show' : 'hide']();\n\t\t}\n\n\t\t// handle automatic or user set offset\n\t\taxis.offset = directionFactor * pick(options.offset, axisOffset[side]);\n\n\t\taxis.tickRotCorr = axis.tickRotCorr || { x: 0, y: 0 }; // polar\n\t\tlineHeightCorrection = side === 2 ? axis.tickRotCorr.y : 0;\n\t\tlabelOffsetPadded = labelOffset + titleMargin +\n\t\t\t(labelOffset && (directionFactor * (horiz ? pick(labelOptions.y, axis.tickRotCorr.y + 8) : labelOptions.x) - lineHeightCorrection));\n\t\taxis.axisTitleMargin = pick(titleOffsetOption, labelOffsetPadded);\n\n\t\taxisOffset[side] = mathMax(\n\t\t\taxisOffset[side],\n\t\t\taxis.axisTitleMargin + titleOffset + directionFactor * axis.offset,\n\t\t\tlabelOffsetPadded // #3027\n\t\t);\n\n\t\t// Decide the clipping needed to keep the graph inside the plot area and axis lines\n\t\tclip = mathFloor(options.lineWidth / 2) * 2;\n\t\tif (options.offset) {\n\t\t\tclip = mathMax(0, clip - options.offset);\t\t\n\t\t}\n\t\tclipOffset[invertedSide] = mathMax(clipOffset[invertedSide], clip);\n\t},\n\n\t/**\n\t * Get the path for the axis line\n\t */\n\tgetLinePath: function (lineWidth) {\n\t\tvar chart = this.chart,\n\t\t\topposite = this.opposite,\n\t\t\toffset = this.offset,\n\t\t\thoriz = this.horiz,\n\t\t\tlineLeft = this.left + (opposite ? this.width : 0) + offset,\n\t\t\tlineTop = chart.chartHeight - this.bottom - (opposite ? this.height : 0) + offset;\n\n\t\tif (opposite) {\n\t\t\tlineWidth *= -1; // crispify the other way - #1480, #1687\n\t\t}\n\n\t\treturn chart.renderer.crispLine([\n\t\t\t\tM,\n\t\t\t\thoriz ?\n\t\t\t\t\tthis.left :\n\t\t\t\t\tlineLeft,\n\t\t\t\thoriz ?\n\t\t\t\t\tlineTop :\n\t\t\t\t\tthis.top,\n\t\t\t\tL,\n\t\t\t\thoriz ?\n\t\t\t\t\tchart.chartWidth - this.right :\n\t\t\t\t\tlineLeft,\n\t\t\t\thoriz ?\n\t\t\t\t\tlineTop :\n\t\t\t\t\tchart.chartHeight - this.bottom\n\t\t\t], lineWidth);\n\t},\n\n\t/**\n\t * Position the title\n\t */\n\tgetTitlePosition: function () {\n\t\t// compute anchor points for each of the title align options\n\t\tvar horiz = this.horiz,\n\t\t\taxisLeft = this.left,\n\t\t\taxisTop = this.top,\n\t\t\taxisLength = this.len,\n\t\t\taxisTitleOptions = this.options.title,\n\t\t\tmargin = horiz ? axisLeft : axisTop,\n\t\t\topposite = this.opposite,\n\t\t\toffset = this.offset,\n\t\t\txOption = axisTitleOptions.x || 0,\n\t\t\tyOption = axisTitleOptions.y || 0,\n\t\t\tfontSize = pInt(axisTitleOptions.style.fontSize || 12),\n\n\t\t\t// the position in the length direction of the axis\n\t\t\talongAxis = {\n\t\t\t\tlow: margin + (horiz ? 0 : axisLength),\n\t\t\t\tmiddle: margin + axisLength / 2,\n\t\t\t\thigh: margin + (horiz ? axisLength : 0)\n\t\t\t}[axisTitleOptions.align],\n\n\t\t\t// the position in the perpendicular direction of the axis\n\t\t\toffAxis = (horiz ? axisTop + this.height : axisLeft) +\n\t\t\t\t(horiz ? 1 : -1) * // horizontal axis reverses the margin\n\t\t\t\t(opposite ? -1 : 1) * // so does opposite axes\n\t\t\t\tthis.axisTitleMargin +\n\t\t\t\t(this.side === 2 ? fontSize : 0);\n\n\t\treturn {\n\t\t\tx: horiz ?\n\t\t\t\talongAxis + xOption :\n\t\t\t\toffAxis + (opposite ? this.width : 0) + offset + xOption,\n\t\t\ty: horiz ?\n\t\t\t\toffAxis + yOption - (opposite ? this.height : 0) + offset :\n\t\t\t\talongAxis + yOption\n\t\t};\n\t},\n\n\t/**\n\t * Render the axis\n\t */\n\trender: function () {\n\t\tvar axis = this,\n\t\t\tchart = axis.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\toptions = axis.options,\n\t\t\tisLog = axis.isLog,\n\t\t\tisLinked = axis.isLinked,\n\t\t\ttickPositions = axis.tickPositions,\n\t\t\taxisTitle = axis.axisTitle,\t\t\t\n\t\t\tticks = axis.ticks,\n\t\t\tminorTicks = axis.minorTicks,\n\t\t\talternateBands = axis.alternateBands,\n\t\t\tstackLabelOptions = options.stackLabels,\n\t\t\talternateGridColor = options.alternateGridColor,\n\t\t\ttickmarkOffset = axis.tickmarkOffset,\n\t\t\tlineWidth = options.lineWidth,\n\t\t\tlinePath,\n\t\t\thasRendered = chart.hasRendered,\n\t\t\tslideInTicks = hasRendered && defined(axis.oldMin) && !isNaN(axis.oldMin),\n\t\t\tshowAxis = axis.showAxis,\n\t\t\tfrom,\n\t\t\tto;\n\n\t\t// Reset\n\t\taxis.labelEdge.length = 0;\n\t\t//axis.justifyToPlot = overflow === 'justify';\n\t\taxis.overlap = false;\n\n\t\t// Mark all elements inActive before we go over and mark the active ones\n\t\teach([ticks, minorTicks, alternateBands], function (coll) {\n\t\t\tvar pos;\n\t\t\tfor (pos in coll) {\n\t\t\t\tcoll[pos].isActive = false;\n\t\t\t}\n\t\t});\n\n\t\t// If the series has data draw the ticks. Else only the line and title\n\t\tif (axis.hasData() || isLinked) {\n\n\t\t\t// minor ticks\n\t\t\tif (axis.minorTickInterval && !axis.categories) {\n\t\t\t\teach(axis.getMinorTickPositions(), function (pos) {\n\t\t\t\t\tif (!minorTicks[pos]) {\n\t\t\t\t\t\tminorTicks[pos] = new Tick(axis, pos, 'minor');\n\t\t\t\t\t}\n\n\t\t\t\t\t// render new ticks in old position\n\t\t\t\t\tif (slideInTicks && minorTicks[pos].isNew) {\n\t\t\t\t\t\tminorTicks[pos].render(null, true);\n\t\t\t\t\t}\n\n\t\t\t\t\tminorTicks[pos].render(null, false, 1);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Major ticks. Pull out the first item and render it last so that\n\t\t\t// we can get the position of the neighbour label. #808.\n\t\t\tif (tickPositions.length) { // #1300\n\t\t\t\teach(tickPositions, function (pos, i) {\n\n\t\t\t\t\t// linked axes need an extra check to find out if\n\t\t\t\t\tif (!isLinked || (pos >= axis.min && pos <= axis.max)) {\n\n\t\t\t\t\t\tif (!ticks[pos]) {\n\t\t\t\t\t\t\tticks[pos] = new Tick(axis, pos);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// render new ticks in old position\n\t\t\t\t\t\tif (slideInTicks && ticks[pos].isNew) {\n\t\t\t\t\t\t\tticks[pos].render(i, true, 0.1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tticks[pos].render(i);\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t\t// In a categorized axis, the tick marks are displayed between labels. So\n\t\t\t\t// we need to add a tick mark and grid line at the left edge of the X axis.\n\t\t\t\tif (tickmarkOffset && (axis.min === 0 || axis.single)) {\n\t\t\t\t\tif (!ticks[-1]) {\n\t\t\t\t\t\tticks[-1] = new Tick(axis, -1, null, true);\n\t\t\t\t\t}\n\t\t\t\t\tticks[-1].render(-1);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// alternate grid color\n\t\t\tif (alternateGridColor) {\n\t\t\t\teach(tickPositions, function (pos, i) {\n\t\t\t\t\tif (i % 2 === 0 && pos < axis.max) {\n\t\t\t\t\t\tif (!alternateBands[pos]) {\n\t\t\t\t\t\t\talternateBands[pos] = new Highcharts.PlotLineOrBand(axis);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfrom = pos + tickmarkOffset; // #949\n\t\t\t\t\t\tto = tickPositions[i + 1] !== UNDEFINED ? tickPositions[i + 1] + tickmarkOffset : axis.max;\n\t\t\t\t\t\talternateBands[pos].options = {\n\t\t\t\t\t\t\tfrom: isLog ? lin2log(from) : from,\n\t\t\t\t\t\t\tto: isLog ? lin2log(to) : to,\n\t\t\t\t\t\t\tcolor: alternateGridColor\n\t\t\t\t\t\t};\n\t\t\t\t\t\talternateBands[pos].render();\n\t\t\t\t\t\talternateBands[pos].isActive = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// custom plot lines and bands\n\t\t\tif (!axis._addedPlotLB) { // only first time\n\t\t\t\teach((options.plotLines || []).concat(options.plotBands || []), function (plotLineOptions) {\n\t\t\t\t\taxis.addPlotBandOrLine(plotLineOptions);\n\t\t\t\t});\n\t\t\t\taxis._addedPlotLB = true;\n\t\t\t}\n\n\t\t} // end if hasData\n\n\t\t// Remove inactive ticks\n\t\teach([ticks, minorTicks, alternateBands], function (coll) {\n\t\t\tvar pos,\n\t\t\t\ti,\n\t\t\t\tforDestruction = [],\n\t\t\t\tdelay = globalAnimation ? globalAnimation.duration || 500 : 0,\n\t\t\t\tdestroyInactiveItems = function () {\n\t\t\t\t\ti = forDestruction.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t// When resizing rapidly, the same items may be destroyed in different timeouts,\n\t\t\t\t\t\t// or the may be reactivated\n\t\t\t\t\t\tif (coll[forDestruction[i]] && !coll[forDestruction[i]].isActive) {\n\t\t\t\t\t\t\tcoll[forDestruction[i]].destroy();\n\t\t\t\t\t\t\tdelete coll[forDestruction[i]];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\tfor (pos in coll) {\n\n\t\t\t\tif (!coll[pos].isActive) {\n\t\t\t\t\t// Render to zero opacity\n\t\t\t\t\tcoll[pos].render(pos, false, 0);\n\t\t\t\t\tcoll[pos].isActive = false;\n\t\t\t\t\tforDestruction.push(pos);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// When the objects are finished fading out, destroy them\n\t\t\tif (coll === alternateBands || !chart.hasRendered || !delay) {\n\t\t\t\tdestroyInactiveItems();\n\t\t\t} else if (delay) {\n\t\t\t\tsetTimeout(destroyInactiveItems, delay);\n\t\t\t}\n\t\t});\n\n\t\t// Static items. As the axis group is cleared on subsequent calls\n\t\t// to render, these items are added outside the group.\n\t\t// axis line\n\t\tif (lineWidth) {\n\t\t\tlinePath = axis.getLinePath(lineWidth);\n\t\t\tif (!axis.axisLine) {\n\t\t\t\taxis.axisLine = renderer.path(linePath)\n\t\t\t\t\t.attr({\n\t\t\t\t\t\tstroke: options.lineColor,\n\t\t\t\t\t\t'stroke-width': lineWidth,\n\t\t\t\t\t\tzIndex: 7\n\t\t\t\t\t})\n\t\t\t\t\t.add(axis.axisGroup);\n\t\t\t} else {\n\t\t\t\taxis.axisLine.animate({ d: linePath });\n\t\t\t}\n\n\t\t\t// show or hide the line depending on options.showEmpty\n\t\t\taxis.axisLine[showAxis ? 'show' : 'hide']();\n\t\t}\n\n\t\tif (axisTitle && showAxis) {\n\n\t\t\taxisTitle[axisTitle.isNew ? 'attr' : 'animate'](\n\t\t\t\taxis.getTitlePosition()\n\t\t\t);\n\t\t\taxisTitle.isNew = false;\n\t\t}\n\n\t\t// Stacked totals:\n\t\tif (stackLabelOptions && stackLabelOptions.enabled) {\n\t\t\taxis.renderStackTotals();\n\t\t}\n\t\t// End stacked totals\n\n\t\taxis.isDirty = false;\n\t},\n\n\t/**\n\t * Redraw the axis to reflect changes in the data or axis extremes\n\t */\n\tredraw: function () {\n\t\t\n\t\t// render the axis\n\t\tthis.render();\n\n\t\t// move plot lines and bands\n\t\teach(this.plotLinesAndBands, function (plotLine) {\n\t\t\tplotLine.render();\n\t\t});\n\n\t\t// mark associated series as dirty and ready for redraw\n\t\teach(this.series, function (series) {\n\t\t\tseries.isDirty = true;\n\t\t});\n\n\t},\n\n\t/**\n\t * Destroys an Axis instance.\n\t */\n\tdestroy: function (keepEvents) {\n\t\tvar axis = this,\n\t\t\tstacks = axis.stacks,\n\t\t\tstackKey,\n\t\t\tplotLinesAndBands = axis.plotLinesAndBands,\n\t\t\ti;\n\n\t\t// Remove the events\n\t\tif (!keepEvents) {\n\t\t\tremoveEvent(axis);\n\t\t}\n\n\t\t// Destroy each stack total\n\t\tfor (stackKey in stacks) {\n\t\t\tdestroyObjectProperties(stacks[stackKey]);\n\n\t\t\tstacks[stackKey] = null;\n\t\t}\n\n\t\t// Destroy collections\n\t\teach([axis.ticks, axis.minorTicks, axis.alternateBands], function (coll) {\n\t\t\tdestroyObjectProperties(coll);\n\t\t});\n\t\ti = plotLinesAndBands.length;\n\t\twhile (i--) { // #1975\n\t\t\tplotLinesAndBands[i].destroy();\n\t\t}\n\n\t\t// Destroy local variables\n\t\teach(['stackTotalGroup', 'axisLine', 'axisTitle', 'axisGroup', 'cross', 'gridGroup', 'labelGroup'], function (prop) {\n\t\t\tif (axis[prop]) {\n\t\t\t\taxis[prop] = axis[prop].destroy();\n\t\t\t}\n\t\t});\n\n\t\t// Destroy crosshair\n\t\tif (this.cross) {\n\t\t\tthis.cross.destroy();\n\t\t}\n\t},\n\n\t/**\n\t * Draw the crosshair\n\t */\n\tdrawCrosshair: function (e, point) { // docs: Missing docs for Axis.crosshair. Also for properties.\n\n\t\tvar path,\n\t\t\toptions = this.crosshair,\n\t\t\tanimation = options.animation,\n\t\t\tpos,\n\t\t\tattribs,\n\t\t\tcategorized;\n\t\t\n\t\tif (\n\t\t\t// Disabled in options\n\t\t\t!this.crosshair || \n\t\t\t// Snap\n\t\t\t((defined(point) || !pick(this.crosshair.snap, true)) === false) || \n\t\t\t// Not on this axis (#4095, #2888)\n\t\t\t(point && point.series && point.series[this.coll] !== this)\n\t\t) {\n\t\t\tthis.hideCrosshair();\n\t\t\n\t\t} else {\t\t\t\n\n\t\t\t// Get the path\n\t\t\tif (!pick(options.snap, true)) {\n\t\t\t\tpos = (this.horiz ? e.chartX - this.pos : this.len - e.chartY + this.pos);\n\t\t\t} else if (defined(point)) {\n\t\t\t\t/*jslint eqeq: true*/\n\t\t\t\tpos = this.isXAxis ? point.plotX : this.len - point.plotY; // #3834\n\t\t\t\t/*jslint eqeq: false*/\n\t\t\t}\n\n\t\t\tif (this.isRadial) {\n\t\t\t\tpath = this.getPlotLinePath(this.isXAxis ? point.x : pick(point.stackY, point.y)) || null; // #3189\n\t\t\t} else {\n\t\t\t\tpath = this.getPlotLinePath(null, null, null, null, pos) || null; // #3189\n\t\t\t}\n\n\t\t\tif (path === null) {\n\t\t\t\tthis.hideCrosshair();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Draw the cross\n\t\t\tif (this.cross) {\n\t\t\t\tthis.cross\n\t\t\t\t\t.attr({ visibility: VISIBLE })[animation ? 'animate' : 'attr']({ d: path }, animation);\n\t\t\t} else {\n\t\t\t\tcategorized = this.categories && !this.isRadial;\n\t\t\t\tattribs = {\n\t\t\t\t\t'stroke-width': options.width || (categorized ? this.transA : 1),\n\t\t\t\t\tstroke: options.color || (categorized ? 'rgba(155,200,255,0.2)' : '#C0C0C0'),\n\t\t\t\t\tzIndex: options.zIndex || 2\n\t\t\t\t};\n\t\t\t\tif (options.dashStyle) {\n\t\t\t\t\tattribs.dashstyle = options.dashStyle;\n\t\t\t\t}\n\t\t\t\tthis.cross = this.chart.renderer.path(path).attr(attribs).add();\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t/**\n\t *\tHide the crosshair.\n\t */\n\thideCrosshair: function () {\n\t\tif (this.cross) {\n\t\t\tthis.cross.hide();\n\t\t}\n\t}\n}; // end Axis\n\nextend(Axis.prototype, AxisPlotLineOrBandExtension);\n\n/**\n * Set the tick positions to a time unit that makes sense, for example\n * on the first of each month or on every Monday. Return an array\n * with the time positions. Used in datetime axes as well as for grouping\n * data on a datetime axis.\n *\n * @param {Object} normalizedInterval The interval in axis values (ms) and the count\n * @param {Number} min The minimum in axis values\n * @param {Number} max The maximum in axis values\n * @param {Number} startOfWeek\n */\nAxis.prototype.getTimeTicks = function (normalizedInterval, min, max, startOfWeek) {\n\tvar tickPositions = [],\n\t\ti,\n\t\thigherRanks = {},\n\t\tuseUTC = defaultOptions.global.useUTC,\n\t\tminYear, // used in months and years as a basis for Date.UTC()\n\t\tminDate = new Date(min - getTZOffset(min)),\n\t\tinterval = normalizedInterval.unitRange,\n\t\tcount = normalizedInterval.count;\n\n\tif (defined(min)) { // #1300\n\t\tminDate[setMilliseconds](interval >= timeUnits.second ? 0 : // #3935\n\t\t\tcount * mathFloor(minDate.getMilliseconds() / count)); // #3652, #3654\n\n\t\tif (interval >= timeUnits.second) { // second\n\t\t\tminDate[setSeconds](interval >= timeUnits.minute ? 0 : // #3935\n\t\t\t\tcount * mathFloor(minDate.getSeconds() / count));\n\t\t}\n\t\n\t\tif (interval >= timeUnits.minute) { // minute\n\t\t\tminDate[setMinutes](interval >= timeUnits.hour ? 0 :\n\t\t\t\tcount * mathFloor(minDate[getMinutes]() / count));\n\t\t}\n\t\n\t\tif (interval >= timeUnits.hour) { // hour\n\t\t\tminDate[setHours](interval >= timeUnits.day ? 0 :\n\t\t\t\tcount * mathFloor(minDate[getHours]() / count));\n\t\t}\n\t\n\t\tif (interval >= timeUnits.day) { // day\n\t\t\tminDate[setDate](interval >= timeUnits.month ? 1 :\n\t\t\t\tcount * mathFloor(minDate[getDate]() / count));\n\t\t}\n\t\n\t\tif (interval >= timeUnits.month) { // month\n\t\t\tminDate[setMonth](interval >= timeUnits.year ? 0 :\n\t\t\t\tcount * mathFloor(minDate[getMonth]() / count));\n\t\t\tminYear = minDate[getFullYear]();\n\t\t}\n\t\n\t\tif (interval >= timeUnits.year) { // year\n\t\t\tminYear -= minYear % count;\n\t\t\tminDate[setFullYear](minYear);\n\t\t}\n\t\n\t\t// week is a special case that runs outside the hierarchy\n\t\tif (interval === timeUnits.week) {\n\t\t\t// get start of current week, independent of count\n\t\t\tminDate[setDate](minDate[getDate]() - minDate[getDay]() +\n\t\t\t\tpick(startOfWeek, 1));\n\t\t}\n\t\n\t\n\t\t// get tick positions\n\t\ti = 1;\n\t\tif (timezoneOffset || getTimezoneOffset) {\n\t\t\tminDate = minDate.getTime();\n\t\t\tminDate = new Date(minDate + getTZOffset(minDate));\n\t\t}\n\t\tminYear = minDate[getFullYear]();\n\t\tvar time = minDate.getTime(),\n\t\t\tminMonth = minDate[getMonth](),\n\t\t\tminDateDate = minDate[getDate](),\n\t\t\tlocalTimezoneOffset = (timeUnits.day + \n\t\t\t\t\t(useUTC ? getTZOffset(minDate) : minDate.getTimezoneOffset() * 60 * 1000)\n\t\t\t\t) % timeUnits.day; // #950, #3359\n\t\n\t\t// iterate and add tick positions at appropriate values\n\t\twhile (time < max) {\n\t\t\ttickPositions.push(time);\n\t\n\t\t\t// if the interval is years, use Date.UTC to increase years\n\t\t\tif (interval === timeUnits.year) {\n\t\t\t\ttime = makeTime(minYear + i * count, 0);\n\t\n\t\t\t// if the interval is months, use Date.UTC to increase months\n\t\t\t} else if (interval === timeUnits.month) {\n\t\t\t\ttime = makeTime(minYear, minMonth + i * count);\n\t\n\t\t\t// if we're using global time, the interval is not fixed as it jumps\n\t\t\t// one hour at the DST crossover\n\t\t\t} else if (!useUTC && (interval === timeUnits.day || interval === timeUnits.week)) {\n\t\t\t\ttime = makeTime(minYear, minMonth, minDateDate +\n\t\t\t\t\ti * count * (interval === timeUnits.day ? 1 : 7));\n\t\n\t\t\t// else, the interval is fixed and we use simple addition\n\t\t\t} else {\n\t\t\t\ttime += interval * count;\n\t\t\t}\n\t\n\t\t\ti++;\n\t\t}\n\t\n\t\t// push the last time\n\t\ttickPositions.push(time);\n\n\n\t\t// mark new days if the time is dividible by day (#1649, #1760)\n\t\teach(grep(tickPositions, function (time) {\n\t\t\treturn interval <= timeUnits.hour && time % timeUnits.day === localTimezoneOffset;\n\t\t}), function (time) {\n\t\t\thigherRanks[time] = 'day';\n\t\t});\n\t}\n\n\n\t// record information on the chosen unit - for dynamic label formatter\n\ttickPositions.info = extend(normalizedInterval, {\n\t\thigherRanks: higherRanks,\n\t\ttotalRange: interval * count\n\t});\n\n\treturn tickPositions;\n};\n\n/**\n * Get a normalized tick interval for dates. Returns a configuration object with\n * unit range (interval), count and name. Used to prepare data for getTimeTicks. \n * Previously this logic was part of getTimeTicks, but as getTimeTicks now runs\n * of segments in stock charts, the normalizing logic was extracted in order to \n * prevent it for running over again for each segment having the same interval. \n * #662, #697.\n */\nAxis.prototype.normalizeTimeTickInterval = function (tickInterval, unitsOption) {\n\tvar units = unitsOption || [[\n\t\t\t\t'millisecond', // unit name\n\t\t\t\t[1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n\t\t\t], [\n\t\t\t\t'second',\n\t\t\t\t[1, 2, 5, 10, 15, 30]\n\t\t\t], [\n\t\t\t\t'minute',\n\t\t\t\t[1, 2, 5, 10, 15, 30]\n\t\t\t], [\n\t\t\t\t'hour',\n\t\t\t\t[1, 2, 3, 4, 6, 8, 12]\n\t\t\t], [\n\t\t\t\t'day',\n\t\t\t\t[1, 2]\n\t\t\t], [\n\t\t\t\t'week',\n\t\t\t\t[1, 2]\n\t\t\t], [\n\t\t\t\t'month',\n\t\t\t\t[1, 2, 3, 4, 6]\n\t\t\t], [\n\t\t\t\t'year',\n\t\t\t\tnull\n\t\t\t]],\n\t\tunit = units[units.length - 1], // default unit is years\n\t\tinterval = timeUnits[unit[0]],\n\t\tmultiples = unit[1],\n\t\tcount,\n\t\ti;\n\t\t\n\t// loop through the units to find the one that best fits the tickInterval\n\tfor (i = 0; i < units.length; i++) {\n\t\tunit = units[i];\n\t\tinterval = timeUnits[unit[0]];\n\t\tmultiples = unit[1];\n\n\n\t\tif (units[i + 1]) {\n\t\t\t// lessThan is in the middle between the highest multiple and the next unit.\n\t\t\tvar lessThan = (interval * multiples[multiples.length - 1] +\n\t\t\t\t\t\ttimeUnits[units[i + 1][0]]) / 2;\n\n\t\t\t// break and keep the current unit\n\t\t\tif (tickInterval <= lessThan) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// prevent 2.5 years intervals, though 25, 250 etc. are allowed\n\tif (interval === timeUnits.year && tickInterval < 5 * interval) {\n\t\tmultiples = [1, 2, 5];\n\t}\n\n\t// get the count\n\tcount = normalizeTickInterval(\n\t\ttickInterval / interval, \n\t\tmultiples,\n\t\tunit[0] === 'year' ? mathMax(getMagnitude(tickInterval / interval), 1) : 1 // #1913, #2360\n\t);\n\t\n\treturn {\n\t\tunitRange: interval,\n\t\tcount: count,\n\t\tunitName: unit[0]\n\t};\n};/**\n * Methods defined on the Axis prototype\n */\n\n/**\n * Set the tick positions of a logarithmic axis\n */\nAxis.prototype.getLogTickPositions = function (interval, min, max, minor) {\n\tvar axis = this,\n\t\toptions = axis.options,\n\t\taxisLength = axis.len,\n\t\t// Since we use this method for both major and minor ticks,\n\t\t// use a local variable and return the result\n\t\tpositions = []; \n\t\n\t// Reset\n\tif (!minor) {\n\t\taxis._minorAutoInterval = null;\n\t}\n\t\n\t// First case: All ticks fall on whole logarithms: 1, 10, 100 etc.\n\tif (interval >= 0.5) {\n\t\tinterval = mathRound(interval);\n\t\tpositions = axis.getLinearTickPositions(interval, min, max);\n\t\t\n\t// Second case: We need intermediary ticks. For example \n\t// 1, 2, 4, 6, 8, 10, 20, 40 etc. \n\t} else if (interval >= 0.08) {\n\t\tvar roundedMin = mathFloor(min),\n\t\t\tintermediate,\n\t\t\ti,\n\t\t\tj,\n\t\t\tlen,\n\t\t\tpos,\n\t\t\tlastPos,\n\t\t\tbreak2;\n\t\t\t\n\t\tif (interval > 0.3) {\n\t\t\tintermediate = [1, 2, 4];\n\t\t} else if (interval > 0.15) { // 0.2 equals five minor ticks per 1, 10, 100 etc\n\t\t\tintermediate = [1, 2, 4, 6, 8];\n\t\t} else { // 0.1 equals ten minor ticks per 1, 10, 100 etc\n\t\t\tintermediate = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\t\t}\n\t\t\n\t\tfor (i = roundedMin; i < max + 1 && !break2; i++) {\n\t\t\tlen = intermediate.length;\n\t\t\tfor (j = 0; j < len && !break2; j++) {\n\t\t\t\tpos = log2lin(lin2log(i) * intermediate[j]);\n\t\t\t\tif (pos > min && (!minor || lastPos <= max) && lastPos !== UNDEFINED) { // #1670, lastPos is #3113\n\t\t\t\t\tpositions.push(lastPos);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (lastPos > max) {\n\t\t\t\t\tbreak2 = true;\n\t\t\t\t}\n\t\t\t\tlastPos = pos;\n\t\t\t}\n\t\t}\n\t\t\n\t// Third case: We are so deep in between whole logarithmic values that\n\t// we might as well handle the tick positions like a linear axis. For\n\t// example 1.01, 1.02, 1.03, 1.04.\n\t} else {\n\t\tvar realMin = lin2log(min),\n\t\t\trealMax = lin2log(max),\n\t\t\ttickIntervalOption = options[minor ? 'minorTickInterval' : 'tickInterval'],\n\t\t\tfilteredTickIntervalOption = tickIntervalOption === 'auto' ? null : tickIntervalOption,\n\t\t\ttickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1),\n\t\t\ttotalPixelLength = minor ? axisLength / axis.tickPositions.length : axisLength;\n\t\t\n\t\tinterval = pick(\n\t\t\tfilteredTickIntervalOption,\n\t\t\taxis._minorAutoInterval,\n\t\t\t(realMax - realMin) * tickPixelIntervalOption / (totalPixelLength || 1)\n\t\t);\n\t\t\n\t\tinterval = normalizeTickInterval(\n\t\t\tinterval, \n\t\t\tnull, \n\t\t\tgetMagnitude(interval)\n\t\t);\n\t\t\n\t\tpositions = map(axis.getLinearTickPositions(\n\t\t\tinterval, \n\t\t\trealMin,\n\t\t\trealMax\t\n\t\t), log2lin);\n\t\t\n\t\tif (!minor) {\n\t\t\taxis._minorAutoInterval = interval / 5;\n\t\t}\n\t}\n\t\n\t// Set the axis-level tickInterval variable \n\tif (!minor) {\n\t\taxis.tickInterval = interval;\n\t}\n\treturn positions;\n};/**\n * The tooltip object\n * @param {Object} chart The chart instance\n * @param {Object} options Tooltip options\n */\nvar Tooltip = Highcharts.Tooltip = function () {\n\tthis.init.apply(this, arguments);\n};\n\nTooltip.prototype = {\n\n\tinit: function (chart, options) {\n\n\t\tvar borderWidth = options.borderWidth,\n\t\t\tstyle = options.style,\n\t\t\tpadding = pInt(style.padding);\n\n\t\t// Save the chart and options\n\t\tthis.chart = chart;\n\t\tthis.options = options;\n\n\t\t// Keep track of the current series\n\t\t//this.currentSeries = UNDEFINED;\n\n\t\t// List of crosshairs\n\t\tthis.crosshairs = [];\n\n\t\t// Current values of x and y when animating\n\t\tthis.now = { x: 0, y: 0 };\n\n\t\t// The tooltip is initially hidden\n\t\tthis.isHidden = true;\n\n\n\t\t// create the label\t\t\n\t\tthis.label = chart.renderer.label('', 0, 0, options.shape || 'callout', null, null, options.useHTML, null, 'tooltip')\n\t\t\t.attr({\n\t\t\t\tpadding: padding,\n\t\t\t\tfill: options.backgroundColor,\n\t\t\t\t'stroke-width': borderWidth,\n\t\t\t\tr: options.borderRadius,\n\t\t\t\tzIndex: 8\n\t\t\t})\n\t\t\t.css(style)\n\t\t\t.css({ padding: 0 }) // Remove it from VML, the padding is applied as an attribute instead (#1117)\n\t\t\t.add()\n\t\t\t.attr({ y: -9999 }); // #2301, #2657\n\n\t\t// When using canVG the shadow shows up as a gray circle\n\t\t// even if the tooltip is hidden.\n\t\tif (!useCanVG) {\n\t\t\tthis.label.shadow(options.shadow);\n\t\t}\n\n\t\t// Public property for getting the shared state.\n\t\tthis.shared = options.shared;\n\t},\n\n\t/**\n\t * Destroy the tooltip and its elements.\n\t */\n\tdestroy: function () {\n\t\t// Destroy and clear local variables\n\t\tif (this.label) {\n\t\t\tthis.label = this.label.destroy();\n\t\t}\n\t\tclearTimeout(this.hideTimer);\n\t\tclearTimeout(this.tooltipTimeout);\n\t},\n\n\t/**\n\t * Provide a soft movement for the tooltip\n\t *\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @private\n\t */\n\tmove: function (x, y, anchorX, anchorY) {\n\t\tvar tooltip = this,\n\t\t\tnow = tooltip.now,\n\t\t\tanimate = tooltip.options.animation !== false && !tooltip.isHidden && \n\t\t\t\t// When we get close to the target position, abort animation and land on the right place (#3056)\n\t\t\t\t(mathAbs(x - now.x) > 1 || mathAbs(y - now.y) > 1),\n\t\t\tskipAnchor = tooltip.followPointer || tooltip.len > 1;\n\n\t\t// Get intermediate values for animation\n\t\textend(now, {\n\t\t\tx: animate ? (2 * now.x + x) / 3 : x,\n\t\t\ty: animate ? (now.y + y) / 2 : y,\n\t\t\tanchorX: skipAnchor ? UNDEFINED : animate ? (2 * now.anchorX + anchorX) / 3 : anchorX,\n\t\t\tanchorY: skipAnchor ? UNDEFINED : animate ? (now.anchorY + anchorY) / 2 : anchorY\n\t\t});\n\n\t\t// Move to the intermediate value\n\t\ttooltip.label.attr(now);\n\n\t\t\n\t\t// Run on next tick of the mouse tracker\n\t\tif (animate) {\n\t\t\n\t\t\t// Never allow two timeouts\n\t\t\tclearTimeout(this.tooltipTimeout);\n\t\t\t\n\t\t\t// Set the fixed interval ticking for the smooth tooltip\n\t\t\tthis.tooltipTimeout = setTimeout(function () {\n\t\t\t\t// The interval function may still be running during destroy, so check that the chart is really there before calling.\n\t\t\t\tif (tooltip) {\n\t\t\t\t\ttooltip.move(x, y, anchorX, anchorY);\n\t\t\t\t}\n\t\t\t}, 32);\n\t\t\t\n\t\t}\n\t},\n\n\t/**\n\t * Hide the tooltip\n\t */\n\thide: function (delay) {\n\t\tvar tooltip = this,\n\t\t\thoverPoints;\n\t\t\n\t\tclearTimeout(this.hideTimer); // disallow duplicate timers (#1728, #1766)\n\t\tif (!this.isHidden) {\n\t\t\thoverPoints = this.chart.hoverPoints;\n\n\t\t\tthis.hideTimer = setTimeout(function () {\n\t\t\t\ttooltip.label.fadeOut();\n\t\t\t\ttooltip.isHidden = true;\n\t\t\t}, pick(delay, this.options.hideDelay, 500));\n\t\t}\n\t},\n\t\n\t/** \n\t * Extendable method to get the anchor position of the tooltip\n\t * from a point or set of points\n\t */\n\tgetAnchor: function (points, mouseEvent) {\n\t\tvar ret,\n\t\t\tchart = this.chart,\n\t\t\tinverted = chart.inverted,\n\t\t\tplotTop = chart.plotTop,\n\t\t\tplotLeft = chart.plotLeft,\n\t\t\tplotX = 0,\n\t\t\tplotY = 0,\n\t\t\tyAxis,\n\t\t\txAxis;\n\t\t\n\t\tpoints = splat(points);\n\t\t\n\t\t// Pie uses a special tooltipPos\n\t\tret = points[0].tooltipPos;\n\t\t\n\t\t// When tooltip follows mouse, relate the position to the mouse\n\t\tif (this.followPointer && mouseEvent) {\n\t\t\tif (mouseEvent.chartX === UNDEFINED) {\n\t\t\t\tmouseEvent = chart.pointer.normalize(mouseEvent);\n\t\t\t}\n\t\t\tret = [\n\t\t\t\tmouseEvent.chartX - chart.plotLeft,\n\t\t\t\tmouseEvent.chartY - plotTop\n\t\t\t];\n\t\t}\n\t\t// When shared, use the average position\n\t\tif (!ret) {\n\t\t\teach(points, function (point) {\n\t\t\t\tyAxis = point.series.yAxis;\n\t\t\t\txAxis = point.series.xAxis;\n\t\t\t\tplotX += point.plotX  + (!inverted && xAxis ? xAxis.left - plotLeft : 0); \n\t\t\t\tplotY += (point.plotLow ? (point.plotLow + point.plotHigh) / 2 : point.plotY) +\n\t\t\t\t\t(!inverted && yAxis ? yAxis.top - plotTop : 0); // #1151\n\t\t\t});\n\t\t\t\n\t\t\tplotX /= points.length;\n\t\t\tplotY /= points.length;\n\t\t\t\n\t\t\tret = [\n\t\t\t\tinverted ? chart.plotWidth - plotY : plotX,\n\t\t\t\tthis.shared && !inverted && points.length > 1 && mouseEvent ? \n\t\t\t\t\tmouseEvent.chartY - plotTop : // place shared tooltip next to the mouse (#424)\n\t\t\t\t\tinverted ? chart.plotHeight - plotX : plotY\n\t\t\t];\n\t\t}\n\n\t\treturn map(ret, mathRound);\n\t},\n\t\n\t/**\n\t * Place the tooltip in a chart without spilling over\n\t * and not covering the point it self.\n\t */\n\tgetPosition: function (boxWidth, boxHeight, point) {\n\t\t\n\t\tvar chart = this.chart,\n\t\t\tdistance = this.distance,\n\t\t\tret = {},\n\t\t\th = point.h || 0, // #4117\n\t\t\tswapped,\n\t\t\tfirst = ['y', chart.chartHeight, boxHeight, point.plotY + chart.plotTop],\n\t\t\tsecond = ['x', chart.chartWidth, boxWidth, point.plotX + chart.plotLeft],\n\t\t\t// The far side is right or bottom\n\t\t\tpreferFarSide = pick(point.ttBelow, (chart.inverted && !point.negative) || (!chart.inverted && point.negative)),\n\t\t\t/**\n\t\t\t * Handle the preferred dimension. When the preferred dimension is tooltip\n\t\t\t * on top or bottom of the point, it will look for space there.\n\t\t\t */\n\t\t\tfirstDimension = function (dim, outerSize, innerSize, point) {\n\t\t\t\tvar roomLeft = innerSize < point - distance,\n\t\t\t\t\troomRight = point + distance + innerSize < outerSize,\n\t\t\t\t\talignedLeft = point - distance - innerSize,\n\t\t\t\t\talignedRight = point + distance;\n\n\t\t\t\tif (preferFarSide && roomRight) {\n\t\t\t\t\tret[dim] = alignedRight;\n\t\t\t\t} else if (!preferFarSide && roomLeft) {\n\t\t\t\t\tret[dim] = alignedLeft;\n\t\t\t\t} else if (roomLeft) {\n\t\t\t\t\tret[dim] = alignedLeft - h < 0 ? alignedLeft : alignedLeft - h;\n\t\t\t\t} else if (roomRight) {\n\t\t\t\t\tret[dim] = alignedRight + h + innerSize > outerSize ? alignedRight : alignedRight + h;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * Handle the secondary dimension. If the preferred dimension is tooltip\n\t\t\t * on top or bottom of the point, the second dimension is to align the tooltip\n\t\t\t * above the point, trying to align center but allowing left or right\n\t\t\t * align within the chart box.\n\t\t\t */\n\t\t\tsecondDimension = function (dim, outerSize, innerSize, point) {\n\t\t\t\t// Too close to the edge, return false and swap dimensions\n\t\t\t\tif (point < distance || point > outerSize - distance) {\n\t\t\t\t\treturn false;\n\t\t\t\t\n\t\t\t\t// Align left/top\n\t\t\t\t} else if (point < innerSize / 2) {\n\t\t\t\t\tret[dim] = 1;\n\t\t\t\t// Align right/bottom\n\t\t\t\t} else if (point > outerSize - innerSize / 2) {\n\t\t\t\t\tret[dim] = outerSize - innerSize - 2;\n\t\t\t\t// Align center\n\t\t\t\t} else {\n\t\t\t\t\tret[dim] = point - innerSize / 2;\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * Swap the dimensions \n\t\t\t */\n\t\t\tswap = function (count) {\n\t\t\t\tvar temp = first;\n\t\t\t\tfirst = second;\n\t\t\t\tsecond = temp;\n\t\t\t\tswapped = count;\n\t\t\t},\n\t\t\trun = function () {\n\t\t\t\tif (firstDimension.apply(0, first) !== false) {\n\t\t\t\t\tif (secondDimension.apply(0, second) === false && !swapped) {\n\t\t\t\t\t\tswap(true);\n\t\t\t\t\t\trun();\n\t\t\t\t\t}\n\t\t\t\t} else if (!swapped) {\n\t\t\t\t\tswap(true);\n\t\t\t\t\trun();\n\t\t\t\t} else {\n\t\t\t\t\tret.x = ret.y = 0;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Under these conditions, prefer the tooltip on the side of the point\n\t\tif (chart.inverted || this.len > 1) {\n\t\t\tswap();\n\t\t}\n\t\trun();\n\n\t\treturn ret;\n\t\n\t},\n\n\t/**\n\t * In case no user defined formatter is given, this will be used. Note that the context\n\t * here is an object holding point, series, x, y etc.\n\t */\n\tdefaultFormatter: function (tooltip) {\n\t\tvar items = this.points || splat(this),\n\t\t\ts;\n\n\t\t// build the header\n\t\ts = [tooltip.tooltipFooterHeaderFormatter(items[0])]; //#3397: abstraction to enable formatting of footer and header\n\n\t\t// build the values\n\t\ts = s.concat(tooltip.bodyFormatter(items));\n\n\t\t// footer\n\t\ts.push(tooltip.tooltipFooterHeaderFormatter(items[0], true)); //#3397: abstraction to enable formatting of footer and header\n\n\t\treturn s.join('');\n\t},\n\n\t/**\n\t * Refresh the tooltip's text and position.\n\t * @param {Object} point\n\t */\n\trefresh: function (point, mouseEvent) {\n\t\tvar tooltip = this,\n\t\t\tchart = tooltip.chart,\n\t\t\tlabel = tooltip.label,\n\t\t\toptions = tooltip.options,\n\t\t\tx,\n\t\t\ty,\n\t\t\tanchor,\n\t\t\ttextConfig = {},\n\t\t\ttext,\n\t\t\tpointConfig = [],\n\t\t\tformatter = options.formatter || tooltip.defaultFormatter,\n\t\t\thoverPoints = chart.hoverPoints,\n\t\t\tborderColor,\n\t\t\tshared = tooltip.shared,\n\t\t\tcurrentSeries;\n\t\t\t\n\t\tclearTimeout(this.hideTimer);\n\t\t\n\t\t// get the reference point coordinates (pie charts use tooltipPos)\n\t\ttooltip.followPointer = splat(point)[0].series.tooltipOptions.followPointer;\n\t\tanchor = tooltip.getAnchor(point, mouseEvent);\n\t\tx = anchor[0];\n\t\ty = anchor[1];\n\n\t\t// shared tooltip, array is sent over\n\t\tif (shared && !(point.series && point.series.noSharedTooltip)) {\n\t\t\t\n\t\t\t// hide previous hoverPoints and set new\n\t\t\t\n\t\t\tchart.hoverPoints = point;\n\t\t\tif (hoverPoints) {\n\t\t\t\teach(hoverPoints, function (point) {\n\t\t\t\t\tpoint.setState();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\teach(point, function (item) {\n\t\t\t\titem.setState(HOVER_STATE);\n\n\t\t\t\tpointConfig.push(item.getLabelConfig());\n\t\t\t});\n\n\t\t\ttextConfig = {\n\t\t\t\tx: point[0].category,\n\t\t\t\ty: point[0].y\n\t\t\t};\n\t\t\ttextConfig.points = pointConfig;\n\t\t\tthis.len = pointConfig.length;\n\t\t\tpoint = point[0];\n\n\t\t// single point tooltip\n\t\t} else {\n\t\t\ttextConfig = point.getLabelConfig();\n\t\t}\n\t\ttext = formatter.call(textConfig, tooltip);\n\n\t\t// register the current series\n\t\tcurrentSeries = point.series;\n\t\tthis.distance = pick(currentSeries.tooltipOptions.distance, 16);\n\n\t\t// update the inner HTML\n\t\tif (text === false) {\n\t\t\tthis.hide();\n\t\t} else {\n\n\t\t\t// show it\n\t\t\tif (tooltip.isHidden) {\n\t\t\t\tstop(label);\n\t\t\t\tlabel.attr('opacity', 1).show();\n\t\t\t}\n\n\t\t\t// update text\n\t\t\tlabel.attr({\n\t\t\t\ttext: text\n\t\t\t});\n\n\t\t\t// set the stroke color of the box\n\t\t\tborderColor = options.borderColor || point.color || currentSeries.color || '#606060';\n\t\t\tlabel.attr({\n\t\t\t\tstroke: borderColor\n\t\t\t});\n\t\t\ttooltip.updatePosition({ \n\t\t\t\tplotX: x, \n\t\t\t\tplotY: y, \n\t\t\t\tnegative: point.negative, \n\t\t\t\tttBelow: point.ttBelow, \n\t\t\t\th: anchor[2] || 0\n\t\t\t});\n\t\t\n\t\t\tthis.isHidden = false;\n\t\t}\n\t\tfireEvent(chart, 'tooltipRefresh', {\n\t\t\t\ttext: text,\n\t\t\t\tx: x + chart.plotLeft,\n\t\t\t\ty: y + chart.plotTop,\n\t\t\t\tborderColor: borderColor\n\t\t\t});\n\t},\n\t\n\t/**\n\t * Find the new position and perform the move\n\t */\n\tupdatePosition: function (point) {\n\t\tvar chart = this.chart,\n\t\t\tlabel = this.label, \n\t\t\tpos = (this.options.positioner || this.getPosition).call(\n\t\t\t\tthis,\n\t\t\t\tlabel.width,\n\t\t\t\tlabel.height,\n\t\t\t\tpoint\n\t\t\t);\n\n\t\t// do the move\n\t\tthis.move(\n\t\t\tmathRound(pos.x), \n\t\t\tmathRound(pos.y || 0), // can be undefined (#3977) \n\t\t\tpoint.plotX + chart.plotLeft, \n\t\t\tpoint.plotY + chart.plotTop\n\t\t);\n\t},\n\n\t/** \n\t * Get the best X date format based on the closest point range on the axis.\n\t */\n\tgetXDateFormat: function (point, options, xAxis) {\n\t\tvar xDateFormat,\n\t\t\tdateTimeLabelFormats = options.dateTimeLabelFormats,\n\t\t\tclosestPointRange = xAxis && xAxis.closestPointRange,\n\t\t\tn,\n\t\t\tblank = '01-01 00:00:00.000',\n\t\t\tstrpos = {\n\t\t\t\tmillisecond: 15,\n\t\t\t\tsecond: 12,\n\t\t\t\tminute: 9,\n\t\t\t\thour: 6,\n\t\t\t\tday: 3\n\t\t\t},\n\t\t\tdate,\n\t\t\tlastN = 'millisecond'; // for sub-millisecond data, #4223\n\n\t\tif (closestPointRange) {\n\t\t\tdate = dateFormat('%m-%d %H:%M:%S.%L', point.x);\n\t\t\tfor (n in timeUnits) {\n\n\t\t\t\t// If the range is exactly one week and we're looking at a Sunday/Monday, go for the week format\n\t\t\t\tif (closestPointRange === timeUnits.week && +dateFormat('%w', point.x) === xAxis.options.startOfWeek && \n\t\t\t\t\t\tdate.substr(6) === blank.substr(6)) {\n\t\t\t\t\tn = 'week';\n\t\t\t\t\tbreak;\n\n\t\t\t\t// The first format that is too great for the range\n\t\t\t\t} else if (timeUnits[n] > closestPointRange) {\n\t\t\t\t\tn = lastN;\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\t// If the point is placed every day at 23:59, we need to show\n\t\t\t\t// the minutes as well. #2637.\n\t\t\t\t} else if (strpos[n] && date.substr(strpos[n]) !== blank.substr(strpos[n])) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Weeks are outside the hierarchy, only apply them on Mondays/Sundays like in the first condition\n\t\t\t\tif (n !== 'week') {\n\t\t\t\t\tlastN = n;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (n) {\n\t\t\t\txDateFormat = dateTimeLabelFormats[n];\n\t\t\t}\n\t\t} else {\n\t\t\txDateFormat = dateTimeLabelFormats.day;\n\t\t}\n\n\t\treturn xDateFormat || dateTimeLabelFormats.year; // #2546, 2581\n\t},\n\n\t/**\n\t * Format the footer/header of the tooltip\n\t * #3397: abstraction to enable formatting of footer and header\n\t */\n\ttooltipFooterHeaderFormatter: function (point, isFooter) {\n\t\tvar footOrHead = isFooter ? 'footer' : 'header',\n\t\t\tseries = point.series,\n\t\t\ttooltipOptions = series.tooltipOptions,\n\t\t\txDateFormat = tooltipOptions.xDateFormat,\n\t\t\txAxis = series.xAxis,\n\t\t\tisDateTime = xAxis && xAxis.options.type === 'datetime' && isNumber(point.key),\n\t\t\tformatString = tooltipOptions[footOrHead+'Format'];\n\n\t\t// Guess the best date format based on the closest point distance (#568, #3418)\n\t\tif (isDateTime && !xDateFormat) {\n\t\t\txDateFormat = this.getXDateFormat(point, tooltipOptions, xAxis);\n\t\t}\n\n\t\t// Insert the footer date format if any\n\t\tif (isDateTime && xDateFormat) {\n\t\t\tformatString = formatString.replace('{point.key}', '{point.key:' + xDateFormat + '}');\n\t\t}\n\n\t\treturn format(formatString, {\n\t\t\tpoint: point,\n\t\t\tseries: series\n\t\t});\n\t},\n\n\t/**\n     * Build the body (lines) of the tooltip by iterating over the items and returning one entry for each item,\n     * abstracting this functionality allows to easily overwrite and extend it. \n\t */\n\tbodyFormatter: function (items) {\n        return map(items, function (item) {\n            var tooltipOptions = item.series.tooltipOptions;\n            return (tooltipOptions.pointFormatter || item.point.tooltipFormatter).call(item.point, tooltipOptions.pointFormat);\n        });\n    }\n    \n};\n\nvar hoverChartIndex;\n\n// Global flag for touch support\nhasTouch = doc.documentElement.ontouchstart !== UNDEFINED;\n\n/**\n * The mouse tracker object. All methods starting with \"on\" are primary DOM event handlers. \n * Subsequent methods should be named differently from what they are doing.\n * @param {Object} chart The Chart instance\n * @param {Object} options The root options object\n */\nvar Pointer = Highcharts.Pointer = function (chart, options) {\n\tthis.init(chart, options);\n};\n\nPointer.prototype = {\n\t/**\n\t * Initialize Pointer\n\t */\n\tinit: function (chart, options) {\n\t\t\n\t\tvar chartOptions = options.chart,\n\t\t\tchartEvents = chartOptions.events,\n\t\t\tzoomType = useCanVG ? '' : chartOptions.zoomType,\n\t\t\tinverted = chart.inverted,\n\t\t\tzoomX,\n\t\t\tzoomY;\n\n\t\t// Store references\n\t\tthis.options = options;\n\t\tthis.chart = chart;\n\t\t\n\t\t// Zoom status\n\t\tthis.zoomX = zoomX = /x/.test(zoomType);\n\t\tthis.zoomY = zoomY = /y/.test(zoomType);\n\t\tthis.zoomHor = (zoomX && !inverted) || (zoomY && inverted);\n\t\tthis.zoomVert = (zoomY && !inverted) || (zoomX && inverted);\n\t\tthis.hasZoom = zoomX || zoomY;\n\n\t\t// Do we need to handle click on a touch device?\n\t\tthis.runChartClick = chartEvents && !!chartEvents.click;\n\n\t\tthis.pinchDown = [];\n\t\tthis.lastValidTouch = {};\n\n\t\tif (Highcharts.Tooltip && options.tooltip.enabled) {\n\t\t\tchart.tooltip = new Tooltip(chart, options.tooltip);\n\t\t\tthis.followTouchMove = pick(options.tooltip.followTouchMove, true);\n\t\t}\n\n\t\tthis.setDOMEvents();\n\t}, \n\n\t/**\n\t * Add crossbrowser support for chartX and chartY\n\t * @param {Object} e The event object in standard browsers\n\t */\n\tnormalize: function (e, chartPosition) {\n\t\tvar chartX,\n\t\t\tchartY,\n\t\t\tePos;\n\n\t\t// common IE normalizing\n\t\te = e || window.event;\n\n\t\t// Framework specific normalizing (#1165)\n\t\te = washMouseEvent(e);\n\n\t\t// More IE normalizing, needs to go after washMouseEvent\n\t\tif (!e.target) {\n\t\t\te.target = e.srcElement;\n\t\t}\n\t\t\n\t\t// iOS (#2757)\n\t\tePos = e.touches ?  (e.touches.length ? e.touches.item(0) : e.changedTouches[0]) : e;\n\n\t\t// Get mouse position\n\t\tif (!chartPosition) {\n\t\t\tthis.chartPosition = chartPosition = offset(this.chart.container);\n\t\t}\n\n\t\t// chartX and chartY\n\t\tif (ePos.pageX === UNDEFINED) { // IE < 9. #886.\n\t\t\tchartX = mathMax(e.x, e.clientX - chartPosition.left); // #2005, #2129: the second case is \n\t\t\t\t// for IE10 quirks mode within framesets\n\t\t\tchartY = e.y;\n\t\t} else {\n\t\t\tchartX = ePos.pageX - chartPosition.left;\n\t\t\tchartY = ePos.pageY - chartPosition.top;\n\t\t}\n\n\t\treturn extend(e, {\n\t\t\tchartX: mathRound(chartX),\n\t\t\tchartY: mathRound(chartY)\n\t\t});\n\t},\n\n\t/**\n\t * Get the click position in terms of axis values.\n\t *\n\t * @param {Object} e A pointer event\n\t */\n\tgetCoordinates: function (e) {\n\t\tvar coordinates = {\n\t\t\t\txAxis: [],\n\t\t\t\tyAxis: []\n\t\t\t};\n\n\t\teach(this.chart.axes, function (axis) {\n\t\t\tcoordinates[axis.isXAxis ? 'xAxis' : 'yAxis'].push({\n\t\t\t\taxis: axis,\n\t\t\t\tvalue: axis.toValue(e[axis.horiz ? 'chartX' : 'chartY'])\n\t\t\t});\n\t\t});\n\t\treturn coordinates;\n\t},\n\t\n\t/**\n\t * With line type charts with a single tracker, get the point closest to the mouse.\n\t * Run Point.onMouseOver and display tooltip for the point or points.\n\t */\n\trunPointActions: function (e) {\n\n\t\tvar pointer = this,\n\t\t\tchart = pointer.chart,\n\t\t\tseries = chart.series,\n\t\t\ttooltip = chart.tooltip,\n\t\t\tshared = tooltip ? tooltip.shared : false,\n\t\t\tfollowPointer,\n\t\t\thoverPoint = chart.hoverPoint,\n\t\t\thoverSeries = chart.hoverSeries,\n\t\t\ti,\n\t\t\tdistance = chart.chartWidth,\n\t\t\tanchor,\n\t\t\tnoSharedTooltip,\n\t\t\tdirectTouch,\n\t\t\tkdpoints = [],\n\t\t\tkdpoint,\n\t\t\tkdpointT;\n\n\t\t// For hovering over the empty parts of the plot area (hoverSeries is undefined). \n\t\t// If there is one series with point tracking (combo chart), don't go to nearest neighbour.\n\t\tif (!shared && !hoverSeries) {\n\t\t\tfor (i = 0; i < series.length; i++) {\n\t\t\t\tif (series[i].directTouch || !series[i].options.stickyTracking) {\n\t\t\t\t\tseries = [];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If it has a hoverPoint and that series requires direct touch (like columns), \n\t\t// use the hoverPoint (#3899). Otherwise, search the k-d tree.\n\t\tif (!shared && hoverSeries && hoverSeries.directTouch && hoverPoint) {\n\t\t\tkdpoint = hoverPoint;\n\n\t\t// Handle shared tooltip or cases where a series is not yet hovered\n\t\t} else {\n\t\t\t// Find nearest points on all series\n\t\t\teach(series, function (s) {\n\t\t\t\t// Skip hidden series\n\t\t\t\tnoSharedTooltip = s.noSharedTooltip && shared;\n\t\t\t\tdirectTouch = !shared && s.directTouch;\n\t\t\t\tif (s.visible && !noSharedTooltip && !directTouch && pick(s.options.enableMouseTracking, true)) { // #3821\n\t\t\t\t\tkdpointT = s.searchPoint(e, !noSharedTooltip && s.kdDimensions === 1); // #3828\n\t\t\t\t\tif (kdpointT) {\n\t\t\t\t\t\tkdpoints.push(kdpointT);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Find absolute nearest point\n\t\t\teach(kdpoints, function (p) {\n\t\t\t\tif (p && typeof p.dist === 'number' && p.dist < distance) {\n\t\t\t\t\tdistance = p.dist;\n\t\t\t\t\tkdpoint = p;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Refresh tooltip for kdpoint if new hover point or tooltip was hidden // #3926, #4200\n\t\tif (kdpoint && (kdpoint !== this.prevKDPoint || (tooltip && tooltip.isHidden))) {\n\t\t\t// Draw tooltip if necessary\n\t\t\tif (shared && !kdpoint.series.noSharedTooltip) {\n\t\t\t\ti = kdpoints.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (kdpoints[i].clientX !== kdpoint.clientX || kdpoints[i].series.noSharedTooltip) {\n\t\t\t\t\t\tkdpoints.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (kdpoints.length && tooltip) {\n\t\t\t\t\ttooltip.refresh(kdpoints, e);\n\t\t\t\t}\n\n\t\t\t\t// do mouseover on all points except the closest\n\t\t\t\teach(kdpoints, function (point) {\n\t\t\t\t\tif (point !== kdpoint) { \n\t\t\t\t\t\tpoint.onMouseOver(e);\n\t\t\t\t\t}\n\t\t\t\t});\t\n\t\t\t\t// #3919, #3985 do mouseover on the closest point last to ensure it is the hoverpoint\n\t\t\t\t((hoverSeries && hoverSeries.directTouch && hoverPoint) || kdpoint).onMouseOver(e); \n\t\t\t} else {\n\t\t\t\tif (tooltip) { \n\t\t\t\t\ttooltip.refresh(kdpoint, e);\n\t\t\t\t}\n\t\t\t\tkdpoint.onMouseOver(e); \n\t\t\t}\n\t\t\tthis.prevKDPoint = kdpoint;\n\t\t\n\t\t// Update positions (regardless of kdpoint or hoverPoint)\n\t\t} else {\n\t\t\tfollowPointer = hoverSeries && hoverSeries.tooltipOptions.followPointer;\n\t\t\tif (tooltip && followPointer && !tooltip.isHidden) {\n\t\t\t\tanchor = tooltip.getAnchor([{}], e);\n\t\t\t\ttooltip.updatePosition({ plotX: anchor[0], plotY: anchor[1] });\t\t\t\n\t\t\t}\n\t\t}\n\n\t\t// Start the event listener to pick up the tooltip \n\t\tif (tooltip && !pointer._onDocumentMouseMove) {\n\t\t\tpointer._onDocumentMouseMove = function (e) {\n\t\t\t\tif (charts[hoverChartIndex]) {\n\t\t\t\t\tcharts[hoverChartIndex].pointer.onDocumentMouseMove(e);\n\t\t\t\t}\n\t\t\t};\n\t\t\taddEvent(doc, 'mousemove', pointer._onDocumentMouseMove);\n\t\t}\n\t\t\n\t\t// Crosshair\n\t\teach(chart.axes, function (axis) {\n\t\t\taxis.drawCrosshair(e, pick(kdpoint, hoverPoint));\n\t\t});\t\n\t\t\n\n\t},\n\n\n\n\t/**\n\t * Reset the tracking by hiding the tooltip, the hover series state and the hover point\n\t * \n\t * @param allowMove {Boolean} Instead of destroying the tooltip altogether, allow moving it if possible\n\t */\n\treset: function (allowMove, delay) {\n\t\tvar pointer = this,\n\t\t\tchart = pointer.chart,\n\t\t\thoverSeries = chart.hoverSeries,\n\t\t\thoverPoint = chart.hoverPoint,\n\t\t\thoverPoints = chart.hoverPoints,\n\t\t\ttooltip = chart.tooltip,\n\t\t\ttooltipPoints = tooltip && tooltip.shared ? hoverPoints : hoverPoint;\n\t\t\t\n\t\t// Narrow in allowMove\n\t\tallowMove = allowMove && tooltip && tooltipPoints;\n\t\t\t\n\t\t// Check if the points have moved outside the plot area, #1003\t\t\n\t\tif (allowMove  && splat(tooltipPoints)[0].plotX === UNDEFINED) {\n\t\t\tallowMove = false;\n\t\t}\t\n\t\t// Just move the tooltip, #349\n\t\tif (allowMove) {\n\t\t\ttooltip.refresh(tooltipPoints);\n\t\t\tif (hoverPoint) { // #2500\n\t\t\t\thoverPoint.setState(hoverPoint.state, true);\n\t\t\t\teach(chart.axes, function (axis) {\n\t\t\t\t\tif (pick(axis.options.crosshair && axis.options.crosshair.snap, true)) {\n\t\t\t\t\t\taxis.drawCrosshair(null, hoverPoint);\n\t\t\t\t\t}  else {\n\t\t\t\t\t\taxis.hideCrosshair();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t}\n\n\t\t// Full reset\n\t\t} else {\n\n\t\t\tif (hoverPoint) {\n\t\t\t\thoverPoint.onMouseOut();\n\t\t\t}\n\n\t\t\tif (hoverPoints) {\n\t\t\t\teach(hoverPoints, function (point) {\n\t\t\t\t\tpoint.setState();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (hoverSeries) {\n\t\t\t\thoverSeries.onMouseOut();\n\t\t\t}\n\n\t\t\tif (tooltip) {\n\t\t\t\ttooltip.hide(delay);\n\t\t\t}\n\n\t\t\tif (pointer._onDocumentMouseMove) {\n\t\t\t\tremoveEvent(doc, 'mousemove', pointer._onDocumentMouseMove);\n\t\t\t\tpointer._onDocumentMouseMove = null;\n\t\t\t}\n\n\t\t\t// Remove crosshairs\n\t\t\teach(chart.axes, function (axis) {\n\t\t\t\taxis.hideCrosshair();\n\t\t\t});\n\t\t\t\n\t\t\tpointer.hoverX = chart.hoverPoints = chart.hoverPoint = null;\n\n\t\t}\n\t},\n\n\t/**\n\t * Scale series groups to a certain scale and translation\n\t */\n\tscaleGroups: function (attribs, clip) {\n\n\t\tvar chart = this.chart,\n\t\t\tseriesAttribs;\n\n\t\t// Scale each series\n\t\teach(chart.series, function (series) {\n\t\t\tseriesAttribs = attribs || series.getPlotBox(); // #1701\n\t\t\tif (series.xAxis && series.xAxis.zoomEnabled) {\n\t\t\t\tseries.group.attr(seriesAttribs);\n\t\t\t\tif (series.markerGroup) {\n\t\t\t\t\tseries.markerGroup.attr(seriesAttribs);\n\t\t\t\t\tseries.markerGroup.clip(clip ? chart.clipRect : null);\n\t\t\t\t}\n\t\t\t\tif (series.dataLabelsGroup) {\n\t\t\t\t\tseries.dataLabelsGroup.attr(seriesAttribs);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Clip\n\t\tchart.clipRect.attr(clip || chart.clipBox);\n\t},\n\n\t/**\n\t * Start a drag operation\n\t */\n\tdragStart: function (e) {\n\t\tvar chart = this.chart;\n\n\t\t// Record the start position\n\t\tchart.mouseIsDown = e.type;\n\t\tchart.cancelClick = false;\n\t\tchart.mouseDownX = this.mouseDownX = e.chartX;\n\t\tchart.mouseDownY = this.mouseDownY = e.chartY;\n\t},\n\n\t/**\n\t * Perform a drag operation in response to a mousemove event while the mouse is down\n\t */\n\tdrag: function (e) {\n\n\t\tvar chart = this.chart,\n\t\t\tchartOptions = chart.options.chart,\n\t\t\tchartX = e.chartX,\n\t\t\tchartY = e.chartY,\n\t\t\tzoomHor = this.zoomHor,\n\t\t\tzoomVert = this.zoomVert,\n\t\t\tplotLeft = chart.plotLeft,\n\t\t\tplotTop = chart.plotTop,\n\t\t\tplotWidth = chart.plotWidth,\n\t\t\tplotHeight = chart.plotHeight,\n\t\t\tclickedInside,\n\t\t\tsize,\n\t\t\tmouseDownX = this.mouseDownX,\n\t\t\tmouseDownY = this.mouseDownY,\n\t\t\tpanKey = chartOptions.panKey && e[chartOptions.panKey + 'Key'];\n\n\t\t// If the mouse is outside the plot area, adjust to cooordinates\n\t\t// inside to prevent the selection marker from going outside\n\t\tif (chartX < plotLeft) {\n\t\t\tchartX = plotLeft;\n\t\t} else if (chartX > plotLeft + plotWidth) {\n\t\t\tchartX = plotLeft + plotWidth;\n\t\t}\n\n\t\tif (chartY < plotTop) {\n\t\t\tchartY = plotTop;\n\t\t} else if (chartY > plotTop + plotHeight) {\n\t\t\tchartY = plotTop + plotHeight;\n\t\t}\n\t\t\n\t\t// determine if the mouse has moved more than 10px\n\t\tthis.hasDragged = Math.sqrt(\n\t\t\tMath.pow(mouseDownX - chartX, 2) +\n\t\t\tMath.pow(mouseDownY - chartY, 2)\n\t\t);\n\t\t\n\t\tif (this.hasDragged > 10) {\n\t\t\tclickedInside = chart.isInsidePlot(mouseDownX - plotLeft, mouseDownY - plotTop);\n\n\t\t\t// make a selection\n\t\t\tif (chart.hasCartesianSeries && (this.zoomX || this.zoomY) && clickedInside && !panKey) {\n\t\t\t\tif (!this.selectionMarker) {\n\t\t\t\t\tthis.selectionMarker = chart.renderer.rect(\n\t\t\t\t\t\tplotLeft,\n\t\t\t\t\t\tplotTop,\n\t\t\t\t\t\tzoomHor ? 1 : plotWidth,\n\t\t\t\t\t\tzoomVert ? 1 : plotHeight,\n\t\t\t\t\t\t0\n\t\t\t\t\t)\n\t\t\t\t\t.attr({\n\t\t\t\t\t\tfill: chartOptions.selectionMarkerFill || 'rgba(69,114,167,0.25)',\n\t\t\t\t\t\tzIndex: 7\n\t\t\t\t\t})\n\t\t\t\t\t.add();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// adjust the width of the selection marker\n\t\t\tif (this.selectionMarker && zoomHor) {\n\t\t\t\tsize = chartX - mouseDownX;\n\t\t\t\tthis.selectionMarker.attr({\n\t\t\t\t\twidth: mathAbs(size),\n\t\t\t\t\tx: (size > 0 ? 0 : size) + mouseDownX\n\t\t\t\t});\n\t\t\t}\n\t\t\t// adjust the height of the selection marker\n\t\t\tif (this.selectionMarker && zoomVert) {\n\t\t\t\tsize = chartY - mouseDownY;\n\t\t\t\tthis.selectionMarker.attr({\n\t\t\t\t\theight: mathAbs(size),\n\t\t\t\t\ty: (size > 0 ? 0 : size) + mouseDownY\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// panning\n\t\t\tif (clickedInside && !this.selectionMarker && chartOptions.panning) {\n\t\t\t\tchart.pan(e, chartOptions.panning);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * On mouse up or touch end across the entire document, drop the selection.\n\t */\n\tdrop: function (e) {\n\t\tvar pointer = this,\n\t\t\tchart = this.chart,\n\t\t\thasPinched = this.hasPinched;\n\n\t\tif (this.selectionMarker) {\n\t\t\tvar selectionData = {\n\t\t\t\t\txAxis: [],\n\t\t\t\t\tyAxis: [],\n\t\t\t\t\toriginalEvent: e.originalEvent || e\n\t\t\t\t},\n\t\t\t\tselectionBox = this.selectionMarker,\n\t\t\t\tselectionLeft = selectionBox.attr ? selectionBox.attr('x') : selectionBox.x,\n\t\t\t\tselectionTop = selectionBox.attr ? selectionBox.attr('y') : selectionBox.y,\n\t\t\t\tselectionWidth = selectionBox.attr ? selectionBox.attr('width') : selectionBox.width,\n\t\t\t\tselectionHeight = selectionBox.attr ? selectionBox.attr('height') : selectionBox.height,\n\t\t\t\trunZoom;\n\n\t\t\t// a selection has been made\n\t\t\tif (this.hasDragged || hasPinched) {\n\n\t\t\t\t// record each axis' min and max\n\t\t\t\teach(chart.axes, function (axis) {\n\t\t\t\t\tif (axis.zoomEnabled && defined(axis.min) && (hasPinched || pointer[{ xAxis: 'zoomX', yAxis: 'zoomY' }[axis.coll]])) { // #859, #3569\n\t\t\t\t\t\tvar horiz = axis.horiz,\n\t\t\t\t\t\t\tminPixelPadding = e.type === 'touchend' ? axis.minPixelPadding: 0, // #1207, #3075\n\t\t\t\t\t\t\tselectionMin = axis.toValue((horiz ? selectionLeft : selectionTop) + minPixelPadding),\n\t\t\t\t\t\t\tselectionMax = axis.toValue((horiz ? selectionLeft + selectionWidth : selectionTop + selectionHeight) - minPixelPadding);\n\n\t\t\t\t\t\tselectionData[axis.coll].push({\n\t\t\t\t\t\t\taxis: axis,\n\t\t\t\t\t\t\tmin: mathMin(selectionMin, selectionMax), // for reversed axes\n\t\t\t\t\t\t\tmax: mathMax(selectionMin, selectionMax)\n\t\t\t\t\t\t});\n\t\t\t\t\t\trunZoom = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (runZoom) {\n\t\t\t\t\tfireEvent(chart, 'selection', selectionData, function (args) { \n\t\t\t\t\t\tchart.zoom(extend(args, hasPinched ? { animation: false } : null)); \n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tthis.selectionMarker = this.selectionMarker.destroy();\n\n\t\t\t// Reset scaling preview\n\t\t\tif (hasPinched) {\n\t\t\t\tthis.scaleGroups();\n\t\t\t}\n\t\t}\n\n\t\t// Reset all\n\t\tif (chart) { // it may be destroyed on mouse up - #877\n\t\t\tcss(chart.container, { cursor: chart._cursor });\n\t\t\tchart.cancelClick = this.hasDragged > 10; // #370\n\t\t\tchart.mouseIsDown = this.hasDragged = this.hasPinched = false;\n\t\t\tthis.pinchDown = [];\n\t\t}\n\t},\n\n\tonContainerMouseDown: function (e) {\n\n\t\te = this.normalize(e);\n\n\t\t// issue #295, dragging not always working in Firefox\n\t\tif (e.preventDefault) {\n\t\t\te.preventDefault();\n\t\t}\n\t\t\n\t\tthis.dragStart(e);\n\t},\n\n\t\n\n\tonDocumentMouseUp: function (e) {\n\t\tif (charts[hoverChartIndex]) {\n\t\t\tcharts[hoverChartIndex].pointer.drop(e);\n\t\t}\n\t},\n\n\t/**\n\t * Special handler for mouse move that will hide the tooltip when the mouse leaves the plotarea.\n\t * Issue #149 workaround. The mouseleave event does not always fire. \n\t */\n\tonDocumentMouseMove: function (e) {\n\t\tvar chart = this.chart,\n\t\t\tchartPosition = this.chartPosition;\n\n\t\te = this.normalize(e, chartPosition);\n\n\t\t// If we're outside, hide the tooltip\n\t\tif (chartPosition && !this.inClass(e.target, 'highcharts-tracker') &&\n\t\t\t\t!chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) {\n\t\t\tthis.reset();\n\t\t}\n\t},\n\n\t/**\n\t * When mouse leaves the container, hide the tooltip.\n\t */\n\tonContainerMouseLeave: function () {\n\t\tvar chart = charts[hoverChartIndex];\n\t\tif (chart) {\n\t\t\tchart.pointer.reset();\n\t\t\tchart.pointer.chartPosition = null; // also reset the chart position, used in #149 fix\n\t\t}\n\t},\n\n\t// The mousemove, touchmove and touchstart event handler\n\tonContainerMouseMove: function (e) {\n\n\t\tvar chart = this.chart;\n\n\t\thoverChartIndex = chart.index;\n\n\t\te = this.normalize(e);\t\t\n\t\te.returnValue = false; // #2251, #3224\n\t\t\n\t\tif (chart.mouseIsDown === 'mousedown') {\n\t\t\tthis.drag(e);\n\t\t} \n\t\t\n\t\t// Show the tooltip and run mouse over events (#977)\n\t\tif ((this.inClass(e.target, 'highcharts-tracker') || \n\t\t\t\tchart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) && !chart.openMenu) {\n\t\t\tthis.runPointActions(e);\n\t\t}\n\t},\n\n\t/**\n\t * Utility to detect whether an element has, or has a parent with, a specific\n\t * class name. Used on detection of tracker objects and on deciding whether\n\t * hovering the tooltip should cause the active series to mouse out.\n\t */\n\tinClass: function (element, className) {\n\t\tvar elemClassName;\n\t\twhile (element) {\n\t\t\telemClassName = attr(element, 'class');\n\t\t\tif (elemClassName) {\n\t\t\t\tif (elemClassName.indexOf(className) !== -1) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if (elemClassName.indexOf(PREFIX + 'container') !== -1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telement = element.parentNode;\n\t\t}\t\t\n\t},\n\n\tonTrackerMouseOut: function (e) {\n\t\tvar series = this.chart.hoverSeries,\n\t\t\trelatedTarget = e.relatedTarget || e.toElement,\n\t\t\trelatedSeries = relatedTarget && relatedTarget.point && relatedTarget.point.series; // #2499\n\t\t\n\t\tif (series && !series.options.stickyTracking && !this.inClass(relatedTarget, PREFIX + 'tooltip') &&\n\t\t\t\trelatedSeries !== series) {\n\t\t\tseries.onMouseOut();\n\t\t}\n\t},\n\n\tonContainerClick: function (e) {\n\t\tvar chart = this.chart,\n\t\t\thoverPoint = chart.hoverPoint, \n\t\t\tplotLeft = chart.plotLeft,\n\t\t\tplotTop = chart.plotTop;\n\t\t\n\t\te = this.normalize(e);\n\t\te.originalEvent = e; // #3913\n\n\t\tif (!chart.cancelClick) {\n\t\t\t\n\t\t\t// On tracker click, fire the series and point events. #783, #1583\n\t\t\tif (hoverPoint && this.inClass(e.target, PREFIX + 'tracker')) {\n\n\t\t\t\t// the series click event\n\t\t\t\tfireEvent(hoverPoint.series, 'click', extend(e, {\n\t\t\t\t\tpoint: hoverPoint\n\t\t\t\t}));\n\n\t\t\t\t// the point click event\n\t\t\t\tif (chart.hoverPoint) { // it may be destroyed (#1844)\n\t\t\t\t\thoverPoint.firePointEvent('click', e);\n\t\t\t\t}\n\n\t\t\t// When clicking outside a tracker, fire a chart event\n\t\t\t} else {\n\t\t\t\textend(e, this.getCoordinates(e));\n\n\t\t\t\t// fire a click event in the chart\n\t\t\t\tif (chart.isInsidePlot(e.chartX - plotLeft, e.chartY - plotTop)) {\n\t\t\t\t\tfireEvent(chart, 'click', e);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t}\n\t},\n\n\t/**\n\t * Set the JS DOM events on the container and document. This method should contain\n\t * a one-to-one assignment between methods and their handlers. Any advanced logic should\n\t * be moved to the handler reflecting the event's name.\n\t */\n\tsetDOMEvents: function () {\n\n\t\tvar pointer = this,\n\t\t\tcontainer = pointer.chart.container;\n\n\t\tcontainer.onmousedown = function (e) {\n\t\t\tpointer.onContainerMouseDown(e);\n\t\t};\n\t\tcontainer.onmousemove = function (e) {\n\t\t\tpointer.onContainerMouseMove(e);\n\t\t};\n\t\tcontainer.onclick = function (e) {\n\t\t\tpointer.onContainerClick(e);\n\t\t};\n\t\taddEvent(container, 'mouseleave', pointer.onContainerMouseLeave);\n\t\tif (chartCount === 1) {\n\t\t\taddEvent(doc, 'mouseup', pointer.onDocumentMouseUp);\n\t\t}\n\t\tif (hasTouch) {\n\t\t\tcontainer.ontouchstart = function (e) {\n\t\t\t\tpointer.onContainerTouchStart(e);\n\t\t\t};\n\t\t\tcontainer.ontouchmove = function (e) {\n\t\t\t\tpointer.onContainerTouchMove(e);\n\t\t\t};\n\t\t\tif (chartCount === 1) {\n\t\t\t\taddEvent(doc, 'touchend', pointer.onDocumentTouchEnd);\n\t\t\t}\n\t\t}\n\t\t\n\t},\n\n\t/**\n\t * Destroys the Pointer object and disconnects DOM events.\n\t */\n\tdestroy: function () {\n\t\tvar prop;\n\n\t\tremoveEvent(this.chart.container, 'mouseleave', this.onContainerMouseLeave);\n\t\tif (!chartCount) {\n\t\t\tremoveEvent(doc, 'mouseup', this.onDocumentMouseUp);\n\t\t\tremoveEvent(doc, 'touchend', this.onDocumentTouchEnd);\n\t\t}\n\n\t\t// memory and CPU leak\n\t\tclearInterval(this.tooltipTimeout);\n\n\t\tfor (prop in this) {\n\t\t\tthis[prop] = null;\n\t\t}\n\t}\n};\n\n\n/* Support for touch devices */\nextend(Highcharts.Pointer.prototype, {\n\n\t/**\n\t * Run translation operations\n\t */\n\tpinchTranslate: function (pinchDown, touches, transform, selectionMarker, clip, lastValidTouch) {\n\t\tif (this.zoomHor || this.pinchHor) {\n\t\t\tthis.pinchTranslateDirection(true, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n\t\t}\n\t\tif (this.zoomVert || this.pinchVert) {\n\t\t\tthis.pinchTranslateDirection(false, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n\t\t}\n\t},\n\n\t/**\n\t * Run translation operations for each direction (horizontal and vertical) independently\n\t */\n\tpinchTranslateDirection: function (horiz, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch, forcedScale) {\n\t\tvar chart = this.chart,\n\t\t\txy = horiz ? 'x' : 'y',\n\t\t\tXY = horiz ? 'X' : 'Y',\n\t\t\tsChartXY = 'chart' + XY,\n\t\t\twh = horiz ? 'width' : 'height',\n\t\t\tplotLeftTop = chart['plot' + (horiz ? 'Left' : 'Top')],\n\t\t\tselectionWH,\n\t\t\tselectionXY,\n\t\t\tclipXY,\n\t\t\tscale = forcedScale || 1,\n\t\t\tinverted = chart.inverted,\n\t\t\tbounds = chart.bounds[horiz ? 'h' : 'v'],\n\t\t\tsingleTouch = pinchDown.length === 1,\n\t\t\ttouch0Start = pinchDown[0][sChartXY],\n\t\t\ttouch0Now = touches[0][sChartXY],\n\t\t\ttouch1Start = !singleTouch && pinchDown[1][sChartXY],\n\t\t\ttouch1Now = !singleTouch && touches[1][sChartXY],\n\t\t\toutOfBounds,\n\t\t\ttransformScale,\n\t\t\tscaleKey,\n\t\t\tsetScale = function () {\n\t\t\t\tif (!singleTouch && mathAbs(touch0Start - touch1Start) > 20) { // Don't zoom if fingers are too close on this axis\n\t\t\t\t\tscale = forcedScale || mathAbs(touch0Now - touch1Now) / mathAbs(touch0Start - touch1Start); \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tclipXY = ((plotLeftTop - touch0Now) / scale) + touch0Start;\n\t\t\t\tselectionWH = chart['plot' + (horiz ? 'Width' : 'Height')] / scale;\n\t\t\t};\n\n\t\t// Set the scale, first pass\n\t\tsetScale();\n\n\t\tselectionXY = clipXY; // the clip position (x or y) is altered if out of bounds, the selection position is not\n\n\t\t// Out of bounds\n\t\tif (selectionXY < bounds.min) {\n\t\t\tselectionXY = bounds.min;\n\t\t\toutOfBounds = true;\n\t\t} else if (selectionXY + selectionWH > bounds.max) {\n\t\t\tselectionXY = bounds.max - selectionWH;\n\t\t\toutOfBounds = true;\n\t\t}\n\t\t\n\t\t// Is the chart dragged off its bounds, determined by dataMin and dataMax?\n\t\tif (outOfBounds) {\n\n\t\t\t// Modify the touchNow position in order to create an elastic drag movement. This indicates\n\t\t\t// to the user that the chart is responsive but can't be dragged further.\n\t\t\ttouch0Now -= 0.8 * (touch0Now - lastValidTouch[xy][0]);\n\t\t\tif (!singleTouch) {\n\t\t\t\ttouch1Now -= 0.8 * (touch1Now - lastValidTouch[xy][1]);\n\t\t\t}\n\n\t\t\t// Set the scale, second pass to adapt to the modified touchNow positions\n\t\t\tsetScale();\n\n\t\t} else {\n\t\t\tlastValidTouch[xy] = [touch0Now, touch1Now];\n\t\t}\n\n\t\t// Set geometry for clipping, selection and transformation\n\t\tif (!inverted) { // TODO: implement clipping for inverted charts\n\t\t\tclip[xy] = clipXY - plotLeftTop;\n\t\t\tclip[wh] = selectionWH;\n\t\t}\n\t\tscaleKey = inverted ? (horiz ? 'scaleY' : 'scaleX') : 'scale' + XY;\n\t\ttransformScale = inverted ? 1 / scale : scale;\n\n\t\tselectionMarker[wh] = selectionWH;\n\t\tselectionMarker[xy] = selectionXY;\n\t\ttransform[scaleKey] = scale;\n\t\ttransform['translate' + XY] = (transformScale * plotLeftTop) + (touch0Now - (transformScale * touch0Start));\n\t},\n\t\n\t/**\n\t * Handle touch events with two touches\n\t */\n\tpinch: function (e) {\n\n\t\tvar self = this,\n\t\t\tchart = self.chart,\n\t\t\tpinchDown = self.pinchDown,\n\t\t\ttouches = e.touches,\n\t\t\ttouchesLength = touches.length,\n\t\t\tlastValidTouch = self.lastValidTouch,\n\t\t\thasZoom = self.hasZoom,\n\t\t\tselectionMarker = self.selectionMarker,\n\t\t\ttransform = {},\n\t\t\tfireClickEvent = touchesLength === 1 && ((self.inClass(e.target, PREFIX + 'tracker') && \n\t\t\t\tchart.runTrackerClick) || self.runChartClick),\n\t\t\tclip = {};\n\n\t\t// Don't initiate panning until the user has pinched. This prevents us from \n\t\t// blocking page scrolling as users scroll down a long page (#4210).\n\t\tif (touchesLength > 1) {\n\t\t\tself.initiated = true;\n\t\t}\n\n\t\t// On touch devices, only proceed to trigger click if a handler is defined\n\t\tif (hasZoom && self.initiated && !fireClickEvent) {\n\t\t\te.preventDefault();\n\t\t}\n\t\t\n\t\t// Normalize each touch\n\t\tmap(touches, function (e) {\n\t\t\treturn self.normalize(e);\n\t\t});\n\t\t\n\t\t// Register the touch start position\n\t\tif (e.type === 'touchstart') {\n\t\t\teach(touches, function (e, i) {\n\t\t\t\tpinchDown[i] = { chartX: e.chartX, chartY: e.chartY };\n\t\t\t});\n\t\t\tlastValidTouch.x = [pinchDown[0].chartX, pinchDown[1] && pinchDown[1].chartX];\n\t\t\tlastValidTouch.y = [pinchDown[0].chartY, pinchDown[1] && pinchDown[1].chartY];\n\n\t\t\t// Identify the data bounds in pixels\n\t\t\teach(chart.axes, function (axis) {\n\t\t\t\tif (axis.zoomEnabled) {\n\t\t\t\t\tvar bounds = chart.bounds[axis.horiz ? 'h' : 'v'],\n\t\t\t\t\t\tminPixelPadding = axis.minPixelPadding,\n\t\t\t\t\t\tmin = axis.toPixels(pick(axis.options.min, axis.dataMin)),\n\t\t\t\t\t\tmax = axis.toPixels(pick(axis.options.max, axis.dataMax)),\n\t\t\t\t\t\tabsMin = mathMin(min, max),\n\t\t\t\t\t\tabsMax = mathMax(min, max);\n\n\t\t\t\t\t// Store the bounds for use in the touchmove handler\n\t\t\t\t\tbounds.min = mathMin(axis.pos, absMin - minPixelPadding);\n\t\t\t\t\tbounds.max = mathMax(axis.pos + axis.len, absMax + minPixelPadding);\n\t\t\t\t}\n\t\t\t});\n\t\t\tself.res = true; // reset on next move\n\t\t\n\t\t// Event type is touchmove, handle panning and pinching\n\t\t} else if (pinchDown.length) { // can be 0 when releasing, if touchend fires first\n\t\t\t\n\n\t\t\t// Set the marker\n\t\t\tif (!selectionMarker) {\n\t\t\t\tself.selectionMarker = selectionMarker = extend({\n\t\t\t\t\tdestroy: noop\n\t\t\t\t}, chart.plotBox);\n\t\t\t}\n\t\t\t\n\t\t\tself.pinchTranslate(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n\n\t\t\tself.hasPinched = hasZoom;\n\n\t\t\t// Scale and translate the groups to provide visual feedback during pinching\n\t\t\tself.scaleGroups(transform, clip);\n\t\t\t\n\t\t\t// Optionally move the tooltip on touchmove\n\t\t\tif (!hasZoom && self.followTouchMove && touchesLength === 1) {\n\t\t\t\tthis.runPointActions(self.normalize(e));\n\t\t\t} else if (self.res) {\n\t\t\t\tself.res = false;\n\t\t\t\tthis.reset(false, 0);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * General touch handler shared by touchstart and touchmove.\n\t */\n\ttouch: function (e, start) {\n\t\tvar chart = this.chart;\n\n\t\thoverChartIndex = chart.index;\n\n\t\tif (e.touches.length === 1) {\n\n\t\t\te = this.normalize(e);\n\n\t\t\tif (chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop) && !chart.openMenu) {\n\n\t\t\t\t// Run mouse events and display tooltip etc\n\t\t\t\tif (start) {\n\t\t\t\t\tthis.runPointActions(e);\n\t\t\t\t}\n\n\t\t\t\tthis.pinch(e);\n\n\t\t\t} else if (start) {\n\t\t\t\t// Hide the tooltip on touching outside the plot area (#1203)\n\t\t\t\tthis.reset();\n\t\t\t}\n\n\t\t} else if (e.touches.length === 2) {\n\t\t\tthis.pinch(e);\n\t\t}\n\t},\n\n\tonContainerTouchStart: function (e) {\n\t\tthis.touch(e, true);\n\t},\n\n\tonContainerTouchMove: function (e) {\n\t\tthis.touch(e);\n\t},\n\n\tonDocumentTouchEnd: function (e) {\n\t\tif (charts[hoverChartIndex]) {\n\t\t\tcharts[hoverChartIndex].pointer.drop(e);\n\t\t}\n\t}\n\n});\nif (win.PointerEvent || win.MSPointerEvent) {\n\t\n\t// The touches object keeps track of the points being touched at all times\n\tvar touches = {},\n\t\thasPointerEvent = !!win.PointerEvent,\n\t\tgetWebkitTouches = function () {\n\t\t\tvar key, fake = [];\n\t\t\tfake.item = function (i) { return this[i]; };\n\t\t\tfor (key in touches) {\n\t\t\t\tif (touches.hasOwnProperty(key)) {\n\t\t\t\t\tfake.push({\n\t\t\t\t\t\tpageX: touches[key].pageX,\n\t\t\t\t\t\tpageY: touches[key].pageY,\n\t\t\t\t\t\ttarget: touches[key].target\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn fake;\n\t\t},\n\t\ttranslateMSPointer = function (e, method, wktype, callback) {\n\t\t\tvar p;\n\t\t\te = e.originalEvent || e;\n\t\t\tif ((e.pointerType === 'touch' || e.pointerType === e.MSPOINTER_TYPE_TOUCH) && charts[hoverChartIndex]) {\n\t\t\t\tcallback(e);\n\t\t\t\tp = charts[hoverChartIndex].pointer;\n\t\t\t\tp[method]({\n\t\t\t\t\ttype: wktype,\n\t\t\t\t\ttarget: e.currentTarget,\n\t\t\t\t\tpreventDefault: noop,\n\t\t\t\t\ttouches: getWebkitTouches()\n\t\t\t\t});\t\t\t\t\n\t\t\t}\n\t\t};\n\n\t/**\n\t * Extend the Pointer prototype with methods for each event handler and more\n\t */\n\textend(Pointer.prototype, {\n\t\tonContainerPointerDown: function (e) {\n\t\t\ttranslateMSPointer(e, 'onContainerTouchStart', 'touchstart', function (e) {\n\t\t\t\ttouches[e.pointerId] = { pageX: e.pageX, pageY: e.pageY, target: e.currentTarget };\n\t\t\t});\n\t\t},\n\t\tonContainerPointerMove: function (e) {\n\t\t\ttranslateMSPointer(e, 'onContainerTouchMove', 'touchmove', function (e) {\n\t\t\t\ttouches[e.pointerId] = { pageX: e.pageX, pageY: e.pageY };\n\t\t\t\tif (!touches[e.pointerId].target) {\n\t\t\t\t\ttouches[e.pointerId].target = e.currentTarget;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tonDocumentPointerUp: function (e) {\n\t\t\ttranslateMSPointer(e, 'onDocumentTouchEnd', 'touchend', function (e) {\n\t\t\t\tdelete touches[e.pointerId];\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Add or remove the MS Pointer specific events\n\t\t */\n\t\tbatchMSEvents: function (fn) {\n\t\t\tfn(this.chart.container, hasPointerEvent ? 'pointerdown' : 'MSPointerDown', this.onContainerPointerDown);\n\t\t\tfn(this.chart.container, hasPointerEvent ? 'pointermove' : 'MSPointerMove', this.onContainerPointerMove);\n\t\t\tfn(doc, hasPointerEvent ? 'pointerup' : 'MSPointerUp', this.onDocumentPointerUp);\n\t\t}\n\t});\n\n\t// Disable default IE actions for pinch and such on chart element\n\twrap(Pointer.prototype, 'init', function (proceed, chart, options) {\n\t\tproceed.call(this, chart, options);\n\t\tif (this.hasZoom) { // #4014\n\t\t\tcss(chart.container, {\n\t\t\t\t'-ms-touch-action': NONE,\n\t\t\t\t'touch-action': NONE\n\t\t\t});\n\t\t}\n\t});\n\n\t// Add IE specific touch events to chart\n\twrap(Pointer.prototype, 'setDOMEvents', function (proceed) {\n\t\tproceed.apply(this);\n\t\tif (this.hasZoom || this.followTouchMove) {\n\t\t\tthis.batchMSEvents(addEvent);\n\t\t}\n\t});\n\t// Destroy MS events also\n\twrap(Pointer.prototype, 'destroy', function (proceed) {\n\t\tthis.batchMSEvents(removeEvent);\n\t\tproceed.call(this);\n\t});\n}\n/**\n * The overview of the chart's series\n */\nvar Legend = Highcharts.Legend = function (chart, options) {\n\tthis.init(chart, options);\n};\n\nLegend.prototype = {\n\t\n\t/**\n\t * Initialize the legend\n\t */\n\tinit: function (chart, options) {\n\t\t\n\t\tvar legend = this,\n\t\t\titemStyle = options.itemStyle,\n\t\t\tpadding,\n\t\t\titemMarginTop = options.itemMarginTop || 0;\n\t\n\t\tthis.options = options;\n\n\t\tif (!options.enabled) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tlegend.itemStyle = itemStyle;\n\t\tlegend.itemHiddenStyle = merge(itemStyle, options.itemHiddenStyle);\n\t\tlegend.itemMarginTop = itemMarginTop;\n\t\tlegend.padding = padding = pick(options.padding, 8);\n\t\tlegend.initialItemX = padding;\n\t\tlegend.initialItemY = padding - 5; // 5 is the number of pixels above the text\n\t\tlegend.maxItemWidth = 0;\n\t\tlegend.chart = chart;\n\t\tlegend.itemHeight = 0;\n\t\tlegend.symbolWidth = pick(options.symbolWidth, 16);\n\t\tlegend.pages = [];\n\n\n\t\t// Render it\n\t\tlegend.render();\n\n\t\t// move checkboxes\n\t\taddEvent(legend.chart, 'endResize', function () { \n\t\t\tlegend.positionCheckboxes();\n\t\t});\n\n\t},\n\n\t/**\n\t * Set the colors for the legend item\n\t * @param {Object} item A Series or Point instance\n\t * @param {Object} visible Dimmed or colored\n\t */\n\tcolorizeItem: function (item, visible) {\n\t\tvar legend = this,\n\t\t\toptions = legend.options,\n\t\t\tlegendItem = item.legendItem,\n\t\t\tlegendLine = item.legendLine,\n\t\t\tlegendSymbol = item.legendSymbol,\n\t\t\thiddenColor = legend.itemHiddenStyle.color,\n\t\t\ttextColor = visible ? options.itemStyle.color : hiddenColor,\n\t\t\tsymbolColor = visible ? (item.legendColor || item.color || '#CCC') : hiddenColor,\n\t\t\tmarkerOptions = item.options && item.options.marker,\n\t\t\tsymbolAttr = { fill: symbolColor },\n\t\t\tkey,\n\t\t\tval;\n\t\t\n\t\tif (legendItem) {\n\t\t\tlegendItem.css({ fill: textColor, color: textColor }); // color for #1553, oldIE\n\t\t}\n\t\tif (legendLine) {\n\t\t\tlegendLine.attr({ stroke: symbolColor });\n\t\t}\n\t\t\n\t\tif (legendSymbol) {\n\t\t\t\n\t\t\t// Apply marker options\n\t\t\tif (markerOptions && legendSymbol.isMarker) { // #585\n\t\t\t\tsymbolAttr.stroke = symbolColor;\n\t\t\t\tmarkerOptions = item.convertAttribs(markerOptions);\n\t\t\t\tfor (key in markerOptions) {\n\t\t\t\t\tval = markerOptions[key];\n\t\t\t\t\tif (val !== UNDEFINED) {\n\t\t\t\t\t\tsymbolAttr[key] = val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlegendSymbol.attr(symbolAttr);\n\t\t}\n\t},\n\n\t/**\n\t * Position the legend item\n\t * @param {Object} item A Series or Point instance\n\t */\n\tpositionItem: function (item) {\n\t\tvar legend = this,\n\t\t\toptions = legend.options,\n\t\t\tsymbolPadding = options.symbolPadding,\n\t\t\tltr = !options.rtl,\n\t\t\tlegendItemPos = item._legendItemPos,\n\t\t\titemX = legendItemPos[0],\n\t\t\titemY = legendItemPos[1],\n\t\t\tcheckbox = item.checkbox,\n\t\t\tlegendGroup = item.legendGroup;\n\n\t\tif (legendGroup && legendGroup.element) {\n\t\t\tlegendGroup.translate(\n\t\t\t\tltr ? itemX : legend.legendWidth - itemX - 2 * symbolPadding - 4,\n\t\t\t\titemY\n\t\t\t);\n\t\t}\n\n\t\tif (checkbox) {\n\t\t\tcheckbox.x = itemX;\n\t\t\tcheckbox.y = itemY;\n\t\t}\n\t},\n\n\t/**\n\t * Destroy a single legend item\n\t * @param {Object} item The series or point\n\t */\n\tdestroyItem: function (item) {\n\t\tvar checkbox = item.checkbox;\n\n\t\t// destroy SVG elements\n\t\teach(['legendItem', 'legendLine', 'legendSymbol', 'legendGroup'], function (key) {\n\t\t\tif (item[key]) {\n\t\t\t\titem[key] = item[key].destroy();\n\t\t\t}\n\t\t});\n\n\t\tif (checkbox) {\n\t\t\tdiscardElement(item.checkbox);\n\t\t}\n\t},\n\n\t/**\n\t * Destroys the legend.\n\t */\n\tdestroy: function () {\n\t\tvar legend = this,\n\t\t\tlegendGroup = legend.group,\n\t\t\tbox = legend.box;\n\n\t\tif (box) {\n\t\t\tlegend.box = box.destroy();\n\t\t}\n\n\t\tif (legendGroup) {\n\t\t\tlegend.group = legendGroup.destroy();\n\t\t}\n\t},\n\n\t/**\n\t * Position the checkboxes after the width is determined\n\t */\n\tpositionCheckboxes: function (scrollOffset) {\n\t\tvar alignAttr = this.group.alignAttr,\n\t\t\ttranslateY,\n\t\t\tclipHeight = this.clipHeight || this.legendHeight;\n\n\t\tif (alignAttr) {\n\t\t\ttranslateY = alignAttr.translateY;\n\t\t\teach(this.allItems, function (item) {\n\t\t\t\tvar checkbox = item.checkbox,\n\t\t\t\t\ttop;\n\t\t\t\t\n\t\t\t\tif (checkbox) {\n\t\t\t\t\ttop = (translateY + checkbox.y + (scrollOffset || 0) + 3);\n\t\t\t\t\tcss(checkbox, {\n\t\t\t\t\t\tleft: (alignAttr.translateX + item.checkboxOffset + checkbox.x - 20) + PX,\n\t\t\t\t\t\ttop: top + PX,\n\t\t\t\t\t\tdisplay: top > translateY - 6 && top < translateY + clipHeight - 6 ? '' : NONE\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\t\n\t/**\n\t * Render the legend title on top of the legend\n\t */\n\trenderTitle: function () {\n\t\tvar options = this.options,\n\t\t\tpadding = this.padding,\n\t\t\ttitleOptions = options.title,\n\t\t\ttitleHeight = 0,\n\t\t\tbBox;\n\t\t\n\t\tif (titleOptions.text) {\n\t\t\tif (!this.title) {\n\t\t\t\tthis.title = this.chart.renderer.label(titleOptions.text, padding - 3, padding - 4, null, null, null, null, null, 'legend-title')\n\t\t\t\t\t.attr({ zIndex: 1 })\n\t\t\t\t\t.css(titleOptions.style)\n\t\t\t\t\t.add(this.group);\n\t\t\t}\n\t\t\tbBox = this.title.getBBox();\n\t\t\ttitleHeight = bBox.height;\n\t\t\tthis.offsetWidth = bBox.width; // #1717\n\t\t\tthis.contentGroup.attr({ translateY: titleHeight });\n\t\t}\n\t\tthis.titleHeight = titleHeight;\n\t},\n\n\t/**\n\t * Set the legend item text\n\t */\n\tsetText: function (item) {\n\t\tvar options = this.options;\n\t\titem.legendItem.attr({\n\t\t\ttext: options.labelFormat ? format(options.labelFormat, item) : options.labelFormatter.call(item)\n\t\t});\n\t},\n\n\t/**\n\t * Render a single specific legend item\n\t * @param {Object} item A series or point\n\t */\n\trenderItem: function (item) {\n\t\tvar legend = this,\n\t\t\tchart = legend.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\toptions = legend.options,\n\t\t\thorizontal = options.layout === 'horizontal',\n\t\t\tsymbolWidth = legend.symbolWidth,\n\t\t\tsymbolPadding = options.symbolPadding,\n\t\t\titemStyle = legend.itemStyle,\n\t\t\titemHiddenStyle = legend.itemHiddenStyle,\n\t\t\tpadding = legend.padding,\n\t\t\titemDistance = horizontal ? pick(options.itemDistance, 20) : 0,\n\t\t\tltr = !options.rtl,\n\t\t\titemHeight,\n\t\t\twidthOption = options.width,\n\t\t\titemMarginBottom = options.itemMarginBottom || 0,\n\t\t\titemMarginTop = legend.itemMarginTop,\n\t\t\tinitialItemX = legend.initialItemX,\n\t\t\tbBox,\n\t\t\titemWidth,\n\t\t\tli = item.legendItem,\n\t\t\tseries = item.series && item.series.drawLegendSymbol ? item.series : item,\n\t\t\tseriesOptions = series.options,\n\t\t\tshowCheckbox = legend.createCheckboxForItem && seriesOptions && seriesOptions.showCheckbox,\n\t\t\tuseHTML = options.useHTML;\n\n\t\tif (!li) { // generate it once, later move it\n\n\t\t\t// Generate the group box\n\t\t\t// A group to hold the symbol and text. Text is to be appended in Legend class.\n\t\t\titem.legendGroup = renderer.g('legend-item')\n\t\t\t\t.attr({ zIndex: 1 })\n\t\t\t\t.add(legend.scrollGroup);\n\n\t\t\t// Generate the list item text and add it to the group\n\t\t\titem.legendItem = li = renderer.text(\n\t\t\t\t\t'',\n\t\t\t\t\tltr ? symbolWidth + symbolPadding : -symbolPadding,\n\t\t\t\t\tlegend.baseline || 0,\n\t\t\t\t\tuseHTML\n\t\t\t\t)\n\t\t\t\t.css(merge(item.visible ? itemStyle : itemHiddenStyle)) // merge to prevent modifying original (#1021)\n\t\t\t\t.attr({\n\t\t\t\t\talign: ltr ? 'left' : 'right',\n\t\t\t\t\tzIndex: 2\n\t\t\t\t})\n\t\t\t\t.add(item.legendGroup);\n\n\t\t\t// Get the baseline for the first item - the font size is equal for all\n\t\t\tif (!legend.baseline) {\n\t\t\t\tlegend.fontMetrics = renderer.fontMetrics(itemStyle.fontSize, li);\n\t\t\t\tlegend.baseline = legend.fontMetrics.f + 3 + itemMarginTop;\n\t\t\t\tli.attr('y', legend.baseline);\n\t\t\t}\n\n\t\t\t// Draw the legend symbol inside the group box\n\t\t\tseries.drawLegendSymbol(legend, item);\n\n\t\t\tif (legend.setItemEvents) {\n\t\t\t\tlegend.setItemEvents(item, li, useHTML, itemStyle, itemHiddenStyle);\n\t\t\t}\t\t\t\n\n\t\t\t// Colorize the items\n\t\t\tlegend.colorizeItem(item, item.visible);\n\n\t\t\t// add the HTML checkbox on top\n\t\t\tif (showCheckbox) {\n\t\t\t\tlegend.createCheckboxForItem(item);\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\t// Always update the text\n\t\tlegend.setText(item);\n\n\t\t// calculate the positions for the next line\n\t\tbBox = li.getBBox();\n\n\t\titemWidth = item.checkboxOffset = \n\t\t\toptions.itemWidth || \n\t\t\titem.legendItemWidth || \n\t\t\tsymbolWidth + symbolPadding + bBox.width + itemDistance + (showCheckbox ? 20 : 0);\n\t\tlegend.itemHeight = itemHeight = mathRound(item.legendItemHeight || bBox.height);\n\n\t\t// if the item exceeds the width, start a new line\n\t\tif (horizontal && legend.itemX - initialItemX + itemWidth >\n\t\t\t\t(widthOption || (chart.chartWidth - 2 * padding - initialItemX - options.x))) {\n\t\t\tlegend.itemX = initialItemX;\n\t\t\tlegend.itemY += itemMarginTop + legend.lastLineHeight + itemMarginBottom;\n\t\t\tlegend.lastLineHeight = 0; // reset for next line (#915, #3976)\n\t\t}\n\n\t\t// If the item exceeds the height, start a new column\n\t\t/*if (!horizontal && legend.itemY + options.y + itemHeight > chart.chartHeight - spacingTop - spacingBottom) {\n\t\t\tlegend.itemY = legend.initialItemY;\n\t\t\tlegend.itemX += legend.maxItemWidth;\n\t\t\tlegend.maxItemWidth = 0;\n\t\t}*/\n\n\t\t// Set the edge positions\n\t\tlegend.maxItemWidth = mathMax(legend.maxItemWidth, itemWidth);\n\t\tlegend.lastItemY = itemMarginTop + legend.itemY + itemMarginBottom;\n\t\tlegend.lastLineHeight = mathMax(itemHeight, legend.lastLineHeight); // #915\n\n\t\t// cache the position of the newly generated or reordered items\n\t\titem._legendItemPos = [legend.itemX, legend.itemY];\n\n\t\t// advance\n\t\tif (horizontal) {\n\t\t\tlegend.itemX += itemWidth;\n\n\t\t} else {\n\t\t\tlegend.itemY += itemMarginTop + itemHeight + itemMarginBottom;\n\t\t\tlegend.lastLineHeight = itemHeight;\n\t\t}\n\n\t\t// the width of the widest item\n\t\tlegend.offsetWidth = widthOption || mathMax(\n\t\t\t(horizontal ? legend.itemX - initialItemX - itemDistance : itemWidth) + padding,\n\t\t\tlegend.offsetWidth\n\t\t);\n\t},\n\n\t/**\n\t * Get all items, which is one item per series for normal series and one item per point\n\t * for pie series.\n\t */\n\tgetAllItems: function () {\n\t\tvar allItems = [];\n\t\teach(this.chart.series, function (series) {\n\t\t\tvar seriesOptions = series.options;\n\n\t\t\t// Handle showInLegend. If the series is linked to another series, defaults to false.\n\t\t\tif (!pick(seriesOptions.showInLegend, !defined(seriesOptions.linkedTo) ? UNDEFINED : false, true)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// use points or series for the legend item depending on legendType\n\t\t\tallItems = allItems.concat(\n\t\t\t\t\tseries.legendItems ||\n\t\t\t\t\t(seriesOptions.legendType === 'point' ?\n\t\t\t\t\t\t\tseries.data :\n\t\t\t\t\t\t\tseries)\n\t\t\t);\n\t\t});\n\t\treturn allItems;\n\t},\n\n\t/**\n\t * Adjust the chart margins by reserving space for the legend on only one side\n\t * of the chart. If the position is set to a corner, top or bottom is reserved\n\t * for horizontal legends and left or right for vertical ones.\n\t */\n\tadjustMargins: function (margin, spacing) {\n\t\tvar chart = this.chart, \n\t\t\toptions = this.options,\n\t\t\t// Use the first letter of each alignment option in order to detect the side \n\t\t\talignment = options.align[0] + options.verticalAlign[0] + options.layout[0];\n\t\t\t\n\t\tif (this.display && !options.floating) {\n\n\t\t\teach([\n\t\t\t\t/(lth|ct|rth)/,\n\t\t\t\t/(rtv|rm|rbv)/,\n\t\t\t\t/(rbh|cb|lbh)/,\n\t\t\t\t/(lbv|lm|ltv)/\n\t\t\t], function (alignments, side) {\n\t\t\t\tif (alignments.test(alignment) && !defined(margin[side])) {\n\t\t\t\t\t// Now we have detected on which side of the chart we should reserve space for the legend\n\t\t\t\t\tchart[marginNames[side]] = mathMax(\n\t\t\t\t\t\tchart[marginNames[side]],\n\t\t\t\t\t\tchart.legend[(side + 1) % 2 ? 'legendHeight' : 'legendWidth'] + \n\t\t\t\t\t\t\t[1, -1, -1, 1][side] * options[(side % 2) ? 'x' : 'y'] + \n\t\t\t\t\t\t\tpick(options.margin, 12) +\n\t\t\t\t\t\t\tspacing[side]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Render the legend. This method can be called both before and after\n\t * chart.render. If called after, it will only rearrange items instead\n\t * of creating new ones.\n\t */\n\trender: function () {\n\t\tvar legend = this,\n\t\t\tchart = legend.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\tlegendGroup = legend.group,\n\t\t\tallItems,\n\t\t\tdisplay,\n\t\t\tlegendWidth,\n\t\t\tlegendHeight,\n\t\t\tbox = legend.box,\n\t\t\toptions = legend.options,\n\t\t\tpadding = legend.padding,\n\t\t\tlegendBorderWidth = options.borderWidth,\n\t\t\tlegendBackgroundColor = options.backgroundColor;\n\n\t\tlegend.itemX = legend.initialItemX;\n\t\tlegend.itemY = legend.initialItemY;\n\t\tlegend.offsetWidth = 0;\n\t\tlegend.lastItemY = 0;\n\n\t\tif (!legendGroup) {\n\t\t\tlegend.group = legendGroup = renderer.g('legend')\n\t\t\t\t.attr({ zIndex: 7 }) \n\t\t\t\t.add();\n\t\t\tlegend.contentGroup = renderer.g()\n\t\t\t\t.attr({ zIndex: 1 }) // above background\n\t\t\t\t.add(legendGroup);\n\t\t\tlegend.scrollGroup = renderer.g()\n\t\t\t\t.add(legend.contentGroup);\n\t\t}\n\t\t\n\t\tlegend.renderTitle();\n\n\t\t// add each series or point\n\t\tallItems = legend.getAllItems();\n\n\t\t// sort by legendIndex\n\t\tstableSort(allItems, function (a, b) {\n\t\t\treturn ((a.options && a.options.legendIndex) || 0) - ((b.options && b.options.legendIndex) || 0);\n\t\t});\n\n\t\t// reversed legend\n\t\tif (options.reversed) {\n\t\t\tallItems.reverse();\n\t\t}\n\n\t\tlegend.allItems = allItems;\n\t\tlegend.display = display = !!allItems.length;\n\n\t\t// render the items\n\t\tlegend.lastLineHeight = 0;\n\t\teach(allItems, function (item) {\n\t\t\tlegend.renderItem(item); \n\t\t});\n\n\t\t// Get the box\n\t\tlegendWidth = (options.width || legend.offsetWidth) + padding;\n\t\tlegendHeight = legend.lastItemY + legend.lastLineHeight + legend.titleHeight;\n\t\tlegendHeight = legend.handleOverflow(legendHeight);\n\t\tlegendHeight += padding;\n\n\t\t// Draw the border and/or background\n\t\tif (legendBorderWidth || legendBackgroundColor) {\n\n\t\t\tif (!box) {\n\t\t\t\tlegend.box = box = renderer.rect(\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\tlegendWidth,\n\t\t\t\t\tlegendHeight,\n\t\t\t\t\toptions.borderRadius,\n\t\t\t\t\tlegendBorderWidth || 0\n\t\t\t\t).attr({\n\t\t\t\t\tstroke: options.borderColor,\n\t\t\t\t\t'stroke-width': legendBorderWidth || 0,\n\t\t\t\t\tfill: legendBackgroundColor || NONE\n\t\t\t\t})\n\t\t\t\t.add(legendGroup)\n\t\t\t\t.shadow(options.shadow);\n\t\t\t\tbox.isNew = true;\n\n\t\t\t} else if (legendWidth > 0 && legendHeight > 0) {\n\t\t\t\tbox[box.isNew ? 'attr' : 'animate'](\n\t\t\t\t\tbox.crisp({ width: legendWidth, height: legendHeight })\n\t\t\t\t);\n\t\t\t\tbox.isNew = false;\n\t\t\t}\n\n\t\t\t// hide the border if no items\n\t\t\tbox[display ? 'show' : 'hide']();\n\t\t}\n\t\t\n\t\tlegend.legendWidth = legendWidth;\n\t\tlegend.legendHeight = legendHeight;\n\n\t\t// Now that the legend width and height are established, put the items in the \n\t\t// final position\n\t\teach(allItems, function (item) {\n\t\t\tlegend.positionItem(item);\n\t\t});\n\n\t\t// 1.x compatibility: positioning based on style\n\t\t/*var props = ['left', 'right', 'top', 'bottom'],\n\t\t\tprop,\n\t\t\ti = 4;\n\t\twhile (i--) {\n\t\t\tprop = props[i];\n\t\t\tif (options.style[prop] && options.style[prop] !== 'auto') {\n\t\t\t\toptions[i < 2 ? 'align' : 'verticalAlign'] = prop;\n\t\t\t\toptions[i < 2 ? 'x' : 'y'] = pInt(options.style[prop]) * (i % 2 ? -1 : 1);\n\t\t\t}\n\t\t}*/\n\n\t\tif (display) {\n\t\t\tlegendGroup.align(extend({\n\t\t\t\twidth: legendWidth,\n\t\t\t\theight: legendHeight\n\t\t\t}, options), true, 'spacingBox');\n\t\t}\n\n\t\tif (!chart.isResizing) {\n\t\t\tthis.positionCheckboxes();\n\t\t}\n\t},\n\t\n\t/**\n\t * Set up the overflow handling by adding navigation with up and down arrows below the\n\t * legend.\n\t */\n\thandleOverflow: function (legendHeight) {\n\t\tvar legend = this,\n\t\t\tchart = this.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\toptions = this.options,\n\t\t\toptionsY = options.y,\n\t\t\talignTop = options.verticalAlign === 'top',\n\t\t\tspaceHeight = chart.spacingBox.height + (alignTop ? -optionsY : optionsY) - this.padding,\n\t\t\tmaxHeight = options.maxHeight,\n\t\t\tclipHeight,\n\t\t\tclipRect = this.clipRect,\n\t\t\tnavOptions = options.navigation,\n\t\t\tanimation = pick(navOptions.animation, true),\n\t\t\tarrowSize = navOptions.arrowSize || 12,\n\t\t\tnav = this.nav,\n\t\t\tpages = this.pages,\n\t\t\tpadding = this.padding,\n\t\t\tlastY,\n\t\t\tallItems = this.allItems,\n\t\t\tclipToHeight = function (height) {\n\t\t\t\tclipRect.attr({\n\t\t\t\t\theight: height\n\t\t\t\t});\n\n\t\t\t\t// useHTML\n\t\t\t\tif (legend.contentGroup.div) {\n\t\t\t\t\tlegend.contentGroup.div.style.clip = 'rect(' + padding + 'px,9999px,' + (padding + height) + 'px,0)';\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t\n\t\t// Adjust the height\n\t\tif (options.layout === 'horizontal') {\n\t\t\tspaceHeight /= 2;\n\t\t}\n\t\tif (maxHeight) {\n\t\t\tspaceHeight = mathMin(spaceHeight, maxHeight);\n\t\t}\n\t\t\n\t\t// Reset the legend height and adjust the clipping rectangle\n\t\tpages.length = 0;\n\t\tif (legendHeight > spaceHeight) {\n\n\t\t\tthis.clipHeight = clipHeight = mathMax(spaceHeight - 20 - this.titleHeight - padding, 0);\n\t\t\tthis.currentPage = pick(this.currentPage, 1);\n\t\t\tthis.fullHeight = legendHeight;\n\t\t\t\n\t\t\t// Fill pages with Y positions so that the top of each a legend item defines\n\t\t\t// the scroll top for each page (#2098)\n\t\t\teach(allItems, function (item, i) {\n\t\t\t\tvar y = item._legendItemPos[1],\n\t\t\t\t\th = mathRound(item.legendItem.getBBox().height),\n\t\t\t\t\tlen = pages.length;\n\t\t\t\t\n\t\t\t\tif (!len || (y - pages[len - 1] > clipHeight && (lastY || y) !== pages[len - 1])) {\n\t\t\t\t\tpages.push(lastY || y);\n\t\t\t\t\tlen++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (i === allItems.length - 1 && y + h - pages[len - 1] > clipHeight) {\n\t\t\t\t\tpages.push(y);\n\t\t\t\t}\n\t\t\t\tif (y !== lastY) {\n\t\t\t\t\tlastY = y;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Only apply clipping if needed. Clipping causes blurred legend in PDF export (#1787)\n\t\t\tif (!clipRect) {\n\t\t\t\tclipRect = legend.clipRect = renderer.clipRect(0, padding, 9999, 0);\n\t\t\t\tlegend.contentGroup.clip(clipRect);\n\t\t\t}\n\t\t\t\t\n\t\t\tclipToHeight(clipHeight);\n\n\t\t\t// Add navigation elements\n\t\t\tif (!nav) {\n\t\t\t\tthis.nav = nav = renderer.g().attr({ zIndex: 1 }).add(this.group);\n\t\t\t\tthis.up = renderer.symbol('triangle', 0, 0, arrowSize, arrowSize)\n\t\t\t\t\t.on('click', function () {\n\t\t\t\t\t\tlegend.scroll(-1, animation);\n\t\t\t\t\t})\n\t\t\t\t\t.add(nav);\n\t\t\t\tthis.pager = renderer.text('', 15, 10)\n\t\t\t\t\t.css(navOptions.style)\n\t\t\t\t\t.add(nav);\n\t\t\t\tthis.down = renderer.symbol('triangle-down', 0, 0, arrowSize, arrowSize)\n\t\t\t\t\t.on('click', function () {\n\t\t\t\t\t\tlegend.scroll(1, animation);\n\t\t\t\t\t})\n\t\t\t\t\t.add(nav);\n\t\t\t}\n\t\t\t\n\t\t\t// Set initial position\n\t\t\tlegend.scroll(0);\n\t\t\t\n\t\t\tlegendHeight = spaceHeight;\n\t\t\t\n\t\t} else if (nav) {\n\t\t\tclipToHeight(chart.chartHeight);\n\t\t\tnav.hide();\n\t\t\tthis.scrollGroup.attr({\n\t\t\t\ttranslateY: 1\n\t\t\t});\n\t\t\tthis.clipHeight = 0; // #1379\n\t\t}\n\t\t\n\t\treturn legendHeight;\n\t},\n\t\n\t/**\n\t * Scroll the legend by a number of pages\n\t * @param {Object} scrollBy\n\t * @param {Object} animation\n\t */\n\tscroll: function (scrollBy, animation) {\n\t\tvar pages = this.pages,\n\t\t\tpageCount = pages.length,\n\t\t\tcurrentPage = this.currentPage + scrollBy,\n\t\t\tclipHeight = this.clipHeight,\n\t\t\tnavOptions = this.options.navigation,\n\t\t\tactiveColor = navOptions.activeColor,\n\t\t\tinactiveColor = navOptions.inactiveColor,\n\t\t\tpager = this.pager,\n\t\t\tpadding = this.padding,\n\t\t\tscrollOffset;\n\t\t\n\t\t// When resizing while looking at the last page\n\t\tif (currentPage > pageCount) {\n\t\t\tcurrentPage = pageCount;\n\t\t}\n\t\t\n\t\tif (currentPage > 0) {\n\t\t\t\n\t\t\tif (animation !== UNDEFINED) {\n\t\t\t\tsetAnimation(animation, this.chart);\n\t\t\t}\n\t\t\t\n\t\t\tthis.nav.attr({\n\t\t\t\ttranslateX: padding,\n\t\t\t\ttranslateY: clipHeight + this.padding + 7 + this.titleHeight,\n\t\t\t\tvisibility: VISIBLE\n\t\t\t});\n\t\t\tthis.up.attr({\n\t\t\t\t\tfill: currentPage === 1 ? inactiveColor : activeColor\n\t\t\t\t})\n\t\t\t\t.css({\n\t\t\t\t\tcursor: currentPage === 1 ? 'default' : 'pointer'\n\t\t\t\t});\n\t\t\tpager.attr({\n\t\t\t\ttext: currentPage + '/' + pageCount\n\t\t\t});\n\t\t\tthis.down.attr({\n\t\t\t\t\tx: 18 + this.pager.getBBox().width, // adjust to text width\n\t\t\t\t\tfill: currentPage === pageCount ? inactiveColor : activeColor\n\t\t\t\t})\n\t\t\t\t.css({\n\t\t\t\t\tcursor: currentPage === pageCount ? 'default' : 'pointer'\n\t\t\t\t});\n\t\t\t\n\t\t\tscrollOffset = -pages[currentPage - 1] + this.initialItemY;\n\n\t\t\tthis.scrollGroup.animate({\n\t\t\t\ttranslateY: scrollOffset\n\t\t\t});\t\t\t\n\t\t\t\n\t\t\tthis.currentPage = currentPage;\n\t\t\tthis.positionCheckboxes(scrollOffset);\n\t\t}\n\t\t\t\n\t}\n\t\n};\n\n/*\n * LegendSymbolMixin\n */ \n\nvar LegendSymbolMixin = Highcharts.LegendSymbolMixin = {\n\n\t/**\n\t * Get the series' symbol in the legend\n\t * \n\t * @param {Object} legend The legend object\n\t * @param {Object} item The series (this) or point\n\t */\n\tdrawRectangle: function (legend, item) {\n\t\tvar symbolHeight = legend.options.symbolHeight || legend.fontMetrics.f;\n\n\t\titem.legendSymbol = this.chart.renderer.rect(\n\t\t\t0,\n\t\t\tlegend.baseline - symbolHeight + 1, // #3988\n\t\t\tlegend.symbolWidth,\n\t\t\tsymbolHeight,\n\t\t\tlegend.options.symbolRadius || 0\n\t\t).attr({\n\t\t\tzIndex: 3\n\t\t}).add(item.legendGroup);\t\t\n\t\t\n\t},\n\n\t/**\n\t * Get the series' symbol in the legend. This method should be overridable to create custom \n\t * symbols through Highcharts.seriesTypes[type].prototype.drawLegendSymbols.\n\t * \n\t * @param {Object} legend The legend object\n\t */\n\tdrawLineMarker: function (legend) {\n\n\t\tvar options = this.options,\n\t\t\tmarkerOptions = options.marker,\n\t\t\tradius,\n\t\t\tlegendSymbol,\n\t\t\tsymbolWidth = legend.symbolWidth,\n\t\t\trenderer = this.chart.renderer,\n\t\t\tlegendItemGroup = this.legendGroup,\n\t\t\tverticalCenter = legend.baseline - mathRound(legend.fontMetrics.b * 0.3),\n\t\t\tattr;\n\n\t\t// Draw the line\n\t\tif (options.lineWidth) {\n\t\t\tattr = {\n\t\t\t\t'stroke-width': options.lineWidth\n\t\t\t};\n\t\t\tif (options.dashStyle) {\n\t\t\t\tattr.dashstyle = options.dashStyle;\n\t\t\t}\n\t\t\tthis.legendLine = renderer.path([\n\t\t\t\tM,\n\t\t\t\t0,\n\t\t\t\tverticalCenter,\n\t\t\t\tL,\n\t\t\t\tsymbolWidth,\n\t\t\t\tverticalCenter\n\t\t\t])\n\t\t\t.attr(attr)\n\t\t\t.add(legendItemGroup);\n\t\t}\n\t\t\n\t\t// Draw the marker\n\t\tif (markerOptions && markerOptions.enabled !== false) {\n\t\t\tradius = markerOptions.radius;\n\t\t\tthis.legendSymbol = legendSymbol = renderer.symbol(\n\t\t\t\tthis.symbol,\n\t\t\t\t(symbolWidth / 2) - radius,\n\t\t\t\tverticalCenter - radius,\n\t\t\t\t2 * radius,\n\t\t\t\t2 * radius\n\t\t\t)\n\t\t\t.add(legendItemGroup);\n\t\t\tlegendSymbol.isMarker = true;\n\t\t}\n\t}\n};\n\n// Workaround for #2030, horizontal legend items not displaying in IE11 Preview,\n// and for #2580, a similar drawing flaw in Firefox 26.\n// TODO: Explore if there's a general cause for this. The problem may be related \n// to nested group elements, as the legend item texts are within 4 group elements.\nif (/Trident\\/7\\.0/.test(userAgent) || isFirefox) {\n\twrap(Legend.prototype, 'positionItem', function (proceed, item) {\n\t\tvar legend = this,\n\t\t\trunPositionItem = function () { // If chart destroyed in sync, this is undefined (#2030)\n\t\t\t\tif (item._legendItemPos) {\n\t\t\t\t\tproceed.call(legend, item);\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Do it now, for export and to get checkbox placement\n\t\trunPositionItem();\n\t\t\n\t\t// Do it after to work around the core issue\n\t\tsetTimeout(runPositionItem);\n\t});\n}\n/**\n * The chart class\n * @param {Object} options\n * @param {Function} callback Function to run when the chart has loaded\n */\nvar Chart = Highcharts.Chart = function () {\n\tthis.init.apply(this, arguments);\n};\n\nChart.prototype = {\n\n\t/**\n\t * Hook for modules\n\t */\n\tcallbacks: [],\n\n\t/**\n\t * Initialize the chart\n\t */\n\tinit: function (userOptions, callback) {\n\n\t\t// Handle regular options\n\t\tvar options,\n\t\t\tseriesOptions = userOptions.series; // skip merging data points to increase performance\n\n\t\tuserOptions.series = null;\n\t\toptions = merge(defaultOptions, userOptions); // do the merge\n\t\toptions.series = userOptions.series = seriesOptions; // set back the series data\n\t\tthis.userOptions = userOptions;\n\n\t\tvar optionsChart = options.chart;\n\t\t\n\t\t// Create margin & spacing array\n\t\tthis.margin = this.splashArray('margin', optionsChart);\n\t\tthis.spacing = this.splashArray('spacing', optionsChart);\n\n\t\tvar chartEvents = optionsChart.events;\n\n\t\t//this.runChartClick = chartEvents && !!chartEvents.click;\n\t\tthis.bounds = { h: {}, v: {} }; // Pixel data bounds for touch zoom\n\n\t\tthis.callback = callback;\n\t\tthis.isResizing = 0;\n\t\tthis.options = options;\n\t\t//chartTitleOptions = UNDEFINED;\n\t\t//chartSubtitleOptions = UNDEFINED;\n\n\t\tthis.axes = [];\n\t\tthis.series = [];\n\t\tthis.hasCartesianSeries = optionsChart.showAxes;\n\t\t//this.axisOffset = UNDEFINED;\n\t\t//this.maxTicks = UNDEFINED; // handle the greatest amount of ticks on grouped axes\n\t\t//this.inverted = UNDEFINED;\n\t\t//this.loadingShown = UNDEFINED;\n\t\t//this.container = UNDEFINED;\n\t\t//this.chartWidth = UNDEFINED;\n\t\t//this.chartHeight = UNDEFINED;\n\t\t//this.marginRight = UNDEFINED;\n\t\t//this.marginBottom = UNDEFINED;\n\t\t//this.containerWidth = UNDEFINED;\n\t\t//this.containerHeight = UNDEFINED;\n\t\t//this.oldChartWidth = UNDEFINED;\n\t\t//this.oldChartHeight = UNDEFINED;\n\n\t\t//this.renderTo = UNDEFINED;\n\t\t//this.renderToClone = UNDEFINED;\n\n\t\t//this.spacingBox = UNDEFINED\n\n\t\t//this.legend = UNDEFINED;\n\n\t\t// Elements\n\t\t//this.chartBackground = UNDEFINED;\n\t\t//this.plotBackground = UNDEFINED;\n\t\t//this.plotBGImage = UNDEFINED;\n\t\t//this.plotBorder = UNDEFINED;\n\t\t//this.loadingDiv = UNDEFINED;\n\t\t//this.loadingSpan = UNDEFINED;\n\n\t\tvar chart = this,\n\t\t\teventType;\n\n\t\t// Add the chart to the global lookup\n\t\tchart.index = charts.length;\n\t\tcharts.push(chart);\n\t\tchartCount++;\n\n\t\t// Set up auto resize\n\t\tif (optionsChart.reflow !== false) {\n\t\t\taddEvent(chart, 'load', function () {\n\t\t\t\tchart.initReflow();\n\t\t\t});\n\t\t}\n\n\t\t// Chart event handlers\n\t\tif (chartEvents) {\n\t\t\tfor (eventType in chartEvents) {\n\t\t\t\taddEvent(chart, eventType, chartEvents[eventType]);\n\t\t\t}\n\t\t}\n\n\t\tchart.xAxis = [];\n\t\tchart.yAxis = [];\n\n\t\t// Expose methods and variables\n\t\tchart.animation = useCanVG ? false : pick(optionsChart.animation, true);\n\t\tchart.pointCount = chart.colorCounter = chart.symbolCounter = 0;\n\n\t\tchart.firstRender();\n\t},\n\n\t/**\n\t * Initialize an individual series, called internally before render time\n\t */\n\tinitSeries: function (options) {\n\t\tvar chart = this,\n\t\t\toptionsChart = chart.options.chart,\n\t\t\ttype = options.type || optionsChart.type || optionsChart.defaultSeriesType,\n\t\t\tseries,\n\t\t\tconstr = seriesTypes[type];\n\n\t\t// No such series type\n\t\tif (!constr) {\n\t\t\terror(17, true);\n\t\t}\n\n\t\tseries = new constr();\n\t\tseries.init(this, options);\n\t\treturn series;\n\t},\n\n\t/**\n\t * Check whether a given point is within the plot area\n\t *\n\t * @param {Number} plotX Pixel x relative to the plot area\n\t * @param {Number} plotY Pixel y relative to the plot area\n\t * @param {Boolean} inverted Whether the chart is inverted\n\t */\n\tisInsidePlot: function (plotX, plotY, inverted) {\n\t\tvar x = inverted ? plotY : plotX,\n\t\t\ty = inverted ? plotX : plotY;\n\t\t\t\n\t\treturn x >= 0 &&\n\t\t\tx <= this.plotWidth &&\n\t\t\ty >= 0 &&\n\t\t\ty <= this.plotHeight;\n\t},\n\n\t/**\n\t * Redraw legend, axes or series based on updated data\n\t *\n\t * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n\t *    configuration\n\t */\n\tredraw: function (animation) {\n\t\tvar chart = this,\n\t\t\taxes = chart.axes,\n\t\t\tseries = chart.series,\n\t\t\tpointer = chart.pointer,\n\t\t\tlegend = chart.legend,\n\t\t\tredrawLegend = chart.isDirtyLegend,\n\t\t\thasStackedSeries,\n\t\t\thasDirtyStacks,\n\t\t\thasCartesianSeries = chart.hasCartesianSeries,\n\t\t\tisDirtyBox = chart.isDirtyBox, // todo: check if it has actually changed?\n\t\t\tseriesLength = series.length,\n\t\t\ti = seriesLength,\n\t\t\tserie,\n\t\t\trenderer = chart.renderer,\n\t\t\tisHiddenChart = renderer.isHidden(),\n\t\t\tafterRedraw = [];\n\t\t\t\n\t\tsetAnimation(animation, chart);\n\t\t\n\t\tif (isHiddenChart) {\n\t\t\tchart.cloneRenderTo();\n\t\t}\n\n\t\t// Adjust title layout (reflow multiline text)\n\t\tchart.layOutTitles();\n\n\t\t// link stacked series\n\t\twhile (i--) {\n\t\t\tserie = series[i];\n\n\t\t\tif (serie.options.stacking) {\n\t\t\t\thasStackedSeries = true;\n\t\t\t\t\n\t\t\t\tif (serie.isDirty) {\n\t\t\t\t\thasDirtyStacks = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (hasDirtyStacks) { // mark others as dirty\n\t\t\ti = seriesLength;\n\t\t\twhile (i--) {\n\t\t\t\tserie = series[i];\n\t\t\t\tif (serie.options.stacking) {\n\t\t\t\t\tserie.isDirty = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle updated data in the series\n\t\teach(series, function (serie) {\n\t\t\tif (serie.isDirty) {\n\t\t\t\tif (serie.options.legendType === 'point') {\n\t\t\t\t\tif (serie.updateTotals) {\n\t\t\t\t\t\tserie.updateTotals();\n\t\t\t\t\t}\n\t\t\t\t\tredrawLegend = true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// handle added or removed series\n\t\tif (redrawLegend && legend.options.enabled) { // series or pie points are added or removed\n\t\t\t// draw legend graphics\n\t\t\tlegend.render();\n\n\t\t\tchart.isDirtyLegend = false;\n\t\t}\n\n\t\t// reset stacks\n\t\tif (hasStackedSeries) {\n\t\t\tchart.getStacks();\n\t\t}\n\n\n\t\tif (hasCartesianSeries) {\n\t\t\tif (!chart.isResizing) {\n\n\t\t\t\t// reset maxTicks\n\t\t\t\tchart.maxTicks = null;\n\n\t\t\t\t// set axes scales\n\t\t\t\teach(axes, function (axis) {\n\t\t\t\t\taxis.setScale();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tchart.getMargins(); // #3098\n\n\t\tif (hasCartesianSeries) {\n\t\t\t// If one axis is dirty, all axes must be redrawn (#792, #2169)\n\t\t\teach(axes, function (axis) {\n\t\t\t\tif (axis.isDirty) {\n\t\t\t\t\tisDirtyBox = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// redraw axes\n\t\t\teach(axes, function (axis) {\n\t\t\t\t\n\t\t\t\t// Fire 'afterSetExtremes' only if extremes are set\n\t\t\t\tif (axis.isDirtyExtremes) { // #821\n\t\t\t\t\taxis.isDirtyExtremes = false;\n\t\t\t\t\tafterRedraw.push(function () { // prevent a recursive call to chart.redraw() (#1119)\n\t\t\t\t\t\tfireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes())); // #747, #751\n\t\t\t\t\t\tdelete axis.eventArgs;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (isDirtyBox || hasStackedSeries) {\n\t\t\t\t\taxis.redraw();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\t// the plot areas size has changed\n\t\tif (isDirtyBox) {\n\t\t\tchart.drawChartBox();\n\t\t}\n\n\n\t\t// redraw affected series\n\t\teach(series, function (serie) {\n\t\t\tif (serie.isDirty && serie.visible &&\n\t\t\t\t\t(!serie.isCartesian || serie.xAxis)) { // issue #153\n\t\t\t\tserie.redraw();\n\t\t\t}\n\t\t});\n\n\t\t// move tooltip or reset\n\t\tif (pointer) {\n\t\t\tpointer.reset(true);\n\t\t}\n\n\t\t// redraw if canvas\n\t\trenderer.draw();\n\n\t\t// fire the event\n\t\tfireEvent(chart, 'redraw'); // jQuery breaks this when calling it from addEvent. Overwrites chart.redraw\n\t\t\n\t\tif (isHiddenChart) {\n\t\t\tchart.cloneRenderTo(true);\n\t\t}\n\t\t\n\t\t// Fire callbacks that are put on hold until after the redraw\n\t\teach(afterRedraw, function (callback) {\n\t\t\tcallback.call();\n\t\t});\n\t},\n\n\t/**\n\t * Get an axis, series or point object by id.\n\t * @param id {String} The id as given in the configuration options\n\t */\n\tget: function (id) {\n\t\tvar chart = this,\n\t\t\taxes = chart.axes,\n\t\t\tseries = chart.series;\n\n\t\tvar i,\n\t\t\tj,\n\t\t\tpoints;\n\n\t\t// search axes\n\t\tfor (i = 0; i < axes.length; i++) {\n\t\t\tif (axes[i].options.id === id) {\n\t\t\t\treturn axes[i];\n\t\t\t}\n\t\t}\n\n\t\t// search series\n\t\tfor (i = 0; i < series.length; i++) {\n\t\t\tif (series[i].options.id === id) {\n\t\t\t\treturn series[i];\n\t\t\t}\n\t\t}\n\n\t\t// search points\n\t\tfor (i = 0; i < series.length; i++) {\n\t\t\tpoints = series[i].points || [];\n\t\t\tfor (j = 0; j < points.length; j++) {\n\t\t\t\tif (points[j].id === id) {\n\t\t\t\t\treturn points[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t},\n\n\t/**\n\t * Create the Axis instances based on the config options\n\t */\n\tgetAxes: function () {\n\t\tvar chart = this,\n\t\t\toptions = this.options,\n\t\t\txAxisOptions = options.xAxis = splat(options.xAxis || {}),\n\t\t\tyAxisOptions = options.yAxis = splat(options.yAxis || {}),\n\t\t\toptionsArray,\n\t\t\taxis;\n\n\t\t// make sure the options are arrays and add some members\n\t\teach(xAxisOptions, function (axis, i) {\n\t\t\taxis.index = i;\n\t\t\taxis.isX = true;\n\t\t});\n\n\t\teach(yAxisOptions, function (axis, i) {\n\t\t\taxis.index = i;\n\t\t});\n\n\t\t// concatenate all axis options into one array\n\t\toptionsArray = xAxisOptions.concat(yAxisOptions);\n\n\t\teach(optionsArray, function (axisOptions) {\n\t\t\taxis = new Axis(chart, axisOptions);\n\t\t});\n\t},\n\n\n\t/**\n\t * Get the currently selected points from all series\n\t */\n\tgetSelectedPoints: function () {\n\t\tvar points = [];\n\t\teach(this.series, function (serie) {\n\t\t\tpoints = points.concat(grep(serie.points || [], function (point) {\n\t\t\t\treturn point.selected;\n\t\t\t}));\n\t\t});\n\t\treturn points;\n\t},\n\n\t/**\n\t * Get the currently selected series\n\t */\n\tgetSelectedSeries: function () {\n\t\treturn grep(this.series, function (serie) {\n\t\t\treturn serie.selected;\n\t\t});\n\t},\n\n\t/**\n\t * Generate stacks for each series and calculate stacks total values\n\t */\n\tgetStacks: function () {\n\t\tvar chart = this;\n\n\t\t// reset stacks for each yAxis\n\t\teach(chart.yAxis, function (axis) {\n\t\t\tif (axis.stacks && axis.hasVisibleSeries) {\n\t\t\t\taxis.oldStacks = axis.stacks;\n\t\t\t}\n\t\t});\n\n\t\teach(chart.series, function (series) {\n\t\t\tif (series.options.stacking && (series.visible === true || chart.options.chart.ignoreHiddenSeries === false)) {\n\t\t\t\tseries.stackKey = series.type + pick(series.options.stack, '');\n\t\t\t}\n\t\t});\n\t},\t\n\n\t/**\n\t * Show the title and subtitle of the chart\n\t *\n\t * @param titleOptions {Object} New title options\n\t * @param subtitleOptions {Object} New subtitle options\n\t *\n\t */\n\tsetTitle: function (titleOptions, subtitleOptions, redraw) {\n\t\tvar chart = this,\n\t\t\toptions = chart.options,\n\t\t\tchartTitleOptions,\n\t\t\tchartSubtitleOptions;\n\n\t\tchartTitleOptions = options.title = merge(options.title, titleOptions);\n\t\tchartSubtitleOptions = options.subtitle = merge(options.subtitle, subtitleOptions);\n\n\t\t// add title and subtitle\n\t\teach([\n\t\t\t['title', titleOptions, chartTitleOptions],\n\t\t\t['subtitle', subtitleOptions, chartSubtitleOptions]\n\t\t], function (arr) {\n\t\t\tvar name = arr[0],\n\t\t\t\ttitle = chart[name],\n\t\t\t\ttitleOptions = arr[1],\n\t\t\t\tchartTitleOptions = arr[2];\n\n\t\t\tif (title && titleOptions) {\n\t\t\t\tchart[name] = title = title.destroy(); // remove old\n\t\t\t}\n\t\t\t\n\t\t\tif (chartTitleOptions && chartTitleOptions.text && !title) {\n\t\t\t\tchart[name] = chart.renderer.text(\n\t\t\t\t\tchartTitleOptions.text,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\tchartTitleOptions.useHTML\n\t\t\t\t)\n\t\t\t\t.attr({\n\t\t\t\t\talign: chartTitleOptions.align,\n\t\t\t\t\t'class': PREFIX + name,\n\t\t\t\t\tzIndex: chartTitleOptions.zIndex || 4\n\t\t\t\t})\n\t\t\t\t.css(chartTitleOptions.style)\n\t\t\t\t.add();\n\t\t\t}\t\n\t\t});\n\t\tchart.layOutTitles(redraw);\n\t},\n\n\t/**\n\t * Lay out the chart titles and cache the full offset height for use in getMargins\n\t */\n\tlayOutTitles: function (redraw) {\n\t\tvar titleOffset = 0,\n\t\t\ttitle = this.title,\n\t\t\tsubtitle = this.subtitle,\n\t\t\toptions = this.options,\n\t\t\ttitleOptions = options.title,\n\t\t\tsubtitleOptions = options.subtitle,\n\t\t\trequiresDirtyBox,\n\t\t\trenderer = this.renderer,\n\t\t\tautoWidth = this.spacingBox.width - 44; // 44 makes room for default context button\n\n\t\tif (title) {\n\t\t\ttitle\n\t\t\t\t.css({ width: (titleOptions.width || autoWidth) + PX })\n\t\t\t\t.align(extend({ \n\t\t\t\t\ty: renderer.fontMetrics(titleOptions.style.fontSize, title).b - 3\n\t\t\t\t}, titleOptions), false, 'spacingBox');\n\t\t\t\n\t\t\tif (!titleOptions.floating && !titleOptions.verticalAlign) {\n\t\t\t\ttitleOffset = title.getBBox().height;\n\t\t\t}\n\t\t}\n\t\tif (subtitle) {\n\t\t\tsubtitle\n\t\t\t\t.css({ width: (subtitleOptions.width || autoWidth) + PX })\n\t\t\t\t.align(extend({ \n\t\t\t\t\ty: titleOffset + (titleOptions.margin - 13) + renderer.fontMetrics(titleOptions.style.fontSize, subtitle).b \n\t\t\t\t}, subtitleOptions), false, 'spacingBox');\n\t\t\t\n\t\t\tif (!subtitleOptions.floating && !subtitleOptions.verticalAlign) {\n\t\t\t\ttitleOffset = mathCeil(titleOffset + subtitle.getBBox().height);\n\t\t\t}\n\t\t}\n\n\t\trequiresDirtyBox = this.titleOffset !== titleOffset;\t\t\t\t\n\t\tthis.titleOffset = titleOffset; // used in getMargins\n\n\t\tif (!this.isDirtyBox && requiresDirtyBox) {\n\t\t\tthis.isDirtyBox = requiresDirtyBox;\n\t\t\t// Redraw if necessary (#2719, #2744)\t\t\n\t\t\tif (this.hasRendered && pick(redraw, true) && this.isDirtyBox) {\n\t\t\t\tthis.redraw();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Get chart width and height according to options and container size\n\t */\n\tgetChartSize: function () {\n\t\tvar chart = this,\n\t\t\toptionsChart = chart.options.chart,\n\t\t\twidthOption = optionsChart.width,\n\t\t\theightOption = optionsChart.height,\n\t\t\trenderTo = chart.renderToClone || chart.renderTo;\n\n\t\t// get inner width and height from jQuery (#824)\n\t\tif (!defined(widthOption)) {\n\t\t\tchart.containerWidth = adapterRun(renderTo, 'width');\n\t\t}\n\t\tif (!defined(heightOption)) {\n\t\t\tchart.containerHeight = adapterRun(renderTo, 'height');\n\t\t}\n\t\t\n\t\tchart.chartWidth = mathMax(0, widthOption || chart.containerWidth || 600); // #1393, 1460\n\t\tchart.chartHeight = mathMax(0, pick(heightOption,\n\t\t\t// the offsetHeight of an empty container is 0 in standard browsers, but 19 in IE7:\n\t\t\tchart.containerHeight > 19 ? chart.containerHeight : 400));\n\t},\n\n\t/**\n\t * Create a clone of the chart's renderTo div and place it outside the viewport to allow\n\t * size computation on chart.render and chart.redraw\n\t */\n\tcloneRenderTo: function (revert) {\n\t\tvar clone = this.renderToClone,\n\t\t\tcontainer = this.container;\n\t\t\n\t\t// Destroy the clone and bring the container back to the real renderTo div\n\t\tif (revert) {\n\t\t\tif (clone) {\n\t\t\t\tthis.renderTo.appendChild(container);\n\t\t\t\tdiscardElement(clone);\n\t\t\t\tdelete this.renderToClone;\n\t\t\t}\n\t\t\n\t\t// Set up the clone\n\t\t} else {\n\t\t\tif (container && container.parentNode === this.renderTo) {\n\t\t\t\tthis.renderTo.removeChild(container); // do not clone this\n\t\t\t}\n\t\t\tthis.renderToClone = clone = this.renderTo.cloneNode(0);\n\t\t\tcss(clone, {\n\t\t\t\tposition: ABSOLUTE,\n\t\t\t\ttop: '-9999px',\n\t\t\t\tdisplay: 'block' // #833\n\t\t\t});\n\t\t\tif (clone.style.setProperty) { // #2631\n\t\t\t\tclone.style.setProperty('display', 'block', 'important');\n\t\t\t}\n\t\t\tdoc.body.appendChild(clone);\n\t\t\tif (container) {\n\t\t\t\tclone.appendChild(container);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Get the containing element, determine the size and create the inner container\n\t * div to hold the chart\n\t */\n\tgetContainer: function () {\n\t\tvar chart = this,\n\t\t\tcontainer,\n\t\t\toptionsChart = chart.options.chart,\n\t\t\tchartWidth,\n\t\t\tchartHeight,\n\t\t\trenderTo,\n\t\t\tindexAttrName = 'data-highcharts-chart',\n\t\t\toldChartIndex,\n\t\t\tcontainerId;\n\n\t\tchart.renderTo = renderTo = optionsChart.renderTo;\n\t\tcontainerId = PREFIX + idCounter++;\n\n\t\tif (isString(renderTo)) {\n\t\t\tchart.renderTo = renderTo = doc.getElementById(renderTo);\n\t\t}\n\t\t\n\t\t// Display an error if the renderTo is wrong\n\t\tif (!renderTo) {\n\t\t\terror(13, true);\n\t\t}\n\t\t\n\t\t// If the container already holds a chart, destroy it. The check for hasRendered is there\n\t\t// because web pages that are saved to disk from the browser, will preserve the data-highcharts-chart\n\t\t// attribute and the SVG contents, but not an interactive chart. So in this case,\n\t\t// charts[oldChartIndex] will point to the wrong chart if any (#2609).\n\t\toldChartIndex = pInt(attr(renderTo, indexAttrName));\n\t\tif (!isNaN(oldChartIndex) && charts[oldChartIndex] && charts[oldChartIndex].hasRendered) {\n\t\t\tcharts[oldChartIndex].destroy();\n\t\t}\t\t\n\t\t\n\t\t// Make a reference to the chart from the div\n\t\tattr(renderTo, indexAttrName, chart.index);\n\n\t\t// remove previous chart\n\t\trenderTo.innerHTML = '';\n\n\t\t// If the container doesn't have an offsetWidth, it has or is a child of a node\n\t\t// that has display:none. We need to temporarily move it out to a visible\n\t\t// state to determine the size, else the legend and tooltips won't render\n\t\t// properly. The allowClone option is used in sparklines as a micro optimization,\n\t\t// saving about 1-2 ms each chart.\n\t\tif (!optionsChart.skipClone && !renderTo.offsetWidth) {\n\t\t\tchart.cloneRenderTo();\n\t\t}\n\n\t\t// get the width and height\n\t\tchart.getChartSize();\n\t\tchartWidth = chart.chartWidth;\n\t\tchartHeight = chart.chartHeight;\n\n\t\t// create the inner container\n\t\tchart.container = container = createElement(DIV, {\n\t\t\t\tclassName: PREFIX + 'container' +\n\t\t\t\t\t(optionsChart.className ? ' ' + optionsChart.className : ''),\n\t\t\t\tid: containerId\n\t\t\t}, extend({\n\t\t\t\tposition: RELATIVE,\n\t\t\t\toverflow: HIDDEN, // needed for context menu (avoid scrollbars) and\n\t\t\t\t\t// content overflow in IE\n\t\t\t\twidth: chartWidth + PX,\n\t\t\t\theight: chartHeight + PX,\n\t\t\t\ttextAlign: 'left',\n\t\t\t\tlineHeight: 'normal', // #427\n\t\t\t\tzIndex: 0, // #1072\n\t\t\t\t'-webkit-tap-highlight-color': 'rgba(0,0,0,0)'\n\t\t\t}, optionsChart.style),\n\t\t\tchart.renderToClone || renderTo\n\t\t);\n\n\t\t// cache the cursor (#1650)\n\t\tchart._cursor = container.style.cursor;\n\n\t\t// Initialize the renderer\n\t\tchart.renderer =\n\t\t\toptionsChart.forExport ? // force SVG, used for SVG export\n\t\t\t\tnew SVGRenderer(container, chartWidth, chartHeight, optionsChart.style, true) :\n\t\t\t\tnew Renderer(container, chartWidth, chartHeight, optionsChart.style);\n\n\t\tif (useCanVG) {\n\t\t\t// If we need canvg library, extend and configure the renderer\n\t\t\t// to get the tracker for translating mouse events\n\t\t\tchart.renderer.create(chart, container, chartWidth, chartHeight);\n\t\t}\n\t\t// Add a reference to the charts index\n\t\tchart.renderer.chartIndex = chart.index;\n\t},\n\n\t/**\n\t * Calculate margins by rendering axis labels in a preliminary position. Title,\n\t * subtitle and legend have already been rendered at this stage, but will be\n\t * moved into their final positions\n\t */\n\tgetMargins: function (skipAxes) {\n\t\tvar chart = this,\n\t\t\tspacing = chart.spacing,\n\t\t\tmargin = chart.margin,\n\t\t\ttitleOffset = chart.titleOffset;\n\n\t\tchart.resetMargins();\n\n\t\t// Adjust for title and subtitle\n\t\tif (titleOffset && !defined(margin[0])) {\n\t\t\tchart.plotTop = mathMax(chart.plotTop, titleOffset + chart.options.title.margin + spacing[0]);\n\t\t}\n\t\t\n\t\t// Adjust for legend\n\t\tchart.legend.adjustMargins(margin, spacing);\n\n\t\t// adjust for scroller\n\t\tif (chart.extraBottomMargin) {\n\t\t\tchart.marginBottom += chart.extraBottomMargin;\n\t\t}\n\t\tif (chart.extraTopMargin) {\n\t\t\tchart.plotTop += chart.extraTopMargin;\n\t\t}\n\t\tif (!skipAxes) {\n\t\t\tthis.getAxisMargins();\n\t\t}\n\t},\n\n\tgetAxisMargins: function () {\n\n\t\tvar chart = this,\n\t\t\taxisOffset = chart.axisOffset = [0, 0, 0, 0], // top, right, bottom, left\n\t\t\tmargin = chart.margin;\n\t\t\n\t\t// pre-render axes to get labels offset width\n\t\tif (chart.hasCartesianSeries) {\n\t\t\teach(chart.axes, function (axis) {\n\t\t\t\taxis.getOffset();\n\t\t\t});\n\t\t}\n\n\t\t// Add the axis offsets\n\t\teach(marginNames, function (m, side) {\n\t\t\tif (!defined(margin[side])) {\n\t\t\t\tchart[m] += axisOffset[side];\n\t\t\t}\t\t\n\t\t});\n\n\t\tchart.setChartSize();\n\n\t},\n\n\t/**\n\t * Resize the chart to its container if size is not explicitly set\n\t */\n\treflow: function (e) {\n\t\tvar chart = this,\n\t\t\toptionsChart = chart.options.chart,\n\t\t\trenderTo = chart.renderTo,\n\t\t\twidth = optionsChart.width || adapterRun(renderTo, 'width'),\n\t\t\theight = optionsChart.height || adapterRun(renderTo, 'height'),\n\t\t\ttarget = e ? e.target : win, // #805 - MooTools doesn't supply e\n\t\t\tdoReflow = function () {\n\t\t\t\tif (chart.container) { // It may have been destroyed in the meantime (#1257)\n\t\t\t\t\tchart.setSize(width, height, false);\n\t\t\t\t\tchart.hasUserSize = null;\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t// Width and height checks for display:none. Target is doc in IE8 and Opera,\n\t\t// win in Firefox, Chrome and IE9.\n\t\tif (!chart.hasUserSize && !chart.isPrinting && width && height && (target === win || target === doc)) { // #1093\n\t\t\tif (width !== chart.containerWidth || height !== chart.containerHeight) {\n\t\t\t\tclearTimeout(chart.reflowTimeout);\n\t\t\t\tif (e) { // Called from window.resize\n\t\t\t\t\tchart.reflowTimeout = setTimeout(doReflow, 100);\n\t\t\t\t} else { // Called directly (#2224)\n\t\t\t\t\tdoReflow();\n\t\t\t\t}\n\t\t\t}\n\t\t\tchart.containerWidth = width;\n\t\t\tchart.containerHeight = height;\n\t\t}\n\t},\n\n\t/**\n\t * Add the event handlers necessary for auto resizing\n\t */\n\tinitReflow: function () {\n\t\tvar chart = this,\n\t\t\treflow = function (e) {\n\t\t\t\tchart.reflow(e);\n\t\t\t};\n\t\t\t\n\t\t\n\t\taddEvent(win, 'resize', reflow);\n\t\taddEvent(chart, 'destroy', function () {\n\t\t\tremoveEvent(win, 'resize', reflow);\n\t\t});\n\t},\n\n\t/**\n\t * Resize the chart to a given width and height\n\t * @param {Number} width\n\t * @param {Number} height\n\t * @param {Object|Boolean} animation\n\t */\n\tsetSize: function (width, height, animation) {\n\t\tvar chart = this,\n\t\t\tchartWidth,\n\t\t\tchartHeight,\n\t\t\tfireEndResize;\n\n\t\t// Handle the isResizing counter\n\t\tchart.isResizing += 1;\n\t\tfireEndResize = function () {\n\t\t\tif (chart) {\n\t\t\t\tfireEvent(chart, 'endResize', null, function () {\n\t\t\t\t\tchart.isResizing -= 1;\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\t// set the animation for the current process\n\t\tsetAnimation(animation, chart);\n\n\t\tchart.oldChartHeight = chart.chartHeight;\n\t\tchart.oldChartWidth = chart.chartWidth;\n\t\tif (defined(width)) {\n\t\t\tchart.chartWidth = chartWidth = mathMax(0, mathRound(width));\n\t\t\tchart.hasUserSize = !!chartWidth;\n\t\t}\n\t\tif (defined(height)) {\n\t\t\tchart.chartHeight = chartHeight = mathMax(0, mathRound(height));\n\t\t}\n\n\t\t// Resize the container with the global animation applied if enabled (#2503)\n\t\t(globalAnimation ? animate : css)(chart.container, {\n\t\t\twidth: chartWidth + PX,\n\t\t\theight: chartHeight + PX\n\t\t}, globalAnimation);\n\n\t\tchart.setChartSize(true);\n\t\tchart.renderer.setSize(chartWidth, chartHeight, animation);\n\n\t\t// handle axes\n\t\tchart.maxTicks = null;\n\t\teach(chart.axes, function (axis) {\n\t\t\taxis.isDirty = true;\n\t\t\taxis.setScale();\n\t\t});\n\n\t\t// make sure non-cartesian series are also handled\n\t\teach(chart.series, function (serie) {\n\t\t\tserie.isDirty = true;\n\t\t});\n\n\t\tchart.isDirtyLegend = true; // force legend redraw\n\t\tchart.isDirtyBox = true; // force redraw of plot and chart border\n\n\t\tchart.layOutTitles(); // #2857\n\t\tchart.getMargins();\n\n\t\tchart.redraw(animation);\n\n\n\t\tchart.oldChartHeight = null;\n\t\tfireEvent(chart, 'resize');\n\n\t\t// fire endResize and set isResizing back\n\t\t// If animation is disabled, fire without delay\n\t\tif (globalAnimation === false) {\n\t\t\tfireEndResize();\n\t\t} else { // else set a timeout with the animation duration\n\t\t\tsetTimeout(fireEndResize, (globalAnimation && globalAnimation.duration) || 500);\n\t\t}\n\t},\n\n\t/**\n\t * Set the public chart properties. This is done before and after the pre-render\n\t * to determine margin sizes\n\t */\n\tsetChartSize: function (skipAxes) {\n\t\tvar chart = this,\n\t\t\tinverted = chart.inverted,\n\t\t\trenderer = chart.renderer,\n\t\t\tchartWidth = chart.chartWidth,\n\t\t\tchartHeight = chart.chartHeight,\n\t\t\toptionsChart = chart.options.chart,\n\t\t\tspacing = chart.spacing,\n\t\t\tclipOffset = chart.clipOffset,\n\t\t\tclipX,\n\t\t\tclipY,\n\t\t\tplotLeft,\n\t\t\tplotTop,\n\t\t\tplotWidth,\n\t\t\tplotHeight,\n\t\t\tplotBorderWidth;\n\n\t\tchart.plotLeft = plotLeft = mathRound(chart.plotLeft);\n\t\tchart.plotTop = plotTop = mathRound(chart.plotTop);\n\t\tchart.plotWidth = plotWidth = mathMax(0, mathRound(chartWidth - plotLeft - chart.marginRight));\n\t\tchart.plotHeight = plotHeight = mathMax(0, mathRound(chartHeight - plotTop - chart.marginBottom));\n\n\t\tchart.plotSizeX = inverted ? plotHeight : plotWidth;\n\t\tchart.plotSizeY = inverted ? plotWidth : plotHeight;\n\t\t\n\t\tchart.plotBorderWidth = optionsChart.plotBorderWidth || 0;\n\n\t\t// Set boxes used for alignment\n\t\tchart.spacingBox = renderer.spacingBox = {\n\t\t\tx: spacing[3],\n\t\t\ty: spacing[0],\n\t\t\twidth: chartWidth - spacing[3] - spacing[1],\n\t\t\theight: chartHeight - spacing[0] - spacing[2]\n\t\t};\n\t\tchart.plotBox = renderer.plotBox = {\n\t\t\tx: plotLeft,\n\t\t\ty: plotTop,\n\t\t\twidth: plotWidth,\n\t\t\theight: plotHeight\n\t\t};\n\n\t\tplotBorderWidth = 2 * mathFloor(chart.plotBorderWidth / 2);\n\t\tclipX = mathCeil(mathMax(plotBorderWidth, clipOffset[3]) / 2);\n\t\tclipY = mathCeil(mathMax(plotBorderWidth, clipOffset[0]) / 2);\n\t\tchart.clipBox = {\n\t\t\tx: clipX, \n\t\t\ty: clipY, \n\t\t\twidth: mathFloor(chart.plotSizeX - mathMax(plotBorderWidth, clipOffset[1]) / 2 - clipX), \n\t\t\theight: mathMax(0, mathFloor(chart.plotSizeY - mathMax(plotBorderWidth, clipOffset[2]) / 2 - clipY))\n\t\t};\n\n\t\tif (!skipAxes) {\n\t\t\teach(chart.axes, function (axis) {\n\t\t\t\taxis.setAxisSize();\n\t\t\t\taxis.setAxisTranslation();\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Initial margins before auto size margins are applied\n\t */\n\tresetMargins: function () {\n\t\tvar chart = this;\n\n\t\teach(marginNames, function (m, side) {\n\t\t\tchart[m] = pick(chart.margin[side], chart.spacing[side]);\n\t\t});\n\t\tchart.axisOffset = [0, 0, 0, 0]; // top, right, bottom, left\n\t\tchart.clipOffset = [0, 0, 0, 0];\n\t},\n\n\t/**\n\t * Draw the borders and backgrounds for chart and plot area\n\t */\n\tdrawChartBox: function () {\n\t\tvar chart = this,\n\t\t\toptionsChart = chart.options.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\tchartWidth = chart.chartWidth,\n\t\t\tchartHeight = chart.chartHeight,\n\t\t\tchartBackground = chart.chartBackground,\n\t\t\tplotBackground = chart.plotBackground,\n\t\t\tplotBorder = chart.plotBorder,\n\t\t\tplotBGImage = chart.plotBGImage,\n\t\t\tchartBorderWidth = optionsChart.borderWidth || 0,\n\t\t\tchartBackgroundColor = optionsChart.backgroundColor,\n\t\t\tplotBackgroundColor = optionsChart.plotBackgroundColor,\n\t\t\tplotBackgroundImage = optionsChart.plotBackgroundImage,\n\t\t\tplotBorderWidth = optionsChart.plotBorderWidth || 0,\n\t\t\tmgn,\n\t\t\tbgAttr,\n\t\t\tplotLeft = chart.plotLeft,\n\t\t\tplotTop = chart.plotTop,\n\t\t\tplotWidth = chart.plotWidth,\n\t\t\tplotHeight = chart.plotHeight,\n\t\t\tplotBox = chart.plotBox,\n\t\t\tclipRect = chart.clipRect,\n\t\t\tclipBox = chart.clipBox;\n\n\t\t// Chart area\n\t\tmgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);\n\n\t\tif (chartBorderWidth || chartBackgroundColor) {\n\t\t\tif (!chartBackground) {\n\t\t\t\t\n\t\t\t\tbgAttr = {\n\t\t\t\t\tfill: chartBackgroundColor || NONE\n\t\t\t\t};\n\t\t\t\tif (chartBorderWidth) { // #980\n\t\t\t\t\tbgAttr.stroke = optionsChart.borderColor;\n\t\t\t\t\tbgAttr['stroke-width'] = chartBorderWidth;\n\t\t\t\t}\n\t\t\t\tchart.chartBackground = renderer.rect(mgn / 2, mgn / 2, chartWidth - mgn, chartHeight - mgn,\n\t\t\t\t\t\toptionsChart.borderRadius, chartBorderWidth)\n\t\t\t\t\t.attr(bgAttr)\n\t\t\t\t\t.addClass(PREFIX + 'background')\n\t\t\t\t\t.add()\n\t\t\t\t\t.shadow(optionsChart.shadow);\n\n\t\t\t} else { // resize\n\t\t\t\tchartBackground.animate(\n\t\t\t\t\tchartBackground.crisp({ width: chartWidth - mgn, height: chartHeight - mgn })\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\n\t\t// Plot background\n\t\tif (plotBackgroundColor) {\n\t\t\tif (!plotBackground) {\n\t\t\t\tchart.plotBackground = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0)\n\t\t\t\t\t.attr({\n\t\t\t\t\t\tfill: plotBackgroundColor\n\t\t\t\t\t})\n\t\t\t\t\t.add()\n\t\t\t\t\t.shadow(optionsChart.plotShadow);\n\t\t\t} else {\n\t\t\t\tplotBackground.animate(plotBox);\n\t\t\t}\n\t\t}\n\t\tif (plotBackgroundImage) {\n\t\t\tif (!plotBGImage) {\n\t\t\t\tchart.plotBGImage = renderer.image(plotBackgroundImage, plotLeft, plotTop, plotWidth, plotHeight)\n\t\t\t\t\t.add();\n\t\t\t} else {\n\t\t\t\tplotBGImage.animate(plotBox);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Plot clip\n\t\tif (!clipRect) {\n\t\t\tchart.clipRect = renderer.clipRect(clipBox);\n\t\t} else {\n\t\t\tclipRect.animate({\n\t\t\t\twidth: clipBox.width,\n\t\t\t\theight: clipBox.height\n\t\t\t});\n\t\t}\n\n\t\t// Plot area border\n\t\tif (plotBorderWidth) {\n\t\t\tif (!plotBorder) {\n\t\t\t\tchart.plotBorder = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0, -plotBorderWidth)\n\t\t\t\t\t.attr({\n\t\t\t\t\t\tstroke: optionsChart.plotBorderColor,\n\t\t\t\t\t\t'stroke-width': plotBorderWidth,\n\t\t\t\t\t\tfill: NONE,\n\t\t\t\t\t\tzIndex: 1\n\t\t\t\t\t})\n\t\t\t\t\t.add();\n\t\t\t} else {\n\t\t\t\tplotBorder.animate(\n\t\t\t\t\tplotBorder.crisp({ x: plotLeft, y: plotTop, width: plotWidth, height: plotHeight, strokeWidth: -plotBorderWidth }) //#3282 plotBorder should be negative\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// reset\n\t\tchart.isDirtyBox = false;\n\t},\n\n\t/**\n\t * Detect whether a certain chart property is needed based on inspecting its options\n\t * and series. This mainly applies to the chart.invert property, and in extensions to \n\t * the chart.angular and chart.polar properties.\n\t */\n\tpropFromSeries: function () {\n\t\tvar chart = this,\n\t\t\toptionsChart = chart.options.chart,\n\t\t\tklass,\n\t\t\tseriesOptions = chart.options.series,\n\t\t\ti,\n\t\t\tvalue;\n\t\t\t\n\t\t\t\n\t\teach(['inverted', 'angular', 'polar'], function (key) {\n\t\t\t\n\t\t\t// The default series type's class\n\t\t\tklass = seriesTypes[optionsChart.type || optionsChart.defaultSeriesType];\n\t\t\t\n\t\t\t// Get the value from available chart-wide properties\n\t\t\tvalue = (\n\t\t\t\tchart[key] || // 1. it is set before\n\t\t\t\toptionsChart[key] || // 2. it is set in the options\n\t\t\t\t(klass && klass.prototype[key]) // 3. it's default series class requires it\n\t\t\t);\n\t\n\t\t\t// 4. Check if any the chart's series require it\n\t\t\ti = seriesOptions && seriesOptions.length;\n\t\t\twhile (!value && i--) {\n\t\t\t\tklass = seriesTypes[seriesOptions[i].type];\n\t\t\t\tif (klass && klass.prototype[key]) {\n\t\t\t\t\tvalue = true;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Set the chart property\n\t\t\tchart[key] = value;\t\n\t\t});\n\t\t\n\t},\n\n\t/**\n\t * Link two or more series together. This is done initially from Chart.render,\n\t * and after Chart.addSeries and Series.remove.\n\t */\n\tlinkSeries: function () {\n\t\tvar chart = this,\n\t\t\tchartSeries = chart.series;\n\n\t\t// Reset links\n\t\teach(chartSeries, function (series) {\n\t\t\tseries.linkedSeries.length = 0;\n\t\t});\n\n\t\t// Apply new links\n\t\teach(chartSeries, function (series) {\n\t\t\tvar linkedTo = series.options.linkedTo;\n\t\t\tif (isString(linkedTo)) {\n\t\t\t\tif (linkedTo === ':previous') {\n\t\t\t\t\tlinkedTo = chart.series[series.index - 1];\n\t\t\t\t} else {\n\t\t\t\t\tlinkedTo = chart.get(linkedTo);\n\t\t\t\t}\n\t\t\t\tif (linkedTo) {\n\t\t\t\t\tlinkedTo.linkedSeries.push(series);\n\t\t\t\t\tseries.linkedParent = linkedTo;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Render series for the chart\n\t */\n\trenderSeries: function () {\n\t\teach(this.series, function (serie) {\n\t\t\tserie.translate();\n\t\t\tserie.render();\n\t\t});\n\t},\n\t\t\n\t/**\n\t * Render labels for the chart\n\t */\n\trenderLabels: function () {\n\t\tvar chart = this,\n\t\t\tlabels = chart.options.labels;\n\t\tif (labels.items) {\n\t\t\teach(labels.items, function (label) {\n\t\t\t\tvar style = extend(labels.style, label.style),\n\t\t\t\t\tx = pInt(style.left) + chart.plotLeft,\n\t\t\t\t\ty = pInt(style.top) + chart.plotTop + 12;\n\n\t\t\t\t// delete to prevent rewriting in IE\n\t\t\t\tdelete style.left;\n\t\t\t\tdelete style.top;\n\n\t\t\t\tchart.renderer.text(\n\t\t\t\t\tlabel.html,\n\t\t\t\t\tx,\n\t\t\t\t\ty\n\t\t\t\t)\n\t\t\t\t.attr({ zIndex: 2 })\n\t\t\t\t.css(style)\n\t\t\t\t.add();\n\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Render all graphics for the chart\n\t */\n\trender: function () {\n\t\tvar chart = this,\n\t\t\taxes = chart.axes,\n\t\t\trenderer = chart.renderer,\n\t\t\toptions = chart.options,\n\t\t\ttempWidth,\n\t\t\ttempHeight,\n\t\t\tredoHorizontal,\n\t\t\tredoVertical;\n\n\t\t// Title\n\t\tchart.setTitle();\n\n\n\t\t// Legend\n\t\tchart.legend = new Legend(chart, options.legend);\n\n\t\tchart.getStacks(); // render stacks\n\n\t\t// Get chart margins\n\t\tchart.getMargins(true);\n\t\tchart.setChartSize();\n\n\t\t// Record preliminary dimensions for later comparison\n\t\ttempWidth = chart.plotWidth;\n\t\ttempHeight = chart.plotHeight = chart.plotHeight - 13; // 13 is the most common height of X axis labels\n\n\t\t// Get margins by pre-rendering axes\n\t\teach(axes, function (axis) {\n\t\t\taxis.setScale();\n\t\t});\n\t\tchart.getAxisMargins();\n\n\t\t// If the plot area size has changed significantly, calculate tick positions again\n\t\tredoHorizontal = tempWidth / chart.plotWidth > 1.1;\n\t\tredoVertical = tempHeight / chart.plotHeight > 1.1;\n\n\t\tif (redoHorizontal || redoVertical) {\n\n\t\t\tchart.maxTicks = null; // reset for second pass\n\t\t\teach(axes, function (axis) {\n\t\t\t\tif ((axis.horiz && redoHorizontal) || (!axis.horiz && redoVertical)) {\n\t\t\t\t\taxis.setTickInterval(true); // update to reflect the new margins\n\t\t\t\t}\n\t\t\t});\n\t\t\tchart.getMargins(); // second pass to check for new labels\n\t\t}\n\n\t\t// Draw the borders and backgrounds\n\t\tchart.drawChartBox();\t\t\n\n\n\t\t// Axes\n\t\tif (chart.hasCartesianSeries) {\n\t\t\teach(axes, function (axis) {\n\t\t\t\taxis.render();\n\t\t\t});\n\t\t}\n\n\t\t// The series\n\t\tif (!chart.seriesGroup) {\n\t\t\tchart.seriesGroup = renderer.g('series-group')\n\t\t\t\t.attr({ zIndex: 3 })\n\t\t\t\t.add();\n\t\t}\n\t\tchart.renderSeries();\n\n\t\t// Labels\n\t\tchart.renderLabels();\n\n\t\t// Credits\n\t\tchart.showCredits(options.credits);\n\n\t\t// Set flag\n\t\tchart.hasRendered = true;\n\n\t},\n\n\t/**\n\t * Show chart credits based on config options\n\t */\n\tshowCredits: function (credits) {\n\t\tif (credits.enabled && !this.credits) {\n\t\t\tthis.credits = this.renderer.text(\n\t\t\t\tcredits.text,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t)\n\t\t\t.on('click', function () {\n\t\t\t\tif (credits.href) {\n\t\t\t\t\tlocation.href = credits.href;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.attr({\n\t\t\t\talign: credits.position.align,\n\t\t\t\tzIndex: 8\n\t\t\t})\n\t\t\t.css(credits.style)\n\t\t\t.add()\n\t\t\t.align(credits.position);\n\t\t}\n\t},\n\n\t/**\n\t * Clean up memory usage\n\t */\n\tdestroy: function () {\n\t\tvar chart = this,\n\t\t\taxes = chart.axes,\n\t\t\tseries = chart.series,\n\t\t\tcontainer = chart.container,\n\t\t\ti,\n\t\t\tparentNode = container && container.parentNode;\n\t\t\t\n\t\t// fire the chart.destoy event\n\t\tfireEvent(chart, 'destroy');\n\t\t\n\t\t// Delete the chart from charts lookup array\n\t\tcharts[chart.index] = UNDEFINED;\n\t\tchartCount--;\n\t\tchart.renderTo.removeAttribute('data-highcharts-chart');\n\n\t\t// remove events\n\t\tremoveEvent(chart);\n\n\t\t// ==== Destroy collections:\n\t\t// Destroy axes\n\t\ti = axes.length;\n\t\twhile (i--) {\n\t\t\taxes[i] = axes[i].destroy();\n\t\t}\n\n\t\t// Destroy each series\n\t\ti = series.length;\n\t\twhile (i--) {\n\t\t\tseries[i] = series[i].destroy();\n\t\t}\n\n\t\t// ==== Destroy chart properties:\n\t\teach(['title', 'subtitle', 'chartBackground', 'plotBackground', 'plotBGImage', \n\t\t\t\t'plotBorder', 'seriesGroup', 'clipRect', 'credits', 'pointer', 'scroller', \n\t\t\t\t'rangeSelector', 'legend', 'resetZoomButton', 'tooltip', 'renderer'], function (name) {\n\t\t\tvar prop = chart[name];\n\n\t\t\tif (prop && prop.destroy) {\n\t\t\t\tchart[name] = prop.destroy();\n\t\t\t}\n\t\t});\n\n\t\t// remove container and all SVG\n\t\tif (container) { // can break in IE when destroyed before finished loading\n\t\t\tcontainer.innerHTML = '';\n\t\t\tremoveEvent(container);\n\t\t\tif (parentNode) {\n\t\t\t\tdiscardElement(container);\n\t\t\t}\n\n\t\t}\n\n\t\t// clean it all up\n\t\tfor (i in chart) {\n\t\t\tdelete chart[i];\n\t\t}\n\n\t},\n\n\n\t/**\n\t * VML namespaces can't be added until after complete. Listening\n\t * for Perini's doScroll hack is not enough.\n\t */\n\tisReadyToRender: function () {\n\t\tvar chart = this;\n\n\t\t// Note: in spite of JSLint's complaints, win == win.top is required\n\t\t/*jslint eqeq: true*/\n\t\tif ((!hasSVG && (win == win.top && doc.readyState !== 'complete')) || (useCanVG && !win.canvg)) {\n\t\t/*jslint eqeq: false*/\n\t\t\tif (useCanVG) {\n\t\t\t\t// Delay rendering until canvg library is downloaded and ready\n\t\t\t\tCanVGController.push(function () { chart.firstRender(); }, chart.options.global.canvasToolsURL);\n\t\t\t} else {\n\t\t\t\tdoc.attachEvent('onreadystatechange', function () {\n\t\t\t\t\tdoc.detachEvent('onreadystatechange', chart.firstRender);\n\t\t\t\t\tif (doc.readyState === 'complete') {\n\t\t\t\t\t\tchart.firstRender();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t/**\n\t * Prepare for first rendering after all data are loaded\n\t */\n\tfirstRender: function () {\n\t\tvar chart = this,\n\t\t\toptions = chart.options,\n\t\t\tcallback = chart.callback;\n\n\t\t// Check whether the chart is ready to render\n\t\tif (!chart.isReadyToRender()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Create the container\n\t\tchart.getContainer();\n\n\t\t// Run an early event after the container and renderer are established\n\t\tfireEvent(chart, 'init');\n\n\t\t\n\t\tchart.resetMargins();\n\t\tchart.setChartSize();\n\n\t\t// Set the common chart properties (mainly invert) from the given series\n\t\tchart.propFromSeries();\n\n\t\t// get axes\n\t\tchart.getAxes();\n\n\t\t// Initialize the series\n\t\teach(options.series || [], function (serieOptions) {\n\t\t\tchart.initSeries(serieOptions);\n\t\t});\n\n\t\tchart.linkSeries();\n\n\t\t// Run an event after axes and series are initialized, but before render. At this stage,\n\t\t// the series data is indexed and cached in the xData and yData arrays, so we can access\n\t\t// those before rendering. Used in Highstock. \n\t\tfireEvent(chart, 'beforeRender'); \n\n\t\t// depends on inverted and on margins being set\n\t\tif (Highcharts.Pointer) {\n\t\t\tchart.pointer = new Pointer(chart, options);\n\t\t}\n\n\t\tchart.render();\n\n\t\t// add canvas\n\t\tchart.renderer.draw();\n\t\t// run callbacks\n\t\tif (callback) {\n\t\t\tcallback.apply(chart, [chart]);\n\t\t}\n\t\teach(chart.callbacks, function (fn) {\n\t\t\tif (chart.index !== UNDEFINED) { // Chart destroyed in its own callback (#3600)\n\t\t\t\tfn.apply(chart, [chart]);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Fire the load event\n\t\tfireEvent(chart, 'load');\t\t\n\t\t\n\t\t// If the chart was rendered outside the top container, put it back in (#3679)\n\t\tchart.cloneRenderTo(true);\n\n\t},\n\n\t/**\n\t* Creates arrays for spacing and margin from given options.\n\t*/\n\tsplashArray: function (target, options) {\n\t\tvar oVar = options[target],\n\t\t\ttArray = isObject(oVar) ? oVar : [oVar, oVar, oVar, oVar];\n\n\t\treturn [pick(options[target + 'Top'], tArray[0]),\n\t\t\t\tpick(options[target + 'Right'], tArray[1]),\n\t\t\t\tpick(options[target + 'Bottom'], tArray[2]),\n\t\t\t\tpick(options[target + 'Left'], tArray[3])];\n\t}\n}; // end Chart\n\nvar CenteredSeriesMixin = Highcharts.CenteredSeriesMixin = {\n\t/**\n\t * Get the center of the pie based on the size and center options relative to the  \n\t * plot area. Borrowed by the polar and gauge series types.\n\t */\n\tgetCenter: function () {\n\t\t\n\t\tvar options = this.options,\n\t\t\tchart = this.chart,\n\t\t\tslicingRoom = 2 * (options.slicedOffset || 0),\n\t\t\thandleSlicingRoom,\n\t\t\tplotWidth = chart.plotWidth - 2 * slicingRoom,\n\t\t\tplotHeight = chart.plotHeight - 2 * slicingRoom,\n\t\t\tcenterOption = options.center,\n\t\t\tpositions = [pick(centerOption[0], '50%'), pick(centerOption[1], '50%'), options.size || '100%', options.innerSize || 0],\n\t\t\tsmallestSize = mathMin(plotWidth, plotHeight),\n\t\t\ti,\n\t\t\tvalue;\n\n\t\tfor (i = 0; i < 4; ++i) {\n\t\t\tvalue = positions[i];\n\t\t\thandleSlicingRoom = i < 2 || (i === 2 && /%$/.test(value));\n\t\t\t\n\t\t\t// i == 0: centerX, relative to width\n\t\t\t// i == 1: centerY, relative to height\n\t\t\t// i == 2: size, relative to smallestSize\n\t\t\t// i == 3: innerSize, relative to size\n\t\t\tpositions[i] = relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) +\n\t\t\t\t(handleSlicingRoom ? slicingRoom : 0);\n\n\t\t}\n\t\treturn positions;\n\t}\n};\n\n/**\n * The Point object and prototype. Inheritable and used as base for PiePoint\n */\nvar Point = function () {};\nPoint.prototype = {\n\n\t/**\n\t * Initialize the point\n\t * @param {Object} series The series object containing this point\n\t * @param {Object} options The data in either number, array or object format\n\t */\n\tinit: function (series, options, x) {\n\n\t\tvar point = this,\n\t\t\tcolors;\n\t\tpoint.series = series;\n\t\tpoint.color = series.color; // #3445\n\t\tpoint.applyOptions(options, x);\n\t\tpoint.pointAttr = {};\n\n\t\tif (series.options.colorByPoint) {\n\t\t\tcolors = series.options.colors || series.chart.options.colors;\n\t\t\tpoint.color = point.color || colors[series.colorCounter++];\n\t\t\t// loop back to zero\n\t\t\tif (series.colorCounter === colors.length) {\n\t\t\t\tseries.colorCounter = 0;\n\t\t\t}\n\t\t}\n\n\t\tseries.chart.pointCount++;\n\t\treturn point;\n\t},\n\t/**\n\t * Apply the options containing the x and y data and possible some extra properties.\n\t * This is called on point init or from point.update.\n\t *\n\t * @param {Object} options\n\t */\n\tapplyOptions: function (options, x) {\n\t\tvar point = this,\n\t\t\tseries = point.series,\n\t\t\tpointValKey = series.options.pointValKey || series.pointValKey;\n\n\t\toptions = Point.prototype.optionsToObject.call(this, options);\n\n\t\t// copy options directly to point\n\t\textend(point, options);\n\t\tpoint.options = point.options ? extend(point.options, options) : options;\n\n\t\t// For higher dimension series types. For instance, for ranges, point.y is mapped to point.low.\n\t\tif (pointValKey) {\n\t\t\tpoint.y = point[pointValKey];\n\t\t}\n\n\t\t// If no x is set by now, get auto incremented value. All points must have an\n\t\t// x value, however the y value can be null to create a gap in the series\n\t\tif (point.x === UNDEFINED && series) {\n\t\t\tpoint.x = x === UNDEFINED ? series.autoIncrement() : x;\n\t\t}\n\n\t\treturn point;\n\t},\n\n\t/**\n\t * Transform number or array configs into objects\n\t */\n\toptionsToObject: function (options) {\n\t\tvar ret = {},\n\t\t\tseries = this.series,\n\t\t\tkeys = series.options.keys,\n\t\t\tpointArrayMap = keys || series.pointArrayMap || ['y'],\n\t\t\tvalueCount = pointArrayMap.length,\n\t\t\tfirstItemType,\n\t\t\ti = 0,\n\t\t\tj = 0;\n\n\t\tif (typeof options === 'number' || options === null) {\n\t\t\tret[pointArrayMap[0]] = options;\n\n\t\t} else if (isArray(options)) {\n\t\t\t// with leading x value\n\t\t\tif (!keys && options.length > valueCount) {\n\t\t\t\tfirstItemType = typeof options[0];\n\t\t\t\tif (firstItemType === 'string') {\n\t\t\t\t\tret.name = options[0];\n\t\t\t\t} else if (firstItemType === 'number') {\n\t\t\t\t\tret.x = options[0];\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile (j < valueCount) {\n\t\t\t\tret[pointArrayMap[j++]] = options[i++];\n\t\t\t}\n\t\t} else if (typeof options === 'object') {\n\t\t\tret = options;\n\n\t\t\t// This is the fastest way to detect if there are individual point dataLabels that need\n\t\t\t// to be considered in drawDataLabels. These can only occur in object configs.\n\t\t\tif (options.dataLabels) {\n\t\t\t\tseries._hasPointLabels = true;\n\t\t\t}\n\n\t\t\t// Same approach as above for markers\n\t\t\tif (options.marker) {\n\t\t\t\tseries._hasPointMarkers = true;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t},\n\n\t/**\n\t * Destroy a point to clear memory. Its reference still stays in series.data.\n\t */\n\tdestroy: function () {\n\t\tvar point = this,\n\t\t\tseries = point.series,\n\t\t\tchart = series.chart,\n\t\t\thoverPoints = chart.hoverPoints,\n\t\t\tprop;\n\n\t\tchart.pointCount--;\n\n\t\tif (hoverPoints) {\n\t\t\tpoint.setState();\n\t\t\terase(hoverPoints, point);\n\t\t\tif (!hoverPoints.length) {\n\t\t\t\tchart.hoverPoints = null;\n\t\t\t}\n\n\t\t}\n\t\tif (point === chart.hoverPoint) {\n\t\t\tpoint.onMouseOut();\n\t\t}\n\n\t\t// remove all events\n\t\tif (point.graphic || point.dataLabel) { // removeEvent and destroyElements are performance expensive\n\t\t\tremoveEvent(point);\n\t\t\tpoint.destroyElements();\n\t\t}\n\n\t\tif (point.legendItem) { // pies have legend items\n\t\t\tchart.legend.destroyItem(point);\n\t\t}\n\n\t\tfor (prop in point) {\n\t\t\tpoint[prop] = null;\n\t\t}\n\n\n\t},\n\n\t/**\n\t * Destroy SVG elements associated with the point\n\t */\n\tdestroyElements: function () {\n\t\tvar point = this,\n\t\t\tprops = ['graphic', 'dataLabel', 'dataLabelUpper', 'group', 'connector', 'shadowGroup'],\n\t\t\tprop,\n\t\t\ti = 6;\n\t\twhile (i--) {\n\t\t\tprop = props[i];\n\t\t\tif (point[prop]) {\n\t\t\t\tpoint[prop] = point[prop].destroy();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Return the configuration hash needed for the data label and tooltip formatters\n\t */\n\tgetLabelConfig: function () {\n\t\tvar point = this;\n\t\treturn {\n\t\t\tx: point.category,\n\t\t\ty: point.y,\n\t\t\tkey: point.name || point.category,\n\t\t\tseries: point.series,\n\t\t\tpoint: point,\n\t\t\tpercentage: point.percentage,\n\t\t\ttotal: point.total || point.stackTotal\n\t\t};\n\t},\t\n\n\t/**\n\t * Extendable method for formatting each point's tooltip line\n\t *\n\t * @return {String} A string to be concatenated in to the common tooltip text\n\t */\n\ttooltipFormatter: function (pointFormat) {\n\n\t\t// Insert options for valueDecimals, valuePrefix, and valueSuffix\n\t\tvar series = this.series,\n\t\t\tseriesTooltipOptions = series.tooltipOptions,\n\t\t\tvalueDecimals = pick(seriesTooltipOptions.valueDecimals, ''),\n\t\t\tvaluePrefix = seriesTooltipOptions.valuePrefix || '',\n\t\t\tvalueSuffix = seriesTooltipOptions.valueSuffix || '';\n\n\t\t// Loop over the point array map and replace unformatted values with sprintf formatting markup\n\t\teach(series.pointArrayMap || ['y'], function (key) {\n\t\t\tkey = '{point.' + key; // without the closing bracket\n\t\t\tif (valuePrefix || valueSuffix) {\n\t\t\t\tpointFormat = pointFormat.replace(key + '}', valuePrefix + key + '}' + valueSuffix);\n\t\t\t}\n\t\t\tpointFormat = pointFormat.replace(key + '}', key + ':,.' + valueDecimals + 'f}');\n\t\t});\n\n\t\treturn format(pointFormat, {\n\t\t\tpoint: this,\n\t\t\tseries: this.series\n\t\t});\n\t},\n\n\t/**\n\t * Fire an event on the Point object. Must not be renamed to fireEvent, as this\n\t * causes a name clash in MooTools\n\t * @param {String} eventType\n\t * @param {Object} eventArgs Additional event arguments\n\t * @param {Function} defaultFunction Default event handler\n\t */\n\tfirePointEvent: function (eventType, eventArgs, defaultFunction) {\n\t\tvar point = this,\n\t\t\tseries = this.series,\n\t\t\tseriesOptions = series.options;\n\n\t\t// load event handlers on demand to save time on mouseover/out\n\t\tif (seriesOptions.point.events[eventType] || (point.options && point.options.events && point.options.events[eventType])) {\n\t\t\tthis.importEvents();\n\t\t}\n\n\t\t// add default handler if in selection mode\n\t\tif (eventType === 'click' && seriesOptions.allowPointSelect) {\n\t\t\tdefaultFunction = function (event) {\n\t\t\t\t// Control key is for Windows, meta (= Cmd key) for Mac, Shift for Opera\n\t\t\t\tif (point.select) { // Could be destroyed by prior event handlers (#2911)\n\t\t\t\t\tpoint.select(null, event.ctrlKey || event.metaKey || event.shiftKey);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfireEvent(this, eventType, eventArgs, defaultFunction);\n\t}\n};/**\n * @classDescription The base function which all other series types inherit from. The data in the series is stored\n * in various arrays.\n *\n * - First, series.options.data contains all the original config options for\n * each point whether added by options or methods like series.addPoint.\n * - Next, series.data contains those values converted to points, but in case the series data length\n * exceeds the cropThreshold, or if the data is grouped, series.data doesn't contain all the points. It\n * only contains the points that have been created on demand.\n * - Then there's series.points that contains all currently visible point objects. In case of cropping,\n * the cropped-away points are not part of this array. The series.points array starts at series.cropStart\n * compared to series.data and series.options.data. If however the series data is grouped, these can't\n * be correlated one to one.\n * - series.xData and series.processedXData contain clean x values, equivalent to series.data and series.points.\n * - series.yData and series.processedYData contain clean x values, equivalent to series.data and series.points.\n *\n * @param {Object} chart\n * @param {Object} options\n */\nvar Series = Highcharts.Series = function () {};\n\nSeries.prototype = {\n\n\tisCartesian: true,\n\ttype: 'line',\n\tpointClass: Point,\n\tsorted: true, // requires the data to be sorted\n\trequireSorting: true,\n\tpointAttrToOptions: { // mapping between SVG attributes and the corresponding options\n\t\tstroke: 'lineColor',\n\t\t'stroke-width': 'lineWidth',\n\t\tfill: 'fillColor',\n\t\tr: 'radius'\n\t},\n\taxisTypes: ['xAxis', 'yAxis'],\n\tcolorCounter: 0,\n\tparallelArrays: ['x', 'y'], // each point's x and y values are stored in this.xData and this.yData\n\tinit: function (chart, options) {\n\t\tvar series = this,\n\t\t\teventType,\n\t\t\tevents,\n\t\t\tchartSeries = chart.series,\n\t\t\tsortByIndex = function (a, b) {\n\t\t\t\treturn pick(a.options.index, a._i) - pick(b.options.index, b._i);\n\t\t\t};\n\n\t\tseries.chart = chart;\n\t\tseries.options = options = series.setOptions(options); // merge with plotOptions\n\t\tseries.linkedSeries = [];\n\n\t\t// bind the axes\n\t\tseries.bindAxes();\n\n\t\t// set some variables\n\t\textend(series, {\n\t\t\tname: options.name,\n\t\t\tstate: NORMAL_STATE,\n\t\t\tpointAttr: {},\n\t\t\tvisible: options.visible !== false, // true by default\n\t\t\tselected: options.selected === true // false by default\n\t\t});\n\n\t\t// special\n\t\tif (useCanVG) {\n\t\t\toptions.animation = false;\n\t\t}\n\n\t\t// register event listeners\n\t\tevents = options.events;\n\t\tfor (eventType in events) {\n\t\t\taddEvent(series, eventType, events[eventType]);\n\t\t}\n\t\tif (\n\t\t\t(events && events.click) ||\n\t\t\t(options.point && options.point.events && options.point.events.click) ||\n\t\t\toptions.allowPointSelect\n\t\t) {\n\t\t\tchart.runTrackerClick = true;\n\t\t}\n\n\t\tseries.getColor();\n\t\tseries.getSymbol();\n\n\t\t// Set the data\n\t\teach(series.parallelArrays, function (key) {\n\t\t\tseries[key + 'Data'] = [];\n\t\t});\n\t\tseries.setData(options.data, false);\n\n\t\t// Mark cartesian\n\t\tif (series.isCartesian) {\n\t\t\tchart.hasCartesianSeries = true;\n\t\t}\n\n\t\t// Register it in the chart\n\t\tchartSeries.push(series);\n\t\tseries._i = chartSeries.length - 1;\n\n\t\t// Sort series according to index option (#248, #1123, #2456)\n\t\tstableSort(chartSeries, sortByIndex);\n\t\tif (this.yAxis) {\n\t\t\tstableSort(this.yAxis.series, sortByIndex);\n\t\t}\n\n\t\teach(chartSeries, function (series, i) {\n\t\t\tseries.index = i;\n\t\t\tseries.name = series.name || 'Series ' + (i + 1);\n\t\t});\n\n\t},\n\n\t/**\n\t * Set the xAxis and yAxis properties of cartesian series, and register the series\n\t * in the axis.series array\n\t */\n\tbindAxes: function () {\n\t\tvar series = this,\n\t\t\tseriesOptions = series.options,\n\t\t\tchart = series.chart,\n\t\t\taxisOptions;\n\n\t\teach(series.axisTypes || [], function (AXIS) { // repeat for xAxis and yAxis\n\n\t\t\teach(chart[AXIS], function (axis) { // loop through the chart's axis objects\n\t\t\t\taxisOptions = axis.options;\n\n\t\t\t\t// apply if the series xAxis or yAxis option mathches the number of the\n\t\t\t\t// axis, or if undefined, use the first axis\n\t\t\t\tif ((seriesOptions[AXIS] === axisOptions.index) ||\n\t\t\t\t\t\t(seriesOptions[AXIS] !== UNDEFINED && seriesOptions[AXIS] === axisOptions.id) ||\n\t\t\t\t\t\t(seriesOptions[AXIS] === UNDEFINED && axisOptions.index === 0)) {\n\n\t\t\t\t\t// register this series in the axis.series lookup\n\t\t\t\t\taxis.series.push(series);\n\n\t\t\t\t\t// set this series.xAxis or series.yAxis reference\n\t\t\t\t\tseries[AXIS] = axis;\n\n\t\t\t\t\t// mark dirty for redraw\n\t\t\t\t\taxis.isDirty = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// The series needs an X and an Y axis\n\t\t\tif (!series[AXIS] && series.optionalAxis !== AXIS) {\n\t\t\t\terror(18, true);\n\t\t\t}\n\n\t\t});\n\t},\n\n\t/**\n\t * For simple series types like line and column, the data values are held in arrays like\n\t * xData and yData for quick lookup to find extremes and more. For multidimensional series\n\t * like bubble and map, this can be extended with arrays like zData and valueData by\n\t * adding to the series.parallelArrays array.\n\t */\n\tupdateParallelArrays: function (point, i) {\n\t\tvar series = point.series,\n\t\t\targs = arguments,\n\t\t\tfn = typeof i === 'number' ?\n\t\t\t\t // Insert the value in the given position\n\t\t\t\tfunction (key) {\n\t\t\t\t\tvar val = key === 'y' && series.toYData ? series.toYData(point) : point[key];\n\t\t\t\t\tseries[key + 'Data'][i] = val;\n\t\t\t\t} :\n\t\t\t\t// Apply the method specified in i with the following arguments as arguments\n\t\t\t\tfunction (key) {\n\t\t\t\t\tArray.prototype[i].apply(series[key + 'Data'], Array.prototype.slice.call(args, 2));\n\t\t\t\t};\n\n\t\teach(series.parallelArrays, fn);\n\t},\n\n\t/**\n\t * Return an auto incremented x value based on the pointStart and pointInterval options.\n\t * This is only used if an x value is not given for the point that calls autoIncrement.\n\t */\n\tautoIncrement: function () {\n\n\t\tvar options = this.options,\n\t\t\txIncrement = this.xIncrement,\n\t\t\tdate,\n\t\t\tpointInterval,\n\t\t\tpointIntervalUnit = options.pointIntervalUnit;\n\t\t\n\t\txIncrement = pick(xIncrement, options.pointStart, 0);\n\t\t\n\t\tthis.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);\n\t\t\n\t\t// Added code for pointInterval strings\n\t\tif (pointIntervalUnit === 'month' || pointIntervalUnit === 'year') {\n\t\t\tdate = new Date(xIncrement);\n\t\t\tdate = (pointIntervalUnit === 'month') ?\n\t\t\t\t+date[setMonth](date[getMonth]() + pointInterval) :\n\t\t\t\t+date[setFullYear](date[getFullYear]() + pointInterval);\n\t\t\tpointInterval = date - xIncrement;\n\t\t}\n\t\t\n\t\tthis.xIncrement = xIncrement + pointInterval;\n\t\treturn xIncrement;\n\t},\n\n\t/**\n\t * Divide the series data into segments divided by null values.\n\t */\n\tgetSegments: function () {\n\t\tvar series = this,\n\t\t\tlastNull = -1,\n\t\t\tsegments = [],\n\t\t\ti,\n\t\t\tpoints = series.points,\n\t\t\tpointsLength = points.length;\n\n\t\tif (pointsLength) { // no action required for []\n\n\t\t\t// if connect nulls, just remove null points\n\t\t\tif (series.options.connectNulls) {\n\t\t\t\ti = pointsLength;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (points[i].y === null) {\n\t\t\t\t\t\tpoints.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (points.length) {\n\t\t\t\t\tsegments = [points];\n\t\t\t\t}\n\n\t\t\t// else, split on null points\n\t\t\t} else {\n\t\t\t\teach(points, function (point, i) {\n\t\t\t\t\tif (point.y === null) {\n\t\t\t\t\t\tif (i > lastNull + 1) {\n\t\t\t\t\t\t\tsegments.push(points.slice(lastNull + 1, i));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastNull = i;\n\t\t\t\t\t} else if (i === pointsLength - 1) { // last value\n\t\t\t\t\t\tsegments.push(points.slice(lastNull + 1, i + 1));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// register it\n\t\tseries.segments = segments;\n\t},\n\n\t/**\n\t * Set the series options by merging from the options tree\n\t * @param {Object} itemOptions\n\t */\n\tsetOptions: function (itemOptions) {\n\t\tvar chart = this.chart,\n\t\t\tchartOptions = chart.options,\n\t\t\tplotOptions = chartOptions.plotOptions,\n\t\t\tuserOptions = chart.userOptions || {},\n\t\t\tuserPlotOptions = userOptions.plotOptions || {},\n\t\t\ttypeOptions = plotOptions[this.type],\n\t\t\toptions,\n\t\t\tzones;\n\n\t\tthis.userOptions = itemOptions;\n\n\t\t// General series options take precedence over type options because otherwise, default\n\t\t// type options like column.animation would be overwritten by the general option.\n\t\t// But issues have been raised here (#3881), and the solution may be to distinguish \n\t\t// between default option and userOptions like in the tooltip below.\n\t\toptions = merge(\n\t\t\ttypeOptions,\n\t\t\tplotOptions.series,\n\t\t\titemOptions\n\t\t);\n\n\t\t// The tooltip options are merged between global and series specific options\n\t\tthis.tooltipOptions = merge(\n\t\t\tdefaultOptions.tooltip,\n\t\t\tdefaultOptions.plotOptions[this.type].tooltip,\n\t\t\tuserOptions.tooltip,\n\t\t\tuserPlotOptions.series && userPlotOptions.series.tooltip,\n\t\t\tuserPlotOptions[this.type] && userPlotOptions[this.type].tooltip,\n\t\t\titemOptions.tooltip\n\t\t);\n\n\t\t// Delete marker object if not allowed (#1125)\n\t\tif (typeOptions.marker === null) {\n\t\t\tdelete options.marker;\n\t\t}\n\n\t\t// Handle color zones\n\t\tthis.zoneAxis = options.zoneAxis;\n\t\tzones = this.zones = (options.zones || []).slice();\n\t\tif ((options.negativeColor || options.negativeFillColor) && !options.zones) {\n\t\t\tzones.push({\n\t\t\t\tvalue: options[this.zoneAxis + 'Threshold'] || options.threshold || 0,\n\t\t\t\tcolor: options.negativeColor,\n\t\t\t\tfillColor: options.negativeFillColor\n\t\t\t});\n\t\t}\n\t\tif (zones.length) { // Push one extra zone for the rest\n\t\t\tif (defined(zones[zones.length - 1].value)) {\n\t\t\t\tzones.push({\n\t\t\t\t\tcolor: this.color,\n\t\t\t\t\tfillColor: this.fillColor\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn options;\n\t},\n\n\tgetCyclic: function (prop, value, defaults) {\n\t\tvar i,\n\t\t\tuserOptions = this.userOptions,\n\t\t\tindexName = '_' + prop + 'Index',\n\t\t\tcounterName = prop + 'Counter';\n\n\t\tif (!value) {\n\t\t\tif (defined(userOptions[indexName])) { // after Series.update()\n\t\t\t\ti = userOptions[indexName];\n\t\t\t} else {\n\t\t\t\tuserOptions[indexName] = i = this.chart[counterName] % defaults.length;\n\t\t\t\tthis.chart[counterName] += 1;\n\t\t\t}\n\t\t\tvalue = defaults[i];\n\t\t}\n\t\tthis[prop] = value;\n\t},\n\n\t/**\n\t * Get the series' color\n\t */\n\tgetColor: function () {\n\t\tif (!this.options.colorByPoint) {\n\t\t\tthis.getCyclic('color', this.options.color || defaultPlotOptions[this.type].color, this.chart.options.colors);\n\t\t}\n\t},\n\t/**\n\t * Get the series' symbol\n\t */\n\tgetSymbol: function () {\n\t\tvar seriesMarkerOption = this.options.marker;\n\n\t\tthis.getCyclic('symbol', seriesMarkerOption.symbol, this.chart.options.symbols);\n\n\t\t// don't substract radius in image symbols (#604)\n\t\tif (/^url/.test(this.symbol)) {\n\t\t\tseriesMarkerOption.radius = 0;\n\t\t}\n\t},\n\n\tdrawLegendSymbol: LegendSymbolMixin.drawLineMarker,\n\n\t/**\n\t * Replace the series data with a new set of data\n\t * @param {Object} data\n\t * @param {Object} redraw\n\t */\n\tsetData: function (data, redraw, animation, updatePoints) {\n\t\tvar series = this,\n\t\t\toldData = series.points,\n\t\t\toldDataLength = (oldData && oldData.length) || 0,\n\t\t\tdataLength,\n\t\t\toptions = series.options,\n\t\t\tchart = series.chart,\n\t\t\tfirstPoint = null,\n\t\t\txAxis = series.xAxis,\n\t\t\thasCategories = xAxis && !!xAxis.categories,\n\t\t\ti,\n\t\t\tturboThreshold = options.turboThreshold,\n\t\t\tpt,\n\t\t\txData = this.xData,\n\t\t\tyData = this.yData,\n\t\t\tpointArrayMap = series.pointArrayMap,\n\t\t\tvalueCount = pointArrayMap && pointArrayMap.length;\n\n\t\tdata = data || [];\n\t\tdataLength = data.length;\n\t\tredraw = pick(redraw, true);\n\n\t\t// If the point count is the same as is was, just run Point.update which is\n\t\t// cheaper, allows animation, and keeps references to points.\n\t\tif (updatePoints !== false && dataLength && oldDataLength === dataLength && !series.cropped && !series.hasGroupedData && series.visible) {\n\t\t\teach(data, function (point, i) {\n\t\t\t\tif (oldData[i].update) { // Linked, previously hidden series (#3709)\n\t\t\t\t\toldData[i].update(point, false, null, false);\n\t\t\t\t}\n\t\t\t});\n\n\t\t} else {\n\n\t\t\t// Reset properties\n\t\t\tseries.xIncrement = null;\n\t\t\tseries.pointRange = hasCategories ? 1 : options.pointRange;\n\n\t\t\tseries.colorCounter = 0; // for series with colorByPoint (#1547)\n\t\t\t\n\t\t\t// Update parallel arrays\n\t\t\teach(this.parallelArrays, function (key) {\n\t\t\t\tseries[key + 'Data'].length = 0;\n\t\t\t});\n\n\t\t\t// In turbo mode, only one- or twodimensional arrays of numbers are allowed. The\n\t\t\t// first value is tested, and we assume that all the rest are defined the same\n\t\t\t// way. Although the 'for' loops are similar, they are repeated inside each\n\t\t\t// if-else conditional for max performance.\n\t\t\tif (turboThreshold && dataLength > turboThreshold) {\n\n\t\t\t\t// find the first non-null point\n\t\t\t\ti = 0;\n\t\t\t\twhile (firstPoint === null && i < dataLength) {\n\t\t\t\t\tfirstPoint = data[i];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\n\n\t\t\t\tif (isNumber(firstPoint)) { // assume all points are numbers\n\t\t\t\t\tvar x = pick(options.pointStart, 0),\n\t\t\t\t\t\tpointInterval = pick(options.pointInterval, 1);\n\n\t\t\t\t\tfor (i = 0; i < dataLength; i++) {\n\t\t\t\t\t\txData[i] = x;\n\t\t\t\t\t\tyData[i] = data[i];\n\t\t\t\t\t\tx += pointInterval;\n\t\t\t\t\t}\n\t\t\t\t\tseries.xIncrement = x;\n\t\t\t\t} else if (isArray(firstPoint)) { // assume all points are arrays\n\t\t\t\t\tif (valueCount) { // [x, low, high] or [x, o, h, l, c]\n\t\t\t\t\t\tfor (i = 0; i < dataLength; i++) {\n\t\t\t\t\t\t\tpt = data[i];\n\t\t\t\t\t\t\txData[i] = pt[0];\n\t\t\t\t\t\t\tyData[i] = pt.slice(1, valueCount + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { // [x, y]\n\t\t\t\t\t\tfor (i = 0; i < dataLength; i++) {\n\t\t\t\t\t\t\tpt = data[i];\n\t\t\t\t\t\t\txData[i] = pt[0];\n\t\t\t\t\t\t\tyData[i] = pt[1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\terror(12); // Highcharts expects configs to be numbers or arrays in turbo mode\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (i = 0; i < dataLength; i++) {\n\t\t\t\t\tif (data[i] !== UNDEFINED) { // stray commas in oldIE\n\t\t\t\t\t\tpt = { series: series };\n\t\t\t\t\t\tseries.pointClass.prototype.applyOptions.apply(pt, [data[i]]);\n\t\t\t\t\t\tseries.updateParallelArrays(pt, i);\n\t\t\t\t\t\tif (hasCategories && pt.name) {\n\t\t\t\t\t\t\txAxis.names[pt.x] = pt.name; // #2046\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forgetting to cast strings to numbers is a common caveat when handling CSV or JSON\n\t\t\tif (isString(yData[0])) {\n\t\t\t\terror(14, true);\n\t\t\t}\n\n\t\t\tseries.data = [];\n\t\t\tseries.options.data = data;\n\t\t\t//series.zData = zData;\n\n\t\t\t// destroy old points\n\t\t\ti = oldDataLength;\n\t\t\twhile (i--) {\n\t\t\t\tif (oldData[i] && oldData[i].destroy) {\n\t\t\t\t\toldData[i].destroy();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// reset minRange (#878)\n\t\t\tif (xAxis) {\n\t\t\t\txAxis.minRange = xAxis.userMinRange;\n\t\t\t}\n\n\t\t\t// redraw\n\t\t\tseries.isDirty = series.isDirtyData = chart.isDirtyBox = true;\n\t\t\tanimation = false;\n\t\t}\n\n\t\tif (redraw) {\n\t\t\tchart.redraw(animation);\n\t\t}\n\t},\n\n\t/**\n\t * Process the data by cropping away unused data points if the series is longer\n\t * than the crop threshold. This saves computing time for lage series.\n\t */\n\tprocessData: function (force) {\n\t\tvar series = this,\n\t\t\tprocessedXData = series.xData, // copied during slice operation below\n\t\t\tprocessedYData = series.yData,\n\t\t\tdataLength = processedXData.length,\n\t\t\tcroppedData,\n\t\t\tcropStart = 0,\n\t\t\tcropped,\n\t\t\tdistance,\n\t\t\tclosestPointRange,\n\t\t\txAxis = series.xAxis,\n\t\t\ti, // loop variable\n\t\t\toptions = series.options,\n\t\t\tcropThreshold = options.cropThreshold,\n\t\t\tisCartesian = series.isCartesian,\n\t\t\txExtremes,\n\t\t\tmin,\n\t\t\tmax;\n\n\t\t// If the series data or axes haven't changed, don't go through this. Return false to pass\n\t\t// the message on to override methods like in data grouping.\n\t\tif (isCartesian && !series.isDirty && !xAxis.isDirty && !series.yAxis.isDirty && !force) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (xAxis) {\n\t\t\txExtremes = xAxis.getExtremes(); // corrected for log axis (#3053)\n\t\t\tmin = xExtremes.min;\n\t\t\tmax = xExtremes.max;\n\t\t}\n\n\t\t// optionally filter out points outside the plot area\n\t\tif (isCartesian && series.sorted && (!cropThreshold || dataLength > cropThreshold || series.forceCrop)) {\n\t\t\t\n\t\t\t// it's outside current extremes\n\t\t\tif (processedXData[dataLength - 1] < min || processedXData[0] > max) {\n\t\t\t\tprocessedXData = [];\n\t\t\t\tprocessedYData = [];\n\n\t\t\t// only crop if it's actually spilling out\n\t\t\t} else if (processedXData[0] < min || processedXData[dataLength - 1] > max) {\n\t\t\t\tcroppedData = this.cropData(series.xData, series.yData, min, max);\n\t\t\t\tprocessedXData = croppedData.xData;\n\t\t\t\tprocessedYData = croppedData.yData;\n\t\t\t\tcropStart = croppedData.start;\n\t\t\t\tcropped = true;\n\t\t\t}\n\t\t}\n\n\n\t\t// Find the closest distance between processed points\n\t\tfor (i = processedXData.length - 1; i >= 0; i--) {\n\t\t\tdistance = processedXData[i] - processedXData[i - 1];\n\t\t\t\n\t\t\tif (distance > 0 && (closestPointRange === UNDEFINED || distance < closestPointRange)) {\n\t\t\t\tclosestPointRange = distance;\n\n\t\t\t// Unsorted data is not supported by the line tooltip, as well as data grouping and\n\t\t\t// navigation in Stock charts (#725) and width calculation of columns (#1900)\n\t\t\t} else if (distance < 0 && series.requireSorting) {\n\t\t\t\terror(15);\n\t\t\t}\n\t\t}\n\n\t\t// Record the properties\n\t\tseries.cropped = cropped; // undefined or true\n\t\tseries.cropStart = cropStart;\n\t\tseries.processedXData = processedXData;\n\t\tseries.processedYData = processedYData;\n\n\t\tif (options.pointRange === null) { // null means auto, as for columns, candlesticks and OHLC\n\t\t\tseries.pointRange = closestPointRange || 1;\n\t\t}\n\t\tseries.closestPointRange = closestPointRange;\n\n\t},\n\n\t/**\n\t * Iterate over xData and crop values between min and max. Returns object containing crop start/end\n\t * cropped xData with corresponding part of yData, dataMin and dataMax within the cropped range\n\t */\n\tcropData: function (xData, yData, min, max) {\n\t\tvar dataLength = xData.length,\n\t\t\tcropStart = 0,\n\t\t\tcropEnd = dataLength,\n\t\t\tcropShoulder = pick(this.cropShoulder, 1), // line-type series need one point outside\n\t\t\ti;\n\n\t\t// iterate up to find slice start\n\t\tfor (i = 0; i < dataLength; i++) {\n\t\t\tif (xData[i] >= min) {\n\t\t\t\tcropStart = mathMax(0, i - cropShoulder);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// proceed to find slice end\n\t\tfor (; i < dataLength; i++) {\n\t\t\tif (xData[i] > max) {\n\t\t\t\tcropEnd = i + cropShoulder;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\txData: xData.slice(cropStart, cropEnd),\n\t\t\tyData: yData.slice(cropStart, cropEnd),\n\t\t\tstart: cropStart,\n\t\t\tend: cropEnd\n\t\t};\n\t},\n\n\n\t/**\n\t * Generate the data point after the data has been processed by cropping away\n\t * unused points and optionally grouped in Highcharts Stock.\n\t */\n\tgeneratePoints: function () {\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\tdataOptions = options.data,\n\t\t\tdata = series.data,\n\t\t\tdataLength,\n\t\t\tprocessedXData = series.processedXData,\n\t\t\tprocessedYData = series.processedYData,\n\t\t\tpointClass = series.pointClass,\n\t\t\tprocessedDataLength = processedXData.length,\n\t\t\tcropStart = series.cropStart || 0,\n\t\t\tcursor,\n\t\t\thasGroupedData = series.hasGroupedData,\n\t\t\tpoint,\n\t\t\tpoints = [],\n\t\t\ti;\n\n\t\tif (!data && !hasGroupedData) {\n\t\t\tvar arr = [];\n\t\t\tarr.length = dataOptions.length;\n\t\t\tdata = series.data = arr;\n\t\t}\n\n\t\tfor (i = 0; i < processedDataLength; i++) {\n\t\t\tcursor = cropStart + i;\n\t\t\tif (!hasGroupedData) {\n\t\t\t\tif (data[cursor]) {\n\t\t\t\t\tpoint = data[cursor];\n\t\t\t\t} else if (dataOptions[cursor] !== UNDEFINED) { // #970\n\t\t\t\t\tdata[cursor] = point = (new pointClass()).init(series, dataOptions[cursor], processedXData[i]);\n\t\t\t\t}\n\t\t\t\tpoints[i] = point;\n\t\t\t} else {\n\t\t\t\t// splat the y data in case of ohlc data array\n\t\t\t\tpoints[i] = (new pointClass()).init(series, [processedXData[i]].concat(splat(processedYData[i])));\n\t\t\t}\n\t\t\tpoints[i].index = cursor; // For faster access in Point.update\n\t\t}\n\n\t\t// Hide cropped-away points - this only runs when the number of points is above cropThreshold, or when\n\t\t// swithching view from non-grouped data to grouped data (#637)\n\t\tif (data && (processedDataLength !== (dataLength = data.length) || hasGroupedData)) {\n\t\t\tfor (i = 0; i < dataLength; i++) {\n\t\t\t\tif (i === cropStart && !hasGroupedData) { // when has grouped data, clear all points\n\t\t\t\t\ti += processedDataLength;\n\t\t\t\t}\n\t\t\t\tif (data[i]) {\n\t\t\t\t\tdata[i].destroyElements();\n\t\t\t\t\tdata[i].plotX = UNDEFINED; // #1003\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tseries.data = data;\n\t\tseries.points = points;\n\t},\n\n\t/**\n\t * Calculate Y extremes for visible data\n\t */\n\tgetExtremes: function (yData) {\n\t\tvar xAxis = this.xAxis,\n\t\t\tyAxis = this.yAxis,\n\t\t\txData = this.processedXData,\n\t\t\tyDataLength,\n\t\t\tactiveYData = [],\n\t\t\tactiveCounter = 0,\n\t\t\txExtremes = xAxis.getExtremes(), // #2117, need to compensate for log X axis\n\t\t\txMin = xExtremes.min,\n\t\t\txMax = xExtremes.max,\n\t\t\tvalidValue,\n\t\t\twithinRange,\n\t\t\tx,\n\t\t\ty,\n\t\t\ti,\n\t\t\tj;\n\n\t\tyData = yData || this.stackedYData || this.processedYData;\n\t\tyDataLength = yData.length;\n\n\t\tfor (i = 0; i < yDataLength; i++) {\n\n\t\t\tx = xData[i];\n\t\t\ty = yData[i];\n\n\t\t\t// For points within the visible range, including the first point outside the\n\t\t\t// visible range, consider y extremes\n\t\t\tvalidValue = y !== null && y !== UNDEFINED && (!yAxis.isLog || (y.length || y > 0));\n\t\t\twithinRange = this.getExtremesFromAll || this.options.getExtremesFromAll || this.cropped ||\n\t\t\t\t((xData[i + 1] || x) >= xMin &&\t(xData[i - 1] || x) <= xMax);\n\n\t\t\tif (validValue && withinRange) {\n\n\t\t\t\tj = y.length;\n\t\t\t\tif (j) { // array, like ohlc or range data\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\tif (y[j] !== null) {\n\t\t\t\t\t\t\tactiveYData[activeCounter++] = y[j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tactiveYData[activeCounter++] = y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.dataMin = arrayMin(activeYData);\n\t\tthis.dataMax = arrayMax(activeYData);\n\t},\n\n\t/**\n\t * Translate data points from raw data values to chart specific positioning data\n\t * needed later in drawPoints, drawGraph and drawTracker.\n\t */\n\ttranslate: function () {\n\t\tif (!this.processedXData) { // hidden series\n\t\t\tthis.processData();\n\t\t}\n\t\tthis.generatePoints();\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\tstacking = options.stacking,\n\t\t\txAxis = series.xAxis,\n\t\t\tcategories = xAxis.categories,\n\t\t\tyAxis = series.yAxis,\n\t\t\tpoints = series.points,\n\t\t\tdataLength = points.length,\n\t\t\thasModifyValue = !!series.modifyValue,\n\t\t\ti,\n\t\t\tpointPlacement = options.pointPlacement,\n\t\t\tdynamicallyPlaced = pointPlacement === 'between' || isNumber(pointPlacement),\n\t\t\tthreshold = options.threshold,\n\t\t\tstackThreshold = options.startFromThreshold ? threshold : 0,\n\t\t\tplotX,\n\t\t\tplotY,\n\t\t\tlastPlotX,\n\t\t\tclosestPointRangePx = Number.MAX_VALUE;\n\n\t\t// Translate each point\n\t\tfor (i = 0; i < dataLength; i++) {\n\t\t\tvar point = points[i],\n\t\t\t\txValue = point.x,\n\t\t\t\tyValue = point.y,\n\t\t\t\tyBottom = point.low,\n\t\t\t\tstack = stacking && yAxis.stacks[(series.negStacks && yValue < (stackThreshold ? 0 : threshold) ? '-' : '') + series.stackKey],\n\t\t\t\tpointStack,\n\t\t\t\tstackValues;\n\n\t\t\t// Discard disallowed y values for log axes (#3434)\n\t\t\tif (yAxis.isLog && yValue !== null && yValue <= 0) {\n\t\t\t\tpoint.y = yValue = null;\n\t\t\t\terror(10);\n\t\t\t}\n\n\t\t\t// Get the plotX translation\n\t\t\tpoint.plotX = plotX = mathMin(mathMax(-1e5, xAxis.translate(xValue, 0, 0, 0, 1, pointPlacement, this.type === 'flags')), 1e5); // #3923\n\n\n\t\t\t// Calculate the bottom y value for stacked series\n\t\t\tif (stacking && series.visible && stack && stack[xValue]) {\n\n\t\t\t\tpointStack = stack[xValue];\n\t\t\t\tstackValues = pointStack.points[series.index + ',' + i];\n\t\t\t\tyBottom = stackValues[0];\n\t\t\t\tyValue = stackValues[1];\n\n\t\t\t\tif (yBottom === stackThreshold) {\n\t\t\t\t\tyBottom = pick(threshold, yAxis.min);\n\t\t\t\t}\n\t\t\t\tif (yAxis.isLog && yBottom <= 0) { // #1200, #1232\n\t\t\t\t\tyBottom = null;\n\t\t\t\t}\n\n\t\t\t\tpoint.total = point.stackTotal = pointStack.total;\n\t\t\t\tpoint.percentage = pointStack.total && (point.y / pointStack.total * 100);\n\t\t\t\tpoint.stackY = yValue;\n\n\t\t\t\t// Place the stack label\n\t\t\t\tpointStack.setOffset(series.pointXOffset || 0, series.barW || 0);\n\n\t\t\t}\n\n\t\t\t// Set translated yBottom or remove it\n\t\t\tpoint.yBottom = defined(yBottom) ?\n\t\t\t\tyAxis.translate(yBottom, 0, 1, 0, 1) :\n\t\t\t\tnull;\n\n\t\t\t// general hook, used for Highstock compare mode\n\t\t\tif (hasModifyValue) {\n\t\t\t\tyValue = series.modifyValue(yValue, point);\n\t\t\t}\n\n\t\t\t// Set the the plotY value, reset it for redraws\n\t\t\tpoint.plotY = plotY = (typeof yValue === 'number' && yValue !== Infinity) ?\n\t\t\t\tmathMin(mathMax(-1e5, yAxis.translate(yValue, 0, 1, 0, 1)), 1e5) : // #3201\n\t\t\t\tUNDEFINED;\n\t\t\tpoint.isInside = plotY !== UNDEFINED && plotY >= 0 && plotY <= yAxis.len && // #3519\n\t\t\t\tplotX >= 0 && plotX <= xAxis.len;\n\n\n\t\t\t// Set client related positions for mouse tracking\n\t\t\tpoint.clientX = dynamicallyPlaced ? xAxis.translate(xValue, 0, 0, 0, 1) : plotX; // #1514\n\n\t\t\tpoint.negative = point.y < (threshold || 0);\n\n\t\t\t// some API data\n\t\t\tpoint.category = categories && categories[point.x] !== UNDEFINED ?\n\t\t\t\tcategories[point.x] : point.x;\n\n\t\t\t// Determine auto enabling of markers (#3635)\n\t\t\tif (i) {\n\t\t\t\tclosestPointRangePx = mathMin(closestPointRangePx, mathAbs(plotX - lastPlotX));\n\t\t\t}\n\t\t\tlastPlotX = plotX;\n\n\t\t}\n\n\t\tseries.closestPointRangePx = closestPointRangePx;\n\n\t\t// now that we have the cropped data, build the segments\n\t\tseries.getSegments();\n\t},\n\n\t/**\n\t * Set the clipping for the series. For animated series it is called twice, first to initiate\n\t * animating the clip then the second time without the animation to set the final clip.\n\t */\n\tsetClip: function (animation) {\n\t\tvar chart = this.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\tinverted = chart.inverted,\n\t\t\tseriesClipBox = this.clipBox,\n\t\t\tclipBox = seriesClipBox || chart.clipBox,\n\t\t\tsharedClipKey = this.sharedClipKey || ['_sharedClip', animation && animation.duration, animation && animation.easing, clipBox.height].join(','),\n\t\t\tclipRect = chart[sharedClipKey],\n\t\t\tmarkerClipRect = chart[sharedClipKey + 'm'];\n\n\t\t// If a clipping rectangle with the same properties is currently present in the chart, use that.\n\t\tif (!clipRect) {\n\n\t\t\t// When animation is set, prepare the initial positions\n\t\t\tif (animation) { \n\t\t\t\tclipBox.width = 0;\n\n\t\t\t\tchart[sharedClipKey + 'm'] = markerClipRect = renderer.clipRect(\n\t\t\t\t\t-99, // include the width of the first marker\n\t\t\t\t\tinverted ? -chart.plotLeft : -chart.plotTop,\n\t\t\t\t\t99,\n\t\t\t\t\tinverted ? chart.chartWidth : chart.chartHeight\n\t\t\t\t);\n\t\t\t}\n\t\t\tchart[sharedClipKey] = clipRect = renderer.clipRect(clipBox);\n\t\t\t\n\t\t}\n\t\tif (animation) {\n\t\t\tclipRect.count += 1;\n\t\t}\n\n\t\tif (this.options.clip !== false) {\n\t\t\tthis.group.clip(animation || seriesClipBox ? clipRect : chart.clipRect);\n\t\t\tthis.markerGroup.clip(markerClipRect);\n\t\t\tthis.sharedClipKey = sharedClipKey;\n\t\t}\n\n\t\t// Remove the shared clipping rectangle when all series are shown\n\t\tif (!animation) {\n\t\t\tclipRect.count -= 1;\n\t\t\tif (clipRect.count <= 0 && sharedClipKey && chart[sharedClipKey]) {\n\t\t\t\tif (!seriesClipBox) {\n\t\t\t\t\tchart[sharedClipKey] = chart[sharedClipKey].destroy();\n\t\t\t\t}\n\t\t\t\tif (chart[sharedClipKey + 'm']) {\n\t\t\t\t\tchart[sharedClipKey + 'm'] = chart[sharedClipKey + 'm'].destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Animate in the series\n\t */\n\tanimate: function (init) {\n\t\tvar series = this,\n\t\t\tchart = series.chart,\n\t\t\tclipRect,\n\t\t\tanimation = series.options.animation,\n\t\t\tsharedClipKey;\n\n\t\t// Animation option is set to true\n\t\tif (animation && !isObject(animation)) {\n\t\t\tanimation = defaultPlotOptions[series.type].animation;\n\t\t}\n\n\t\t// Initialize the animation. Set up the clipping rectangle.\n\t\tif (init) {\n\n\t\t\tseries.setClip(animation);\n\n\t\t// Run the animation\n\t\t} else {\n\t\t\tsharedClipKey = this.sharedClipKey;\n\t\t\tclipRect = chart[sharedClipKey];\n\t\t\tif (clipRect) {\n\t\t\t\tclipRect.animate({\n\t\t\t\t\twidth: chart.plotSizeX\n\t\t\t\t}, animation);\n\t\t\t}\n\t\t\tif (chart[sharedClipKey + 'm']) {\n\t\t\t\tchart[sharedClipKey + 'm'].animate({\n\t\t\t\t\twidth: chart.plotSizeX + 99\n\t\t\t\t}, animation);\n\t\t\t}\n\n\t\t\t// Delete this function to allow it only once\n\t\t\tseries.animate = null;\n \n\t\t}\n\t},\n\n\t/**\n\t * This runs after animation to land on the final plot clipping\n\t */\n\tafterAnimate: function () {\n\t\tthis.setClip();\n\t\tfireEvent(this, 'afterAnimate');\n\t},\n\n\t/**\n\t * Draw the markers\n\t */\n\tdrawPoints: function () {\n\t\tvar series = this,\n\t\t\tpointAttr,\n\t\t\tpoints = series.points,\n\t\t\tchart = series.chart,\n\t\t\tplotX,\n\t\t\tplotY,\n\t\t\ti,\n\t\t\tpoint,\n\t\t\tradius,\n\t\t\tsymbol,\n\t\t\tisImage,\n\t\t\tgraphic,\n\t\t\toptions = series.options,\n\t\t\tseriesMarkerOptions = options.marker,\n\t\t\tseriesPointAttr = series.pointAttr[''],\n\t\t\tpointMarkerOptions,\n\t\t\thasPointMarker,\n\t\t\tenabled,\n\t\t\tisInside,\n\t\t\tmarkerGroup = series.markerGroup,\n\t\t\txAxis = series.xAxis,\n\t\t\tgloballyEnabled = pick(\n\t\t\t\tseriesMarkerOptions.enabled, \n\t\t\t\txAxis.isRadial,\n\t\t\t\tseries.closestPointRangePx > 2 * seriesMarkerOptions.radius\n\t\t\t);\n\n\t\tif (seriesMarkerOptions.enabled !== false || series._hasPointMarkers) {\n\n\t\t\ti = points.length;\n\t\t\twhile (i--) {\n\t\t\t\tpoint = points[i];\n\t\t\t\tplotX = mathFloor(point.plotX); // #1843\n\t\t\t\tplotY = point.plotY;\n\t\t\t\tgraphic = point.graphic;\n\t\t\t\tpointMarkerOptions = point.marker || {};\n\t\t\t\thasPointMarker = !!point.marker;\n\t\t\t\tenabled = (globallyEnabled && pointMarkerOptions.enabled === UNDEFINED) || pointMarkerOptions.enabled;\n\t\t\t\tisInside = point.isInside;\n\n\t\t\t\t// only draw the point if y is defined\n\t\t\t\tif (enabled && plotY !== UNDEFINED && !isNaN(plotY) && point.y !== null) {\n\n\t\t\t\t\t// shortcuts\n\t\t\t\t\tpointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || seriesPointAttr;\n\t\t\t\t\tradius = pointAttr.r;\n\t\t\t\t\tsymbol = pick(pointMarkerOptions.symbol, series.symbol);\n\t\t\t\t\tisImage = symbol.indexOf('url') === 0;\n\n\t\t\t\t\tif (graphic) { // update\n\t\t\t\t\t\tgraphic[isInside ? 'show' : 'hide'](true) // Since the marker group isn't clipped, each individual marker must be toggled\n\t\t\t\t\t\t\t.animate(extend({\n\t\t\t\t\t\t\t\tx: plotX - radius,\n\t\t\t\t\t\t\t\ty: plotY - radius\n\t\t\t\t\t\t\t}, graphic.symbolName ? { // don't apply to image symbols #507\n\t\t\t\t\t\t\t\twidth: 2 * radius,\n\t\t\t\t\t\t\t\theight: 2 * radius\n\t\t\t\t\t\t\t} : {}));\n\t\t\t\t\t} else if (isInside && (radius > 0 || isImage)) {\n\t\t\t\t\t\tpoint.graphic = graphic = chart.renderer.symbol(\n\t\t\t\t\t\t\tsymbol,\n\t\t\t\t\t\t\tplotX - radius,\n\t\t\t\t\t\t\tplotY - radius,\n\t\t\t\t\t\t\t2 * radius,\n\t\t\t\t\t\t\t2 * radius,\n\t\t\t\t\t\t\thasPointMarker ? pointMarkerOptions : seriesMarkerOptions\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.attr(pointAttr)\n\t\t\t\t\t\t.add(markerGroup);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (graphic) {\n\t\t\t\t\tpoint.graphic = graphic.destroy(); // #1269\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t},\n\n\t/**\n\t * Convert state properties from API naming conventions to SVG attributes\n\t *\n\t * @param {Object} options API options object\n\t * @param {Object} base1 SVG attribute object to inherit from\n\t * @param {Object} base2 Second level SVG attribute object to inherit from\n\t */\n\tconvertAttribs: function (options, base1, base2, base3) {\n\t\tvar conversion = this.pointAttrToOptions,\n\t\t\tattr,\n\t\t\toption,\n\t\t\tobj = {};\n\n\t\toptions = options || {};\n\t\tbase1 = base1 || {};\n\t\tbase2 = base2 || {};\n\t\tbase3 = base3 || {};\n\n\t\tfor (attr in conversion) {\n\t\t\toption = conversion[attr];\n\t\t\tobj[attr] = pick(options[option], base1[attr], base2[attr], base3[attr]);\n\t\t}\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Get the state attributes. Each series type has its own set of attributes\n\t * that are allowed to change on a point's state change. Series wide attributes are stored for\n\t * all series, and additionally point specific attributes are stored for all\n\t * points with individual marker options. If such options are not defined for the point,\n\t * a reference to the series wide attributes is stored in point.pointAttr.\n\t */\n\tgetAttribs: function () {\n\t\tvar series = this,\n\t\t\tseriesOptions = series.options,\n\t\t\tnormalOptions = defaultPlotOptions[series.type].marker ? seriesOptions.marker : seriesOptions,\n\t\t\tstateOptions = normalOptions.states,\n\t\t\tstateOptionsHover = stateOptions[HOVER_STATE],\n\t\t\tpointStateOptionsHover,\n\t\t\tseriesColor = series.color,\n\t\t\tseriesNegativeColor = series.options.negativeColor,\n\t\t\tnormalDefaults = {\n\t\t\t\tstroke: seriesColor,\n\t\t\t\tfill: seriesColor\n\t\t\t},\n\t\t\tpoints = series.points || [], // #927\n\t\t\ti,\n\t\t\tpoint,\n\t\t\tseriesPointAttr = [],\n\t\t\tpointAttr,\n\t\t\tpointAttrToOptions = series.pointAttrToOptions,\n\t\t\thasPointSpecificOptions = series.hasPointSpecificOptions,\n\t\t\tdefaultLineColor = normalOptions.lineColor,\n\t\t\tdefaultFillColor = normalOptions.fillColor,\n\t\t\tturboThreshold = seriesOptions.turboThreshold,\n\t\t\tzones = series.zones,\n\t\t\tzoneAxis = series.zoneAxis || 'y',\n\t\t\tattr,\n\t\t\tkey;\n\n\t\t// series type specific modifications\n\t\tif (seriesOptions.marker) { // line, spline, area, areaspline, scatter\n\n\t\t\t// if no hover radius is given, default to normal radius + 2\n\t\t\tstateOptionsHover.radius = stateOptionsHover.radius || normalOptions.radius + stateOptionsHover.radiusPlus;\n\t\t\tstateOptionsHover.lineWidth = stateOptionsHover.lineWidth || normalOptions.lineWidth + stateOptionsHover.lineWidthPlus;\n\n\t\t} else { // column, bar, pie\n\n\t\t\t// if no hover color is given, brighten the normal color\n\t\t\tstateOptionsHover.color = stateOptionsHover.color ||\n\t\t\t\tColor(stateOptionsHover.color || seriesColor)\n\t\t\t\t\t.brighten(stateOptionsHover.brightness).get();\n\n\t\t\t// if no hover negativeColor is given, brighten the normal negativeColor\n\t\t\tstateOptionsHover.negativeColor = stateOptionsHover.negativeColor ||\n\t\t\t\tColor(stateOptionsHover.negativeColor || seriesNegativeColor)\n\t\t\t\t\t.brighten(stateOptionsHover.brightness).get();\n\t\t}\n\n\t\t// general point attributes for the series normal state\n\t\tseriesPointAttr[NORMAL_STATE] = series.convertAttribs(normalOptions, normalDefaults);\n\n\t\t// HOVER_STATE and SELECT_STATE states inherit from normal state except the default radius\n\t\teach([HOVER_STATE, SELECT_STATE], function (state) {\n\t\t\tseriesPointAttr[state] =\n\t\t\t\t\tseries.convertAttribs(stateOptions[state], seriesPointAttr[NORMAL_STATE]);\n\t\t});\n\n\t\t// set it\n\t\tseries.pointAttr = seriesPointAttr;\n\n\n\t\t// Generate the point-specific attribute collections if specific point\n\t\t// options are given. If not, create a referance to the series wide point\n\t\t// attributes\n\t\ti = points.length;\n\t\tif (!turboThreshold || i < turboThreshold || hasPointSpecificOptions) {\n\t\t\twhile (i--) {\n\t\t\t\tpoint = points[i];\n\t\t\t\tnormalOptions = (point.options && point.options.marker) || point.options;\n\t\t\t\tif (normalOptions && normalOptions.enabled === false) {\n\t\t\t\t\tnormalOptions.radius = 0;\n\t\t\t\t}\n\n\t\t\t\tif (zones.length) {\n\t\t\t\t\tvar j = 0,\n\t\t\t\t\t\tthreshold = zones[j];\n\t\t\t\t\twhile (point[zoneAxis] >= threshold.value) {\t\t\t\t\n\t\t\t\t\t\tthreshold = zones[++j];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpoint.color = point.fillColor = threshold.color;\n\t\t\t\t}\n\n\t\t\t\thasPointSpecificOptions = seriesOptions.colorByPoint || point.color; // #868\n\n\t\t\t\t// check if the point has specific visual options\n\t\t\t\tif (point.options) {\n\t\t\t\t\tfor (key in pointAttrToOptions) {\n\t\t\t\t\t\tif (defined(normalOptions[pointAttrToOptions[key]])) {\n\t\t\t\t\t\t\thasPointSpecificOptions = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// a specific marker config object is defined for the individual point:\n\t\t\t\t// create it's own attribute collection\n\t\t\t\tif (hasPointSpecificOptions) {\n\t\t\t\t\tnormalOptions = normalOptions || {};\n\t\t\t\t\tpointAttr = [];\n\t\t\t\t\tstateOptions = normalOptions.states || {}; // reassign for individual point\n\t\t\t\t\tpointStateOptionsHover = stateOptions[HOVER_STATE] = stateOptions[HOVER_STATE] || {};\n\n\t\t\t\t\t// Handle colors for column and pies\n\t\t\t\t\tif (!seriesOptions.marker) { // column, bar, point\n\t\t\t\t\t\t// If no hover color is given, brighten the normal color. #1619, #2579\n\t\t\t\t\t\tpointStateOptionsHover.color = pointStateOptionsHover.color || (!point.options.color && stateOptionsHover[(point.negative && seriesNegativeColor ? 'negativeColor' : 'color')]) ||\n\t\t\t\t\t\t\tColor(point.color)\n\t\t\t\t\t\t\t\t.brighten(pointStateOptionsHover.brightness || stateOptionsHover.brightness)\n\t\t\t\t\t\t\t\t.get();\n\t\t\t\t\t}\n\n\t\t\t\t\t// normal point state inherits series wide normal state\n\t\t\t\t\tattr = { color: point.color }; // #868\n\t\t\t\t\tif (!defaultFillColor) { // Individual point color or negative color markers (#2219)\n\t\t\t\t\t\tattr.fillColor = point.color;\n\t\t\t\t\t}\n\t\t\t\t\tif (!defaultLineColor) {\n\t\t\t\t\t\tattr.lineColor = point.color; // Bubbles take point color, line markers use white\n\t\t\t\t\t}\n\t\t\t\t\t// Color is explicitly set to null or undefined (#1288, #4068)\n\t\t\t\t\tif (normalOptions.hasOwnProperty('color') && !normalOptions.color) {\n\t\t\t\t\t\tdelete normalOptions.color;\n\t\t\t\t\t}\n\t\t\t\t\tpointAttr[NORMAL_STATE] = series.convertAttribs(extend(attr, normalOptions), seriesPointAttr[NORMAL_STATE]);\n\n\t\t\t\t\t// inherit from point normal and series hover\n\t\t\t\t\tpointAttr[HOVER_STATE] = series.convertAttribs(\n\t\t\t\t\t\tstateOptions[HOVER_STATE],\n\t\t\t\t\t\tseriesPointAttr[HOVER_STATE],\n\t\t\t\t\t\tpointAttr[NORMAL_STATE]\n\t\t\t\t\t);\n\n\t\t\t\t\t// inherit from point normal and series hover\n\t\t\t\t\tpointAttr[SELECT_STATE] = series.convertAttribs(\n\t\t\t\t\t\tstateOptions[SELECT_STATE],\n\t\t\t\t\t\tseriesPointAttr[SELECT_STATE],\n\t\t\t\t\t\tpointAttr[NORMAL_STATE]\n\t\t\t\t\t);\n\n\n\t\t\t\t// no marker config object is created: copy a reference to the series-wide\n\t\t\t\t// attribute collection\n\t\t\t\t} else {\n\t\t\t\t\tpointAttr = seriesPointAttr;\n\t\t\t\t}\n\n\t\t\t\tpoint.pointAttr = pointAttr;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Clear DOM objects and free up memory\n\t */\n\tdestroy: function () {\n\t\tvar series = this,\n\t\t\tchart = series.chart,\n\t\t\tissue134 = /AppleWebKit\\/533/.test(userAgent),\n\t\t\tdestroy,\n\t\t\ti,\n\t\t\tdata = series.data || [],\n\t\t\tpoint,\n\t\t\tprop,\n\t\t\taxis;\n\n\t\t// add event hook\n\t\tfireEvent(series, 'destroy');\n\n\t\t// remove all events\n\t\tremoveEvent(series);\n\n\t\t// erase from axes\n\t\teach(series.axisTypes || [], function (AXIS) {\n\t\t\taxis = series[AXIS];\n\t\t\tif (axis) {\n\t\t\t\terase(axis.series, series);\n\t\t\t\taxis.isDirty = axis.forceRedraw = true;\n\t\t\t}\n\t\t});\n\n\t\t// remove legend items\n\t\tif (series.legendItem) {\n\t\t\tseries.chart.legend.destroyItem(series);\n\t\t}\n\n\t\t// destroy all points with their elements\n\t\ti = data.length;\n\t\twhile (i--) {\n\t\t\tpoint = data[i];\n\t\t\tif (point && point.destroy) {\n\t\t\t\tpoint.destroy();\n\t\t\t}\n\t\t}\n\t\tseries.points = null;\n\n\t\t// Clear the animation timeout if we are destroying the series during initial animation\n\t\tclearTimeout(series.animationTimeout);\n\n\t\t// Destroy all SVGElements associated to the series\n\t\tfor (prop in series) {\n\t\t\tif (series[prop] instanceof SVGElement && !series[prop].survive) { // Survive provides a hook for not destroying\n\n\t\t\t\t// issue 134 workaround\n\t\t\t\tdestroy = issue134 && prop === 'group' ?\n\t\t\t\t\t'hide' :\n\t\t\t\t\t'destroy';\n\n\t\t\t\tseries[prop][destroy]();\n\t\t\t}\n\t\t}\n\n\t\t// remove from hoverSeries\n\t\tif (chart.hoverSeries === series) {\n\t\t\tchart.hoverSeries = null;\n\t\t}\n\t\terase(chart.series, series);\n\n\t\t// clear all members\n\t\tfor (prop in series) {\n\t\t\tdelete series[prop];\n\t\t}\n\t},\n\n\t/**\n\t * Return the graph path of a segment\n\t */\n\tgetSegmentPath: function (segment) {\n\t\tvar series = this,\n\t\t\tsegmentPath = [],\n\t\t\tstep = series.options.step;\n\n\t\t// build the segment line\n\t\teach(segment, function (point, i) {\n\n\t\t\tvar plotX = point.plotX,\n\t\t\t\tplotY = point.plotY,\n\t\t\t\tlastPoint;\n\n\t\t\tif (series.getPointSpline) { // generate the spline as defined in the SplineSeries object\n\t\t\t\tsegmentPath.push.apply(segmentPath, series.getPointSpline(segment, point, i));\n\n\t\t\t} else {\n\n\t\t\t\t// moveTo or lineTo\n\t\t\t\tsegmentPath.push(i ? L : M);\n\n\t\t\t\t// step line?\n\t\t\t\tif (step && i) {\n\t\t\t\t\tlastPoint = segment[i - 1];\n\t\t\t\t\tif (step === 'right') {\n\t\t\t\t\t\tsegmentPath.push(\n\t\t\t\t\t\t\tlastPoint.plotX,\n\t\t\t\t\t\t\tplotY\n\t\t\t\t\t\t);\n\n\t\t\t\t\t} else if (step === 'center') {\n\t\t\t\t\t\tsegmentPath.push(\n\t\t\t\t\t\t\t(lastPoint.plotX + plotX) / 2,\n\t\t\t\t\t\t\tlastPoint.plotY,\n\t\t\t\t\t\t\t(lastPoint.plotX + plotX) / 2,\n\t\t\t\t\t\t\tplotY\n\t\t\t\t\t\t);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsegmentPath.push(\n\t\t\t\t\t\t\tplotX,\n\t\t\t\t\t\t\tlastPoint.plotY\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// normal line to next point\n\t\t\t\tsegmentPath.push(\n\t\t\t\t\tpoint.plotX,\n\t\t\t\t\tpoint.plotY\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\treturn segmentPath;\n\t},\n\n\t/**\n\t * Get the graph path\n\t */\n\tgetGraphPath: function () {\n\t\tvar series = this,\n\t\t\tgraphPath = [],\n\t\t\tsegmentPath,\n\t\t\tsinglePoints = []; // used in drawTracker\n\n\t\t// Divide into segments and build graph and area paths\n\t\teach(series.segments, function (segment) {\n\n\t\t\tsegmentPath = series.getSegmentPath(segment);\n\n\t\t\t// add the segment to the graph, or a single point for tracking\n\t\t\tif (segment.length > 1) {\n\t\t\t\tgraphPath = graphPath.concat(segmentPath);\n\t\t\t} else {\n\t\t\t\tsinglePoints.push(segment[0]);\n\t\t\t}\n\t\t});\n\n\t\t// Record it for use in drawGraph and drawTracker, and return graphPath\n\t\tseries.singlePoints = singlePoints;\n\t\tseries.graphPath = graphPath;\n\n\t\treturn graphPath;\n\n\t},\n\n\t/**\n\t * Draw the actual graph\n\t */\n\tdrawGraph: function () {\n\t\tvar series = this,\n\t\t\toptions = this.options,\n\t\t\tprops = [['graph', options.lineColor || this.color, options.dashStyle]],\n\t\t\tlineWidth = options.lineWidth,\n\t\t\troundCap = options.linecap !== 'square',\n\t\t\tgraphPath = this.getGraphPath(),\n\t\t\tfillColor = (this.fillGraph && this.color) || NONE, // polygon series use filled graph\n\t\t\tzones = this.zones;\n\n\t\teach(zones, function (threshold, i) {\n\t\t\tprops.push(['zoneGraph' + i, threshold.color || series.color, threshold.dashStyle || options.dashStyle]);\n\t\t});\n\t\t\n\t\t// Draw the graph\n\t\teach(props, function (prop, i) {\n\t\t\tvar graphKey = prop[0],\n\t\t\t\tgraph = series[graphKey],\n\t\t\t\tattribs;\n\n\t\t\tif (graph) {\n\t\t\t\tstop(graph); // cancel running animations, #459\n\t\t\t\tgraph.animate({ d: graphPath });\n\n\t\t\t} else if ((lineWidth || fillColor) && graphPath.length) { // #1487\n\t\t\t\tattribs = {\n\t\t\t\t\tstroke: prop[1],\n\t\t\t\t\t'stroke-width': lineWidth,\n\t\t\t\t\tfill: fillColor,\n\t\t\t\t\tzIndex: 1 // #1069\n\t\t\t\t};\n\t\t\t\tif (prop[2]) {\n\t\t\t\t\tattribs.dashstyle = prop[2];\n\t\t\t\t} else if (roundCap) {\n\t\t\t\t\tattribs['stroke-linecap'] = attribs['stroke-linejoin'] = 'round';\n\t\t\t\t}\n\n\t\t\t\tseries[graphKey] = series.chart.renderer.path(graphPath)\n\t\t\t\t\t.attr(attribs)\n\t\t\t\t\t.add(series.group)\n\t\t\t\t\t.shadow((i < 2) && options.shadow); // add shadow to normal series (0) or to first zone (1) #3932\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Clip the graphs into the positive and negative coloured graphs\n\t */\n\tapplyZones: function () {\n\t\tvar series = this,\n\t\t\tchart = this.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\tzones = this.zones,\n\t\t\ttranslatedFrom,\n\t\t\ttranslatedTo,\n\t\t\tclips = this.clips || [],\n\t\t\tclipAttr,\n\t\t\tgraph = this.graph,\n\t\t\tarea = this.area,\n\t\t\tchartSizeMax = mathMax(chart.chartWidth, chart.chartHeight),\n\t\t\tzoneAxis = this.zoneAxis || 'y',\n\t\t\taxis = this[zoneAxis + 'Axis'],\n\t\t\textremes,\n\t\t\treversed = axis.reversed,\n\t\t\tinverted = chart.inverted,\n\t\t\thoriz = axis.horiz,\n\t\t\tpxRange,\n\t\t\tpxPosMin,\n\t\t\tpxPosMax,\n\t\t\tignoreZones = false;\n\n\t\tif (zones.length && (graph || area)) {\n\t\t\t// The use of the Color Threshold assumes there are no gaps\n\t\t\t// so it is safe to hide the original graph and area\n\t\t\tif (graph) {\n\t\t\t\tgraph.hide();\n\t\t\t}\n\t\t\tif (area) { \n\t\t\t\tarea.hide(); \n\t\t\t}\n\n\t\t\t// Create the clips\n\t\t\textremes = axis.getExtremes();\n\t\t\teach(zones, function (threshold, i) {\n\n\t\t\t\ttranslatedFrom = reversed ? \n\t\t\t\t\t(horiz ? chart.plotWidth : 0) : \n\t\t\t\t\t(horiz ? 0 : axis.toPixels(extremes.min));\n\t\t\t\ttranslatedFrom = mathMin(mathMax(pick(translatedTo, translatedFrom), 0), chartSizeMax);\n\t\t\t\ttranslatedTo = mathMin(mathMax(mathRound(axis.toPixels(pick(threshold.value, extremes.max), true)), 0), chartSizeMax);\n\t\t\t\t\n\t\t\t\tif (ignoreZones) {\n\t\t\t\t\ttranslatedFrom = translatedTo = axis.toPixels(extremes.max);\n\t\t\t\t}\n\n\t\t\t\tpxRange = Math.abs(translatedFrom - translatedTo);\n\t\t\t\tpxPosMin = mathMin(translatedFrom, translatedTo);\n\t\t\t\tpxPosMax = mathMax(translatedFrom, translatedTo);\n\t\t\t\tif (axis.isXAxis) {\n\t\t\t\t\tclipAttr = {\n\t\t\t\t\t\tx: inverted ? pxPosMax : pxPosMin,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\twidth: pxRange, \n\t\t\t\t\t\theight: chartSizeMax\n\t\t\t\t\t};\n\t\t\t\t\tif (!horiz) {\n\t\t\t\t\t\tclipAttr.x = chart.plotHeight - clipAttr.x;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclipAttr = {\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: inverted ? pxPosMax : pxPosMin,\n\t\t\t\t\t\twidth: chartSizeMax, \n\t\t\t\t\t\theight: pxRange\n\t\t\t\t\t};\t\t\t\t\t\n\t\t\t\t\tif (horiz) {\n\t\t\t\t\t\tclipAttr.y = chart.plotWidth - clipAttr.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/// VML SUPPPORT\n\t\t\t\tif (chart.inverted && renderer.isVML) {\n\t\t\t\t\tif (axis.isXAxis) {\t\t\t\n\t\t\t\t\t\tclipAttr = {\n\t\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\t\ty: reversed ? pxPosMin : pxPosMax,\n\t\t\t\t\t\t\theight: clipAttr.width,\n\t\t\t\t\t\t\twidth: chart.chartWidth\n\t\t\t\t\t\t};\t\t\n\t\t\t\t\t} else {\t\t\t\t\n\t\t\t\t\t\tclipAttr = {\n\t\t\t\t\t\t\tx: clipAttr.y - chart.plotLeft - chart.spacingBox.x,\n\t\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\t\twidth: clipAttr.height,\n\t\t\t\t\t\t\theight: chart.chartHeight\n\t\t\t\t\t\t};\t\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t}\n\t\t\t\t/// END OF VML SUPPORT\n\n\t\t\t\tif (clips[i]) {\n\t\t\t\t\tclips[i].animate(clipAttr);\n\t\t\t\t} else {\n\t\t\t\t\tclips[i] = renderer.clipRect(clipAttr);\n\n\t\t\t\t\tif (graph) {\n\t\t\t\t\t\tseries['zoneGraph' + i].clip(clips[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (area) {\n\t\t\t\t\t\tseries['zoneArea' + i].clip(clips[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// if this zone extends out of the axis, ignore the others\n\t\t\t\tignoreZones = threshold.value > extremes.max;\n\t\t\t});\n\t\t\tthis.clips = clips;\n\t\t}\n\t},\n\n\t/**\n\t * Initialize and perform group inversion on series.group and series.markerGroup\n\t */\n\tinvertGroups: function () {\n\t\tvar series = this,\n\t\t\tchart = series.chart;\n\n\t\t// Pie, go away (#1736)\n\t\tif (!series.xAxis) {\n\t\t\treturn;\n\t\t}\n\n\t\t// A fixed size is needed for inversion to work\n\t\tfunction setInvert() {\n\t\t\tvar size = {\n\t\t\t\twidth: series.yAxis.len,\n\t\t\t\theight: series.xAxis.len\n\t\t\t};\n\n\t\t\teach(['group', 'markerGroup'], function (groupName) {\n\t\t\t\tif (series[groupName]) {\n\t\t\t\t\tseries[groupName].attr(size).invert();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\taddEvent(chart, 'resize', setInvert); // do it on resize\n\t\taddEvent(series, 'destroy', function () {\n\t\t\tremoveEvent(chart, 'resize', setInvert);\n\t\t});\n\n\t\t// Do it now\n\t\tsetInvert(); // do it now\n\n\t\t// On subsequent render and redraw, just do setInvert without setting up events again\n\t\tseries.invertGroups = setInvert;\n\t},\n\n\t/**\n\t * General abstraction for creating plot groups like series.group, series.dataLabelsGroup and\n\t * series.markerGroup. On subsequent calls, the group will only be adjusted to the updated plot size.\n\t */\n\tplotGroup: function (prop, name, visibility, zIndex, parent) {\n\t\tvar group = this[prop],\n\t\t\tisNew = !group;\n\n\t\t// Generate it on first call\n\t\tif (isNew) {\n\t\t\tthis[prop] = group = this.chart.renderer.g(name)\n\t\t\t\t.attr({\n\t\t\t\t\tvisibility: visibility,\n\t\t\t\t\tzIndex: zIndex || 0.1 // IE8 needs this\n\t\t\t\t})\n\t\t\t\t.add(parent);\n\t\t}\n\t\t// Place it on first and subsequent (redraw) calls\n\t\tgroup[isNew ? 'attr' : 'animate'](this.getPlotBox());\n\t\treturn group;\n\t},\n\n\t/**\n\t * Get the translation and scale for the plot area of this series\n\t */\n\tgetPlotBox: function () {\n\t\tvar chart = this.chart,\n\t\t\txAxis = this.xAxis,\n\t\t\tyAxis = this.yAxis;\n\n\t\t// Swap axes for inverted (#2339)\n\t\tif (chart.inverted) {\n\t\t\txAxis = yAxis;\n\t\t\tyAxis = this.xAxis;\n\t\t}\n\t\treturn {\n\t\t\ttranslateX: xAxis ? xAxis.left : chart.plotLeft,\n\t\t\ttranslateY: yAxis ? yAxis.top : chart.plotTop,\n\t\t\tscaleX: 1, // #1623\n\t\t\tscaleY: 1\n\t\t};\n\t},\n\n\t/**\n\t * Render the graph and markers\n\t */\n\trender: function () {\n\t\tvar series = this,\n\t\t\tchart = series.chart,\n\t\t\tgroup,\n\t\t\toptions = series.options,\n\t\t\tanimation = options.animation,\n\t\t\t// Animation doesn't work in IE8 quirks when the group div is hidden,\n\t\t\t// and looks bad in other oldIE\n\t\t\tanimDuration = (animation && !!series.animate && chart.renderer.isSVG && pick(animation.duration, 500)) || 0,\n\t\t\tvisibility = series.visible ? VISIBLE : HIDDEN,\n\t\t\tzIndex = options.zIndex,\n\t\t\thasRendered = series.hasRendered,\n\t\t\tchartSeriesGroup = chart.seriesGroup;\n\n\t\t// the group\n\t\tgroup = series.plotGroup(\n\t\t\t'group',\n\t\t\t'series',\n\t\t\tvisibility,\n\t\t\tzIndex,\n\t\t\tchartSeriesGroup\n\t\t);\n\n\t\tseries.markerGroup = series.plotGroup(\n\t\t\t'markerGroup',\n\t\t\t'markers',\n\t\t\tvisibility,\n\t\t\tzIndex,\n\t\t\tchartSeriesGroup\n\t\t);\n\n\t\t// initiate the animation\n\t\tif (animDuration) {\n\t\t\tseries.animate(true);\n\t\t}\n\n\t\t// cache attributes for shapes\n\t\tseries.getAttribs();\n\n\t\t// SVGRenderer needs to know this before drawing elements (#1089, #1795)\n\t\tgroup.inverted = series.isCartesian ? chart.inverted : false;\n\n\t\t// draw the graph if any\n\t\tif (series.drawGraph) {\n\t\t\tseries.drawGraph();\n\t\t\tseries.applyZones();\n\t\t}\n\n\t\teach(series.points, function (point) {\n\t\t\tif (point.redraw) {\n\t\t\t\tpoint.redraw();\n\t\t\t}\n\t\t});\n\n\t\t// draw the data labels (inn pies they go before the points)\n\t\tif (series.drawDataLabels) {\n\t\t\tseries.drawDataLabels();\n\t\t}\n\n\t\t// draw the points\n\t\tif (series.visible) {\n\t\t\tseries.drawPoints();\n\t\t}\n\n\n\t\t// draw the mouse tracking area\n\t\tif (series.drawTracker && series.options.enableMouseTracking !== false) {\n\t\t\tseries.drawTracker();\n\t\t}\n\n\t\t// Handle inverted series and tracker groups\n\t\tif (chart.inverted) {\n\t\t\tseries.invertGroups();\n\t\t}\n\n\t\t// Initial clipping, must be defined after inverting groups for VML. Applies to columns etc. (#3839).\n\t\tif (options.clip !== false && !series.sharedClipKey && !hasRendered) {\n\t\t\tgroup.clip(chart.clipRect);\n\t\t}\n\n\t\t// Run the animation\n\t\tif (animDuration) {\n\t\t\tseries.animate();\n\t\t} \n\n\t\t// Call the afterAnimate function on animation complete (but don't overwrite the animation.complete option\n\t\t// which should be available to the user).\n\t\tif (!hasRendered) {\n\t\t\tif (animDuration) {\n\t\t\t\tseries.animationTimeout = setTimeout(function () {\n\t\t\t\t\tseries.afterAnimate();\n\t\t\t\t}, animDuration);\n\t\t\t} else {\n\t\t\t\tseries.afterAnimate();\n\t\t\t}\n\t\t}\n\n\t\tseries.isDirty = series.isDirtyData = false; // means data is in accordance with what you see\n\t\t// (See #322) series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see\n\t\tseries.hasRendered = true;\n\t},\n\n\t/**\n\t * Redraw the series after an update in the axes.\n\t */\n\tredraw: function () {\n\t\tvar series = this,\n\t\t\tchart = series.chart,\n\t\t\twasDirtyData = series.isDirtyData, // cache it here as it is set to false in render, but used after\n\t\t\twasDirty = series.isDirty,\n\t\t\tgroup = series.group,\n\t\t\txAxis = series.xAxis,\n\t\t\tyAxis = series.yAxis;\n\n\t\t// reposition on resize\n\t\tif (group) {\n\t\t\tif (chart.inverted) {\n\t\t\t\tgroup.attr({\n\t\t\t\t\twidth: chart.plotWidth,\n\t\t\t\t\theight: chart.plotHeight\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tgroup.animate({\n\t\t\t\ttranslateX: pick(xAxis && xAxis.left, chart.plotLeft),\n\t\t\t\ttranslateY: pick(yAxis && yAxis.top, chart.plotTop)\n\t\t\t});\n\t\t}\n\n\t\tseries.translate();\n\t\tseries.render();\n\t\tif (wasDirtyData) {\n\t\t\tfireEvent(series, 'updatedData');\n\t\t}\n\t\tif (wasDirty || wasDirtyData) {\t\t\t// #3945 recalculate the kdtree when dirty\n\t\t\tdelete this.kdTree; // #3868 recalculate the kdtree with dirty data\n\t\t}\n\t},\n\n\t/**\n\t * KD Tree && PointSearching Implementation\n\t */\n\n\tkdDimensions: 1,\n\tkdAxisArray: ['clientX', 'plotY'],\n\n\tsearchPoint: function (e, compareX) {\n\t\tvar series = this,\n\t\t\txAxis = series.xAxis,\n\t\t\tyAxis = series.yAxis,\n\t\t\tinverted = series.chart.inverted;\n\t\t\n\t\treturn this.searchKDTree({\n\t\t\tclientX: inverted ? xAxis.len - e.chartY + xAxis.pos : e.chartX - xAxis.pos,\n\t\t\tplotY: inverted ? yAxis.len - e.chartX + yAxis.pos : e.chartY - yAxis.pos\n\t\t}, compareX);\n\t},\n\n\tbuildKDTree: function () {\n\t\tvar series = this,\n\t\t\tdimensions = series.kdDimensions;\n\n\t\t// Internal function\n\t\tfunction _kdtree(points, depth, dimensions) {\n\t\t\tvar axis, median, length = points && points.length;\n\n\t\t\tif (length) {\n\n\t\t\t\t// alternate between the axis\n\t\t\t\taxis = series.kdAxisArray[depth % dimensions];\n\n\t\t\t\t// sort point array\n\t\t\t\tpoints.sort(function(a, b) {\n\t\t\t\t\treturn a[axis] - b[axis];\n\t\t\t\t});\n\t\t\t\n\t\t\t\tmedian = Math.floor(length / 2);\n\t\t\t\t\n\t\t\t\t// build and return nod\n\t\t\t\treturn {\n\t\t\t\t\tpoint: points[median],\n\t\t\t\t\tleft: _kdtree(points.slice(0, median), depth + 1, dimensions),\n\t\t\t\t\tright: _kdtree(points.slice(median + 1), depth + 1, dimensions)\n\t\t\t\t};\n\t\t\t\n\t\t\t}\n\t\t}\n\n\t\t// Start the recursive build process with a clone of the points array and null points filtered out (#3873)\n\t\tfunction startRecursive() {\n\t\t\tvar points = grep(series.points, function (point) {\n\t\t\t\treturn point.y !== null;\n\t\t\t});\n\n\t\t\tseries.kdTree = _kdtree(points, dimensions, dimensions);\n\t\t}\n\t\tdelete series.kdTree;\n\t\t\n\t\tif (series.options.kdSync) {  // For testing tooltips, don't build async\n\t\t\tstartRecursive();\n\t\t} else {\n\t\t\tsetTimeout(startRecursive);\n\t\t}\n\t},\n\n\tsearchKDTree: function (point, compareX) {\n\t\tvar series = this,\n\t\t\tkdX = this.kdAxisArray[0],\n\t\t\tkdY = this.kdAxisArray[1],\n\t\t\tkdComparer = compareX ? 'distX' : 'dist';\n\n\t\t// Set the one and two dimensional distance on the point object\n\t\tfunction setDistance(p1, p2) {\n\t\t\tvar x = (defined(p1[kdX]) && defined(p2[kdX])) ? Math.pow(p1[kdX] - p2[kdX], 2) : null,\n\t\t\t\ty = (defined(p1[kdY]) && defined(p2[kdY])) ? Math.pow(p1[kdY] - p2[kdY], 2) : null,\n\t\t\t\tr = (x || 0) + (y || 0);\n\n\t\t\tp2.dist = defined(r) ? Math.sqrt(r) : Number.MAX_VALUE;\n\t\t\tp2.distX = defined(x) ? Math.sqrt(x) : Number.MAX_VALUE;\n\t\t}\n\t\tfunction _search(search, tree, depth, dimensions) {\n\t\t\tvar point = tree.point,\n\t\t\t\taxis = series.kdAxisArray[depth % dimensions],\n\t\t\t\ttdist,\n\t\t\t\tsideA,\n\t\t\t\tsideB,\n\t\t\t\tret = point,\n\t\t\t\tnPoint1,\n\t\t\t\tnPoint2;\n\t\t\t\n\t\t\tsetDistance(search, point);\n\n\t\t\t// Pick side based on distance to splitting point\n\t\t\ttdist = search[axis] - point[axis];\n\t\t\tsideA = tdist < 0 ? 'left' : 'right';\n\t\t\tsideB = tdist < 0 ? 'right' : 'left';\n\n\t\t\t// End of tree\n\t\t\tif (tree[sideA]) {\n\t\t\t\tnPoint1 =_search(search, tree[sideA], depth + 1, dimensions);\n\n\t\t\t\tret = (nPoint1[kdComparer] < ret[kdComparer] ? nPoint1 : point);\n\t\t\t} \n\t\t\tif (tree[sideB]) {\n\t\t\t\t// compare distance to current best to splitting point to decide wether to check side B or not\n\t\t\t\tif (Math.sqrt(tdist * tdist) < ret[kdComparer]) {\n\t\t\t\t\tnPoint2 = _search(search, tree[sideB], depth + 1, dimensions);\n\t\t\t\t\tret = (nPoint2[kdComparer] < ret[kdComparer] ? nPoint2 : ret);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (!this.kdTree) {\n\t\t\tthis.buildKDTree();\n\t\t}\n\n\t\tif (this.kdTree) {\n\t\t\treturn _search(point, \n\t\t\t\tthis.kdTree, this.kdDimensions, this.kdDimensions);\n\t\t}\n\t}\n\n}; // end Series prototype\n\n/**\n * The class for stack items\n */\nfunction StackItem(axis, options, isNegative, x, stackOption) {\n\t\n\tvar inverted = axis.chart.inverted;\n\n\tthis.axis = axis;\n\n\t// Tells if the stack is negative\n\tthis.isNegative = isNegative;\n\n\t// Save the options to be able to style the label\n\tthis.options = options;\n\n\t// Save the x value to be able to position the label later\n\tthis.x = x;\n\n\t// Initialize total value\n\tthis.total = null;\n\n\t// This will keep each points' extremes stored by series.index and point index\n\tthis.points = {};\n\n\t// Save the stack option on the series configuration object, and whether to treat it as percent\n\tthis.stack = stackOption;\n\n\t// The align options and text align varies on whether the stack is negative and\n\t// if the chart is inverted or not.\n\t// First test the user supplied value, then use the dynamic.\n\tthis.alignOptions = {\n\t\talign: options.align || (inverted ? (isNegative ? 'left' : 'right') : 'center'),\n\t\tverticalAlign: options.verticalAlign || (inverted ? 'middle' : (isNegative ? 'bottom' : 'top')),\n\t\ty: pick(options.y, inverted ? 4 : (isNegative ? 14 : -6)),\n\t\tx: pick(options.x, inverted ? (isNegative ? -6 : 6) : 0)\n\t};\n\n\tthis.textAlign = options.textAlign || (inverted ? (isNegative ? 'right' : 'left') : 'center');\n}\n\nStackItem.prototype = {\n\tdestroy: function () {\n\t\tdestroyObjectProperties(this, this.axis);\n\t},\n\n\t/**\n\t * Renders the stack total label and adds it to the stack label group.\n\t */\n\trender: function (group) {\n\t\tvar options = this.options,\n\t\t\tformatOption = options.format,\n\t\t\tstr = formatOption ?\n\t\t\t\tformat(formatOption, this) : \n\t\t\t\toptions.formatter.call(this);  // format the text in the label\n\n\t\t// Change the text to reflect the new total and set visibility to hidden in case the serie is hidden\n\t\tif (this.label) {\n\t\t\tthis.label.attr({text: str, visibility: HIDDEN});\n\t\t// Create new label\n\t\t} else {\n\t\t\tthis.label =\n\t\t\t\tthis.axis.chart.renderer.text(str, null, null, options.useHTML)\t\t// dummy positions, actual position updated with setOffset method in columnseries\n\t\t\t\t\t.css(options.style)\t\t\t\t// apply style\n\t\t\t\t\t.attr({\n\t\t\t\t\t\talign: this.textAlign,\t\t\t\t// fix the text-anchor\n\t\t\t\t\t\trotation: options.rotation,\t// rotation\n\t\t\t\t\t\tvisibility: HIDDEN\t\t\t\t\t// hidden until setOffset is called\n\t\t\t\t\t})\t\t\t\t\n\t\t\t\t\t.add(group);\t\t\t\t\t\t\t// add to the labels-group\n\t\t}\n\t},\n\n\t/**\n\t * Sets the offset that the stack has from the x value and repositions the label.\n\t */\n\tsetOffset: function (xOffset, xWidth) {\n\t\tvar stackItem = this,\n\t\t\taxis = stackItem.axis,\n\t\t\tchart = axis.chart,\n\t\t\tinverted = chart.inverted,\n\t\t\treversed = axis.reversed,\n\t\t\tneg = (this.isNegative && !reversed) || (!this.isNegative && reversed), // #4056\n\t\t\ty = axis.translate(axis.usePercentage ? 100 : this.total, 0, 0, 0, 1), // stack value translated mapped to chart coordinates\n\t\t\tyZero = axis.translate(0),\t\t\t\t\t\t// stack origin\n\t\t\th = mathAbs(y - yZero),\t\t\t\t\t\t\t// stack height\n\t\t\tx = chart.xAxis[0].translate(this.x) + xOffset,\t// stack x position\n\t\t\tplotHeight = chart.plotHeight,\n\t\t\tstackBox = {\t// this is the box for the complete stack\n\t\t\t\tx: inverted ? (neg ? y : y - h) : x,\n\t\t\t\ty: inverted ? plotHeight - x - xWidth : (neg ? (plotHeight - y - h) : plotHeight - y),\n\t\t\t\twidth: inverted ? h : xWidth,\n\t\t\t\theight: inverted ? xWidth : h\n\t\t\t},\n\t\t\tlabel = this.label,\n\t\t\talignAttr;\n\t\t\n\t\tif (label) {\n\t\t\tlabel.align(this.alignOptions, null, stackBox);\t// align the label to the box\n\t\t\t\t\n\t\t\t// Set visibility (#678)\n\t\t\talignAttr = label.alignAttr;\n\t\t\tlabel[this.options.crop === false || chart.isInsidePlot(alignAttr.x, alignAttr.y) ? 'show' : 'hide'](true);\n\t\t}\n\t}\n};\n\n\n// Stacking methods defined on the Axis prototype\n\n/**\n * Build the stacks from top down\n */\nAxis.prototype.buildStacks = function () {\n\tvar series = this.series,\n\t\treversedStacks = pick(this.options.reversedStacks, true),\n\t\ti = series.length;\n\tif (!this.isXAxis) {\n\t\tthis.usePercentage = false;\n\t\twhile (i--) {\n\t\t\tseries[reversedStacks ? i : series.length - i - 1].setStackedPoints();\n\t\t}\n\t\t// Loop up again to compute percent stack\n\t\tif (this.usePercentage) {\n\t\t\tfor (i = 0; i < series.length; i++) {\n\t\t\t\tseries[i].setPercentStacks();\n\t\t\t}\n\t\t}\n\t}\n};\n\nAxis.prototype.renderStackTotals = function () {\n\tvar axis = this,\n\t\tchart = axis.chart,\n\t\trenderer = chart.renderer,\n\t\tstacks = axis.stacks,\n\t\tstackKey, \n\t\toneStack, \n\t\tstackCategory,\n\t\tstackTotalGroup = axis.stackTotalGroup;\n\n\t// Create a separate group for the stack total labels\n\tif (!stackTotalGroup) {\n\t\taxis.stackTotalGroup = stackTotalGroup =\n\t\t\trenderer.g('stack-labels')\n\t\t\t\t.attr({\n\t\t\t\t\tvisibility: VISIBLE,\n\t\t\t\t\tzIndex: 6\n\t\t\t\t})\n\t\t\t\t.add();\n\t}\n\n\t// plotLeft/Top will change when y axis gets wider so we need to translate the\n\t// stackTotalGroup at every render call. See bug #506 and #516\n\tstackTotalGroup.translate(chart.plotLeft, chart.plotTop);\n\n\t// Render each stack total\n\tfor (stackKey in stacks) {\n\t\toneStack = stacks[stackKey];\n\t\tfor (stackCategory in oneStack) {\n\t\t\toneStack[stackCategory].render(stackTotalGroup);\n\t\t}\n\t}\n};\n\n\n// Stacking methods defnied for Series prototype\n\n/**\n * Adds series' points value to corresponding stack\n */\nSeries.prototype.setStackedPoints = function () {\n\tif (!this.options.stacking || (this.visible !== true && this.chart.options.chart.ignoreHiddenSeries !== false)) {\n\t\treturn;\n\t}\n\n\tvar series = this,\n\t\txData = series.processedXData,\n\t\tyData = series.processedYData,\n\t\tstackedYData = [],\n\t\tyDataLength = yData.length,\n\t\tseriesOptions = series.options,\n\t\tthreshold = seriesOptions.threshold,\n\t\tstackThreshold = seriesOptions.startFromThreshold ? threshold : 0,\n\t\tstackOption = seriesOptions.stack,\n\t\tstacking = seriesOptions.stacking,\n\t\tstackKey = series.stackKey,\n\t\tnegKey = '-' + stackKey,\n\t\tnegStacks = series.negStacks,\n\t\tyAxis = series.yAxis,\n\t\tstacks = yAxis.stacks,\n\t\toldStacks = yAxis.oldStacks,\n\t\tisNegative,\n\t\tstack,\n\t\tother,\n\t\tkey,\n\t\tpointKey,\n\t\ti,\n\t\tx,\n\t\ty;\n\n\t// loop over the non-null y values and read them into a local array\n\tfor (i = 0; i < yDataLength; i++) {\n\t\tx = xData[i];\n\t\ty = yData[i];\n\t\tpointKey = series.index + ',' + i;\n\n\t\t// Read stacked values into a stack based on the x value,\n\t\t// the sign of y and the stack key. Stacking is also handled for null values (#739)\n\t\tisNegative = negStacks && y < (stackThreshold ? 0 : threshold);\n\t\tkey = isNegative ? negKey : stackKey;\n\n\t\t// Create empty object for this stack if it doesn't exist yet\n\t\tif (!stacks[key]) {\n\t\t\tstacks[key] = {};\n\t\t}\n\n\t\t// Initialize StackItem for this x\n\t\tif (!stacks[key][x]) {\n\t\t\tif (oldStacks[key] && oldStacks[key][x]) {\n\t\t\t\tstacks[key][x] = oldStacks[key][x];\n\t\t\t\tstacks[key][x].total = null;\n\t\t\t} else {\n\t\t\t\tstacks[key][x] = new StackItem(yAxis, yAxis.options.stackLabels, isNegative, x, stackOption);\n\t\t\t}\n\t\t}\n\n\t\t// If the StackItem doesn't exist, create it first\n\t\tstack = stacks[key][x];\n\t\t//stack.points[pointKey] = [stack.cum || stackThreshold];\n\t\tstack.points[pointKey] = [pick(stack.cum, stackThreshold)];\n\n\t\t\n\n\t\t// Add value to the stack total\n\t\tif (stacking === 'percent') {\n\n\t\t\t// Percent stacked column, totals are the same for the positive and negative stacks\n\t\t\tother = isNegative ? stackKey : negKey;\n\t\t\tif (negStacks && stacks[other] && stacks[other][x]) {\n\t\t\t\tother = stacks[other][x];\n\t\t\t\tstack.total = other.total = mathMax(other.total, stack.total) + mathAbs(y) || 0;\n\n\t\t\t// Percent stacked areas\n\t\t\t} else {\n\t\t\t\tstack.total = correctFloat(stack.total + (mathAbs(y) || 0));\n\t\t\t}\n\t\t} else {\n\t\t\tstack.total = correctFloat(stack.total + (y || 0));\n\t\t}\n\n\t\tstack.cum = pick(stack.cum, stackThreshold) + (y || 0);\n\n\t\tstack.points[pointKey].push(stack.cum);\n\t\tstackedYData[i] = stack.cum;\n\n\t}\n\n\tif (stacking === 'percent') {\n\t\tyAxis.usePercentage = true;\n\t}\n\n\tthis.stackedYData = stackedYData; // To be used in getExtremes\n\n\t// Reset old stacks\n\tyAxis.oldStacks = {};\n};\n\n/**\n * Iterate over all stacks and compute the absolute values to percent\n */\nSeries.prototype.setPercentStacks = function () {\n\tvar series = this,\n\t\tstackKey = series.stackKey,\n\t\tstacks = series.yAxis.stacks,\n\t\tprocessedXData = series.processedXData;\n\n\teach([stackKey, '-' + stackKey], function (key) {\n\t\tvar i = processedXData.length,\n\t\t\tx,\n\t\t\tstack,\n\t\t\tpointExtremes,\n\t\t\ttotalFactor;\n\n\t\twhile (i--) {\n\t\t\tx = processedXData[i];\n\t\t\tstack = stacks[key] && stacks[key][x];\n\t\t\tpointExtremes = stack && stack.points[series.index + ',' + i];\n\t\t\tif (pointExtremes) {\n\t\t\t\ttotalFactor = stack.total ? 100 / stack.total : 0;\n\t\t\t\tpointExtremes[0] = correctFloat(pointExtremes[0] * totalFactor); // Y bottom value\n\t\t\t\tpointExtremes[1] = correctFloat(pointExtremes[1] * totalFactor); // Y value\n\t\t\t\tseries.stackedYData[i] = pointExtremes[1];\n\t\t\t}\n\t\t}\n\t});\n};\n\n// Extend the Chart prototype for dynamic methods\nextend(Chart.prototype, {\n\n\t/**\n\t * Add a series dynamically after  time\n\t *\n\t * @param {Object} options The config options\n\t * @param {Boolean} redraw Whether to redraw the chart after adding. Defaults to true.\n\t * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n\t *    configuration\n\t *\n\t * @return {Object} series The newly created series object\n\t */\n\taddSeries: function (options, redraw, animation) {\n\t\tvar series,\n\t\t\tchart = this;\n\n\t\tif (options) {\n\t\t\tredraw = pick(redraw, true); // defaults to true\n\n\t\t\tfireEvent(chart, 'addSeries', { options: options }, function () {\n\t\t\t\tseries = chart.initSeries(options);\n\n\t\t\t\tchart.isDirtyLegend = true; // the series array is out of sync with the display\n\t\t\t\tchart.linkSeries();\n\t\t\t\tif (redraw) {\n\t\t\t\t\tchart.redraw(animation);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn series;\n\t},\n\n\t/**\n     * Add an axis to the chart\n     * @param {Object} options The axis option\n     * @param {Boolean} isX Whether it is an X axis or a value axis\n     */\n\taddAxis: function (options, isX, redraw, animation) {\n\t\tvar key = isX ? 'xAxis' : 'yAxis',\n\t\t\tchartOptions = this.options,\n\t\t\taxis;\n\n\t\t/*jslint unused: false*/\n\t\taxis = new Axis(this, merge(options, {\n\t\t\tindex: this[key].length,\n\t\t\tisX: isX\n\t\t}));\n\t\t/*jslint unused: true*/\n\n\t\t// Push the new axis options to the chart options\n\t\tchartOptions[key] = splat(chartOptions[key] || {});\n\t\tchartOptions[key].push(options);\n\n\t\tif (pick(redraw, true)) {\n\t\t\tthis.redraw(animation);\n\t\t}\n\t},\n\n\t/**\n\t * Dim the chart and show a loading text or symbol\n\t * @param {String} str An optional text to show in the loading label instead of the default one\n\t */\n\tshowLoading: function (str) {\n\t\tvar chart = this,\n\t\t\toptions = chart.options,\n\t\t\tloadingDiv = chart.loadingDiv,\n\t\t\tloadingOptions = options.loading,\n\t\t\tsetLoadingSize = function () {\n\t\t\t\tif (loadingDiv) {\n\t\t\t\t\tcss(loadingDiv, {\n\t\t\t\t\t\tleft: chart.plotLeft + PX,\n\t\t\t\t\t\ttop: chart.plotTop + PX,\n\t\t\t\t\t\twidth: chart.plotWidth + PX,\n\t\t\t\t\t\theight: chart.plotHeight + PX\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t// create the layer at the first call\n\t\tif (!loadingDiv) {\n\t\t\tchart.loadingDiv = loadingDiv = createElement(DIV, {\n\t\t\t\tclassName: PREFIX + 'loading'\n\t\t\t}, extend(loadingOptions.style, {\n\t\t\t\tzIndex: 10,\n\t\t\t\tdisplay: NONE\n\t\t\t}), chart.container);\n\n\t\t\tchart.loadingSpan = createElement(\n\t\t\t\t'span',\n\t\t\t\tnull,\n\t\t\t\tloadingOptions.labelStyle,\n\t\t\t\tloadingDiv\n\t\t\t);\n\t\t\taddEvent(chart, 'redraw', setLoadingSize); // #1080\n\t\t}\n\n\t\t// update text\n\t\tchart.loadingSpan.innerHTML = str || options.lang.loading;\n\n\t\t// show it\n\t\tif (!chart.loadingShown) {\n\t\t\tcss(loadingDiv, {\n\t\t\t\topacity: 0,\n\t\t\t\tdisplay: ''\t\t\t\t\n\t\t\t});\n\t\t\tanimate(loadingDiv, {\n\t\t\t\topacity: loadingOptions.style.opacity\n\t\t\t}, {\n\t\t\t\tduration: loadingOptions.showDuration || 0\n\t\t\t});\n\t\t\tchart.loadingShown = true;\n\t\t}\n\t\tsetLoadingSize();\n\t},\n\n\t/**\n\t * Hide the loading layer\n\t */\n\thideLoading: function () {\n\t\tvar options = this.options,\n\t\t\tloadingDiv = this.loadingDiv;\n\n\t\tif (loadingDiv) {\n\t\t\tanimate(loadingDiv, {\n\t\t\t\topacity: 0\n\t\t\t}, {\n\t\t\t\tduration: options.loading.hideDuration || 100,\n\t\t\t\tcomplete: function () {\n\t\t\t\t\tcss(loadingDiv, { display: NONE });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.loadingShown = false;\n\t}\n});\n\n// extend the Point prototype for dynamic methods\nextend(Point.prototype, {\n\t/**\n\t * Update the point with new options (typically x/y data) and optionally redraw the series.\n\t *\n\t * @param {Object} options Point options as defined in the series.data array\n\t * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call\n\t * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n\t *    configuration\n\t *\n\t */\n\tupdate: function (options, redraw, animation, runEvent) {\n\t\tvar point = this,\n\t\t\tseries = point.series,\n\t\t\tgraphic = point.graphic,\n\t\t\ti,\n\t\t\tchart = series.chart,\n\t\t\tseriesOptions = series.options,\n\t\t\tnames = series.xAxis && series.xAxis.names;\n\n\t\tredraw = pick(redraw, true);\n\n\t\tfunction update() {\n\n\t\t\tpoint.applyOptions(options);\n\n\t\t\t// Update visuals\n\t\t\tif (point.y === null && graphic) { // #4146\n\t\t\t\tpoint.graphic = graphic.destroy();\n\t\t\t}\n\t\t\tif (isObject(options) && !isArray(options)) {\n\t\t\t\t// Defer the actual redraw until getAttribs has been called (#3260)\n\t\t\t\tpoint.redraw = function () {\n\t\t\t\t\tif (graphic) {\n\t\t\t\t\t\tif (options && options.marker && options.marker.symbol) {\n\t\t\t\t\t\t\tpoint.graphic = graphic.destroy();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgraphic.attr(point.pointAttr[point.state || ''])[point.visible === false ? 'hide' : 'show'](); // #2430\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (options && options.dataLabels && point.dataLabel) { // #2468\n\t\t\t\t\t\tpoint.dataLabel = point.dataLabel.destroy();\n\t\t\t\t\t}\n\t\t\t\t\tpoint.redraw = null;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// record changes in the parallel arrays\n\t\t\ti = point.index;\n\t\t\tseries.updateParallelArrays(point, i);\n\t\t\tif (names && point.name) {\n\t\t\t\tnames[point.x] = point.name;\n\t\t\t}\n\n\t\t\tseriesOptions.data[i] = point.options;\n\n\t\t\t// redraw\n\t\t\tseries.isDirty = series.isDirtyData = true;\n\t\t\tif (!series.fixedBox && series.hasCartesianSeries) { // #1906, #2320\n\t\t\t\tchart.isDirtyBox = true;\n\t\t\t}\n\n\t\t\tif (seriesOptions.legendType === 'point') { // #1831, #1885\n\t\t\t\tchart.isDirtyLegend = true;\n\t\t\t}\n\t\t\tif (redraw) {\n\t\t\t\tchart.redraw(animation);\n\t\t\t}\n\t\t}\n\n\t\t// Fire the event with a default handler of doing the update\n\t\tif (runEvent === false) { // When called from setData\n\t\t\tupdate();\n\t\t} else {\n\t\t\tpoint.firePointEvent('update', { options: options }, update);\n\t\t}\n\t},\n\n\t/**\n\t * Remove a point and optionally redraw the series and if necessary the axes\n\t * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call\n\t * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n\t *    configuration\n\t */\n\tremove: function (redraw, animation) {\n\t\tthis.series.removePoint(inArray(this, this.series.data), redraw, animation);\n\t}\n});\n\n// Extend the series prototype for dynamic methods\nextend(Series.prototype, {\n\t/**\n\t * Add a point dynamically after chart load time\n\t * @param {Object} options Point options as given in series.data\n\t * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call\n\t * @param {Boolean} shift If shift is true, a point is shifted off the start\n\t *    of the series as one is appended to the end.\n\t * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n\t *    configuration\n\t */\n\taddPoint: function (options, redraw, shift, animation) {\n\t\tvar series = this,\n\t\t\tseriesOptions = series.options,\n\t\t\tdata = series.data,\n\t\t\tgraph = series.graph,\n\t\t\tarea = series.area,\n\t\t\tchart = series.chart,\n\t\t\tnames = series.xAxis && series.xAxis.names,\n\t\t\tcurrentShift = (graph && graph.shift) || 0,\n\t\t\tshiftShapes = ['graph', 'area'],\n\t\t\tdataOptions = seriesOptions.data,\n\t\t\tpoint,\n\t\t\tisInTheMiddle,\n\t\t\txData = series.xData,\n\t\t\ti,\n\t\t\tx;\n\n\t\tsetAnimation(animation, chart);\n\n\t\t// Make graph animate sideways\n\t\tif (shift) {\n\t\t\ti = series.zones.length;\n\t\t\twhile (i--) {\n\t\t\t\tshiftShapes.push('zoneGraph' + i, 'zoneArea' + i);\n\t\t\t}\n\t\t\teach(shiftShapes, function (shape) {\n\t\t\t\tif (series[shape]) {\n\t\t\t\t\tseries[shape].shift = currentShift + 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (area) {\n\t\t\tarea.isArea = true; // needed in animation, both with and without shift\n\t\t}\n\n\t\t// Optional redraw, defaults to true\n\t\tredraw = pick(redraw, true);\n\n\t\t// Get options and push the point to xData, yData and series.options. In series.generatePoints\n\t\t// the Point instance will be created on demand and pushed to the series.data array.\n\t\tpoint = { series: series };\n\t\tseries.pointClass.prototype.applyOptions.apply(point, [options]);\n\t\tx = point.x;\n\n\t\t// Get the insertion point\n\t\ti = xData.length;\n\t\tif (series.requireSorting && x < xData[i - 1]) {\n\t\t\tisInTheMiddle = true;\n\t\t\twhile (i && xData[i - 1] > x) {\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\n\t\tseries.updateParallelArrays(point, 'splice', i, 0, 0); // insert undefined item\n\t\tseries.updateParallelArrays(point, i); // update it\n\n\t\tif (names && point.name) {\n\t\t\tnames[x] = point.name;\n\t\t}\n\t\tdataOptions.splice(i, 0, options);\n\n\t\tif (isInTheMiddle) {\n\t\t\tseries.data.splice(i, 0, null);\n\t\t\tseries.processData();\n\t\t}\n\n\t\t// Generate points to be added to the legend (#1329)\n\t\tif (seriesOptions.legendType === 'point') {\n\t\t\tseries.generatePoints();\n\t\t}\n\n\t\t// Shift the first point off the parallel arrays\n\t\t// todo: consider series.removePoint(i) method\n\t\tif (shift) {\n\t\t\tif (data[0] && data[0].remove) {\n\t\t\t\tdata[0].remove(false);\n\t\t\t} else {\n\t\t\t\tdata.shift();\n\t\t\t\tseries.updateParallelArrays(point, 'shift');\n\n\t\t\t\tdataOptions.shift();\n\t\t\t}\n\t\t}\n\n\t\t// redraw\n\t\tseries.isDirty = true;\n\t\tseries.isDirtyData = true;\n\t\tif (redraw) {\n\t\t\tseries.getAttribs(); // #1937\n\t\t\tchart.redraw();\n\t\t}\n\t},\n\n\t/**\n\t * Remove a point (rendered or not), by index\n\t */\n\tremovePoint: function (i, redraw, animation) {\n\n\t\tvar series = this,\n\t\t\tdata = series.data,\n\t\t\tpoint = data[i],\n\t\t\tpoints = series.points,\n\t\t\tchart = series.chart,\n\t\t\tremove = function () {\n\n\t\t\t\tif (data.length === points.length) {\n\t\t\t\t\tpoints.splice(i, 1);\n\t\t\t\t}\n\t\t\t\tdata.splice(i, 1);\n\t\t\t\tseries.options.data.splice(i, 1);\n\t\t\t\tseries.updateParallelArrays(point || { series: series }, 'splice', i, 1);\n\n\t\t\t\tif (point) {\n\t\t\t\t\tpoint.destroy();\n\t\t\t\t}\n\n\t\t\t\t// redraw\n\t\t\t\tseries.isDirty = true;\n\t\t\t\tseries.isDirtyData = true;\n\t\t\t\tif (redraw) {\n\t\t\t\t\tchart.redraw();\n\t\t\t\t}\n\t\t\t};\n\n\t\tsetAnimation(animation, chart);\n\t\tredraw = pick(redraw, true);\n\n\t\t// Fire the event with a default handler of removing the point\n\t\tif (point) {\n\t\t\tpoint.firePointEvent('remove', null, remove);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t},\n\n\t/**\n\t * Remove a series and optionally redraw the chart\n\t *\n\t * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call\n\t * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n\t *    configuration\n\t */\n\n\tremove: function (redraw, animation) {\n\t\tvar series = this,\n\t\t\tchart = series.chart;\n\t\tredraw = pick(redraw, true);\n\n\t\tif (!series.isRemoving) {  /* prevent triggering native event in jQuery\n\t\t\t\t(calling the remove function from the remove event) */\n\t\t\tseries.isRemoving = true;\n\n\t\t\t// fire the event with a default handler of removing the point\n\t\t\tfireEvent(series, 'remove', null, function () {\n\n\n\t\t\t\t// destroy elements\n\t\t\t\tseries.destroy();\n\n\n\t\t\t\t// redraw\n\t\t\t\tchart.isDirtyLegend = chart.isDirtyBox = true;\n\t\t\t\tchart.linkSeries();\n\n\t\t\t\tif (redraw) {\n\t\t\t\t\tchart.redraw(animation);\n\t\t\t\t}\n\t\t\t});\n\n\t\t}\n\t\tseries.isRemoving = false;\n\t},\n\n\t/**\n\t * Update the series with a new set of options\n\t */\n\tupdate: function (newOptions, redraw) {\n\t\tvar series = this,\n\t\t\tchart = this.chart,\n\t\t\t// must use user options when changing type because this.options is merged\n\t\t\t// in with type specific plotOptions\n\t\t\toldOptions = this.userOptions,\n\t\t\toldType = this.type,\n\t\t\tproto = seriesTypes[oldType].prototype,\n\t\t\tpreserve = ['group', 'markerGroup', 'dataLabelsGroup'],\n\t\t\tn;\n\n\t\t// If we're changing type or zIndex, create new groups (#3380, #3404)\n\t\tif ((newOptions.type && newOptions.type !== oldType) || newOptions.zIndex !== undefined) {\n\t\t\tpreserve.length = 0;\n\t\t}\n\n\t\t// Make sure groups are not destroyed (#3094)\n\t\teach(preserve, function (prop) {\n\t\t\tpreserve[prop] = series[prop];\n\t\t\tdelete series[prop];\n\t\t});\n\n\t\t// Do the merge, with some forced options\n\t\tnewOptions = merge(oldOptions, {\n\t\t\tanimation: false,\n\t\t\tindex: this.index,\n\t\t\tpointStart: this.xData[0] // when updating after addPoint\n\t\t}, { data: this.options.data }, newOptions);\n\n\t\t// Destroy the series and delete all properties. Reinsert all methods \n\t\t// and properties from the new type prototype (#2270, #3719)\n\t\tthis.remove(false);\n\t\tfor (n in proto) {\n\t\t\tthis[n] = UNDEFINED;\n\t\t}\n\t\textend(this, seriesTypes[newOptions.type || oldType].prototype);\n\n\t\t// Re-register groups (#3094)\n\t\teach(preserve, function (prop) {\n\t\t\tseries[prop] = preserve[prop];\n\t\t});\n\n\t\tthis.init(chart, newOptions);\n\t\tchart.linkSeries(); // Links are lost in this.remove (#3028)\n\t\tif (pick(redraw, true)) {\n\t\t\tchart.redraw(false);\n\t\t}\n\t}\n});\n\n// Extend the Axis.prototype for dynamic methods\nextend(Axis.prototype, {\n\n\t/**\n\t * Update the axis with a new options structure\n\t */\n\tupdate: function (newOptions, redraw) {\n\t\tvar chart = this.chart;\n\n\t\tnewOptions = chart.options[this.coll][this.options.index] = merge(this.userOptions, newOptions);\n\n\t\tthis.destroy(true);\n\t\tthis._addedPlotLB = this.chart._labelPanes = UNDEFINED; // #1611, #2887, #4314\n\n\t\tthis.init(chart, extend(newOptions, { events: UNDEFINED }));\n\n\t\tchart.isDirtyBox = true;\n\t\tif (pick(redraw, true)) {\n\t\t\tchart.redraw();\n\t\t}\n\t},\n\n\t/**\n     * Remove the axis from the chart\n     */\n\tremove: function (redraw) {\n\t\tvar chart = this.chart,\n\t\t\tkey = this.coll, // xAxis or yAxis\n\t\t\taxisSeries = this.series,\n\t\t\ti = axisSeries.length;\n\n\t\t// Remove associated series (#2687)\n\t\twhile (i--) {\n\t\t\tif (axisSeries[i]) {\n\t\t\t\taxisSeries[i].remove(false);\n\t\t\t}\n\t\t}\n\n\t\t// Remove the axis\n\t\terase(chart.axes, this);\n\t\terase(chart[key], this);\n\t\tchart.options[key].splice(this.options.index, 1);\n\t\teach(chart[key], function (axis, i) { // Re-index, #1706\n\t\t\taxis.options.index = i;\n\t\t});\n\t\tthis.destroy();\n\t\tchart.isDirtyBox = true;\n\n\t\tif (pick(redraw, true)) {\n\t\t\tchart.redraw();\n\t\t}\n\t},\n\n\t/**\n\t * Update the axis title by options\n\t */\n\tsetTitle: function (newTitleOptions, redraw) {\n\t\tthis.update({ title: newTitleOptions }, redraw);\n\t},\n\n\t/**\n\t * Set new axis categories and optionally redraw\n\t * @param {Array} categories\n\t * @param {Boolean} redraw\n\t */\n\tsetCategories: function (categories, redraw) {\n\t\tthis.update({ categories: categories }, redraw);\n\t}\n\n});\n\n\n/**\n * LineSeries object\n */\nvar LineSeries = extendClass(Series);\nseriesTypes.line = LineSeries;\n\n/**\n * Set the default options for area\n */\ndefaultPlotOptions.area = merge(defaultSeriesOptions, {\n\tthreshold: 0\n\t// trackByArea: false,\n\t// lineColor: null, // overrides color, but lets fillColor be unaltered\n\t// fillOpacity: 0.75,\n\t// fillColor: null\n});\n\n/**\n * AreaSeries object\n */\nvar AreaSeries = extendClass(Series, {\n\ttype: 'area',\n\t/**\n\t * For stacks, don't split segments on null values. Instead, draw null values with \n\t * no marker. Also insert dummy points for any X position that exists in other series\n\t * in the stack.\n\t */ \n\tgetSegments: function () {\n\t\tvar series = this,\n\t\t\tsegments = [],\n\t\t\tsegment = [],\n\t\t\tkeys = [],\n\t\t\txAxis = this.xAxis,\n\t\t\tyAxis = this.yAxis,\n\t\t\tstack = yAxis.stacks[this.stackKey],\n\t\t\tpointMap = {},\n\t\t\tplotX,\n\t\t\tplotY,\n\t\t\tpoints = this.points,\n\t\t\tconnectNulls = this.options.connectNulls,\n\t\t\ti,\n\t\t\tx;\n\n\t\tif (this.options.stacking && !this.cropped) { // cropped causes artefacts in Stock, and perf issue\n\t\t\t// Create a map where we can quickly look up the points by their X value.\n\t\t\tfor (i = 0; i < points.length; i++) {\n\t\t\t\tpointMap[points[i].x] = points[i];\n\t\t\t}\n\n\t\t\t// Sort the keys (#1651)\n\t\t\tfor (x in stack) {\n\t\t\t\tif (stack[x].total !== null) { // nulled after switching between grouping and not (#1651, #2336)\n\t\t\t\t\tkeys.push(+x);\n\t\t\t\t}\n\t\t\t}\n\t\t\tkeys.sort(function (a, b) {\n\t\t\t\treturn a - b;\n\t\t\t});\n\n\t\t\teach(keys, function (x) {\n\t\t\t\tvar y = 0,\n\t\t\t\t\tstackPoint;\n\n\t\t\t\tif (connectNulls && (!pointMap[x] || pointMap[x].y === null)) { // #1836\n\t\t\t\t\treturn;\n\n\t\t\t\t// The point exists, push it to the segment\n\t\t\t\t} else if (pointMap[x]) {\n\t\t\t\t\tsegment.push(pointMap[x]);\n\n\t\t\t\t// There is no point for this X value in this series, so we \n\t\t\t\t// insert a dummy point in order for the areas to be drawn\n\t\t\t\t// correctly.\n\t\t\t\t} else {\n\n\t\t\t\t\t// Loop down the stack to find the series below this one that has\n\t\t\t\t\t// a value (#1991)\n\t\t\t\t\tfor (i = series.index; i <= yAxis.series.length; i++) {\n\t\t\t\t\t\tstackPoint = stack[x].points[i + ',' + x];\n\t\t\t\t\t\tif (stackPoint) {\n\t\t\t\t\t\t\ty = stackPoint[1];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tplotX = xAxis.translate(x);\n\t\t\t\t\tplotY = yAxis.toPixels(y, true);\n\t\t\t\t\tsegment.push({ \n\t\t\t\t\t\ty: null, \n\t\t\t\t\t\tplotX: plotX,\n\t\t\t\t\t\tclientX: plotX, \n\t\t\t\t\t\tplotY: plotY, \n\t\t\t\t\t\tyBottom: plotY,\n\t\t\t\t\t\tonMouseOver: noop\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (segment.length) {\n\t\t\t\tsegments.push(segment);\n\t\t\t}\n\n\t\t} else {\n\t\t\tSeries.prototype.getSegments.call(this);\n\t\t\tsegments = this.segments;\n\t\t}\n\n\t\tthis.segments = segments;\n\t},\n\t\n\t/**\n\t * Extend the base Series getSegmentPath method by adding the path for the area.\n\t * This path is pushed to the series.areaPath property.\n\t */\n\tgetSegmentPath: function (segment) {\n\t\t\n\t\tvar segmentPath = Series.prototype.getSegmentPath.call(this, segment), // call base method\n\t\t\tareaSegmentPath = [].concat(segmentPath), // work on a copy for the area path\n\t\t\ti,\n\t\t\toptions = this.options,\n\t\t\tsegLength = segmentPath.length,\n\t\t\ttranslatedThreshold = this.yAxis.getThreshold(options.threshold), // #2181\n\t\t\tyBottom;\n\t\t\n\t\tif (segLength === 3) { // for animation from 1 to two points\n\t\t\tareaSegmentPath.push(L, segmentPath[1], segmentPath[2]);\n\t\t}\n\t\tif (options.stacking && !this.closedStacks) {\n\t\t\t\n\t\t\t// Follow stack back. Todo: implement areaspline. A general solution could be to \n\t\t\t// reverse the entire graphPath of the previous series, though may be hard with\n\t\t\t// splines and with series with different extremes\n\t\t\tfor (i = segment.length - 1; i >= 0; i--) {\n\n\t\t\t\tyBottom = pick(segment[i].yBottom, translatedThreshold);\n\t\t\t\n\t\t\t\t// step line?\n\t\t\t\tif (i < segment.length - 1 && options.step) {\n\t\t\t\t\tareaSegmentPath.push(segment[i + 1].plotX, yBottom);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tareaSegmentPath.push(segment[i].plotX, yBottom);\n\t\t\t}\n\n\t\t} else { // follow zero line back\n\t\t\tthis.closeSegment(areaSegmentPath, segment, translatedThreshold);\n\t\t}\n\t\tthis.areaPath = this.areaPath.concat(areaSegmentPath);\n\t\treturn segmentPath;\n\t},\n\t\n\t/**\n\t * Extendable method to close the segment path of an area. This is overridden in polar \n\t * charts.\n\t */\n\tcloseSegment: function (path, segment, translatedThreshold) {\n\t\tpath.push(\n\t\t\tL,\n\t\t\tsegment[segment.length - 1].plotX,\n\t\t\ttranslatedThreshold,\n\t\t\tL,\n\t\t\tsegment[0].plotX,\n\t\t\ttranslatedThreshold\n\t\t);\n\t},\n\t\n\t/**\n\t * Draw the graph and the underlying area. This method calls the Series base\n\t * function and adds the area. The areaPath is calculated in the getSegmentPath\n\t * method called from Series.prototype.drawGraph.\n\t */\n\tdrawGraph: function () {\n\t\t\n\t\t// Define or reset areaPath\n\t\tthis.areaPath = [];\n\t\t\n\t\t// Call the base method\n\t\tSeries.prototype.drawGraph.apply(this);\n\t\t\n\t\t// Define local variables\n\t\tvar series = this,\n\t\t\tareaPath = this.areaPath,\n\t\t\toptions = this.options,\n\t\t\tzones = this.zones,\n\t\t\tprops = [['area', this.color, options.fillColor]]; // area name, main color, fill color\n\t\t\n\t\teach(zones, function (threshold, i) {\n\t\t\tprops.push(['zoneArea' + i, threshold.color || series.color, threshold.fillColor || options.fillColor]);\n\t\t});\n\t\teach(props, function (prop) {\n\t\t\tvar areaKey = prop[0],\n\t\t\t\tarea = series[areaKey];\n\t\t\t\t\n\t\t\t// Create or update the area\n\t\t\tif (area) { // update\n\t\t\t\tarea.animate({ d: areaPath });\n\t\n\t\t\t} else { // create\n\t\t\t\tseries[areaKey] = series.chart.renderer.path(areaPath)\n\t\t\t\t\t.attr({\n\t\t\t\t\t\tfill: pick(\n\t\t\t\t\t\t\tprop[2],\n\t\t\t\t\t\t\tColor(prop[1]).setOpacity(pick(options.fillOpacity, 0.75)).get()\n\t\t\t\t\t\t),\n\t\t\t\t\t\tzIndex: 0 // #1069\n\t\t\t\t\t}).add(series.group);\n\t\t\t}\n\t\t});\n\t},\n\n\tdrawLegendSymbol: LegendSymbolMixin.drawRectangle\n});\n\nseriesTypes.area = AreaSeries;\n/**\n * Set the default options for spline\n */\ndefaultPlotOptions.spline = merge(defaultSeriesOptions);\n\n/**\n * SplineSeries object\n */\nvar SplineSeries = extendClass(Series, {\n\ttype: 'spline',\n\n\t/**\n\t * Get the spline segment from a given point's previous neighbour to the given point\n\t */\n\tgetPointSpline: function (segment, point, i) {\n\t\tvar smoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc\n\t\t\tdenom = smoothing + 1,\n\t\t\tplotX = point.plotX,\n\t\t\tplotY = point.plotY,\n\t\t\tlastPoint = segment[i - 1],\n\t\t\tnextPoint = segment[i + 1],\n\t\t\tleftContX,\n\t\t\tleftContY,\n\t\t\trightContX,\n\t\t\trightContY,\n\t\t\tret;\n\n\t\t// find control points\n\t\tif (lastPoint && nextPoint) {\n\t\t\n\t\t\tvar lastX = lastPoint.plotX,\n\t\t\t\tlastY = lastPoint.plotY,\n\t\t\t\tnextX = nextPoint.plotX,\n\t\t\t\tnextY = nextPoint.plotY,\n\t\t\t\tcorrection;\n\n\t\t\tleftContX = (smoothing * plotX + lastX) / denom;\n\t\t\tleftContY = (smoothing * plotY + lastY) / denom;\n\t\t\trightContX = (smoothing * plotX + nextX) / denom;\n\t\t\trightContY = (smoothing * plotY + nextY) / denom;\n\n\t\t\t// have the two control points make a straight line through main point\n\t\t\tcorrection = ((rightContY - leftContY) * (rightContX - plotX)) /\n\t\t\t\t(rightContX - leftContX) + plotY - rightContY;\n\n\t\t\tleftContY += correction;\n\t\t\trightContY += correction;\n\n\t\t\t// to prevent false extremes, check that control points are between\n\t\t\t// neighbouring points' y values\n\t\t\tif (leftContY > lastY && leftContY > plotY) {\n\t\t\t\tleftContY = mathMax(lastY, plotY);\n\t\t\t\trightContY = 2 * plotY - leftContY; // mirror of left control point\n\t\t\t} else if (leftContY < lastY && leftContY < plotY) {\n\t\t\t\tleftContY = mathMin(lastY, plotY);\n\t\t\t\trightContY = 2 * plotY - leftContY;\n\t\t\t}\n\t\t\tif (rightContY > nextY && rightContY > plotY) {\n\t\t\t\trightContY = mathMax(nextY, plotY);\n\t\t\t\tleftContY = 2 * plotY - rightContY;\n\t\t\t} else if (rightContY < nextY && rightContY < plotY) {\n\t\t\t\trightContY = mathMin(nextY, plotY);\n\t\t\t\tleftContY = 2 * plotY - rightContY;\n\t\t\t}\n\n\t\t\t// record for drawing in next point\n\t\t\tpoint.rightContX = rightContX;\n\t\t\tpoint.rightContY = rightContY;\n\n\t\t}\n\t\t\n\t\t// Visualize control points for debugging\n\t\t/*\n\t\tif (leftContX) {\n\t\t\tthis.chart.renderer.circle(leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop, 2)\n\t\t\t\t.attr({\n\t\t\t\t\tstroke: 'red',\n\t\t\t\t\t'stroke-width': 1,\n\t\t\t\t\tfill: 'none'\n\t\t\t\t})\n\t\t\t\t.add();\n\t\t\tthis.chart.renderer.path(['M', leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop,\n\t\t\t\t'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])\n\t\t\t\t.attr({\n\t\t\t\t\tstroke: 'red',\n\t\t\t\t\t'stroke-width': 1\n\t\t\t\t})\n\t\t\t\t.add();\n\t\t\tthis.chart.renderer.circle(rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop, 2)\n\t\t\t\t.attr({\n\t\t\t\t\tstroke: 'green',\n\t\t\t\t\t'stroke-width': 1,\n\t\t\t\t\tfill: 'none'\n\t\t\t\t})\n\t\t\t\t.add();\n\t\t\tthis.chart.renderer.path(['M', rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop,\n\t\t\t\t'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])\n\t\t\t\t.attr({\n\t\t\t\t\tstroke: 'green',\n\t\t\t\t\t'stroke-width': 1\n\t\t\t\t})\n\t\t\t\t.add();\n\t\t}\n\t\t*/\n\n\t\t// moveTo or lineTo\n\t\tif (!i) {\n\t\t\tret = [M, plotX, plotY];\n\t\t} else { // curve from last point to this\n\t\t\tret = [\n\t\t\t\t'C',\n\t\t\t\tlastPoint.rightContX || lastPoint.plotX,\n\t\t\t\tlastPoint.rightContY || lastPoint.plotY,\n\t\t\t\tleftContX || plotX,\n\t\t\t\tleftContY || plotY,\n\t\t\t\tplotX,\n\t\t\t\tplotY\n\t\t\t];\n\t\t\tlastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later\n\t\t}\n\t\treturn ret;\n\t}\n});\nseriesTypes.spline = SplineSeries;\n\n/**\n * Set the default options for areaspline\n */\ndefaultPlotOptions.areaspline = merge(defaultPlotOptions.area);\n\n/**\n * AreaSplineSeries object\n */\nvar areaProto = AreaSeries.prototype,\n\tAreaSplineSeries = extendClass(SplineSeries, {\n\t\ttype: 'areaspline',\n\t\tclosedStacks: true, // instead of following the previous graph back, follow the threshold back\n\t\t\n\t\t// Mix in methods from the area series\n\t\tgetSegmentPath: areaProto.getSegmentPath,\n\t\tcloseSegment: areaProto.closeSegment,\n\t\tdrawGraph: areaProto.drawGraph,\n\t\tdrawLegendSymbol: LegendSymbolMixin.drawRectangle\n\t});\n\nseriesTypes.areaspline = AreaSplineSeries;\n\n/**\n * Set the default options for column\n */\ndefaultPlotOptions.column = merge(defaultSeriesOptions, {\n\tborderColor: '#FFFFFF',\n\t//borderWidth: 1,\n\tborderRadius: 0,\n\t//colorByPoint: undefined,\n\tgroupPadding: 0.2,\n\t//grouping: true,\n\tmarker: null, // point options are specified in the base options\n\tpointPadding: 0.1,\n\t//pointWidth: null,\n\tminPointLength: 0,\n\tcropThreshold: 50, // when there are more points, they will not animate out of the chart on xAxis.setExtremes\n\tpointRange: null, // null means auto, meaning 1 in a categorized axis and least distance between points if not categories\n\tstates: {\n\t\thover: {\n\t\t\tbrightness: 0.1,\n\t\t\tshadow: false,\n\t\t\thalo: false\n\t\t},\n\t\tselect: {\n\t\t\tcolor: '#C0C0C0',\n\t\t\tborderColor: '#000000',\n\t\t\tshadow: false\n\t\t}\n\t},\n\tdataLabels: {\n\t\talign: null, // auto\n\t\tverticalAlign: null, // auto\n\t\ty: null\n\t},\n\tstartFromThreshold: true, // docs: http://jsfiddle.net/highcharts/hz8fopan/14/\n\tstickyTracking: false,\n\ttooltip: {\n\t\tdistance: 6\n\t},\n\tthreshold: 0\n});\n\n/**\n * ColumnSeries object\n */\nvar ColumnSeries = extendClass(Series, {\n\ttype: 'column',\n\tpointAttrToOptions: { // mapping between SVG attributes and the corresponding options\n\t\tstroke: 'borderColor',\n\t\tfill: 'color',\n\t\tr: 'borderRadius'\n\t},\n\tcropShoulder: 0,\n\tdirectTouch: true, // When tooltip is not shared, this series (and derivatives) requires direct touch/hover. KD-tree does not apply.\n\ttrackerGroups: ['group', 'dataLabelsGroup'],\n\tnegStacks: true, // use separate negative stacks, unlike area stacks where a negative \n\t\t// point is substracted from previous (#1910)\n\t\n\t/**\n\t * Initialize the series\n\t */\n\tinit: function () {\n\t\tSeries.prototype.init.apply(this, arguments);\n\n\t\tvar series = this,\n\t\t\tchart = series.chart;\n\n\t\t// if the series is added dynamically, force redraw of other\n\t\t// series affected by a new column\n\t\tif (chart.hasRendered) {\n\t\t\teach(chart.series, function (otherSeries) {\n\t\t\t\tif (otherSeries.type === series.type) {\n\t\t\t\t\totherSeries.isDirty = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Return the width and x offset of the columns adjusted for grouping, groupPadding, pointPadding,\n\t * pointWidth etc. \n\t */\n\tgetColumnMetrics: function () {\n\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\txAxis = series.xAxis,\n\t\t\tyAxis = series.yAxis,\n\t\t\treversedXAxis = xAxis.reversed,\n\t\t\tstackKey,\n\t\t\tstackGroups = {},\n\t\t\tcolumnIndex,\n\t\t\tcolumnCount = 0;\n\n\t\t// Get the total number of column type series.\n\t\t// This is called on every series. Consider moving this logic to a\n\t\t// chart.orderStacks() function and call it on init, addSeries and removeSeries\n\t\tif (options.grouping === false) {\n\t\t\tcolumnCount = 1;\n\t\t} else {\n\t\t\teach(series.chart.series, function (otherSeries) {\n\t\t\t\tvar otherOptions = otherSeries.options,\n\t\t\t\t\totherYAxis = otherSeries.yAxis;\n\t\t\t\tif (otherSeries.type === series.type && otherSeries.visible &&\n\t\t\t\t\t\tyAxis.len === otherYAxis.len && yAxis.pos === otherYAxis.pos) {  // #642, #2086\n\t\t\t\t\tif (otherOptions.stacking) {\n\t\t\t\t\t\tstackKey = otherSeries.stackKey;\n\t\t\t\t\t\tif (stackGroups[stackKey] === UNDEFINED) {\n\t\t\t\t\t\t\tstackGroups[stackKey] = columnCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcolumnIndex = stackGroups[stackKey];\n\t\t\t\t\t} else if (otherOptions.grouping !== false) { // #1162\n\t\t\t\t\t\tcolumnIndex = columnCount++;\n\t\t\t\t\t}\n\t\t\t\t\totherSeries.columnIndex = columnIndex;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tvar categoryWidth = mathMin(\n\t\t\t\tmathAbs(xAxis.transA) * (xAxis.ordinalSlope || options.pointRange || xAxis.closestPointRange || xAxis.tickInterval || 1), // #2610\n\t\t\t\txAxis.len // #1535\n\t\t\t),\n\t\t\tgroupPadding = categoryWidth * options.groupPadding,\n\t\t\tgroupWidth = categoryWidth - 2 * groupPadding,\n\t\t\tpointOffsetWidth = groupWidth / columnCount,\n\t\t\toptionPointWidth = options.pointWidth,\n\t\t\tpointPadding = defined(optionPointWidth) ? (pointOffsetWidth - optionPointWidth) / 2 :\n\t\t\t\tpointOffsetWidth * options.pointPadding,\n\t\t\tpointWidth = pick(optionPointWidth, pointOffsetWidth - 2 * pointPadding), // exact point width, used in polar charts\n\t\t\tcolIndex = (reversedXAxis ? \n\t\t\t\tcolumnCount - (series.columnIndex || 0) : // #1251\n\t\t\t\tseries.columnIndex) || 0,\n\t\t\tpointXOffset = pointPadding + (groupPadding + colIndex *\n\t\t\t\tpointOffsetWidth - (categoryWidth / 2)) *\n\t\t\t\t(reversedXAxis ? -1 : 1);\n\n\t\t// Save it for reading in linked series (Error bars particularly)\n\t\treturn (series.columnMetrics = { \n\t\t\twidth: pointWidth, \n\t\t\toffset: pointXOffset \n\t\t});\n\t\t\t\n\t},\n\n\t/**\n\t * Translate each point to the plot area coordinate system and find shape positions\n\t */\n\ttranslate: function () {\n\t\tvar series = this,\n\t\t\tchart = series.chart,\n\t\t\toptions = series.options,\n\t\t\tborderWidth = series.borderWidth = pick(\n\t\t\t\toptions.borderWidth, \n\t\t\t\tseries.closestPointRange * series.xAxis.transA < 2 ? 0 : 1 // #3635\n\t\t\t),\n\t\t\tyAxis = series.yAxis,\n\t\t\tthreshold = options.threshold,\n\t\t\ttranslatedThreshold = series.translatedThreshold = yAxis.getThreshold(threshold),\n\t\t\tminPointLength = pick(options.minPointLength, 5),\n\t\t\tmetrics = series.getColumnMetrics(),\n\t\t\tpointWidth = metrics.width,\n\t\t\tseriesBarW = series.barW = mathMax(pointWidth, 1 + 2 * borderWidth), // postprocessed for border width\n\t\t\tpointXOffset = series.pointXOffset = metrics.offset,\n\t\t\txCrisp = -(borderWidth % 2 ? 0.5 : 0),\n\t\t\tyCrisp = borderWidth % 2 ? 0.5 : 1;\n\n\t\tif (chart.inverted) {\n\t\t\ttranslatedThreshold -= 0.5; // #3355\n\t\t\tif (chart.renderer.isVML) {\n\t\t\t\tyCrisp += 1;\n\t\t\t}\n\t\t}\n\n\t\t// When the pointPadding is 0, we want the columns to be packed tightly, so we allow individual\n\t\t// columns to have individual sizes. When pointPadding is greater, we strive for equal-width\n\t\t// columns (#2694).\n\t\tif (options.pointPadding) {\n\t\t\tseriesBarW = mathCeil(seriesBarW);\n\t\t}\n\n\t\tSeries.prototype.translate.apply(series);\n\n\t\t// Record the new values\n\t\teach(series.points, function (point) {\n\t\t\tvar yBottom = pick(point.yBottom, translatedThreshold),\n\t\t\t\tsafeDistance = 999 + mathAbs(yBottom),\n\t\t\t\tplotY = mathMin(mathMax(-safeDistance, point.plotY), yAxis.len + safeDistance), // Don't draw too far outside plot area (#1303, #2241, #4264)\n\t\t\t\tbarX = point.plotX + pointXOffset,\n\t\t\t\tbarW = seriesBarW,\n\t\t\t\tbarY = mathMin(plotY, yBottom),\n\t\t\t\tright,\n\t\t\t\tbottom,\n\t\t\t\tfromTop,\n\t\t\t\tup,\n\t\t\t\tbarH = mathMax(plotY, yBottom) - barY;\n\n\t\t\t// Handle options.minPointLength\n\t\t\tif (mathAbs(barH) < minPointLength) {\n\t\t\t\tif (minPointLength) {\n\t\t\t\t\tbarH = minPointLength;\n\t\t\t\t\tup = (!yAxis.reversed && !point.negative) || (yAxis.reversed && point.negative);\n\t\t\t\t\tbarY =\n\t\t\t\t\t\tmathRound(mathAbs(barY - translatedThreshold) > minPointLength ? // stacked\n\t\t\t\t\t\t\tyBottom - minPointLength : // keep position\n\t\t\t\t\t\t\ttranslatedThreshold - (up ? minPointLength : 0)); // #1485, #4051\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Cache for access in polar\n\t\t\tpoint.barX = barX;\n\t\t\tpoint.pointWidth = pointWidth;\n\n\t\t\t// Round off to obtain crisp edges and avoid overlapping with neighbours (#2694)\n\t\t\tright = mathRound(barX + barW) + xCrisp;\n\t\t\tbarX = mathRound(barX) + xCrisp;\n\t\t\tbarW = right - barX;\n\n\t\t\tfromTop = mathAbs(barY) < 0.5;\n\t\t\tbottom = mathMin(mathRound(barY + barH) + yCrisp, 9e4); // #3575\n\t\t\tbarY = mathRound(barY) + yCrisp;\n\t\t\tbarH = bottom - barY;\n\n\t\t\t// Top edges are exceptions\n\t\t\tif (fromTop) {\n\t\t\t\tbarY -= 1;\n\t\t\t\tbarH += 1;\n\t\t\t}\n\n\t\t\t// Fix the tooltip on center of grouped columns (#1216, #424, #3648)\n\t\t\tpoint.tooltipPos = chart.inverted ? \n\t\t\t\t[yAxis.len + yAxis.pos - chart.plotLeft - plotY, series.xAxis.len - barX - barW / 2, barH] : \n\t\t\t\t[barX + barW / 2, plotY + yAxis.pos - chart.plotTop, barH];\n\n\t\t\t// Register shape type and arguments to be used in drawPoints\n\t\t\tpoint.shapeType = 'rect';\n\t\t\tpoint.shapeArgs = {\n\t\t\t\tx: barX,\n\t\t\t\ty: barY,\n\t\t\t\twidth: barW,\n\t\t\t\theight: barH\n\t\t\t};\n\t\t});\n\n\t},\n\n\tgetSymbol: noop,\n\t\n\t/**\n\t * Use a solid rectangle like the area series types\n\t */\n\tdrawLegendSymbol: LegendSymbolMixin.drawRectangle,\n\t\n\t\n\t/**\n\t * Columns have no graph\n\t */\n\tdrawGraph: noop,\n\n\t/**\n\t * Draw the columns. For bars, the series.group is rotated, so the same coordinates\n\t * apply for columns and bars. This method is inherited by scatter series.\n\t *\n\t */\n\tdrawPoints: function () {\n\t\tvar series = this,\n\t\t\tchart = this.chart,\n\t\t\toptions = series.options,\n\t\t\trenderer = chart.renderer,\n\t\t\tanimationLimit = options.animationLimit || 250,\n\t\t\tshapeArgs,\n\t\t\tpointAttr;\n\n\t\t// draw the columns\n\t\teach(series.points, function (point) {\n\t\t\tvar plotY = point.plotY,\n\t\t\t\tgraphic = point.graphic,\n\t\t\t\tborderAttr;\n\n\t\t\tif (plotY !== UNDEFINED && !isNaN(plotY) && point.y !== null) {\n\t\t\t\tshapeArgs = point.shapeArgs;\n\n\t\t\t\tborderAttr = defined(series.borderWidth) ? {\n\t\t\t\t\t'stroke-width': series.borderWidth\n\t\t\t\t} : {};\n\n\t\t\t\tpointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || series.pointAttr[NORMAL_STATE];\n\t\t\t\t\n\t\t\t\tif (graphic) { // update\n\t\t\t\t\tstop(graphic);\n\t\t\t\t\tgraphic.attr(borderAttr)[chart.pointCount < animationLimit ? 'animate' : 'attr'](merge(shapeArgs));\n\n\t\t\t\t} else {\n\t\t\t\t\tpoint.graphic = graphic = renderer[point.shapeType](shapeArgs)\n\t\t\t\t\t\t.attr(borderAttr)\n\t\t\t\t\t\t.attr(pointAttr)\n\t\t\t\t\t\t.add(series.group)\n\t\t\t\t\t\t.shadow(options.shadow, null, options.stacking && !options.borderRadius);\n\t\t\t\t}\n\n\t\t\t} else if (graphic) {\n\t\t\t\tpoint.graphic = graphic.destroy(); // #1269\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Animate the column heights one by one from zero\n\t * @param {Boolean} init Whether to initialize the animation or run it\n\t */\n\tanimate: function (init) {\n\t\tvar series = this,\n\t\t\tyAxis = this.yAxis,\n\t\t\toptions = series.options,\n\t\t\tinverted = this.chart.inverted,\n\t\t\tattr = {},\n\t\t\ttranslatedThreshold;\n\n\t\tif (hasSVG) { // VML is too slow anyway\n\t\t\tif (init) {\n\t\t\t\tattr.scaleY = 0.001;\n\t\t\t\ttranslatedThreshold = mathMin(yAxis.pos + yAxis.len, mathMax(yAxis.pos, yAxis.toPixels(options.threshold)));\n\t\t\t\tif (inverted) {\n\t\t\t\t\tattr.translateX = translatedThreshold - yAxis.len;\n\t\t\t\t} else {\n\t\t\t\t\tattr.translateY = translatedThreshold;\n\t\t\t\t}\n\t\t\t\tseries.group.attr(attr);\n\n\t\t\t} else { // run the animation\n\t\t\t\t\n\t\t\t\tattr.scaleY = 1;\n\t\t\t\tattr[inverted ? 'translateX' : 'translateY'] = yAxis.pos;\n\t\t\t\tseries.group.animate(attr, series.options.animation);\n\n\t\t\t\t// delete this function to allow it only once\n\t\t\t\tseries.animate = null;\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Remove this series from the chart\n\t */\n\tremove: function () {\n\t\tvar series = this,\n\t\t\tchart = series.chart;\n\n\t\t// column and bar series affects other series of the same type\n\t\t// as they are either stacked or grouped\n\t\tif (chart.hasRendered) {\n\t\t\teach(chart.series, function (otherSeries) {\n\t\t\t\tif (otherSeries.type === series.type) {\n\t\t\t\t\totherSeries.isDirty = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tSeries.prototype.remove.apply(series, arguments);\n\t}\n});\nseriesTypes.column = ColumnSeries;\n/**\n * Set the default options for bar\n */\ndefaultPlotOptions.bar = merge(defaultPlotOptions.column);\n/**\n * The Bar series class\n */\nvar BarSeries = extendClass(ColumnSeries, {\n\ttype: 'bar',\n\tinverted: true\n});\nseriesTypes.bar = BarSeries;\n\n/**\n * Set the default options for scatter\n */\ndefaultPlotOptions.scatter = merge(defaultSeriesOptions, {\n\tlineWidth: 0,\n\tmarker: {\n\t\tenabled: true // Overrides auto-enabling in line series (#3647)\n\t},\n\ttooltip: {\n\t\theaderFormat: '<span style=\"color:{series.color}\">\\u25CF</span> <span style=\"font-size: 10px;\"> {series.name}</span><br/>',\n\t\tpointFormat: 'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'\n\t}\n});\n\n/**\n * The scatter series class\n */\nvar ScatterSeries = extendClass(Series, {\n\ttype: 'scatter',\n\tsorted: false,\n\trequireSorting: false,\n\tnoSharedTooltip: true,\n\ttrackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n\ttakeOrdinalPosition: false, // #2342\n\tkdDimensions: 2,\n\tdrawGraph: function () {\n\t\tif (this.options.lineWidth) {\n\t\t\tSeries.prototype.drawGraph.call(this);\n\t\t}\n\t}\n});\n\nseriesTypes.scatter = ScatterSeries;\n\n/**\n * Set the default options for pie\n */\ndefaultPlotOptions.pie = merge(defaultSeriesOptions, {\n\tborderColor: '#FFFFFF',\n\tborderWidth: 1,\n\tcenter: [null, null],\n\tclip: false,\n\tcolorByPoint: true, // always true for pies\n\tdataLabels: {\n\t\t// align: null,\n\t\t// connectorWidth: 1,\n\t\t// connectorColor: point.color,\n\t\t// connectorPadding: 5,\n\t\tdistance: 30,\n\t\tenabled: true,\n\t\tformatter: function () { // #2945\n\t\t\treturn this.point.name;\n\t\t},\n\t\t// softConnector: true,\n\t\tx: 0\n\t\t// y: 0\n\t},\n\tignoreHiddenPoint: true,\n\t//innerSize: 0,\n\tlegendType: 'point',\n\tmarker: null, // point options are specified in the base options\n\tsize: null,\n\tshowInLegend: false,\n\tslicedOffset: 10,\n\tstates: {\n\t\thover: {\n\t\t\tbrightness: 0.1,\n\t\t\tshadow: false\n\t\t}\n\t},\n\tstickyTracking: false,\n\ttooltip: {\n\t\tfollowPointer: true\n\t}\n});\n\n/**\n * Extended point object for pies\n */\nvar PiePoint = extendClass(Point, {\n\t/**\n\t * Initiate the pie slice\n\t */\n\tinit: function () {\n\n\t\tPoint.prototype.init.apply(this, arguments);\n\n\t\tvar point = this,\n\t\t\ttoggleSlice;\n\n\t\textend(point, {\n\t\t\tvisible: point.visible !== false,\n\t\t\tname: pick(point.name, 'Slice')\n\t\t});\n\n\t\t// add event listener for select\n\t\ttoggleSlice = function (e) {\n\t\t\tpoint.slice(e.type === 'select');\n\t\t};\n\t\taddEvent(point, 'select', toggleSlice);\n\t\taddEvent(point, 'unselect', toggleSlice);\n\n\t\treturn point;\n\t},\n\n\t/**\n\t * Toggle the visibility of the pie slice\n\t * @param {Boolean} vis Whether to show the slice or not. If undefined, the\n\t *    visibility is toggled\n\t */\n\tsetVisible: function (vis, redraw) {\n\t\tvar point = this,\n\t\t\tseries = point.series,\n\t\t\tchart = series.chart,\n\t\t\tignoreHiddenPoint = series.options.ignoreHiddenPoint;\n\t\t\n\t\tredraw = pick(redraw, ignoreHiddenPoint);\n\n\t\tif (vis !== point.visible) {\n\n\t\t\t// If called without an argument, toggle visibility\n\t\t\tpoint.visible = point.options.visible = vis = vis === UNDEFINED ? !point.visible : vis;\n\t\t\tseries.options.data[inArray(point, series.data)] = point.options; // update userOptions.data\n\n\t\t\t// Show and hide associated elements. This is performed regardless of redraw or not,\n\t\t\t// because chart.redraw only handles full series.\n\t\t\teach(['graphic', 'dataLabel', 'connector', 'shadowGroup'], function (key) {\n\t\t\t\tif (point[key]) {\n\t\t\t\t\tpoint[key][vis ? 'show' : 'hide'](true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (point.legendItem) {\n\t\t\t\tchart.legend.colorizeItem(point, vis);\n\t\t\t}\n\n\t\t\t// #4170, hide halo after hiding point\n\t\t\tif (!vis && point.state === 'hover') {\n\t\t\t\tpoint.setState('');\n\t\t\t}\n\t\t\t\n\t\t\t// Handle ignore hidden slices\n\t\t\tif (ignoreHiddenPoint) {\n\t\t\t\tseries.isDirty = true;\n\t\t\t}\n\n\t\t\tif (redraw) {\n\t\t\t\tchart.redraw();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Set or toggle whether the slice is cut out from the pie\n\t * @param {Boolean} sliced When undefined, the slice state is toggled\n\t * @param {Boolean} redraw Whether to redraw the chart. True by default.\n\t */\n\tslice: function (sliced, redraw, animation) {\n\t\tvar point = this,\n\t\t\tseries = point.series,\n\t\t\tchart = series.chart,\n\t\t\ttranslation;\n\n\t\tsetAnimation(animation, chart);\n\n\t\t// redraw is true by default\n\t\tredraw = pick(redraw, true);\n\n\t\t// if called without an argument, toggle\n\t\tpoint.sliced = point.options.sliced = sliced = defined(sliced) ? sliced : !point.sliced;\n\t\tseries.options.data[inArray(point, series.data)] = point.options; // update userOptions.data\n\n\t\ttranslation = sliced ? point.slicedTranslation : {\n\t\t\ttranslateX: 0,\n\t\t\ttranslateY: 0\n\t\t};\n\n\t\tpoint.graphic.animate(translation);\n\t\t\n\t\tif (point.shadowGroup) {\n\t\t\tpoint.shadowGroup.animate(translation);\n\t\t}\n\n\t},\n\n\thaloPath: function (size) {\n\t\tvar shapeArgs = this.shapeArgs,\n\t\t\tchart = this.series.chart;\n\n\t\treturn this.sliced || !this.visible ? [] : this.series.chart.renderer.symbols.arc(chart.plotLeft + shapeArgs.x, chart.plotTop + shapeArgs.y, shapeArgs.r + size, shapeArgs.r + size, {\n\t\t\tinnerR: this.shapeArgs.r,\n\t\t\tstart: shapeArgs.start,\n\t\t\tend: shapeArgs.end\n\t\t});\n\t}\n});\n\n/**\n * The Pie series class\n */\nvar PieSeries = {\n\ttype: 'pie',\n\tisCartesian: false,\n\tpointClass: PiePoint,\n\trequireSorting: false,\n\tdirectTouch: true,\n\tnoSharedTooltip: true,\n\ttrackerGroups: ['group', 'dataLabelsGroup'],\n\taxisTypes: [],\n\tpointAttrToOptions: { // mapping between SVG attributes and the corresponding options\n\t\tstroke: 'borderColor',\n\t\t'stroke-width': 'borderWidth',\n\t\tfill: 'color'\n\t},\n\n\t/**\n\t * Pies have one color each point\n\t */\n\tgetColor: noop,\n\n\t/**\n\t * Animate the pies in\n\t */\n\tanimate: function (init) {\n\t\tvar series = this,\n\t\t\tpoints = series.points,\n\t\t\tstartAngleRad = series.startAngleRad;\n\n\t\tif (!init) {\n\t\t\teach(points, function (point) {\n\t\t\t\tvar graphic = point.graphic,\n\t\t\t\t\targs = point.shapeArgs;\n\n\t\t\t\tif (graphic) {\n\t\t\t\t\t// start values\n\t\t\t\t\tgraphic.attr({\n\t\t\t\t\t\tr: point.startR || (series.center[3] / 2), // animate from inner radius (#779)\n\t\t\t\t\t\tstart: startAngleRad,\n\t\t\t\t\t\tend: startAngleRad\n\t\t\t\t\t});\n\n\t\t\t\t\t// animate\n\t\t\t\t\tgraphic.animate({\n\t\t\t\t\t\tr: args.r,\n\t\t\t\t\t\tstart: args.start,\n\t\t\t\t\t\tend: args.end\n\t\t\t\t\t}, series.options.animation);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// delete this function to allow it only once\n\t\t\tseries.animate = null;\n\t\t}\n\t},\n\n\t/**\n\t * Extend the basic setData method by running processData and generatePoints immediately,\n\t * in order to access the points from the legend.\n\t */\n\tsetData: function (data, redraw, animation, updatePoints) {\n\t\tSeries.prototype.setData.call(this, data, false, animation, updatePoints);\n\t\tthis.processData();\n\t\tthis.generatePoints();\n\t\tif (pick(redraw, true)) {\n\t\t\tthis.chart.redraw(animation);\n\t\t} \n\t},\n\n\t/**\n\t * Recompute total chart sum and update percentages of points.\n\t */\n\tupdateTotals: function () {\n\t\tvar i,\n\t\t\ttotal = 0,\n\t\t\tpoints = this.points,\n\t\t\tlen = points.length,\n\t\t\tpoint,\n\t\t\tignoreHiddenPoint = this.options.ignoreHiddenPoint;\n\n\t\t// Get the total sum\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tpoint = points[i];\n\t\t\ttotal += (ignoreHiddenPoint && !point.visible) ? 0 : point.y;\n\t\t}\n\t\tthis.total = total;\n\n\t\t// Set each point's properties\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tpoint = points[i];\n\t\t\tpoint.percentage = (total > 0 && (point.visible || !ignoreHiddenPoint)) ? point.y / total * 100 : 0;\n\t\t\tpoint.total = total;\n\t\t}\n\t},\n\n\t/**\n\t * Extend the generatePoints method by adding total and percentage properties to each point\n\t */\n\tgeneratePoints: function () {\n\t\tSeries.prototype.generatePoints.call(this);\n\t\tthis.updateTotals();\n\t},\n\t\n\t/**\n\t * Do translation for pie slices\n\t */\n\ttranslate: function (positions) {\n\t\tthis.generatePoints();\n\t\t\n\t\tvar series = this,\n\t\t\tcumulative = 0,\n\t\t\tprecision = 1000, // issue #172\n\t\t\toptions = series.options,\n\t\t\tslicedOffset = options.slicedOffset,\n\t\t\tconnectorOffset = slicedOffset + options.borderWidth,\n\t\t\tstart,\n\t\t\tend,\n\t\t\tangle,\n\t\t\tstartAngle = options.startAngle || 0,\n\t\t\tstartAngleRad = series.startAngleRad = mathPI / 180 * (startAngle - 90),\n\t\t\tendAngleRad = series.endAngleRad = mathPI / 180 * ((pick(options.endAngle, startAngle + 360)) - 90),\n\t\t\tcirc = endAngleRad - startAngleRad, //2 * mathPI,\n\t\t\tpoints = series.points,\n\t\t\tradiusX, // the x component of the radius vector for a given point\n\t\t\tradiusY,\n\t\t\tlabelDistance = options.dataLabels.distance,\n\t\t\tignoreHiddenPoint = options.ignoreHiddenPoint,\n\t\t\ti,\n\t\t\tlen = points.length,\n\t\t\tpoint;\n\n\t\t// Get positions - either an integer or a percentage string must be given.\n\t\t// If positions are passed as a parameter, we're in a recursive loop for adjusting\n\t\t// space for data labels.\n\t\tif (!positions) {\n\t\t\tseries.center = positions = series.getCenter();\n\t\t}\n\n\t\t// utility for getting the x value from a given y, used for anticollision logic in data labels\n\t\tseries.getX = function (y, left) {\n\n\t\t\tangle = math.asin(mathMin((y - positions[1]) / (positions[2] / 2 + labelDistance), 1));\n\n\t\t\treturn positions[0] +\n\t\t\t\t(left ? -1 : 1) *\n\t\t\t\t(mathCos(angle) * (positions[2] / 2 + labelDistance));\n\t\t};\n\n\t\t// Calculate the geometry for each point\n\t\tfor (i = 0; i < len; i++) {\n\t\t\t\n\t\t\tpoint = points[i];\n\t\t\t\n\t\t\t// set start and end angle\n\t\t\tstart = startAngleRad + (cumulative * circ);\n\t\t\tif (!ignoreHiddenPoint || point.visible) {\n\t\t\t\tcumulative += point.percentage / 100;\n\t\t\t}\n\t\t\tend = startAngleRad + (cumulative * circ);\n\n\t\t\t// set the shape\n\t\t\tpoint.shapeType = 'arc';\n\t\t\tpoint.shapeArgs = {\n\t\t\t\tx: positions[0],\n\t\t\t\ty: positions[1],\n\t\t\t\tr: positions[2] / 2,\n\t\t\t\tinnerR: positions[3] / 2,\n\t\t\t\tstart: mathRound(start * precision) / precision,\n\t\t\t\tend: mathRound(end * precision) / precision\n\t\t\t};\n\n\t\t\t// The angle must stay within -90 and 270 (#2645)\n\t\t\tangle = (end + start) / 2;\n\t\t\tif (angle > 1.5 * mathPI) {\n\t\t\t\tangle -= 2 * mathPI;\n\t\t\t} else if (angle < -mathPI / 2) {\n\t\t\t\tangle += 2 * mathPI;\n\t\t\t}\n\n\t\t\t// Center for the sliced out slice\n\t\t\tpoint.slicedTranslation = {\n\t\t\t\ttranslateX: mathRound(mathCos(angle) * slicedOffset),\n\t\t\t\ttranslateY: mathRound(mathSin(angle) * slicedOffset)\n\t\t\t};\n\n\t\t\t// set the anchor point for tooltips\n\t\t\tradiusX = mathCos(angle) * positions[2] / 2;\n\t\t\tradiusY = mathSin(angle) * positions[2] / 2;\n\t\t\tpoint.tooltipPos = [\n\t\t\t\tpositions[0] + radiusX * 0.7,\n\t\t\t\tpositions[1] + radiusY * 0.7\n\t\t\t];\n\t\t\t\n\t\t\tpoint.half = angle < -mathPI / 2 || angle > mathPI / 2 ? 1 : 0;\n\t\t\tpoint.angle = angle;\n\n\t\t\t// set the anchor point for data labels\n\t\t\tconnectorOffset = mathMin(connectorOffset, labelDistance / 2); // #1678\n\t\t\tpoint.labelPos = [\n\t\t\t\tpositions[0] + radiusX + mathCos(angle) * labelDistance, // first break of connector\n\t\t\t\tpositions[1] + radiusY + mathSin(angle) * labelDistance, // a/a\n\t\t\t\tpositions[0] + radiusX + mathCos(angle) * connectorOffset, // second break, right outside pie\n\t\t\t\tpositions[1] + radiusY + mathSin(angle) * connectorOffset, // a/a\n\t\t\t\tpositions[0] + radiusX, // landing point for connector\n\t\t\t\tpositions[1] + radiusY, // a/a\n\t\t\t\tlabelDistance < 0 ? // alignment\n\t\t\t\t\t'center' :\n\t\t\t\t\tpoint.half ? 'right' : 'left', // alignment\n\t\t\t\tangle // center angle\n\t\t\t];\n\n\t\t}\n\t},\n\t\n\tdrawGraph: null,\n\n\t/**\n\t * Draw the data points\n\t */\n\tdrawPoints: function () {\n\t\tvar series = this,\n\t\t\tchart = series.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\tgroupTranslation,\n\t\t\t//center,\n\t\t\tgraphic,\n\t\t\t//group,\n\t\t\tshadow = series.options.shadow,\n\t\t\tshadowGroup,\n\t\t\tshapeArgs,\n\t\t\tattr;\n\n\t\tif (shadow && !series.shadowGroup) {\n\t\t\tseries.shadowGroup = renderer.g('shadow')\n\t\t\t\t.add(series.group);\n\t\t}\n\n\t\t// draw the slices\n\t\teach(series.points, function (point) {\n\t\t\tgraphic = point.graphic;\n\t\t\tshapeArgs = point.shapeArgs;\n\t\t\tshadowGroup = point.shadowGroup;\n\n\t\t\t// put the shadow behind all points\n\t\t\tif (shadow && !shadowGroup) {\n\t\t\t\tshadowGroup = point.shadowGroup = renderer.g('shadow')\n\t\t\t\t\t.add(series.shadowGroup);\n\t\t\t}\n\n\t\t\t// if the point is sliced, use special translation, else use plot area traslation\n\t\t\tgroupTranslation = point.sliced ? point.slicedTranslation : {\n\t\t\t\ttranslateX: 0,\n\t\t\t\ttranslateY: 0\n\t\t\t};\n\n\t\t\t//group.translate(groupTranslation[0], groupTranslation[1]);\n\t\t\tif (shadowGroup) {\n\t\t\t\tshadowGroup.attr(groupTranslation);\n\t\t\t}\n\n\t\t\t// draw the slice\n\t\t\tif (graphic) {\n\t\t\t\tgraphic.animate(extend(shapeArgs, groupTranslation));\t\t\t\t\n\t\t\t} else {\n\t\t\t\tattr = { 'stroke-linejoin': 'round' };\n\t\t\t\tif (!point.visible) {\n\t\t\t\t\tattr.visibility = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tpoint.graphic = graphic = renderer[point.shapeType](shapeArgs)\n\t\t\t\t\t.setRadialReference(series.center)\n\t\t\t\t\t.attr(\n\t\t\t\t\t\tpoint.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE]\n\t\t\t\t\t)\n\t\t\t\t\t.attr(attr)\n\t\t\t\t\t.attr(groupTranslation)\n\t\t\t\t\t.add(series.group)\n\t\t\t\t\t.shadow(shadow, shadowGroup);\t\n\t\t\t}\n\n\t\t});\n\n\t},\n\n\n\tsearchPoint: noop,\n\n\t/**\n\t * Utility for sorting data labels\n\t */\n\tsortByAngle: function (points, sign) {\n\t\tpoints.sort(function (a, b) {\n\t\t\treturn a.angle !== undefined && (b.angle - a.angle) * sign;\n\t\t});\n\t},\t\t\n\n\t/**\n\t * Use a simple symbol from LegendSymbolMixin\n\t */\n\tdrawLegendSymbol: LegendSymbolMixin.drawRectangle,\n\n\t/**\n\t * Use the getCenter method from drawLegendSymbol\n\t */\n\tgetCenter: CenteredSeriesMixin.getCenter,\n\n\t/**\n\t * Pies don't have point marker symbols\n\t */\n\tgetSymbol: noop\n\n};\nPieSeries = extendClass(Series, PieSeries);\nseriesTypes.pie = PieSeries;\n\n/**\n * Draw the data labels\n */\nSeries.prototype.drawDataLabels = function () {\n\n\tvar series = this,\n\t\tseriesOptions = series.options,\n\t\tcursor = seriesOptions.cursor,\n\t\toptions = seriesOptions.dataLabels,\n\t\tpoints = series.points,\n\t\tpointOptions,\n\t\tgeneralOptions,\n\t\thasRendered = series.hasRendered || 0,\n\t\tstr,\n\t\tdataLabelsGroup,\n\t\trenderer = series.chart.renderer;\n\n\tif (options.enabled || series._hasPointLabels) {\n\n\t\t// Process default alignment of data labels for columns\n\t\tif (series.dlProcessOptions) {\n\t\t\tseries.dlProcessOptions(options);\n\t\t}\n\n\t\t// Create a separate group for the data labels to avoid rotation\n\t\tdataLabelsGroup = series.plotGroup(\n\t\t\t'dataLabelsGroup',\n\t\t\t'data-labels',\n\t\t\toptions.defer ? HIDDEN : VISIBLE,\n\t\t\toptions.zIndex || 6\n\t\t);\n\n\t\tif (pick(options.defer, true)) {\n\t\t\tdataLabelsGroup.attr({ opacity: +hasRendered }); // #3300\n\t\t\tif (!hasRendered) {\n\t\t\t\taddEvent(series, 'afterAnimate', function () {\n\t\t\t\t\tif (series.visible) { // #3023, #3024\n\t\t\t\t\t\tdataLabelsGroup.show();\n\t\t\t\t\t}\n\t\t\t\t\tdataLabelsGroup[seriesOptions.animation ? 'animate' : 'attr']({ opacity: 1 }, { duration: 200 });\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Make the labels for each point\n\t\tgeneralOptions = options;\n\t\teach(points, function (point) {\n\n\t\t\tvar enabled,\n\t\t\t\tdataLabel = point.dataLabel,\n\t\t\t\tlabelConfig,\n\t\t\t\tattr,\n\t\t\t\tname,\n\t\t\t\trotation,\n\t\t\t\tconnector = point.connector,\n\t\t\t\tisNew = true,\n\t\t\t\tstyle,\n\t\t\t\tmoreStyle = {};\n\n\t\t\t// Determine if each data label is enabled\n\t\t\tpointOptions = point.dlOptions || (point.options && point.options.dataLabels); // dlOptions is used in treemaps\n\t\t\tenabled = pick(pointOptions && pointOptions.enabled, generalOptions.enabled); // #2282\n\n\n\t\t\t// If the point is outside the plot area, destroy it. #678, #820\n\t\t\tif (dataLabel && !enabled) {\n\t\t\t\tpoint.dataLabel = dataLabel.destroy();\n\n\t\t\t// Individual labels are disabled if the are explicitly disabled\n\t\t\t// in the point options, or if they fall outside the plot area.\n\t\t\t} else if (enabled) {\n\n\t\t\t\t// Create individual options structure that can be extended without\n\t\t\t\t// affecting others\n\t\t\t\toptions = merge(generalOptions, pointOptions);\n\t\t\t\tstyle = options.style;\n\n\t\t\t\trotation = options.rotation;\n\n\t\t\t\t// Get the string\n\t\t\t\tlabelConfig = point.getLabelConfig();\n\t\t\t\tstr = options.format ?\n\t\t\t\t\tformat(options.format, labelConfig) :\n\t\t\t\t\toptions.formatter.call(labelConfig, options);\n\n\t\t\t\t// Determine the color\n\t\t\t\tstyle.color = pick(options.color, style.color, series.color, 'black');\n\n\n\t\t\t\t// update existing label\n\t\t\t\tif (dataLabel) {\n\n\t\t\t\t\tif (defined(str)) {\n\t\t\t\t\t\tdataLabel\n\t\t\t\t\t\t\t.attr({\n\t\t\t\t\t\t\t\ttext: str\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tisNew = false;\n\n\t\t\t\t\t} else { // #1437 - the label is shown conditionally\n\t\t\t\t\t\tpoint.dataLabel = dataLabel = dataLabel.destroy();\n\t\t\t\t\t\tif (connector) {\n\t\t\t\t\t\t\tpoint.connector = connector.destroy();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// create new label\n\t\t\t\t} else if (defined(str)) {\n\t\t\t\t\tattr = {\n\t\t\t\t\t\t//align: align,\n\t\t\t\t\t\tfill: options.backgroundColor,\n\t\t\t\t\t\tstroke: options.borderColor,\n\t\t\t\t\t\t'stroke-width': options.borderWidth,\n\t\t\t\t\t\tr: options.borderRadius || 0,\n\t\t\t\t\t\trotation: rotation,\n\t\t\t\t\t\tpadding: options.padding,\n\t\t\t\t\t\tzIndex: 1\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// Get automated contrast color\n\t\t\t\t\tif (style.color === 'contrast') {\n\t\t\t\t\t\tmoreStyle.color = options.inside || options.distance < 0 || !!seriesOptions.stacking ? \n\t\t\t\t\t\t\trenderer.getContrast(point.color || series.color) : \n\t\t\t\t\t\t\t'#000000';\n\t\t\t\t\t}\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\tmoreStyle.cursor = cursor;\n\t\t\t\t\t}\n\t\t\t\t\t\n\n\t\t\t\t\t// Remove unused attributes (#947)\n\t\t\t\t\tfor (name in attr) {\n\t\t\t\t\t\tif (attr[name] === UNDEFINED) {\n\t\t\t\t\t\t\tdelete attr[name];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdataLabel = point.dataLabel = renderer[rotation ? 'text' : 'label']( // labels don't support rotation\n\t\t\t\t\t\tstr,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t-999,\n\t\t\t\t\t\toptions.shape,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\toptions.useHTML\n\t\t\t\t\t)\n\t\t\t\t\t.attr(attr)\n\t\t\t\t\t.css(extend(style, moreStyle))\n\t\t\t\t\t.add(dataLabelsGroup)\n\t\t\t\t\t.shadow(options.shadow);\n\n\t\t\t\t}\n\n\t\t\t\tif (dataLabel) {\n\t\t\t\t\t// Now the data label is created and placed at 0,0, so we need to align it\n\t\t\t\t\tseries.alignDataLabel(point, dataLabel, options, null, isNew);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Align each individual data label\n */\nSeries.prototype.alignDataLabel = function (point, dataLabel, options, alignTo, isNew) {\n\tvar chart = this.chart,\n\t\tinverted = chart.inverted,\n\t\tplotX = pick(point.plotX, -999),\n\t\tplotY = pick(point.plotY, -999),\n\t\tbBox = dataLabel.getBBox(),\n\t\tbaseline = chart.renderer.fontMetrics(options.style.fontSize).b,\n\t\trotCorr, // rotation correction\n\t\t// Math.round for rounding errors (#2683), alignTo to allow column labels (#2700)\n\t\tvisible = this.visible && (point.series.forceDL || chart.isInsidePlot(plotX, mathRound(plotY), inverted) ||\n\t\t\t(alignTo && chart.isInsidePlot(plotX, inverted ? alignTo.x + 1 : alignTo.y + alignTo.height - 1, inverted))),\n\t\talignAttr; // the final position;\n\n\tif (visible) {\n\n\t\t// The alignment box is a singular point\n\t\talignTo = extend({\n\t\t\tx: inverted ? chart.plotWidth - plotY : plotX,\n\t\t\ty: mathRound(inverted ? chart.plotHeight - plotX : plotY),\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t}, alignTo);\n\n\t\t// Add the text size for alignment calculation\n\t\textend(options, {\n\t\t\twidth: bBox.width,\n\t\t\theight: bBox.height\n\t\t});\n\n\t\t// Allow a hook for changing alignment in the last moment, then do the alignment\n\t\tif (options.rotation) { // Fancy box alignment isn't supported for rotated text\n\t\t\trotCorr = chart.renderer.rotCorr(baseline, options.rotation); // #3723\n\t\t\tdataLabel[isNew ? 'attr' : 'animate']({\n\t\t\t\t\tx: alignTo.x + options.x + alignTo.width / 2 + rotCorr.x,\n\t\t\t\t\ty: alignTo.y + options.y + alignTo.height / 2\n\t\t\t\t})\n\t\t\t\t.attr({ // #3003\n\t\t\t\t\talign: options.align\n\t\t\t\t});\n\t\t} else {\n\t\t\tdataLabel.align(options, null, alignTo);\n\t\t\talignAttr = dataLabel.alignAttr;\n\n\t\t\t// Handle justify or crop\n\t\t\tif (pick(options.overflow, 'justify') === 'justify') {\n\t\t\t\tthis.justifyDataLabel(dataLabel, options, alignAttr, bBox, alignTo, isNew);\n\n\t\t\t} else if (pick(options.crop, true)) {\n\t\t\t\t// Now check that the data label is within the plot area\n\t\t\t\tvisible = chart.isInsidePlot(alignAttr.x, alignAttr.y) && chart.isInsidePlot(alignAttr.x + bBox.width, alignAttr.y + bBox.height);\n\n\t\t\t}\n\n\t\t\t// When we're using a shape, make it possible with a connector or an arrow pointing to thie point\n\t\t\tif (options.shape) {\n\t\t\t\tdataLabel.attr({\n\t\t\t\t\tanchorX: point.plotX,\n\t\t\t\t\tanchorY: point.plotY\n\t\t\t\t});\n\t\t\t}\n\n\t\t}\n\t}\n\n\t// Show or hide based on the final aligned position\n\tif (!visible) {\n\t\tdataLabel.attr({ y: -999 });\n\t\tdataLabel.placed = false; // don't animate back in\n\t}\n\n};\n\n/**\n * If data labels fall partly outside the plot area, align them back in, in a way that\n * doesn't hide the point.\n */\nSeries.prototype.justifyDataLabel = function (dataLabel, options, alignAttr, bBox, alignTo, isNew) {\n\tvar chart = this.chart,\n\t\talign = options.align,\n\t\tverticalAlign = options.verticalAlign,\n\t\toff,\n\t\tjustified,\n\t\tpadding = dataLabel.box ? 0 : (dataLabel.padding || 0);\n\n\t// Off left\n\toff = alignAttr.x + padding;\n\tif (off < 0) {\n\t\tif (align === 'right') {\n\t\t\toptions.align = 'left';\n\t\t} else {\n\t\t\toptions.x = -off;\n\t\t}\n\t\tjustified = true;\n\t}\n\n\t// Off right\n\toff = alignAttr.x + bBox.width - padding;\n\tif (off > chart.plotWidth) {\n\t\tif (align === 'left') {\n\t\t\toptions.align = 'right';\n\t\t} else {\n\t\t\toptions.x = chart.plotWidth - off;\n\t\t}\n\t\tjustified = true;\n\t}\n\n\t// Off top\n\toff = alignAttr.y + padding;\n\tif (off < 0) {\n\t\tif (verticalAlign === 'bottom') {\n\t\t\toptions.verticalAlign = 'top';\n\t\t} else {\n\t\t\toptions.y = -off;\n\t\t}\n\t\tjustified = true;\n\t}\n\n\t// Off bottom\n\toff = alignAttr.y + bBox.height - padding;\n\tif (off > chart.plotHeight) {\n\t\tif (verticalAlign === 'top') {\n\t\t\toptions.verticalAlign = 'bottom';\n\t\t} else {\n\t\t\toptions.y = chart.plotHeight - off;\n\t\t}\n\t\tjustified = true;\n\t}\n\n\tif (justified) {\n\t\tdataLabel.placed = !isNew;\n\t\tdataLabel.align(options, null, alignTo);\n\t}\n};\n\n/**\n * Override the base drawDataLabels method by pie specific functionality\n */\nif (seriesTypes.pie) {\n\tseriesTypes.pie.prototype.drawDataLabels = function () {\n\t\tvar series = this,\n\t\t\tdata = series.data,\n\t\t\tpoint,\n\t\t\tchart = series.chart,\n\t\t\toptions = series.options.dataLabels,\n\t\t\tconnectorPadding = pick(options.connectorPadding, 10),\n\t\t\tconnectorWidth = pick(options.connectorWidth, 1),\n\t\t\tplotWidth = chart.plotWidth,\n\t\t\tplotHeight = chart.plotHeight,\n\t\t\tconnector,\n\t\t\tconnectorPath,\n\t\t\tsoftConnector = pick(options.softConnector, true),\n\t\t\tdistanceOption = options.distance,\n\t\t\tseriesCenter = series.center,\n\t\t\tradius = seriesCenter[2] / 2,\n\t\t\tcenterY = seriesCenter[1],\n\t\t\toutside = distanceOption > 0,\n\t\t\tdataLabel,\n\t\t\tdataLabelWidth,\n\t\t\tlabelPos,\n\t\t\tlabelHeight,\n\t\t\thalves = [// divide the points into right and left halves for anti collision\n\t\t\t\t[], // right\n\t\t\t\t[]  // left\n\t\t\t],\n\t\t\tx,\n\t\t\ty,\n\t\t\tvisibility,\n\t\t\trankArr,\n\t\t\ti,\n\t\t\tj,\n\t\t\toverflow = [0, 0, 0, 0], // top, right, bottom, left\n\t\t\tsort = function (a, b) {\n\t\t\t\treturn b.y - a.y;\n\t\t\t};\n\n\t\t// get out if not enabled\n\t\tif (!series.visible || (!options.enabled && !series._hasPointLabels)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// run parent method\n\t\tSeries.prototype.drawDataLabels.apply(series);\n\n\t\t// arrange points for detection collision\n\t\teach(data, function (point) {\n\t\t\tif (point.dataLabel && point.visible) { // #407, #2510\n\t\t\t\thalves[point.half].push(point);\n\t\t\t}\n\t\t});\n\n\t\t/* Loop over the points in each half, starting from the top and bottom\n\t\t * of the pie to detect overlapping labels.\n\t\t */\n\t\ti = 2;\n\t\twhile (i--) {\n\n\t\t\tvar slots = [],\n\t\t\t\tslotsLength,\n\t\t\t\tusedSlots = [],\n\t\t\t\tpoints = halves[i],\n\t\t\t\tpos,\n\t\t\t\tbottom,\n\t\t\t\tlength = points.length,\n\t\t\t\tslotIndex;\n\n\t\t\tif (!length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Sort by angle\n\t\t\tseries.sortByAngle(points, i - 0.5);\n\n\t\t\t// Assume equal label heights on either hemisphere (#2630)\n\t\t\tj = labelHeight = 0;\n\t\t\twhile (!labelHeight && points[j]) { // #1569\n\t\t\t\tlabelHeight = points[j] && points[j].dataLabel && (points[j].dataLabel.getBBox().height || 21); // 21 is for #968\n\t\t\t\tj++;\n\t\t\t}\n\n\t\t\t// Only do anti-collision when we are outside the pie and have connectors (#856)\n\t\t\tif (distanceOption > 0) {\n\n\t\t\t\t// Build the slots\n\t\t\t\tbottom = mathMin(centerY + radius + distanceOption, chart.plotHeight);\n\t\t\t\tfor (pos = mathMax(0, centerY - radius - distanceOption); pos <= bottom; pos += labelHeight) {\n\t\t\t\t\tslots.push(pos);\n\t\t\t\t}\n\t\t\t\tslotsLength = slots.length;\n\n\n\t\t\t\t/* Visualize the slots\n\t\t\t\tif (!series.slotElements) {\n\t\t\t\t\tseries.slotElements = [];\n\t\t\t\t}\n\t\t\t\tif (i === 1) {\n\t\t\t\t\tseries.slotElements.forEach(function (elem) {\n\t\t\t\t\t\telem.destroy();\n\t\t\t\t\t});\n\t\t\t\t\tseries.slotElements.length = 0;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tslots.forEach(function (pos, no) {\n\t\t\t\t\tvar slotX = series.getX(pos, i) + chart.plotLeft - (i ? 100 : 0),\n\t\t\t\t\t\tslotY = pos + chart.plotTop;\n\t\t\t\t\t\n\t\t\t\t\tif (!isNaN(slotX)) {\n\t\t\t\t\t\tseries.slotElements.push(chart.renderer.rect(slotX, slotY - 7, 100, labelHeight, 1)\n\t\t\t\t\t\t\t.attr({\n\t\t\t\t\t\t\t\t'stroke-width': 1,\n\t\t\t\t\t\t\t\tstroke: 'silver',\n\t\t\t\t\t\t\t\tfill: 'rgba(0,0,255,0.1)'\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.add());\n\t\t\t\t\t\tseries.slotElements.push(chart.renderer.text('Slot '+ no, slotX, slotY + 4)\n\t\t\t\t\t\t\t.attr({\n\t\t\t\t\t\t\t\tfill: 'silver'\n\t\t\t\t\t\t\t}).add());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// */\n\n\t\t\t\t// if there are more values than available slots, remove lowest values\n\t\t\t\tif (length > slotsLength) {\n\t\t\t\t\t// create an array for sorting and ranking the points within each quarter\n\t\t\t\t\trankArr = [].concat(points);\n\t\t\t\t\trankArr.sort(sort);\n\t\t\t\t\tj = length;\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\trankArr[j].rank = j;\n\t\t\t\t\t}\n\t\t\t\t\tj = length;\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\tif (points[j].rank >= slotsLength) {\n\t\t\t\t\t\t\tpoints.splice(j, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlength = points.length;\n\t\t\t\t}\n\n\t\t\t\t// The label goes to the nearest open slot, but not closer to the edge than\n\t\t\t\t// the label's index.\n\t\t\t\tfor (j = 0; j < length; j++) {\n\n\t\t\t\t\tpoint = points[j];\n\t\t\t\t\tlabelPos = point.labelPos;\n\n\t\t\t\t\tvar closest = 9999,\n\t\t\t\t\t\tdistance,\n\t\t\t\t\t\tslotI;\n\n\t\t\t\t\t// find the closest slot index\n\t\t\t\t\tfor (slotI = 0; slotI < slotsLength; slotI++) {\n\t\t\t\t\t\tdistance = mathAbs(slots[slotI] - labelPos[1]);\n\t\t\t\t\t\tif (distance < closest) {\n\t\t\t\t\t\t\tclosest = distance;\n\t\t\t\t\t\t\tslotIndex = slotI;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// if that slot index is closer to the edges of the slots, move it\n\t\t\t\t\t// to the closest appropriate slot\n\t\t\t\t\tif (slotIndex < j && slots[j] !== null) { // cluster at the top\n\t\t\t\t\t\tslotIndex = j;\n\t\t\t\t\t} else if (slotsLength  < length - j + slotIndex && slots[j] !== null) { // cluster at the bottom\n\t\t\t\t\t\tslotIndex = slotsLength - length + j;\n\t\t\t\t\t\twhile (slots[slotIndex] === null) { // make sure it is not taken\n\t\t\t\t\t\t\tslotIndex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Slot is taken, find next free slot below. In the next run, the next slice will find the\n\t\t\t\t\t\t// slot above these, because it is the closest one\n\t\t\t\t\t\twhile (slots[slotIndex] === null) { // make sure it is not taken\n\t\t\t\t\t\t\tslotIndex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tusedSlots.push({ i: slotIndex, y: slots[slotIndex] });\n\t\t\t\t\tslots[slotIndex] = null; // mark as taken\n\t\t\t\t}\n\t\t\t\t// sort them in order to fill in from the top\n\t\t\t\tusedSlots.sort(sort);\n\t\t\t}\n\n\t\t\t// now the used slots are sorted, fill them up sequentially\n\t\t\tfor (j = 0; j < length; j++) {\n\n\t\t\t\tvar slot, naturalY;\n\n\t\t\t\tpoint = points[j];\n\t\t\t\tlabelPos = point.labelPos;\n\t\t\t\tdataLabel = point.dataLabel;\n\t\t\t\tvisibility = point.visible === false ? HIDDEN : 'inherit';\n\t\t\t\tnaturalY = labelPos[1];\n\n\t\t\t\tif (distanceOption > 0) {\n\t\t\t\t\tslot = usedSlots.pop();\n\t\t\t\t\tslotIndex = slot.i;\n\n\t\t\t\t\t// if the slot next to currrent slot is free, the y value is allowed\n\t\t\t\t\t// to fall back to the natural position\n\t\t\t\t\ty = slot.y;\n\t\t\t\t\tif ((naturalY > y && slots[slotIndex + 1] !== null) ||\n\t\t\t\t\t\t\t(naturalY < y &&  slots[slotIndex - 1] !== null)) {\n\t\t\t\t\t\ty = mathMin(mathMax(0, naturalY), chart.plotHeight);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\ty = naturalY;\n\t\t\t\t}\n\n\t\t\t\t// get the x - use the natural x position for first and last slot, to prevent the top\n\t\t\t\t// and botton slice connectors from touching each other on either side\n\t\t\t\tx = options.justify ?\n\t\t\t\t\tseriesCenter[0] + (i ? -1 : 1) * (radius + distanceOption) :\n\t\t\t\t\tseries.getX(y === centerY - radius - distanceOption || y === centerY + radius + distanceOption ? naturalY : y, i);\n\n\n\t\t\t\t// Record the placement and visibility\n\t\t\t\tdataLabel._attr = {\n\t\t\t\t\tvisibility: visibility,\n\t\t\t\t\talign: labelPos[6]\n\t\t\t\t};\n\t\t\t\tdataLabel._pos = {\n\t\t\t\t\tx: x + options.x +\n\t\t\t\t\t\t({ left: connectorPadding, right: -connectorPadding }[labelPos[6]] || 0),\n\t\t\t\t\ty: y + options.y - 10 // 10 is for the baseline (label vs text)\n\t\t\t\t};\n\t\t\t\tdataLabel.connX = x;\n\t\t\t\tdataLabel.connY = y;\n\n\n\t\t\t\t// Detect overflowing data labels\n\t\t\t\tif (this.options.size === null) {\n\t\t\t\t\tdataLabelWidth = dataLabel.width;\n\t\t\t\t\t// Overflow left\n\t\t\t\t\tif (x - dataLabelWidth < connectorPadding) {\n\t\t\t\t\t\toverflow[3] = mathMax(mathRound(dataLabelWidth - x + connectorPadding), overflow[3]);\n\n\t\t\t\t\t// Overflow right\n\t\t\t\t\t} else if (x + dataLabelWidth > plotWidth - connectorPadding) {\n\t\t\t\t\t\toverflow[1] = mathMax(mathRound(x + dataLabelWidth - plotWidth + connectorPadding), overflow[1]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Overflow top\n\t\t\t\t\tif (y - labelHeight / 2 < 0) {\n\t\t\t\t\t\toverflow[0] = mathMax(mathRound(-y + labelHeight / 2), overflow[0]);\n\n\t\t\t\t\t// Overflow left\n\t\t\t\t\t} else if (y + labelHeight / 2 > plotHeight) {\n\t\t\t\t\t\toverflow[2] = mathMax(mathRound(y + labelHeight / 2 - plotHeight), overflow[2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for each point\n\t\t} // for each half\n\n\t\t// Do not apply the final placement and draw the connectors until we have verified\n\t\t// that labels are not spilling over.\n\t\tif (arrayMax(overflow) === 0 || this.verifyDataLabelOverflow(overflow)) {\n\n\t\t\t// Place the labels in the final position\n\t\t\tthis.placeDataLabels();\n\n\t\t\t// Draw the connectors\n\t\t\tif (outside && connectorWidth) {\n\t\t\t\teach(this.points, function (point) {\n\t\t\t\t\tconnector = point.connector;\n\t\t\t\t\tlabelPos = point.labelPos;\n\t\t\t\t\tdataLabel = point.dataLabel;\n\n\t\t\t\t\tif (dataLabel && dataLabel._pos && point.visible) {\n\t\t\t\t\t\tvisibility = dataLabel._attr.visibility;\n\t\t\t\t\t\tx = dataLabel.connX;\n\t\t\t\t\t\ty = dataLabel.connY;\n\t\t\t\t\t\tconnectorPath = softConnector ? [\n\t\t\t\t\t\t\tM,\n\t\t\t\t\t\t\tx + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label\n\t\t\t\t\t\t\t'C',\n\t\t\t\t\t\t\tx, y, // first break, next to the label\n\t\t\t\t\t\t\t2 * labelPos[2] - labelPos[4], 2 * labelPos[3] - labelPos[5],\n\t\t\t\t\t\t\tlabelPos[2], labelPos[3], // second break\n\t\t\t\t\t\t\tL,\n\t\t\t\t\t\t\tlabelPos[4], labelPos[5] // base\n\t\t\t\t\t\t] : [\n\t\t\t\t\t\t\tM,\n\t\t\t\t\t\t\tx + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label\n\t\t\t\t\t\t\tL,\n\t\t\t\t\t\t\tlabelPos[2], labelPos[3], // second break\n\t\t\t\t\t\t\tL,\n\t\t\t\t\t\t\tlabelPos[4], labelPos[5] // base\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tif (connector) {\n\t\t\t\t\t\t\tconnector.animate({ d: connectorPath });\n\t\t\t\t\t\t\tconnector.attr('visibility', visibility);\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpoint.connector = connector = series.chart.renderer.path(connectorPath).attr({\n\t\t\t\t\t\t\t\t'stroke-width': connectorWidth,\n\t\t\t\t\t\t\t\tstroke: options.connectorColor || point.color || '#606060',\n\t\t\t\t\t\t\t\tvisibility: visibility\n\t\t\t\t\t\t\t\t//zIndex: 0 // #2722 (reversed)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.add(series.dataLabelsGroup);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (connector) {\n\t\t\t\t\t\tpoint.connector = connector.destroy();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * Perform the final placement of the data labels after we have verified that they\n\t * fall within the plot area.\n\t */\n\tseriesTypes.pie.prototype.placeDataLabels = function () {\n\t\teach(this.points, function (point) {\n\t\t\tvar dataLabel = point.dataLabel,\n\t\t\t\t_pos;\n\n\t\t\tif (dataLabel && point.visible) {\n\t\t\t\t_pos = dataLabel._pos;\n\t\t\t\tif (_pos) {\n\t\t\t\t\tdataLabel.attr(dataLabel._attr);\n\t\t\t\t\tdataLabel[dataLabel.moved ? 'animate' : 'attr'](_pos);\n\t\t\t\t\tdataLabel.moved = true;\n\t\t\t\t} else if (dataLabel) {\n\t\t\t\t\tdataLabel.attr({ y: -999 });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tseriesTypes.pie.prototype.alignDataLabel =  noop;\n\n\t/**\n\t * Verify whether the data labels are allowed to draw, or we should run more translation and data\n\t * label positioning to keep them inside the plot area. Returns true when data labels are ready\n\t * to draw.\n\t */\n\tseriesTypes.pie.prototype.verifyDataLabelOverflow = function (overflow) {\n\n\t\tvar center = this.center,\n\t\t\toptions = this.options,\n\t\t\tcenterOption = options.center,\n\t\t\tminSize = options.minSize || 80,\n\t\t\tnewSize = minSize,\n\t\t\tret;\n\n\t\t// Handle horizontal size and center\n\t\tif (centerOption[0] !== null) { // Fixed center\n\t\t\tnewSize = mathMax(center[2] - mathMax(overflow[1], overflow[3]), minSize);\n\n\t\t} else { // Auto center\n\t\t\tnewSize = mathMax(\n\t\t\t\tcenter[2] - overflow[1] - overflow[3], // horizontal overflow\n\t\t\t\tminSize\n\t\t\t);\n\t\t\tcenter[0] += (overflow[3] - overflow[1]) / 2; // horizontal center\n\t\t}\n\n\t\t// Handle vertical size and center\n\t\tif (centerOption[1] !== null) { // Fixed center\n\t\t\tnewSize = mathMax(mathMin(newSize, center[2] - mathMax(overflow[0], overflow[2])), minSize);\n\n\t\t} else { // Auto center\n\t\t\tnewSize = mathMax(\n\t\t\t\tmathMin(\n\t\t\t\t\tnewSize,\n\t\t\t\t\tcenter[2] - overflow[0] - overflow[2] // vertical overflow\n\t\t\t\t),\n\t\t\t\tminSize\n\t\t\t);\n\t\t\tcenter[1] += (overflow[0] - overflow[2]) / 2; // vertical center\n\t\t}\n\n\t\t// If the size must be decreased, we need to run translate and drawDataLabels again\n\t\tif (newSize < center[2]) {\n\t\t\tcenter[2] = newSize;\n\t\t\tcenter[3] = relativeLength(options.innerSize || 0, newSize);\n\t\t\tthis.translate(center);\n\t\t\teach(this.points, function (point) {\n\t\t\t\tif (point.dataLabel) {\n\t\t\t\t\tpoint.dataLabel._pos = null; // reset\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (this.drawDataLabels) {\n\t\t\t\tthis.drawDataLabels();\n\t\t\t}\n\t\t// Else, return true to indicate that the pie and its labels is within the plot area\n\t\t} else {\n\t\t\tret = true;\n\t\t}\n\t\treturn ret;\n\t};\n}\n\nif (seriesTypes.column) {\n\n\t/**\n\t * Override the basic data label alignment by adjusting for the position of the column\n\t */\n\tseriesTypes.column.prototype.alignDataLabel = function (point, dataLabel, options,  alignTo, isNew) {\n\t\tvar inverted = this.chart.inverted,\n\t\t\tseries = point.series,\n\t\t\tdlBox = point.dlBox || point.shapeArgs, // data label box for alignment\n\t\t\tbelow = pick(point.below, point.plotY > pick(this.translatedThreshold, series.yAxis.len)), // point.below is used in range series\n\t\t\tinside = pick(options.inside, !!this.options.stacking); // draw it inside the box?\n\n\t\t// Align to the column itself, or the top of it\n\t\tif (dlBox) { // Area range uses this method but not alignTo\n\t\t\talignTo = merge(dlBox);\n\n\t\t\tif (inverted) {\n\t\t\t\talignTo = {\n\t\t\t\t\tx: series.yAxis.len - alignTo.y - alignTo.height,\n\t\t\t\t\ty: series.xAxis.len - alignTo.x - alignTo.width,\n\t\t\t\t\twidth: alignTo.height,\n\t\t\t\t\theight: alignTo.width\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Compute the alignment box\n\t\t\tif (!inside) {\n\t\t\t\tif (inverted) {\n\t\t\t\t\talignTo.x += below ? 0 : alignTo.width;\n\t\t\t\t\talignTo.width = 0;\n\t\t\t\t} else {\n\t\t\t\t\talignTo.y += below ? alignTo.height : 0;\n\t\t\t\t\talignTo.height = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t// When alignment is undefined (typically columns and bars), display the individual\n\t\t// point below or above the point depending on the threshold\n\t\toptions.align = pick(\n\t\t\toptions.align,\n\t\t\t!inverted || inside ? 'center' : below ? 'right' : 'left'\n\t\t);\n\t\toptions.verticalAlign = pick(\n\t\t\toptions.verticalAlign,\n\t\t\tinverted || inside ? 'middle' : below ? 'top' : 'bottom'\n\t\t);\n\n\t\t// Call the parent method\n\t\tSeries.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);\n\t};\n}\n\n\n\n/**\n * Highcharts JS v4.1.7 (2015-06-26)\n * Highcharts module to hide overlapping data labels. This module is included by default in Highmaps.\n *\n * (c) 2010-2014 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n\n/*global Highcharts, HighchartsAdapter */\n(function (H) {\n\tvar Chart = H.Chart,\n\t\teach = H.each,\n\t\tpick = H.pick,\n\t\taddEvent = HighchartsAdapter.addEvent;\n\n\t// Collect potensial overlapping data labels. Stack labels probably don't need to be \n\t// considered because they are usually accompanied by data labels that lie inside the columns.\n\tChart.prototype.callbacks.push(function (chart) {\n\t\tfunction collectAndHide() {\n\t\t\tvar labels = [];\n\n\t\t\teach(chart.series, function (series) {\n\t\t\t\tvar dlOptions = series.options.dataLabels;\n\t\t\t\tif ((dlOptions.enabled || series._hasPointLabels) && !dlOptions.allowOverlap && series.visible) { // #3866\n\t\t\t\t\teach(series.points, function (point) { \n\t\t\t\t\t\tif (point.dataLabel) {\n\t\t\t\t\t\t\tpoint.dataLabel.labelrank = pick(point.labelrank, point.shapeArgs && point.shapeArgs.height); // #4118\n\t\t\t\t\t\t\tlabels.push(point.dataLabel);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tchart.hideOverlappingLabels(labels);\n\t\t}\n\n\t\t// Do it now ...\n\t\tcollectAndHide();\n\n\t\t// ... and after each chart redraw\n\t\taddEvent(chart, 'redraw', collectAndHide);\n\n\t});\n\n\t/**\n\t * Hide overlapping labels. Labels are moved and faded in and out on zoom to provide a smooth \n\t * visual imression.\n\t */\t\t\n\tChart.prototype.hideOverlappingLabels = function (labels) {\n\n\t\tvar len = labels.length,\n\t\t\tlabel,\n\t\t\ti,\n\t\t\tj,\n\t\t\tlabel1,\n\t\t\tlabel2,\n\t\t\tintersectRect = function (pos1, pos2, size1, size2) {\n\t\t\t\treturn !(\n\t\t\t\t\tpos2.x > pos1.x + size1.width ||\n\t\t\t\t\tpos2.x + size2.width < pos1.x ||\n\t\t\t\t\tpos2.y > pos1.y + size1.height ||\n\t\t\t\t\tpos2.y + size2.height < pos1.y\n\t\t\t\t);\n\t\t\t};\n\t\n\t\t// Mark with initial opacity\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tlabel = labels[i];\n\t\t\tif (label) {\n\t\t\t\tlabel.oldOpacity = label.opacity;\n\t\t\t\tlabel.newOpacity = 1;\n\t\t\t}\n\t\t}\n\n\t\t// Prevent a situation in a gradually rising slope, that each label\n\t\t// will hide the previous one because the previous one always has\n\t\t// lower rank.\n\t\tlabels.sort(function (a, b) {\n\t\t\treturn b.labelrank - a.labelrank;\n\t\t});\n\n\t\t// Detect overlapping labels\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tlabel1 = labels[i];\n\n\t\t\tfor (j = i + 1; j < len; ++j) {\n\t\t\t\tlabel2 = labels[j];\n\t\t\t\tif (label1 && label2 && label1.placed && label2.placed && label1.newOpacity !== 0 && label2.newOpacity !== 0 && \n\t\t\t\t\t\tintersectRect(label1.alignAttr, label2.alignAttr, label1, label2)) {\n\t\t\t\t\t(label1.labelrank < label2.labelrank ? label1 : label2).newOpacity = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Hide or show\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tlabel = labels[i];\n\t\t\tif (label) {\n\t\t\t\tif (label.oldOpacity !== label.newOpacity && label.placed) {\n\t\t\t\t\tlabel.alignAttr.opacity = label.newOpacity;\n\t\t\t\t\tlabel[label.isOld && label.newOpacity ? 'animate' : 'attr'](label.alignAttr);\n\t\t\t\t}\n\t\t\t\tlabel.isOld = true;\n\t\t\t}\n\t\t}\n\t};\n\n}(Highcharts));/**\n * TrackerMixin for points and graphs\n */\n\nvar TrackerMixin = Highcharts.TrackerMixin = {\n\n\tdrawTrackerPoint: function () {\n\t\tvar series = this,\n\t\t\tchart = series.chart,\n\t\t\tpointer = chart.pointer,\n\t\t\tcursor = series.options.cursor,\n\t\t\tcss = cursor && { cursor: cursor },\n\t\t\tonMouseOver = function (e) {\n\t\t\t\tvar target = e.target,\n\t\t\t\tpoint;\n\n\t\t\t\twhile (target && !point) {\n\t\t\t\t\tpoint = target.point;\n\t\t\t\t\ttarget = target.parentNode;\n\t\t\t\t}\n\n\t\t\t\tif (point !== UNDEFINED && point !== chart.hoverPoint) { // undefined on graph in scatterchart\n\t\t\t\t\tpoint.onMouseOver(e);\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Add reference to the point\n\t\teach(series.points, function (point) {\n\t\t\tif (point.graphic) {\n\t\t\t\tpoint.graphic.element.point = point;\n\t\t\t}\n\t\t\tif (point.dataLabel) {\n\t\t\t\tpoint.dataLabel.element.point = point;\n\t\t\t}\n\t\t});\n\n\t\t// Add the event listeners, we need to do this only once\n\t\tif (!series._hasTracking) {\n\t\t\teach(series.trackerGroups, function (key) {\n\t\t\t\tif (series[key]) { // we don't always have dataLabelsGroup\n\t\t\t\t\tseries[key]\n\t\t\t\t\t\t.addClass(PREFIX + 'tracker')\n\t\t\t\t\t\t.on('mouseover', onMouseOver)\n\t\t\t\t\t\t.on('mouseout', function (e) { pointer.onTrackerMouseOut(e); })\n\t\t\t\t\t\t.css(css);\n\t\t\t\t\tif (hasTouch) {\n\t\t\t\t\t\tseries[key].on('touchstart', onMouseOver);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tseries._hasTracking = true;\n\t\t}\n\t},\n\n\t/**\n\t * Draw the tracker object that sits above all data labels and markers to\n\t * track mouse events on the graph or points. For the line type charts\n\t * the tracker uses the same graphPath, but with a greater stroke width\n\t * for better control.\n\t */\n\tdrawTrackerGraph: function () {\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\ttrackByArea = options.trackByArea,\n\t\t\ttrackerPath = [].concat(trackByArea ? series.areaPath : series.graphPath),\n\t\t\ttrackerPathLength = trackerPath.length,\n\t\t\tchart = series.chart,\n\t\t\tpointer = chart.pointer,\n\t\t\trenderer = chart.renderer,\n\t\t\tsnap = chart.options.tooltip.snap,\n\t\t\ttracker = series.tracker,\n\t\t\tcursor = options.cursor,\n\t\t\tcss = cursor && { cursor: cursor },\n\t\t\tsinglePoints = series.singlePoints,\n\t\t\tsinglePoint,\n\t\t\ti,\n\t\t\tonMouseOver = function () {\n\t\t\t\tif (chart.hoverSeries !== series) {\n\t\t\t\t\tseries.onMouseOver();\n\t\t\t\t}\n\t\t\t},\n\t\t\t/*\n\t\t\t * Empirical lowest possible opacities for TRACKER_FILL for an element to stay invisible but clickable\n\t\t\t * IE6: 0.002\n\t\t\t * IE7: 0.002\n\t\t\t * IE8: 0.002\n\t\t\t * IE9: 0.00000000001 (unlimited)\n\t\t\t * IE10: 0.0001 (exporting only)\n\t\t\t * FF: 0.00000000001 (unlimited)\n\t\t\t * Chrome: 0.000001\n\t\t\t * Safari: 0.000001\n\t\t\t * Opera: 0.00000000001 (unlimited)\n\t\t\t */\n\t\t\tTRACKER_FILL = 'rgba(192,192,192,' + (hasSVG ? 0.0001 : 0.002) + ')';\n\n\t\t// Extend end points. A better way would be to use round linecaps,\n\t\t// but those are not clickable in VML.\n\t\tif (trackerPathLength && !trackByArea) {\n\t\t\ti = trackerPathLength + 1;\n\t\t\twhile (i--) {\n\t\t\t\tif (trackerPath[i] === M) { // extend left side\n\t\t\t\t\ttrackerPath.splice(i + 1, 0, trackerPath[i + 1] - snap, trackerPath[i + 2], L);\n\t\t\t\t}\n\t\t\t\tif ((i && trackerPath[i] === M) || i === trackerPathLength) { // extend right side\n\t\t\t\t\ttrackerPath.splice(i, 0, L, trackerPath[i - 2] + snap, trackerPath[i - 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// handle single points\n\t\tfor (i = 0; i < singlePoints.length; i++) {\n\t\t\tsinglePoint = singlePoints[i];\n\t\t\ttrackerPath.push(M, singlePoint.plotX - snap, singlePoint.plotY,\n\t\t\tL, singlePoint.plotX + snap, singlePoint.plotY);\n\t\t}\n\n\t\t// draw the tracker\n\t\tif (tracker) {\n\t\t\ttracker.attr({ d: trackerPath });\n\t\t} else { // create\n\n\t\t\tseries.tracker = renderer.path(trackerPath)\n\t\t\t.attr({\n\t\t\t\t'stroke-linejoin': 'round', // #1225\n\t\t\t\tvisibility: series.visible ? VISIBLE : HIDDEN,\n\t\t\t\tstroke: TRACKER_FILL,\n\t\t\t\tfill: trackByArea ? TRACKER_FILL : NONE,\n\t\t\t\t'stroke-width' : options.lineWidth + (trackByArea ? 0 : 2 * snap),\n\t\t\t\tzIndex: 2\n\t\t\t})\n\t\t\t.add(series.group);\n\n\t\t\t// The tracker is added to the series group, which is clipped, but is covered\n\t\t\t// by the marker group. So the marker group also needs to capture events.\n\t\t\teach([series.tracker, series.markerGroup], function (tracker) {\n\t\t\t\ttracker.addClass(PREFIX + 'tracker')\n\t\t\t\t\t.on('mouseover', onMouseOver)\n\t\t\t\t\t.on('mouseout', function (e) { pointer.onTrackerMouseOut(e); })\n\t\t\t\t\t.css(css);\n\n\t\t\t\tif (hasTouch) {\n\t\t\t\t\ttracker.on('touchstart', onMouseOver);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n};\n/* End TrackerMixin */\n\n\n/**\n * Add tracking event listener to the series group, so the point graphics\n * themselves act as trackers\n */ \n\nif (seriesTypes.column) {\n\tColumnSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;\t\n}\n\nif (seriesTypes.pie) {\n\tseriesTypes.pie.prototype.drawTracker = TrackerMixin.drawTrackerPoint;\n}\n\nif (seriesTypes.scatter) {\n\tScatterSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;\n}\n\n/* \n * Extend Legend for item events \n */ \nextend(Legend.prototype, {\n\n\tsetItemEvents: function (item, legendItem, useHTML, itemStyle, itemHiddenStyle) {\n\tvar legend = this;\n\t// Set the events on the item group, or in case of useHTML, the item itself (#1249)\n\t(useHTML ? legendItem : item.legendGroup).on('mouseover', function () {\n\t\t\titem.setState(HOVER_STATE);\n\t\t\tlegendItem.css(legend.options.itemHoverStyle);\n\t\t})\n\t\t.on('mouseout', function () {\n\t\t\tlegendItem.css(item.visible ? itemStyle : itemHiddenStyle);\n\t\t\titem.setState();\n\t\t})\n\t\t.on('click', function (event) {\n\t\t\tvar strLegendItemClick = 'legendItemClick',\n\t\t\t\tfnLegendItemClick = function () {\n\t\t\t\t\titem.setVisible();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t// Pass over the click/touch event. #4.\n\t\t\tevent = {\n\t\t\t\tbrowserEvent: event\n\t\t\t};\n\n\t\t\t// click the name or symbol\n\t\t\tif (item.firePointEvent) { // point\n\t\t\t\titem.firePointEvent(strLegendItemClick, event, fnLegendItemClick);\n\t\t\t} else {\n\t\t\t\tfireEvent(item, strLegendItemClick, event, fnLegendItemClick);\n\t\t\t}\n\t\t});\n\t},\n\n\tcreateCheckboxForItem: function (item) {\n\t\tvar legend = this;\n\n\t\titem.checkbox = createElement('input', {\n\t\t\ttype: 'checkbox',\n\t\t\tchecked: item.selected,\n\t\t\tdefaultChecked: item.selected // required by IE7\n\t\t}, legend.options.itemCheckboxStyle, legend.chart.container);\n\n\t\taddEvent(item.checkbox, 'click', function (event) {\n\t\t\tvar target = event.target;\n\t\t\tfireEvent(item.series || item, 'checkboxClick', { // #3712\n\t\t\t\t\tchecked: target.checked,\n\t\t\t\t\titem: item\n\t\t\t\t},\n\t\t\t\tfunction () {\n\t\t\t\t\titem.select();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\t\n});\n\n/* \n * Add pointer cursor to legend itemstyle in defaultOptions\n */\ndefaultOptions.legend.itemStyle.cursor = 'pointer';\n\n\n/* \n * Extend the Chart object with interaction\n */\n\nextend(Chart.prototype, {\n\t/**\n\t * Display the zoom button\n\t */\n\tshowResetZoom: function () {\n\t\tvar chart = this,\n\t\t\tlang = defaultOptions.lang,\n\t\t\tbtnOptions = chart.options.chart.resetZoomButton,\n\t\t\ttheme = btnOptions.theme,\n\t\t\tstates = theme.states,\n\t\t\talignTo = btnOptions.relativeTo === 'chart' ? null : 'plotBox';\n\t\t\t\n\t\tthis.resetZoomButton = chart.renderer.button(lang.resetZoom, null, null, function () { chart.zoomOut(); }, theme, states && states.hover)\n\t\t\t.attr({\n\t\t\t\talign: btnOptions.position.align,\n\t\t\t\ttitle: lang.resetZoomTitle\n\t\t\t})\n\t\t\t.add()\n\t\t\t.align(btnOptions.position, false, alignTo);\n\t\t\t\n\t},\n\n\t/**\n\t * Zoom out to 1:1\n\t */\n\tzoomOut: function () {\n\t\tvar chart = this;\n\t\tfireEvent(chart, 'selection', { resetSelection: true }, function () { \n\t\t\tchart.zoom();\n\t\t});\n\t},\n\n\t/**\n\t * Zoom into a given portion of the chart given by axis coordinates\n\t * @param {Object} event\n\t */\n\tzoom: function (event) {\n\t\tvar chart = this,\n\t\t\thasZoomed,\n\t\t\tpointer = chart.pointer,\n\t\t\tdisplayButton = false,\n\t\t\tresetZoomButton;\n\n\t\t// If zoom is called with no arguments, reset the axes\n\t\tif (!event || event.resetSelection) {\n\t\t\teach(chart.axes, function (axis) {\n\t\t\t\thasZoomed = axis.zoom();\n\t\t\t});\n\t\t} else { // else, zoom in on all axes\n\t\t\teach(event.xAxis.concat(event.yAxis), function (axisData) {\n\t\t\t\tvar axis = axisData.axis,\n\t\t\t\t\tisXAxis = axis.isXAxis;\n\n\t\t\t\t// don't zoom more than minRange\n\t\t\t\tif (pointer[isXAxis ? 'zoomX' : 'zoomY'] || pointer[isXAxis ? 'pinchX' : 'pinchY']) {\n\t\t\t\t\thasZoomed = axis.zoom(axisData.min, axisData.max);\n\t\t\t\t\tif (axis.displayBtn) {\n\t\t\t\t\t\tdisplayButton = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\t// Show or hide the Reset zoom button\n\t\tresetZoomButton = chart.resetZoomButton;\n\t\tif (displayButton && !resetZoomButton) {\n\t\t\tchart.showResetZoom();\n\t\t} else if (!displayButton && isObject(resetZoomButton)) {\n\t\t\tchart.resetZoomButton = resetZoomButton.destroy();\n\t\t}\n\t\t\n\n\t\t// Redraw\n\t\tif (hasZoomed) {\n\t\t\tchart.redraw(\n\t\t\t\tpick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100) // animation\n\t\t\t);\n\t\t}\n\t},\n\n\t/**\n\t * Pan the chart by dragging the mouse across the pane. This function is called\n\t * on mouse move, and the distance to pan is computed from chartX compared to\n\t * the first chartX position in the dragging operation.\n\t */\n\tpan: function (e, panning) {\n\n\t\tvar chart = this,\n\t\t\thoverPoints = chart.hoverPoints,\n\t\t\tdoRedraw;\n\n\t\t// remove active points for shared tooltip\n\t\tif (hoverPoints) {\n\t\t\teach(hoverPoints, function (point) {\n\t\t\t\tpoint.setState();\n\t\t\t});\n\t\t}\n\n\t\teach(panning === 'xy' ? [1, 0] : [1], function (isX) { // xy is used in maps\n\t\t\tvar mousePos = e[isX ? 'chartX' : 'chartY'],\n\t\t\t\taxis = chart[isX ? 'xAxis' : 'yAxis'][0],\n\t\t\t\tstartPos = chart[isX ? 'mouseDownX' : 'mouseDownY'],\n\t\t\t\thalfPointRange = (axis.pointRange || 0) / 2,\n\t\t\t\textremes = axis.getExtremes(),\n\t\t\t\tnewMin = axis.toValue(startPos - mousePos, true) + halfPointRange,\n\t\t\t\tnewMax = axis.toValue(startPos + chart[isX ? 'plotWidth' : 'plotHeight'] - mousePos, true) - halfPointRange,\n\t\t\t\tgoingLeft = startPos > mousePos; // #3613\n\n\t\t\tif (axis.series.length && \n\t\t\t\t\t(goingLeft || newMin > mathMin(extremes.dataMin, extremes.min)) && \n\t\t\t\t\t(!goingLeft || newMax < mathMax(extremes.dataMax, extremes.max))) {\n\t\t\t\taxis.setExtremes(newMin, newMax, false, false, { trigger: 'pan' });\n\t\t\t\tdoRedraw = true;\n\t\t\t}\n\n\t\t\tchart[isX ? 'mouseDownX' : 'mouseDownY'] = mousePos; // set new reference for next run\n\t\t});\n\n\t\tif (doRedraw) {\n\t\t\tchart.redraw(false);\n\t\t}\n\t\tcss(chart.container, { cursor: 'move' });\n\t}\n});\n\n/*\n * Extend the Point object with interaction\n */\nextend(Point.prototype, {\n\t/**\n\t * Toggle the selection status of a point\n\t * @param {Boolean} selected Whether to select or unselect the point.\n\t * @param {Boolean} accumulate Whether to add to the previous selection. By default,\n\t *\t\t this happens if the control key (Cmd on Mac) was pressed during clicking.\n\t */\n\tselect: function (selected, accumulate) {\n\t\tvar point = this,\n\t\t\tseries = point.series,\n\t\t\tchart = series.chart;\n\n\t\tselected = pick(selected, !point.selected);\n\n\t\t// fire the event with the defalut handler\n\t\tpoint.firePointEvent(selected ? 'select' : 'unselect', { accumulate: accumulate }, function () {\n\t\t\tpoint.selected = point.options.selected = selected;\n\t\t\tseries.options.data[inArray(point, series.data)] = point.options;\n\n\t\t\tpoint.setState(selected && SELECT_STATE);\n\n\t\t\t// unselect all other points unless Ctrl or Cmd + click\n\t\t\tif (!accumulate) {\n\t\t\t\teach(chart.getSelectedPoints(), function (loopPoint) {\n\t\t\t\t\tif (loopPoint.selected && loopPoint !== point) {\n\t\t\t\t\t\tloopPoint.selected = loopPoint.options.selected = false;\n\t\t\t\t\t\tseries.options.data[inArray(loopPoint, series.data)] = loopPoint.options;\n\t\t\t\t\t\tloopPoint.setState(NORMAL_STATE);\n\t\t\t\t\t\t\tloopPoint.firePointEvent('unselect');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Runs on mouse over the point\n\t */\n\tonMouseOver: function (e) {\n\t\tvar point = this,\n\t\t\tseries = point.series,\n\t\t\tchart = series.chart,\n\t\t\ttooltip = chart.tooltip,\n\t\t\thoverPoint = chart.hoverPoint;\n\n\t\tif (chart.hoverSeries !== series) {\n\t\t\tseries.onMouseOver();\n\t\t}\t\t\n\n\t\t// set normal state to previous series\n\t\tif (hoverPoint && hoverPoint !== point) {\n\t\t\thoverPoint.onMouseOut();\n\t\t}\n\n\t\tif (point.series) { // It may have been destroyed, #4130\n\n\t\t\t// trigger the event\n\t\t\tpoint.firePointEvent('mouseOver');\n\n\t\t\t// update the tooltip\n\t\t\tif (tooltip && (!tooltip.shared || series.noSharedTooltip)) {\n\t\t\t\ttooltip.refresh(point, e);\n\t\t\t}\n\n\t\t\t// hover this\n\t\t\tpoint.setState(HOVER_STATE);\n\t\t\tchart.hoverPoint = point;\n\t\t}\n\t},\n\n\t/**\n\t * Runs on mouse out from the point\n\t */\n\tonMouseOut: function () {\n\t\tvar chart = this.series.chart,\n\t\t\thoverPoints = chart.hoverPoints;\n\n\t\tthis.firePointEvent('mouseOut');\n\n\t\tif (!hoverPoints || inArray(this, hoverPoints) === -1) { // #887, #2240\n\t\t\tthis.setState();\n\t\t\tchart.hoverPoint = null;\n\t\t}\n\t},\n\n\t/**\n\t * Import events from the series' and point's options. Only do it on\n\t * demand, to save processing time on hovering.\n\t */\n\timportEvents: function () {\n\t\tif (!this.hasImportedEvents) {\n\t\t\tvar point = this,\n\t\t\t\toptions = merge(point.series.options.point, point.options),\n\t\t\t\tevents = options.events,\n\t\t\t\teventType;\n\n\t\t\tpoint.events = events;\n\n\t\t\tfor (eventType in events) {\n\t\t\t\taddEvent(point, eventType, events[eventType]);\n\t\t\t}\n\t\t\tthis.hasImportedEvents = true;\n\n\t\t}\n\t},\n\n\t/**\n\t * Set the point's state\n\t * @param {String} state\n\t */\n\tsetState: function (state, move) {\n\t\tvar point = this,\n\t\t\tplotX = point.plotX,\n\t\t\tplotY = point.plotY,\n\t\t\tseries = point.series,\n\t\t\tstateOptions = series.options.states,\n\t\t\tmarkerOptions = defaultPlotOptions[series.type].marker && series.options.marker,\n\t\t\tnormalDisabled = markerOptions && !markerOptions.enabled,\n\t\t\tmarkerStateOptions = markerOptions && markerOptions.states[state],\n\t\t\tstateDisabled = markerStateOptions && markerStateOptions.enabled === false,\n\t\t\tstateMarkerGraphic = series.stateMarkerGraphic,\n\t\t\tpointMarker = point.marker || {},\n\t\t\tchart = series.chart,\n\t\t\tradius,\n\t\t\thalo = series.halo,\n\t\t\thaloOptions,\n\t\t\tnewSymbol,\n\t\t\tpointAttr;\n\n\t\tstate = state || NORMAL_STATE; // empty string\n\t\tpointAttr = point.pointAttr[state] || series.pointAttr[state];\n\n\t\tif (\n\t\t\t\t// already has this state\n\t\t\t\t(state === point.state && !move) ||\n\t\t\t\t// selected points don't respond to hover\n\t\t\t\t(point.selected && state !== SELECT_STATE) ||\n\t\t\t\t// series' state options is disabled\n\t\t\t\t(stateOptions[state] && stateOptions[state].enabled === false) ||\n\t\t\t\t// general point marker's state options is disabled\n\t\t\t\t(state && (stateDisabled || (normalDisabled && markerStateOptions.enabled === false))) ||\n\t\t\t\t// individual point marker's state options is disabled\n\t\t\t\t(state && pointMarker.states && pointMarker.states[state] && pointMarker.states[state].enabled === false) // #1610\n\n\t\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// apply hover styles to the existing point\n\t\tif (point.graphic) {\n\t\t\tradius = markerOptions && point.graphic.symbolName && pointAttr.r;\n\t\t\tpoint.graphic.attr(merge(\n\t\t\t\tpointAttr,\n\t\t\t\tradius ? { // new symbol attributes (#507, #612)\n\t\t\t\t\tx: plotX - radius,\n\t\t\t\t\ty: plotY - radius,\n\t\t\t\t\twidth: 2 * radius,\n\t\t\t\t\theight: 2 * radius\n\t\t\t\t} : {}\n\t\t\t));\n\n\t\t\t// Zooming in from a range with no markers to a range with markers\n\t\t\tif (stateMarkerGraphic) {\n\t\t\t\tstateMarkerGraphic.hide();\n\t\t\t}\n\t\t} else {\n\t\t\t// if a graphic is not applied to each point in the normal state, create a shared\n\t\t\t// graphic for the hover state\n\t\t\tif (state && markerStateOptions) {\n\t\t\t\tradius = markerStateOptions.radius;\n\t\t\t\tnewSymbol = pointMarker.symbol || series.symbol;\n\n\t\t\t\t// If the point has another symbol than the previous one, throw away the\n\t\t\t\t// state marker graphic and force a new one (#1459)\n\t\t\t\tif (stateMarkerGraphic && stateMarkerGraphic.currentSymbol !== newSymbol) {\n\t\t\t\t\tstateMarkerGraphic = stateMarkerGraphic.destroy();\n\t\t\t\t}\n\n\t\t\t\t// Add a new state marker graphic\n\t\t\t\tif (!stateMarkerGraphic) {\n\t\t\t\t\tif (newSymbol) {\n\t\t\t\t\t\tseries.stateMarkerGraphic = stateMarkerGraphic = chart.renderer.symbol(\n\t\t\t\t\t\t\tnewSymbol,\n\t\t\t\t\t\t\tplotX - radius,\n\t\t\t\t\t\t\tplotY - radius,\n\t\t\t\t\t\t\t2 * radius,\n\t\t\t\t\t\t\t2 * radius\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.attr(pointAttr)\n\t\t\t\t\t\t.add(series.markerGroup);\n\t\t\t\t\t\tstateMarkerGraphic.currentSymbol = newSymbol;\n\t\t\t\t\t}\n\n\t\t\t\t// Move the existing graphic\n\t\t\t\t} else {\n\t\t\t\t\tstateMarkerGraphic[move ? 'animate' : 'attr']({ // #1054\n\t\t\t\t\t\tx: plotX - radius,\n\t\t\t\t\t\ty: plotY - radius\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (stateMarkerGraphic) {\n\t\t\t\tstateMarkerGraphic[state && chart.isInsidePlot(plotX, plotY, chart.inverted) ? 'show' : 'hide'](); // #2450\n\t\t\t\tstateMarkerGraphic.element.point = point; // #4310\n\t\t\t}\n\t\t}\n\n\t\t// Show me your halo\n\t\thaloOptions = stateOptions[state] && stateOptions[state].halo;\n\t\tif (haloOptions && haloOptions.size) {\n\t\t\tif (!halo) {\n\t\t\t\tseries.halo = halo = chart.renderer.path()\n\t\t\t\t\t.add(chart.seriesGroup);\n\t\t\t}\n\t\t\thalo.attr(extend({\n\t\t\t\tfill: Color(point.color || series.color).setOpacity(haloOptions.opacity).get()\n\t\t\t}, haloOptions.attributes))[move ? 'animate' : 'attr']({\n\t\t\t\td: point.haloPath(haloOptions.size)\n\t\t\t});\n\t\t} else if (halo) {\n\t\t\thalo.attr({ d: [] });\n\t\t}\n\n\t\tpoint.state = state;\n\t},\n\n\thaloPath: function (size) {\n\t\tvar series = this.series,\n\t\t\tchart = series.chart,\n\t\t\tplotBox = series.getPlotBox(),\n\t\t\tinverted = chart.inverted;\n\n\t\treturn chart.renderer.symbols.circle(\n\t\t\tplotBox.translateX + (inverted ? series.yAxis.len - this.plotY : this.plotX) - size, \n\t\t\tplotBox.translateY + (inverted ? series.xAxis.len - this.plotX : this.plotY) - size, \n\t\t\tsize * 2, \n\t\t\tsize * 2\n\t\t);\n\t}\n});\n\n/*\n * Extend the Series object with interaction\n */\n\nextend(Series.prototype, {\n\t/**\n\t * Series mouse over handler\n\t */\n\tonMouseOver: function () {\n\t\tvar series = this,\n\t\t\tchart = series.chart,\n\t\t\thoverSeries = chart.hoverSeries;\n\n\t\t// set normal state to previous series\n\t\tif (hoverSeries && hoverSeries !== series) {\n\t\t\thoverSeries.onMouseOut();\n\t\t}\n\n\t\t// trigger the event, but to save processing time,\n\t\t// only if defined\n\t\tif (series.options.events.mouseOver) {\n\t\t\tfireEvent(series, 'mouseOver');\n\t\t}\n\n\t\t// hover this\n\t\tseries.setState(HOVER_STATE);\n\t\tchart.hoverSeries = series;\n\t},\n\n\t/**\n\t * Series mouse out handler\n\t */\n\tonMouseOut: function () {\n\t\t// trigger the event only if listeners exist\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\tchart = series.chart,\n\t\t\ttooltip = chart.tooltip,\n\t\t\thoverPoint = chart.hoverPoint;\n\n\t\tchart.hoverSeries = null; // #182, set to null before the mouseOut event fires\n\n\t\t// trigger mouse out on the point, which must be in this series\n\t\tif (hoverPoint) {\n\t\t\thoverPoint.onMouseOut();\n\t\t}\n\n\t\t// fire the mouse out event\n\t\tif (series && options.events.mouseOut) {\n\t\t\tfireEvent(series, 'mouseOut');\n\t\t}\n\n\n\t\t// hide the tooltip\n\t\tif (tooltip && !options.stickyTracking && (!tooltip.shared || series.noSharedTooltip)) {\n\t\t\ttooltip.hide();\n\t\t}\n\n\t\t// set normal state\n\t\tseries.setState();\n\t},\n\n\t/**\n\t * Set the state of the graph\n\t */\n\tsetState: function (state) {\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\tgraph = series.graph,\n\t\t\tstateOptions = options.states,\n\t\t\tlineWidth = options.lineWidth,\n\t\t\tattribs,\n\t\t\ti = 0;\n\n\t\tstate = state || NORMAL_STATE;\n\n\t\tif (series.state !== state) {\n\t\t\tseries.state = state;\n\n\t\t\tif (stateOptions[state] && stateOptions[state].enabled === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (state) {\n\t\t\t\tlineWidth = stateOptions[state].lineWidth || lineWidth + (stateOptions[state].lineWidthPlus || 0); // #4035\n\t\t\t}\n\n\t\t\tif (graph && !graph.dashstyle) { // hover is turned off for dashed lines in VML\n\t\t\t\tattribs = {\n\t\t\t\t\t'stroke-width': lineWidth\n\t\t\t\t};\n\t\t\t\t// use attr because animate will cause any other animation on the graph to stop\n\t\t\t\tgraph.attr(attribs);\n\t\t\t\twhile (series['zoneGraph' + i]) {\n\t\t\t\t\tseries['zoneGraph' + i].attr(attribs);\n\t\t\t\t\ti = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Set the visibility of the graph\n\t *\n\t * @param vis {Boolean} True to show the series, false to hide. If UNDEFINED,\n\t *\t\t\t\tthe visibility is toggled.\n\t */\n\tsetVisible: function (vis, redraw) {\n\t\tvar series = this,\n\t\t\tchart = series.chart,\n\t\t\tlegendItem = series.legendItem,\n\t\t\tshowOrHide,\n\t\t\tignoreHiddenSeries = chart.options.chart.ignoreHiddenSeries,\n\t\t\toldVisibility = series.visible;\n\n\t\t// if called without an argument, toggle visibility\n\t\tseries.visible = vis = series.userOptions.visible = vis === UNDEFINED ? !oldVisibility : vis;\n\t\tshowOrHide = vis ? 'show' : 'hide';\n\n\t\t// show or hide elements\n\t\teach(['group', 'dataLabelsGroup', 'markerGroup', 'tracker'], function (key) {\n\t\t\tif (series[key]) {\n\t\t\t\tseries[key][showOrHide]();\n\t\t\t}\n\t\t});\n\n\n\t\t// hide tooltip (#1361)\n\t\tif (chart.hoverSeries === series || (chart.hoverPoint && chart.hoverPoint.series) === series) {\n\t\t\tseries.onMouseOut();\n\t\t}\n\n\n\t\tif (legendItem) {\n\t\t\tchart.legend.colorizeItem(series, vis);\n\t\t}\n\n\n\t\t// rescale or adapt to resized chart\n\t\tseries.isDirty = true;\n\t\t// in a stack, all other series are affected\n\t\tif (series.options.stacking) {\n\t\t\teach(chart.series, function (otherSeries) {\n\t\t\t\tif (otherSeries.options.stacking && otherSeries.visible) {\n\t\t\t\t\totherSeries.isDirty = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// show or hide linked series\n\t\teach(series.linkedSeries, function (otherSeries) {\n\t\t\totherSeries.setVisible(vis, false);\n\t\t});\n\n\t\tif (ignoreHiddenSeries) {\n\t\t\tchart.isDirtyBox = true;\n\t\t}\n\t\tif (redraw !== false) {\n\t\t\tchart.redraw();\n\t\t}\n\n\t\tfireEvent(series, showOrHide);\n\t},\n\n\t/**\n\t * Show the graph\n\t */\n\tshow: function () {\n\t\tthis.setVisible(true);\n\t},\n\n\t/**\n\t * Hide the graph\n\t */\n\thide: function () {\n\t\tthis.setVisible(false);\n\t},\n\n\n\t/**\n\t * Set the selected state of the graph\n\t *\n\t * @param selected {Boolean} True to select the series, false to unselect. If\n\t *\t\t\t\tUNDEFINED, the selection state is toggled.\n\t */\n\tselect: function (selected) {\n\t\tvar series = this;\n\t\t// if called without an argument, toggle\n\t\tseries.selected = selected = (selected === UNDEFINED) ? !series.selected : selected;\n\n\t\tif (series.checkbox) {\n\t\t\tseries.checkbox.checked = selected;\n\t\t}\n\n\t\tfireEvent(series, selected ? 'select' : 'unselect');\n\t},\n\n\tdrawTracker: TrackerMixin.drawTrackerGraph\n});\n// global variables\nextend(Highcharts, {\n\t\n\t// Constructors\n\tColor: Color,\n\tPoint: Point,\n\tTick: Tick,\t\n\tRenderer: Renderer,\n\tSVGElement: SVGElement,\n\tSVGRenderer: SVGRenderer,\n\t\n\t// Various\n\tarrayMin: arrayMin,\n\tarrayMax: arrayMax,\n\tcharts: charts,\n\tdateFormat: dateFormat,\n\terror: error,\n\tformat: format,\n\tpathAnim: pathAnim,\n\tgetOptions: getOptions,\n\thasBidiBug: hasBidiBug,\n\tisTouchDevice: isTouchDevice,\n\tsetOptions: setOptions,\n\taddEvent: addEvent,\n\tremoveEvent: removeEvent,\n\tcreateElement: createElement,\n\tdiscardElement: discardElement,\n\tcss: css,\n\teach: each,\n\tmap: map,\n\tmerge: merge,\n\tsplat: splat,\n\textendClass: extendClass,\n\tpInt: pInt,\n\tsvg: hasSVG,\n\tcanvas: useCanVG,\n\tvml: !hasSVG && !useCanVG,\n\tproduct: PRODUCT,\n\tversion: VERSION\n});\n\n}());\n","/**\n * @license Highcharts JS v4.1.7 (2015-06-26)\n * Plugin for displaying a message when there is no data visible in chart.\n *\n * (c) 2010-2014 Highsoft AS\n * Author: Oystein Moseng\n *\n * License: www.highcharts.com/license\n */\n\n(function (H) {\n\t\n\tvar seriesTypes = H.seriesTypes,\n\t\tchartPrototype = H.Chart.prototype,\n\t\tdefaultOptions = H.getOptions(),\n\t\textend = H.extend,\n\t\teach = H.each;\n\n\t// Add language option\n\textend(defaultOptions.lang, {\n\t\tnoData: 'No data to display'\n\t});\n\t\n\t// Add default display options for message\n\tdefaultOptions.noData = {\n\t\tposition: {\n\t\t\tx: 0,\n\t\t\ty: 0,\t\t\t\n\t\t\talign: 'center',\n\t\t\tverticalAlign: 'middle'\n\t\t},\n\t\tattr: {\t\t\t\t\t\t\n\t\t},\n\t\tstyle: {\t\n\t\t\tfontWeight: 'bold',\t\t\n\t\t\tfontSize: '12px',\n\t\t\tcolor: '#60606a'\t\t\n\t\t}\n\t\t// useHTML: false // docs\n\t};\n\n\t/**\n\t * Define hasData functions for series. These return true if there are data points on this series within the plot area\n\t */\t\n\tfunction hasDataPie() {\n\t\treturn !!this.points.length; /* != 0 */\n\t}\n\n\teach(['pie', 'gauge', 'waterfall', 'bubble'], function (type) {\n\t\tif (seriesTypes[type]) {\n\t\t\tseriesTypes[type].prototype.hasData = hasDataPie;\n\t\t}\n\t});\n\n\tH.Series.prototype.hasData = function () {\n\t\treturn this.visible && this.dataMax !== undefined && this.dataMin !== undefined; // #3703\n\t};\n\t\n\t/**\n\t * Display a no-data message.\n\t *\n\t * @param {String} str An optional message to show in place of the default one \n\t */\n\tchartPrototype.showNoData = function (str) {\n\t\tvar chart = this,\n\t\t\toptions = chart.options,\n\t\t\ttext = str || options.lang.noData,\n\t\t\tnoDataOptions = options.noData;\n\n\t\tif (!chart.noDataLabel) {\n\t\t\tchart.noDataLabel = chart.renderer\n\t\t\t\t.label(\n\t\t\t\t\ttext, \n\t\t\t\t\t0, \n\t\t\t\t\t0, \n\t\t\t\t\tnull, \n\t\t\t\t\tnull, \n\t\t\t\t\tnull, \n\t\t\t\t\tnoDataOptions.useHTML, \n\t\t\t\t\tnull, \n\t\t\t\t\t'no-data'\n\t\t\t\t)\n\t\t\t\t.attr(noDataOptions.attr)\n\t\t\t\t.css(noDataOptions.style)\n\t\t\t\t.add();\n\t\t\tchart.noDataLabel.align(extend(chart.noDataLabel.getBBox(), noDataOptions.position), false, 'plotBox');\n\t\t}\n\t};\n\n\t/**\n\t * Hide no-data message\t\n\t */\t\n\tchartPrototype.hideNoData = function () {\n\t\tvar chart = this;\n\t\tif (chart.noDataLabel) {\n\t\t\tchart.noDataLabel = chart.noDataLabel.destroy();\n\t\t}\n\t};\n\n\t/**\n\t * Returns true if there are data points within the plot area now\n\t */\t\n\tchartPrototype.hasData = function () {\n\t\tvar chart = this,\n\t\t\tseries = chart.series,\n\t\t\ti = series.length;\n\n\t\twhile (i--) {\n\t\t\tif (series[i].hasData() && !series[i].options.isInternal) { \n\t\t\t\treturn true;\n\t\t\t}\t\n\t\t}\n\n\t\treturn false;\n\t};\n\n\t/**\n\t * Show no-data message if there is no data in sight. Otherwise, hide it.\n\t */\n\tfunction handleNoData() {\n\t\tvar chart = this;\n\t\tif (chart.hasData()) {\n\t\t\tchart.hideNoData();\n\t\t} else {\n\t\t\tchart.showNoData();\n\t\t}\n\t}\n\n\t/**\n\t * Add event listener to handle automatic display of no-data message\n\t */\n\tchartPrototype.callbacks.push(function (chart) {\n\t\tH.addEvent(chart, 'load', handleNoData);\n\t\tH.addEvent(chart, 'redraw', handleNoData);\n\t});\n\n}(Highcharts));\n","// ==ClosureCompiler==\n// @compilation_level SIMPLE_OPTIMIZATIONS\n\n/**\n * @license Highcharts JS v4.1.7 (2015-06-26)\n *\n * (c) 2009-2014 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n\n// JSLint options:\n/*global Highcharts, HighchartsAdapter, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console */\n\n(function (Highcharts, UNDEFINED) {\nvar arrayMin = Highcharts.arrayMin,\n\tarrayMax = Highcharts.arrayMax,\n\teach = Highcharts.each,\n\textend = Highcharts.extend,\n\tmerge = Highcharts.merge,\n\tmap = Highcharts.map,\n\tpick = Highcharts.pick,\n\tpInt = Highcharts.pInt,\n\tdefaultPlotOptions = Highcharts.getOptions().plotOptions,\n\tseriesTypes = Highcharts.seriesTypes,\n\textendClass = Highcharts.extendClass,\n\tsplat = Highcharts.splat,\n\twrap = Highcharts.wrap,\n\tAxis = Highcharts.Axis,\n\tTick = Highcharts.Tick,\n\tPoint = Highcharts.Point,\n\tPointer = Highcharts.Pointer,\n\tCenteredSeriesMixin = Highcharts.CenteredSeriesMixin,\n\tTrackerMixin = Highcharts.TrackerMixin,\n\tSeries = Highcharts.Series,\n\tmath = Math,\n\tmathRound = math.round,\n\tmathFloor = math.floor,\n\tmathMax = math.max,\n\tColor = Highcharts.Color,\n\tnoop = function () {};/**\n * The Pane object allows options that are common to a set of X and Y axes.\n * \n * In the future, this can be extended to basic Highcharts and Highstock.\n */\nfunction Pane(options, chart, firstAxis) {\n\tthis.init.call(this, options, chart, firstAxis);\n}\n\n// Extend the Pane prototype\nextend(Pane.prototype, {\n\t\n\t/**\n\t * Initiate the Pane object\n\t */\n\tinit: function (options, chart, firstAxis) {\n\t\tvar pane = this,\n\t\t\tbackgroundOption,\n\t\t\tdefaultOptions = pane.defaultOptions;\n\t\t\n\t\tpane.chart = chart;\n\t\t\n\t\t// Set options. Angular charts have a default background (#3318)\n\t\tpane.options = options = merge(defaultOptions, chart.angular ? { background: {} } : undefined, options);\n\t\t\n\t\tbackgroundOption = options.background;\n\t\t\n\t\t// To avoid having weighty logic to place, update and remove the backgrounds,\n\t\t// push them to the first axis' plot bands and borrow the existing logic there.\n\t\tif (backgroundOption) {\n\t\t\teach([].concat(splat(backgroundOption)).reverse(), function (config) {\n\t\t\t\tvar backgroundColor = config.backgroundColor,  // if defined, replace the old one (specific for gradients)\n\t\t\t\t\taxisUserOptions = firstAxis.userOptions;\n\t\t\t\tconfig = merge(pane.defaultBackgroundOptions, config);\n\t\t\t\tif (backgroundColor) {\n\t\t\t\t\tconfig.backgroundColor = backgroundColor;\n\t\t\t\t}\n\t\t\t\tconfig.color = config.backgroundColor; // due to naming in plotBands\n\t\t\t\tfirstAxis.options.plotBands.unshift(config);\n\t\t\t\taxisUserOptions.plotBands = axisUserOptions.plotBands || []; // #3176\n\t\t\t\taxisUserOptions.plotBands.unshift(config);\n\t\t\t});\n\t\t}\n\t},\n\t\n\t/**\n\t * The default options object\n\t */\n\tdefaultOptions: {\n\t\t// background: {conditional},\n\t\tcenter: ['50%', '50%'],\n\t\tsize: '85%',\n\t\tstartAngle: 0\n\t\t//endAngle: startAngle + 360\n\t},\t\n\t\n\t/**\n\t * The default background options\n\t */\n\tdefaultBackgroundOptions: {\n\t\tshape: 'circle',\n\t\tborderWidth: 1,\n\t\tborderColor: 'silver',\n\t\tbackgroundColor: {\n\t\t\tlinearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },\n\t\t\tstops: [\n\t\t\t\t[0, '#FFF'],\n\t\t\t\t[1, '#DDD']\n\t\t\t]\n\t\t},\n\t\tfrom: -Number.MAX_VALUE, // corrected to axis min\n\t\tinnerRadius: 0,\n\t\tto: Number.MAX_VALUE, // corrected to axis max\n\t\touterRadius: '105%'\n\t}\n\t\n});\nvar axisProto = Axis.prototype,\n\ttickProto = Tick.prototype;\n\t\n/**\n * Augmented methods for the x axis in order to hide it completely, used for the X axis in gauges\n */\nvar hiddenAxisMixin = {\n\tgetOffset: noop,\n\tredraw: function () {\n\t\tthis.isDirty = false; // prevent setting Y axis dirty\n\t},\n\trender: function () {\n\t\tthis.isDirty = false; // prevent setting Y axis dirty\n\t},\n\tsetScale: noop,\n\tsetCategories: noop,\n\tsetTitle: noop\n};\n\n/**\n * Augmented methods for the value axis\n */\n/*jslint unparam: true*/\nvar radialAxisMixin = {\n\tisRadial: true,\n\t\n\t/**\n\t * The default options extend defaultYAxisOptions\n\t */\n\tdefaultRadialGaugeOptions: {\n\t\tlabels: {\n\t\t\talign: 'center',\n\t\t\tx: 0,\n\t\t\ty: null // auto\n\t\t},\n\t\tminorGridLineWidth: 0,\n\t\tminorTickInterval: 'auto',\n\t\tminorTickLength: 10,\n\t\tminorTickPosition: 'inside',\n\t\tminorTickWidth: 1,\n\t\ttickLength: 10,\n\t\ttickPosition: 'inside',\n\t\ttickWidth: 2,\n\t\ttitle: {\n\t\t\trotation: 0\n\t\t},\n\t\tzIndex: 2 // behind dials, points in the series group\n\t},\n\t\n\t// Circular axis around the perimeter of a polar chart\n\tdefaultRadialXOptions: {\n\t\tgridLineWidth: 1, // spokes\n\t\tlabels: {\n\t\t\talign: null, // auto\n\t\t\tdistance: 15,\n\t\t\tx: 0,\n\t\t\ty: null // auto\n\t\t},\n\t\tmaxPadding: 0,\n\t\tminPadding: 0,\n\t\tshowLastLabel: false, \n\t\ttickLength: 0\n\t},\n\t\n\t// Radial axis, like a spoke in a polar chart\n\tdefaultRadialYOptions: {\n\t\tgridLineInterpolation: 'circle',\n\t\tlabels: {\n\t\t\talign: 'right',\n\t\t\tx: -3,\n\t\t\ty: -2\n\t\t},\n\t\tshowLastLabel: false,\n\t\ttitle: {\n\t\t\tx: 4,\n\t\t\ttext: null,\n\t\t\trotation: 90\n\t\t}\n\t},\n\t\n\t/**\n\t * Merge and set options\n\t */\n\tsetOptions: function (userOptions) {\n\t\t\n\t\tvar options = this.options = merge(\n\t\t\tthis.defaultOptions,\n\t\t\tthis.defaultRadialOptions,\n\t\t\tuserOptions\n\t\t);\n\n\t\t// Make sure the plotBands array is instanciated for each Axis (#2649)\n\t\tif (!options.plotBands) {\n\t\t\toptions.plotBands = [];\n\t\t}\n\t\t\n\t},\n\t\n\t/**\n\t * Wrap the getOffset method to return zero offset for title or labels in a radial \n\t * axis\n\t */\n\tgetOffset: function () {\n\t\t// Call the Axis prototype method (the method we're in now is on the instance)\n\t\taxisProto.getOffset.call(this);\n\t\t\n\t\t// Title or label offsets are not counted\n\t\tthis.chart.axisOffset[this.side] = 0;\n\t\t\n\t\t// Set the center array\n\t\tthis.center = this.pane.center = CenteredSeriesMixin.getCenter.call(this.pane);\n\t},\n\n\n\t/**\n\t * Get the path for the axis line. This method is also referenced in the getPlotLinePath\n\t * method.\n\t */\n\tgetLinePath: function (lineWidth, radius) {\n\t\tvar center = this.center;\n\t\tradius = pick(radius, center[2] / 2 - this.offset);\n\t\t\n\t\treturn this.chart.renderer.symbols.arc(\n\t\t\tthis.left + center[0],\n\t\t\tthis.top + center[1],\n\t\t\tradius,\n\t\t\tradius, \n\t\t\t{\n\t\t\t\tstart: this.startAngleRad,\n\t\t\t\tend: this.endAngleRad,\n\t\t\t\topen: true,\n\t\t\t\tinnerR: 0\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Override setAxisTranslation by setting the translation to the difference\n\t * in rotation. This allows the translate method to return angle for \n\t * any given value.\n\t */\n\tsetAxisTranslation: function () {\n\t\t\n\t\t// Call uber method\t\t\n\t\taxisProto.setAxisTranslation.call(this);\n\t\t\t\n\t\t// Set transA and minPixelPadding\n\t\tif (this.center) { // it's not defined the first time\n\t\t\tif (this.isCircular) {\n\t\t\t\t\n\t\t\t\tthis.transA = (this.endAngleRad - this.startAngleRad) / \n\t\t\t\t\t((this.max - this.min) || 1);\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t} else { \n\t\t\t\tthis.transA = (this.center[2] / 2) / ((this.max - this.min) || 1);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isXAxis) {\n\t\t\t\tthis.minPixelPadding = this.transA * this.minPointOffset;\n\t\t\t} else {\n\t\t\t\t// This is a workaround for regression #2593, but categories still don't position correctly.\n\t\t\t\t// TODO: Implement true handling of Y axis categories on gauges.\n\t\t\t\tthis.minPixelPadding = 0; \n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * In case of auto connect, add one closestPointRange to the max value right before\n\t * tickPositions are computed, so that ticks will extend passed the real max.\n\t */\n\tbeforeSetTickPositions: function () {\n\t\tif (this.autoConnect) {\n\t\t\tthis.max += (this.categories && 1) || this.pointRange || this.closestPointRange || 0; // #1197, #2260\n\t\t}\n\t},\n\t\n\t/**\n\t * Override the setAxisSize method to use the arc's circumference as length. This\n\t * allows tickPixelInterval to apply to pixel lengths along the perimeter\n\t */\n\tsetAxisSize: function () {\n\t\t\n\t\taxisProto.setAxisSize.call(this);\n\n\t\tif (this.isRadial) {\n\n\t\t\t// Set the center array\n\t\t\tthis.center = this.pane.center = Highcharts.CenteredSeriesMixin.getCenter.call(this.pane);\n\n\t\t\t// The sector is used in Axis.translate to compute the translation of reversed axis points (#2570)\n\t\t\tif (this.isCircular) {\n\t\t\t\tthis.sector = this.endAngleRad - this.startAngleRad;\t\n\t\t\t}\n\t\t\t\n\t\t\t// Axis len is used to lay out the ticks\n\t\t\tthis.len = this.width = this.height = this.center[2] * pick(this.sector, 1) / 2;\n\n\n\t\t}\n\t},\n\t\n\t/**\n\t * Returns the x, y coordinate of a point given by a value and a pixel distance\n\t * from center\n\t */\n\tgetPosition: function (value, length) {\n\t\treturn this.postTranslate(\n\t\t\tthis.isCircular ? this.translate(value) : 0, // #2848\n\t\t\tpick(this.isCircular ? length : this.translate(value), this.center[2] / 2) - this.offset\n\t\t);\t\t\n\t},\n\t\n\t/**\n\t * Translate from intermediate plotX (angle), plotY (axis.len - radius) to final chart coordinates. \n\t */\n\tpostTranslate: function (angle, radius) {\n\t\t\n\t\tvar chart = this.chart,\n\t\t\tcenter = this.center;\n\t\t\t\n\t\tangle = this.startAngleRad + angle;\n\n\t\treturn {\n\t\t\tx: chart.plotLeft + center[0] + Math.cos(angle) * radius,\n\t\t\ty: chart.plotTop + center[1] + Math.sin(angle) * radius\n\t\t}; \n\t\t\n\t},\n\t\n\t/**\n\t * Find the path for plot bands along the radial axis\n\t */\n\tgetPlotBandPath: function (from, to, options) {\n\t\tvar center = this.center,\n\t\t\tstartAngleRad = this.startAngleRad,\n\t\t\tfullRadius = center[2] / 2,\n\t\t\tradii = [\n\t\t\t\tpick(options.outerRadius, '100%'),\n\t\t\t\toptions.innerRadius,\n\t\t\t\tpick(options.thickness, 10)\n\t\t\t],\n\t\t\tpercentRegex = /%$/,\n\t\t\tstart,\n\t\t\tend,\n\t\t\topen,\n\t\t\tisCircular = this.isCircular, // X axis in a polar chart\n\t\t\tret;\n\t\t\t\n\t\t// Polygonal plot bands\n\t\tif (this.options.gridLineInterpolation === 'polygon') {\n\t\t\tret = this.getPlotLinePath(from).concat(this.getPlotLinePath(to, true));\n\t\t\n\t\t// Circular grid bands\n\t\t} else {\n\n\t\t\t// Keep within bounds\n\t\t\tfrom = Math.max(from, this.min);\n\t\t\tto = Math.min(to, this.max);\n\t\t\t\n\t\t\t// Plot bands on Y axis (radial axis) - inner and outer radius depend on to and from\n\t\t\tif (!isCircular) {\n\t\t\t\tradii[0] = this.translate(from);\n\t\t\t\tradii[1] = this.translate(to);\n\t\t\t}\n\t\t\t\n\t\t\t// Convert percentages to pixel values\n\t\t\tradii = map(radii, function (radius) {\n\t\t\t\tif (percentRegex.test(radius)) {\n\t\t\t\t\tradius = (pInt(radius, 10) * fullRadius) / 100;\n\t\t\t\t}\n\t\t\t\treturn radius;\n\t\t\t});\n\t\t\t\n\t\t\t// Handle full circle\n\t\t\tif (options.shape === 'circle' || !isCircular) {\n\t\t\t\tstart = -Math.PI / 2;\n\t\t\t\tend = Math.PI * 1.5;\n\t\t\t\topen = true;\n\t\t\t} else {\n\t\t\t\tstart = startAngleRad + this.translate(from);\n\t\t\t\tend = startAngleRad + this.translate(to);\n\t\t\t}\n\t\t\n\t\t\n\t\t\tret = this.chart.renderer.symbols.arc(\n\t\t\t\tthis.left + center[0],\n\t\t\t\tthis.top + center[1],\n\t\t\t\tradii[0],\n\t\t\t\tradii[0],\n\t\t\t\t{\n\t\t\t\t\tstart: Math.min(start, end), // Math is for reversed yAxis (#3606)\n\t\t\t\t\tend: Math.max(start, end),\n\t\t\t\t\tinnerR: pick(radii[1], radii[0] - radii[2]),\n\t\t\t\t\topen: open\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn ret;\n\t},\n\t\n\t/**\n\t * Find the path for plot lines perpendicular to the radial axis.\n\t */\n\tgetPlotLinePath: function (value, reverse) {\n\t\tvar axis = this,\n\t\t\tcenter = axis.center,\n\t\t\tchart = axis.chart,\n\t\t\tend = axis.getPosition(value),\n\t\t\txAxis,\n\t\t\txy,\n\t\t\ttickPositions,\n\t\t\tret;\n\t\t\n\t\t// Spokes\n\t\tif (axis.isCircular) {\n\t\t\tret = ['M', center[0] + chart.plotLeft, center[1] + chart.plotTop, 'L', end.x, end.y];\n\t\t\n\t\t// Concentric circles\t\t\t\n\t\t} else if (axis.options.gridLineInterpolation === 'circle') {\n\t\t\tvalue = axis.translate(value);\n\t\t\tif (value) { // a value of 0 is in the center\n\t\t\t\tret = axis.getLinePath(0, value);\n\t\t\t}\n\t\t// Concentric polygons \n\t\t} else {\n\t\t\t// Find the X axis in the same pane\n\t\t\teach(chart.xAxis, function (a) {\n\t\t\t\tif (a.pane === axis.pane) {\n\t\t\t\t\txAxis = a;\n\t\t\t\t}\n\t\t\t});\n\t\t\tret = [];\n\t\t\tvalue = axis.translate(value);\n\t\t\ttickPositions = xAxis.tickPositions;\n\t\t\tif (xAxis.autoConnect) {\n\t\t\t\ttickPositions = tickPositions.concat([tickPositions[0]]);\n\t\t\t}\n\t\t\t// Reverse the positions for concatenation of polygonal plot bands\n\t\t\tif (reverse) {\n\t\t\t\ttickPositions = [].concat(tickPositions).reverse();\n\t\t\t}\n\t\t\t\t\n\t\t\teach(tickPositions, function (pos, i) {\n\t\t\t\txy = xAxis.getPosition(pos, value);\n\t\t\t\tret.push(i ? 'L' : 'M', xy.x, xy.y);\n\t\t\t});\n\t\t\t\n\t\t}\n\t\treturn ret;\n\t},\n\t\n\t/**\n\t * Find the position for the axis title, by default inside the gauge\n\t */\n\tgetTitlePosition: function () {\n\t\tvar center = this.center,\n\t\t\tchart = this.chart,\n\t\t\ttitleOptions = this.options.title;\n\t\t\n\t\treturn { \n\t\t\tx: chart.plotLeft + center[0] + (titleOptions.x || 0), \n\t\t\ty: chart.plotTop + center[1] - ({ high: 0.5, middle: 0.25, low: 0 }[titleOptions.align] * \n\t\t\t\tcenter[2]) + (titleOptions.y || 0)  \n\t\t};\n\t}\n\t\n};\n/*jslint unparam: false*/\n\n/**\n * Override axisProto.init to mix in special axis instance functions and function overrides\n */\nwrap(axisProto, 'init', function (proceed, chart, userOptions) {\n\tvar axis = this,\n\t\tangular = chart.angular,\n\t\tpolar = chart.polar,\n\t\tisX = userOptions.isX,\n\t\tisHidden = angular && isX,\n\t\tisCircular,\n\t\tstartAngleRad,\n\t\tendAngleRad,\n\t\toptions,\n\t\tchartOptions = chart.options,\n\t\tpaneIndex = userOptions.pane || 0,\n\t\tpane,\n\t\tpaneOptions;\n\t\t\n\t// Before prototype.init\n\tif (angular) {\n\t\textend(this, isHidden ? hiddenAxisMixin : radialAxisMixin);\n\t\tisCircular =  !isX;\n\t\tif (isCircular) {\n\t\t\tthis.defaultRadialOptions = this.defaultRadialGaugeOptions;\n\t\t}\n\t\t\n\t} else if (polar) {\n\t\t//extend(this, userOptions.isX ? radialAxisMixin : radialAxisMixin);\n\t\textend(this, radialAxisMixin);\n\t\tisCircular = isX;\n\t\tthis.defaultRadialOptions = isX ? this.defaultRadialXOptions : merge(this.defaultYAxisOptions, this.defaultRadialYOptions);\n\t\t\n\t}\n\t\n\t// Run prototype.init\n\tproceed.call(this, chart, userOptions);\n\t\n\tif (!isHidden && (angular || polar)) {\n\t\toptions = this.options;\n\t\t\n\t\t// Create the pane and set the pane options.\n\t\tif (!chart.panes) {\n\t\t\tchart.panes = [];\n\t\t}\n\t\tthis.pane = pane = chart.panes[paneIndex] = chart.panes[paneIndex] || new Pane(\n\t\t\tsplat(chartOptions.pane)[paneIndex],\n\t\t\tchart,\n\t\t\taxis\n\t\t);\n\t\tpaneOptions = pane.options;\n\t\t\n\t\t\t\n\t\t// Disable certain features on angular and polar axes\n\t\tchart.inverted = false;\n\t\tchartOptions.chart.zoomType = null;\n\t\t\n\t\t// Start and end angle options are\n\t\t// given in degrees relative to top, while internal computations are\n\t\t// in radians relative to right (like SVG).\n\t\tthis.startAngleRad = startAngleRad = (paneOptions.startAngle - 90) * Math.PI / 180;\n\t\tthis.endAngleRad = endAngleRad = (pick(paneOptions.endAngle, paneOptions.startAngle + 360)  - 90) * Math.PI / 180;\n\t\tthis.offset = options.offset || 0;\n\t\t\n\t\tthis.isCircular = isCircular;\n\t\t\n\t\t// Automatically connect grid lines?\n\t\tif (isCircular && userOptions.max === UNDEFINED && endAngleRad - startAngleRad === 2 * Math.PI) {\n\t\t\tthis.autoConnect = true;\n\t\t}\n\t}\n\t\n});\n\n/**\n * Add special cases within the Tick class' methods for radial axes.\n */\t\nwrap(tickProto, 'getPosition', function (proceed, horiz, pos, tickmarkOffset, old) {\n\tvar axis = this.axis;\n\t\n\treturn axis.getPosition ? \n\t\taxis.getPosition(pos) :\n\t\tproceed.call(this, horiz, pos, tickmarkOffset, old);\t\n});\n\n/**\n * Wrap the getLabelPosition function to find the center position of the label\n * based on the distance option\n */\t\nwrap(tickProto, 'getLabelPosition', function (proceed, x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n\tvar axis = this.axis,\n\t\toptionsY = labelOptions.y,\n\t\tret,\n\t\tcenterSlot = 20, // 20 degrees to each side at the top and bottom\n\t\talign = labelOptions.align,\n\t\tangle = ((axis.translate(this.pos) + axis.startAngleRad + Math.PI / 2) / Math.PI * 180) % 360;\n\n\tif (axis.isRadial) {\n\t\tret = axis.getPosition(this.pos, (axis.center[2] / 2) + pick(labelOptions.distance, -25));\n\t\t\n\t\t// Automatically rotated\n\t\tif (labelOptions.rotation === 'auto') {\n\t\t\tlabel.attr({ \n\t\t\t\trotation: angle\n\t\t\t});\n\t\t\n\t\t// Vertically centered\n\t\t} else if (optionsY === null) {\n\t\t\toptionsY = axis.chart.renderer.fontMetrics(label.styles.fontSize).b - label.getBBox().height / 2;\n\t\t}\n\t\t\n\t\t// Automatic alignment\n\t\tif (align === null) {\n\t\t\tif (axis.isCircular) {\n\t\t\t\tif (this.label.getBBox().width > axis.len * axis.tickInterval / (axis.max - axis.min)) { // #3506\n\t\t\t\t\tcenterSlot = 0;\n\t\t\t\t}\n\t\t\t\tif (angle > centerSlot && angle < 180 - centerSlot) {\n\t\t\t\t\talign = 'left'; // right hemisphere\n\t\t\t\t} else if (angle > 180 + centerSlot && angle < 360 - centerSlot) {\n\t\t\t\t\talign = 'right'; // left hemisphere\n\t\t\t\t} else {\n\t\t\t\t\talign = 'center'; // top or bottom\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\talign = 'center';\n\t\t\t}\n\t\t\tlabel.attr({\n\t\t\t\talign: align\n\t\t\t});\n\t\t}\n\t\t\n\t\tret.x += labelOptions.x;\n\t\tret.y += optionsY;\n\t\t\n\t} else {\n\t\tret = proceed.call(this, x, y, label, horiz, labelOptions, tickmarkOffset, index, step);\n\t}\n\treturn ret;\n});\n\n/**\n * Wrap the getMarkPath function to return the path of the radial marker\n */\nwrap(tickProto, 'getMarkPath', function (proceed, x, y, tickLength, tickWidth, horiz, renderer) {\n\tvar axis = this.axis,\n\t\tendPoint,\n\t\tret;\n\t\t\n\tif (axis.isRadial) {\n\t\tendPoint = axis.getPosition(this.pos, axis.center[2] / 2 + tickLength);\n\t\tret = [\n\t\t\t'M',\n\t\t\tx,\n\t\t\ty,\n\t\t\t'L',\n\t\t\tendPoint.x,\n\t\t\tendPoint.y\n\t\t];\n\t} else {\n\t\tret = proceed.call(this, x, y, tickLength, tickWidth, horiz, renderer);\n\t}\n\treturn ret;\n});/* \n * The AreaRangeSeries class\n * \n */\n\n/**\n * Extend the default options with map options\n */\ndefaultPlotOptions.arearange = merge(defaultPlotOptions.area, {\n\tlineWidth: 1,\n\tmarker: null,\n\tthreshold: null,\n\ttooltip: {\n\t\tpointFormat: '<span style=\"color:{series.color}\">\\u25CF</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'\n\t},\n\ttrackByArea: true,\n\tdataLabels: {\n\t\talign: null,\n\t\tverticalAlign: null,\n\t\txLow: 0,\n\t\txHigh: 0,\n\t\tyLow: 0,\n\t\tyHigh: 0\t\n\t},\n\tstates: {\n\t\thover: {\n\t\t\thalo: false\n\t\t}\n\t}\n});\n\n/**\n * Add the series type\n */\nseriesTypes.arearange = extendClass(seriesTypes.area, {\n\ttype: 'arearange',\n\tpointArrayMap: ['low', 'high'],\n\ttoYData: function (point) {\n\t\treturn [point.low, point.high];\n\t},\n\tpointValKey: 'low',\n\tdeferTranslatePolar: true,\n\n\t/**\n\t * Translate a point's plotHigh from the internal angle and radius measures to \n\t * true plotHigh coordinates. This is an addition of the toXY method found in\n\t * Polar.js, because it runs too early for arearanges to be considered (#3419).\n\t */\n\thighToXY: function (point) {\n\t\t// Find the polar plotX and plotY\n\t\tvar chart = this.chart,\n\t\t\txy = this.xAxis.postTranslate(point.rectPlotX, this.yAxis.len - point.plotHigh);\n\t\tpoint.plotHighX = xy.x - chart.plotLeft;\n\t\tpoint.plotHigh = xy.y - chart.plotTop;\n\t},\n\t\n\t/**\n\t * Extend getSegments to force null points if the higher value is null. #1703.\n\t */\n\tgetSegments: function () {\n\t\tvar series = this;\n\n\t\teach(series.points, function (point) {\n\t\t\tif (!series.options.connectNulls && (point.low === null || point.high === null)) {\n\t\t\t\tpoint.y = null;\n\t\t\t} else if (point.low === null && point.high !== null) {\n\t\t\t\tpoint.y = point.high;\n\t\t\t}\n\t\t});\n\t\tSeries.prototype.getSegments.call(this);\n\t},\n\t\n\t/**\n\t * Translate data points from raw values x and y to plotX and plotY\n\t */\n\ttranslate: function () {\n\t\tvar series = this,\n\t\t\tyAxis = series.yAxis;\n\n\t\tseriesTypes.area.prototype.translate.apply(series);\n\n\t\t// Set plotLow and plotHigh\n\t\teach(series.points, function (point) {\n\n\t\t\tvar low = point.low,\n\t\t\t\thigh = point.high,\n\t\t\t\tplotY = point.plotY;\n\n\t\t\tif (high === null && low === null) {\n\t\t\t\tpoint.y = null;\n\t\t\t} else if (low === null) {\n\t\t\t\tpoint.plotLow = point.plotY = null;\n\t\t\t\tpoint.plotHigh = yAxis.translate(high, 0, 1, 0, 1);\n\t\t\t} else if (high === null) {\n\t\t\t\tpoint.plotLow = plotY;\n\t\t\t\tpoint.plotHigh = null;\n\t\t\t} else {\n\t\t\t\tpoint.plotLow = plotY;\n\t\t\t\tpoint.plotHigh = yAxis.translate(high, 0, 1, 0, 1);\n\t\t\t}\n\t\t});\n\n\t\t// Postprocess plotHigh\n\t\tif (this.chart.polar) {\n\t\t\teach(this.points, function (point) {\n\t\t\t\tseries.highToXY(point);\n\t\t\t});\n\t\t}\n\t},\n\t\n\t/**\n\t * Extend the line series' getSegmentPath method by applying the segment\n\t * path to both lower and higher values of the range\n\t */\n\tgetSegmentPath: function (segment) {\n\t\t\n\t\tvar lowSegment,\n\t\t\thighSegment = [],\n\t\t\ti = segment.length,\n\t\t\tbaseGetSegmentPath = Series.prototype.getSegmentPath,\n\t\t\tpoint,\n\t\t\tlinePath,\n\t\t\tlowerPath,\n\t\t\toptions = this.options,\n\t\t\tstep = options.step,\n\t\t\thigherPath;\n\t\t\t\n\t\t// Remove nulls from low segment\n\t\tlowSegment = HighchartsAdapter.grep(segment, function (point) {\n\t\t\treturn point.plotLow !== null;\n\t\t});\n\t\t\n\t\t// Make a segment with plotX and plotY for the top values\n\t\twhile (i--) {\n\t\t\tpoint = segment[i];\n\t\t\tif (point.plotHigh !== null) {\n\t\t\t\thighSegment.push({\n\t\t\t\t\tplotX: point.plotHighX || point.plotX, // plotHighX is for polar charts\n\t\t\t\t\tplotY: point.plotHigh\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Get the paths\n\t\tlowerPath = baseGetSegmentPath.call(this, lowSegment);\n\t\tif (step) {\n\t\t\tif (step === true) {\n\t\t\t\tstep = 'left';\n\t\t\t}\n\t\t\toptions.step = { left: 'right', center: 'center', right: 'left' }[step]; // swap for reading in getSegmentPath\n\t\t}\n\t\thigherPath = baseGetSegmentPath.call(this, highSegment);\n\t\toptions.step = step;\n\t\t\n\t\t// Create a line on both top and bottom of the range\n\t\tlinePath = [].concat(lowerPath, higherPath);\n\t\t\n\t\t// For the area path, we need to change the 'move' statement into 'lineTo' or 'curveTo'\n\t\tif (!this.chart.polar) {\n\t\t\thigherPath[0] = 'L'; // this probably doesn't work for spline\n\t\t}\n\t\tthis.areaPath = this.areaPath.concat(lowerPath, higherPath);\n\t\t\n\t\treturn linePath;\n\t},\n\t\n\t/**\n\t * Extend the basic drawDataLabels method by running it for both lower and higher\n\t * values.\n\t */\n\tdrawDataLabels: function () {\n\t\t\n\t\tvar data = this.data,\n\t\t\tlength = data.length,\n\t\t\ti,\n\t\t\toriginalDataLabels = [],\n\t\t\tseriesProto = Series.prototype,\n\t\t\tdataLabelOptions = this.options.dataLabels,\n\t\t\talign = dataLabelOptions.align,\n\t\t\tpoint,\n\t\t\tup,\n\t\t\tinverted = this.chart.inverted;\n\t\t\t\n\t\tif (dataLabelOptions.enabled || this._hasPointLabels) {\n\t\t\t\n\t\t\t// Step 1: set preliminary values for plotY and dataLabel and draw the upper labels\n\t\t\ti = length;\n\t\t\twhile (i--) {\n\t\t\t\tpoint = data[i];\n\t\t\t\tif (point) {\n\t\t\t\t\tup = point.plotHigh > point.plotLow;\n\t\t\t\t\t\n\t\t\t\t\t// Set preliminary values\n\t\t\t\t\tpoint.y = point.high;\n\t\t\t\t\tpoint._plotY = point.plotY;\n\t\t\t\t\tpoint.plotY = point.plotHigh;\n\t\t\t\t\t\n\t\t\t\t\t// Store original data labels and set preliminary label objects to be picked up \n\t\t\t\t\t// in the uber method\n\t\t\t\t\toriginalDataLabels[i] = point.dataLabel;\n\t\t\t\t\tpoint.dataLabel = point.dataLabelUpper;\n\t\t\t\t\t\n\t\t\t\t\t// Set the default offset\n\t\t\t\t\tpoint.below = up;\n\t\t\t\t\tif (inverted) {\n\t\t\t\t\t\tif (!align) {\n\t\t\t\t\t\t\tdataLabelOptions.align = up ? 'right' : 'left';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdataLabelOptions.x = dataLabelOptions.xHigh;\t\t\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdataLabelOptions.y = dataLabelOptions.yHigh;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (seriesProto.drawDataLabels) {\n\t\t\t\tseriesProto.drawDataLabels.apply(this, arguments); // #1209\n\t\t\t}\n\t\t\t\n\t\t\t// Step 2: reorganize and handle data labels for the lower values\n\t\t\ti = length;\n\t\t\twhile (i--) {\n\t\t\t\tpoint = data[i];\n\t\t\t\tif (point) {\n\t\t\t\t\tup = point.plotHigh > point.plotLow;\n\t\t\t\t\t\n\t\t\t\t\t// Move the generated labels from step 1, and reassign the original data labels\n\t\t\t\t\tpoint.dataLabelUpper = point.dataLabel;\n\t\t\t\t\tpoint.dataLabel = originalDataLabels[i];\n\t\t\t\t\t\n\t\t\t\t\t// Reset values\n\t\t\t\t\tpoint.y = point.low;\n\t\t\t\t\tpoint.plotY = point._plotY;\n\t\t\t\t\t\n\t\t\t\t\t// Set the default offset\n\t\t\t\t\tpoint.below = !up;\n\t\t\t\t\tif (inverted) {\n\t\t\t\t\t\tif (!align) {\n\t\t\t\t\t\t\tdataLabelOptions.align = up ? 'left' : 'right';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdataLabelOptions.x = dataLabelOptions.xLow;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdataLabelOptions.y = dataLabelOptions.yLow;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (seriesProto.drawDataLabels) {\n\t\t\t\tseriesProto.drawDataLabels.apply(this, arguments);\n\t\t\t}\n\t\t}\n\n\t\tdataLabelOptions.align = align;\n\t\n\t},\n\t\n\talignDataLabel: function () {\n\t\tseriesTypes.column.prototype.alignDataLabel.apply(this, arguments);\n\t},\n\t\n\tsetStackedPoints: noop,\n\t\n\tgetSymbol: noop,\n\t\n\tdrawPoints: noop\n});/**\n * The AreaSplineRangeSeries class\n */\n\ndefaultPlotOptions.areasplinerange = merge(defaultPlotOptions.arearange);\n\n/**\n * AreaSplineRangeSeries object\n */\nseriesTypes.areasplinerange = extendClass(seriesTypes.arearange, {\n\ttype: 'areasplinerange',\n\tgetPointSpline: seriesTypes.spline.prototype.getPointSpline\n});\n\n(function () {\n\t\n\tvar colProto = seriesTypes.column.prototype;\n\n\t/**\n\t * The ColumnRangeSeries class\n\t */\n\tdefaultPlotOptions.columnrange = merge(defaultPlotOptions.column, defaultPlotOptions.arearange, {\n\t\tlineWidth: 1,\n\t\tpointRange: null\n\t});\n\n\t/**\n\t * ColumnRangeSeries object\n\t */\n\tseriesTypes.columnrange = extendClass(seriesTypes.arearange, {\n\t\ttype: 'columnrange',\n\t\t/**\n\t\t * Translate data points from raw values x and y to plotX and plotY\n\t\t */\n\t\ttranslate: function () {\n\t\t\tvar series = this,\n\t\t\t\tyAxis = series.yAxis,\n\t\t\t\tplotHigh;\n\n\t\t\tcolProto.translate.apply(series);\n\n\t\t\t// Set plotLow and plotHigh\n\t\t\teach(series.points, function (point) {\n\t\t\t\tvar shapeArgs = point.shapeArgs,\n\t\t\t\t\tminPointLength = series.options.minPointLength,\n\t\t\t\t\theightDifference,\n\t\t\t\t\theight,\n\t\t\t\t\ty;\n\n\t\t\t\tpoint.tooltipPos = null; // don't inherit from column\n\t\t\t\tpoint.plotHigh = plotHigh = yAxis.translate(point.high, 0, 1, 0, 1);\n\t\t\t\tpoint.plotLow = point.plotY;\n\n\t\t\t\t// adjust shape\n\t\t\t\ty = plotHigh;\n\t\t\t\theight = point.plotY - plotHigh;\n\n\t\t\t\t// Adjust for minPointLength\n\t\t\t\tif (Math.abs(height) < minPointLength) {\n\t\t\t\t\theightDifference = (minPointLength - height);\n\t\t\t\t\theight += heightDifference;\n\t\t\t\t\ty -= heightDifference / 2;\n\n\t\t\t\t// Adjust for negative ranges or reversed Y axis (#1457)\n\t\t\t\t} else if (height < 0) {\n\t\t\t\t\theight *= -1;\n\t\t\t\t\ty -= height;\n\t\t\t\t}\n\n\t\t\t\tshapeArgs.height = height;\n\t\t\t\tshapeArgs.y = y;\n\t\t\t});\n\t\t},\n\t\tdirectTouch: true,\n\t\ttrackerGroups: ['group', 'dataLabelsGroup'],\n\t\tdrawGraph: noop,\n\t\tpointAttrToOptions: colProto.pointAttrToOptions,\n\t\tdrawPoints: colProto.drawPoints,\n\t\tdrawTracker: colProto.drawTracker,\n\t\tanimate: colProto.animate,\n\t\tgetColumnMetrics: colProto.getColumnMetrics\n\t});\n}());\n\n/* \n * The GaugeSeries class\n */\n\n\n\n/**\n * Extend the default options\n */\ndefaultPlotOptions.gauge = merge(defaultPlotOptions.line, {\n\tdataLabels: {\n\t\tenabled: true,\n\t\tdefer: false,\n\t\ty: 15,\n\t\tborderWidth: 1,\n\t\tborderColor: 'silver',\n\t\tborderRadius: 3,\n\t\tcrop: false,\n\t\tverticalAlign: 'top',\n\t\tzIndex: 2\n\t},\n\tdial: {\n\t\t// radius: '80%',\n\t\t// backgroundColor: 'black',\n\t\t// borderColor: 'silver',\n\t\t// borderWidth: 0,\n\t\t// baseWidth: 3,\n\t\t// topWidth: 1,\n\t\t// baseLength: '70%' // of radius\n\t\t// rearLength: '10%'\n\t},\n\tpivot: {\n\t\t//radius: 5,\n\t\t//borderWidth: 0\n\t\t//borderColor: 'silver',\n\t\t//backgroundColor: 'black'\n\t},\n\ttooltip: {\n\t\theaderFormat: ''\n\t},\n\tshowInLegend: false\n});\n\n/**\n * Extend the point object\n */\nvar GaugePoint = extendClass(Point, {\n\t/**\n\t * Don't do any hover colors or anything\n\t */\n\tsetState: function (state) {\n\t\tthis.state = state;\n\t}\n});\n\n\n/**\n * Add the series type\n */\nvar GaugeSeries = {\n\ttype: 'gauge',\n\tpointClass: GaugePoint,\n\t\n\t// chart.angular will be set to true when a gauge series is present, and this will\n\t// be used on the axes\n\tangular: true, \n\tdrawGraph: noop,\n\tfixedBox: true,\n\tforceDL: true,\n\ttrackerGroups: ['group', 'dataLabelsGroup'],\n\t\n\t/**\n\t * Calculate paths etc\n\t */\n\ttranslate: function () {\n\t\t\n\t\tvar series = this,\n\t\t\tyAxis = series.yAxis,\n\t\t\toptions = series.options,\n\t\t\tcenter = yAxis.center;\n\t\t\t\n\t\tseries.generatePoints();\n\t\t\n\t\teach(series.points, function (point) {\n\t\t\t\n\t\t\tvar dialOptions = merge(options.dial, point.dial),\n\t\t\t\tradius = (pInt(pick(dialOptions.radius, 80)) * center[2]) / 200,\n\t\t\t\tbaseLength = (pInt(pick(dialOptions.baseLength, 70)) * radius) / 100,\n\t\t\t\trearLength = (pInt(pick(dialOptions.rearLength, 10)) * radius) / 100,\n\t\t\t\tbaseWidth = dialOptions.baseWidth || 3,\n\t\t\t\ttopWidth = dialOptions.topWidth || 1,\n\t\t\t\tovershoot = options.overshoot,\n\t\t\t\trotation = yAxis.startAngleRad + yAxis.translate(point.y, null, null, null, true);\n\n\t\t\t// Handle the wrap and overshoot options\n\t\t\tif (overshoot && typeof overshoot === 'number') {\n\t\t\t\tovershoot = overshoot / 180 * Math.PI;\n\t\t\t\trotation = Math.max(yAxis.startAngleRad - overshoot, Math.min(yAxis.endAngleRad + overshoot, rotation));\t\t\t\n\t\t\t\n\t\t\t} else if (options.wrap === false) {\n\t\t\t\trotation = Math.max(yAxis.startAngleRad, Math.min(yAxis.endAngleRad, rotation));\n\t\t\t}\n\n\t\t\trotation = rotation * 180 / Math.PI;\n\t\t\t\t\n\t\t\tpoint.shapeType = 'path';\n\t\t\tpoint.shapeArgs = {\n\t\t\t\td: dialOptions.path || [\n\t\t\t\t\t'M', \n\t\t\t\t\t-rearLength, -baseWidth / 2, \n\t\t\t\t\t'L', \n\t\t\t\t\tbaseLength, -baseWidth / 2,\n\t\t\t\t\tradius, -topWidth / 2,\n\t\t\t\t\tradius, topWidth / 2,\n\t\t\t\t\tbaseLength, baseWidth / 2,\n\t\t\t\t\t-rearLength, baseWidth / 2,\n\t\t\t\t\t'z'\n\t\t\t\t],\n\t\t\t\ttranslateX: center[0],\n\t\t\t\ttranslateY: center[1],\n\t\t\t\trotation: rotation\n\t\t\t};\n\t\t\t\n\t\t\t// Positions for data label\n\t\t\tpoint.plotX = center[0];\n\t\t\tpoint.plotY = center[1];\n\t\t});\n\t},\n\t\n\t/**\n\t * Draw the points where each point is one needle\n\t */\n\tdrawPoints: function () {\n\t\t\n\t\tvar series = this,\n\t\t\tcenter = series.yAxis.center,\n\t\t\tpivot = series.pivot,\n\t\t\toptions = series.options,\n\t\t\tpivotOptions = options.pivot,\n\t\t\trenderer = series.chart.renderer;\n\t\t\n\t\teach(series.points, function (point) {\n\t\t\t\n\t\t\tvar graphic = point.graphic,\n\t\t\t\tshapeArgs = point.shapeArgs,\n\t\t\t\td = shapeArgs.d,\n\t\t\t\tdialOptions = merge(options.dial, point.dial); // #1233\n\t\t\t\n\t\t\tif (graphic) {\n\t\t\t\tgraphic.animate(shapeArgs);\n\t\t\t\tshapeArgs.d = d; // animate alters it\n\t\t\t} else {\n\t\t\t\tpoint.graphic = renderer[point.shapeType](shapeArgs)\n\t\t\t\t\t.attr({\n\t\t\t\t\t\tstroke: dialOptions.borderColor || 'none',\n\t\t\t\t\t\t'stroke-width': dialOptions.borderWidth || 0,\n\t\t\t\t\t\tfill: dialOptions.backgroundColor || 'black',\n\t\t\t\t\t\trotation: shapeArgs.rotation // required by VML when animation is false\n\t\t\t\t\t})\n\t\t\t\t\t.add(series.group);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Add or move the pivot\n\t\tif (pivot) {\n\t\t\tpivot.animate({ // #1235\n\t\t\t\ttranslateX: center[0],\n\t\t\t\ttranslateY: center[1]\n\t\t\t});\n\t\t} else {\n\t\t\tseries.pivot = renderer.circle(0, 0, pick(pivotOptions.radius, 5))\n\t\t\t\t.attr({\n\t\t\t\t\t'stroke-width': pivotOptions.borderWidth || 0,\n\t\t\t\t\tstroke: pivotOptions.borderColor || 'silver',\n\t\t\t\t\tfill: pivotOptions.backgroundColor || 'black'\n\t\t\t\t})\n\t\t\t\t.translate(center[0], center[1])\n\t\t\t\t.add(series.group);\n\t\t}\n\t},\n\t\n\t/**\n\t * Animate the arrow up from startAngle\n\t */\n\tanimate: function (init) {\n\t\tvar series = this;\n\n\t\tif (!init) {\n\t\t\teach(series.points, function (point) {\n\t\t\t\tvar graphic = point.graphic;\n\n\t\t\t\tif (graphic) {\n\t\t\t\t\t// start value\n\t\t\t\t\tgraphic.attr({\n\t\t\t\t\t\trotation: series.yAxis.startAngleRad * 180 / Math.PI\n\t\t\t\t\t});\n\n\t\t\t\t\t// animate\n\t\t\t\t\tgraphic.animate({\n\t\t\t\t\t\trotation: point.shapeArgs.rotation\n\t\t\t\t\t}, series.options.animation);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// delete this function to allow it only once\n\t\t\tseries.animate = null;\n\t\t}\n\t},\n\t\n\trender: function () {\n\t\tthis.group = this.plotGroup(\n\t\t\t'group', \n\t\t\t'series', \n\t\t\tthis.visible ? 'visible' : 'hidden', \n\t\t\tthis.options.zIndex, \n\t\t\tthis.chart.seriesGroup\n\t\t);\n\t\tSeries.prototype.render.call(this);\n\t\tthis.group.clip(this.chart.clipRect);\n\t},\n\t\n\t/**\n\t * Extend the basic setData method by running processData and generatePoints immediately,\n\t * in order to access the points from the legend.\n\t */\n\tsetData: function (data, redraw) {\n\t\tSeries.prototype.setData.call(this, data, false);\n\t\tthis.processData();\n\t\tthis.generatePoints();\n\t\tif (pick(redraw, true)) {\n\t\t\tthis.chart.redraw();\n\t\t}\n\t},\n\n\t/**\n\t * If the tracking module is loaded, add the point tracker\n\t */\n\tdrawTracker: TrackerMixin && TrackerMixin.drawTrackerPoint\n};\nseriesTypes.gauge = extendClass(seriesTypes.line, GaugeSeries);\n\n/* ****************************************************************************\n * Start Box plot series code\t\t\t\t\t\t\t\t\t\t\t      *\n *****************************************************************************/\n\n// Set default options\ndefaultPlotOptions.boxplot = merge(defaultPlotOptions.column, {\n\tfillColor: '#FFFFFF',\n\tlineWidth: 1,\n\t//medianColor: null,\n\tmedianWidth: 2,\n\tstates: {\n\t\thover: {\n\t\t\tbrightness: -0.3\n\t\t}\n\t},\n\t//stemColor: null,\n\t//stemDashStyle: 'solid'\n\t//stemWidth: null,\n\tthreshold: null,\n\ttooltip: {\n\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> <b> {series.name}</b><br/>' + // docs\n\t\t\t'Maximum: {point.high}<br/>' +\n\t\t\t'Upper quartile: {point.q3}<br/>' +\n\t\t\t'Median: {point.median}<br/>' +\n\t\t\t'Lower quartile: {point.q1}<br/>' +\n\t\t\t'Minimum: {point.low}<br/>'\n\t\t\t\n\t},\n\t//whiskerColor: null,\n\twhiskerLength: '50%',\n\twhiskerWidth: 2\n});\n\n// Create the series object\nseriesTypes.boxplot = extendClass(seriesTypes.column, {\n\ttype: 'boxplot',\n\tpointArrayMap: ['low', 'q1', 'median', 'q3', 'high'], // array point configs are mapped to this\n\ttoYData: function (point) { // return a plain array for speedy calculation\n\t\treturn [point.low, point.q1, point.median, point.q3, point.high];\n\t},\n\tpointValKey: 'high', // defines the top of the tracker\n\t\n\t/**\n\t * One-to-one mapping from options to SVG attributes\n\t */\n\tpointAttrToOptions: { // mapping between SVG attributes and the corresponding options\n\t\tfill: 'fillColor',\n\t\tstroke: 'color',\n\t\t'stroke-width': 'lineWidth'\n\t},\n\t\n\t/**\n\t * Disable data labels for box plot\n\t */\n\tdrawDataLabels: noop,\n\n\t/**\n\t * Translate data points from raw values x and y to plotX and plotY\n\t */\n\ttranslate: function () {\n\t\tvar series = this,\n\t\t\tyAxis = series.yAxis,\n\t\t\tpointArrayMap = series.pointArrayMap;\n\n\t\tseriesTypes.column.prototype.translate.apply(series);\n\n\t\t// do the translation on each point dimension\n\t\teach(series.points, function (point) {\n\t\t\teach(pointArrayMap, function (key) {\n\t\t\t\tif (point[key] !== null) {\n\t\t\t\t\tpoint[key + 'Plot'] = yAxis.translate(point[key], 0, 1, 0, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n\t * Draw the data points\n\t */\n\tdrawPoints: function () {\n\t\tvar series = this,  //state = series.state,\n\t\t\tpoints = series.points,\n\t\t\toptions = series.options,\n\t\t\tchart = series.chart,\n\t\t\trenderer = chart.renderer,\n\t\t\tpointAttr,\n\t\t\tq1Plot,\n\t\t\tq3Plot,\n\t\t\thighPlot,\n\t\t\tlowPlot,\n\t\t\tmedianPlot,\n\t\t\tcrispCorr,\n\t\t\tcrispX,\n\t\t\tgraphic,\n\t\t\tstemPath,\n\t\t\tstemAttr,\n\t\t\tboxPath,\n\t\t\twhiskersPath,\n\t\t\twhiskersAttr,\n\t\t\tmedianPath,\n\t\t\tmedianAttr,\n\t\t\twidth,\n\t\t\tleft,\n\t\t\tright,\n\t\t\thalfWidth,\n\t\t\tshapeArgs,\n\t\t\tcolor,\n\t\t\tdoQuartiles = series.doQuartiles !== false, // error bar inherits this series type but doesn't do quartiles\n\t\t\twhiskerLength = parseInt(series.options.whiskerLength, 10) / 100;\n\n\n\t\teach(points, function (point) {\n\n\t\t\tgraphic = point.graphic;\n\t\t\tshapeArgs = point.shapeArgs; // the box\n\t\t\tstemAttr = {};\n\t\t\twhiskersAttr = {};\n\t\t\tmedianAttr = {};\n\t\t\tcolor = point.color || series.color;\n\t\t\t\n\t\t\tif (point.plotY !== UNDEFINED) {\n\n\t\t\t\tpointAttr = point.pointAttr[point.selected ? 'selected' : ''];\n\n\t\t\t\t// crisp vector coordinates\n\t\t\t\twidth = shapeArgs.width;\n\t\t\t\tleft = mathFloor(shapeArgs.x);\n\t\t\t\tright = left + width;\n\t\t\t\thalfWidth = mathRound(width / 2);\n\t\t\t\t//crispX = mathRound(left + halfWidth) + crispCorr;\n\t\t\t\tq1Plot = mathFloor(doQuartiles ? point.q1Plot : point.lowPlot);// + crispCorr;\n\t\t\t\tq3Plot = mathFloor(doQuartiles ? point.q3Plot : point.lowPlot);// + crispCorr;\n\t\t\t\thighPlot = mathFloor(point.highPlot);// + crispCorr;\n\t\t\t\tlowPlot = mathFloor(point.lowPlot);// + crispCorr;\n\t\t\t\t\n\t\t\t\t// Stem attributes\n\t\t\t\tstemAttr.stroke = point.stemColor || options.stemColor || color;\n\t\t\t\tstemAttr['stroke-width'] = pick(point.stemWidth, options.stemWidth, options.lineWidth);\n\t\t\t\tstemAttr.dashstyle = point.stemDashStyle || options.stemDashStyle;\n\t\t\t\t\n\t\t\t\t// Whiskers attributes\n\t\t\t\twhiskersAttr.stroke = point.whiskerColor || options.whiskerColor || color;\n\t\t\t\twhiskersAttr['stroke-width'] = pick(point.whiskerWidth, options.whiskerWidth, options.lineWidth);\n\t\t\t\t\n\t\t\t\t// Median attributes\n\t\t\t\tmedianAttr.stroke = point.medianColor || options.medianColor || color;\n\t\t\t\tmedianAttr['stroke-width'] = pick(point.medianWidth, options.medianWidth, options.lineWidth);\n\t\t\t\t\n\t\t\t\t// The stem\n\t\t\t\tcrispCorr = (stemAttr['stroke-width'] % 2) / 2;\n\t\t\t\tcrispX = left + halfWidth + crispCorr;\t\t\t\t\n\t\t\t\tstemPath = [\n\t\t\t\t\t// stem up\n\t\t\t\t\t'M',\n\t\t\t\t\tcrispX, q3Plot,\n\t\t\t\t\t'L',\n\t\t\t\t\tcrispX, highPlot,\n\t\t\t\t\t\n\t\t\t\t\t// stem down\n\t\t\t\t\t'M',\n\t\t\t\t\tcrispX, q1Plot,\n\t\t\t\t\t'L',\n\t\t\t\t\tcrispX, lowPlot\n\t\t\t\t];\n\t\t\t\t\n\t\t\t\t// The box\n\t\t\t\tif (doQuartiles) {\n\t\t\t\t\tcrispCorr = (pointAttr['stroke-width'] % 2) / 2;\n\t\t\t\t\tcrispX = mathFloor(crispX) + crispCorr;\n\t\t\t\t\tq1Plot = mathFloor(q1Plot) + crispCorr;\n\t\t\t\t\tq3Plot = mathFloor(q3Plot) + crispCorr;\n\t\t\t\t\tleft += crispCorr;\n\t\t\t\t\tright += crispCorr;\n\t\t\t\t\tboxPath = [\n\t\t\t\t\t\t'M',\n\t\t\t\t\t\tleft, q3Plot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tleft, q1Plot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tright, q1Plot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tright, q3Plot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tleft, q3Plot,\n\t\t\t\t\t\t'z'\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// The whiskers\n\t\t\t\tif (whiskerLength) {\n\t\t\t\t\tcrispCorr = (whiskersAttr['stroke-width'] % 2) / 2;\n\t\t\t\t\thighPlot = highPlot + crispCorr;\n\t\t\t\t\tlowPlot = lowPlot + crispCorr;\n\t\t\t\t\twhiskersPath = [\n\t\t\t\t\t\t// High whisker\n\t\t\t\t\t\t'M',\n\t\t\t\t\t\tcrispX - halfWidth * whiskerLength, \n\t\t\t\t\t\thighPlot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tcrispX + halfWidth * whiskerLength, \n\t\t\t\t\t\thighPlot,\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Low whisker\n\t\t\t\t\t\t'M',\n\t\t\t\t\t\tcrispX - halfWidth * whiskerLength, \n\t\t\t\t\t\tlowPlot,\n\t\t\t\t\t\t'L',\n\t\t\t\t\t\tcrispX + halfWidth * whiskerLength, \n\t\t\t\t\t\tlowPlot\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// The median\n\t\t\t\tcrispCorr = (medianAttr['stroke-width'] % 2) / 2;\t\t\t\t\n\t\t\t\tmedianPlot = mathRound(point.medianPlot) + crispCorr;\n\t\t\t\tmedianPath = [\n\t\t\t\t\t'M',\n\t\t\t\t\tleft, \n\t\t\t\t\tmedianPlot,\n\t\t\t\t\t'L',\n\t\t\t\t\tright, \n\t\t\t\t\tmedianPlot\n\t\t\t\t];\n\t\t\t\t\n\t\t\t\t// Create or update the graphics\n\t\t\t\tif (graphic) { // update\n\t\t\t\t\t\n\t\t\t\t\tpoint.stem.animate({ d: stemPath });\n\t\t\t\t\tif (whiskerLength) {\n\t\t\t\t\t\tpoint.whiskers.animate({ d: whiskersPath });\n\t\t\t\t\t}\n\t\t\t\t\tif (doQuartiles) {\n\t\t\t\t\t\tpoint.box.animate({ d: boxPath });\n\t\t\t\t\t}\n\t\t\t\t\tpoint.medianShape.animate({ d: medianPath });\n\t\t\t\t\t\n\t\t\t\t} else { // create new\n\t\t\t\t\tpoint.graphic = graphic = renderer.g()\n\t\t\t\t\t\t.add(series.group);\n\t\t\t\t\t\n\t\t\t\t\tpoint.stem = renderer.path(stemPath)\n\t\t\t\t\t\t.attr(stemAttr)\n\t\t\t\t\t\t.add(graphic);\n\t\t\t\t\t\t\n\t\t\t\t\tif (whiskerLength) {\n\t\t\t\t\t\tpoint.whiskers = renderer.path(whiskersPath) \n\t\t\t\t\t\t\t.attr(whiskersAttr)\n\t\t\t\t\t\t\t.add(graphic);\n\t\t\t\t\t}\n\t\t\t\t\tif (doQuartiles) {\n\t\t\t\t\t\tpoint.box = renderer.path(boxPath)\n\t\t\t\t\t\t\t.attr(pointAttr)\n\t\t\t\t\t\t\t.add(graphic);\n\t\t\t\t\t}\t\n\t\t\t\t\tpoint.medianShape = renderer.path(medianPath)\n\t\t\t\t\t\t.attr(medianAttr)\n\t\t\t\t\t\t.add(graphic);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t},\n\tsetStackedPoints: noop // #3890\n\n\n});\n\n/* ****************************************************************************\n * End Box plot series code\t\t\t\t\t\t\t\t\t\t\t\t*\n *****************************************************************************/\n/* ****************************************************************************\n * Start error bar series code                                                *\n *****************************************************************************/\n\n// 1 - set default options\ndefaultPlotOptions.errorbar = merge(defaultPlotOptions.boxplot, {\n\tcolor: '#000000',\n\tgrouping: false,\n\tlinkedTo: ':previous',\n\ttooltip: {\n\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>' // docs\n\t},\n\twhiskerWidth: null\n});\n\n// 2 - Create the series object\nseriesTypes.errorbar = extendClass(seriesTypes.boxplot, {\n\ttype: 'errorbar',\n\tpointArrayMap: ['low', 'high'], // array point configs are mapped to this\n\ttoYData: function (point) { // return a plain array for speedy calculation\n\t\treturn [point.low, point.high];\n\t},\n\tpointValKey: 'high', // defines the top of the tracker\n\tdoQuartiles: false,\n\tdrawDataLabels: seriesTypes.arearange ? seriesTypes.arearange.prototype.drawDataLabels : noop,\n\n\t/**\n\t * Get the width and X offset, either on top of the linked series column\n\t * or standalone\n\t */\n\tgetColumnMetrics: function () {\n\t\treturn (this.linkedParent && this.linkedParent.columnMetrics) || \n\t\t\tseriesTypes.column.prototype.getColumnMetrics.call(this);\n\t}\n});\n\n/* ****************************************************************************\n * End error bar series code                                                  *\n *****************************************************************************/\n/* ****************************************************************************\n * Start Waterfall series code                                                *\n *****************************************************************************/\n\n// 1 - set default options\ndefaultPlotOptions.waterfall = merge(defaultPlotOptions.column, {\n\tlineWidth: 1,\n\tlineColor: '#333',\n\tdashStyle: 'dot',\n\tborderColor: '#333',\n\tdataLabels: {\n\t\tinside: true\n\t},\n\tstates: {\n\t\thover: {\n\t\t\tlineWidthPlus: 0 // #3126\n\t\t}\n\t}\n});\n\n\n// 2 - Create the series object\nseriesTypes.waterfall = extendClass(seriesTypes.column, {\n\ttype: 'waterfall',\n\n\tupColorProp: 'fill',\n\n\tpointValKey: 'y',\n\n\t/**\n\t * Translate data points from raw values\n\t */\n\ttranslate: function () {\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\tyAxis = series.yAxis,\n\t\t\tlen,\n\t\t\ti,\n\t\t\tpoints,\n\t\t\tpoint,\n\t\t\tshapeArgs,\n\t\t\tstack,\n\t\t\ty,\n\t\t\tyValue,\n\t\t\tpreviousY,\n\t\t\tpreviousIntermediate,\n\t\t\trange,\n\t\t\tthreshold = options.threshold,\n\t\t\tstacking = options.stacking,\n\t\t\ttooltipY;\n\n\t\t// run column series translate\n\t\tseriesTypes.column.prototype.translate.apply(this);\n\n\t\tpreviousY = previousIntermediate = threshold;\n\t\tpoints = series.points;\n\n\t\tfor (i = 0, len = points.length; i < len; i++) {\n\t\t\t// cache current point object\n\t\t\tpoint = points[i];\n\t\t\tyValue = this.processedYData[i];\n\t\t\tshapeArgs = point.shapeArgs;\n\n\t\t\t// get current stack\n\t\t\tstack = stacking && yAxis.stacks[(series.negStacks && yValue < threshold ? '-' : '') + series.stackKey];\n\t\t\trange = stack ? \n\t\t\t\tstack[point.x].points[series.index + ',' + i] :\n\t\t\t\t[0, yValue];\n\n\t\t\t// override point value for sums\n\t\t\t// #3710 Update point does not propagate to sum\n\t\t\tif (point.isSum) {\n\t\t\t\tpoint.y = yValue;\n\t\t\t} else if (point.isIntermediateSum) {\n\t\t\t\tpoint.y = yValue - previousIntermediate; // #3840\n\t\t\t}\n\t\t\t// up points\n\t\t\ty = mathMax(previousY, previousY + point.y) + range[0];\n\t\t\tshapeArgs.y = yAxis.translate(y, 0, 1);\n\n\n\t\t\t// sum points\n\t\t\tif (point.isSum) {\n\t\t\t\tshapeArgs.y = yAxis.translate(range[1], 0, 1);\n\t\t\t\tshapeArgs.height = Math.min(yAxis.translate(range[0], 0, 1), yAxis.len) - shapeArgs.y; // #4256\n\n\t\t\t} else if (point.isIntermediateSum) {\n\t\t\t\tshapeArgs.y = yAxis.translate(range[1], 0, 1);\n\t\t\t\tshapeArgs.height = Math.min(yAxis.translate(previousIntermediate, 0, 1), yAxis.len) - shapeArgs.y;\n\t\t\t\tpreviousIntermediate = range[1];\n\n\t\t\t// If it's not the sum point, update previous stack end position and get \n\t\t\t// shape height (#3886)\n\t\t\t} else {\n\t\t\t\tif (previousY !== 0) { // Not the first point\n\t\t\t\t\tshapeArgs.height = yValue > 0 ? \n\t\t\t\t\t\tyAxis.translate(previousY, 0, 1) - shapeArgs.y :\n\t\t\t\t\t\tyAxis.translate(previousY, 0, 1) - yAxis.translate(previousY - yValue, 0, 1);\n\t\t\t\t}\n\t\t\t\tpreviousY += yValue;\n\t\t\t}\n\t\t\t// #3952 Negative sum or intermediate sum not rendered correctly\n\t\t\tif (shapeArgs.height < 0) {\n\t\t\t\tshapeArgs.y += shapeArgs.height;\n\t\t\t\tshapeArgs.height *= -1;\n\t\t\t}\n\n\t\t\tpoint.plotY = shapeArgs.y = mathRound(shapeArgs.y) - (series.borderWidth % 2) / 2;\n\t\t\tshapeArgs.height = mathMax(mathRound(shapeArgs.height), 0.001); // #3151\n\t\t\tpoint.yBottom = shapeArgs.y + shapeArgs.height;\n\n\t\t\t// Correct tooltip placement (#3014)\n\t\t\ttooltipY = point.plotY + (point.negative ? shapeArgs.height : 0);\n\t\t\tif (series.chart.inverted) {\n\t\t\t\tpoint.tooltipPos[0] = yAxis.len - tooltipY;\n\t\t\t} else {\n\t\t\t\tpoint.tooltipPos[1] = tooltipY;\n\t\t\t}\n\n\t\t}\n\t},\n\n\t/**\n\t * Call default processData then override yData to reflect waterfall's extremes on yAxis\n\t */\n\tprocessData: function (force) {\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\tyData = series.yData,\n\t\t\tpoints = series.options.data, // #3710 Update point does not propagate to sum\n\t\t\tpoint,\n\t\t\tdataLength = yData.length,\n\t\t\tthreshold = options.threshold || 0,\n\t\t\tsubSum,\n\t\t\tsum,\n\t\t\tdataMin,\n\t\t\tdataMax,\n\t\t\ty,\n\t\t\ti;\n\n\t\tsum = subSum = dataMin = dataMax = threshold;\n\n\t\tfor (i = 0; i < dataLength; i++) {\n\t\t\ty = yData[i];\n\t\t\tpoint = points && points[i] ? points[i] : {};\n\n\t\t\tif (y === \"sum\" || point.isSum) {\n\t\t\t\tyData[i] = sum;\n\t\t\t} else if (y === \"intermediateSum\" || point.isIntermediateSum) {\n\t\t\t\tyData[i] = subSum;\n\t\t\t} else {\n\t\t\t\tsum += y;\n\t\t\t\tsubSum += y;\n\t\t\t}\n\t\t\tdataMin = Math.min(sum, dataMin);\n\t\t\tdataMax = Math.max(sum, dataMax);\n\t\t}\n\n\t\tSeries.prototype.processData.call(this, force);\n\n\t\t// Record extremes\n\t\tseries.dataMin = dataMin;\n\t\tseries.dataMax = dataMax;\n\t},\n\n\t/**\n\t * Return y value or string if point is sum\n\t */\n\ttoYData: function (pt) {\n\t\tif (pt.isSum) {\n\t\t\treturn (pt.x === 0 ? null : \"sum\"); //#3245 Error when first element is Sum or Intermediate Sum\n\t\t} else if (pt.isIntermediateSum) {\n\t\t\treturn (pt.x === 0 ? null : \"intermediateSum\"); //#3245\n\t\t}\n\t\treturn pt.y;\n\t},\n\n\t/**\n\t * Postprocess mapping between options and SVG attributes\n\t */\n\tgetAttribs: function () {\n\t\tseriesTypes.column.prototype.getAttribs.apply(this, arguments);\n\n\t\tvar series = this,\n\t\t\toptions = series.options,\n\t\t\tstateOptions = options.states,\n\t\t\tupColor = options.upColor || series.color,\n\t\t\thoverColor = Highcharts.Color(upColor).brighten(0.1).get(),\n\t\t\tseriesDownPointAttr = merge(series.pointAttr),\n\t\t\tupColorProp = series.upColorProp;\n\n\t\tseriesDownPointAttr[''][upColorProp] = upColor;\n\t\tseriesDownPointAttr.hover[upColorProp] = stateOptions.hover.upColor || hoverColor;\n\t\tseriesDownPointAttr.select[upColorProp] = stateOptions.select.upColor || upColor;\n\n\t\teach(series.points, function (point) {\n\t\t\tif (!point.options.color) {\n\t\t\t\t// Up color\n\t\t\t\tif (point.y > 0) {\n\t\t\t\t\tpoint.pointAttr = seriesDownPointAttr;\n\t\t\t\t\tpoint.color = upColor;\n\n\t\t\t\t// Down color (#3710, update to negative)\n\t\t\t\t} else {\n\t\t\t\t\tpoint.pointAttr = series.pointAttr;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Draw columns' connector lines\n\t */\n\tgetGraphPath: function () {\n\n\t\tvar data = this.data,\n\t\t\tlength = data.length,\n\t\t\tlineWidth = this.options.lineWidth + this.borderWidth,\n\t\t\tnormalizer = mathRound(lineWidth) % 2 / 2,\n\t\t\tpath = [],\n\t\t\tM = 'M',\n\t\t\tL = 'L',\n\t\t\tprevArgs,\n\t\t\tpointArgs,\n\t\t\ti,\n\t\t\td;\n\n\t\tfor (i = 1; i < length; i++) {\n\t\t\tpointArgs = data[i].shapeArgs;\n\t\t\tprevArgs = data[i - 1].shapeArgs;\n\n\t\t\td = [\n\t\t\t\tM,\n\t\t\t\tprevArgs.x + prevArgs.width, prevArgs.y + normalizer,\n\t\t\t\tL,\n\t\t\t\tpointArgs.x, prevArgs.y + normalizer\n\t\t\t];\n\n\t\t\tif (data[i - 1].y < 0) {\n\t\t\t\td[2] += prevArgs.height;\n\t\t\t\td[5] += prevArgs.height;\n\t\t\t}\n\n\t\t\tpath = path.concat(d);\n\t\t}\n\n\t\treturn path;\n\t},\n\n\t/**\n\t * Extremes are recorded in processData\n\t */\n\tgetExtremes: noop,\n\n\tdrawGraph: Series.prototype.drawGraph\n});\n\n/* ****************************************************************************\n * End Waterfall series code                                                  *\n *****************************************************************************/\n/**\n * Set the default options for polygon\n */\ndefaultPlotOptions.polygon = merge(defaultPlotOptions.scatter, {\n\tmarker: {\n\t\tenabled: false\n\t}\n});\n\n/**\n * The polygon series class\n */\nseriesTypes.polygon = extendClass(seriesTypes.scatter, {\n\ttype: 'polygon',\n\tfillGraph: true,\n\t// Close all segments\n\tgetSegmentPath: function (segment) {\n\t\treturn Series.prototype.getSegmentPath.call(this, segment).concat('z');\n\t},\n\tdrawGraph: Series.prototype.drawGraph,\n\tdrawLegendSymbol: Highcharts.LegendSymbolMixin.drawRectangle\n});\n/* ****************************************************************************\n * Start Bubble series code\t\t\t\t\t\t\t\t\t\t\t          *\n *****************************************************************************/\n\n// 1 - set default options\ndefaultPlotOptions.bubble = merge(defaultPlotOptions.scatter, {\n\tdataLabels: {\n\t\tformatter: function () { // #2945\n\t\t\treturn this.point.z;\n\t\t},\n\t\tinside: true,\n\t\tverticalAlign: 'middle'\n\t},\n\t// displayNegative: true,\n\tmarker: {\n\t\t// fillOpacity: 0.5,\n\t\tlineColor: null, // inherit from series.color\n\t\tlineWidth: 1\n\t},\n\tminSize: 8,\n\tmaxSize: '20%',\n\t// negativeColor: null,\n\t// sizeBy: 'area'\n\tstates: {\n\t\thover: {\n\t\t\thalo: {\n\t\t\t\tsize: 5\n\t\t\t}\n\t\t}\n\t},\n\ttooltip: {\n\t\tpointFormat: '({point.x}, {point.y}), Size: {point.z}'\n\t},\n\tturboThreshold: 0,\n\tzThreshold: 0,\n\tzoneAxis: 'z'\n});\n\nvar BubblePoint = extendClass(Point, {\n\thaloPath: function () {\n\t\treturn Point.prototype.haloPath.call(this, this.shapeArgs.r + this.series.options.states.hover.halo.size);\n\t},\n\tttBelow: false\n});\n\n// 2 - Create the series object\nseriesTypes.bubble = extendClass(seriesTypes.scatter, {\n\ttype: 'bubble',\n\tpointClass: BubblePoint,\n\tpointArrayMap: ['y', 'z'],\n\tparallelArrays: ['x', 'y', 'z'],\n\ttrackerGroups: ['group', 'dataLabelsGroup'],\n\tbubblePadding: true,\n\tzoneAxis: 'z',\n\t\n\t/**\n\t * Mapping between SVG attributes and the corresponding options\n\t */\n\tpointAttrToOptions: { \n\t\tstroke: 'lineColor',\n\t\t'stroke-width': 'lineWidth',\n\t\tfill: 'fillColor'\n\t},\n\t\n\t/**\n\t * Apply the fillOpacity to all fill positions\n\t */\n\tapplyOpacity: function (fill) {\n\t\tvar markerOptions = this.options.marker,\n\t\t\tfillOpacity = pick(markerOptions.fillOpacity, 0.5);\n\t\t\n\t\t// When called from Legend.colorizeItem, the fill isn't predefined\n\t\tfill = fill || markerOptions.fillColor || this.color; \n\t\t\n\t\tif (fillOpacity !== 1) {\n\t\t\tfill = Color(fill).setOpacity(fillOpacity).get('rgba');\n\t\t}\n\t\treturn fill;\n\t},\n\t\n\t/**\n\t * Extend the convertAttribs method by applying opacity to the fill\n\t */\n\tconvertAttribs: function () {\n\t\tvar obj = Series.prototype.convertAttribs.apply(this, arguments);\n\t\t\n\t\tobj.fill = this.applyOpacity(obj.fill);\n\t\t\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Get the radius for each point based on the minSize, maxSize and each point's Z value. This\n\t * must be done prior to Series.translate because the axis needs to add padding in \n\t * accordance with the point sizes.\n\t */\n\tgetRadii: function (zMin, zMax, minSize, maxSize) {\n\t\tvar len,\n\t\t\ti,\n\t\t\tpos,\n\t\t\tzData = this.zData,\n\t\t\tradii = [],\n\t\t\tsizeByArea = this.options.sizeBy !== 'width',\n\t\t\tzRange;\n\t\t\n\t\t// Set the shape type and arguments to be picked up in drawPoints\n\t\tfor (i = 0, len = zData.length; i < len; i++) {\n\t\t\tzRange = zMax - zMin;\n\t\t\tpos = zRange > 0 ? // relative size, a number between 0 and 1\n\t\t\t\t(zData[i] - zMin) / (zMax - zMin) : \n\t\t\t\t0.5;\n\t\t\tif (sizeByArea && pos >= 0) {\n\t\t\t\tpos = Math.sqrt(pos);\n\t\t\t}\n\t\t\tradii.push(math.ceil(minSize + pos * (maxSize - minSize)) / 2);\n\t\t}\n\t\tthis.radii = radii;\n\t},\n\t\n\t/**\n\t * Perform animation on the bubbles\n\t */\n\tanimate: function (init) {\n\t\tvar animation = this.options.animation;\n\t\t\n\t\tif (!init) { // run the animation\n\t\t\teach(this.points, function (point) {\n\t\t\t\tvar graphic = point.graphic,\n\t\t\t\t\tshapeArgs = point.shapeArgs;\n\n\t\t\t\tif (graphic && shapeArgs) {\n\t\t\t\t\t// start values\n\t\t\t\t\tgraphic.attr('r', 1);\n\n\t\t\t\t\t// animate\n\t\t\t\t\tgraphic.animate({\n\t\t\t\t\t\tr: shapeArgs.r\n\t\t\t\t\t}, animation);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// delete this function to allow it only once\n\t\t\tthis.animate = null;\n\t\t}\n\t},\n\t\n\t/**\n\t * Extend the base translate method to handle bubble size\n\t */\n\ttranslate: function () {\n\t\t\n\t\tvar i,\n\t\t\tdata = this.data,\n\t\t\tpoint,\n\t\t\tradius,\n\t\t\tradii = this.radii;\n\t\t\n\t\t// Run the parent method\n\t\tseriesTypes.scatter.prototype.translate.call(this);\n\t\t\n\t\t// Set the shape type and arguments to be picked up in drawPoints\n\t\ti = data.length;\n\t\t\n\t\twhile (i--) {\n\t\t\tpoint = data[i];\n\t\t\tradius = radii ? radii[i] : 0; // #1737\n\t\t\t\n\t\t\tif (radius >= this.minPxSize / 2) {\n\t\t\t\t// Shape arguments\n\t\t\t\tpoint.shapeType = 'circle';\n\t\t\t\tpoint.shapeArgs = {\n\t\t\t\t\tx: point.plotX,\n\t\t\t\t\ty: point.plotY,\n\t\t\t\t\tr: radius\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Alignment box for the data label\n\t\t\t\tpoint.dlBox = {\n\t\t\t\t\tx: point.plotX - radius,\n\t\t\t\t\ty: point.plotY - radius,\n\t\t\t\t\twidth: 2 * radius,\n\t\t\t\t\theight: 2 * radius\n\t\t\t\t};\n\t\t\t} else { // below zThreshold\n\t\t\t\tpoint.shapeArgs = point.plotY = point.dlBox = UNDEFINED; // #1691\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Get the series' symbol in the legend\n\t * \n\t * @param {Object} legend The legend object\n\t * @param {Object} item The series (this) or point\n\t */\n\tdrawLegendSymbol: function (legend, item) {\n\t\tvar radius = pInt(legend.itemStyle.fontSize) / 2;\n\t\t\n\t\titem.legendSymbol = this.chart.renderer.circle(\n\t\t\tradius,\n\t\t\tlegend.baseline - radius,\n\t\t\tradius\n\t\t).attr({\n\t\t\tzIndex: 3\n\t\t}).add(item.legendGroup);\n\t\titem.legendSymbol.isMarker = true;\t\n\t\t\n\t},\n\t\t\n\tdrawPoints: seriesTypes.column.prototype.drawPoints,\n\talignDataLabel: seriesTypes.column.prototype.alignDataLabel,\n\tbuildKDTree: noop,\n\tapplyZones: noop\n});\n\n/**\n * Add logic to pad each axis with the amount of pixels\n * necessary to avoid the bubbles to overflow.\n */\nAxis.prototype.beforePadding = function () {\n\tvar axis = this,\n\t\taxisLength = this.len,\n\t\tchart = this.chart,\n\t\tpxMin = 0, \n\t\tpxMax = axisLength,\n\t\tisXAxis = this.isXAxis,\n\t\tdataKey = isXAxis ? 'xData' : 'yData',\n\t\tmin = this.min,\n\t\textremes = {},\n\t\tsmallestSize = math.min(chart.plotWidth, chart.plotHeight),\n\t\tzMin = Number.MAX_VALUE,\n\t\tzMax = -Number.MAX_VALUE,\n\t\trange = this.max - min,\n\t\ttransA = axisLength / range,\n\t\tactiveSeries = [];\n\n\t// Handle padding on the second pass, or on redraw\n\teach(this.series, function (series) {\n\n\t\tvar seriesOptions = series.options,\n\t\t\tzData;\n\n\t\tif (series.bubblePadding && (series.visible || !chart.options.chart.ignoreHiddenSeries)) {\n\n\t\t\t// Correction for #1673\n\t\t\taxis.allowZoomOutside = true;\n\n\t\t\t// Cache it\n\t\t\tactiveSeries.push(series);\n\n\t\t\tif (isXAxis) { // because X axis is evaluated first\n\t\t\t\n\t\t\t\t// For each series, translate the size extremes to pixel values\n\t\t\t\teach(['minSize', 'maxSize'], function (prop) {\n\t\t\t\t\tvar length = seriesOptions[prop],\n\t\t\t\t\t\tisPercent = /%$/.test(length);\n\t\t\t\t\t\n\t\t\t\t\tlength = pInt(length);\n\t\t\t\t\textremes[prop] = isPercent ?\n\t\t\t\t\t\tsmallestSize * length / 100 :\n\t\t\t\t\t\tlength;\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\tseries.minPxSize = extremes.minSize;\n\t\t\t\t\n\t\t\t\t// Find the min and max Z\n\t\t\t\tzData = series.zData;\n\t\t\t\tif (zData.length) { // #1735\n\t\t\t\t\tzMin = pick(seriesOptions.zMin, math.min(\n\t\t\t\t\t\tzMin,\n\t\t\t\t\t\tmath.max(\n\t\t\t\t\t\t\tarrayMin(zData), \n\t\t\t\t\t\t\tseriesOptions.displayNegative === false ? seriesOptions.zThreshold : -Number.MAX_VALUE\n\t\t\t\t\t\t)\n\t\t\t\t\t));\n\t\t\t\t\tzMax = pick(seriesOptions.zMax, math.max(zMax, arrayMax(zData)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\teach(activeSeries, function (series) {\n\n\t\tvar data = series[dataKey],\n\t\t\ti = data.length,\n\t\t\tradius;\n\n\t\tif (isXAxis) {\n\t\t\tseries.getRadii(zMin, zMax, extremes.minSize, extremes.maxSize);\n\t\t}\n\t\t\n\t\tif (range > 0) {\n\t\t\twhile (i--) {\n\t\t\t\tif (typeof data[i] === 'number') {\n\t\t\t\t\tradius = series.radii[i];\n\t\t\t\t\tpxMin = Math.min(((data[i] - min) * transA) - radius, pxMin);\n\t\t\t\t\tpxMax = Math.max(((data[i] - min) * transA) + radius, pxMax);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\t\n\tif (activeSeries.length && range > 0 && pick(this.options.min, this.userMin) === UNDEFINED && pick(this.options.max, this.userMax) === UNDEFINED) {\n\t\tpxMax -= axisLength;\n\t\ttransA *= (axisLength + pxMin - pxMax) / axisLength;\n\t\tthis.min += pxMin / transA;\n\t\tthis.max += pxMax / transA;\n\t}\n};\n\n/* ****************************************************************************\n * End Bubble series code                                                     *\n *****************************************************************************/\n\n(function () {\n\n\t/**\n\t * Extensions for polar charts. Additionally, much of the geometry required for polar charts is\n\t * gathered in RadialAxes.js.\n\t * \n\t */\n\n\tvar seriesProto = Series.prototype,\n\t\tpointerProto = Pointer.prototype,\n\t\tcolProto;\n\n\t/**\n\t * Search a k-d tree by the point angle, used for shared tooltips in polar charts\n\t */\n\tseriesProto.searchPointByAngle = function (e) {\n\t\tvar series = this,\n\t\t\tchart = series.chart,\n\t\t\txAxis = series.xAxis,\n\t\t\tcenter = xAxis.pane.center,\n\t\t\tplotX = e.chartX - center[0] - chart.plotLeft,\n\t\t\tplotY = e.chartY - center[1] - chart.plotTop;\n\n\t\treturn this.searchKDTree({\n\t\t\tclientX: 180 + (Math.atan2(plotX, plotY) * (-180 / Math.PI))\n\t\t});\n\n\t};\n\t\n\t/**\n\t * Wrap the buildKDTree function so that it searches by angle (clientX) in case of shared tooltip,\n\t * and by two dimensional distance in case of non-shared.\n\t */\n\twrap(seriesProto, 'buildKDTree', function (proceed) {\n\t\tif (this.chart.polar) {\n\t\t\tif (this.kdByAngle) {\n\t\t\t\tthis.searchPoint = this.searchPointByAngle;\n\t\t\t} else {\n\t\t\t\tthis.kdDimensions = 2;\n\t\t\t}\n\t\t}\n\t\tproceed.apply(this);\n\t});\n\n\t/**\n\t * Translate a point's plotX and plotY from the internal angle and radius measures to \n\t * true plotX, plotY coordinates\n\t */\n\tseriesProto.toXY = function (point) {\n\t\tvar xy,\n\t\t\tchart = this.chart,\n\t\t\tplotX = point.plotX,\n\t\t\tplotY = point.plotY,\n\t\t\tclientX;\n\t\n\t\t// Save rectangular plotX, plotY for later computation\n\t\tpoint.rectPlotX = plotX;\n\t\tpoint.rectPlotY = plotY;\n\t\n\t\t// Find the polar plotX and plotY\n\t\txy = this.xAxis.postTranslate(point.plotX, this.yAxis.len - plotY);\n\t\tpoint.plotX = point.polarPlotX = xy.x - chart.plotLeft;\n\t\tpoint.plotY = point.polarPlotY = xy.y - chart.plotTop;\n\n\t\t// If shared tooltip, record the angle in degrees in order to align X points. Otherwise,\n\t\t// use a standard k-d tree to get the nearest point in two dimensions.\n\t\tif (this.kdByAngle) {\n\t\t\tclientX = ((plotX / Math.PI * 180) + this.xAxis.pane.options.startAngle) % 360;\n\t\t\tif (clientX < 0) { // #2665\n\t\t\t\tclientX += 360;\n\t\t\t}\n\t\t\tpoint.clientX = clientX;\n\t\t} else {\n\t\t\tpoint.clientX = point.plotX;\n\t\t}\n\t};\n\n\t/**\n\t * Add some special init logic to areas and areasplines\n\t */\n\tfunction initArea(proceed, chart, options) {\n\t\tproceed.call(this, chart, options);\n\t\tif (this.chart.polar) {\n\t\t\n\t\t\t/**\n\t\t\t * Overridden method to close a segment path. While in a cartesian plane the area \n\t\t\t * goes down to the threshold, in the polar chart it goes to the center.\n\t\t\t */\n\t\t\tthis.closeSegment = function (path) {\n\t\t\t\tvar center = this.xAxis.center;\n\t\t\t\tpath.push(\n\t\t\t\t\t'L',\n\t\t\t\t\tcenter[0],\n\t\t\t\t\tcenter[1]\n\t\t\t\t);\t\t\t\n\t\t\t};\n\t\t\n\t\t\t// Instead of complicated logic to draw an area around the inner area in a stack,\n\t\t\t// just draw it behind\n\t\t\tthis.closedStacks = true;\n\t\t}\n\t}\n\n \n\tif (seriesTypes.area) {\t\t\n\t\twrap(seriesTypes.area.prototype, 'init', initArea);\t\n\t}\n\tif (seriesTypes.areaspline) {\t\t\n\t\twrap(seriesTypes.areaspline.prototype, 'init', initArea);\t\t\t\n\t}\t\n\n\tif (seriesTypes.spline) {\n\t\t/**\n\t\t * Overridden method for calculating a spline from one point to the next\n\t\t */\n\t\twrap(seriesTypes.spline.prototype, 'getPointSpline', function (proceed, segment, point, i) {\n\t\n\t\t\tvar ret,\n\t\t\t\tsmoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc;\n\t\t\t\tdenom = smoothing + 1,\n\t\t\t\tplotX, \n\t\t\t\tplotY,\n\t\t\t\tlastPoint,\n\t\t\t\tnextPoint,\n\t\t\t\tlastX,\n\t\t\t\tlastY,\n\t\t\t\tnextX,\n\t\t\t\tnextY,\n\t\t\t\tleftContX,\n\t\t\t\tleftContY,\n\t\t\t\trightContX,\n\t\t\t\trightContY,\n\t\t\t\tdistanceLeftControlPoint,\n\t\t\t\tdistanceRightControlPoint,\n\t\t\t\tleftContAngle,\n\t\t\t\trightContAngle,\n\t\t\t\tjointAngle;\n\t\t\n\t\t\n\t\t\tif (this.chart.polar) {\n\t\t\n\t\t\t\tplotX = point.plotX;\n\t\t\t\tplotY = point.plotY;\n\t\t\t\tlastPoint = segment[i - 1];\n\t\t\t\tnextPoint = segment[i + 1];\n\t\t\t\n\t\t\t\t// Connect ends\n\t\t\t\tif (this.connectEnds) {\n\t\t\t\t\tif (!lastPoint) {\n\t\t\t\t\t\tlastPoint = segment[segment.length - 2]; // not the last but the second last, because the segment is already connected\n\t\t\t\t\t}\n\t\t\t\t\tif (!nextPoint) {\n\t\t\t\t\t\tnextPoint = segment[1];\n\t\t\t\t\t}\t\n\t\t\t\t}\n\n\t\t\t\t// find control points\n\t\t\t\tif (lastPoint && nextPoint) {\n\t\t\n\t\t\t\t\tlastX = lastPoint.plotX;\n\t\t\t\t\tlastY = lastPoint.plotY;\n\t\t\t\t\tnextX = nextPoint.plotX;\n\t\t\t\t\tnextY = nextPoint.plotY;\n\t\t\t\t\tleftContX = (smoothing * plotX + lastX) / denom;\n\t\t\t\t\tleftContY = (smoothing * plotY + lastY) / denom;\n\t\t\t\t\trightContX = (smoothing * plotX + nextX) / denom;\n\t\t\t\t\trightContY = (smoothing * plotY + nextY) / denom;\n\t\t\t\t\tdistanceLeftControlPoint = Math.sqrt(Math.pow(leftContX - plotX, 2) + Math.pow(leftContY - plotY, 2));\n\t\t\t\t\tdistanceRightControlPoint = Math.sqrt(Math.pow(rightContX - plotX, 2) + Math.pow(rightContY - plotY, 2));\n\t\t\t\t\tleftContAngle = Math.atan2(leftContY - plotY, leftContX - plotX);\n\t\t\t\t\trightContAngle = Math.atan2(rightContY - plotY, rightContX - plotX);\n\t\t\t\t\tjointAngle = (Math.PI / 2) + ((leftContAngle + rightContAngle) / 2);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t// Ensure the right direction, jointAngle should be in the same quadrant as leftContAngle\n\t\t\t\t\tif (Math.abs(leftContAngle - jointAngle) > Math.PI / 2) {\n\t\t\t\t\t\tjointAngle -= Math.PI;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\t// Find the corrected control points for a spline straight through the point\n\t\t\t\t\tleftContX = plotX + Math.cos(jointAngle) * distanceLeftControlPoint;\n\t\t\t\t\tleftContY = plotY + Math.sin(jointAngle) * distanceLeftControlPoint;\n\t\t\t\t\trightContX = plotX + Math.cos(Math.PI + jointAngle) * distanceRightControlPoint;\n\t\t\t\t\trightContY = plotY + Math.sin(Math.PI + jointAngle) * distanceRightControlPoint;\n\t\t\t\n\t\t\t\t\t// Record for drawing in next point\n\t\t\t\t\tpoint.rightContX = rightContX;\n\t\t\t\t\tpoint.rightContY = rightContY;\n\n\t\t\t\t}\n\t\t\n\t\t\n\t\t\t\t// moveTo or lineTo\n\t\t\t\tif (!i) {\n\t\t\t\t\tret = ['M', plotX, plotY];\n\t\t\t\t} else { // curve from last point to this\n\t\t\t\t\tret = [\n\t\t\t\t\t\t'C',\n\t\t\t\t\t\tlastPoint.rightContX || lastPoint.plotX,\n\t\t\t\t\t\tlastPoint.rightContY || lastPoint.plotY,\n\t\t\t\t\t\tleftContX || plotX,\n\t\t\t\t\t\tleftContY || plotY,\n\t\t\t\t\t\tplotX,\n\t\t\t\t\t\tplotY\n\t\t\t\t\t];\n\t\t\t\t\tlastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later\n\t\t\t\t}\n\t\t\n\t\t\n\t\t\t} else {\n\t\t\t\tret = proceed.call(this, segment, point, i);\n\t\t\t}\n\t\t\treturn ret;\n\t\t});\n\t}\n\n\t/**\n\t * Extend translate. The plotX and plotY values are computed as if the polar chart were a\n\t * cartesian plane, where plotX denotes the angle in radians and (yAxis.len - plotY) is the pixel distance from\n\t * center. \n\t */\n\twrap(seriesProto, 'translate', function (proceed) {\n\t\tvar chart = this.chart,\n\t\t\tpoints,\n\t\t\ti;\n\n\t\t// Run uber method\n\t\tproceed.call(this);\n\t\n\t\t// Postprocess plot coordinates\n\t\tif (chart.polar) {\n\t\t\tthis.kdByAngle = chart.tooltip && chart.tooltip.shared;\n\t\n\t\t\tif (!this.preventPostTranslate) {\n\t\t\t\tpoints = this.points;\n\t\t\t\ti = points.length;\n\n\t\t\t\twhile (i--) {\n\t\t\t\t\t// Translate plotX, plotY from angle and radius to true plot coordinates\n\t\t\t\t\tthis.toXY(points[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t/** \n\t * Extend getSegmentPath to allow connecting ends across 0 to provide a closed circle in \n\t * line-like series.\n\t */\n\twrap(seriesProto, 'getSegmentPath', function (proceed, segment) {\n\t\t\n\t\tvar points = this.points;\n\t\n\t\t// Connect the path\n\t\tif (this.chart.polar && this.options.connectEnds !== false && \n\t\t\t\tsegment[segment.length - 1] === points[points.length - 1] && points[0].y !== null) {\n\t\t\tthis.connectEnds = true; // re-used in splines\n\t\t\tsegment = [].concat(segment, [points[0]]);\n\t\t}\n\t\n\t\t// Run uber method\n\t\treturn proceed.call(this, segment);\n\t\n\t});\n\n\n\tfunction polarAnimate(proceed, init) {\n\t\tvar chart = this.chart,\n\t\t\tanimation = this.options.animation,\n\t\t\tgroup = this.group,\n\t\t\tmarkerGroup = this.markerGroup,\n\t\t\tcenter = this.xAxis.center,\n\t\t\tplotLeft = chart.plotLeft,\n\t\t\tplotTop = chart.plotTop,\n\t\t\tattribs;\n\n\t\t// Specific animation for polar charts\n\t\tif (chart.polar) {\n\t\t\n\t\t\t// Enable animation on polar charts only in SVG. In VML, the scaling is different, plus animation\n\t\t\t// would be so slow it would't matter.\n\t\t\tif (chart.renderer.isSVG) {\n\n\t\t\t\tif (animation === true) {\n\t\t\t\t\tanimation = {};\n\t\t\t\t}\n\t\n\t\t\t\t// Initialize the animation\n\t\t\t\tif (init) {\n\t\t\t\t\n\t\t\t\t\t// Scale down the group and place it in the center\n\t\t\t\t\tattribs = {\n\t\t\t\t\t\ttranslateX: center[0] + plotLeft,\n\t\t\t\t\t\ttranslateY: center[1] + plotTop,\n\t\t\t\t\t\tscaleX: 0.001, // #1499\n\t\t\t\t\t\tscaleY: 0.001\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tgroup.attr(attribs);\n\t\t\t\t\tif (markerGroup) {\n\t\t\t\t\t\t//markerGroup.attrSetters = group.attrSetters;\n\t\t\t\t\t\tmarkerGroup.attr(attribs);\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Run the animation\n\t\t\t\t} else {\n\t\t\t\t\tattribs = {\n\t\t\t\t\t\ttranslateX: plotLeft,\n\t\t\t\t\t\ttranslateY: plotTop,\n\t\t\t\t\t\tscaleX: 1,\n\t\t\t\t\t\tscaleY: 1\n\t\t\t\t\t};\n\t\t\t\t\tgroup.animate(attribs, animation);\n\t\t\t\t\tif (markerGroup) {\n\t\t\t\t\t\tmarkerGroup.animate(attribs, animation);\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t// Delete this function to allow it only once\n\t\t\t\t\tthis.animate = null;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t// For non-polar charts, revert to the basic animation\n\t\t} else {\n\t\t\tproceed.call(this, init);\n\t\t} \n\t}\n\n\t// Define the animate method for regular series\n\twrap(seriesProto, 'animate', polarAnimate);\n\n\n\tif (seriesTypes.column) {\n\n\t\tcolProto = seriesTypes.column.prototype;\n\t\t/**\n\t\t* Define the animate method for columnseries\n\t\t*/\n\t\twrap(colProto, 'animate', polarAnimate);\n\n\n\t\t/**\n\t\t * Extend the column prototype's translate method\n\t\t */\n\t\twrap(colProto, 'translate', function (proceed) {\n\t\t\n\t\t\tvar xAxis = this.xAxis,\n\t\t\t\tlen = this.yAxis.len,\n\t\t\t\tcenter = xAxis.center,\n\t\t\t\tstartAngleRad = xAxis.startAngleRad,\n\t\t\t\trenderer = this.chart.renderer,\n\t\t\t\tstart,\n\t\t\t\tpoints,\n\t\t\t\tpoint,\n\t\t\t\ti;\n\t\n\t\t\tthis.preventPostTranslate = true;\n\t\n\t\t\t// Run uber method\n\t\t\tproceed.call(this);\n\t\n\t\t\t// Postprocess plot coordinates\n\t\t\tif (xAxis.isRadial) {\n\t\t\t\tpoints = this.points;\n\t\t\t\ti = points.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tstart = point.barX + startAngleRad;\n\t\t\t\t\tpoint.shapeType = 'path';\n\t\t\t\t\tpoint.shapeArgs = {\n\t\t\t\t\t\td: renderer.symbols.arc(\n\t\t\t\t\t\t\tcenter[0],\n\t\t\t\t\t\t\tcenter[1],\n\t\t\t\t\t\t\tlen - point.plotY,\n\t\t\t\t\t\t\tnull, \n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstart: start,\n\t\t\t\t\t\t\t\tend: start + point.pointWidth,\n\t\t\t\t\t\t\t\tinnerR: len - pick(point.yBottom, len)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t};\n\t\t\t\t\t// Provide correct plotX, plotY for tooltip\n\t\t\t\t\tthis.toXY(point); \n\t\t\t\t\tpoint.tooltipPos = [point.plotX, point.plotY];\n\t\t\t\t\tpoint.ttBelow = point.plotY > center[1];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\n\t\t/**\n\t\t * Align column data labels outside the columns. #1199.\n\t\t */\n\t\twrap(colProto, 'alignDataLabel', function (proceed, point, dataLabel, options, alignTo, isNew) {\n\t\n\t\t\tif (this.chart.polar) {\n\t\t\t\tvar angle = point.rectPlotX / Math.PI * 180,\n\t\t\t\t\talign,\n\t\t\t\t\tverticalAlign;\n\t\t\n\t\t\t\t// Align nicely outside the perimeter of the columns\n\t\t\t\tif (options.align === null) {\n\t\t\t\t\tif (angle > 20 && angle < 160) {\n\t\t\t\t\t\talign = 'left'; // right hemisphere\n\t\t\t\t\t} else if (angle > 200 && angle < 340) {\n\t\t\t\t\t\talign = 'right'; // left hemisphere\n\t\t\t\t\t} else {\n\t\t\t\t\t\talign = 'center'; // top or bottom\n\t\t\t\t\t}\n\t\t\t\t\toptions.align = align;\n\t\t\t\t}\n\t\t\t\tif (options.verticalAlign === null) {\n\t\t\t\t\tif (angle < 45 || angle > 315) {\n\t\t\t\t\t\tverticalAlign = 'bottom'; // top part\n\t\t\t\t\t} else if (angle > 135 && angle < 225) {\n\t\t\t\t\t\tverticalAlign = 'top'; // bottom part\n\t\t\t\t\t} else {\n\t\t\t\t\t\tverticalAlign = 'middle'; // left or right\n\t\t\t\t\t}\n\t\t\t\t\toptions.verticalAlign = verticalAlign;\n\t\t\t\t}\n\t\t\n\t\t\t\tseriesProto.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);\n\t\t\t} else {\n\t\t\t\tproceed.call(this, point, dataLabel, options, alignTo, isNew);\n\t\t\t}\n\t\n\t\t});\t\t\n\t}\n\n\t/**\n\t * Extend getCoordinates to prepare for polar axis values\n\t */\n\twrap(pointerProto, 'getCoordinates', function (proceed, e) {\n\t\tvar chart = this.chart,\n\t\t\tret = {\n\t\t\t\txAxis: [],\n\t\t\t\tyAxis: []\n\t\t\t};\n\t\n\t\tif (chart.polar) {\t\n\n\t\t\teach(chart.axes, function (axis) {\n\t\t\t\tvar isXAxis = axis.isXAxis,\n\t\t\t\t\tcenter = axis.center,\n\t\t\t\t\tx = e.chartX - center[0] - chart.plotLeft,\n\t\t\t\t\ty = e.chartY - center[1] - chart.plotTop;\n\t\t\t\n\t\t\t\tret[isXAxis ? 'xAxis' : 'yAxis'].push({\n\t\t\t\t\taxis: axis,\n\t\t\t\t\tvalue: axis.translate(\n\t\t\t\t\t\tisXAxis ?\n\t\t\t\t\t\t\tMath.PI - Math.atan2(x, y) : // angle \n\t\t\t\t\t\t\tMath.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), // distance from center\n\t\t\t\t\t\ttrue\n\t\t\t\t\t)\n\t\t\t\t});\n\t\t\t});\n\t\t\n\t\t} else {\n\t\t\tret = proceed.call(this, e);\n\t\t}\n\t\n\t\treturn ret;\n\t});\n\n}());\n\n}(Highcharts));\n","\nTemplate.__checkName(\"highchartsHelper\");\nTemplate[\"highchartsHelper\"] = new Template(\"Template.highchartsHelper\", (function() {\n  var view = this;\n  return HTML.DIV({\n    id: function() {\n      return Spacebars.mustache(view.lookup(\"chartId\"));\n    },\n    style: function() {\n      return [ \"height: \", Spacebars.mustache(view.lookup(\"chartHeight\")), \"; width: \", Spacebars.mustache(view.lookup(\"chartWidth\")) ];\n    }\n  });\n}));\n","Template.highchartsHelper.onRendered(function() {\n\tvar self = this;\n\n\tself.autorun(function() {\n\t\tvar data = Template.currentData();\n\t\t$('#' + data.chartId).highcharts(data.chartObject);\n\t});\n});\n"]}