)]}'
{"version":3,"sources":["rationalk:experts/lib/methods.js","rationalk:experts/lib/collections.js","rationalk:experts/lib/routes.js","rationalk:experts/lib/client/expert.html","rationalk:experts/lib/client/expert.js","rationalk:experts/lib/client/expertInSearchResults.html","rationalk:experts/lib/client/expertInSearchResults.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,e;AACA,iC;AACA,G;AACA,uE;AACA,G;AACA,E;;AAEA,iC;AACA,iC;AACA,E;;AAEA,+C;AACA,sD;AACA,E;;AAEA,qD;AACA,iE;AACA,E;;AAEA,mD;AACA,qB;AACA,K;AACA,+B;AACA,M;AACA,K;AACA,gB;AACA,K;AACA,I;AACA,E;;AAEA,iD;AACA,S;AACA,6B;AACA,mB;AACA,K;AACA,c;AACA,6B;AACA,Q;AACA,M;AACA,K;AACA,gD;AACA,8C;AACA,gB;AACA,O;AACA,c;AACA,E;;AAEA,mC;AACA,4E;AACA,E;;;AAGA,gB;AACA,qD;AACA,2B;AACA,0B;AACA,gB;AACA,I;AACA,6B;AACA,K;AACA,I;AACA,gC;AACA,sC;AACA,4B;AACA,uB;AACA,K;AACA,I;AACA,mB;AACA,I;AACA,I;AACA,uC;AACA,yC;AACA,G;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC1EA,wC;;AAEA,e;AACA,iD;AACA,gD;AACA,kD;AACA,G;;AAEA,sB;AACA,gD;AACA,0E;AACA,E;AACA,O;AACA,kD;AACA,2E;AACA,G;AACA,E;AACA,C;;;;;;;;;;;;;;;;;;;ACjBA,yC;AACA,2B;AACA,mB;AACA,yB;AACA,c;AACA,mC;AACA,oC;AACA,Q;AACA,M;AACA,K;;AAEA,oC;AACA,oK;;AAEA,0B;AACA,K;AACA,2B;AACA,yC;AACA,K;AACA,I;AACA,C;;;;;;;;;;;;;;;;;;;;ACnBA,+B;AACA,kE;AACA,kB;AACA,mB;AACA,mB;AACA,uB;AACA,kB;AACA,wB;AACA,wB;AACA,0B;AACA,kC;AACA,uL;AACA,yB;AACA,wD;AACA,yB;AACA,qC;AACA,4B;AACA,c;AACA,+B;AACA,6B;AACA,uB;AACA,mE;AACA,K;AACA,+S;AACA,I;;;;;;;;;;;;;;;;;;;ACzBA,yB;AACA,kC;AACA,6D;AACA,2C;AACA,uC;AACA,K;AACA,iB;AACA,G;AACA,G;;AAEA,wB;AACA,8B;AACA,6D;AACA,sB;AACA,8E;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;ACfA,8C;AACA,gG;AACA,kB;AACA,mB;AACA,mB;AACA,uB;AACA,kB;AACA,wB;AACA,wB;AACA,wE;AACA,+D;AACA,oC;AACA,uB;AACA,qH;AACA,kC;AACA,sH;AACA,oF;AACA,oE;AACA,qE;AACA,iB;AACA,8F;AACA,0D;AACA,qB;AACA,gC;AACA,I;;;;;;;;;;;;;;;;;;;ACzBA,wC;AACA,iC;AACA,wE;AACA,G;AACA,0C;AACA,0D;AACA,G;AACA,yB;AACA,mC;AACA,4C;AACA,G;AACA,G","file":"/packages/rationalk_experts.js","sourcesContent":["RKExperts = {};\nRKCore.searchResultsPackage.push(\n  {\n    name: \"RKExperts\", // RKExperts.findAllFullTextSearch should exists\n  }\n);\n\nRKExperts.findAll = function () {\n  return Expert.find({}).fetch();\n};\n\nRKExperts.findAllFullTextSearch = function () {\n  return Expert.find({}, {sort: {score: -1}}).fetch();\n};\n\nRKExperts.findAnd = function (arrayOfAndForExperts) {\n  return Expert.find({$and: arrayOfAndForExperts }, {limit: 30});\n};\n\nRKExperts.findOr = function (arrayOfOrForExperts) {\n  return Expert.find(\n    {\n      $or: arrayOfOrForExperts,\n    },\n    {\n      limit: 30,\n    }\n  );\n};\n\nRKExperts.findFullText = function (searchQuery) {\n  var sr;\n  check(searchQuery, String);\n  sr = Expert.find(\n    {\n      $text: {\n        $search: searchQuery,\n      },\n    },\n    {\n      fields: { score: { $meta: 'textScore' } },\n      sort: { score: { $meta: 'textScore' } },\n      limit: 30,\n    });\n    return sr;\n};\n\nRKExperts.findDummy = function () {\n  return Expert.find({$text: { $search: \"somethingthatyouwillneverfind\" }});\n};\n\n\nMeteor.methods({\n\tupdateFieldOfExpertise: function (content, userId) {\n    check(content, String);\n    check(userId, String);\n\t\tExpert.update(\n\t\t\t{\n\t\t\t  userId: Meteor.userId(),\n\t\t\t},\n\t\t\t{\n\t\t    fieldOfExpertise: content,\n        searchResultFromExperts: true,\n\t\t    updatedAt: new Date(),\n        userId: userId,\n\t\t\t},\n\t\t\t{\n\t\t    upsert: true,\n\t\t\t}\n\t\t);\n\t\tif (typeof(toastr) !== 'undefined') {\n\t\t\ttoastr.success('Updated succesfully');\n\t\t}\n\t},\n});\n","Expert = new Mongo.Collection('expert');\n\nExpert.allow( {\n\t\tinsert: function (userId) {return !! userId; },\n\t\tupdate: function (userId) {return !!userId; },\n    remove: function (userId) {return !!userId; },\n});\n\nif (Meteor.isServer) {\n\tif (typeof Expert.createIndex === 'function') {\n\t\tExpert.createIndex({ fieldOfExpertise: \"text\" }, { name: \"TextIndex\" });\n\t}\n\telse {\n\t\tif (typeof Expert._ensureIndex === 'function') {\n\t\t\tExpert._ensureIndex( { fieldOfExpertise: \"text\" }, {name: \"TextIndex\"});\n\t\t}\n\t}\n}\n","if (Meteor.settings.public.show.expert) {\n  Router.route(\"/expert\", {\n    name: \"expert\",\n    waitOn: function () {\n      return [\n        Meteor.subscribe(\"expert\"),\n        Meteor.subscribe(\"members\"),\n      ];\n    },\n  });\n\n  url = Router.routes.expert.path();\n  menuHTML = new Spacebars.SafeString('<li><a href=\"' + url + '\" title=\"Experts\"><strong><span class=\"glyphicon glyphicon-user\"></span></strong> Experts</a></li>');\n\n  RKCore.packageMenu.push(\n    {\n      \"menuHTML\": menuHTML,\n      \"fromPackage\": \"rationalk:experts\",\n    }\n  );\n}\n","\nTemplate.__checkName(\"expert\");\nTemplate[\"expert\"] = new Template(\"Template.expert\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"post\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n\t\t\t\", HTML.DIV({\n    \"class\": \"col-md-12\"\n  }, \"\\n\t\t\t\t \", HTML.DIV({\n    \"class\": \"panel panel-default\"\n  }, \"\\n\t\t\t\t \t\", HTML.Raw('<div class=\"panel-heading\" style=\"position:relative\">\\n\t\t\t\t \t\t<h3 class=\"panel-title\">My field of expertise</h3>\\n\t        \t\t</div>'), \"\\n\t\t\t\t\t\", HTML.DIV({\n    \"class\": \"panel-body\"\n  }, \"\\n\t\t\t\t\t\t\", HTML.FORM(\"\\n\t\t\t\t\t        \", HTML.DIV({\n    \"class\": \"form-group\"\n  }, \"\\n\t\t\t\t\t\t\t    \", HTML.TEXTAREA({\n    \"class\": \"form-control\",\n    rows: \"3\",\n    name: \"myFieldOfExpertise\",\n    placeholder: \"My Skills\",\n    value: function() {\n      return Spacebars.mustache(view.lookup(\"myFieldOfExpertise\"));\n    }\n  }), \"\\n\t\t\t\t\t\t    \"), \"\\n\t\t\t\t\t\t    \", HTML.Raw('<button type=\"submit\" class=\"btn btn-primary\">Save</button>'), \"\\n\t\t\t\t\t\t    \", HTML.Raw('<p class=\"help-block\">Write down your profile incl. skills and fields of expertise.</p>'), \"\\n\t\t\t\t\t    \"), \"\\n\t        \t\t\"), \"\\n\t    \t\t\"), \"\\n\t\t\t\"), \"\\n\t\t\"), \"\\n\t\");\n}));\n","Template.expert.helpers({\n\tmyFieldOfExpertise: function () {\n    var myExpert = Expert.findOne({userId: Meteor.userId()});\n    if (typeof(myExpert) !== 'undefined') {\n\t\t    return myExpert.fieldOfExpertise;\n    }\n    return false;\n\t},\n});\n\nTemplate.expert.events({\n\t'submit form': function (e) {\n\t\tvar myFieldOfExpertise = e.target.myFieldOfExpertise.value;\n\t  e.preventDefault();\n\t  Meteor.call('updateFieldOfExpertise', myFieldOfExpertise, Meteor.userId());\n\t},\n});\n","\nTemplate.__checkName(\"expertInSearchResults\");\nTemplate[\"expertInSearchResults\"] = new Template(\"Template.expertInSearchResults\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"post\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n\t\t\t\", HTML.DIV({\n    \"class\": \"col-md-10\"\n  }, \"\\n\t\t\t\t\", HTML.P(Blaze.View(\"lookup:fieldOfExpertise\", function() {\n    return Spacebars.mustache(view.lookup(\"fieldOfExpertise\"));\n  })), \"\\n\t\t\t\"), \"\\n\t\t\t\", HTML.DIV({\n    \"class\": \"col-md-2\"\n  }, \"\\n\t\t\t\t\", HTML.Raw('<span class=\"label label-success\"> Expert</span>'), HTML.Raw(\"<br>\"), \"\\n\t\t\t\t \", HTML.SPAN({\n    \"class\": \"label label-default\"\n  }, HTML.Raw('<span class=\"glyphicon glyphicon-user\"></span>'), \" \", Blaze.View(\"lookup:memberUsername\", function() {\n    return Spacebars.mustache(view.lookup(\"memberUsername\"), view.lookup(\"userId\"));\n  })), \"\\n\t\t\t\t \", HTML.Raw(\"<br>\"), \"\\n\t \t\t\t\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"searchTypeIsFullTextSearch\"));\n  }, function() {\n    return [ \"\\n\t \t\t\t\t\", HTML.P(\"Search Score : \", Blaze.View(\"lookup:textScore\", function() {\n      return Spacebars.mustache(view.lookup(\"textScore\"));\n    })), \"\\n\t \t\t\t\" ];\n  }), \"\\n\t\t\t\"), \"\\n\t\t\"), \"\\n\t\");\n}));\n","Template.expertInSearchResults.helpers({\n\tmemberUsername: function (who) {\n\t\t\treturn Members.collection.findOne({accountId: who}).profile.nickname;\n\t},\n\tsearchTypeIsFullTextSearch: function () {\n\t\treturn (Session.get('searchType') === 'fullTextSearch');\n\t},\n\ttextScore: function () {\n\t\t//limit to 2 digits after comma :\n\t\treturn Math.round(this.score * 100) / 100;\n\t},\n});\n"]}