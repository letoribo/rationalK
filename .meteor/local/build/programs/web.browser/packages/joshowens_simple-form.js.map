)]}'
{"version":3,"file":"/packages/joshowens:simple-form.js","sources":["joshowens:simple-form/fileField.html","joshowens:simple-form/fileField.js","joshowens:simple-form/helper.js","joshowens:simple-form/simpleform.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,4C;AACA,4F;AACA,kB;AACA,gC;AACA,+C;AACA,iB;AACA,4C;AACA,iE;AACA,qB;AACA,wB;AACA,uD;AACA,Q;AACA,uB;AACA,oB;AACA,8B;AACA,gB;AACA,iB;AACA,qD;AACA,c;AACA,yD;AACA,Q;AACA,mB;AACA,gE;AACA,e;AACA,0B;AACA,mB;AACA,8B;AACA,uB;AACA,qD;AACA,M;AACA,sB;AACA,2F;AACA,K;AACA,0B;AACA,mB;AACA,8B;AACA,uB;AACA,iE;AACA,M;AACA,sB;AACA,wG;AACA,K;AACA,O;AACA,I;;;;;;;;;;;;;;;;;;;AC5CA,sC;AACA,gC;AACA,uD;AACA,yD;AACA,Y;AACA,yD;AACA,K;AACA,I;AACA,oB;AACA,0C;AACA,4C;AACA,Y;AACA,4C;AACA,K;AACA,G;AACA,E;;AAEA,qC;AACA,oC;AACA,0B;AACA,qF;AACA,4D;AACA,gD;AACA,0D;AACA,uE;AACA,iD;AACA,8D;AACA,iB;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AC7BA,sC;AACA,qB;AACA,U;AACA,G;AACA,6B;AACA,2C;AACA,U;AACA,mB;AACA,G;AACA,mB;AACA,C;;AAEA,wC;AACA,+B;AACA,sB;AACA,U;AACA,a;AACA,G;AACA,C;;AAEA,mC;AACA,qB;AACA,U;AACA,G;AACA,0B;AACA,6C;AACA,U;AACA,a;AACA,G;AACA,C;;AAEA,4C;AACA,mC;AACA,sE;AACA,U;AACA,oB;AACA,G;AACA,oB;AACA,C;;AAEA,6C;AACA,yC;AACA,sC;AACA,U;AACA,mC;AACA,G;AACA,oB;AACA,C;;AAEA,2C;AACA,uC;AACA,a;AACA,U;AACA,kD;AACA,iE;AACA,G;AACA,C;;AAEA,wC;AACA,4B;AACA,8E;AACA,U;AACA,mB;AACA,G;AACA,mB;AACA,C;;AAEA,0C;AACA,Y;AACA,sD;AACA,uC;AACA,gC;AACA,4F;AACA,K;AACA,G;AACA,c;AACA,C;;AAEA,yC;AACA,Y;AACA,sD;AACA,+B;AACA,mF;AACA,K;AACA,4B;AACA,G;AACA,c;AACA,C;;AAEA,+C;AACA,gC;AACA,sB;AACA,gB;AACA,G;AACA,6E;AACA,sB;AACA,kD;AACA,mB;AACA,gD;AACA,kE;AACA,M;AACA,gB;AACA,U;AACA,gB;AACA,G;AACA,C;;AAEA,2C;AACA,gC;AACA,sB;AACA,gB;AACA,G;AACA,0F;AACA,sB;AACA,iE;AACA,mB;AACA,gD;AACA,kE;AACA,M;AACA,gB;AACA,U;AACA,gB;AACA,G;AACA,C;;AAEA,2E;AACA,c;AACA,0D;AACA,2C;AACA,2G;AACA,qD;AACA,yR;AACA,gB;AACA,K;AACA,6D;AACA,C;;AAEA,wB;;AAEA,yD;AACA,mB;AACA,e;AACA,W;AACA,G;AACA,4B;AACA,yC;AACA,uC;AACA,+D;AACA,wH;AACA,G;AACA,gD;AACA,0C;AACA,iK;AACA,yC;AACA,qC;AACA,8C;AACA,4C;AACA,kF;AACA,G;;AAEA,wD;AACA,mB;AACA,e;AACA,W;AACA,G;AACA,4B;AACA,yC;AACA,6B;AACA,+C;AACA,U;AACA,a;AACA,G;;AAEA,0C;AACA,gJ;AACA,yC;AACA,qC;AACA,uD;AACA,G;;AAEA,0D;AACA,e;AACA,2B;AACA,e;AACA,W;AACA,G;;AAEA,wD;AACA,yC;;AAEA,2B;AACA,sC;AACA,2B;AACA,U;AACA,mB;AACA,4E;AACA,+C;AACA,Y;AACA,sD;AACA,K;AACA,G;;AAEA,0C;AACA,oB;AACA,0C;AACA,4C;AACA,kC;AACA,yD;AACA,oG;AACA,K;AACA,yI;AACA,2C;AACA,qC;AACA,uD;AACA,G;;;AAGA,yD;AACA,gC;AACA,e;AACA,W;AACA,G;AACA,yD;AACA,2B;AACA,+E;AACA,U;AACA,2C;AACA,uD;AACA,6C;AACA,4C;AACA,kP;AACA,uC;AACA,iD;AACA,G;AACA,G;;AAEA,2C;AACA,mC;AACA,qB;AACA,uB;AACA,yC;AACA,qB;AACA,8D;AACA,wF;AACA,8E;AACA,oD;AACA,gB;AACA,4B;AACA,S;AACA,O;AACA,K;AACA,0C;AACA,G;AACA,G;;AAEA,2D;AACA,mB;AACA,0B;AACA,iB;AACA,G;AACA,0B;AACA,mB;AACA,qB;AACA,G;AACA,iC;AACA,kB;AACA,0B;AACA,U;AACA,uB;AACA,G;AACA,qC;AACA,0C;AACA,oC;AACA,+C;AACA,gH;AACA,U;AACA,6G;AACA,G;AACA,wC;AACA,G;;;;;;;;;;;;;;;;;;;ACvRA,c;AACA,iC;AACA,kB;AACA,uC;AACA,sC;AACA,+E;AACA,gD;AACA,yE;AACA,c;AACA,oD;AACA,O;AACA,O;AACA,gB;AACA,I;AACA,8B;AACA,8B;AACA,G;AACA,E","sourcesContent":["\nTemplate.__checkName(\"simpleFormFileField\");\nTemplate[\"simpleFormFileField\"] = new Template(\"Template.simpleFormFileField\", (function() {\n  var view = this;\n  return [ Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"file\"));\n  }, function() {\n    return [ \"\\n  \", Blaze.View(function() {\n      return Spacebars.mustache(view.lookup(\"originalFileName\"));\n    }), \" \", HTML.A({\n      href: function() {\n        return Spacebars.mustache(view.lookup(\"file\"));\n      },\n      \"class\": \"remove\"\n    }, \" \", HTML.I({\n      \"class\": \"fa fa-trash-o\"\n    })), \"\\n\" ];\n  }, function() {\n    return [ \"\\n  \", Blaze._TemplateWith(function() {\n      return {\n        settings: Spacebars.call(view.lookup(\"settings\"))\n      };\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"uploader\"));\n    }), \"\\n\" ];\n  }), \"\\n  \", HTML.INPUT({\n    type: \"hidden\",\n    \"class\": \"simpleFormFile\",\n    value: function() {\n      return Spacebars.mustache(view.lookup(\"file\"));\n    },\n    name: function() {\n      return [ Spacebars.mustache(Spacebars.dot(view.lookup(\"settings\"), \"name\")), \"Url\" ];\n    }\n  }), \"\\n  \", HTML.INPUT({\n    type: \"hidden\",\n    \"class\": \"simpleFormFile\",\n    value: function() {\n      return Spacebars.mustache(view.lookup(\"originalFileName\"));\n    },\n    name: function() {\n      return [ Spacebars.mustache(Spacebars.dot(view.lookup(\"settings\"), \"name\")), \"OriginalFileName\" ];\n    }\n  }) ];\n}));\n","Template.simpleFormFileField.helpers({\n  originalFileName: function() {\n    if (Session.get(this.field + 'OriginalFileName')) {\n      return Session.get(this.field + 'OriginalFileName')\n    } else {\n      return this.object[this.field + \"OriginalFileName\"]\n    }\n  },\n  file: function() {\n    if (Session.get(this.field + 'Url')) {\n      return Session.get(this.field + 'Url')\n    } else {\n      return this.object[this.field + 'Url']\n    }\n  }\n})\n\nTemplate.simpleFormFileField.events({\n  'click .remove': function(event) {\n    event.preventDefault()\n    Meteor.call(\"uploaderDelete\", $(event.target).parent().attr('href'), function() {\n      Session.set(this.field+ 'OriginalFileName', undefined)\n      Session.set(this.field + 'Url', undefined)\n      $('input[name=\"'+ this.field +'Url\"').val(undefined)\n      $('input[name=\"'+ this.field +'OriginalFileName\"').val(undefined)\n      this.object[this.field + 'Url'] = undefined\n      this.object[this.field + 'OriginalFileName'] = undefined\n    }.bind(this))\n  }\n})\n","processClass = function(optionsHash) {\n  if (!optionsHash) {\n    return\n  }\n  if (optionsHash['class']) {\n    html_class = \" \" + optionsHash['class']\n  } else {\n    html_class = \"\"\n  }\n  return html_class\n}\n\nprocessRequired = function(optionHash) {\n  if (optionHash['required']) {\n    return \" required\"\n  } else {\n    return \"\"\n  }\n}\n\nprocessId = function(optionsHash) {\n  if (!optionsHash) {\n    return\n  }\n  if (optionsHash['id']) {\n    return \" id='\" + optionsHash['id'] + \"'\";\n  } else {\n    return \"\"\n  }\n}\n\nprocessPlaceHolder = function(optionsHash) {\n  if (optionsHash['placeholder']) {\n    placeholder = \" placeholder='\" + optionsHash['placeholder'] + \"' \"\n  } else {\n    placeholder = \"\"\n  }\n  return placeholder\n}\n\nprocessLabel = function(optionsHash, field) {\n  if (_.isString(optionsHash['label'])) {\n    label_words = optionsHash['label']\n  } else {\n    label_words = _.humanize(field)\n  }\n  return label_words\n}\n\nbuildLabel = function(optionsHash, field) {\n  if (optionsHash['label'] === false) {\n    return ''\n  } else {\n    label_words = processLabel(optionsHash, field)\n    return \"<label for='\"+ field +\"'>\" + label_words + \"</label>\"\n  }\n}\n\nbuildHintBlock = function(optionsHash) {\n  if (optionsHash['hint']) {\n    hintBlock = \"<span class='help-block'>\" + optionsHash['hint'] + \"</span>\";\n  } else {\n    hintBlock = \"\";\n  }\n  return hintBlock;\n}\n\nbuildBeforeAddon = function(optionsHash) {\n  addon = \"\"\n  if (optionsHash['before'] || optionsHash['after']) {\n    addon = \"<div class='input-group'>\"\n    if (optionsHash['before']) {\n      addon = addon + \"<span class='input-group-addon'>\" + optionsHash['before'] + \"</span>\"\n    }\n  }\n  return addon\n}\n\nbuildAfterAddon = function(optionsHash) {\n  addon = \"\"\n  if (optionsHash['before'] || optionsHash['after']) {\n    if (optionsHash['after']) {\n      addon = \"<span class='input-group-addon'>\" + optionsHash['after'] + \"</span>\"\n    }\n    addon = addon + \"</div>\"\n  }\n  return addon\n}\n\nprocessForBelongsTo = function(field, object) {\n  name = object.constructor.name\n  if (!window[name]) {\n    return false\n  }\n  isAssociation = _.contains(_.pluck(window[name].belongs_to, 'name'), field)\n  if (isAssociation) {\n    associations = window[_.classify(field)].all()\n    var array = [];\n    _.each(associations, function(association) {\n      array.push({value: association._id, name: association.name})\n    })\n    return array\n  } else {\n    return false\n  }\n}\n\nprocessForHaBTM = function(field, object) {\n  name = object.constructor.name\n  if (!window[name]) {\n    return false\n  }\n  isAssociation = _.contains(_.pluck(window[name].has_and_belongs_to_many, 'name'), field)\n  if (isAssociation) {\n    associations = window[_.classify(_.singularize(field))].all()\n    var array = [];\n    _.each(associations, function(association) {\n      array.push({value: association._id, name: association.name})\n    })\n    return array\n  } else {\n    return false\n  }\n}\n\nbuildAssociationCheckboxes = function(field, object, checkboxes, options) {\n  return false\n  builtCheckboxes = _.map(checkboxes, function(checkbox) {\n    html_class = processClass(options.hash)\n    checked = _.contains(object[_.singularize(field) + '_ids'], checkbox.value) === true ? ' checked' : '';\n    label = processLabel(options.hash, checkbox.name)\n    html = \"<label for='\"+ checkbox.name +\"'><input id='\"+ checkbox.name +\"' name='\" + checkbox.name + \"' type='hidden' value='false'><input name='\" + checkbox.name + \"' class='\"+ html_class +\"' type='checkbox' value='\" + checkbox.value + \"' \" + checked + \">\" + label + \"</label>\";\n    return html;\n  });\n  return new Spacebars.SafeString(builtCheckboxes.join(' '));\n}\n\n/*----- HELPERS ------*/\n\nUI.registerHelper('text_field', function(field, options){\n  var _this = this;\n  if (!field) {\n    return;\n  }\n  value = _this[field] || \"\"\n  html_class = processClass(options.hash)\n  type = options.hash['type'] || \"text\"\n  if (value && type === \"date\" && value.constructor === Date) {\n    value = value.getFullYear() + '-' + ('0' + (value.getMonth()+1)).slice(-2) + \"-\" + ('0' + value.getDate()).slice(-2)\n  }\n  placeholder = processPlaceHolder(options.hash)\n  required = processRequired(options.hash)\n  html = \"<input type='\"+ type +\"' id='\" + field + \"' name='\"+ field +\"' value='\"+ value +\"' class='form-control\"+ html_class +\"'\"+ placeholder + required + \" >\"\n  label = buildLabel(options.hash, field)\n  hint = buildHintBlock(options.hash)\n  beforeAddon = buildBeforeAddon(options.hash)\n  afterAddon = buildAfterAddon(options.hash)\n  return new Spacebars.SafeString(label + beforeAddon + html + afterAddon + hint);\n});\n\nUI.registerHelper('text_area', function(field, options){\n  var _this = this;\n  if (!field) {\n    return;\n  }\n  value = _this[field] || \"\"\n  html_class = processClass(options.hash)\n  if (options.hash['rows']) {\n    rows = \"rows='\"+ options.hash['rows'] +\"' \"\n  } else {\n    rows = \"\"\n  }\n\n  required = processRequired(options.hash)\n  html = \"<textarea id='\" + field + \"' \"+ rows +\"name='\"+ field +\"' class='form-control\"+ html_class +\"'\" + required + \">\"+ value +\"</textarea>\"\n  label = buildLabel(options.hash, field)\n  hint = buildHintBlock(options.hash)\n  return new Spacebars.SafeString(label + html + hint);\n});\n\nUI.registerHelper('select_box', function(field, options) {\n  _this = this;\n  optionsValues = undefined\n  if (!field) {\n    return;\n  }\n\n  associationOptions = processForBelongsTo(field, _this)\n  html_class = processClass(options.hash)\n\n  if (associationOptions) {\n    optionsValues = associationOptions\n    dbField = field + \"_id\"\n  } else {\n    dbField = field\n    if (options.hash.optionValues && options.hash.optionValues.length > 0) {\n      optionsValues = options.hash.optionValues\n    } else {\n      optionsValues = _this[\"\" + field + \"Options\"]();\n    }\n  }\n\n  required = processRequired(options.hash)\n  html_options = [];\n  _.each(optionsValues, function(option) {\n    name = option.name || _.humanize(option)\n    value = option.value || option\n    selected = _this[field] === value ? ' selected' : '';\n    return html_options.push(\"<option value='\" + value + \"'\" + selected + \">\" + name + \"</option>\");\n  });\n  html = \"<select class='form-control\" + html_class + \"' name='\" + dbField + \"'\" + required + \">\" + (html_options.join('')) + \"</select>\"\n  label = buildLabel(options.hash, dbField)\n  hint = buildHintBlock(options.hash)\n  return new Spacebars.SafeString(label + html + hint);\n});\n\n\nUI.registerHelper('check_box', function(field, options) {\n  var capitalizedField, checked;\n  if (!field) {\n    return;\n  }\n  associationOptions = null//processForHaBTM(field, this)\n  if (associationOptions) {\n    return buildAssociationCheckboxes(field, this, associationOptions, options)\n  } else {\n    html_class = processClass(options.hash)\n    checked = this[field] === 'true' ? ' checked' : '';\n    label = processLabel(options.hash, field)\n    required = processRequired(options.hash)\n    html = \"<label for='\"+ field +\"'><input id='\"+ field +\"' name='\" + field + \"' type='hidden' value='false'><input name='\" + field + \"' class='\"+ html_class +\"' type='checkbox' value='true' \" + checked + required + \">\" + label + \"</label>\";\n    hint = buildHintBlock(options.hash)\n    return new Spacebars.SafeString(html + hint);\n  }\n});\n\nUI.registerHelper('file_field', function(){\n  if (Package['schnie:uploader']) {\n    this.settings = {\n      name: this.field,\n      onUpload: function(error, result) {\n        if (result) {\n          $('input[name=\"'+ this.name +'Url\"').val(result.url)\n          $('input[name=\"'+ this.name +'OriginalFileName\"').val(result.originalFileName)\n          Session.set(this.name + 'OriginalFileName', result.originalFileName)\n          Session.set(this.name + 'Url', result.url)\n        } else {\n          console.log(error)\n        }\n      }\n    }\n    return Template['simpleFormFileField']\n  }\n});\n\nUI.registerHelper('submit_button', function(text, options){\n  var _this = this;\n  if (!text && !options) {\n    options = {};\n  }\n  if (text && text.hash) {\n    options = text;\n    text = undefined;\n  }\n  klass = _this.constructor.name;\n  if (_this._id) {\n    actionWord = \"Update \"\n  } else {\n    actionWord = \"Add \"\n  }\n  value = text || actionWord + klass;\n  html_class = processClass(options.hash);\n  html_id = processId(options.hash);\n  if (options.hash && options.hash['button']) {\n    html = \"<button type='submit' class='btn btn-default\"+ html_class + \"'\"+ html_id +\">\" + value + \"</button>\";\n  } else {\n    html = \"<input type='submit' value='\"+ value +\"' class='btn btn-default\"+ html_class + \"'\"+ html_id +\">\";\n  }\n  return new Spacebars.SafeString(html);\n});\n","SimpleForm = {\n  processForm: function(target) {\n    var form = {};\n    array = $(target).serializeArray();\n    _.each(array, function(formItem) {\n      type = $(target).find(\"input[name='\" + formItem.name + \"']\").attr('type')\n      if (type === 'date' && !!formItem.value) {\n        return form[formItem.name] = new Date(formItem.value + \" 00:00\");\n      } else {\n        return form[formItem.name] = formItem.value;\n      }\n    });\n    return form;\n  },\n  resetForm: function(target){\n    $(target).trigger('reset')\n  }\n};\n\n"]}