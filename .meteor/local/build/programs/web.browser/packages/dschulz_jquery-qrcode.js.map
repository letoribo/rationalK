)]}'
{"version":3,"sources":["dschulz:jquery-qrcode/lib/jquery.qrcode-0.11.0.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uH;AACA,c;AACA,a;;AAEA,e;;AAEA,8C;AACA,8C;;AAEA,6F;AACA,8B;AACA,oC;AACA,qB;AACA,c;;AAEA,uB;;AAEA,4C;AACA,yD;;AAEA,+B;;AAEA,qB;AACA,qB;;AAEA,iF;AACA,yB;AACA,S;;AAEA,mC;AACA,K;;AAEA,0C;;AAEA,qC;AACA,8C;;AAEA,2C;;AAEA,sC;AACA,sC;AACA,qC;AACA,qC;;AAEA,kF;AACA,U;AACA,M;;AAEA,qB;AACA,uB;AACA,2B;AACA,wC;AACA,yB;AACA,6B;AACA,C;;AAEA,kE;AACA,8B;;AAEA,oD;AACA,4D;AACA,S;AACA,iF;;AAEA,mF;AACA,2E;AACA,mE;;AAEA,8C;AACA,gD;AACA,yE;AACA,a;AACA,2D;AACA,wB;AACA,K;AACA,C;;AAEA,qD;;AAEA,6B;AACA,6E;AACA,iD;;AAEA,oB;;AAEA,kD;AACA,4B;AACA,sB;AACA,uC;AACA,uC;AACA,qB;AACA,qB;AACA,mB;;AAEA,8B;AACA,gB;AACA,iD;AACA,Y;AACA,c;AACA,4D;AACA,K;;AAEA,2C;AACA,wB;AACA,sF;AACA,C;;AAEA,qD;;AAEA,6B;AACA,6C;AACA,8C;AACA,4B;AACA,wB;AACA,uC;AACA,uC;AACA,qB;AACA,qB;AACA,mB;;AAEA,8B;AACA,gB;AACA,iD;AACA,Y;AACA,c;AACA,4D;AACA,K;;AAEA,0E;AACA,C;;AAEA,gD;;AAEA,2C;AACA,mF;AACA,qC;AACA,gD;AACA,oF;AACA,K;;AAEA,6B;AACA,mC;AACA,mD;AACA,0C;AACA,mD;AACA,K;AACA,C;;AAEA,+E;;AAEA,8B;AACA,8C;AACA,K;AACA,C;;AAEA,sE;;AAEA,a;AACA,+B;AACA,Y;AACA,yB;AACA,K;;AAEA,a;AACA,+B;AACA,mC;AACA,Y;AACA,yB;AACA,K;;AAEA,a;AACA,+B;AACA,mC;AACA,Y;AACA,yB;AACA,K;;AAEA,a;AACA,+B;AACA,mC;AACA,Y;AACA,yB;AACA,K;;AAEA,a;AACA,+B;AACA,mC;AACA,Y;AACA,yB;AACA,K;AACA,C;;AAEA,wE;;AAEA,a;AACA,+B;AACA,yB;AACA,+B;AACA,yC;AACA,K;;AAEA,a;AACA,+B;AACA,yB;AACA,+B;AACA,yC;AACA,K;;AAEA,a;AACA,+B;AACA,yB;AACA,+B;AACA,yC;AACA,K;;AAEA,a;AACA,+B;AACA,yB;AACA,+B;AACA,yC;AACA,K;AACA,C;;AAEA,+E;;AAEA,2B;AACA,6B;AACA,6B;AACA,yC;AACA,uB;AACA,uB;AACA,uB;AACA,uB;AACA,kC;AACA,uC;AACA,kC;AACA,uC;AACA,iC;AACA,uC;AACA,kC;AACA,uC;AACA,iC;;AAEA,iB;AACA,6I;AACA,Y;AACA,2L;AACA,K;AACA,C;;AAEA,6C;;AAEA,qC;AACA,iD;AACA,+B;AACA,iB;;AAEA,oE;AACA,+B;AACA,K;;AAEA,wB;AACA,gD;AACA,oD;;AAEA,qD;AACA,oD;AACA,+B;;AAEA,yD;AACA,S;AACA,K;AACA,qC;AACA,gD;AACA,8B;AACA,yB;AACA,oD;AACA,6D;AACA,uB;AACA,gD;;AAEA,uB;AACA,6E;AACA,0B;AACA,Y;AACA,0C;AACA,uB;AACA,K;AACA,C;;AAEA,sD;AACA,yC;;AAEA,qH;AACA,c;AACA,oB;AACA,K;;AAEA,+C;AACA,8C;;AAEA,0C;AACA,uC;;AAEA,mB;AACA,C;;AAEA,8E;AACA,iC;;AAEA,4F;AACA,2C;AACA,C;;AAEA,8E;AACA,gC;;AAEA,qF;AACA,C;;AAEA,2E;AACA,8B;;AAEA,qH;AACA,c;AACA,oB;AACA,K;;AAEA,4C;AACA,sC;AACA,+C;AACA,gC;;AAEA,qC;AACA,6D;AACA,8E;;AAEA,iB;;AAEA,wB;AACA,iC;AACA,oB;AACA,mB;AACA,uB;AACA,sB;AACA,iC;AACA,iC;AACA,U;AACA,mB;AACA,iC;AACA,uB;AACA,sB;AACA,8B;AACA,+B;AACA,6C;AACA,U;;AAEA,gE;;AAEA,2B;AACA,uD;AACA,K;;AAEA,gD;AACA,oD;AACA,sC;AACA,2B;AACA,iC;AACA,0B;AACA,wD;AACA,sD;AACA,sB;AACA,oC;AACA,a;AACA,S;AACA,K;;AAEA,gB;AACA,C;;AAEA,+B;;AAEA,oD;AACA,sC;AACA,0D;AACA,qC;AACA,K;;AAEA,+B;AACA,C;;AAEA,S;AACA,S;;AAEA,mB;AACA,mB;AACA,gB;;AAEA,0D;AACA,yB;;AAEA,6C;AACA,sB;AACA,uB;;AAEA,+D;AACA,qB;;AAEA,wD;AACA,gB;AACA,e;;AAEA,wB;AACA,kB;;AAEA,sC;AACA,qB;;AAEA,+E;AACA,yB;;AAEA,kB;AACA,wB;;AAEA,6D;AACA,kB;;AAEA,gC;AACA,iB;;AAEA,gB;AACA,oB;AACA,yB;AACA,uB;AACA,yB;AACA,uB;AACA,gB;;AAEA,mB;AACA,mB;AACA,mB;;AAEA,0B;AACA,yB;AACA,0B;;AAEA,mB;AACA,M;;AAEA,sB;AACA,sB;AACA,iC;;AAEA,mD;;AAEA,kC;;AAEA,uD;AACA,yC;AACA,gB;AACA,iD;AACA,S;AACA,O;AACA,E;;AAEA,uC;;;AAGA,oB;AACA,oB;AACA,uE;AACA,E;AACA,mC;AACA,E;AACA,oC;AACA,E;AACA,iC;AACA,E;AACA,kC;AACA,sD;AACA,E;AACA,gD;AACA,0B;AACA,qD;AACA,E;AACA,uE;;AAEA,yB;;AAEA,2E;AACA,a;AACA,2E;;AAEA,O;AACA,a;AACA,gC;AACA,+C;AACA,O;AACA,0D;;AAEA,wB;AACA,wB;;AAEA,qC;AACA,wE;AACA,4B;AACA,6B;AACA,8B;AACA,oC;;AAEA,uB;;AAEA,oD;;AAEA,gD;AACA,8C;AACA,qD;AACA,gE;AACA,0D;AACA,oE;AACA,iD;AACA,qB;AACA,iB;AACA,+B;AACA,4B;;AAEA,4C;AACA,2D;AACA,2D;AACA,yC;AACA,iC;AACA,6C;;AAEA,mC;AACA,sC;AACA,a;;AAEA,qC;AACA,oF;AACA,a;;AAEA,6C;AACA,U;;AAEA,4D;;AAEA,8C;;AAEA,uE;;AAEA,kD;;AAEA,2E;;AAEA,kE;AACA,wE;AACA,yE;AACA,0D;AACA,4B;AACA,2D;AACA,qB;AACA,iB;AACA,a;AACA,U;;AAEA,6C;;AAEA,iC;AACA,4B;;AAEA,4C;;AAEA,kC;;AAEA,2D;;AAEA,yD;AACA,6C;AACA,gC;AACA,iB;AACA,a;;AAEA,2B;AACA,U;;AAEA,6C;;AAEA,2D;AACA,6C;AACA,6B;AACA,iB;AACA,8C;AACA,a;;AAEA,2D;AACA,6C;AACA,6B;AACA,iB;AACA,8C;AACA,a;AACA,U;;AAEA,qD;;AAEA,6D;;AAEA,qD;;AAEA,yD;;AAEA,qC;AACA,qC;;AAEA,qD;AACA,iC;AACA,qB;;AAEA,sD;;AAEA,0D;;AAEA,sE;AACA,6D;AACA,kE;AACA,oC;AACA,mE;AACA,6B;AACA,yB;AACA,qB;AACA,iB;AACA,a;AACA,U;;AAEA,8C;;AAEA,4D;;AAEA,6C;AACA,6D;AACA,gF;AACA,a;;AAEA,6C;AACA,6D;AACA,gF;AACA,a;AACA,U;;AAEA,yD;;AAEA,+D;AACA,mD;;AAEA,uB;AACA,6C;;AAEA,6D;;AAEA,4B;AACA,yC;AACA,mC;AACA,6C;AACA,wB;AACA,6D;AACA,iB;AACA,a;;AAEA,yB;AACA,6C;;AAEA,6D;;AAEA,4B;AACA,4D;AACA,mC;AACA,sD;AACA,wB;AACA,kD;AACA,iB;AACA,a;;AAEA,2B;AACA,oD;AACA,U;;AAEA,mD;;AAEA,yB;AACA,uC;AACA,6B;AACA,8B;AACA,+D;;AAEA,iE;;AAEA,uC;;AAEA,8B;;AAEA,oD;;AAEA,6D;;AAEA,6C;;AAEA,0D;AACA,qF;AACA,6B;;AAEA,8D;;AAEA,uC;AACA,6C;AACA,6B;;AAEA,0D;AACA,0C;;AAEA,iD;AACA,+C;AACA,6C;AACA,6B;AACA,yB;AACA,qB;;AAEA,+B;;AAEA,yD;AACA,mC;AACA,mC;AACA,8B;AACA,qB;AACA,iB;AACA,a;AACA,U;;AAEA,sD;;AAEA,2B;;AAEA,+B;AACA,+B;;AAEA,oD;AACA,oD;;AAEA,0D;;AAEA,oD;AACA,+D;;AAEA,2D;AACA,2D;;AAEA,+C;;AAEA,+D;AACA,yE;AACA,iB;AACA,kC;;AAEA,uE;AACA,8E;;AAEA,kD;AACA,8D;AACA,+D;AACA,8E;AACA,8E;AACA,iB;AACA,a;;AAEA,mC;AACA,0D;AACA,yD;AACA,a;;AAEA,iD;AACA,0B;;AAEA,qD;AACA,8D;AACA,+C;AACA,mD;AACA,mC;AACA,qB;AACA,iB;AACA,a;;AAEA,qD;AACA,8D;AACA,+C;AACA,mD;AACA,mC;AACA,qB;AACA,iB;AACA,a;;AAEA,wB;AACA,U;;AAEA,4E;;AAEA,gF;;AAEA,uC;;AAEA,0D;AACA,uC;AACA,8C;AACA,kG;AACA,mC;AACA,a;;AAEA,iC;AACA,mC;AACA,0D;AACA,wD;AACA,a;;AAEA,gE;AACA,yD;AACA,8C;AACA,yB;AACA,wC;AACA,2B;AACA,a;;AAEA,uB;AACA,qE;AACA,iC;AACA,a;;AAEA,sB;AACA,uD;AACA,qC;AACA,a;;AAEA,sB;AACA,0B;;AAEA,qE;AACA,0B;AACA,iB;AACA,oC;;AAEA,qE;AACA,0B;AACA,iB;AACA,oC;AACA,a;;AAEA,iD;AACA,U;;AAEA,wC;AACA,2C;AACA,oC;AACA,8B;AACA,U;;AAEA,2C;AACA,mF;AACA,iD;AACA,a;AACA,sC;AACA,U;;AAEA,2C;AACA,gC;AACA,U;;AAEA,iC;AACA,mD;AACA,U;;AAEA,2D;;AAEA,qC;AACA,2E;;AAEA,4B;;AAEA,uC;AACA,gE;AACA,oD;AACA,iE;AACA,2B;AACA,gC;;AAEA,iE;;AAEA,iC;;AAEA,qE;AACA,4C;AACA,wE;AACA,4D;AACA,4D;AACA,4D;AACA,6D;AACA,oD;AACA,wE;AACA,kC;AACA,oC;AACA,iB;;AAEA,kC;AACA,a;;AAEA,iC;AACA,iC;;AAEA,0B;AACA,U;;AAEA,yD;;AAEA,qC;AACA,2E;;AAEA,sE;AACA,6B;AACA,oC;;AAEA,4D;AACA,iE;AACA,8D;AACA,8D;AACA,qD;AACA,wB;AACA,6B;AACA,iB;AACA,gB;AACA,U;;AAEA,qB;AACA,M;;AAEA,2E;AACA,2B;AACA,2E;;AAEA,wC;AACA,gC;AACA,+C;AACA,oC;AACA,iC;AACA,S;AACA,qB;AACA,M;;AAEA,2E;AACA,iC;AACA,2E;;AAEA,O;AACA,sD;AACA,yC;AACA,sB;AACA,O;AACA,kE;;AAEA,iC;;AAEA,qC;;AAEA,2D;AACA,mC;AACA,mC;AACA,+C;AACA,yB;AACA,c;;AAEA,0B;AACA,gC;AACA,0B;AACA,oC;AACA,oC;AACA,gC;AACA,gC;AACA,gC;AACA,6D;AACA,uC;AACA,kC;AACA,2B;AACA,a;AACA,oC;AACA,2D;AACA,a;;AAEA,8B;AACA,Y;;AAEA,4C;;AAEA,4B;AACA,oC;AACA,mD;AACA,wC;AACA,8B;AACA,kC;AACA,wB;AACA,oD;AACA,+C;AACA,+C;AACA,oC;AACA,0C;AACA,gC;AACA,qC;AACA,gD;AACA,iD;AACA,yB;AACA,4B;AACA,gD;AACA,qB;AACA,iB;AACA,a;AACA,yB;AACA,U;AACA,M;;AAEA,2E;AACA,a;AACA,2E;;AAEA,kB;AACA,mC;AACA,mC;AACA,mC;AACA,kC;AACA,M;;AAEA,2E;AACA,0B;AACA,2E;;AAEA,+B;AACA,c;AACA,c;AACA,c;AACA,a;AACA,M;;AAEA,2E;AACA,oB;AACA,2E;;AAEA,yB;AACA,uB;AACA,uB;AACA,uB;AACA,uB;AACA,uB;AACA,uB;AACA,uB;AACA,sB;AACA,M;;AAEA,2E;AACA,a;AACA,2E;;AAEA,6B;;AAEA,sC;AACA,e;AACA,oB;AACA,oB;AACA,oB;AACA,oB;AACA,oB;AACA,wB;AACA,wB;AACA,wB;AACA,wB;AACA,wB;AACA,wB;AACA,wB;AACA,4B;AACA,4B;AACA,4B;AACA,4B;AACA,4B;AACA,4B;AACA,4B;AACA,gC;AACA,gC;AACA,iC;AACA,iC;AACA,iC;AACA,iC;AACA,iC;AACA,qC;AACA,sC;AACA,sC;AACA,sC;AACA,sC;AACA,sC;AACA,sC;AACA,2C;AACA,2C;AACA,2C;AACA,2C;AACA,2C;AACA,0C;AACA,U;AACA,8F;AACA,2G;AACA,+E;;AAEA,uB;;AAEA,0C;AACA,0B;AACA,+B;AACA,2B;AACA,4B;AACA,a;AACA,yB;AACA,U;;AAEA,+C;AACA,+B;AACA,4D;AACA,oE;AACA,a;AACA,kD;AACA,U;;AAEA,iD;AACA,+B;AACA,4D;AACA,oE;AACA,a;AACA,oC;AACA,U;;AAEA,yD;AACA,0D;AACA,U;;AAEA,uD;;AAEA,kC;;AAEA,2C;AACA,mE;AACA,2C;AACA,6D;AACA,2C;AACA,6D;AACA,2C;AACA,mE;AACA,2C;AACA,oG;AACA,2C;AACA,iF;AACA,2C;AACA,wF;AACA,2C;AACA,wF;;AAEA,qB;AACA,kE;AACA,a;AACA,U;;AAEA,wE;AACA,yC;AACA,6D;AACA,sE;AACA,a;AACA,qB;AACA,U;;AAEA,sD;;AAEA,yC;;AAEA,wB;;AAEA,8B;AACA,wD;AACA,uD;AACA,uD;AACA,uD;AACA,yB;AACA,oD;AACA,iB;;AAEA,mC;;AAEA,0B;;AAEA,8B;AACA,wD;AACA,wD;AACA,wD;AACA,wD;AACA,yB;AACA,oD;AACA,iB;;AAEA,mC;;AAEA,0B;;AAEA,8B;AACA,wD;AACA,wD;AACA,wD;AACA,wD;AACA,yB;AACA,oD;AACA,iB;;AAEA,oB;AACA,gD;AACA,a;AACA,U;;AAEA,+C;;AAEA,sD;;AAEA,8B;;AAEA,qB;;AAEA,4D;AACA,gE;;AAEA,sC;AACA,uD;;AAEA,sD;;AAEA,oE;AACA,qC;AACA,yB;;AAEA,0D;;AAEA,wE;AACA,yC;AACA,6B;;AAEA,mD;AACA,yC;AACA,6B;;AAEA,2E;AACA,+C;AACA,6B;AACA,yB;AACA,qB;;AAEA,wC;AACA,yD;AACA,qB;AACA,iB;AACA,c;;AAEA,qB;;AAEA,gE;AACA,oE;AACA,kC;AACA,6D;AACA,iE;AACA,iE;AACA,qE;AACA,mD;AACA,uC;AACA,qB;AACA,iB;AACA,a;;AAEA,qB;;AAEA,4D;AACA,oE;AACA,+C;AACA,2D;AACA,2D;AACA,2D;AACA,2D;AACA,2D;AACA,+D;AACA,wC;AACA,qB;AACA,iB;AACA,a;;AAEA,4D;AACA,oE;AACA,+C;AACA,2D;AACA,2D;AACA,2D;AACA,2D;AACA,2D;AACA,+D;AACA,wC;AACA,qB;AACA,iB;AACA,a;;AAEA,qB;;AAEA,8B;;AAEA,4D;AACA,gE;AACA,mD;AACA,uC;AACA,qB;AACA,iB;AACA,a;;AAEA,uF;AACA,oC;;AAEA,6B;AACA,U;;AAEA,qB;AACA,Q;;AAEA,2E;AACA,a;AACA,2E;;AAEA,6B;;AAEA,uC;AACA,uC;;AAEA,4B;AACA,wC;AACA,kC;AACA,S;AACA,0C;AACA,2C;AACA,kC;AACA,kC;AACA,mC;AACA,S;AACA,0C;AACA,yC;AACA,S;;AAEA,uB;;AAEA,kC;;AAEA,wB;AACA,mD;AACA,a;;AAEA,gC;AACA,U;;AAEA,kC;;AAEA,2B;AACA,yB;AACA,a;;AAEA,8B;AACA,yB;AACA,a;;AAEA,gC;AACA,U;;AAEA,qB;AACA,Q;;AAEA,2E;AACA,mB;AACA,2E;;AAEA,uC;;AAEA,+C;AACA,sD;AACA,S;;AAEA,+B;AACA,2B;AACA,6D;AACA,4B;AACA,a;AACA,8D;AACA,8D;AACA,0C;AACA,a;AACA,wB;AACA,Y;;AAEA,uB;;AAEA,qC;AACA,+B;AACA,U;;AAEA,sC;AACA,+B;AACA,U;;AAEA,sC;;AAEA,uE;;AAEA,4D;AACA,4D;AACA,oG;AACA,iB;AACA,a;;AAEA,wC;AACA,U;;AAEA,iC;;AAEA,wD;AACA,6B;AACA,a;;AAEA,4E;;AAEA,oD;AACA,4D;AACA,sC;AACA,a;;AAEA,wD;AACA,sE;AACA,a;;AAEA,6B;AACA,+C;AACA,U;;AAEA,qB;AACA,M;;AAEA,2E;AACA,gB;AACA,2E;;AAEA,gC;;AAEA,8B;;AAEA,gB;AACA,gB;AACA,gB;AACA,gB;;AAEA,gB;AACA,wB;AACA,wB;AACA,wB;AACA,uB;;AAEA,gB;AACA,wB;AACA,wB;AACA,wB;AACA,wB;;AAEA,gB;AACA,wB;AACA,wB;AACA,wB;AACA,wB;;AAEA,gB;AACA,yB;AACA,wB;AACA,wB;AACA,uB;;AAEA,gB;AACA,0B;AACA,wB;AACA,mC;AACA,mC;;AAEA,gB;AACA,wB;AACA,wB;AACA,wB;AACA,wB;;AAEA,gB;AACA,wB;AACA,wB;AACA,mC;AACA,mC;;AAEA,gB;AACA,yB;AACA,mC;AACA,mC;AACA,mC;;AAEA,gB;AACA,0B;AACA,mC;AACA,mC;AACA,mC;;AAEA,iB;AACA,mC;AACA,mC;AACA,mC;AACA,mC;;AAEA,iB;AACA,yB;AACA,mC;AACA,mC;AACA,mC;;AAEA,iB;AACA,qC;AACA,mC;AACA,mC;AACA,mC;;AAEA,iB;AACA,0B;AACA,mC;AACA,mC;AACA,oC;;AAEA,iB;AACA,uC;AACA,mC;AACA,oC;AACA,oC;;AAEA,iB;AACA,qC;AACA,mC;AACA,mC;AACA,yB;;AAEA,iB;AACA,qC;AACA,mC;AACA,oC;AACA,oC;;AAEA,iB;AACA,uC;AACA,oC;AACA,oC;AACA,oC;;AAEA,iB;AACA,uC;AACA,mC;AACA,oC;AACA,oC;;AAEA,iB;AACA,uC;AACA,oC;AACA,oC;AACA,oC;;AAEA,iB;AACA,uC;AACA,oC;AACA,oC;AACA,qC;;AAEA,iB;AACA,uC;AACA,yB;AACA,oC;AACA,oC;;AAEA,iB;AACA,uC;AACA,yB;AACA,oC;AACA,yB;;AAEA,iB;AACA,uC;AACA,oC;AACA,qC;AACA,qC;;AAEA,iB;AACA,uC;AACA,oC;AACA,qC;AACA,oC;;AAEA,iB;AACA,uC;AACA,oC;AACA,oC;AACA,qC;;AAEA,iB;AACA,wC;AACA,oC;AACA,oC;AACA,oC;;AAEA,iB;AACA,uC;AACA,oC;AACA,oC;AACA,qC;;AAEA,iB;AACA,wC;AACA,oC;AACA,oC;AACA,qC;;AAEA,iB;AACA,uC;AACA,oC;AACA,oC;AACA,qC;;AAEA,iB;AACA,wC;AACA,qC;AACA,qC;AACA,qC;;AAEA,iB;AACA,wC;AACA,oC;AACA,oC;AACA,qC;;AAEA,iB;AACA,2B;AACA,qC;AACA,qC;AACA,qC;;AAEA,iB;AACA,wC;AACA,qC;AACA,qC;AACA,qC;;AAEA,iB;AACA,wC;AACA,qC;AACA,oC;AACA,oC;;AAEA,iB;AACA,wC;AACA,qC;AACA,qC;AACA,qC;;AAEA,iB;AACA,wC;AACA,oC;AACA,qC;AACA,oC;;AAEA,iB;AACA,wC;AACA,qC;AACA,qC;AACA,qC;;AAEA,iB;AACA,wC;AACA,qC;AACA,qC;AACA,qC;;AAEA,iB;AACA,wC;AACA,oC;AACA,qC;AACA,qC;;AAEA,iB;AACA,wC;AACA,qC;AACA,qC;AACA,oC;AACA,U;;AAEA,yD;AACA,2B;AACA,0C;AACA,wC;AACA,yB;AACA,U;;AAEA,uB;;AAEA,uE;;AAEA,uC;AACA,wC;AACA,gE;AACA,wC;AACA,gE;AACA,wC;AACA,gE;AACA,wC;AACA,gE;AACA,qB;AACA,iC;AACA,a;AACA,U;;AAEA,qE;;AAEA,yE;;AAEA,gD;AACA,2E;AACA,mE;AACA,a;;AAEA,4C;;AAEA,mC;;AAEA,iD;;AAEA,+C;AACA,oD;AACA,mD;;AAEA,oD;AACA,iE;AACA,iB;AACA,a;;AAEA,wB;AACA,U;;AAEA,qB;AACA,Q;;AAEA,2E;AACA,kB;AACA,2E;;AAEA,kC;;AAEA,kC;AACA,wB;;AAEA,uB;;AAEA,sC;AACA,2B;AACA,U;;AAEA,qC;AACA,iD;AACA,wE;AACA,U;;AAEA,2C;AACA,iD;AACA,uE;AACA,a;AACA,U;;AAEA,4C;AACA,2B;AACA,U;;AAEA,sC;;AAEA,mD;AACA,6C;AACA,gC;AACA,a;;AAEA,sB;AACA,+D;AACA,a;;AAEA,yB;AACA,U;;AAEA,qB;AACA,M;;AAEA,2E;AACA,iB;AACA,2E;;AAEA,qC;;AAEA,0C;AACA,yB;AACA,gD;;AAEA,uB;;AAEA,oC;AACA,yB;AACA,U;;AAEA,4C;AACA,iC;AACA,U;;AAEA,wC;AACA,wD;AACA,yC;AACA,a;AACA,U;;AAEA,qB;AACA,M;;AAEA,2E;AACA,uB;AACA,M;;AAEA,2E;AACA,4B;AACA,2E;;AAEA,4C;;AAEA,iC;;AAEA,uB;;AAEA,uC;AACA,kC;AACA,U;;AAEA,wC;AACA,+B;AACA,qC;AACA,U;;AAEA,kD;AACA,2B;AACA,kC;AACA,8C;AACA,4C;AACA,a;AACA,U;;AAEA,yC;AACA,mD;AACA,kD;AACA,a;AACA,U;;AAEA,wC;AACA,0B;AACA,U;;AAEA,qC;AACA,uB;AACA,qB;AACA,wD;AACA,4B;AACA,6B;AACA,iB;AACA,+B;AACA,a;AACA,qB;AACA,qB;AACA,U;;AAEA,qB;AACA,M;;AAEA,2E;AACA,+B;AACA,2E;;AAEA,+C;;AAEA,wB;AACA,wB;AACA,wB;AACA,yB;;AAEA,uB;;AAEA,wC;AACA,8D;AACA,U;;AAEA,kC;AACA,wB;AACA,yB;AACA,gC;AACA,gC;AACA,gC;AACA,uC;AACA,gC;AACA,uC;AACA,iC;AACA,4B;AACA,iC;AACA,4B;AACA,a;AACA,sC;AACA,U;;AAEA,uC;;AAEA,kD;AACA,yB;AACA,yB;;AAEA,kC;AACA,yD;AACA,6B;AACA,a;AACA,U;;AAEA,kC;;AAEA,8B;AACA,wD;AACA,4B;AACA,4B;AACA,a;;AAEA,mC;AACA,0B;AACA,6C;AACA,qD;AACA,mC;AACA,iB;AACA,a;AACA,U;;AAEA,qC;AACA,2B;AACA,U;;AAEA,qB;AACA,M;;AAEA,2E;AACA,8B;AACA,2E;;AAEA,iD;;AAEA,uB;AACA,qB;AACA,wB;AACA,wB;;AAEA,uB;;AAEA,iC;;AAEA,iC;;AAEA,0C;AACA,uC;AACA,kC;AACA,qB;AACA,0E;AACA,iB;;AAEA,0C;AACA,0B;;AAEA,+B;AACA,gC;AACA,8B;AACA,8C;AACA,4C;AACA,6B;AACA,iB;;AAEA,oE;AACA,6B;AACA,a;;AAEA,wD;AACA,yB;AACA,qB;AACA,U;;AAEA,kC;AACA,yC;AACA,gC;AACA,gD;AACA,qC;AACA,gD;AACA,qC;AACA,mC;AACA,0B;AACA,mC;AACA,0B;AACA,oB;AACA,0C;AACA,a;AACA,U;;AAEA,qB;AACA,M;;AAEA,2E;AACA,qB;AACA,2E;;AAEA,4C;;AAEA,2B;AACA,6B;AACA,8C;;AAEA,uB;;AAEA,gD;AACA,0C;AACA,U;;AAEA,qC;;AAEA,+C;AACA,4B;;AAEA,sC;;AAEA,+C;AACA,gC;;AAEA,mC;AACA,oC;;AAEA,wC;AACA,6B;AACA,6B;;AAEA,+C;AACA,+B;;AAEA,oB;AACA,gC;AACA,gC;AACA,gC;;AAEA,oB;AACA,gC;AACA,gC;AACA,gC;;AAEA,+C;AACA,+B;;AAEA,iC;AACA,8B;AACA,8B;AACA,mC;AACA,oC;AACA,6B;;AAEA,+C;AACA,8B;;AAEA,+C;AACA,0B;;AAEA,mC;AACA,sD;;AAEA,0C;;AAEA,2B;;AAEA,kD;AACA,mC;AACA,oD;AACA,8B;AACA,a;;AAEA,kD;AACA,mE;AACA,gC;;AAEA,+C;AACA,6B;AACA,iC;AACA,U;;AAEA,6C;;AAEA,2B;AACA,+B;AACA,+B;;AAEA,2B;;AAEA,kD;;AAEA,8C;AACA,mD;AACA,iB;;AAEA,kD;AACA,iF;AACA,+C;AACA,+C;AACA,mC;AACA,mC;AACA,iB;;AAEA,+D;AACA,iD;AACA,c;;AAEA,sC;AACA,qC;AACA,+C;AACA,iB;AACA,c;;AAEA,yB;AACA,U;;AAEA,qD;;AAEA,gD;AACA,oD;AACA,+C;;AAEA,6B;AACA,mC;;AAEA,oD;AACA,mD;AACA,a;AACA,uD;AACA,qD;;AAEA,kD;AACA,kD;;AAEA,yB;AACA,+C;;AAEA,8B;;AAEA,0D;AACA,2B;;AAEA,8C;;AAEA,8D;AACA,+B;;AAEA,6C;;AAEA,8B;;AAEA,wB;;AAEA,8D;;AAEA,+C;;AAEA,gE;AACA,2C;AACA,yB;;AAEA,yC;AACA,qB;;AAEA,0B;AACA,iB;AACA,a;;AAEA,sD;;AAEA,uB;AACA,6C;;AAEA,2B;;AAEA,yC;AACA,U;;AAEA,mC;;AAEA,0B;AACA,0B;;AAEA,2B;;AAEA,uC;AACA,2C;AACA,sD;AACA,iB;AACA,kC;AACA,2B;AACA,c;;AAEA,qC;AACA,6B;AACA,c;;AAEA,2C;AACA,iC;AACA,c;;AAEA,4C;AACA,uD;AACA,c;;AAEA,yB;AACA,U;;AAEA,qB;AACA,M;;AAEA,+D;;AAEA,0C;AACA,6C;AACA,gD;AACA,oD;AACA,a;AACA,S;;AAEA,wC;AACA,qB;;AAEA,gD;AACA,oC;AACA,mD;AACA,uC;AACA,S;AACA,uB;;AAEA,qB;AACA,sB;AACA,6B;AACA,wC;AACA,sB;AACA,mB;AACA,+B;AACA,qB;AACA,mB;AACA,gC;AACA,sB;AACA,mB;AACA,kB;AACA,iC;AACA,uB;AACA,uB;AACA,S;AACA,oB;;AAEA,mB;AACA,M;;AAEA,2E;AACA,+B;;AAEA,kB;AACA,I;;;AAGA,K","file":"/packages/dschulz_jquery-qrcode.js","sourcesContent":["/* jQuery.qrcode 0.11.0 - http://larsjung.de/jquery-qrcode/ - uses //github.com/kazuhikoarase/qrcode-generator (MIT) */\n(function () {\n'use strict';\n\nvar $ = jQuery;\n\n// Wrapper for the original QR code generator.\nfunction QRCode(text, level, version, quiet) {\n\n    // `qrcode` is the single public function that will be defined by the `QR Code Generator`\n    // at the end of the file.\n    var qr = qrcode(version, level);\n    qr.addData(text);\n    qr.make();\n\n    quiet = quiet || 0;\n\n    var qrModuleCount = qr.getModuleCount();\n    var quietModuleCount = qr.getModuleCount() + 2*quiet;\n\n    function isDark(row, col) {\n\n        row -= quiet;\n        col -= quiet;\n\n        if (row < 0 || row >= qrModuleCount || col < 0 || col >= qrModuleCount) {\n            return false;\n        }\n\n        return qr.isDark(row, col);\n    }\n\n    var addBlank = function (l, t, r, b) {\n\n        var prevIsDark = this.isDark;\n        var moduleSize = 1 / quietModuleCount;\n\n        this.isDark = function (row, col) {\n\n            var ml = col * moduleSize;\n            var mt = row * moduleSize;\n            var mr = ml + moduleSize;\n            var mb = mt + moduleSize;\n\n            return prevIsDark(row, col) && (l > mr || ml > r || t > mb || mt > b);\n        };\n    };\n\n    this.text = text;\n    this.level = level;\n    this.version = version;\n    this.moduleCount = quietModuleCount;\n    this.isDark = isDark;\n    this.addBlank = addBlank;\n}\n\n// Check if canvas is available in the browser (as Modernizr does)\nvar hasCanvas = (function () {\n\n        var elem = document.createElement('canvas');\n        return !!(elem.getContext && elem.getContext('2d'));\n    }());\nvar hasArcTo = Object.prototype.toString.call(window.opera) !== '[object Opera]';\n\n// Returns a minimal QR code for the given text starting with version `minVersion`.\n// Returns `undefined` if `text` is too long to be encoded in `maxVersion`.\nfunction createQRCode(text, level, minVersion, maxVersion, quiet) {\n\n    minVersion = Math.max(1, minVersion || 1);\n    maxVersion = Math.min(40, maxVersion || 40);\n    for (var version = minVersion; version <= maxVersion; version += 1) {\n        try {\n            return new QRCode(text, level, version, quiet);\n        } catch (err) {}\n    }\n}\n\nfunction drawBackgroundLabel(qr, context, settings) {\n\n    var size = settings.size;\n    var font = \"bold \" + (settings.mSize * size) + \"px \" + settings.fontname;\n    var ctx = $('<canvas/>')[0].getContext(\"2d\");\n\n    ctx.font = font;\n\n    var w = ctx.measureText(settings.label).width;\n    var sh = settings.mSize;\n    var sw = w / size;\n    var sl = (1 - sw) * settings.mPosX;\n    var st = (1 - sh) * settings.mPosY;\n    var sr = sl + sw;\n    var sb = st + sh;\n    var pad = 0.01;\n\n    if (settings.mode === 1) {\n        // Strip\n        qr.addBlank(0, st - pad, size, sb + pad);\n    } else {\n        // Box\n        qr.addBlank(sl - pad, st - pad, sr + pad, sb + pad);\n    }\n\n    context.fillStyle = settings.fontcolor;\n    context.font = font;\n    context.fillText(settings.label, sl*size, st*size + 0.75 * settings.mSize * size);\n}\n\nfunction drawBackgroundImage(qr, context, settings) {\n\n    var size = settings.size;\n    var w = settings.image.naturalWidth || 1;\n    var h = settings.image.naturalHeight || 1;\n    var sh = settings.mSize;\n    var sw = sh * w / h;\n    var sl = (1 - sw) * settings.mPosX;\n    var st = (1 - sh) * settings.mPosY;\n    var sr = sl + sw;\n    var sb = st + sh;\n    var pad = 0.01;\n\n    if (settings.mode === 3) {\n        // Strip\n        qr.addBlank(0, st - pad, size, sb + pad);\n    } else {\n        // Box\n        qr.addBlank(sl - pad, st - pad, sr + pad, sb + pad);\n    }\n\n    context.drawImage(settings.image, sl*size, st*size, sw*size, sh*size);\n}\n\nfunction drawBackground(qr, context, settings) {\n\n    if ($(settings.background).is('img')) {\n        context.drawImage(settings.background, 0, 0, settings.size, settings.size);\n    } else if (settings.background) {\n        context.fillStyle = settings.background;\n        context.fillRect(settings.left, settings.top, settings.size, settings.size);\n    }\n\n    var mode = settings.mode;\n    if (mode === 1 || mode === 2) {\n        drawBackgroundLabel(qr, context, settings);\n    } else if (mode === 3 || mode === 4) {\n        drawBackgroundImage(qr, context, settings);\n    }\n}\n\nfunction drawModuleDefault(qr, context, settings, left, top, width, row, col) {\n\n    if (qr.isDark(row, col)) {\n        context.rect(left, top, width, width);\n    }\n}\n\nfunction drawModuleRoundedDark(ctx, l, t, r, b, rad, nw, ne, se, sw) {\n\n    if (nw) {\n        ctx.moveTo(l + rad, t);\n    } else {\n        ctx.moveTo(l, t);\n    }\n\n    if (ne) {\n        ctx.lineTo(r - rad, t);\n        ctx.arcTo(r, t, r, b, rad);\n    } else {\n        ctx.lineTo(r, t);\n    }\n\n    if (se) {\n        ctx.lineTo(r, b - rad);\n        ctx.arcTo(r, b, l, b, rad);\n    } else {\n        ctx.lineTo(r, b);\n    }\n\n    if (sw) {\n        ctx.lineTo(l + rad, b);\n        ctx.arcTo(l, b, l, t, rad);\n    } else {\n        ctx.lineTo(l, b);\n    }\n\n    if (nw) {\n        ctx.lineTo(l, t + rad);\n        ctx.arcTo(l, t, r, t, rad);\n    } else {\n        ctx.lineTo(l, t);\n    }\n}\n\nfunction drawModuleRoundendLight(ctx, l, t, r, b, rad, nw, ne, se, sw) {\n\n    if (nw) {\n        ctx.moveTo(l + rad, t);\n        ctx.lineTo(l, t);\n        ctx.lineTo(l, t + rad);\n        ctx.arcTo(l, t, l + rad, t, rad);\n    }\n\n    if (ne) {\n        ctx.moveTo(r - rad, t);\n        ctx.lineTo(r, t);\n        ctx.lineTo(r, t + rad);\n        ctx.arcTo(r, t, r - rad, t, rad);\n    }\n\n    if (se) {\n        ctx.moveTo(r - rad, b);\n        ctx.lineTo(r, b);\n        ctx.lineTo(r, b - rad);\n        ctx.arcTo(r, b, r - rad, b, rad);\n    }\n\n    if (sw) {\n        ctx.moveTo(l + rad, b);\n        ctx.lineTo(l, b);\n        ctx.lineTo(l, b - rad);\n        ctx.arcTo(l, b, l + rad, b, rad);\n    }\n}\n\nfunction drawModuleRounded(qr, context, settings, left, top, width, row, col) {\n\n    var isDark = qr.isDark;\n    var right = left + width;\n    var bottom = top + width;\n    var radius = settings.radius * width;\n    var rowT = row - 1;\n    var rowB = row + 1;\n    var colL = col - 1;\n    var colR = col + 1;\n    var center = isDark(row, col);\n    var northwest = isDark(rowT, colL);\n    var north = isDark(rowT, col);\n    var northeast = isDark(rowT, colR);\n    var east = isDark(row, colR);\n    var southeast = isDark(rowB, colR);\n    var south = isDark(rowB, col);\n    var southwest = isDark(rowB, colL);\n    var west = isDark(row, colL);\n\n    if (center) {\n        drawModuleRoundedDark(context, left, top, right, bottom, radius, !north && !west, !north && !east, !south && !east, !south && !west);\n    } else {\n        drawModuleRoundendLight(context, left, top, right, bottom, radius, north && west && northwest, north && east && northeast, south && east && southeast, south && west && southwest);\n    }\n}\n\nfunction drawModules(qr, context, settings) {\n\n    var moduleCount = qr.moduleCount;\n    var moduleSize = settings.size / moduleCount;\n    var fn = drawModuleDefault;\n    var row, col;\n\n    if (hasArcTo && settings.radius > 0 && settings.radius <= 0.5) {\n        fn = drawModuleRounded;\n    }\n\n    context.beginPath();\n    for (row = 0; row < moduleCount; row += 1) {\n        for (col = 0; col < moduleCount; col += 1) {\n\n            var l = settings.left + col * moduleSize,\n                t = settings.top + row * moduleSize,\n                w = moduleSize;\n\n            fn(qr, context, settings, l, t, w, row, col);\n        }\n    }\n    if ($(settings.fill).is('img')) {\n        context.strokeStyle = 'rgba(0,0,0,0.5)';\n        context.lineWidth = 2;\n        context.stroke();\n        var prev = context.globalCompositeOperation;\n        context.globalCompositeOperation = \"destination-out\";\n        context.fill();\n        context.globalCompositeOperation = prev;\n\n        context.clip();\n        context.drawImage(settings.fill, 0, 0, settings.size, settings.size);\n        context.restore();\n    } else {\n        context.fillStyle = settings.fill;\n        context.fill();\n    }\n}\n\n// Draws QR code to the given `canvas` and returns it.\nfunction drawOnCanvas(canvas, settings) {\n\n    var qr = createQRCode(settings.text, settings.ecLevel, settings.minVersion, settings.maxVersion, settings.quiet);\n    if (!qr) {\n        return null;\n    }\n\n    var $canvas = $(canvas).data('qrcode', qr);\n    var context = $canvas[0].getContext('2d');\n\n    drawBackground(qr, context, settings);\n    drawModules(qr, context, settings);\n\n    return $canvas;\n}\n\n// Returns a `canvas` element representing the QR code for the given settings.\nfunction createCanvas(settings) {\n\n    var $canvas = $('<canvas/>').attr('width', settings.size).attr('height', settings.size);\n    return drawOnCanvas($canvas, settings);\n}\n\n// Returns an `image` element representing the QR code for the given settings.\nfunction createImage(settings) {\n\n    return $('<img/>').attr('src', createCanvas(settings)[0].toDataURL('image/png'));\n}\n\n// Returns a `div` element representing the QR code for the given settings.\nfunction createDiv(settings) {\n\n    var qr = createQRCode(settings.text, settings.ecLevel, settings.minVersion, settings.maxVersion, settings.quiet);\n    if (!qr) {\n        return null;\n    }\n\n    // some shortcuts to improve compression\n    var settings_size = settings.size;\n    var settings_bgColor = settings.background;\n    var math_floor = Math.floor;\n\n    var moduleCount = qr.moduleCount;\n    var moduleSize = math_floor(settings_size / moduleCount);\n    var offset = math_floor(0.5 * (settings_size - moduleSize * moduleCount));\n\n    var row, col;\n\n    var containerCSS = {\n            position: 'relative',\n            left: 0,\n            top: 0,\n            padding: 0,\n            margin: 0,\n            width: settings_size,\n            height: settings_size\n        };\n    var darkCSS = {\n            position: 'absolute',\n            padding: 0,\n            margin: 0,\n            width: moduleSize,\n            height: moduleSize,\n            'background-color': settings.fill\n        };\n\n    var $div = $('<div/>').data('qrcode', qr).css(containerCSS);\n\n    if (settings_bgColor) {\n        $div.css('background-color', settings_bgColor);\n    }\n\n    for (row = 0; row < moduleCount; row += 1) {\n        for (col = 0; col < moduleCount; col += 1) {\n            if (qr.isDark(row, col)) {\n                $('<div/>')\n                    .css(darkCSS)\n                    .css({\n                        left: offset + col * moduleSize,\n                        top: offset + row * moduleSize\n                    })\n                    .appendTo($div);\n            }\n        }\n    }\n\n    return $div;\n}\n\nfunction createHTML(settings) {\n\n    if (hasCanvas && settings.render === 'canvas') {\n        return createCanvas(settings);\n    } else if (hasCanvas && settings.render === 'image') {\n        return createImage(settings);\n    }\n\n    return createDiv(settings);\n}\n\n// Plugin\n// ======\n\n// Default settings\n// ----------------\nvar defaults = {\n\n        // render method: `'canvas'`, `'image'` or `'div'`\n        render: 'canvas',\n\n        // version range somewhere in 1 .. 40\n        minVersion: 1,\n        maxVersion: 40,\n\n        // error correction level: `'L'`, `'M'`, `'Q'` or `'H'`\n        ecLevel: 'L',\n\n        // offset in pixel if drawn onto existing canvas\n        left: 0,\n        top: 0,\n\n        // size in pixel\n        size: 200,\n\n        // code color or image element\n        fill: '#000',\n\n        // background color or image element, `null` for transparent background\n        background: null,\n\n        // content\n        text: 'no text',\n\n        // corner radius relative to module width: 0.0 .. 0.5\n        radius: 0,\n\n        // quiet zone in modules\n        quiet: 0,\n\n        // modes\n        // 0: normal\n        // 1: label strip\n        // 2: label box\n        // 3: image strip\n        // 4: image box\n        mode: 0,\n\n        mSize: 0.1,\n        mPosX: 0.5,\n        mPosY: 0.5,\n\n        label: 'no label',\n        fontname: 'sans',\n        fontcolor: '#000',\n\n        image: null\n    };\n\n// Register the plugin\n// -------------------\n$.fn.qrcode = function(options) {\n\n    var settings = $.extend({}, defaults, options);\n\n    return this.each(function () {\n\n        if (this.nodeName.toLowerCase() === 'canvas') {\n            drawOnCanvas(this, settings);\n        } else {\n            $(this).append(createHTML(settings));\n        }\n    });\n};\n\n// jQuery.qrcode plug in code ends here\n\n\n// QR Code Generator\n// =================\n//---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//  http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n\nvar qrcode = function() {\n\n    //---------------------------------------------------------------------\n    // qrcode\n    //---------------------------------------------------------------------\n\n    /**\n     * qrcode\n     * @param typeNumber 1 to 10\n     * @param errorCorrectLevel 'L','M','Q','H'\n     */\n    var qrcode = function(typeNumber, errorCorrectLevel) {\n\n        var PAD0 = 0xEC;\n        var PAD1 = 0x11;\n\n        var _typeNumber = typeNumber;\n        var _errorCorrectLevel = QRErrorCorrectLevel[errorCorrectLevel];\n        var _modules = null;\n        var _moduleCount = 0;\n        var _dataCache = null;\n        var _dataList = new Array();\n\n        var _this = {};\n\n        var makeImpl = function(test, maskPattern) {\n\n            _moduleCount = _typeNumber * 4 + 17;\n            _modules = function(moduleCount) {\n                var modules = new Array(moduleCount);\n                for (var row = 0; row < moduleCount; row += 1) {\n                    modules[row] = new Array(moduleCount);\n                    for (var col = 0; col < moduleCount; col += 1) {\n                        modules[row][col] = null;\n                    }\n                }\n                return modules;\n            }(_moduleCount);\n\n            setupPositionProbePattern(0, 0);\n            setupPositionProbePattern(_moduleCount - 7, 0);\n            setupPositionProbePattern(0, _moduleCount - 7);\n            setupPositionAdjustPattern();\n            setupTimingPattern();\n            setupTypeInfo(test, maskPattern);\n\n            if (_typeNumber >= 7) {\n                setupTypeNumber(test);\n            }\n\n            if (_dataCache == null) {\n                _dataCache = createData(_typeNumber, _errorCorrectLevel, _dataList);\n            }\n\n            mapData(_dataCache, maskPattern);\n        };\n\n        var setupPositionProbePattern = function(row, col) {\n\n            for (var r = -1; r <= 7; r += 1) {\n\n                if (row + r <= -1 || _moduleCount <= row + r) continue;\n\n                for (var c = -1; c <= 7; c += 1) {\n\n                    if (col + c <= -1 || _moduleCount <= col + c) continue;\n\n                    if ( (0 <= r && r <= 6 && (c == 0 || c == 6) )\n                            || (0 <= c && c <= 6 && (r == 0 || r == 6) )\n                            || (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {\n                        _modules[row + r][col + c] = true;\n                    } else {\n                        _modules[row + r][col + c] = false;\n                    }\n                }\n            }\n        };\n\n        var getBestMaskPattern = function() {\n\n            var minLostPoint = 0;\n            var pattern = 0;\n\n            for (var i = 0; i < 8; i += 1) {\n\n                makeImpl(true, i);\n\n                var lostPoint = QRUtil.getLostPoint(_this);\n\n                if (i == 0 || minLostPoint > lostPoint) {\n                    minLostPoint = lostPoint;\n                    pattern = i;\n                }\n            }\n\n            return pattern;\n        };\n\n        var setupTimingPattern = function() {\n\n            for (var r = 8; r < _moduleCount - 8; r += 1) {\n                if (_modules[r][6] != null) {\n                    continue;\n                }\n                _modules[r][6] = (r % 2 == 0);\n            }\n\n            for (var c = 8; c < _moduleCount - 8; c += 1) {\n                if (_modules[6][c] != null) {\n                    continue;\n                }\n                _modules[6][c] = (c % 2 == 0);\n            }\n        };\n\n        var setupPositionAdjustPattern = function() {\n\n            var pos = QRUtil.getPatternPosition(_typeNumber);\n\n            for (var i = 0; i < pos.length; i += 1) {\n\n                for (var j = 0; j < pos.length; j += 1) {\n\n                    var row = pos[i];\n                    var col = pos[j];\n\n                    if (_modules[row][col] != null) {\n                        continue;\n                    }\n\n                    for (var r = -2; r <= 2; r += 1) {\n\n                        for (var c = -2; c <= 2; c += 1) {\n\n                            if (r == -2 || r == 2 || c == -2 || c == 2\n                                    || (r == 0 && c == 0) ) {\n                                _modules[row + r][col + c] = true;\n                            } else {\n                                _modules[row + r][col + c] = false;\n                            }\n                        }\n                    }\n                }\n            }\n        };\n\n        var setupTypeNumber = function(test) {\n\n            var bits = QRUtil.getBCHTypeNumber(_typeNumber);\n\n            for (var i = 0; i < 18; i += 1) {\n                var mod = (!test && ( (bits >> i) & 1) == 1);\n                _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n            }\n\n            for (var i = 0; i < 18; i += 1) {\n                var mod = (!test && ( (bits >> i) & 1) == 1);\n                _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n            }\n        };\n\n        var setupTypeInfo = function(test, maskPattern) {\n\n            var data = (_errorCorrectLevel << 3) | maskPattern;\n            var bits = QRUtil.getBCHTypeInfo(data);\n\n            // vertical\n            for (var i = 0; i < 15; i += 1) {\n\n                var mod = (!test && ( (bits >> i) & 1) == 1);\n\n                if (i < 6) {\n                    _modules[i][8] = mod;\n                } else if (i < 8) {\n                    _modules[i + 1][8] = mod;\n                } else {\n                    _modules[_moduleCount - 15 + i][8] = mod;\n                }\n            }\n\n            // horizontal\n            for (var i = 0; i < 15; i += 1) {\n\n                var mod = (!test && ( (bits >> i) & 1) == 1);\n\n                if (i < 8) {\n                    _modules[8][_moduleCount - i - 1] = mod;\n                } else if (i < 9) {\n                    _modules[8][15 - i - 1 + 1] = mod;\n                } else {\n                    _modules[8][15 - i - 1] = mod;\n                }\n            }\n\n            // fixed module\n            _modules[_moduleCount - 8][8] = (!test);\n        };\n\n        var mapData = function(data, maskPattern) {\n\n            var inc = -1;\n            var row = _moduleCount - 1;\n            var bitIndex = 7;\n            var byteIndex = 0;\n            var maskFunc = QRUtil.getMaskFunction(maskPattern);\n\n            for (var col = _moduleCount - 1; col > 0; col -= 2) {\n\n                if (col == 6) col -= 1;\n\n                while (true) {\n\n                    for (var c = 0; c < 2; c += 1) {\n\n                        if (_modules[row][col - c] == null) {\n\n                            var dark = false;\n\n                            if (byteIndex < data.length) {\n                                dark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);\n                            }\n\n                            var mask = maskFunc(row, col - c);\n\n                            if (mask) {\n                                dark = !dark;\n                            }\n\n                            _modules[row][col - c] = dark;\n                            bitIndex -= 1;\n\n                            if (bitIndex == -1) {\n                                byteIndex += 1;\n                                bitIndex = 7;\n                            }\n                        }\n                    }\n\n                    row += inc;\n\n                    if (row < 0 || _moduleCount <= row) {\n                        row -= inc;\n                        inc = -inc;\n                        break;\n                    }\n                }\n            }\n        };\n\n        var createBytes = function(buffer, rsBlocks) {\n\n            var offset = 0;\n\n            var maxDcCount = 0;\n            var maxEcCount = 0;\n\n            var dcdata = new Array(rsBlocks.length);\n            var ecdata = new Array(rsBlocks.length);\n\n            for (var r = 0; r < rsBlocks.length; r += 1) {\n\n                var dcCount = rsBlocks[r].dataCount;\n                var ecCount = rsBlocks[r].totalCount - dcCount;\n\n                maxDcCount = Math.max(maxDcCount, dcCount);\n                maxEcCount = Math.max(maxEcCount, ecCount);\n\n                dcdata[r] = new Array(dcCount);\n\n                for (var i = 0; i < dcdata[r].length; i += 1) {\n                    dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n                }\n                offset += dcCount;\n\n                var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n                var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n\n                var modPoly = rawPoly.mod(rsPoly);\n                ecdata[r] = new Array(rsPoly.getLength() - 1);\n                for (var i = 0; i < ecdata[r].length; i += 1) {\n                    var modIndex = i + modPoly.getLength() - ecdata[r].length;\n                    ecdata[r][i] = (modIndex >= 0)? modPoly.get(modIndex) : 0;\n                }\n            }\n\n            var totalCodeCount = 0;\n            for (var i = 0; i < rsBlocks.length; i += 1) {\n                totalCodeCount += rsBlocks[i].totalCount;\n            }\n\n            var data = new Array(totalCodeCount);\n            var index = 0;\n\n            for (var i = 0; i < maxDcCount; i += 1) {\n                for (var r = 0; r < rsBlocks.length; r += 1) {\n                    if (i < dcdata[r].length) {\n                        data[index] = dcdata[r][i];\n                        index += 1;\n                    }\n                }\n            }\n\n            for (var i = 0; i < maxEcCount; i += 1) {\n                for (var r = 0; r < rsBlocks.length; r += 1) {\n                    if (i < ecdata[r].length) {\n                        data[index] = ecdata[r][i];\n                        index += 1;\n                    }\n                }\n            }\n\n            return data;\n        };\n\n        var createData = function(typeNumber, errorCorrectLevel, dataList) {\n\n            var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n\n            var buffer = qrBitBuffer();\n\n            for (var i = 0; i < dataList.length; i += 1) {\n                var data = dataList[i];\n                buffer.put(data.getMode(), 4);\n                buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber) );\n                data.write(buffer);\n            }\n\n            // calc num max data.\n            var totalDataCount = 0;\n            for (var i = 0; i < rsBlocks.length; i += 1) {\n                totalDataCount += rsBlocks[i].dataCount;\n            }\n\n            if (buffer.getLengthInBits() > totalDataCount * 8) {\n                throw new Error('code length overflow. ('\n                    + buffer.getLengthInBits()\n                    + '>'\n                    + totalDataCount * 8\n                    + ')');\n            }\n\n            // end code\n            if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n                buffer.put(0, 4);\n            }\n\n            // padding\n            while (buffer.getLengthInBits() % 8 != 0) {\n                buffer.putBit(false);\n            }\n\n            // padding\n            while (true) {\n\n                if (buffer.getLengthInBits() >= totalDataCount * 8) {\n                    break;\n                }\n                buffer.put(PAD0, 8);\n\n                if (buffer.getLengthInBits() >= totalDataCount * 8) {\n                    break;\n                }\n                buffer.put(PAD1, 8);\n            }\n\n            return createBytes(buffer, rsBlocks);\n        };\n\n        _this.addData = function(data) {\n            var newData = qr8BitByte(data);\n            _dataList.push(newData);\n            _dataCache = null;\n        };\n\n        _this.isDark = function(row, col) {\n            if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n                throw new Error(row + ',' + col);\n            }\n            return _modules[row][col];\n        };\n\n        _this.getModuleCount = function() {\n            return _moduleCount;\n        };\n\n        _this.make = function() {\n            makeImpl(false, getBestMaskPattern() );\n        };\n\n        _this.createTableTag = function(cellSize, margin) {\n\n            cellSize = cellSize || 2;\n            margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n            var qrHtml = '';\n\n            qrHtml += '<table style=\"';\n            qrHtml += ' border-width: 0px; border-style: none;';\n            qrHtml += ' border-collapse: collapse;';\n            qrHtml += ' padding: 0px; margin: ' + margin + 'px;';\n            qrHtml += '\">';\n            qrHtml += '<tbody>';\n\n            for (var r = 0; r < _this.getModuleCount(); r += 1) {\n\n                qrHtml += '<tr>';\n\n                for (var c = 0; c < _this.getModuleCount(); c += 1) {\n                    qrHtml += '<td style=\"';\n                    qrHtml += ' border-width: 0px; border-style: none;';\n                    qrHtml += ' border-collapse: collapse;';\n                    qrHtml += ' padding: 0px; margin: 0px;';\n                    qrHtml += ' width: ' + cellSize + 'px;';\n                    qrHtml += ' height: ' + cellSize + 'px;';\n                    qrHtml += ' background-color: ';\n                    qrHtml += _this.isDark(r, c)? '#000000' : '#ffffff';\n                    qrHtml += ';';\n                    qrHtml += '\"/>';\n                }\n\n                qrHtml += '</tr>';\n            }\n\n            qrHtml += '</tbody>';\n            qrHtml += '</table>';\n\n            return qrHtml;\n        };\n\n        _this.createImgTag = function(cellSize, margin) {\n\n            cellSize = cellSize || 2;\n            margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n            var size = _this.getModuleCount() * cellSize + margin * 2;\n            var min = margin;\n            var max = size - margin;\n\n            return createImgTag(size, size, function(x, y) {\n                if (min <= x && x < max && min <= y && y < max) {\n                    var c = Math.floor( (x - min) / cellSize);\n                    var r = Math.floor( (y - min) / cellSize);\n                    return _this.isDark(r, c)? 0 : 1;\n                } else {\n                    return 1;\n                }\n            } );\n        };\n\n        return _this;\n    };\n\n    //---------------------------------------------------------------------\n    // qrcode.stringToBytes\n    //---------------------------------------------------------------------\n\n    qrcode.stringToBytes = function(s) {\n        var bytes = new Array();\n        for (var i = 0; i < s.length; i += 1) {\n            var c = s.charCodeAt(i);\n            bytes.push(c & 0xff);\n        }\n        return bytes;\n    };\n\n    //---------------------------------------------------------------------\n    // qrcode.createStringToBytes\n    //---------------------------------------------------------------------\n\n    /**\n     * @param unicodeData base64 string of byte array.\n     * [16bit Unicode],[16bit Bytes], ...\n     * @param numChars\n     */\n    qrcode.createStringToBytes = function(unicodeData, numChars) {\n\n        // create conversion map.\n\n        var unicodeMap = function() {\n\n            var bin = base64DecodeInputStream(unicodeData);\n            var read = function() {\n                var b = bin.read();\n                if (b == -1) throw new Error();\n                return b;\n            };\n\n            var count = 0;\n            var unicodeMap = {};\n            while (true) {\n                var b0 = bin.read();\n                if (b0 == -1) break;\n                var b1 = read();\n                var b2 = read();\n                var b3 = read();\n                var k = String.fromCharCode( (b0 << 8) | b1);\n                var v = (b2 << 8) | b3;\n                unicodeMap[k] = v;\n                count += 1;\n            }\n            if (count != numChars) {\n                throw new Error(count + ' != ' + numChars);\n            }\n\n            return unicodeMap;\n        }();\n\n        var unknownChar = '?'.charCodeAt(0);\n\n        return function(s) {\n            var bytes = new Array();\n            for (var i = 0; i < s.length; i += 1) {\n                var c = s.charCodeAt(i);\n                if (c < 128) {\n                    bytes.push(c);\n                } else {\n                    var b = unicodeMap[s.charAt(i)];\n                    if (typeof b == 'number') {\n                        if ( (b & 0xff) == b) {\n                            // 1byte\n                            bytes.push(b);\n                        } else {\n                            // 2bytes\n                            bytes.push(b >>> 8);\n                            bytes.push(b & 0xff);\n                        }\n                    } else {\n                        bytes.push(unknownChar);\n                    }\n                }\n            }\n            return bytes;\n        };\n    };\n\n    //---------------------------------------------------------------------\n    // QRMode\n    //---------------------------------------------------------------------\n\n    var QRMode = {\n        MODE_NUMBER :       1 << 0,\n        MODE_ALPHA_NUM :    1 << 1,\n        MODE_8BIT_BYTE :    1 << 2,\n        MODE_KANJI :        1 << 3\n    };\n\n    //---------------------------------------------------------------------\n    // QRErrorCorrectLevel\n    //---------------------------------------------------------------------\n\n    var QRErrorCorrectLevel = {\n        L : 1,\n        M : 0,\n        Q : 3,\n        H : 2\n    };\n\n    //---------------------------------------------------------------------\n    // QRMaskPattern\n    //---------------------------------------------------------------------\n\n    var QRMaskPattern = {\n        PATTERN000 : 0,\n        PATTERN001 : 1,\n        PATTERN010 : 2,\n        PATTERN011 : 3,\n        PATTERN100 : 4,\n        PATTERN101 : 5,\n        PATTERN110 : 6,\n        PATTERN111 : 7\n    };\n\n    //---------------------------------------------------------------------\n    // QRUtil\n    //---------------------------------------------------------------------\n\n    var QRUtil = function() {\n\n        var PATTERN_POSITION_TABLE = [\n            [],\n            [6, 18],\n            [6, 22],\n            [6, 26],\n            [6, 30],\n            [6, 34],\n            [6, 22, 38],\n            [6, 24, 42],\n            [6, 26, 46],\n            [6, 28, 50],\n            [6, 30, 54],\n            [6, 32, 58],\n            [6, 34, 62],\n            [6, 26, 46, 66],\n            [6, 26, 48, 70],\n            [6, 26, 50, 74],\n            [6, 30, 54, 78],\n            [6, 30, 56, 82],\n            [6, 30, 58, 86],\n            [6, 34, 62, 90],\n            [6, 28, 50, 72, 94],\n            [6, 26, 50, 74, 98],\n            [6, 30, 54, 78, 102],\n            [6, 28, 54, 80, 106],\n            [6, 32, 58, 84, 110],\n            [6, 30, 58, 86, 114],\n            [6, 34, 62, 90, 118],\n            [6, 26, 50, 74, 98, 122],\n            [6, 30, 54, 78, 102, 126],\n            [6, 26, 52, 78, 104, 130],\n            [6, 30, 56, 82, 108, 134],\n            [6, 34, 60, 86, 112, 138],\n            [6, 30, 58, 86, 114, 142],\n            [6, 34, 62, 90, 118, 146],\n            [6, 30, 54, 78, 102, 126, 150],\n            [6, 24, 50, 76, 102, 128, 154],\n            [6, 28, 54, 80, 106, 132, 158],\n            [6, 32, 58, 84, 110, 136, 162],\n            [6, 26, 54, 82, 110, 138, 166],\n            [6, 30, 58, 86, 114, 142, 170]\n        ];\n        var G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);\n        var G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);\n        var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\n\n        var _this = {};\n\n        var getBCHDigit = function(data) {\n            var digit = 0;\n            while (data != 0) {\n                digit += 1;\n                data >>>= 1;\n            }\n            return digit;\n        };\n\n        _this.getBCHTypeInfo = function(data) {\n            var d = data << 10;\n            while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n                d ^= (G15 << (getBCHDigit(d) - getBCHDigit(G15) ) );\n            }\n            return ( (data << 10) | d) ^ G15_MASK;\n        };\n\n        _this.getBCHTypeNumber = function(data) {\n            var d = data << 12;\n            while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n                d ^= (G18 << (getBCHDigit(d) - getBCHDigit(G18) ) );\n            }\n            return (data << 12) | d;\n        };\n\n        _this.getPatternPosition = function(typeNumber) {\n            return PATTERN_POSITION_TABLE[typeNumber - 1];\n        };\n\n        _this.getMaskFunction = function(maskPattern) {\n\n            switch (maskPattern) {\n\n            case QRMaskPattern.PATTERN000 :\n                return function(i, j) { return (i + j) % 2 == 0; };\n            case QRMaskPattern.PATTERN001 :\n                return function(i, j) { return i % 2 == 0; };\n            case QRMaskPattern.PATTERN010 :\n                return function(i, j) { return j % 3 == 0; };\n            case QRMaskPattern.PATTERN011 :\n                return function(i, j) { return (i + j) % 3 == 0; };\n            case QRMaskPattern.PATTERN100 :\n                return function(i, j) { return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0; };\n            case QRMaskPattern.PATTERN101 :\n                return function(i, j) { return (i * j) % 2 + (i * j) % 3 == 0; };\n            case QRMaskPattern.PATTERN110 :\n                return function(i, j) { return ( (i * j) % 2 + (i * j) % 3) % 2 == 0; };\n            case QRMaskPattern.PATTERN111 :\n                return function(i, j) { return ( (i * j) % 3 + (i + j) % 2) % 2 == 0; };\n\n            default :\n                throw new Error('bad maskPattern:' + maskPattern);\n            }\n        };\n\n        _this.getErrorCorrectPolynomial = function(errorCorrectLength) {\n            var a = qrPolynomial([1], 0);\n            for (var i = 0; i < errorCorrectLength; i += 1) {\n                a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0) );\n            }\n            return a;\n        };\n\n        _this.getLengthInBits = function(mode, type) {\n\n            if (1 <= type && type < 10) {\n\n                // 1 - 9\n\n                switch(mode) {\n                case QRMode.MODE_NUMBER     : return 10;\n                case QRMode.MODE_ALPHA_NUM  : return 9;\n                case QRMode.MODE_8BIT_BYTE  : return 8;\n                case QRMode.MODE_KANJI      : return 8;\n                default :\n                    throw new Error('mode:' + mode);\n                }\n\n            } else if (type < 27) {\n\n                // 10 - 26\n\n                switch(mode) {\n                case QRMode.MODE_NUMBER     : return 12;\n                case QRMode.MODE_ALPHA_NUM  : return 11;\n                case QRMode.MODE_8BIT_BYTE  : return 16;\n                case QRMode.MODE_KANJI      : return 10;\n                default :\n                    throw new Error('mode:' + mode);\n                }\n\n            } else if (type < 41) {\n\n                // 27 - 40\n\n                switch(mode) {\n                case QRMode.MODE_NUMBER     : return 14;\n                case QRMode.MODE_ALPHA_NUM  : return 13;\n                case QRMode.MODE_8BIT_BYTE  : return 16;\n                case QRMode.MODE_KANJI      : return 12;\n                default :\n                    throw new Error('mode:' + mode);\n                }\n\n            } else {\n                throw new Error('type:' + type);\n            }\n        };\n\n        _this.getLostPoint = function(qrcode) {\n\n            var moduleCount = qrcode.getModuleCount();\n\n            var lostPoint = 0;\n\n            // LEVEL1\n\n            for (var row = 0; row < moduleCount; row += 1) {\n                for (var col = 0; col < moduleCount; col += 1) {\n\n                    var sameCount = 0;\n                    var dark = qrcode.isDark(row, col);\n\n                    for (var r = -1; r <= 1; r += 1) {\n\n                        if (row + r < 0 || moduleCount <= row + r) {\n                            continue;\n                        }\n\n                        for (var c = -1; c <= 1; c += 1) {\n\n                            if (col + c < 0 || moduleCount <= col + c) {\n                                continue;\n                            }\n\n                            if (r == 0 && c == 0) {\n                                continue;\n                            }\n\n                            if (dark == qrcode.isDark(row + r, col + c) ) {\n                                sameCount += 1;\n                            }\n                        }\n                    }\n\n                    if (sameCount > 5) {\n                        lostPoint += (3 + sameCount - 5);\n                    }\n                }\n            };\n\n            // LEVEL2\n\n            for (var row = 0; row < moduleCount - 1; row += 1) {\n                for (var col = 0; col < moduleCount - 1; col += 1) {\n                    var count = 0;\n                    if (qrcode.isDark(row, col) ) count += 1;\n                    if (qrcode.isDark(row + 1, col) ) count += 1;\n                    if (qrcode.isDark(row, col + 1) ) count += 1;\n                    if (qrcode.isDark(row + 1, col + 1) ) count += 1;\n                    if (count == 0 || count == 4) {\n                        lostPoint += 3;\n                    }\n                }\n            }\n\n            // LEVEL3\n\n            for (var row = 0; row < moduleCount; row += 1) {\n                for (var col = 0; col < moduleCount - 6; col += 1) {\n                    if (qrcode.isDark(row, col)\n                            && !qrcode.isDark(row, col + 1)\n                            &&  qrcode.isDark(row, col + 2)\n                            &&  qrcode.isDark(row, col + 3)\n                            &&  qrcode.isDark(row, col + 4)\n                            && !qrcode.isDark(row, col + 5)\n                            &&  qrcode.isDark(row, col + 6) ) {\n                        lostPoint += 40;\n                    }\n                }\n            }\n\n            for (var col = 0; col < moduleCount; col += 1) {\n                for (var row = 0; row < moduleCount - 6; row += 1) {\n                    if (qrcode.isDark(row, col)\n                            && !qrcode.isDark(row + 1, col)\n                            &&  qrcode.isDark(row + 2, col)\n                            &&  qrcode.isDark(row + 3, col)\n                            &&  qrcode.isDark(row + 4, col)\n                            && !qrcode.isDark(row + 5, col)\n                            &&  qrcode.isDark(row + 6, col) ) {\n                        lostPoint += 40;\n                    }\n                }\n            }\n\n            // LEVEL4\n\n            var darkCount = 0;\n\n            for (var col = 0; col < moduleCount; col += 1) {\n                for (var row = 0; row < moduleCount; row += 1) {\n                    if (qrcode.isDark(row, col) ) {\n                        darkCount += 1;\n                    }\n                }\n            }\n\n            var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n            lostPoint += ratio * 10;\n\n            return lostPoint;\n        };\n\n        return _this;\n    }();\n\n    //---------------------------------------------------------------------\n    // QRMath\n    //---------------------------------------------------------------------\n\n    var QRMath = function() {\n\n        var EXP_TABLE = new Array(256);\n        var LOG_TABLE = new Array(256);\n\n        // initialize tables\n        for (var i = 0; i < 8; i += 1) {\n            EXP_TABLE[i] = 1 << i;\n        }\n        for (var i = 8; i < 256; i += 1) {\n            EXP_TABLE[i] = EXP_TABLE[i - 4]\n                ^ EXP_TABLE[i - 5]\n                ^ EXP_TABLE[i - 6]\n                ^ EXP_TABLE[i - 8];\n        }\n        for (var i = 0; i < 255; i += 1) {\n            LOG_TABLE[EXP_TABLE[i] ] = i;\n        }\n\n        var _this = {};\n\n        _this.glog = function(n) {\n\n            if (n < 1) {\n                throw new Error('glog(' + n + ')');\n            }\n\n            return LOG_TABLE[n];\n        };\n\n        _this.gexp = function(n) {\n\n            while (n < 0) {\n                n += 255;\n            }\n\n            while (n >= 256) {\n                n -= 255;\n            }\n\n            return EXP_TABLE[n];\n        };\n\n        return _this;\n    }();\n\n    //---------------------------------------------------------------------\n    // qrPolynomial\n    //---------------------------------------------------------------------\n\n    function qrPolynomial(num, shift) {\n\n        if (typeof num.length == 'undefined') {\n            throw new Error(num.length + '/' + shift);\n        }\n\n        var _num = function() {\n            var offset = 0;\n            while (offset < num.length && num[offset] == 0) {\n                offset += 1;\n            }\n            var _num = new Array(num.length - offset + shift);\n            for (var i = 0; i < num.length - offset; i += 1) {\n                _num[i] = num[i + offset];\n            }\n            return _num;\n        }();\n\n        var _this = {};\n\n        _this.get = function(index) {\n            return _num[index];\n        };\n\n        _this.getLength = function() {\n            return _num.length;\n        };\n\n        _this.multiply = function(e) {\n\n            var num = new Array(_this.getLength() + e.getLength() - 1);\n\n            for (var i = 0; i < _this.getLength(); i += 1) {\n                for (var j = 0; j < e.getLength(); j += 1) {\n                    num[i + j] ^= QRMath.gexp(QRMath.glog(_this.get(i) ) + QRMath.glog(e.get(j) ) );\n                }\n            }\n\n            return qrPolynomial(num, 0);\n        };\n\n        _this.mod = function(e) {\n\n            if (_this.getLength() - e.getLength() < 0) {\n                return _this;\n            }\n\n            var ratio = QRMath.glog(_this.get(0) ) - QRMath.glog(e.get(0) );\n\n            var num = new Array(_this.getLength() );\n            for (var i = 0; i < _this.getLength(); i += 1) {\n                num[i] = _this.get(i);\n            }\n\n            for (var i = 0; i < e.getLength(); i += 1) {\n                num[i] ^= QRMath.gexp(QRMath.glog(e.get(i) ) + ratio);\n            }\n\n            // recursive call\n            return qrPolynomial(num, 0).mod(e);\n        };\n\n        return _this;\n    };\n\n    //---------------------------------------------------------------------\n    // QRRSBlock\n    //---------------------------------------------------------------------\n\n    var QRRSBlock = function() {\n\n        var RS_BLOCK_TABLE = [\n\n            // L\n            // M\n            // Q\n            // H\n\n            // 1\n            [1, 26, 19],\n            [1, 26, 16],\n            [1, 26, 13],\n            [1, 26, 9],\n\n            // 2\n            [1, 44, 34],\n            [1, 44, 28],\n            [1, 44, 22],\n            [1, 44, 16],\n\n            // 3\n            [1, 70, 55],\n            [1, 70, 44],\n            [2, 35, 17],\n            [2, 35, 13],\n\n            // 4\n            [1, 100, 80],\n            [2, 50, 32],\n            [2, 50, 24],\n            [4, 25, 9],\n\n            // 5\n            [1, 134, 108],\n            [2, 67, 43],\n            [2, 33, 15, 2, 34, 16],\n            [2, 33, 11, 2, 34, 12],\n\n            // 6\n            [2, 86, 68],\n            [4, 43, 27],\n            [4, 43, 19],\n            [4, 43, 15],\n\n            // 7\n            [2, 98, 78],\n            [4, 49, 31],\n            [2, 32, 14, 4, 33, 15],\n            [4, 39, 13, 1, 40, 14],\n\n            // 8\n            [2, 121, 97],\n            [2, 60, 38, 2, 61, 39],\n            [4, 40, 18, 2, 41, 19],\n            [4, 40, 14, 2, 41, 15],\n\n            // 9\n            [2, 146, 116],\n            [3, 58, 36, 2, 59, 37],\n            [4, 36, 16, 4, 37, 17],\n            [4, 36, 12, 4, 37, 13],\n\n            // 10\n            [2, 86, 68, 2, 87, 69],\n            [4, 69, 43, 1, 70, 44],\n            [6, 43, 19, 2, 44, 20],\n            [6, 43, 15, 2, 44, 16],\n\n            // 11\n            [4, 101, 81],\n            [1, 80, 50, 4, 81, 51],\n            [4, 50, 22, 4, 51, 23],\n            [3, 36, 12, 8, 37, 13],\n\n            // 12\n            [2, 116, 92, 2, 117, 93],\n            [6, 58, 36, 2, 59, 37],\n            [4, 46, 20, 6, 47, 21],\n            [7, 42, 14, 4, 43, 15],\n\n            // 13\n            [4, 133, 107],\n            [8, 59, 37, 1, 60, 38],\n            [8, 44, 20, 4, 45, 21],\n            [12, 33, 11, 4, 34, 12],\n\n            // 14\n            [3, 145, 115, 1, 146, 116],\n            [4, 64, 40, 5, 65, 41],\n            [11, 36, 16, 5, 37, 17],\n            [11, 36, 12, 5, 37, 13],\n\n            // 15\n            [5, 109, 87, 1, 110, 88],\n            [5, 65, 41, 5, 66, 42],\n            [5, 54, 24, 7, 55, 25],\n            [11, 36, 12],\n\n            // 16\n            [5, 122, 98, 1, 123, 99],\n            [7, 73, 45, 3, 74, 46],\n            [15, 43, 19, 2, 44, 20],\n            [3, 45, 15, 13, 46, 16],\n\n            // 17\n            [1, 135, 107, 5, 136, 108],\n            [10, 74, 46, 1, 75, 47],\n            [1, 50, 22, 15, 51, 23],\n            [2, 42, 14, 17, 43, 15],\n\n            // 18\n            [5, 150, 120, 1, 151, 121],\n            [9, 69, 43, 4, 70, 44],\n            [17, 50, 22, 1, 51, 23],\n            [2, 42, 14, 19, 43, 15],\n\n            // 19\n            [3, 141, 113, 4, 142, 114],\n            [3, 70, 44, 11, 71, 45],\n            [17, 47, 21, 4, 48, 22],\n            [9, 39, 13, 16, 40, 14],\n\n            // 20\n            [3, 135, 107, 5, 136, 108],\n            [3, 67, 41, 13, 68, 42],\n            [15, 54, 24, 5, 55, 25],\n            [15, 43, 15, 10, 44, 16],\n\n            // 21\n            [4, 144, 116, 4, 145, 117],\n            [17, 68, 42],\n            [17, 50, 22, 6, 51, 23],\n            [19, 46, 16, 6, 47, 17],\n\n            // 22\n            [2, 139, 111, 7, 140, 112],\n            [17, 74, 46],\n            [7, 54, 24, 16, 55, 25],\n            [34, 37, 13],\n\n            // 23\n            [4, 151, 121, 5, 152, 122],\n            [4, 75, 47, 14, 76, 48],\n            [11, 54, 24, 14, 55, 25],\n            [16, 45, 15, 14, 46, 16],\n\n            // 24\n            [6, 147, 117, 4, 148, 118],\n            [6, 73, 45, 14, 74, 46],\n            [11, 54, 24, 16, 55, 25],\n            [30, 46, 16, 2, 47, 17],\n\n            // 25\n            [8, 132, 106, 4, 133, 107],\n            [8, 75, 47, 13, 76, 48],\n            [7, 54, 24, 22, 55, 25],\n            [22, 45, 15, 13, 46, 16],\n\n            // 26\n            [10, 142, 114, 2, 143, 115],\n            [19, 74, 46, 4, 75, 47],\n            [28, 50, 22, 6, 51, 23],\n            [33, 46, 16, 4, 47, 17],\n\n            // 27\n            [8, 152, 122, 4, 153, 123],\n            [22, 73, 45, 3, 74, 46],\n            [8, 53, 23, 26, 54, 24],\n            [12, 45, 15, 28, 46, 16],\n\n            // 28\n            [3, 147, 117, 10, 148, 118],\n            [3, 73, 45, 23, 74, 46],\n            [4, 54, 24, 31, 55, 25],\n            [11, 45, 15, 31, 46, 16],\n\n            // 29\n            [7, 146, 116, 7, 147, 117],\n            [21, 73, 45, 7, 74, 46],\n            [1, 53, 23, 37, 54, 24],\n            [19, 45, 15, 26, 46, 16],\n\n            // 30\n            [5, 145, 115, 10, 146, 116],\n            [19, 75, 47, 10, 76, 48],\n            [15, 54, 24, 25, 55, 25],\n            [23, 45, 15, 25, 46, 16],\n\n            // 31\n            [13, 145, 115, 3, 146, 116],\n            [2, 74, 46, 29, 75, 47],\n            [42, 54, 24, 1, 55, 25],\n            [23, 45, 15, 28, 46, 16],\n\n            // 32\n            [17, 145, 115],\n            [10, 74, 46, 23, 75, 47],\n            [10, 54, 24, 35, 55, 25],\n            [19, 45, 15, 35, 46, 16],\n\n            // 33\n            [17, 145, 115, 1, 146, 116],\n            [14, 74, 46, 21, 75, 47],\n            [29, 54, 24, 19, 55, 25],\n            [11, 45, 15, 46, 46, 16],\n\n            // 34\n            [13, 145, 115, 6, 146, 116],\n            [14, 74, 46, 23, 75, 47],\n            [44, 54, 24, 7, 55, 25],\n            [59, 46, 16, 1, 47, 17],\n\n            // 35\n            [12, 151, 121, 7, 152, 122],\n            [12, 75, 47, 26, 76, 48],\n            [39, 54, 24, 14, 55, 25],\n            [22, 45, 15, 41, 46, 16],\n\n            // 36\n            [6, 151, 121, 14, 152, 122],\n            [6, 75, 47, 34, 76, 48],\n            [46, 54, 24, 10, 55, 25],\n            [2, 45, 15, 64, 46, 16],\n\n            // 37\n            [17, 152, 122, 4, 153, 123],\n            [29, 74, 46, 14, 75, 47],\n            [49, 54, 24, 10, 55, 25],\n            [24, 45, 15, 46, 46, 16],\n\n            // 38\n            [4, 152, 122, 18, 153, 123],\n            [13, 74, 46, 32, 75, 47],\n            [48, 54, 24, 14, 55, 25],\n            [42, 45, 15, 32, 46, 16],\n\n            // 39\n            [20, 147, 117, 4, 148, 118],\n            [40, 75, 47, 7, 76, 48],\n            [43, 54, 24, 22, 55, 25],\n            [10, 45, 15, 67, 46, 16],\n\n            // 40\n            [19, 148, 118, 6, 149, 119],\n            [18, 75, 47, 31, 76, 48],\n            [34, 54, 24, 34, 55, 25],\n            [20, 45, 15, 61, 46, 16]\n        ];\n\n        var qrRSBlock = function(totalCount, dataCount) {\n            var _this = {};\n            _this.totalCount = totalCount;\n            _this.dataCount = dataCount;\n            return _this;\n        };\n\n        var _this = {};\n\n        var getRsBlockTable = function(typeNumber, errorCorrectLevel) {\n\n            switch(errorCorrectLevel) {\n            case QRErrorCorrectLevel.L :\n                return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n            case QRErrorCorrectLevel.M :\n                return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n            case QRErrorCorrectLevel.Q :\n                return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n            case QRErrorCorrectLevel.H :\n                return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n            default :\n                return undefined;\n            }\n        };\n\n        _this.getRSBlocks = function(typeNumber, errorCorrectLevel) {\n\n            var rsBlock = getRsBlockTable(typeNumber, errorCorrectLevel);\n\n            if (typeof rsBlock == 'undefined') {\n                throw new Error('bad rs block @ typeNumber:' + typeNumber +\n                        '/errorCorrectLevel:' + errorCorrectLevel);\n            }\n\n            var length = rsBlock.length / 3;\n\n            var list = new Array();\n\n            for (var i = 0; i < length; i += 1) {\n\n                var count = rsBlock[i * 3 + 0];\n                var totalCount = rsBlock[i * 3 + 1];\n                var dataCount = rsBlock[i * 3 + 2];\n\n                for (var j = 0; j < count; j += 1) {\n                    list.push(qrRSBlock(totalCount, dataCount) );\n                }\n            }\n\n            return list;\n        };\n\n        return _this;\n    }();\n\n    //---------------------------------------------------------------------\n    // qrBitBuffer\n    //---------------------------------------------------------------------\n\n    var qrBitBuffer = function() {\n\n        var _buffer = new Array();\n        var _length = 0;\n\n        var _this = {};\n\n        _this.getBuffer = function() {\n            return _buffer;\n        };\n\n        _this.get = function(index) {\n            var bufIndex = Math.floor(index / 8);\n            return ( (_buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;\n        };\n\n        _this.put = function(num, length) {\n            for (var i = 0; i < length; i += 1) {\n                _this.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);\n            }\n        };\n\n        _this.getLengthInBits = function() {\n            return _length;\n        };\n\n        _this.putBit = function(bit) {\n\n            var bufIndex = Math.floor(_length / 8);\n            if (_buffer.length <= bufIndex) {\n                _buffer.push(0);\n            }\n\n            if (bit) {\n                _buffer[bufIndex] |= (0x80 >>> (_length % 8) );\n            }\n\n            _length += 1;\n        };\n\n        return _this;\n    };\n\n    //---------------------------------------------------------------------\n    // qr8BitByte\n    //---------------------------------------------------------------------\n\n    var qr8BitByte = function(data) {\n\n        var _mode = QRMode.MODE_8BIT_BYTE;\n        var _data = data;\n        var _bytes = qrcode.stringToBytes(data);\n\n        var _this = {};\n\n        _this.getMode = function() {\n            return _mode;\n        };\n\n        _this.getLength = function(buffer) {\n            return _bytes.length;\n        };\n\n        _this.write = function(buffer) {\n            for (var i = 0; i < _bytes.length; i += 1) {\n                buffer.put(_bytes[i], 8);\n            }\n        };\n\n        return _this;\n    };\n\n    //=====================================================================\n    // GIF Support etc.\n    //\n\n    //---------------------------------------------------------------------\n    // byteArrayOutputStream\n    //---------------------------------------------------------------------\n\n    var byteArrayOutputStream = function() {\n\n        var _bytes = new Array();\n\n        var _this = {};\n\n        _this.writeByte = function(b) {\n            _bytes.push(b & 0xff);\n        };\n\n        _this.writeShort = function(i) {\n            _this.writeByte(i);\n            _this.writeByte(i >>> 8);\n        };\n\n        _this.writeBytes = function(b, off, len) {\n            off = off || 0;\n            len = len || b.length;\n            for (var i = 0; i < len; i += 1) {\n                _this.writeByte(b[i + off]);\n            }\n        };\n\n        _this.writeString = function(s) {\n            for (var i = 0; i < s.length; i += 1) {\n                _this.writeByte(s.charCodeAt(i) );\n            }\n        };\n\n        _this.toByteArray = function() {\n            return _bytes;\n        };\n\n        _this.toString = function() {\n            var s = '';\n            s += '[';\n            for (var i = 0; i < _bytes.length; i += 1) {\n                if (i > 0) {\n                    s += ',';\n                }\n                s += _bytes[i];\n            }\n            s += ']';\n            return s;\n        };\n\n        return _this;\n    };\n\n    //---------------------------------------------------------------------\n    // base64EncodeOutputStream\n    //---------------------------------------------------------------------\n\n    var base64EncodeOutputStream = function() {\n\n        var _buffer = 0;\n        var _buflen = 0;\n        var _length = 0;\n        var _base64 = '';\n\n        var _this = {};\n\n        var writeEncoded = function(b) {\n            _base64 += String.fromCharCode(encode(b & 0x3f) );\n        };\n\n        var encode = function(n) {\n            if (n < 0) {\n                // error.\n            } else if (n < 26) {\n                return 0x41 + n;\n            } else if (n < 52) {\n                return 0x61 + (n - 26);\n            } else if (n < 62) {\n                return 0x30 + (n - 52);\n            } else if (n == 62) {\n                return 0x2b;\n            } else if (n == 63) {\n                return 0x2f;\n            }\n            throw new Error('n:' + n);\n        };\n\n        _this.writeByte = function(n) {\n\n            _buffer = (_buffer << 8) | (n & 0xff);\n            _buflen += 8;\n            _length += 1;\n\n            while (_buflen >= 6) {\n                writeEncoded(_buffer >>> (_buflen - 6) );\n                _buflen -= 6;\n            }\n        };\n\n        _this.flush = function() {\n\n            if (_buflen > 0) {\n                writeEncoded(_buffer << (6 - _buflen) );\n                _buffer = 0;\n                _buflen = 0;\n            }\n\n            if (_length % 3 != 0) {\n                // padding\n                var padlen = 3 - _length % 3;\n                for (var i = 0; i < padlen; i += 1) {\n                    _base64 += '=';\n                }\n            }\n        };\n\n        _this.toString = function() {\n            return _base64;\n        };\n\n        return _this;\n    };\n\n    //---------------------------------------------------------------------\n    // base64DecodeInputStream\n    //---------------------------------------------------------------------\n\n    var base64DecodeInputStream = function(str) {\n\n        var _str = str;\n        var _pos = 0;\n        var _buffer = 0;\n        var _buflen = 0;\n\n        var _this = {};\n\n        _this.read = function() {\n\n            while (_buflen < 8) {\n\n                if (_pos >= _str.length) {\n                    if (_buflen == 0) {\n                        return -1;\n                    }\n                    throw new Error('unexpected end of file./' + _buflen);\n                }\n\n                var c = _str.charAt(_pos);\n                _pos += 1;\n\n                if (c == '=') {\n                    _buflen = 0;\n                    return -1;\n                } else if (c.match(/^\\s$/) ) {\n                    // ignore if whitespace.\n                    continue;\n                }\n\n                _buffer = (_buffer << 6) | decode(c.charCodeAt(0) );\n                _buflen += 6;\n            }\n\n            var n = (_buffer >>> (_buflen - 8) ) & 0xff;\n            _buflen -= 8;\n            return n;\n        };\n\n        var decode = function(c) {\n            if (0x41 <= c && c <= 0x5a) {\n                return c - 0x41;\n            } else if (0x61 <= c && c <= 0x7a) {\n                return c - 0x61 + 26;\n            } else if (0x30 <= c && c <= 0x39) {\n                return c - 0x30 + 52;\n            } else if (c == 0x2b) {\n                return 62;\n            } else if (c == 0x2f) {\n                return 63;\n            } else {\n                throw new Error('c:' + c);\n            }\n        };\n\n        return _this;\n    };\n\n    //---------------------------------------------------------------------\n    // gifImage (B/W)\n    //---------------------------------------------------------------------\n\n    var gifImage = function(width, height) {\n\n        var _width = width;\n        var _height = height;\n        var _data = new Array(width * height);\n\n        var _this = {};\n\n        _this.setPixel = function(x, y, pixel) {\n            _data[y * _width + x] = pixel;\n        };\n\n        _this.write = function(out) {\n\n            //---------------------------------\n            // GIF Signature\n\n            out.writeString('GIF87a');\n\n            //---------------------------------\n            // Screen Descriptor\n\n            out.writeShort(_width);\n            out.writeShort(_height);\n\n            out.writeByte(0x80); // 2bit\n            out.writeByte(0);\n            out.writeByte(0);\n\n            //---------------------------------\n            // Global Color Map\n\n            // black\n            out.writeByte(0x00);\n            out.writeByte(0x00);\n            out.writeByte(0x00);\n\n            // white\n            out.writeByte(0xff);\n            out.writeByte(0xff);\n            out.writeByte(0xff);\n\n            //---------------------------------\n            // Image Descriptor\n\n            out.writeString(',');\n            out.writeShort(0);\n            out.writeShort(0);\n            out.writeShort(_width);\n            out.writeShort(_height);\n            out.writeByte(0);\n\n            //---------------------------------\n            // Local Color Map\n\n            //---------------------------------\n            // Raster Data\n\n            var lzwMinCodeSize = 2;\n            var raster = getLZWRaster(lzwMinCodeSize);\n\n            out.writeByte(lzwMinCodeSize);\n\n            var offset = 0;\n\n            while (raster.length - offset > 255) {\n                out.writeByte(255);\n                out.writeBytes(raster, offset, 255);\n                offset += 255;\n            }\n\n            out.writeByte(raster.length - offset);\n            out.writeBytes(raster, offset, raster.length - offset);\n            out.writeByte(0x00);\n\n            //---------------------------------\n            // GIF Terminator\n            out.writeString(';');\n        };\n\n        var bitOutputStream = function(out) {\n\n            var _out = out;\n            var _bitLength = 0;\n            var _bitBuffer = 0;\n\n            var _this = {};\n\n            _this.write = function(data, length) {\n\n                if ( (data >>> length) != 0) {\n                    throw new Error('length over');\n                }\n\n                while (_bitLength + length >= 8) {\n                    _out.writeByte(0xff & ( (data << _bitLength) | _bitBuffer) );\n                    length -= (8 - _bitLength);\n                    data >>>= (8 - _bitLength);\n                    _bitBuffer = 0;\n                    _bitLength = 0;\n                }\n\n                _bitBuffer = (data << _bitLength) | _bitBuffer;\n                _bitLength = _bitLength + length;\n            };\n\n            _this.flush = function() {\n                if (_bitLength > 0) {\n                    _out.writeByte(_bitBuffer);\n                }\n            };\n\n            return _this;\n        };\n\n        var getLZWRaster = function(lzwMinCodeSize) {\n\n            var clearCode = 1 << lzwMinCodeSize;\n            var endCode = (1 << lzwMinCodeSize) + 1;\n            var bitLength = lzwMinCodeSize + 1;\n\n            // Setup LZWTable\n            var table = lzwTable();\n\n            for (var i = 0; i < clearCode; i += 1) {\n                table.add(String.fromCharCode(i) );\n            }\n            table.add(String.fromCharCode(clearCode) );\n            table.add(String.fromCharCode(endCode) );\n\n            var byteOut = byteArrayOutputStream();\n            var bitOut = bitOutputStream(byteOut);\n\n            // clear code\n            bitOut.write(clearCode, bitLength);\n\n            var dataIndex = 0;\n\n            var s = String.fromCharCode(_data[dataIndex]);\n            dataIndex += 1;\n\n            while (dataIndex < _data.length) {\n\n                var c = String.fromCharCode(_data[dataIndex]);\n                dataIndex += 1;\n\n                if (table.contains(s + c) ) {\n\n                    s = s + c;\n\n                } else {\n\n                    bitOut.write(table.indexOf(s), bitLength);\n\n                    if (table.size() < 0xfff) {\n\n                        if (table.size() == (1 << bitLength) ) {\n                            bitLength += 1;\n                        }\n\n                        table.add(s + c);\n                    }\n\n                    s = c;\n                }\n            }\n\n            bitOut.write(table.indexOf(s), bitLength);\n\n            // end code\n            bitOut.write(endCode, bitLength);\n\n            bitOut.flush();\n\n            return byteOut.toByteArray();\n        };\n\n        var lzwTable = function() {\n\n            var _map = {};\n            var _size = 0;\n\n            var _this = {};\n\n            _this.add = function(key) {\n                if (_this.contains(key) ) {\n                    throw new Error('dup key:' + key);\n                }\n                _map[key] = _size;\n                _size += 1;\n            };\n\n            _this.size = function() {\n                return _size;\n            };\n\n            _this.indexOf = function(key) {\n                return _map[key];\n            };\n\n            _this.contains = function(key) {\n                return typeof _map[key] != 'undefined';\n            };\n\n            return _this;\n        };\n\n        return _this;\n    };\n\n    var createImgTag = function(width, height, getPixel, alt) {\n\n        var gif = gifImage(width, height);\n        for (var y = 0; y < height; y += 1) {\n            for (var x = 0; x < width; x += 1) {\n                gif.setPixel(x, y, getPixel(x, y) );\n            }\n        }\n\n        var b = byteArrayOutputStream();\n        gif.write(b);\n\n        var base64 = base64EncodeOutputStream();\n        var bytes = b.toByteArray();\n        for (var i = 0; i < bytes.length; i += 1) {\n            base64.writeByte(bytes[i]);\n        }\n        base64.flush();\n\n        var img = '';\n        img += '<img';\n        img += '\\u0020src=\"';\n        img += 'data:image/gif;base64,';\n        img += base64;\n        img += '\"';\n        img += '\\u0020width=\"';\n        img += width;\n        img += '\"';\n        img += '\\u0020height=\"';\n        img += height;\n        img += '\"';\n        if (alt) {\n            img += '\\u0020alt=\"';\n            img += alt;\n            img += '\"';\n        }\n        img += '/>';\n\n        return img;\n    };\n\n    //---------------------------------------------------------------------\n    // returns qrcode function.\n\n    return qrcode;\n}();\n\n\n}());\n"]}