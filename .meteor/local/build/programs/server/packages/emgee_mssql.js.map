{"version":3,"sources":["emgee:mssql/mssql.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,+B;;AAEA,S;;AAEA,iB;;AAEA,iC;AACA,sC;AACA,0C;AACA,gD;AACA,Q;AACA,uF;AACA,sD;AACA,K;AACA,C;;;;AAIA,mC;;AAEA,uC;AACA,O;AACA,uC;AACA,kB;AACA,oB;AACA,K;;AAEA,kD;AACA,iB;AACA,8B;AACA,qC;AACA,6D;AACA,qD;AACA,W;AACA,O;AACA,oC;AACA,wC;AACA,8B;AACA,W;AACA,O;AACA,K;;AAEA,6B;AACA,G;AACA,a;AACA,iB;AACA,G;AACA,C;;;;AAIA,4C;;AAEA,sC;AACA,oB;AACA,kC;;AAEA,0D;;AAEA,uC;AACA,wB;AACA,K;;AAEA,mD;AACA,4B;;AAEA,uE;AACA,oD;;AAEA,uC;AACA,K;AACA,C;;;;AAIA,2C;;AAEA,qC;AACA,oB;AACA,kC;AACA,oC;;AAEA,gD;;AAEA,oC;AACA,2C;AACA,K;;AAEA,8C;AACA,+B;AACA,K;;AAEA,mE;AACA,8B;AACA,K;AACA,C","file":"/packages/emgee_mssql.js","sourcesContent":["var sql = Npm.require('mssql');\n\nSql = {};\n\nSql.driver = sql;\n\nif (! Meteor.settings.database ||\n    ! Meteor.settings.database.user ||\n    ! Meteor.settings.database.password) {\n  console.error('mssql: Database unconfigured');\n} else {\n  Sql.connection = new Sql.driver.Connection(Meteor.settings.database, function (err) {\n    if (err) console.log(\"Can't connect to database\");\n  });\n}\n\n\n\nSql.q = Meteor.wrapAsync(sqlQuery);\n\nfunction sqlQuery (query, inputs, cb) {\n  try {\n    if (typeof inputs === 'function') {\n      cb = inputs;\n      inputs = null;\n    }\n\n    var request = new sql.Request(Sql.connection);\n    if (inputs) {\n      if (_.isArray(inputs)) {\n        _.each(inputs, function (e) {\n          if (e.type) request.input(e.name, e.type, e.value);\n          else        request.input(e.name, e.value);\n        });\n      }\n      else if (_.isObject(inputs)) {\n        _.each(inputs, function (e, k) {\n          request.input(k, e);\n        });\n      }\n    }\n\n    request.query(query, cb);\n  }\n  catch (e) {\n    return cb(e);\n  }\n}\n\n\n\nSql.ps = Meteor.wrapAsync(prepareStatement);\n\nfunction prepareStatement (opts, cb) {\n  opts = opts || {};\n  opts.inputs = opts.inputs || {};\n\n  var request = new sql.PreparedStatement(Sql.connection);\n\n  _.each(opts.inputs, function (v, k) {\n    request.input(k, v);\n  });\n\n  request.prepare(opts.query, function (err, res) {\n    if (err) return cb(err);\n\n    var preparedStatement = Meteor.wrapAsync(request.execute, request);\n    preparedStatement.unprepare = request.unprepare;\n\n    return cb(null, preparedStatement);\n  });\n}\n\n\n\nSql.sp = Meteor.wrapAsync(storedProcedure);\n\nfunction storedProcedure (opts, cb) {\n  opts = opts || {};\n  opts.inputs = opts.inputs || {};\n  opts.outputs = opts.outputs || {};\n\n  var request = new sql.Request(Sql.connection);\n\n  _.each(opts.inputs, function (i) {\n    request.input(i.name, i.type, i.value);\n  });\n\n  _.each(opts.outputs, function (type, name) {\n    request.output(name, type);\n  });\n\n  request.execute(opts.sp, function(err, recordsets, returnValue) {\n    return cb(err, recordsets)\n  });\n}\n"]}