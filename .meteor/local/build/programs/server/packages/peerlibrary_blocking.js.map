{"version":3,"sources":["peerlibrary:blocking/server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,0C;;AAEA,0E;AACA,4E;AACA,2C;AACA,gC;AACA,a;AACA,c;AACA,oB;AACA,G;AACA,uB;AACA,6B;AACA,iB;AACA,K;AACA,oC;AACA,8B;AACA,mD;AACA,yB;AACA,I;AACA,qB;AACA,W;AACA,E","file":"/packages/peerlibrary:blocking.js","sourcesContent":["var Future = Npm.require('fibers/future');\n\n// Inside blocking context functions should not be throwing exceptions but\n// call callback with first argument an error. Exceptions will not propagate\n// and will only be printed to the console.\nblocking = function (obj, fun) {\n  if (!fun) {\n    fun = obj;\n    obj = undefined;\n  }\n  var f = function () {\n    if (_.isUndefined(obj)) {\n      obj = this;\n    }\n    var args = _.toArray(arguments);\n    var future = new Future();\n    fun.apply(obj, args.concat(future.resolver()));\n    return future.wait();\n  };\n  f._blocking = true;\n  return f;\n};\n"]}