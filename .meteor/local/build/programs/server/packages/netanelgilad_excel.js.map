{"version":3,"sources":["netanelgilad:excel/lib/utils.js","netanelgilad:excel/lib/workbook.js","netanelgilad:excel/lib/worksheet.js","netanelgilad:excel/netanelgilad:excel.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,+B;AACA,+B;;AAEA,kC;AACA,2B;AACA,E;;AAEA,2D;AACA,iC;AACA,+C;AACA,G;AACA,qC;AACA,8C;AACA,G;AACA,E;;AAEA,0D;AACA,iC;AACA,8C;AACA,G;AACA,qC;AACA,6C;AACA,G;AACA,E;;AAEA,2D;AACA,iC;AACA,+C;AACA,G;AACA,qC;AACA,8C;AACA,G;AACA,E;;AAEA,sD;AACA,iC;AACA,0C;AACA,G;AACA,qC;AACA,yC;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACzCA,+B;AACA,+B;;AAEA,gC;AACA,2B;;AAEA,uB;AACA,mB;AACA,E;;AAEA,2D;AACA,kC;AACA,iC;AACA,E;;AAEA,sD;AACA,iC;AACA,0C;AACA,G;AACA,oC;AACA,yC;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACtBA,+B;AACA,+B;;AAEA,iC;AACA,2B;AACA,gE;AACA,uB;AACA,E;;AAEA,8D;AACA,4C;AACA,wD;;AAEA,c;AACA,Y;AACA,I;;AAEA,+C;AACA,qD;AACA,oC;AACA,iB;AACA,iC;AACA,6B;AACA,G;AACA,oB;;AAEA,2B;;AAEA,iD;AACA,iD;AACA,iD;AACA,iD;;AAEA,gD;AACA,E;;AAEA,sF;AACA,4B;AACA,W;;AAEA,kB;;AAEA,sC;AACA,wB;AACA,mC;AACA,6C;AACA,oC;AACA,O;AACA,K;AACA,G;;AAEA,6B;AACA,kD;AACA,yE;AACA,oD;AACA,uB;AACA,K;;AAEA,2B;AACA,sC;AACA,yB;AACA,2D;AACA,yH;AACA,yD;AACA,mB;AACA,O;AACA,iB;AACA,K;AACA,E;;AAEA,+E;AACA,6E;AACA,E;;AAEA,6D;AACA,0B;AACA,E;;AAEA,sB;;AAEA,+B;AACA,0B;AACA,4B;AACA,4E;AACA,C;;;;;;;;;;;;;;;;;;ACpFA,+B;AACA,+B;;AAEA,6B;AACA,gD;AACA,oE;AACA,G;;AAEA,2B;AACA,6C;AACA,E;;AAEA,2D;AACA,iC;AACA,8C;AACA,G;AACA,oC;AACA,6C;AACA,G;AACA,E;;AAEA,mD;AACA,iC;AACA,sC;AACA,G;AACA,oC;AACA,qC;AACA,G;AACA,E;;AAEA,8C;AACA,qC;AACA,E;;AAEA,+C;AACA,sC;AACA,E","file":"/packages/netanelgilad_excel.js","sourcesContent":["var XLSX = Npm.require('xlsx');\nvar XLS = Npm.require('xlsjs');\n\nExcelUtils = function (fileType) {\n  this.fileType = fileType;\n};\n\nExcelUtils.prototype.sheet_to_json = function (worksheet) {\n  if (this.fileType === 'xlsx') {\n    return XLSX.utils.sheet_to_json(worksheet);\n  }\n  else if (this.fileType === 'xls') {\n    return XLS.utils.sheet_to_json(worksheet);\n  }\n};\n\nExcelUtils.prototype.sheet_to_csv = function (worksheet) {\n  if (this.fileType === 'xlsx') {\n    return XLSX.utils.sheet_to_csv(worksheet);\n  }\n  else if (this.fileType === 'xls') {\n    return XLS.utils.sheet_to_csv(worksheet);\n  }\n};\n\nExcelUtils.prototype.encode_cell = function (cellAddress) {\n  if (this.fileType === 'xlsx') {\n    return XLSX.utils.encode_cell(cellAddress);\n  }\n  else if (this.fileType === 'xls') {\n    return XLS.utils.encode_cell(cellAddress);\n  }\n};\n\nExcelUtils.prototype.encode_range = function (range) {\n  if (this.fileType === 'xlsx') {\n    return XLSX.utils.encode_range(range);\n  }\n  else if (this.fileType === 'xls') {\n    return XLS.utils.encode_range(range);\n  }\n};\n","var XLSX = Npm.require('xlsx');\nvar XLS = Npm.require('xlsjs');\n\nWorkbook = function (fileType) {\n  this.fileType = fileType;\n\n  this.SheetNames = [];\n  this.Sheets = {};\n};\n\nWorkbook.prototype.addSheet = function (sheetName, sheet) {\n  this.SheetNames.push(sheetName);\n  this.Sheets[sheetName] = sheet;\n};\n\nWorkbook.prototype.writeToFile = function (filePath) {\n  if (this.fileType === 'xlsx') {\n    return XLSX.writeFile(this, filePath);\n  }\n  else if (this.fileType == 'xls') {\n    return XLS.writeFile(this, filePath);\n  }\n};\n","var XLSX = Npm.require('xlsx');\nvar XLS = Npm.require('xlsjs');\n\nWorksheet = function (fileType) {\n  this.fileType = fileType;\n  this.range = {s: {c: 10000000, r: 10000000}, e: {c: 0, r: 0}};\n  this['!merges'] = [];\n};\n\nWorksheet.prototype.writeToCell = function (row, col, value) {\n  var utils = new ExcelUtils(this.fileType);\n  var cellAddress = utils.encode_cell({c: col, r: row});\n\n  var cell = {\n    v: value\n  };\n\n  if (typeof cell.v === 'number') cell.t = 'n';\n  else if (typeof cell.v === 'boolean') cell.t = 'b';\n  else if (cell.v instanceof Date) {\n    cell.t = 'n';\n    cell.z = XLSX.SSF._table[14];\n    cell.v = datenum(cell.v);\n  }\n  else cell.t = 's';\n\n  this[cellAddress] = cell;\n\n  if (this.range.s.r > row) this.range.s.r = row;\n  if (this.range.s.c > col) this.range.s.c = col;\n  if (this.range.e.r < row) this.range.e.r = row;\n  if (this.range.e.c < col) this.range.e.c = col;\n\n  this['!ref'] = utils.encode_range(this.range);\n};\n\nWorksheet.prototype.writeObjectArray = function (row, col, objArray, objDefinitions) {\n  if (objArray.length === 0)\n    return;\n\n  var self = this;\n\n  if (_.isUndefined(objDefinitions)) {\n    objDefinitions = {};\n    for (var prop in objArray[0]) {\n      if (objArray[0].hasOwnProperty(prop)) {\n        objDefinitions[prop] = prop;\n      }\n    }\n  }\n\n  var currentHeaderCol = col;\n  _.forEach(objDefinitions, function(definition) {\n    var header = _.isObject(definition) ? definition.header : definition;\n    self.writeToCell(row, currentHeaderCol, header);\n    currentHeaderCol++;\n  });\n\n  var currentRow = row + 1;\n  _.forEach(objArray, function(item) {\n    var currentCol = col;\n    _.forEach(objDefinitions, function(definition, field) {\n      var itemData = _.isUndefined(definition.transform) ? item[field] : definition.transform.apply(item, [item[field]]);\n      self.writeToCell(currentRow, currentCol, itemData);\n      currentCol++;\n    });\n    currentRow++;\n  });\n};\n\nWorksheet.prototype.mergeCells = function(startRow, startCol, endRow, endCol) {\n  this['!merges'].push({s:{r:startRow, c:startCol}, e:{r:endRow, c:endCol}});\n};\n\nWorksheet.prototype.setColumnProperties = function(columns) {\n  this['!cols'] = columns;\n};\n\n//////////////////////\n\nfunction datenum(v, date1904) {\n  if (date1904) v += 1462;\n  var epoch = Date.parse(v);\n  return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n}","var XLSX = Npm.require('xlsx');\nvar XLS = Npm.require('xlsjs');\n\nExcel = function (fileType) {\n  if (fileType != 'xlsx' && fileType != 'xls') {\n    throw new Meteor.Error(400, \"File must be of type xlsx or xls\");\n  }\n\n  this.fileType = fileType;\n  this.utils = new ExcelUtils(this.fileType);\n};\n\nExcel.prototype.readFile = function (fileName, read_opts) {\n  if (this.fileType === 'xlsx') {\n    return XLSX.readFile(fileName, read_opts);\n  }\n  else if (this.fileType == 'xls') {\n    return XLS.readFile(fileName, read_opts);\n  }\n};\n\nExcel.prototype.read = function (file, read_opts) {\n  if (this.fileType === 'xlsx') {\n    return XLSX.read(file, read_opts);\n  }\n  else if (this.fileType == 'xls') {\n    return XLS.read(file, read_opts);\n  }\n};\n\nExcel.prototype.createWorkbook = function () {\n  return new Workbook(this.fileType);\n};\n\nExcel.prototype.createWorksheet = function () {\n  return new Worksheet(this.fileType);\n};"]}