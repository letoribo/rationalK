{"version":3,"sources":["rationalk:filecontent//Users/thomasdokithonon/rationalK/packages/rationalk-filecontent/package-tap.i18n","rationalk:filecontent/lib/methods.js","rationalk:filecontent/lib/collections.js","rationalk:filecontent/lib/routes.js","rationalk:filecontent/lib/server/textract.js","rationalk:filecontent//Users/thomasdokithonon/rationalK/packages/rationalk-filecontent/i18n/en.i18n.json","rationalk:filecontent//Users/thomasdokithonon/rationalK/packages/rationalk-filecontent/i18n/fr.i18n.json"],"names":[],"mappings":";;;;;;;;AAAA,uH;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,oB;AACA,iC;AACA,iC;AACA,G;AACA,yG;AACA,G;AACA,E;;AAEA,oD;AACA,4D;AACA,E;;AAEA,sD;AACA,S;AACA,yB;AACA,K;AACA,c;AACA,6B;AACA,Q;AACA,M;AACA,K;AACA,gD;AACA,8C;AACA,gB;AACA,O;AACA,yC;AACA,2B;AACA,Y;AACA,E;;AAEA,wC;AACA,kF;AACA,E;;;;;;;;;;;;;;;;;;;AChCA,oD;;AAEA,qB;AACA,iD;AACA,gD;AACA,kD;AACA,G;;AAEA,sB;AACA,sD;AACA,oE;AACA,E;AACA,O;AACA,wD;AACA,qE;AACA,G;AACA,E;AACA,C;;AAEA,iC;AACA,2D;;;;;;;;;;;;;;;;;;;ACpBA,8C;;AAEA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA,O;AACA,sB;AACA,yB;;AAEA,kB;AACA,oC;AACA,4B;AACA,K;AACA,oC;AACA,qB;AACA,wB;AACA,uB;AACA,oB;AACA,mB;AACA,kB;AACA,yB;AACA,8C;AACA,8B;AACA,6C;AACA,yC;AACA,iC;AACA,iC;AACA,2E;AACA,iD;;AAEA,0C;AACA,uC;AACA,mD;AACA,2B;AACA,uD;AACA,6D;AACA,yD;AACA,mE;;AAEA,0C;AACA,2B;AACA,iC;AACA,yB;AACA,yE;AACA,qB;AACA,iB;AACA,sB;AACA,oD;AACA,iC;AACA,yB;AACA,qB;AACA,wD;AACA,iE;AACA,4B;AACA,4C;AACA,qC;AACA,kG;AACA,uB;AACA,+E;AACA,+B;AACA,uB;AACA,mC;AACA,kF;AACA,iC;AACA,Y;AACA,oC;AACA,8C;AACA,wC;AACA,gC;AACA,4D;AACA,2B;AACA,uC;AACA,mC;AACA,uB;AACA,uB;AACA,+C;AACA,0C;AACA,iB;AACA,W;AACA,gB;AACA,wE;AACA,6B;AACA,W;AACA,0B;AACA,S;AACA,0B;AACA,gC;AACA,M;AACA,0E;AACA,gB;AACA,qB;AACA,gB;AACA,2B;AACA,+C;AACA,qD;AACA,qE;AACA,iB;AACA,wB;AACA,M;AACA,qB;AACA,6B;AACA,W;;AAEA,uB;AACA,W;AACA,S;;AAEA,yC;AACA,oC;AACA,0C;AACA,qC;;AAEA,8B;AACA,sC;AACA,sC;AACA,6C;;AAEA,uB;AACA,oB;;AAEA,iB;AACA,M;AACA,K;;AAEA,4C;AACA,mB;AACA,gC;AACA,iC;AACA,iE;AACA,M;AACA,qB;AACA,kE;AACA,sB;AACA,kF;AACA,6B;AACA,W;AACA,wB;AACA,uF;AACA,gC;AACA,W;AACA,S;AACA,M;AACA,K;AACA,G;AACA,0B;;;;;;;;;;;;;;;;;;;AC3IA,6B;AACA,2C;AACA,wC;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,wG;AACA,gD;AACA,mD;;;;;;;;;;;;;;;;;;;ACXA,6B;AACA,2C;AACA,wC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,sS;AACA,mD","file":"/packages/rationalk_filecontent.js","sourcesContent":["TAPi18n.packages[\"rationalk:filecontent\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","RKFilesContent = {};\nRKFilesContent.Collections =  {};\nRKCore.searchResultsPackage.push(\n  {\n    name: \"RKFilesContent\", // a publication with the name : RKSheetConnector-searchResults should exists\n  }\n);\n\nRKFilesContent.findAllFullTextSearch = function () {\n  return FilesContent.find({}, {sort: {score: -1}}).fetch();\n};\n\nRKFilesContent.findFullText = function (searchQuery) {\n  var sr;\n  sr = FilesContent.find(\n    {\n      $text: {\n        $search: searchQuery,\n      },\n    },\n    {\n      fields: { score: { $meta: 'textScore' } },\n      sort: { score: { $meta: 'textScore' } },\n      limit: 30,\n    });\n    RKCore.log(\"I am here FilesContent\");\n    RKCore.log(sr.fetch());\n  return sr;\n};\n\nRKFilesContent.findDummy = function () {\n  return FilesContent.find({$text: { $search: \"somethingthatyouwillneverfind\" }});\n};\n","FilesContent = new Mongo.Collection('FilesContent');\n\nFilesContent.allow( {\n\t\tinsert: function (userId) {return !! userId; },\n\t\tupdate: function (userId) {return !!userId; },\n    remove: function (userId) {return !!userId; },\n});\n\nif (Meteor.isServer) {\n\tif (typeof FilesContent.createIndex === 'function') {\n\t\tFilesContent.createIndex({ text: \"text\" }, { name: \"TextIndex\" });\n\t}\n\telse {\n\t\tif (typeof FilesContent._ensureIndex === 'function') {\n\t\t\tFilesContent._ensureIndex( { text: \"text\" }, {name: \"TextIndex\"});\n\t\t}\n\t}\n}\n\n// Expose collections if needed :\n//RKWiki.Collections.WikiSearchResults = WikiSearchResults;\n","if (Meteor.settings.public.show.filecontent) {\n\n}\n","var fs;\nif (Meteor.isServer) {\n  fs = Npm.require(\"fs\");\n\n  Meteor.methods({\n\t  removeFilesContent: function () {\n\t\t  FilesContent.remove({});\n\t  },\n    indexFilesContent: function () {\n      var stats = {};\n      var fileTree = [];\n      var fileContents;\n      var extension;\n      var walkPath;\n      var folders;\n      var serverFilename;\n      var allowedExtensions = [\"doc\", \"docx\"];\n      FilesContent.remove({});\n      folders = FoldersToScan.find().fetch();\n      folders.forEach(function (folder) {\n        if (folder.path !== \"\") {\n          walkPath = folder.path;\n          walkPath = walkPath.replace(/\\/$/, \"\"); //removing trailing slash\n          fileTree = getFilesRecursive(walkPath);\n\n\t\t\t\t\tfunction getFilesRecursive (folder) {\n          \tif (fs.existsSync(folder)) {\n            \tfileContents = fs.readdirSync(folder);\n            \tfileTree = [];\n            \tfileContents.forEach(function (fileName) {\n              \tstats = fs.lstatSync(folder + '/' + fileName);\n              \tserverFilename = folder + '\\\\' + fileName;\n              \tserverFilename = serverFilename.replace(/\\\\/g, \"/\");\n\n                if (stats.isDirectory()) {\n\t\t\t\t\t\t\t\t\t//this is a folder\n                  fileTree.push({\n\t\t\t\t\t\t\t\t\t\tname: fileName,\n                    children: getFilesRecursive(folder + '/' + fileName),\n                  });\n                }\n                else {\n                  // this is a file and not a folder\n                  fileTree.push({\n\t\t\t\t\t\t\t\t\t\tname: fileName,\n                  });\n                  extension = fileName.split('.').pop();\n                  if (allowedExtensions.indexOf(extension) > 0) {\n\t\t\t\t\t\t\t\t\t\t//do scan the file\n\t\t\t\t\t\t\t\t\t\tRKCore.log('do scan the file : ');\n\t\t\t\t\t\t\t\t\t\tRKCore.log(serverFilename);\n              \t\t\tMeteor.call(\"indexSingleFileContent\", serverFilename, function (error, results) {\n\t\t\t\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\t\t\t\tRKCore.log(\"error from the meteor call indexSingleFileContent : \");\n\t\t\t\t\t\t\t  \t\t\t\tRKCore.log(error);\n                      }\n                      if (results){\n\t\t\t\t\t\t\t  \t\t\t\tRKCore.log(\"results from the meteor call indexSingleFileContent : \");\n\t\t\t\t\t\t\t  \t\t\t\tRKCore.log(results);\n\t\t\t\t\t\t\t\t\t\t\t}\n                      if (results) {\n\t\t\t\t\t\t\t\t\t\t\t\tinsertedId = FilesContent.insert({\n\t\t\t\t\t\t\t\t\t\t\t\t\tfilePath: results.filePath,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttext: results.text,\n                          searchResultFromFileContent: true,\n                        });\n\t\t\t\t\t\t\t\t\t\t\t\tRKCore.log(\"insertedId :\");\n\t\t\t\t\t\t\t\t\t\t\t\tRKCore.log(insertedId);\n                      }\n                    });\n                  } //end if allowed extensions\n                } // end of this is a file\n              });\n          }\n          else {\n\t\t\t\t\t\tRKCore.log(folder + ' does NOT exists. I will skip this folder.');\n            fileTree = false;\n          }\n          return fileTree;\n        }\n      } //end if not empty\n    }); // end loop over folders\n    },\n    'indexSingleFileContent': function indexSingleFileContent (filePath) {\n\t\t\tvar textract;\n\t\t\tvar textractAsync;\n\t\t\tvar obj = {};\n\t\t\tcheck(filePath, String);\n      textract = Meteor.npmRequire('textract');\n      textractAsync = Async.runSync(function (done) {\n        textract.fromFileWithPath(filePath, function (error, text ) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tRKCore.log(error);\n\t\t\t\t\t}\n          if (text) {\n            RKCore.log(text);\n          }\n\n\t\t\t\t\tdone(error, text);\n        });\n      });\n\n  \t\tRKCore.log(\"textractAsync.error : \");\n  \t\tRKCore.log(textractAsync.error);\n  \t\tRKCore.log(\"textractAsync.result : \");\n  \t\tRKCore.log(textractAsync.result);\n\n      obj.filePath = filePath;\n      obj.text = textractAsync.result;\n      obj.error = textractAsync.error;\n      obj.searchResultFromFileContent = true;\n\n  \t\tRKCore.log(\"obj:\");\n  \t\tRKCore.log(obj);\n\n      return obj;\n    },\n  });\n\n  if (Meteor.settings.scanFilesContent.do) {\n\t  SyncedCron.add({\n\t\t  name: 'Index files content',\n\t\t  schedule: function (parser) {\n\t\t\treturn parser.text(Meteor.settings.scanFilesContent.interval);\n\t\t  },\n\t\t\tjob: function () {\n\t\t    Meteor.call(\"indexFilesContent\", function (error, results) {\n          if (error) {\n\t\t\t     RKCore.log(\"error from the meteor call indexFilesContent in the cron : \");\n           RKCore.log(error);\n          }\n          if (results) {\n            RKCore.log(\"results from the meteor call indexFilesContent in the cron: \");\n            RKCore.log(results);\n          }\n\t\t    });\n\t\t  },\n\t\t});\n  }\n} //end of if server check\n","var _ = Package.underscore._,\n    package_name = \"rationalk:filecontent\",\n    namespace = \"rationalk:filecontent\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"invitation_to_join_info_login\":\"Your username will be your company email.\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\nTAPi18n._registerServerTranslator(\"en\", namespace);\n","var _ = Package.underscore._,\n    package_name = \"rationalk:filecontent\",\n    namespace = \"rationalk:filecontent\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"fr\"])) {\n  TAPi18n.translations[\"fr\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"fr\"][namespace])) {\n  TAPi18n.translations[\"fr\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"fr\"][namespace], {\"Files content\":\"Contenu des fichiers\",\"Search score\":\"Score de recherche\",\"Scan all files for their content\":\"Scanner le contenu de tous les fichiers\",\"Reset files content database\":\"Remettre à zéro la base de donnée du contenu des fichiers\"});\nTAPi18n._registerServerTranslator(\"fr\", namespace);\n"]}