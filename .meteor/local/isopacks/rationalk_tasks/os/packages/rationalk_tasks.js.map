{"version":3,"sources":["rationalk:tasks//Users/thomasdokithonon/rationalK/packages/rationalk-tasks/package-tap.i18n","rationalk:tasks/lib/methods.js","rationalk:tasks/lib/collections.js","rationalk:tasks/lib/routes.js","rationalk:tasks/lib/server/publications.js","rationalk:tasks/lib/server/methods.js","rationalk:tasks/lib/server/methodsWebshot.js","rationalk:tasks/lib/server/methodsDashboard.js","rationalk:tasks/lib/server/methodsSettings.js","rationalk:tasks/lib/server/sendReminders.js","rationalk:tasks/lib/server/followup.js","rationalk:tasks/lib/server/backup.js","rationalk:tasks/lib/server/logs.js","rationalk:tasks/lib/server/notifications.js","rationalk:tasks//Users/thomasdokithonon/rationalK/packages/rationalk-tasks/i18n/en.i18n.json","rationalk:tasks//Users/thomasdokithonon/rationalK/packages/rationalk-tasks/i18n/fr.i18n.json"],"names":[],"mappings":";;;;;;;;AAAA,iH;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,a;AACA,yB;AACA,iC;AACA,G;AACA,qE;AACA,G;AACA,E;;AAEA,6C;AACA,qD;AACA,E;;AAEA,+C;AACA,S;AACA,6B;AACA,kB;AACA,K;AACA,c;AACA,6B;AACA,Q;AACA,M;AACA,K;AACA,gD;AACA,8C;AACA,gB;AACA,O;AACA,c;AACA,E;;AAEA,iC;AACA,2E;AACA,E;;AAEA,gB;AACA,gC;AACA,wB;AACA,e;AACA,I;AACA,iB;AACA,I;AACA,I;AACA,uC;AACA,0D;AACA,G;AACA,G;AACA,uC;AACA,2B;AACA,iB;AACA,I;AACA,oB;AACA,I;AACA,I;AACA,uC;AACA,6D;AACA,G;AACA,G;AACA,uC;AACA,2B;AACA,kB;AACA,I;AACA,oB;AACA,I;AACA,I;AACA,uC;AACA,6D;AACA,G;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACnEA,sC;AACA,0C;AACA,4C;AACA,0D;;AAEA,c;AACA,iD;AACA,gD;AACA,kD;AACA,G;;AAEA,gB;AACA,iD;AACA,gD;AACA,kD;AACA,G;;AAEA,iB;AACA,iD;AACA,gD;AACA,kD;AACA,G;;AAEA,wB;AACA,iD;AACA,gD;AACA,kD;AACA,G;;AAEA,sB;AACA,+C;AACA,6D;AACA,E;AACA,O;AACA,iD;AACA,8D;AACA,G;AACA,E;;AAEA,iD;AACA,+D;AACA,E;AACA,O;AACA,mD;AACA,gE;AACA,G;AACA,E;;AAEA,kD;AACA,gE;AACA,E;AACA,O;AACA,oD;AACA,iE;AACA,G;AACA,E;AACA,iB;;AAEA,4C;;AAEA,iB;AACA,iD;AACA,gD;AACA,kD;AACA,G;;;;;;;;;;;;;;;;;;;AChEA,wC;AACA,iD;AACA,kB;AACA,yB;AACA,mE;AACA,qE;AACA,+C;AACA,oE;AACA,O;AACA,mD;AACA,mE;AACA,O;AACA,yD;AACA,uC;AACA,gD;AACA,O;AACA,qD;AACA,qE;AACA,O;AACA,oD;AACA,oE;AACA,O;AACA,Y;AACA,kC;AACA,O;AACA,c;AACA,qC;AACA,oC;AACA,uC;AACA,Q;AACA,M;AACA,K;;AAEA,6B;AACA,yB;AACA,yB;AACA,mC;AACA,gC;AACA,2C;AACA,M;AACA,K;;AAEA,sC;AACA,wB;AACA,uB;AACA,yB;AACA,sD;AACA,oB;AACA,oC;AACA,Y;AACA,8D;;AAEA,sC;AACA,sD;AACA,O;AACA,iC;AACA,kB;AACA,M;AACA,yB;AACA,c;AACA,qD;AACA,gE;AACA,8D;AACA,oC;AACA,iC;AACA,S;AACA,M;AACA,K;;;AAGA,0D;AACA,qB;AACA,uB;AACA,yB;AACA,sD;AACA,oB;AACA,oC;AACA,Y;AACA,wD;;AAEA,sC;AACA,sD;AACA,O;AACA,iC;AACA,2C;AACA,6C;AACA,uB;AACA,kB;AACA,M;AACA,yB;AACA,c;AACA,kD;AACA,oC;AACA,qC;AACA,uC;AACA,iC;AACA,S;AACA,M;AACA,K;;AAEA,oC;AACA,2B;AACA,uB;AACA,kB;AACA,M;AACA,yB;AACA,c;AACA,oC;AACA,S;AACA,M;AACA,K;;AAEA,mD;AACA,oB;AACA,yB;AACA,mE;AACA,qE;AACA,+C;AACA,kC;AACA,sE;AACA,O;AACA,mD;AACA,+B;AACA,qE;AACA,O;AACA,Y;AACA,uC;AACA,O;AACA,c;AACA,oC;AACA,qC;AACA,Q;AACA,M;AACA,K;;AAEA,4D;AACA,wB;AACA,uB;AACA,yB;AACA,sD;AACA,oB;AACA,oC;AACA,Y;AACA,6D;;AAEA,sC;AACA,sD;AACA,O;AACA,iC;AACA,2C;AACA,6C;AACA,kB;AACA,M;AACA,yB;AACA,c;AACA,qD;AACA,oC;AACA,qC;AACA,iC;AACA,4C;AACA,8D;AACA,S;AACA,M;AACA,K;;;AAGA,mE;AACA,sB;AACA,kC;AACA,uB;AACA,yB;AACA,sD;AACA,oB;AACA,oC;AACA,Y;AACA,wD;;AAEA,sC;AACA,sD;AACA,O;AACA,iC;AACA,kB;AACA,M;AACA,yB;AACA,c;AACA,oC;AACA,iC;AACA,uC;AACA,kD;AACA,qC;AACA,S;AACA,M;AACA,K;;AAEA,sE;AACA,yB;AACA,kC;AACA,uB;AACA,yB;AACA,sD;AACA,oB;AACA,oC;AACA,Y;AACA,6D;;AAEA,sC;AACA,sD;AACA,O;AACA,iC;AACA,kB;AACA,M;AACA,yB;AACA,c;AACA,qD;AACA,oC;AACA,iC;AACA,8D;AACA,S;AACA,M;AACA,K;;AAEA,6B;AACA,qB;AACA,yB;AACA,c;AACA,qC;AACA,oC;AACA,Q;AACA,M;AACA,K;AACA,C;;;;;;;;;;;;;;;;;;;ACtOA,uD;AACA,yD;AACA,6B;AACA,0B;AACA,0C;AACA,G;;AAEA,+C;AACA,kC;AACA,G;;AAEA,qD;AACA,sD;AACA,0B;AACA,uB;AACA,0C;AACA,G;;AAEA,uD;AACA,yD;AACA,6B;AACA,sD;AACA,mD;AACA,G;;AAEA,gE;AACA,6C;AACA,0C;AACA,yD;AACA,2B;AACA,sD;AACA,mD;AACA,G;;AAEA,yD;AACA,2B;AACA,wD;AACA,G;;AAEA,2D;AACA,2B;AACA,2D;AACA,G;;AAEA,yD;AACA,0B;AACA,6C;AACA,G;;AAEA,mD;AACA,oB;AACA,kD;AACA,G;;AAEA,yD;AACA,2B;AACA,yD;AACA,G;;AAEA,iD;AACA,wE;AACA,gB;AACA,wB;AACA,6C;AACA,sC;AACA,iC;AACA,0C;AACA,8C;AACA,G;AACA,Y;AACA,G;;AAEA,mD;AACA,kC;AACA,sE;AACA,gB;AACA,iC;AACA,4B;AACA,+D;AACA,sC;AACA,iC;AACA,0C;AACA,8C;AACA,G;AACA,Y;AACA,G;;AAEA,qD;AACA,wB;AACA,yC;AACA,G;;AAEA,qC;AACA,sB;AACA,G;;AAEA,wC;AACA,yB;AACA,G;;AAEA,yC;AACA,oB;AACA,wB;AACA,Y;AACA,K;AACA,G;;AAEA,sC;AACA,oB;AACA,qB;AACA,Y;AACA,K;AACA,G;;AAEA,0C;AACA,0B;AACA,G;;AAEA,gD;AACA,2B;AACA,uB;AACA,mB;AACA,K;AACA,G;;AAEA,wC;AACA,yB;AACA,G;;;;;;;;;;;;;;;;;;;AC/HA,gB;AACA,gC;AACA,+B;AACA,wB;AACA,e;AACA,K;AACA,iB;AACA,M;AACA,K;AACA,U;AACA,M;AACA,4D;AACA,0B;AACA,sB;AACA,6B;AACA,yB;AACA,wD;AACA,O;AACA,K;AACA,I;;;AAGA,uC;AACA,qD;AACA,G;AACA,G;AACA,8B;AACA,gB;AACA,yB;;AAEA,yD;AACA,4D;AACA,oD;AACA,2D;AACA,4C;AACA,e;AACA,I;AACA,Y;AACA,O;AACA,uB;AACA,O;AACA,O;AACA,K;AACA,I;AACA,oD;AACA,oD;AACA,gD;AACA,gD;AACA,sC;AACA,6B;AACA,mC;AACA,iC;AACA,mC;AACA,qB;AACA,uC;AACA,yC;AACA,6B;AACA,yC;AACA,mC;AACA,uC;AACA,iC;AACA,uD;AACA,gB;AACA,iC;AACA,mC;AACA,qC;AACA,qD;AACA,K;AACA,I;AACA,oB;AACA,I;AACA,I;AACA,G;AACA,mC;AACA,2C;AACA,wB;AACA,2B;AACA,I;AACA,wD;AACA,wD;AACA,oD;AACA,qD;AACA,0C;AACA,oC;AACA,0C;AACA,wC;AACA,0C;AACA,4B;AACA,8C;AACA,gD;AACA,oC;AACA,gD;AACA,6B;AACA,mD;AACA,4B;AACA,gC;AACA,4C;AACA,4D;AACA,I;AACA,I;AACA,mB;AACA,G;AACA,+B;AACA,uB;AACA,yD;AACA,+B;AACA,+D;AACA,yC;AACA,a;AACA,uB;AACA,sB;AACA,uB;AACA,yB;AACA,uB;AACA,mB;AACA,uB;AACA,iD;AACA,kC;AACA,G;AACA,gD;AACA,gC;AACA,G;AACA,wB;AACA,I;AACA,2D;AACA,2B;AACA,oE;AACA,0B;AACA,oB;AACA,mB;AACA,6B;AACA,2B;AACA,6B;AACA,a;AACA,sB;AACA,uB;AACA,uB;AACA,sB;AACA,6B;AACA,mD;AACA,a;AACA,gC;AACA,wB;AACA,gC;AACA,I;AACA,I;AACA,gB;AACA,G;AACA,iC;AACA,gB;AACA,yB;;AAEA,iD;AACA,mD;AACA,oD;AACA,4D;AACA,oD;AACA,oD;AACA,iB;AACA,I;AACA,Y;AACA,O;AACA,0B;AACA,O;AACA,O;AACA,K;AACA,I;AACA,gC;AACA,mC;AACA,yB;AACA,iC;AACA,+B;AACA,6C;AACA,yC;AACA,qC;AACA,mC;AACA,mC;AACA,qB;AACA,sC;AACA,0C;AACA,iC;AACA,uD;AACA,gB;AACA,iC;AACA,K;AACA,I;AACA,oB;AACA,I;AACA,I;;AAEA,wF;AACA,G;AACA,yC;AACA,mD;AACA,2B;AACA,gC;AACA,I;AACA,mD;AACA,uC;AACA,6C;AACA,uD;AACA,mC;AACA,2C;AACA,yC;AACA,6C;AACA,+C;AACA,6C;AACA,+B;AACA,6B;AACA,mD;AACA,+B;AACA,kC;AACA,I;AACA,I;AACA,sB;AACA,G;AACA,kC;AACA,sC;AACA,oB;AACA,0B;AACA,I;AACA,0C;AACA,sC;AACA,oD;AACA,kD;AACA,wB;AACA,6B;AACA,mD;AACA,wB;AACA,kC;AACA,I;AACA,I;AACA,e;AACA,G;AACA,iC;AACA,gB;AACA,yB;AACA,qD;AACA,mD;AACA,0D;AACA,oD;AACA,qD;AACA,kB;AACA,I;AACA,Y;AACA,O;AACA,0B;AACA,O;AACA,O;AACA,K;AACA,I;AACA,0C;AACA,mC;AACA,iD;AACA,+C;AACA,qB;AACA,sC;AACA,0C;AACA,iC;AACA,uD;AACA,gB;AACA,mC;AACA,K;AACA,I;AACA,oB;AACA,I;AACA,I;AACA,G;AACA,6B;AACA,gB;AACA,+B;AACA,8B;AACA,I;AACA,sB;AACA,oB;AACA,2B;AACA,gC;AACA,oB;AACA,mD;AACA,a;AACA,a;AACA,mC;AACA,I;AACA,I;AACA,mB;AACA,G;AACA,iC;AACA,gB;AACA,+B;AACA,+D;AACA,yC;AACA,uB;AACA,yB;AACA,iD;AACA,kC;AACA,G;AACA,6B;AACA,I;AACA,oB;AACA,qB;AACA,iB;AACA,+C;AACA,qB;AACA,yB;AACA,+B;AACA,kB;AACA,uB;AACA,6B;AACA,6B;AACA,mD;AACA,a;AACA,a;AACA,kC;AACA,I;AACA,I;AACA,mB;AACA,G;AACA,4D;AACA,Q;AACA,kC;AACA,uB;AACA,gB;AACA,uB;AACA,e;AACA,yB;AACA,2B;AACA,+B;AACA,uC;AACA,0B;AACA,a;AACA,mC;AACA,0B;AACA,I;AACA,S;AACA,gD;AACA,I;AACA,2B;AACA,kB;AACA,I;AACA,S;AACA,gC;AACA,I;AACA,6B;AACA,wD;AACA,iB;AACA,M;AACA,6D;AACA,6B;AACA,yC;AACA,4B;AACA,uC;AACA,qB;AACA,+B;AACA,8B;AACA,e;AACA,yB;AACA,yB;AACA,wB;AACA,+B;AACA,qD;AACA,iB;AACA,kC;AACA,M;AACA,M;AACA,I;AACA,K;AACA,G;AACA,kC;AACA,Q;AACA,kC;AACA,uB;AACA,gB;AACA,uB;AACA,e;AACA,yB;AACA,uC;AACA,0B;AACA,a;AACA,mC;AACA,0B;AACA,I;AACA,S;AACA,gD;AACA,I;AACA,2B;AACA,kB;AACA,I;AACA,S;AACA,gC;AACA,I;AACA,6B;AACA,wD;AACA,8D;AACA,iB;AACA,M;AACA,6D;AACA,6B;AACA,yC;AACA,4B;AACA,uC;AACA,qB;AACA,e;AACA,yB;AACA,yB;AACA,wB;AACA,+B;AACA,qD;AACA,iB;AACA,kC;AACA,M;AACA,M;AACA,I;AACA,K;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC9ZA,gB;AACA,gC;AACA,+B;AACA,oC;AACA,2E;AACA,mB;AACA,wB;AACA,oB;AACA,2B;AACA,kC;AACA,wB;AACA,Q;AACA,M;AACA,oC;AACA,yC;AACA,4C;AACA,+E;AACA,G;AACA,U;AACA,gD;AACA,K;AACA,gD;AACA,+B;AACA,K;AACA,0D;AACA,2C;AACA,2C;AACA,2F;AACA,K;AACA,2B;AACA,oD;AACA,mE;AACA,kB;AACA,+B;AACA,0B;AACA,S;AACA,S;AACA,oB;AACA,I;AACA,G;;;;;;;;;;;;;;;;;;;ACvCA,gB;AACA,+B;AACA,mB;AACA,iC;AACA,iB;AACA,e;AACA,U;AACA,mC;AACA,oC;AACA,mC;AACA,mE;AACA,uB;AACA,O;AACA,e;AACA,W;AACA,0B;AACA,8B;AACA,c;AACA,Y;AACA,W;AACA,2B;AACA,Y;AACA,U;AACA,iB;;AAEA,0B;;AAEA,kC;AACA,+C;AACA,iC;AACA,yC;AACA,0D;AACA,wD;AACA,O;AACA,8D;;AAEA,gD;AACA,iC;AACA,yC;AACA,4D;AACA,0D;AACA,O;AACA,8D;;AAEA,iD;AACA,kC;AACA,0C;AACA,qE;AACA,6D;AACA,O;AACA,gE;AACA,K;;;AAGA,oD;AACA,sB;;AAEA,iB;AACA,I;AACA,G;;;;;;;;;;;;;;;;;;;AC3DA,gB;AACA,uC;AACA,mB;AACA,iB;AACA,wB;AACA,mD;AACA,iD;AACA,qD;AACA,2C;AACA,6B;AACA,K;AACA,0B;AACA,sB;AACA,iB;AACA,I;AACA,0C;AACA,qB;AACA,2B;AACA,qD;AACA,6B;AACA,M;AACA,6B;AACA,O;AACA,S;AACA,4C;AACA,U;AACA,S;AACA,oB;AACA,M;AACA,Q;AACA,K;AACA,iE;AACA,6B;AACA,M;AACA,yC;AACA,O;AACA,S;AACA,wD;AACA,U;AACA,S;AACA,oB;AACA,M;AACA,Q;AACA,K;AACA,iD;AACA,gB;AACA,I;AACA,G;;;;;;;;;;;;;;;;;;;AC/CA,sB;AACA,+B;AACA,qC;AACA,I;AACA,uC;AACA,6C;AACA,I;;AAEA,kB;AACA,uC;AACA,kC;AACA,yC;AACA,4C;AACA,O;AACA,wB;AACA,K;;AAEA,kB;AACA,mD;AACA,kC;AACA,yC;AACA,4C;AACA,O;AACA,gC;AACA,K;;AAEA,kB;AACA,+B;AACA,a;AACA,iB;AACA,0B;AACA,M;AACA,a;AACA,Q;AACA,2B;AACA,S;AACA,Q;AACA,wD;AACA,S;AACA,Q;AACA,M;AACA,c;;AAEA,6B;AACA,sD;;AAEA,kC;AACA,0G;;AAEA,gC;AACA,wD;AACA,8C;AACA,W;AACA,0D;AACA,mB;AACA,4B;;AAEA,2G;;AAEA,oH;;AAEA,iB;AACA,oD;AACA,iF;AACA,iG;AACA,qB;AACA,W;AACA,K;AACA,kB;AACA,I;AACA,sC;AACA,Y;AACA,gB;AACA,yB;AACA,K;AACA,Y;AACA,O;AACA,kC;AACA,Q;AACA,O;AACA,uD;AACA,Q;AACA,O;AACA,K;AACA,a;;AAEA,4B;AACA,qE;;AAEA,iC;AACA,gF;AACA,c;AACA,qC;AACA,iC;AACA,M;AACA,8D;AACA,8C;AACA,K;AACA,U;AACA,uB;AACA,K;AACA,gC;AACA,2B;AACA,yC;AACA,2D;AACA,oF;AACA,2B;AACA,uB;;AAEA,yH;;AAEA,+B;AACA,uD;AACA,6D;AACA,U;AACA,yD;AACA,kB;AACA,2B;;AAEA,0H;;AAEA,8L;;AAEA,0B;AACA,qB;;AAEA,0C;AACA,iC;AACA,4B;AACA,mC;AACA,Y;AACA,oB;AACA,qC;AACA,kE;AACA,c;AACA,kC;AACA,8B;AACA,Q;AACA,2F;AACA,K;AACA,0C;AACA,wB;AACA,mB;AACA,gC;AACA,2B;AACA,gB;AACA,sB;AACA,oB;AACA,oB;AACA,yB;AACA,4G;AACA,gB;AACA,O;AACA,I;AACA,e;AACA,G;AACA,I;AACA,2B;;;;;;;;;;;;;;;;;;;AC7JA,sB;AACA,kB;AACA,qC;AACA,mB;AACA,uB;AACA,uB;AACA,S;AACA,Q;AACA,uB;AACA,8B;AACA,0B;AACA,qB;AACA,qB;AACA,O;AACA,kB;AACA,M;AACA,6B;AACA,oB;;;;;;;;;;;;;;;;;;;ACjBA,0B;AACA,G;AACA,uE;AACA,qC;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACLA,2C;AACA,gB;AACA,mC;AACA,iB;AACA,gC;AACA,mC;AACA,+C;AACA,mD;AACA,G;;;;;;;;;;;;;;;;;;;ACRA,2C;AACA,gB;AACA,kC;AACA,6D;AACA,uC;AACA,iB;AACA,gC;AACA,mC;AACA,gD;AACA,mD;;AAEA,uE;AACA,iG;AACA,sG;;AAEA,+B;AACA,gD;AACA,8C;AACA,W;AACA,kD;AACA,mB;AACA,2B;;AAEA,kG;;AAEA,mH;;AAEA,gB;AACA,gD;AACA,qE;AACA,mG;AACA,iB;AACA,O;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AClCA,6B;AACA,qC;AACA,kC;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,wG;AACA,gD;AACA,mD;;;;;;;;;;;;;;;;;;;ACXA,6B;AACA,qC;AACA,kC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,8/K;AACA,mD","file":"/packages/rationalk_tasks.js","sourcesContent":["TAPi18n.packages[\"rationalk:tasks\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","RKTasks = {};\nRKTasks.Collections = {};\nRKCore.searchResultsPackage.push(\n  {\n    name: \"RKTasks\", // RKExperts.findAllFullTextSearch should exists\n  }\n);\n\nRKTasks.findAllFullTextSearch = function () {\n  return Tasks.find({}, {sort: {score: -1}}).fetch();\n};\n\nRKTasks.findFullText = function (searchQuery) {\n  var sr;\n  check(searchQuery, String);\n  sr = Tasks.find(\n    {\n      $text: {\n        $search: searchQuery,\n      },\n    },\n    {\n      fields: { score: { $meta: 'textScore' } },\n      sort: { score: { $meta: 'textScore' } },\n      limit: 30,\n    });\n    return sr;\n};\n\nRKTasks.findDummy = function () {\n  return Tasks.find({$text: { $search: \"somethingthatyouwillneverfind\" }});\n};\n\nMeteor.methods({\n\tdeleteTask: function (taskId) {\n\t\tcheck(taskId, String);\n\t\tTasks.remove(\n\t\t\t{\n\t\t\t  _id: taskId,\n\t\t\t}\n\t\t);\n\t\tif (typeof(toastr) !== 'undefined') {\n\t\t\ttoastr.success(TAPi18n.__('Task deleted succesfully'));\n\t\t}\n\t},\n  deleteMinutes: function (minutesId) {\n\t\tcheck(minutesId, String);\n\t\tMinutes.remove(\n\t\t\t{\n\t\t\t  _id: minutesId,\n\t\t\t}\n\t\t);\n\t\tif (typeof(toastr) !== 'undefined') {\n\t\t\ttoastr.success(TAPi18n.__('Minutes deleted succesfully'));\n\t\t}\n\t},\n  deleteProject: function (projectId) {\n\t\tcheck(projectId, String);\n\t\tProjects.remove(\n\t\t\t{\n\t\t\t  _id: projectId,\n\t\t\t}\n\t\t);\n\t\tif (typeof(toastr) !== 'undefined') {\n\t\t\ttoastr.success(TAPi18n.__('Project deleted succesfully'));\n\t\t}\n\t},\n});\n","Tasks = new Mongo.Collection('tasks');\nMinutes = new Mongo.Collection('minutes');\nProjects = new Mongo.Collection('projects');\nSettingsRKTasks = new Mongo.Collection('settingsrktasks');\n\nTasks.allow( {\n\t\tinsert: function (userId) {return !! userId; },\n\t\tupdate: function (userId) {return !!userId; },\n    remove: function (userId) {return !!userId; },\n});\n\nMinutes.allow( {\n\t\tinsert: function (userId) {return !! userId; },\n\t\tupdate: function (userId) {return !!userId; },\n    remove: function (userId) {return !!userId; },\n});\n\nProjects.allow( {\n\t\tinsert: function (userId) {return !! userId; },\n\t\tupdate: function (userId) {return !!userId; },\n    remove: function (userId) {return !!userId; },\n});\n\nSettingsRKTasks.allow( {\n\t\tinsert: function (userId) {return !! userId; },\n\t\tupdate: function (userId) {return !!userId; },\n    remove: function (userId) {return !!userId; },\n});\n\nif (Meteor.isServer) {\n\tif (typeof Tasks.createIndex === 'function') {\n\t\tTasks.createIndex({ full: \"text\" }, { name: \"TextIndex\" });\n\t}\n\telse {\n\t\tif (typeof Tasks._ensureIndex === 'function') {\n\t\t\tTasks._ensureIndex( { full: \"text\" }, {name: \"TextIndex\"});\n\t\t}\n\t}\n\n\tif (typeof Minutes.createIndex === 'function') {\n\t\tMinutes.createIndex({ full: \"text\" }, { name: \"TextIndex\" });\n\t}\n\telse {\n\t\tif (typeof Minutes._ensureIndex === 'function') {\n\t\t\tMinutes._ensureIndex( { full: \"text\" }, {name: \"TextIndex\"});\n\t\t}\n\t}\n\n\tif (typeof Projects.createIndex === 'function') {\n\t\tProjects.createIndex({ full: \"text\" }, { name: \"TextIndex\" });\n\t}\n\telse {\n\t\tif (typeof Projects._ensureIndex === 'function') {\n\t\t\tProjects._ensureIndex( { full: \"text\" }, {name: \"TextIndex\"});\n\t\t}\n\t}\n} //end if Server\n\nFollowUp = new Mongo.Collection('FollowUp');\n\nFollowUp.allow( {\n\t\tinsert: function (userId) {return !! userId; },\n\t\tupdate: function (userId) {return !!userId; },\n    remove: function (userId) {return !!userId; },\n});\n","if (Meteor.settings.public.show.tasks) {\n  Router.route(\"/tasks/:filterBy?/:filterVal?\", {\n    name: \"tasks\",\n    waitOn: function () {\n      RKCore.log(\"this.params.filterBy : \" + this.params.filterBy);\n      RKCore.log(\"this.params.filterVal : \" + this.params.filterVal);\n      if (this.params.filterBy === \"project\") {\n        Meteor.subscribe(\"tasksByProjectId\", this.params.filterVal);\n      }\n      else if (this.params.filterBy === \"author\") {\n        Meteor.subscribe(\"tasksByAuthorId\", this.params.filterVal);\n      }\n      else if (this.params.filterBy === \"authorUserId\") {\n        //les taches ou je suis autheur\n        Meteor.subscribe(\"authorTasksByUserId\");\n      }\n      else if (this.params.filterBy === \"actionee\") {\n        Meteor.subscribe(\"tasksByActioneeId\", this.params.filterVal);\n      }\n      else if (this.params.filterBy === \"minutes\") {\n        Meteor.subscribe(\"tasksByMinutesId\", this.params.filterVal);\n      }\n      else {\n        Meteor.subscribe(\"tasks\");\n      }\n      return [\n        Meteor.subscribe(\"projects\"),\n        Meteor.subscribe(\"members\"),\n        Meteor.subscribe(\"allMinutes\"),\n      ];\n    },\n  });\n\n  Router.route(\"/projects\", {\n    name: \"viewProjects\",\n    waitOn: function () {\n      Meteor.subscribe(\"projects\");\n      Meteor.subscribe(\"tasks\");\n      return [Meteor.subscribe(\"members\")];\n    },\n  });\n\n  Router.route(\"/project/edit/:_id\", {\n    name: \"editProject\",\n    data: function () {\n      var usernames = [];\n      var members = Members.collection.find().fetch();\n      var data = {};\n      var nMembers = members.length;\n      var i;\n      data.currentProject = Projects.findOne(this.params._id);\n\n      for (i = 0; i < nMembers; i++) {\n          usernames.push(members[i].profile.nickname);\n      }\n      data.usernames = usernames;\n      return data;\n    },\n    waitOn: function () {\n      return [\n        Meteor.subscribe(\"project\", this.params._id),\n        Meteor.subscribe(\"minutesByProjectId\", this.params._id),\n        Meteor.subscribe(\"tasksByProjectId\", this.params._id),\n        Meteor.subscribe(\"members\"),\n        Meteor.subscribe(\"tags\"),\n       ];\n    },\n  });\n\n\n  Router.route(\"/task/edit/:_id/:filterBy?/:filterVal?\", {\n    name: \"editTask\",\n    data: function () {\n      var usernames = [];\n      var members = Members.collection.find().fetch();\n      var data = {};\n      var nMembers = members.length;\n      var i;\n      data.currentTask = Tasks.findOne(this.params._id);\n\n      for (i = 0; i < nMembers; i++) {\n          usernames.push(members[i].profile.nickname);\n      }\n      data.usernames = usernames;\n      data.filterBy = this.params.filterBy;\n      data.filterVal = this.params.filterVal;\n      RKCore.log(data);\n      return data;\n    },\n    waitOn: function () {\n      return [\n        Meteor.subscribe(\"task\", this.params._id),\n        Meteor.subscribe(\"members\"),\n        Meteor.subscribe(\"projects\"),\n        Meteor.subscribe(\"allMinutes\"),\n        Meteor.subscribe(\"tags\"),\n       ];\n    },\n  });\n\n  Router.route(\"/task/table/edit\", {\n    name: \"editTasksTable\",\n    data: function () {\n      return true;\n    },\n    waitOn: function () {\n      return [\n        Meteor.subscribe(\"members\"),\n       ];\n    },\n  });\n\n  Router.route(\"/minutes/:filterBy?/:filterVal?\", {\n    name: \"minutes\",\n    waitOn: function () {\n      RKCore.log(\"this.params.filterBy : \" + this.params.filterBy);\n      RKCore.log(\"this.params.filterVal : \" + this.params.filterVal);\n      if (this.params.filterBy === \"project\") {\n        // filterVal = projectName\n        Meteor.subscribe(\"minutesByProjectId\", this.params.filterVal);\n      }\n      else if (this.params.filterBy === \"author\") {\n        // filterVal = authorId\n        Meteor.subscribe(\"minutesByAuthorId\", this.params.filterVal);\n      }\n      else {\n        Meteor.subscribe(\"allMinutes\");\n      }\n      return [\n        Meteor.subscribe(\"members\"),\n        Meteor.subscribe(\"projects\"),\n      ];\n    },\n  });\n\n  Router.route(\"/editMinutes/:_id/:filterBy?/:filterVal?\", {\n    name: \"editMinutes\",\n    data: function () {\n      var usernames = [];\n      var members = Members.collection.find().fetch();\n      var data = {};\n      var nMembers = members.length;\n      var i;\n      data.currentMinutes = Minutes.findOne(this.params._id);\n\n      for (i = 0; i < nMembers; i++) {\n          usernames.push(members[i].profile.nickname);\n      }\n      data.usernames = usernames;\n      data.filterBy = this.params.filterBy;\n      data.filterVal = this.params.filterVal;\n      return data;\n    },\n    waitOn: function () {\n      return [\n        Meteor.subscribe(\"minutes\", this.params._id),\n        Meteor.subscribe(\"members\"),\n        Meteor.subscribe(\"projects\"),\n        Meteor.subscribe(\"tags\"),\n        Meteor.subscribe(\"SettingsRKTasks\"),\n        Meteor.subscribe(\"tasksByMinutesId\", this.params._id),\n       ];\n    },\n  });\n\n\n  Router.route(\"/print/task/:_id/:serverToken?/:serverTokenVal?\", {\n    name: \"printTask\",\n    layoutTemplate: 'printLayout',\n    data: function () {\n      var usernames = [];\n      var members = Members.collection.find().fetch();\n      var data = {};\n      var nMembers = members.length;\n      var i;\n      data.currentTask = Tasks.findOne(this.params._id);\n\n      for (i = 0; i < nMembers; i++) {\n          usernames.push(members[i].profile.nickname);\n      }\n      data.usernames = usernames;\n      return data;\n    },\n    waitOn: function () {\n      return [\n        Meteor.subscribe(\"members\"),\n        Meteor.subscribe(\"tags\"),\n        Meteor.subscribe(\"allMinutes\"),\n        Meteor.subscribe(\"task\", this.params._id),\n        Meteor.subscribe(\"projects\"),\n       ];\n    },\n  });\n\n  Router.route(\"/print/minutes/:_id/:serverToken?/:serverTokenVal?\", {\n    name: \"printMinutes\",\n    layoutTemplate: 'printLayout',\n    data: function () {\n      var usernames = [];\n      var members = Members.collection.find().fetch();\n      var data = {};\n      var nMembers = members.length;\n      var i;\n      data.currentMinutes = Minutes.findOne(this.params._id);\n\n      for (i = 0; i < nMembers; i++) {\n          usernames.push(members[i].profile.nickname);\n      }\n      data.usernames = usernames;\n      return data;\n    },\n    waitOn: function () {\n      return [\n        Meteor.subscribe(\"minutes\", this.params._id),\n        Meteor.subscribe(\"members\"),\n        Meteor.subscribe(\"tags\"),\n        Meteor.subscribe(\"tasksByMinutesId\", this.params._id),\n       ];\n    },\n  });\n\n  Router.route(\"/followup\", {\n    name: \"followup\",\n    waitOn: function () {\n      return [\n        Meteor.subscribe(\"followup\"),\n        Meteor.subscribe(\"members\"),\n      ];\n    },\n  });\n}\n","Meteor.publish(\"projectTasks\", function (projectName) {\n  var regExp = new RegExp(\"(\" + projectName + \")\", \"ig\");\n  check(projectName, String);\n  RKCore.log(projectName);\n  return Tasks.find({ projects: regExp });\n});\n\nMeteor.publish(\"SettingsRKTasks\", function () {\n  return SettingsRKTasks.find({});\n});\n\nMeteor.publish(\"actioneeTasks\", function (actionee) {\n  var regExp = new RegExp(\"(\" + actionee + \")\", \"ig\");\n  check(actionee, String);\n  RKCore.log(actionee);\n  return Tasks.find({ actionee: regExp });\n});\n\nMeteor.publish(\"minutesTasks\", function (minutesName) {\n  var regExp = new RegExp(\"(\" + minutesName + \")\", \"ig\");\n  check(minutesName, String);\n  RKCore.log(\"Filter by minutesName :\" + minutesName);\n  return Tasks.find({ includedInMinutes: regExp });\n});\n\nMeteor.publish(\"minutesTasksByMinutesId\", function (minutesId) {\n  var myMinutes = Minutes.findOne(minutesId);\n  var minutesName = myMinutes.minutesName;\n  var regExp = new RegExp(\"(\" + minutesName + \")\", \"ig\");\n  check(minutesId, String);\n  RKCore.log(\"Filter by minutesName :\" + minutesName);\n  return Tasks.find({ includedInMinutes: regExp });\n});\n\nMeteor.publish(\"tasksByMinutesId\", function (minutesId) {\n  check(minutesId, String);\n  return Tasks.find({ minutesIds: {$in: [minutesId]} });\n});\n\nMeteor.publish(\"minutesByProjectId\", function (projectId) {\n  check(projectId, String);\n  return Minutes.find({ projectsIds: {$in: [projectId]} });\n});\n\nMeteor.publish(\"minutesByAuthorId\", function (authorId) {\n  check(authorId, String);\n  return Minutes.find({ addedBy: authorId });\n});\n\nMeteor.publish(\"tasksByActioneeId\", function (id) {\n  check(id, String);\n  return Tasks.find({ actioneeIds: {$in: [id]} });\n});\n\nMeteor.publish(\"tasksByProjectId\", function (projectId) {\n  check(projectId, String);\n  return Tasks.find({ projectsIds: {$in: [projectId]} });\n});\n\nMeteor.publish(\"authorTasks\", function (author) {\n  var member = Members.collection.findOne({\"profile.nickname\": author});\n  var accountId;\n  check(author, String);\n  RKCore.log(\"Filtre par author :\" + author);\n  if (typeof member !== 'undefined') {\n    accountId = member.accountId;\n    RKCore.log(\"accountId :\" + accountId);\n    return Tasks.find({ addedBy: accountId });\n  }\n  return [];\n});\n\nMeteor.publish(\"authorTasksByUserId\", function () {\n  var connectedUser = this.userId;\n  var member = Members.collection.findOne({accountId: connectedUser});\n  var accountId;\n  RKCore.log(\"connectedUser : \");\n  RKCore.log(connectedUser);\n  RKCore.log(\"Filtre par author account Id :\" + connectedUser);\n  if (typeof member !== 'undefined') {\n    accountId = member.accountId;\n    RKCore.log(\"accountId :\" + accountId);\n    return Tasks.find({ addedBy: accountId });\n  }\n  return [];\n});\n\nMeteor.publish(\"tasksByAuthorId\", function (userId) {\n  check(userId, String);\n  return Tasks.find({ addedBy: userId });\n});\n\nMeteor.publish(\"tasks\", function () {\n  return Tasks.find();\n});\n\nMeteor.publish(\"projects\", function () {\n  return Projects.find();\n});\n\nMeteor.publish(\"project\", function (id) {\n  check(id, String);\n  return Projects.find({\n    _id: id,\n  });\n});\n\nMeteor.publish(\"task\", function (id) {\n  check(id, String);\n  return Tasks.find({\n    _id: id,\n  });\n});\n\nMeteor.publish(\"allMinutes\", function () {\n  return Minutes.find({});\n});\n\nMeteor.publish(\"minutes\", function (minutesId) {\n  check(minutesId, String);\n  return Minutes.find({\n    _id: minutesId,\n  });\n});\n\nMeteor.publish(\"followup\", function () {\n  return FollowUp.find();\n});\n","Meteor.methods({\n\tmarkAsDone: function (taskId) {\n\t\tvar userId = Meteor.userId();\n\t\tcheck(taskId, String);\n\t\tTasks.update(\n\t\t\t {\n\t\t\t\t _id: taskId,\n\t\t\t },\n\t\t\t {\n\t\t\t\t $set:\n\t\t\t\t\t{\n\t\t\t\t\t\teffectiveEndDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\t\t\tpercentageDone: 100,\n\t\t\t\t\t\trealized: \"Yes\",\n\t\t\t\t\t\tmarkedAsDoneBy: userId,\n\t\t\t\t\t\tmodifiedBy: userId,\n\t\t\t\t\t\tmodifiedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\t\t},\n\t\t\t }\n\t\t);\n\n\n\t\tif (typeof(toastr) !== 'undefined') {\n\t\t\ttoastr.success(TAPi18n.__('Task marked as done'));\n\t\t}\n\t},\n\tupdateTask: function (data) {\n\t\tvar full = '';\n\t\tcheck(data, Match.Any);\n\n\t\tfull = full.concat(data.taskContentNoHTML).concat(\" \");\n\t\tfull = full.concat(data.additionalTextNoHTML).concat(\" \");\n    full = full.concat(data.tagsNoHTML).concat(\" \");\n\t\tfull = full.concat(data.otherProjectsNoHTML).concat(\" \");\n\t\tpreviousTask = Tasks.findOne(data.taskId);\n\t\tTasks.update(\n\t\t\t{\n\t\t\t  $and: [\n\t\t\t  \t{\n\t\t\t\t\t\t_id: data.taskId,\n\t\t\t\t\t},\n\t\t\t  ],\n\t\t\t},\n\t\t\t{\n\t\t      scheduledStartDate: data.scheduledStartDate,\n\t\t      effectiveStartDate: data.effectiveStartDate,\n\t\t      scheduledEndDate: data.scheduledEndDate,\n\t\t      effectiveEndDate: data.effectiveEndDate,\n\t\t      taskContent: data.taskContent,\n\t\t\t\t\trealized: data.realized,\n\t\t\t\t\tprojectsIds: data.projectsIds,\n\t\t\t\t\tminutesIds: data.minutesIds,\n\t\t\t\t\tactioneeIds: data.actioneeIds,\n\t\t\t\t\ttags: data.tags,\n\t\t\t\t\totherProjects: data.otherProjects,\n\t\t\t\t\tadditionalText: data.additionalText,\n\t\t\t\t\tactionee: data.actionee,\n\t\t\t\t\tpercentageDone: data.percentageDone,\n\t\t\t\t\taddedBy: previousTask.addedBy,\n\t\t\t\t\taddedDate: previousTask.addedDate,\n\t\t\t\t\tmodifiedBy: Meteor.userId(),\n\t\t\t\t\tmodifiedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\t\tfull: full,\n\t\t\t\t\tsearchResultFromTasks: true,\n\t\t\t\t\tshowInGantt: data.showInGantt,\n\t\t\t\t\tsendReminder: data.sendReminder,\n\t\t\t\t\tsendReminderActionee: data.sendReminderActionee,\n\t\t\t},\n\t\t\t{\n\t\t\t    upsert: true,\n\t\t\t}\n\t\t);\n\t},\n\tduplicateTask: function (taskId) {\n\t\tvar previousTask = Tasks.findOne(taskId);\n\t\tcheck(taskId, String);\n\t\tnewTaskId = Tasks.insert(\n\t\t\t{\n\t\t\t\tscheduledStartDate: previousTask.scheduledStartDate,\n\t\t\t\teffectiveStartDate: previousTask.effectiveStartDate,\n\t\t\t\tscheduledEndDate: previousTask.scheduledEndDate,\n\t\t\t  effectiveEndDate: previousTask.effectiveEndDate,\n\t\t\t\ttaskContent: previousTask.taskContent,\n\t\t\t\trealized: previousTask.realized,\n\t\t\t\tprojectsIds: previousTask.projectsIds,\n\t\t\t\tminutesIds: previousTask.minutesIds,\n\t\t\t\tactioneeIds: previousTask.actioneeIds,\n\t\t\t\ttags: previousTask.tags,\n\t\t\t\totherProjects: previousTask.otherProjects,\n\t\t\t\tadditionalText: previousTask.additionalText,\n\t\t\t\tactionee: previousTask.actionee,\n\t\t\t\tpercentageDone: previousTask.percentageDone,\n\t\t\t\taddedBy: Meteor.userId(),\n\t\t\t\taddedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\tfull: previousTask.full,\n\t\t\t\tsearchResultFromTasks: true,\n\t\t\t\tsendReminder: previousTask.sendReminder,\n\t\t\t\tsendReminderActionee: previousTask.sendReminderActionee,\n\t\t\t}\n\t\t);\n\t\treturn newTaskId;\n\t},\n  createTask: function (data) {\n\t\tvar today = moment();\n\t\tvar scheduledEndDate = moment().businessAdd(2, 'days');\n\t\tvar userId = Meteor.userId();\n    var user = Members.collection.findOne({accountId: userId});\n    var username = user.profile.nickname;\n\t\tvar taskId;\n\t\tvar projectsIds = [];\n\t\tvar minutesIds = [];\n\t\tvar actioneeIds = [];\n\t\tcheck(data, Match.Any);\n    RKCore.log(userId);\n\t\tRKCore.log(user);\n\t\tRKCore.log(username);\n\t\tif (typeof(data.projectsIds) !== 'undefined') {\n\t\t\tprojectsIds = data.projectsIds;\n\t\t}\n\t\tif (typeof(data.minutesIds) !== 'undefined') {\n\t\t\tminutesIds = data.minutesIds;\n\t\t}\n\t\ttaskId = Tasks.insert(\n\t\t\t{\n\t\t\t\tscheduledStartDate: moment(today).format(\"DD.MM.YYYY\"),\n\t\t\t\teffectiveStartDate: \"\",\n\t\t\t\tscheduledEndDate: moment(scheduledEndDate).format(\"DD.MM.YYYY\"),\n\t\t\t  effectiveEndDate: \"\",\n\t\t\t\ttaskContent: \"\",\n\t\t\t\trealized: \"No\",\n\t\t\t\tprojectsIds: projectsIds,\n\t\t\t\tminutesIds: minutesIds,\n\t\t\t\tactioneeIds: actioneeIds,\n\t\t\t\ttags: \"\",\n\t\t\t\totherProjects: \"\",\n\t\t\t\tadditionalText: \"\",\n\t\t\t\tactionee: username,\n\t\t\t\tpercentageDone: 0,\n\t\t\t\taddedBy: Meteor.userId(),\n\t\t\t\taddedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\tfull: \"\",\n\t\t\t\tsearchResultFromTasks: true,\n\t\t\t\tsendReminder: false,\n\t\t\t\tsendReminderActionee: false,\n\t\t\t}\n\t\t);\n\t\treturn taskId;\n\t},\n\tupdateMinutes: function (data) {\n\t\tvar full = '';\n\t\tcheck(data, Match.Any);\n\n\t\tfull = full.concat(data.objective).concat(\" \");\n\t\tfull = full.concat(data.minutesName).concat(\" \");\n\t\tfull = full.concat(data.minutesTitle).concat(\" \");\n\t\tfull = full.concat(data.minutesContentNoHTML).concat(\" \");\n    full = full.concat(data.tagsNoHTML).concat(\" \");\n\t\tpreviousMinutes = Minutes.findOne(data.minutesId);\n\t\tMinutes.update(\n\t\t\t{\n\t\t\t  $and: [\n\t\t\t  \t{\n\t\t\t\t\t\t_id: data.minutesId,\n\t\t\t\t\t},\n\t\t\t  ],\n\t\t\t},\n\t\t\t{\n\t\t      location: data.location,\n\t\t\t\t\tminutesDate: data.minutesDate,\n\t\t\t\t\tauthor: data.author,\n\t\t\t\t\trecipients: data.recipients,\n\t\t\t\t\tobjective: data.objective,\n\t\t\t\t\tattendeesPresent: data.attendeesPresent,\n\t\t\t\t\tminutesContent: data.minutesContent,\n\t\t\t\t\tminutesTitle: data.minutesTitle,\n\t\t\t\t\tminutesName: data.minutesName,\n\t\t\t\t\tprojectsIds: data.projectsIds,\n\t\t\t\t\ttags: data.tags,\n\t\t\t\t\taddedBy: previousMinutes.addedBy,\n\t\t\t\t\taddedDate: previousMinutes.addedDate,\n\t\t\t\t\tmodifiedBy: Meteor.userId(),\n\t\t\t\t\tmodifiedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\t\tfull: full,\n\t\t\t\t\tsearchResultFromTasks: true,\n\t\t\t},\n\t\t\t{\n\t\t\t    upsert: true,\n\t\t\t}\n\t\t);\n\n\t\tMeteor.call('updateTasksTable', data.dataTaskTable, data.minutesId, data.projectsIds);\n\t},\n\tduplicateMinutes: function (minutesId) {\n\t\tvar previousMinutes = Minutes.findOne(minutesId);\n\t\tcheck(minutesId, String);\n\t\tnewMinutesId = Minutes.insert(\n\t\t\t{\n\t\t\t\tminutesContent: previousMinutes.minutesContent,\n\t\t\t\tlocation: previousMinutes.location,\n\t\t\t\tminutesDate: previousMinutes.minutesDate,\n\t\t\t\tattendeesPresent: previousMinutes.attendeesPresent,\n\t\t\t\tauthor: previousMinutes.author,\n\t\t\t\trecipients: previousMinutes.recipients,\n\t\t\t\tobjective: previousMinutes.objective,\n\t\t\t\tprojectsIds: previousMinutes.projectsIds,\n\t\t\t\tminutesTitle: previousMinutes.minutesTitle,\n\t\t\t\tminutesName: previousMinutes.minutesName,\n\t\t\t\ttags: previousMinutes.tags,\n\t\t\t\taddedBy: Meteor.userId(),\n\t\t\t\taddedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\tfull: previousMinutes.full,\n\t\t\t\tsearchResultFromMinutes: true,\n\t\t\t}\n\t\t);\n\t\treturn newMinutesId;\n\t},\n\tduplicateProject: function (id) {\n\t\tvar previous = Projects.findOne(id);\n\t\tcheck(id, String);\n\t\tnewId = Projects.insert(\n\t\t\t{\n\t\t\t\tprojectNumber: previous.projectNumber,\n\t\t\t\tprojectName: previous.projectName,\n\t\t\t\tprojectDescription: previous.projectDescription,\n\t\t\t\tprojectManagerIds: previous.projectManagerIds,\n\t\t\t\ttags: previous.tags,\n\t\t\t\taddedBy: Meteor.userId(),\n\t\t\t\taddedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\tfull: previous.full,\n\t\t\t\tsearchResultFromProject: true,\n\t\t\t}\n\t\t);\n\t\treturn newId;\n\t},\n\tupdateProject: function (data) {\n\t\tvar full = '';\n\t\tcheck(data, Match.Any);\n\t\tfull = full.concat(data.projectNumber).concat(\" \");\n\t\tfull = full.concat(data.projectName).concat(\" \");\n\t\tfull = full.concat(data.projectDescription).concat(\" \");\n    full = full.concat(data.tagsNoHTML).concat(\" \");\n\t\tpreviousProject = Projects.findOne(data.projectId);\n\t\tProjects.update(\n\t\t\t{\n\t\t\t  $and: [\n\t\t\t  \t{\n\t\t\t\t\t\t_id: data.projectId,\n\t\t\t\t\t},\n\t\t\t  ],\n\t\t\t},\n\t\t\t{\n\t\t      projectNumber: data.projectNumber,\n\t\t\t\t\tprojectName: data.projectName,\n\t\t\t\t\tprojectDescription: data.projectDescription,\n\t\t\t\t\tprojectManagerIds: data.projectManagerIds,\n\t\t\t\t\ttags: data.tags,\n\t\t\t\t\taddedBy: previousProject.addedBy,\n\t\t\t\t\taddedDate: previousProject.addedDate,\n\t\t\t\t\tmodifiedBy: Meteor.userId(),\n\t\t\t\t\tmodifiedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\t\tfull: full,\n\t\t\t\t\tsearchResultFromProject: true,\n\t\t\t},\n\t\t\t{\n\t\t\t    upsert: true,\n\t\t\t}\n\t\t);\n\t},\n\tcreateProject: function () {\n\t\tvar projectId;\n\t\tvar userId = Meteor.userId();\n\t\tprojectId = Projects.insert(\n\t\t\t{\n\t\t\t\tprojectNumber: \"\",\n\t\t\t\tprojectName: \"\",\n\t\t\t\tprojectDescription: \"\",\n\t\t\t\tprojectManagerIds: [userId],\n\t\t\t\taddedBy: userId,\n\t\t\t\taddedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\ttags: \"\",\n\t\t\t\tfull: \"\",\n\t\t\t\tsearchResultFromProjects: true,\n\t\t\t}\n\t\t);\n\t\treturn projectId;\n\t},\n\tcreateMinutes: function (data) {\n\t\tvar minutesId;\n\t\tvar userId = Meteor.userId();\n    var user = Members.collection.findOne({accountId: userId});\n    var username = user.profile.nickname;\n\t\tvar projectsIds = [];\n\t\tcheck(data, Match.Any);\n\t\tif (typeof(data.projectsIds) !== 'undefined') {\n\t\t\tprojectsIds = data.projectsIds;\n\t\t}\n\t\tminutesId = Minutes.insert(\n\t\t\t{\n\t\t\t\tminutesName: \"\",\n\t\t\t\tminutesTitle: \"\",\n\t\t\t\tlocation: \"\",\n\t\t\t\tminutesDate: moment().format(\"DD.MM.YYYY\"),\n\t\t\t\tauthor: username,\n\t\t\t\trecipients: username,\n\t\t\t\tattendeesPresent: username,\n\t\t\t\tobjective: \"\",\n\t\t\t\tminutesContent: \"\",\n\t\t\t\tprojectsIds: projectsIds,\n\t\t\t\taddedBy: Meteor.userId(),\n\t\t\t\taddedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\ttags: \"\",\n\t\t\t\tfull: \"\",\n\t\t\t\tsearchResultFromMinutes: true,\n\t\t\t}\n\t\t);\n\t\treturn minutesId;\n\t},\n\tupdateTasksTable: function (data, minutesId, projectsIds) {\n\t\tvar i;\n    var arrayLength = data.length;\n\t\tvar today = moment();\n\t\tvar full = \"\";\n\t\tvar scheduledEndDate;\n\t\tvar actionee;\n\t\tcheck(data, Match.Any);\n\t\tcheck(minutesId, String);\n\t\tcheck(projectsIds, [String]);\n    for (i = 0; i < arrayLength; i++) {\n      RKCore.log(data[i]);\n\t\t\tfull = \"\";\n\t\t\tif (!data[i].scheduledEndDate) {\n\t\t\t\tscheduledEndDate = \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tscheduledEndDate = data[i].scheduledEndDate;\n\t\t\t}\n\t\t\tif (!data[i].actionee) {\n\t\t\t\tactionee = \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tactionee = data[i].actionee;\n\t\t\t}\n\t\t\tif (data[i].taskContent) {\n\t\t\t\tfull = full.concat(data[i].taskContent).concat(\" \");\n\t\t\t\tTasks.insert(\n\t\t\t\t\t{\n\t\t\t\t\t\tscheduledStartDate: moment(today).format(\"DD.MM.YYYY\"),\n\t\t\t\t\t\teffectiveStartDate: \"\",\n\t\t\t\t\t\tscheduledEndDate: scheduledEndDate,\n\t\t\t\t\t  effectiveEndDate: \"\",\n\t\t\t\t\t\ttaskContent: data[i].taskContent,\n\t\t\t\t\t\trealized: \"No\",\n\t\t\t\t\t\tprojectsIds: projectsIds,\n\t\t\t\t\t\tminutesIds: [minutesId],\n\t\t\t\t\t\ttags: \"\",\n\t\t\t\t\t\tadditionalText: \"\",\n\t\t\t\t\t\tactionee: actionee,\n\t\t\t\t\t\tpercentageDone: 0,\n\t\t\t\t\t\taddedBy: Meteor.userId(),\n\t\t\t\t\t\taddedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\t\t\tfull: full,\n\t\t\t\t\t\tsearchResultFromTasks: true,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n    }\n\t},\n\tsaveTasksTable: function (data) {\n\t\tvar i;\n    var arrayLength = data.length;\n\t\tvar today = moment();\n\t\tvar full = \"\";\n\t\tvar scheduledEndDate;\n\t\tvar actionee;\n\t\tcheck(data, Match.Any);\n    for (i = 0; i < arrayLength; i++) {\n      RKCore.log(data[i]);\n\t\t\tfull = \"\";\n\t\t\tif (!data[i].scheduledEndDate) {\n\t\t\t\tscheduledEndDate = \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tscheduledEndDate = data[i].scheduledEndDate;\n\t\t\t}\n\t\t\tif (!data[i].actionee) {\n\t\t\t\tactionee = \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tactionee = data[i].actionee;\n\t\t\t}\n\t\t\tif (data[i].taskContent) {\n\t\t\t\tfull = full.concat(data[i].taskContent).concat(\" \");\n\t\t\t\tfull = full.concat(data[i].includedInMinutes).concat(\" \");\n\t\t\t\tTasks.insert(\n\t\t\t\t\t{\n\t\t\t\t\t\tscheduledStartDate: moment(today).format(\"DD.MM.YYYY\"),\n\t\t\t\t\t\teffectiveStartDate: \"\",\n\t\t\t\t\t\tscheduledEndDate: scheduledEndDate,\n\t\t\t\t\t  effectiveEndDate: \"\",\n\t\t\t\t\t\ttaskContent: data[i].taskContent,\n\t\t\t\t\t\trealized: \"No\",\n\t\t\t\t\t\ttags: \"\",\n\t\t\t\t\t\tadditionalText: \"\",\n\t\t\t\t\t\tactionee: actionee,\n\t\t\t\t\t\tpercentageDone: 0,\n\t\t\t\t\t\taddedBy: Meteor.userId(),\n\t\t\t\t\t\taddedDate: moment().format(\"DD.MM.YYYY HH:mm\"),\n\t\t\t\t\t\tfull: full,\n\t\t\t\t\t\tsearchResultFromTasks: true,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n    }\n\t},\n});\n","Meteor.methods({\n  generatePDF: function (data) {\n    var fileName = \"print.pdf\";\n    var url = \"http://rationalk.ch\";\n    var set = SettingsRKTasks.findOne({name: \"folderPathForMinutesPrint\"});\n    var options = {\n      renderDelay: 5000,\n      \"paperSize\": {\n        \"format\": \"Letter\",\n        \"orientation\": \"portrait\",\n        \"margin\": \"1cm\",\n      },\n    };\n\t\tif (typeof(set) !== 'undefined') {\n\t\t\tfolderPathForMinutesPrint = set.value;\n      // Remove last trailing slash if any :\n      folderPathForMinutesPrint = folderPathForMinutesPrint.replace(/\\/$/, \"\");\n\t\t}\n    else {\n      folderPathForMinutesPrint = \"~/Downloads\";\n    }\n    if (typeof(data.fileName) !== 'undefined') {\n      fileName = data.fileName;\n    }\n    filePath = folderPathForMinutesPrint + \"/\" + fileName;\n    if (typeof(data.url) !== 'undefined') {\n      url = data.url + '/serverToken/1234';\n      //var url = \"http://localhost:3000/print/minutes/6ZiBTbyC5ddmhi9nX/serverToken/1234\";\n    }\n    check(data, Match.Any);\n    webshot(url, filePath, options, function (err) {\n        RKCore.log(\"Screenshot (\" + url + \") saved : \" + filePath);\n        if (err) {\n          RKCore.log(\"err : \");\n          RKCore.log(err);\n        }\n      });\n    return filePath;\n  },\n});\n","Meteor.methods({\n  getMyTasksToDo: function () {\n    var tasks = '';\n    var userId = Meteor.userId();\n    var memberId;\n    var nTasks;\n    var i;\n    var formattedProjectNames = [];\n    var formattedActioneeNames = [];\n    var formattedMinutesNames = [];\n    memberId = Members.collection.findOne({accountId: userId})._id;\n    tasks = Tasks.find(\n      {\n        $and: [\n          {\n            actioneeIds: {\n              $in: [memberId],\n            },\n          },\n          {\n            realized: \"No\",\n          },\n        ],\n      }).fetch();\n\n    nTasks = tasks.length;\n\n    for (i = 0; i < nTasks; i++) {\n      nMinutesIds = tasks[i].minutesIds.length;\n      formattedMinutesNames = [];\n      for (j = 0; j < nMinutesIds; j++) {\n        minutes = Minutes.findOne(tasks[i].minutesIds[j]);\n        formattedMinutesNames.push(minutes.minutesName);\n      }\n      tasks[i].formattedMinutesNames =  formattedMinutesNames;\n\n      nProjectIds = tasks[i].projectsIds.length;\n      formattedProjectNames = [];\n      for (j = 0; j < nProjectIds; j++) {\n        project = Projects.findOne(tasks[i].projectsIds[j]);\n        formattedProjectNames.push(project.projectNumber);\n      }\n      tasks[i].formattedProjectNames =  formattedProjectNames;\n\n      nActioneeIds = tasks[i].actioneeIds.length;\n      formattedActioneeNames = [];\n      for (j = 0; j < nActioneeIds; j++) {\n        member = Members.collection.findOne(tasks[i].actioneeIds[j]);\n        formattedActioneeNames.push(member.profile.nickname);\n      }\n      tasks[i].formattedActioneeNames =  formattedActioneeNames;\n    }\n\n\n    RKCore.log(\"tasks object sent to dashboard : \");\n    RKCore.log(tasks);\n\n    return tasks;\n  },\n});\n","Meteor.methods({\n  getSettingsRKTasks: function (name) {\n    var value = '';\n    var settings;\n    check(name, String);\n    RKCore.log(\"getSettingsRKTasks server method\");\n    RKCore.log(SettingsRKTasks.find({}).fetch());\n    settings = SettingsRKTasks.findOne({name: name});\n    if (typeof(settings) !== 'undefined') {\n      value = settings.value;\n    }\n    RKCore.log(\"value :\");\n    RKCore.log(value);\n    return value;\n  },\n  updateSettingsRKTasks: function (data) {\n    RKCore.log(data);\n    check(data, Match.Any);\n    if (typeof(data.prefixMinutes) !== 'undefined') {\n      SettingsRKTasks.update(\n  \t\t\t{\n  \t\t\t  name: \"prefixMinutes\",\n  \t\t\t},\n        {\n          $set: {value: data.prefixMinutes},\n        },\n        {\n  \t\t\t  upsert: true,\n  \t\t\t}\n      );\n    }\n    if (typeof(data.folderPathForMinutesPrint) !== 'undefined') {\n      SettingsRKTasks.update(\n  \t\t\t{\n  \t\t\t  name: \"folderPathForMinutesPrint\",\n  \t\t\t},\n        {\n          $set: {value: data.folderPathForMinutesPrint},\n        },\n        {\n  \t\t\t  upsert: true,\n  \t\t\t}\n      );\n    }\n    RKCore.log(SettingsRKTasks.find({}).fetch());\n    return true;\n  },\n});\n","if (Meteor.isServer) {\n\t\tsendReminders = function () {\n\t      \tMeteor.call('sendReminders');\n\t\t};\n\t\tsendRemindersActionee = function () {\n\t      \tMeteor.call('sendRemindersActionee');\n\t\t};\n\n\t\tSyncedCron.add({\n\t\t\t  name: 'Send task event reminders',\n\t\t\t  schedule: function (parser) {\n\t\t\t    return parser.text(\"at 08:00 am\");\n\t\t\t\t\t//return parser.text(\"every 1 minute\");\n\t\t\t  },\n\t\t\t  job: sendReminders,\n\t\t});\n\n\t\tSyncedCron.add({\n\t\t\t  name: 'Send task event reminders to actionee',\n\t\t\t  schedule: function (parser) {\n\t\t\t    return parser.text(\"at 08:01 am\");\n\t\t\t\t\t//return parser.text(\"every 1 minute\");\n\t\t\t  },\n\t\t\t  job: sendRemindersActionee,\n\t\t});\n\n\t\tMeteor.methods({\n\t\t\tsendReminders: function () {\n\t\t\t\tvar html;\n\t\t\t\tvar editLink;\n\t\t\t\tallTasks = Tasks.find(\n\t\t\t\t\t{\n\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsendReminder: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tscheduledEndDate: moment().format('DD.MM.YYYY'),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t).fetch();\n\n\t\t\t\tnTasks = allTasks.length;\n\t\t\t\tRKCore.log(\"I will send \" + nTasks + \" email(s)\");\n\n\t\t\t\tfor (i = 0; i < nTasks; i++) {\n\t\t\t\t\thtml = '<p><strong>' + TAPi18n.__(\"Task content\") + ' :</strong>' + allTasks[i].taskContent + '</p>';\n\n\t\t\t\t\teditLink = '<p><a href=\"' +\n\t\t\t\t\t\tRouter.routes.editTask.url({_id: allTasks[i]._id})\n\t\t\t\t\t\t+ '\" title=\"' + TAPi18n.__('Edit') + '\"'\n\t\t\t\t\t\t+ '>'\n\t\t\t\t\t\t+ Router.routes.editTask.url({_id: allTasks[i]._id})\n\t\t\t\t\t\t+ '</a></p>';\n\t\t\t\t\thtml = html + editLink;\n\n\t\t\t\t\thtml = html + '<p>' + TAPi18n.__('Scheduled end date') + ' :' + allTasks[i].scheduledEndDate + '</p>';\n\n\t\t\t\t\thtml = html + '<p>' + TAPi18n.__('You are receiving this email because you are author of this task') + '.</p>';\n\n\t\t\t\t\tEmail.send({\n\t\t        from: Meteor.settings.rationalK_mail.from,\n\t\t        to: Members.collection.findOne({accountId: allTasks[i].addedBy}).email,\n\t\t        subject: \"[\" + Meteor.settings.public.header_text + \"] \" + TAPi18n.__(\"Task reminder\"),\n\t\t        html: html,\n\t\t      });\n\t\t\t\t}\n\t\t    return true;\n\t\t},\n\t\tsendRemindersActionee: function () {\n\t\t\tvar html;\n\t\t\tvar editLink;\n\t\t\tallTasks = Tasks.find(\n\t\t\t\t{\n\t\t\t\t\t$and: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsendReminderActionee: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tscheduledEndDate: moment().format('DD.MM.YYYY'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t}\n\t\t\t).fetch();\n\n\t\t\tnTasks = allTasks.length;\n\t\t\tRKCore.log(\"I will send \" + nTasks + \" email(s) to the actionee\");\n\n\t\t\tfor (i = 0; i < nTasks; i++) {\n\t\t\t\tsenderMember = Members.collection.findOne({accountId: allTasks[i].addedBy});\n\t\t\t\tsender = {\n\t\t\t\t\tname: senderMember.profile.name,\n\t\t\t\t\taddress: senderMember.email,\n\t\t\t\t};\n\t\t\t\tif (typeof(senderMember.profile.locale) !== 'undefined') {\n\t\t\t\t\tsenderLang = senderMember.profile.locale;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsenderLang = 'en';\n\t\t\t\t}\n\t\t\t\tRKCore.log(\"senderLang : \");\n\t\t\t\tRKCore.log(senderLang);\n\t\t\t\t//RKCore.log(TAPi18n.getLanguages());\n\t\t\t\tRKCore.log(TAPi18n.__(\"Task content\", {}, senderLang));\n\t\t\t\tsenderText = '\"' + senderMember.profile.name + '\" <' + senderMember.email + '>';\n\t\t\t\tRKCore.log(\"sender :\");\n\t\t\t\tRKCore.log(sender);\n\n\t\t\t\thtml = '<p><strong>' + TAPi18n.__(\"Task content\", {}, senderLang) + ' :</strong>' + allTasks[i].taskContent + '</p>';\n\n\t\t\t\teditLink = '<p><a href=\"' +\n\t\t\t\t\tRouter.routes.editTask.url({_id: allTasks[i]._id})\n\t\t\t\t\t+ '\" title=\"' + TAPi18n.__('Edit', {}, senderLang) + '\"'\n\t\t\t\t\t+ '>'\n\t\t\t\t\t+ Router.routes.editTask.url({_id: allTasks[i]._id})\n\t\t\t\t\t+ '</a></p>';\n\t\t\t\thtml = html + editLink;\n\n\t\t\t\thtml = html + '<p>' + TAPi18n.__('Scheduled end date', {}, senderLang) + ' :' + allTasks[i].scheduledEndDate + '</p>';\n\n\t\t\t\thtml = html + '<p>' + TAPi18n.__('You are receiving this email because you have been listed as an actionee for this task by', {}, senderLang) + \" \" + senderMember.profile.name + '.</p>';\n\n\t\t\t\tRKCore.log(\"html : \");\n\t\t\t\tRKCore.log(html);\n\n\t\t\t\tactioneeIds = allTasks[i].actioneeIds;\n\t\t\t\tRKCore.log(\"actioneeIds : \");\n\t\t\t\tRKCore.log(actioneeIds);\n\t\t\t\tnActionee = actioneeIds.length;\n\t\t\t\tto = [];\n\t\t\t\trecipients = '';\n\t\t\t\tfor (j = 0; j < nActionee; j++) {\n\t\t\t\t\tactionee = Members.collection.findOne({_id: actioneeIds[j]});\n\t\t\t\t\tto.push({\n\t\t\t\t\t\tname: actionee.profile.name,\n\t\t\t\t\t\taddress: actionee.email,\n\t\t\t\t\t});\n\t\t\t\t\trecipients = recipients + '\"' + actionee.profile.name + '\" <' + actionee.email + '>,';\n\t\t\t\t}\n\t\t\t\trecipients = recipients.slice(0, - 1);\n\t\t\t\tRKCore.log(\"to : \");\n\t\t\t\tRKCore.log(to);\n\t\t\t\tRKCore.log(\"recipients : \");\n\t\t\t\tRKCore.log(recipients);\n\t\t\t\tEmail.send({\n\t\t\t\t\tfrom: senderText,\n\t\t\t\t\tto: recipients,\n\t\t\t\t\tcc: senderText,\n\t\t\t\t\treplyTo: senderText,\n\t\t\t\t\tsubject: \"[\" + Meteor.settings.public.header_text + \"] \" + TAPi18n.__(\"Task reminder\", {}, senderLang),\n\t\t\t\t\thtml: html,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn true;\n\t},\n\t});\n} // end of is Server check\n","if (Meteor.isServer) {\n  Meteor.methods({\n    createFollowUp: function (data) {\n      check(data, {\n          text: String,\n          tags: String,\n        }\n      );\n      FollowUp.insert({\n        createdAt: new Date(),\n  \t\t\twho: Meteor.userId(),\n  \t\t\ttags: data.tags,\n  \t\t\ttext: data.text,\n  \t\t});\n      return true;\n    },\n  }); //end of server methods\n}// end of if Server\n","RKCore.packageBackup.push(\n  {\n    \"collections\": [\"tasks\", \"minutes\", \"projects\", \"settingsrktasks\"],\n    \"fromPackage\": \"rationalk:tasks\",\n  }\n);\n","Tasks.after.insert(function (userId, doc) {\n  var data = {};\n  var historyType = \"taskCreation\";\n  data.doc = doc;\n  data.previous = this.previous;\n  data.package = \"rationalk:tasks\";\n  text = TAPi18n.__(\"A task has been created\");\n  Meteor.history(text, data, historyType, doc._id);\n});\n","Tasks.after.update(function (userId, doc) {\n  var data = {};\n  var historyType = \"taskUpdated\";\n  var user = Members.collection.findOne({accountId: userId});\n  var username = user.profile.nickname;\n  data.doc = doc;\n  data.previous = this.previous;\n  data.package = \"rationalk:tasks\";\n  text = TAPi18n.__(\"A task has been modified\");\n  Meteor.history(text, data, historyType, doc._id);\n\n  if ((this.previous.realized === \"No\" ) && (doc.realized === \"Yes\")) {\n    html = '<p><strong>' + TAPi18n.__(\"Task content\") + ' :</strong>' + doc.taskContent + '</p>';\n    html = html + '<p><strong>' + TAPi18n.__(\"Marked as done by\") + ' :</strong>' + username + '</p>';\n\n    editLink = '<p><a href=\"' +\n      Router.routes.editTask.url({_id: doc._id})\n      + '\" title=\"' + TAPi18n.__('Edit') + '\"'\n      + '>'\n      + Router.routes.editTask.url({_id: doc._id})\n      + '</a></p>';\n    html = html + editLink;\n\n    html = html + '<p>' + TAPi18n.__('Scheduled end date') + ' :' + doc.scheduledEndDate + '</p>';\n\n    html = html + '<p>' + TAPi18n.__('You are receiving this email because you are author of this task') + '.</p>';\n\n    Email.send({\n      from: Meteor.settings.rationalK_mail.from,\n      to: Members.collection.findOne({accountId: doc.addedBy}).email,\n      subject: \"[\" + Meteor.settings.public.header_text + \"] \" + TAPi18n.__(\"Task marked as done\"),\n      html: html,\n    });\n  }\n});\n","var _ = Package.underscore._,\n    package_name = \"rationalk:tasks\",\n    namespace = \"rationalk:tasks\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"invitation_to_join_info_login\":\"Your username will be your company email.\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\nTAPi18n._registerServerTranslator(\"en\", namespace);\n","var _ = Package.underscore._,\n    package_name = \"rationalk:tasks\",\n    namespace = \"rationalk:tasks\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"fr\"])) {\n  TAPi18n.translations[\"fr\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"fr\"][namespace])) {\n  TAPi18n.translations[\"fr\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"fr\"][namespace], {\"The task has been updated successfully\":\"Tâche mise à jour avec succés\",\"Scheduled start date\":\"Date de début prévisionelle\",\"Effective start date\":\"Date de départ réelle\",\"Scheduled end date\":\"Date de fin prévisionelle\",\"Effective end date\":\"Date de fin réelle\",\"Realized\":\"Realisé\",\"Percentage Done\":\"% realisé\",\"Percentage done\":\"% realisé\",\"The task is still open\":\"La tâche est encore ouverte\",\"Tasks\":\"Tâches\",\"See all minutes for this project\":\"Voir tous les PV pour ce projet\",\"Task reminder\":\"Rappel d'une tâche\",\"Task content\":\"Contenu de la tâche\",\"Send a reminder to the author at 8am on the scheduled end date\":\"Envoyer un rappel à l'auteur à 8 heures à la date de fin prévue\",\"Send a reminder to the actionee at 8am on the scheduled end date\":\"Envoyer un rappel aux réalisateurs à 8 heures à la date de fin prévue\",\"Show task in gantt\":\"Montrer cette tâche dans le gantt\",\"Closed by\":\"Clôturée par\",\"Update gantt\":\"Mettre à jour le gantt\",\"Create a new task\":\"Créer une nouvelle tâche\",\"View all tasks\":\"Voir toutes les tâches\",\"Nothing to show for the moment\":\"Rien à afficher pour le moment\",\"Filter by\":\"Filtrer par\",\"Show realized tasks\":\"Montrer également les tâches déjà réalisées\",\"project\":\"projet\",\"projects\":\"projet(s)\",\"Projects\":\"Projets\",\"All projects\":\"Tous les projets\",\"All actionees\":\"Tous les réalisateurs enregistrés\",\"Author\":\"Auteur\",\"author\":\"auteur\",\"actionee\":\"réalisateur enregistré\",\"Actionee\":\"Réalisateur(s)\",\"Content\":\"Contenu\",\"Added Date\":\"Date de création\",\"Tags\":\"Mots clés\",\"Added date\":\"Date de création\",\"Yes\":\"Oui\",\"No\":\"Non\",\"On condition\":\"Sous réserve\",\"Edit Task\":\"Modifier une tâche\",\"Back to tasks list\":\"Retour à la liste des tâches\",\"Additional text\":\"Informations complémentaires\",\"Mark as done\":\"Marquer comme terminée\",\"A new task has been added successfully\":\"Tâche ajoutée avec succés\",\"Task deleted succesfully\":\"Tâche supprimée avec succès\",\"Task marked as done\":\"Tâche terminée\",\"comma\":\"virgule\",\"dot\":\"point\",\"semicoma\":\"point virgule\",\"tab\":\"tabulation\",\"With quotes\":\"Avec guillemets\",\"Exported csv\":\"Données exportées au format csv à copier coller dans excel\",\"Include in minutes\":\"Inclure dans le procés verbal\",\"Minutes-20151028\":\"PV-28102015\",\"Minutes\":\"PV\",\"Back to minutes list\":\"Retour à la liste des PV\",\"minutes\":\"PV\",\"All minutes\":\"Tous les PV\",\"Quick table import\":\"Import rapide de tâches\",\"The tasks have been imported successfully\":\"Les tâches ont été importées avec succès\",\"Location\":\"Lieu\",\"Date\":\"Date\",\"Recipients\":\"Distribution\",\"Attendees\":\"Présent(s)\",\"Objective\":\"Objectif(s)\",\"Name\":\"Nom\",\"Text\":\"Texte\",\"Save and go back to minutes list\":\"Sauver et retourner à la liste des PV\",\"Task\":\"Tâche\",\"New tasks\":\"Nouvelles tâches\",\"Linked tasks\":\"Tâche(s) liée(s)\",\"Other informations\":\"Autres informations\",\"The task has been duplicated successfully. Please edit the task and save.\":\"La tâche a été dupliquée, vous pouvez maintenant l'éditer et la sauver\",\"Tasks details\":\"Détails des tâches\",\"Create a new project\":\"Créer un projet\",\"ID\":\"Nr\",\"Project name\":\"Nom du projet\",\"Project(s)\":\"Projet(s)\",\"Project description\":\"Description du projet\",\"Project deleted succesfully\":\"Projet supprimé avec succés\",\"Edit project\":\"Modifier un projet\",\"project manager\":\"chef de projet\",\"Project manager\":\"Chef de projet\",\"Back to projects list\":\"Retour à la liste des projets\",\"Save and go back to projects list\":\"Sauver et retourner à la liste des projets\",\"Project number\":\"Numéro de projet\",\"Linked minutes\":\"PV lié(s) à ce projet\",\"Linked task(s)\":\"Tâche(s) liée(s) à ce projet\",\"The project has been updated successfully\":\"Le projet à été mis à jour avec succés\",\"The project has been duplicated successfully. Please edit and save.\":\"Le projet a été dupliqué avec succés. Vous pouvez maintenant le modifier.\",\"Are you sure you want to delete this project ?\":\"Etes-vous sûr de vouloir supprimer ce projet ?\",\"Minutes name\":\"Nom du PV\",\"Minutes title\":\"Titre du PV\",\"Are you sure you want to delete this task ?\":\"Etes-vous sûr de vouloir supprimer cette tâche ?\",\"Are you sure you want to delete this minutes ?\":\"Etes-vous sûr de vouloir supprimer ce PV ?\",\"Add a task to this project\":\"Ajouter une tâche à ce projet\",\"Add minutes to this project\":\"Ecrire un PV pour ce projet\",\"Others projects\":\"Autre(s) projet(s)\",\"Others minutes\":\"Autre(s) PV\",\"View all minutes\":\"Tous les PV\",\"View minutes that I wrote\":\"Les PV que j'ai écris\",\"Create a new minutes\":\"Ecrire un PV\",\"Print\":\"Imprimer\",\"View tasks that I wrote\":\"Les tâches que j'ai écrites\",\"Save and go back to tasks list\":\"Sauver et retourner à la liste des tâches\",\"If you add actionees, you will be able to filter by actionee\":\"Ajouter des réalisateurs aux tâches pour pouvoir filtrer par réalisateur\",\"Show follow-up\":\"Voir le follow-up\",\"My tasks\":\"Mes tâches\",\"It looks that you have no open tasks !\":\"Vous n'avez aucune tâche ouverte !\",\"You are receiving this email because you have been listed as an actionee for this task by\":\"Vous recevez cet email car vous avez été listé comme réalisateur de cette tâche par\",\"You are receiving this email because you are author of this task\":\"Vous recevez cet email car vous êtes auteur de cette tâche\",\"Prefix for minutes name\":\"Prefixe pour les noms des PV\",\"Path to save minutes as pdf\":\"Dossier (server) où enregistrer les minutes en pdf\",\"No trailing slash /\":\"Pas de slash / de fin\",\"Save as a pdf file to predefined server location\":\"Enregistrer en pdf sur le server (endroit prédéfini)\",\"The minutes has been saved to\":\"Le PV a été sauvegardé sous\",\"Other projects\":\"Autres projets\"});\nTAPi18n._registerServerTranslator(\"fr\", namespace);\n"]}