{"version":3,"sources":["rationalk:wikisearch/lib/methods.js","rationalk:wikisearch/lib/collections.js","rationalk:wikisearch/lib/routes.js","rationalk:wikisearch/lib/client/wiki.html","rationalk:wikisearch/lib/client/wiki.js","rationalk:wikisearch/lib/client/wikiInSearchResults.html","rationalk:wikisearch/lib/client/wikiInSearchResults.js"],"names":[],"mappings":";;;;;;;;AAAA,Y;AACA,yB;AACA,iC;AACA,G;AACA,uF;AACA,G;AACA,E;;AAEA,4C;AACA,iE;AACA,E;;AAEA,8C;AACA,S;AACA,e;AACA,Q;AACA,Q;AACA,U;AACA,e;AACA,0B;AACA,6B;AACA,+B;AACA,kC;AACA,oD;AACA,+E;AACA,mE;AACA,gG;AACA,+C;AACA,kC;AACA,sC;AACA,2C;AACA,W;AACA,8C;AACA,mB;AACA,iC;AACA,0B;AACA,qB;AACA,oC;AACA,gC;AACA,gC;AACA,6B;AACA,Y;AACA,W;AACA,+B;AACA,kC;AACA,qC;AACA,6E;AACA,8E;AACA,0E;;AAEA,wC;AACA,wC;AACA,mB;AACA,oB;AACA,wC;AACA,uC;AACA,uC;AACA,qD;AACA,sD;AACA,4C;AACA,0C;AACA,4C;AACA,wD;AACA,W;AACA,gB;AACA,6B;AACA,W;AACA,kD;AACA,wC;AACA,sC;AACA,oC;AACA,W;AACA,gB;AACA,yB;AACA,W;AACA,0B;AACA,sC;AACA,0C;AACA,wC;AACA,S;AACA,O;AACA,oB;AACA,8B;AACA,0B;AACA,O;AACA,K;AACA,G;AACA,Q;AACA,iF;AACA,G;;AAEA,8B;AACA,K;AACA,c;AACA,6B;AACA,Q;AACA,M;AACA,K;AACA,gD;AACA,8C;AACA,gB;AACA,O;AACA,Y;AACA,E;;AAEA,gC;AACA,uF;AACA,E;;;;;;;;;;;;;;;;;;;AC3GA,8D;;AAEA,0B;AACA,iD;AACA,gD;AACA,kD;AACA,G;;AAEA,sB;AACA,2D;AACA,yE;AACA,E;AACA,O;AACA,6D;AACA,0E;AACA,G;AACA,E;AACA,C;;AAEA,yD;;;;;;;;;;;;;;;;;;;ACnBA,uC;AACA,I;AACA,6C;AACA,uB;AACA,yB;AACA,c;AACA,2F;AACA,Q;AACA,M;AACA,K;;AAEA,6D;AACA,qK;;AAEA,0B;AACA,K;AACA,2B;AACA,4C;AACA,K;AACA,I;AACA,I;AACA,C;;;;;;;;;;;;;;;;;;;;ACpBA,mC;AACA,0E;AACA,kB;AACA,mB;AACA,kB;AACA,uB;AACA,wB;AACA,wB;AACA,kC;AACA,uK;AACA,yB;AACA,gD;AACA,Y;AACA,kE;AACA,M;AACA,iB;AACA,mE;AACA,iD;AACA,I;;;;;;;;;;;;;;;;;;;ACnBA,6B;AACA,iC;AACA,4C;AACA,G;AACA,G;;AAEA,4B;AACA,G;;;;;;;;;;;;;;;;;;;;ACNA,4C;AACA,4F;AACA,kB;AACA,mB;AACA,mB;AACA,uB;AACA,kB;AACA,wB;AACA,wB;AACA,qE;AACA,yD;AACA,yD;AACA,oD;AACA,sC;AACA,kD;AACA,iB;AACA,8E;AACA,6D;AACA,6D;AACA,wD;AACA,oB;AACA,qC;AACA,8C;AACA,iB;AACA,8E;AACA,yD;AACA,yD;AACA,oD;AACA,oB;AACA,mC;AACA,uB;AACA,kH;AACA,kC;AACA,oD;AACA,uD;AACA,sF;AACA,qE;AACA,iB;AACA,8F;AACA,0D;AACA,qB;AACA,gC;AACA,I;;;;;;;;;;;;;;;;;;;AC3CA,sC;AACA,iC;AACA,wE;AACA,G;AACA,0C;AACA,0D;AACA,G;AACA,yB;AACA,mC;AACA,4C;AACA,G;AACA,G","file":"/packages/rationalk_wikisearch.js","sourcesContent":["RKWiki = {};\nRKWiki.Collections =  {};\nRKCore.searchResultsPackage.push(\n  {\n    name: \"RKWiki\", // a publication with the name : RKWiki-searchResults should exists\n  }\n);\n\nRKWiki.findAllFullTextSearch = function () {\n  return WikiSearchResults.find({}, {sort: {score: -1}}).fetch();\n};\n\nRKWiki.findFullText = function (searchQuery) {\n  var sr;\n  var response;\n  var i;\n  var j;\n  var obj;\n  var nResults;\n  var query = searchQuery;\n  check(searchQuery, String);\n  WikiSearchResults.remove({});\n  RKCore.log(\"Searching wiki...\");\n  if (typeof Meteor.settings.wiki !== 'undefined') {\n    //action=query&titles=Main%20Page&prop=revisions&rvprop=content&format=json\n    //action=opensearch&format=json&search=test&limit=2&format=json\n    //http://www.imfdb.org/api.php?action=opensearch&format=json&search=test&limit=2&format=json\n    endpoints = Meteor.settings.wiki.endpoints;\n    nEndpoints = endpoints.length;\n    for (j = 0; j < nEndpoints; j++) {\n      endpoint = endpoints[j] + \"/api.php\";\n      try {\n        response = Meteor.http.get(endpoint, {\n          params: {\n            action: \"opensearch\",\n            search: query,\n            limit: 5,\n            //titles: \"Main%20Page\",\n            //prop: \"revisions\",\n            //rvprop: \"content\",\n            \"format\": \"json\",\n          },\n        });\n        //RKCore.log(response);\n        RKCore.log(response.data);\n        queryWiki = response.data[0];\n        articleTitles = response.data[1]; // this is an array of size : limit\n        articleContent = response.data[2]; // this is an array of size : limit\n        articleUrl = response.data[3]; // this is an array of size : limit\n\n        nResults = articleTitles.length;\n        for (i = 0; i < nResults; i++) {\n          obj = {};\n          full = '';\n          RKCore.log(\"articleTitle : \");\n          RKCore.log(articleTitles[i]);\n          obj.title = articleTitles[i];\n          full = full.concat(' ' + articleTitles[i]);\n          if (typeof articleContent !== 'undefined') {\n            RKCore.log(\"articleContent : \");\n            RKCore.log(articleContent[i]);\n            obj.content = articleContent[i];\n            full = full.concat(' ' + articleContent[i]);\n          }\n          else {\n            obj.content = \"\";\n          }\n          if (typeof articleUrl !== 'undefined') {\n            RKCore.log(\"articleUrl : \");\n            RKCore.log(articleUrl[i]);\n            obj.url = articleUrl[i];\n          }\n          else {\n            obj.url = \"\";\n          }\n          obj.full = full;\n          obj.endpoint = endpoints[j];\n          obj.searchResultFromWiki = true;\n          WikiSearchResults.insert(obj);\n        }\n      }\n      catch(error) {\n        RKCore.log(\"Error :\");\n        RKCore.log(error);\n      }\n    }\n  }\n  else {\n    RKCore.log(\"You need to defined wiki in your settings file : settings.json\");\n  }\n\n  sr = WikiSearchResults.find(\n    {\n      $text: {\n        $search: searchQuery,\n      },\n    },\n    {\n      fields: { score: { $meta: 'textScore' } },\n      sort: { score: { $meta: 'textScore' } },\n      limit: 30,\n    });\n  return sr;\n};\n\nRKWiki.findDummy = function () {\n  return WikiSearchResults.find({$text: { $search: \"somethingthatyouwillneverfind\" }});\n};\n","WikiSearchResults = new Mongo.Collection('wikisearchresults');\n\nWikiSearchResults.allow( {\n\t\tinsert: function (userId) {return !! userId; },\n\t\tupdate: function (userId) {return !!userId; },\n    remove: function (userId) {return !!userId; },\n});\n\nif (Meteor.isServer) {\n\tif (typeof WikiSearchResults.createIndex === 'function') {\n\t\tWikiSearchResults.createIndex({ full: \"text\" }, { name: \"TextIndex\" });\n\t}\n\telse {\n\t\tif (typeof WikiSearchResults._ensureIndex === 'function') {\n\t\t\tWikiSearchResults._ensureIndex( { full: \"text\" }, {name: \"TextIndex\"});\n\t\t}\n\t}\n}\n\nRKWiki.Collections.WikiSearchResults = WikiSearchResults;\n","if (Meteor.settings.public.show.wiki) {\n  /*\n  Router.route(\"/wiki/search/:searchQuery\", {\n    name: \"wikisearch\",\n    waitOn: function () {\n      return [\n        Meteor.subscribe(\"wikisearchresults\", this.params.searchQuery), //this.params.query\n      ];\n    },\n  });\n\n  url = Router.routes.wikisearch.path({searchQuery: \"test\"});\n  menuHTML = new Spacebars.SafeString('<li><a href=\"' + url + '\" title=\"Wiki Search\"><strong><span class=\"glyphicon glyphicon-user\"></span></strong> Wiki</a></li>');\n\n  RKCore.packageMenu.push(\n    {\n      \"menuHTML\": menuHTML,\n      \"fromPackage\": \"rationalk:wikisearch\",\n    }\n  );\n  */\n}\n","\nTemplate.__checkName(\"wikisearch\");\nTemplate[\"wikisearch\"] = new Template(\"Template.wikisearch\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"col-md-12\"\n  }, \"\\n\t\t\t\", HTML.DIV({\n    \"class\": \"panel panel-default\"\n  }, \"\\n\t\t\t \t\", HTML.Raw('<div class=\"panel-heading\" style=\"position:relative\">\\n\t\t\t \t\t<h3 class=\"panel-title\">Wiki search</h3>\\n        </div>'), \"\\n\t\t\t\t\", HTML.DIV({\n    \"class\": \"panel-body\"\n  }, \"\\n\t\t\t\t\t\", Blaze._TemplateWith(function() {\n    return {\n      collection: Spacebars.call(view.lookup(\"WikiSearchResults\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"reactiveTable\"));\n  }), \"\\n        \"), \"\\n    \t\"), \"\\n\t\t\"), \"\\n\t\");\n}));\n","Template.wikisearch.helpers({\n\tWikiSearchResults: function () {\n\t\treturn WikiSearchResults.find({}).fetch();\n\t},\n});\n\nTemplate.wikisearch.events({\n});\n","\nTemplate.__checkName(\"wikiInSearchResults\");\nTemplate[\"wikiInSearchResults\"] = new Template(\"Template.wikiInSearchResults\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"post\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"row\"\n  }, \"\\n\t\t\t\", HTML.DIV({\n    \"class\": \"col-md-10\"\n  }, \"\\n\t\t\t\t\", HTML.P(HTML.STRONG(Blaze.View(\"lookup:_\", function() {\n    return Spacebars.mustache(view.lookup(\"_\"), \"Title\");\n  }), \" :\"), \" \", Blaze.View(\"lookup:title\", function() {\n    return Spacebars.mustache(view.lookup(\"title\"));\n  })), \"\\n\t\t\t\t\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"content\"));\n  }, function() {\n    return [ \"\\n\t\t\t\t\t\", HTML.P(HTML.STRONG(Blaze.View(\"lookup:_\", function() {\n      return Spacebars.mustache(view.lookup(\"_\"), \"Content\");\n    }), \" :\"), \" \", Blaze.View(\"lookup:content\", function() {\n      return Spacebars.mustache(view.lookup(\"content\"));\n    })), \"\\n\t\t\t\t\" ];\n  }), \"\\n\t\t\t\t\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"url\"));\n  }, function() {\n    return [ \"\\n\t\t\t\t\t\", HTML.P(HTML.STRONG(Blaze.View(\"lookup:_\", function() {\n      return Spacebars.mustache(view.lookup(\"_\"), \"Url\");\n    }), \" :\"), \" \", Blaze.View(\"lookup:url\", function() {\n      return Spacebars.mustache(view.lookup(\"url\"));\n    })), \"\\n\t\t\t\t\" ];\n  }), \"\\n\t\t\t\"), \"\\n\t\t\t\", HTML.DIV({\n    \"class\": \"col-md-2\"\n  }, \"\\n\t\t\t\t\", HTML.Raw('<span class=\"label label-success\"> Wiki</span>'), HTML.Raw(\"<br>\"), \"\\n\t\t\t\t\", HTML.SPAN({\n    \"class\": \"label label-success\"\n  }, \" \", Blaze.View(\"lookup:endpoint\", function() {\n    return Spacebars.mustache(view.lookup(\"endpoint\"));\n  })), HTML.Raw(\"<br>\"), \"\\n\t\t\t\t \", HTML.Raw(\"<br>\"), \"\\n\t \t\t\t\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"searchTypeIsFullTextSearch\"));\n  }, function() {\n    return [ \"\\n\t \t\t\t\t\", HTML.P(\"Search Score : \", Blaze.View(\"lookup:textScore\", function() {\n      return Spacebars.mustache(view.lookup(\"textScore\"));\n    })), \"\\n\t \t\t\t\" ];\n  }), \"\\n\t\t\t\"), \"\\n\t\t\"), \"\\n\t\");\n}));\n","Template.wikiInSearchResults.helpers({\n\tmemberUsername: function (who) {\n\t\t\treturn Members.collection.findOne({accountId: who}).profile.nickname;\n\t},\n\tsearchTypeIsFullTextSearch: function () {\n\t\treturn (Session.get('searchType') === 'fullTextSearch');\n\t},\n\ttextScore: function () {\n\t\t//limit to 2 digits after comma :\n\t\treturn Math.round(this.score * 100) / 100;\n\t},\n});\n"]}