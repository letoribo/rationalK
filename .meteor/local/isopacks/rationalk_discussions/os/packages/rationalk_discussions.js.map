{"version":3,"sources":["rationalk:discussions/lib/methods.js","rationalk:discussions/lib/collections.js","rationalk:discussions/lib/routes.js","rationalk:discussions/lib/server/publications.js"],"names":[],"mappings":";;;;;;;;AAAA,mB;AACA,gB;AACA,+B;AACA,iC;AACA,G;AACA,+E;AACA,G;AACA,E;AACA,iC;AACA,G;AACA,4E;AACA,G;AACA,E;;AAEA,qC;AACA,2B;AACA,sB;AACA,C;;AAEA,mD;AACA,c;AACA,oE;AACA,iE;AACA,Y;AACA,E;;AAEA,gE;AACA,S;AACA,6B;AACA,wB;AACA,K;AACA,c;AACA,6B;AACA,Q;AACA,M;AACA,K;AACA,gD;AACA,8C;AACA,gB;AACA,O;AACA,c;AACA,E;;AAEA,qD;AACA,S;AACA,6B;AACA,wB;AACA,K;AACA,c;AACA,6B;AACA,Q;AACA,M;AACA,K;AACA,gD;AACA,8C;AACA,gB;AACA,O;AACA,c;AACA,E;;AAEA,6D;AACA,S;AACA,6B;AACA,qB;AACA,K;AACA,c;AACA,6B;AACA,Q;AACA,M;AACA,K;AACA,gD;AACA,8C;AACA,gB;AACA,K;AACA,I;AACA,Y;AACA,E;;AAEA,kD;AACA,S;AACA,6B;AACA,qB;AACA,K;AACA,c;AACA,6B;AACA,Q;AACA,M;AACA,K;AACA,gD;AACA,8C;AACA,gB;AACA,K;AACA,I;AACA,Y;AACA,E;;AAEA,kD;AACA,iF;AACA,E;AACA,+C;AACA,8E;AACA,E;;AAEA,uC;AACA,iF;AACA,E;AACA,oC;AACA,8E;AACA,E;;AAEA,gB;AACA,iD;AACA,qC;AACA,wB;AACA,iC;AACA,4B;AACA,2B;AACA,uC;AACA,O;;AAEA,uC;AACA,oD;AACA,G;AACA,G;AACA,4D;AACA,2B;AACA,gC;AACA,qB;AACA,uB;AACA,iC;AACA,4B;AACA,2B;AACA,oC;AACA,O;;AAEA,uC;AACA,gD;AACA,G;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC3IA,kD;AACA,4C;;AAEA,oB;AACA,iD;AACA,gD;AACA,kD;AACA,G;;AAEA,iB;AACA,iD;AACA,gD;AACA,kD;AACA,G;;AAEA,sB;AACA,qD;AACA,sE;AACA,E;AACA,O;AACA,uD;AACA,uE;AACA,G;AACA,E;AACA,kD;AACA,mE;AACA,E;AACA,O;AACA,oD;AACA,oE;AACA,G;AACA,E;AACA,C;;AAEA,8C;AACA,oD;;;;;;;;;;;;;;;;;;;ACnCA,8C;AACA,gC;AACA,wB;AACA,yB;AACA,c;AACA,wC;AACA,qC;AACA,oC;AACA,Q;AACA,M;AACA,K;;AAEA,oC;AACA,uB;AACA,uB;AACA,sC;AACA,uB;AACA,S;AACA,M;AACA,yB;AACA,c;AACA,wD;AACA,sE;AACA,oC;AACA,Q;AACA,M;AACA,K;;AAEA,yC;AACA,mM;;AAEA,0B;AACA,K;AACA,2B;AACA,6C;AACA,K;AACA,I;AACA,C;;;;;;;;;;;;;;;;;;;ACrCA,2C;AACA,4B;AACA,G;;AAEA,sD;AACA,8B;AACA,2B;AACA,sB;AACA,K;AACA,G;;AAEA,wC;AACA,yB;AACA,G;;AAEA,oE;AACA,8B;AACA,wB;AACA,+B;AACA,K;AACA,G","file":"/packages/rationalk_discussions.js","sourcesContent":["RKDiscussions = {};\nRKMessages = {};\nRKDiscussions.Collections = {};\nRKCore.searchResultsPackage.push(\n  {\n    name: \"RKDiscussions\", // RKDiscussions.findAllFullTextSearch should exists\n  }\n);\nRKCore.searchResultsPackage.push(\n  {\n    name: \"RKMessages\", // RKDiscussions.findAllFullTextSearch should exists\n  }\n);\n\nif (typeof(RKCore) !== 'undefined') {\n  console.log(\"RKCore : \");\n  console.log(RKCore);\n}\n\nRKDiscussions.findAllFullTextSearch = function () {\n  var sr = [];\n  sr = sr.concat(Discussions.find({}, {sort: {score: -1}}).fetch());\n  sr = sr.concat(Messages.find({}, {sort: {score: -1}}).fetch());\n  return sr;\n};\n\nRKDiscussions.findFullTextDiscussions = function (searchQuery) {\n  var sr;\n  check(searchQuery, String);\n  sr = Discussions.find(\n    {\n      $text: {\n        $search: searchQuery,\n      },\n    },\n    {\n      fields: { score: { $meta: 'textScore' } },\n      sort: { score: { $meta: 'textScore' } },\n      limit: 30,\n    });\n    return sr;\n};\n\nRKDiscussions.findFullText = function (searchQuery) {\n  var sr;\n  check(searchQuery, String);\n  sr = Discussions.find(\n    {\n      $text: {\n        $search: searchQuery,\n      },\n    },\n    {\n      fields: { score: { $meta: 'textScore' } },\n      sort: { score: { $meta: 'textScore' } },\n      limit: 30,\n    });\n    return sr;\n};\n\nRKDiscussions.findFullTextMessages = function (searchQuery) {\n  var sr;\n  check(searchQuery, String);\n  sr = Messages.find(\n    {\n      $text: {\n        $search: searchQuery,\n      },\n    },\n    {\n      fields: { score: { $meta: 'textScore' } },\n      sort: { score: { $meta: 'textScore' } },\n      limit: 30,\n    }\n  );\n  return sr;\n};\n\nRKMessages.findFullText = function (searchQuery) {\n  var sr;\n  check(searchQuery, String);\n  sr = Messages.find(\n    {\n      $text: {\n        $search: searchQuery,\n      },\n    },\n    {\n      fields: { score: { $meta: 'textScore' } },\n      sort: { score: { $meta: 'textScore' } },\n      limit: 30,\n    }\n  );\n  return sr;\n};\n\nRKDiscussions.findDummyDiscussions = function () {\n  return Discussions.find({$text: { $search: \"somethingthatyouwillneverfind\" }});\n};\nRKDiscussions.findDummyMessages = function () {\n  return Messages.find({$text: { $search: \"somethingthatyouwillneverfind\" }});\n};\n\nRKDiscussions.findDummy = function () {\n  return Discussions.find({$text: { $search: \"somethingthatyouwillneverfind\" }});\n};\nRKMessages.findDummy = function () {\n  return Messages.find({$text: { $search: \"somethingthatyouwillneverfind\" }});\n};\n\nMeteor.methods({\n\tcreateDiscussion: function (discussionSubject) {\n    check(discussionSubject, String);\n    Discussions.insert({\n      subject: discussionSubject,\n      createdAt: new Date(),\n      who: Meteor.userId(),\n      searchResultFromDiscussion: true,\n    });\n\n\t\tif (typeof(toastr) !== 'undefined') {\n\t\t\ttoastr.success('Discussion succesfully created');\n\t\t}\n\t},\n  addMessageToDiscussion: function (message, discussionId) {\n    check(message, String);\n    check(discussionId, String);\n    Messages.insert({\n      message: message,\n      discussionId: discussionId,\n      createdAt: new Date(),\n      who: Meteor.userId(),\n      searchResultFromMessage: true,\n    });\n\n\t\tif (typeof(toastr) !== 'undefined') {\n\t\t\ttoastr.success('Message succesfully posted');\n\t\t}\n\t},\n});\n","Discussions = new Mongo.Collection('discussions');\nMessages = new Mongo.Collection('messages');\n\nDiscussions.allow( {\n\t\tinsert: function (userId) {return !! userId; },\n\t\tupdate: function (userId) {return !!userId; },\n    remove: function (userId) {return !!userId; },\n});\n\nMessages.allow( {\n\t\tinsert: function (userId) {return !! userId; },\n\t\tupdate: function (userId) {return !!userId; },\n    remove: function (userId) {return !!userId; },\n});\n\nif (Meteor.isServer) {\n\tif (typeof Discussions.createIndex === 'function') {\n\t\tDiscussions.createIndex({ subject: \"text\" }, { name: \"TextIndex\" });\n\t}\n\telse {\n\t\tif (typeof Discussions._ensureIndex === 'function') {\n\t\t\tDiscussions._ensureIndex( { subject: \"text\" }, {name: \"TextIndex\"});\n\t\t}\n\t}\n\tif (typeof Messages.createIndex === 'function') {\n\t\tMessages.createIndex({ message: \"text\" }, { name: \"TextIndex\" });\n\t}\n\telse {\n\t\tif (typeof Messages._ensureIndex === 'function') {\n\t\t\tMessages._ensureIndex( { message: \"text\" }, {name: \"TextIndex\"});\n\t\t}\n\t}\n}\n\nRKDiscussions.Collections.Messages = Messages;\nRKDiscussions.Collections.Discussions = Discussions;\n","if (Meteor.settings.public.show.discussions) {\n  Router.route(\"/discussions\", {\n    name: \"discussions\",\n    waitOn: function () {\n      return [\n        Meteor.subscribe(\"discussions\"),\n        Meteor.subscribe(\"messages\"),\n        Meteor.subscribe(\"members\"),\n      ];\n    },\n  });\n\n  Router.route(\"/discussion/:_id\", {\n    name: \"discussion\",\n    data: function () {\n      return Discussions.findOne({}, {\n        reactive: true,\n      });\n    },\n    waitOn: function () {\n      return [\n        Meteor.subscribe(\"discussion\", this.params._id),\n        Meteor.subscribe(\"messagesinthisdiscussion\", this.params._id),\n        Meteor.subscribe(\"members\"),\n      ];\n    },\n  });\n\n  url = Router.routes.discussions.path();\n  menuHTML = new Spacebars.SafeString('<li><a href=\"' + url + '\" title=\"Ban emails, start discussions !\"><strong><span class=\"glyphicon glyphicon-comment\"></span></strong> Discussions</a></li>');\n\n  RKCore.packageMenu.push(\n    {\n      \"menuHTML\": menuHTML,\n      \"fromPackage\": \"rationalk:discussions\",\n    }\n  );\n}\n","Meteor.publish(\"discussions\", function () {\n  return Discussions.find();\n});\n\nMeteor.publish(\"discussion\", function (discussionId) {\n  check(discussionId, String);\n  return Discussions.find({\n    _id: discussionId,\n  });\n});\n\nMeteor.publish(\"messages\", function () {\n  return Messages.find();\n});\n\nMeteor.publish(\"messagesinthisdiscussion\", function (discussionId) {\n  check(discussionId, String);\n  return Messages.find({\n    discussionId: discussionId,\n  });\n});\n"]}